# AndroidWorld

[![Unittests](https://github.com/google-research/android_world/actions/workflows/pytest.yml/badge.svg)](https://github.com/google-research/android_world/actions/workflows/pytest.yml)

<p align="center">
<a href="https://google-research.github.io/android_world/">Website</a> ‚Ä¢
<a href="https://arxiv.org/pdf/2405.14573">Paper</a>
</p>

![Overview](assets/overview.png)

**AndroidWorld** is an environment for building and benchmarking autonomous computer control agents.

It runs on a live Android emulator and contains a highly reproducible benchmark of 116 hand-crafted tasks across 20 apps, which are dynamically instantiated with randomly-generated parameters to create millions of unique task variations.

In addition to the built-in tasks, AndroidWorld also supports the popular web benchmark, MiniWoB++ from [Liu et al.](http://arxiv.org/abs/1802.08802).

Key features of AndroidWorld include:

* üìù **116 diverse tasks** across 20 real-world apps
* üé≤ **Dynamic task instantiation** for millions of unique variations
* üèÜ **Durable reward signals** for reliable evaluation
* üåê **Open environment** with access to millions of Android apps and websites
* üíæ **Lightweight footprint** (2 GB memory, 8 GB disk)
* üîß **Extensible design** to easily add new tasks and benchmarks
* üñ•Ô∏è **Integration with MiniWoB++** web-based tasks

See demo videos on our [website](https://google-research.github.io/android_world/).

## Installation

1. Set up the Android Emulator
   1. Download Android Studio [here](https://developer.android.com/studio?gad_source=1&gclid=Cj0KCQjw3ZayBhDRARIsAPWzx8oLcadBD0vAq8xmUutaunLGSzhgEtLz4xVZ_SpV4G0xJazS7LxQkDsaAuveEALw_wcB&gclsrc=aw.ds)
   2. Create an Android Virtual Device (AVD) by following these instructions. For hardware select **Pixel 6**, for System Image select **Tiramisu, API Level 33**, and choose AVD name as **AndroidWorldAvd**. [Watch the setup video.](https://github.com/google-research/android_world/assets/162379927/efc33980-8b36-44be-bb2b-a92d4c334a50)

1. Launch the Android Emulator from the command line

    Launch the emulator from the command line, not using the Android Studio UI, with the `-grpc 8554` flag which is needed communication with accessibility forwarding app.

    ```bash
    # Typically it's located in ~/Android/Sdk/emulator/emulator or
    # ~/Library/Android/sdk/emulator/emulator
    EMULATOR_NAME=AndroidWorldAvd # From previous step
    ~/Library/Android/sdk/emulator/emulator -avd $EMULATOR_NAME -no-snapshot -grpc 8554
    ```

1. [Optional] It's recommended to use `conda`, which you can download [here](https://docs.anaconda.com/free/miniconda/miniconda-install/).

    ```
    conda create -n android_world python=3.11.8
    conda activate android_world
    ```

1. Install the latest [AndroidEnv](https://github.com/google-deepmind/android_env):

    ```python
    git clone https://github.com/google-deepmind/android_env.git
    cd android_env
    python setup.py install
    ```

1. Install AndroidWorld. *Note: Python 3.11 or above is required.*

    ```python
    git clone https://github.com/google-research/android_world.git
    cd ./android_world
    pip install -r requirements.txt
    python setup.py install
    ```

1. Add model provider APIs as environment variables.

    ```bash
    # Add to .bashrc.
    export OPENAI_API_KEY=your-key
    export GCP_API_KEY=your-key
    ```

1. Install `ffmpeg`, if not already installed.

    ```bash
    # Linux (Ubuntu/Debian)
    # sudo apt update && sudo apt install ffmpeg

    # macOS
    brew install ffmpeg
    ```

## Quickstart

Run the `minimal_task_runner.py` script to see the basic mechanics of AndroidWorld components. It initializes the environment, sets up a task, and runs the default agent, M3A, on it.
```bash
python minimal_task_runner.py --task=ContactsAddContact
```

If you don't specify a task, a random task will be selected. *NOTE: If you want to try open-source apps, i.e not included with Android OS, please run `--perform_emulator_setup` in the script below.*

## Run the benchmark

```bash
python run.py \
  --suite_family=android_world \
  --agent_name=t3a_gpt4 \
  --perform_emulator_setup \
  --tasks=ContactsAddContact,ClockStopWatchRunning \  # Optional: Just run on a subset.
```

The first time you run this script, you must install the necessary apps and set permissions by specifying `--perform_emulator_setup`. This is a one-time setup. It may take several minutes depending on the connection speed.

Above we specify the optional `--tasks` flag to run on a subset of tasks. Leave it empty to run on the entire AndroidWorld suite.

The `n_task_combinations` argument specifies how many parameter permutations to use for each task. For example, for an SMS task, it would correspond to different phone number/message combinations for each run.

If a run fails part-way through, you can resume it by re-running the script with the `--checkpoint_dir` flag pointing to the output directory from the original run.

## Running MiniWoB++ tasks

To run the MiniWoB++ web-based tasks in AndroidWorld, simply set
`--suite_family=miniwob` in the command above.

A key advantage of running MiniWoB++ tasks is that common input elements are
rendered as native, commonly used Android UI widgets, rather than as HTML. Thus agents must learn to use universal
widgets such as time- and date-pickers:

<p align="center">
   <img src="assets/miniwob.png" style="width:30%">
</p>

## Create your own agent

In addition to the agents we provide [here](https://github.com/google-research/android_world/tree/main/android_world/agents), you can also easily create your own agent and run the benchmark with it as follows.

1. Create an agent class that inherits from [EnvironmentInteractingAgent](https://github.com/google-research/android_world/blob/6e4feb00702735c9a7485f4ae714528a058cb2b7/android_world/agents/base_agent.py#L39C1-L39C44) and implement the [step](https://github.com/google-research/android_world/blob/6e4feb00702735c9a7485f4ae714528a058cb2b7/android_world/agents/base_agent.py#L116) method.
In the current workflow, the agent tries to complete a task in a for loop. In each round, the [step](https://github.com/google-research/android_world/blob/6e4feb00702735c9a7485f4ae714528a058cb2b7/android_world/agents/base_agent.py#L116) method will be called and this is where you implement your agent's logic. A typical approach involves first gathering information like the current screenshot, the UI elements (like buttons, icons) through the AndroidEnv instance within the agent, selecting one of the [supported actions](https://github.com/google-research/android_world/blob/main/android_world/env/json_action.py), executing it through the AndroidEnv and returning an [AgentInteractionResult](https://github.com/google-research/android_world/blob/6e4feb00702735c9a7485f4ae714528a058cb2b7/android_world/agents/base_agent.py#L26). The `done` property on AgentInteractionResult should be set to true to indicate that the task is finished.

2. Import your agent in [run.py](https://github.com/google-research/android_world/blob/main/run.py) and also add it into the [_get_agent](https://github.com/google-research/android_world/blob/15471441ac306ff08bca87454b1b546ae81db7af/run.py#L147) method which takes in your agent's name and return an instance of it.

3. Now you can run the benchmark with your new agent using the command above with the `agent_name` flag changed to your agent's name.

## Adding new tasks

Please see [the guide](https://github.com/google-research/android_world/blob/main/docs/tasks_guide.md) on adding new tasks to AndroidWorld.

*This is not an officially supported Google product.*


# How to Contribute

We'd love to accept your patches and contributions to this project. There are
just a few small guidelines you need to follow.

## Contributor License Agreement

Contributions to this project must be accompanied by a Contributor License
Agreement (CLA). You (or your employer) retain the copyright to your
contribution; this simply gives us permission to use and redistribute your
contributions as part of the project. Head over to
<https://cla.developers.google.com/> to see your current agreements on file or
to sign a new one.

You generally only need to submit a CLA once, so if you've already submitted one
(even if it was for a different project), you probably don't need to do it
again.

## Code Reviews

All submissions, including submissions by project members, require review. We
use GitHub pull requests for this purpose. Consult
[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more
information on using pull requests.

## Community Guidelines

This project follows
[Google's Open Source Community Guidelines](https://opensource.google/conduct/).


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Runs a single task.

The minimal_run.py module is used to run a single task, it is a minimal version
of the run.py module. A task can be specified, otherwise a random task is
selected.
"""

from collections.abc import Sequence
import os
import random
from typing import Type

from absl import app
from absl import flags
from absl import logging
from android_world import registry
from android_world.agents import infer
from android_world.agents import t3a
from android_world.env import env_launcher
from android_world.task_evals import task_eval

logging.set_verbosity(logging.WARNING)

os.environ['GRPC_VERBOSITY'] = 'ERROR'  # Only show errors
os.environ['GRPC_TRACE'] = 'none'  # Disable tracing


def _find_adb_directory() -> str:
  """Returns the directory where adb is located."""
  potential_paths = [
      os.path.expanduser('~/Library/Android/sdk/platform-tools/adb'),
      os.path.expanduser('~/Android/Sdk/platform-tools/adb'),
  ]
  for path in potential_paths:
    if os.path.isfile(path):
      return path
  raise EnvironmentError(
      'adb not found in the common Android SDK paths. Please install Android'
      " SDK and ensure adb is in one of the expected directories. If it's"
      ' already installed, point to the installed location.'
  )


_ADB_PATH = flags.DEFINE_string(
    'adb_path',
    _find_adb_directory(),
    'Path to adb. Set if not installed through SDK.',
)
_EMULATOR_SETUP = flags.DEFINE_boolean(
    'perform_emulator_setup',
    False,
    'Whether to perform emulator setup. This must be done once and only once'
    ' before running Android World. After an emulator is setup, this flag'
    ' should always be False.',
)
_DEVICE_CONSOLE_PORT = flags.DEFINE_integer(
    'console_port',
    5554,
    'The console port of the running Android device. This can usually be'
    ' retrieved by looking at the output of `adb devices`. In general, the'
    ' first connected device is port 5554, the second is 5556, and'
    ' so on.',
)

_TASK = flags.DEFINE_string(
    'task',
    None,
    'A specific task to run.',
)


def _main() -> None:
  """Runs a single task."""
  env = env_launcher.load_and_setup_env(
      console_port=_DEVICE_CONSOLE_PORT.value,
      emulator_setup=_EMULATOR_SETUP.value,
      adb_path=_ADB_PATH.value,
  )
  env_launcher.verify_api_level(env)
  env.reset(go_home=True)
  task_registry = registry.TaskRegistry()
  aw_registry = task_registry.get_registry(task_registry.ANDROID_WORLD_FAMILY)
  if _TASK.value:
    if _TASK.value not in aw_registry:
      raise ValueError('Task {} not found in registry.'.format(_TASK.value))
    task_type: Type[task_eval.TaskEval] = aw_registry[_TASK.value]
  else:
    task_type: Type[task_eval.TaskEval] = random.choice(
        list(aw_registry.values())
    )
  params = task_type.generate_random_params()
  task = task_type(params)
  task.initialize_task(env)
  agent = t3a.T3A(env, infer.Gpt4Wrapper('gpt-4-turbo-2024-04-09'))

  print('Goal: ' + str(task.goal))
  is_done = False
  for _ in range(task.complexity * 10):
    response = agent.step(task.goal)
    if response.done:
      is_done = True
      break
  agent_successful = is_done and task.is_successful(env) == 1
  print(
      f'{"Task Successful ‚úÖ" if agent_successful else "Task Failed ‚ùå"};'
      f' {task.goal}'
  )
  env.close()


def main(argv: Sequence[str]) -> None:
  del argv
  _main()


if __name__ == '__main__':
  app.run(main)


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Run eval suite.

The run.py module is used to run a suite of tasks, with configurable task
combinations, environment setups, and agent configurations. You can run specific
tasks or all tasks in the suite and customize various settings using the
command-line flags.
"""

from collections.abc import Sequence
import os

from absl import app
from absl import flags
from absl import logging
from android_world import checkpointer as checkpointer_lib
from android_world import registry
from android_world import suite_utils
from android_world.agents import base_agent
from android_world.agents import human_agent
from android_world.agents import infer
from android_world.agents import m3a
from android_world.agents import random_agent
from android_world.agents import seeact
from android_world.agents import t3a
from android_world.env import env_launcher
from android_world.env import interface

logging.set_verbosity(logging.WARNING)

os.environ['GRPC_VERBOSITY'] = 'ERROR'  # Only show errors
os.environ['GRPC_TRACE'] = 'none'  # Disable tracing


def _find_adb_directory() -> str:
  """Returns the directory where adb is located."""
  potential_paths = [
      os.path.expanduser('~/Library/Android/sdk/platform-tools/adb'),
      os.path.expanduser('~/Android/Sdk/platform-tools/adb'),
  ]
  for path in potential_paths:
    if os.path.isfile(path):
      return path
  raise EnvironmentError(
      'adb not found in the common Android SDK paths. Please install Android'
      " SDK and ensure adb is in one of the expected directories. If it's"
      ' already installed, point to the installed location.'
  )


_ADB_PATH = flags.DEFINE_string(
    'adb_path',
    _find_adb_directory(),
    'Path to adb. Set if not installed through SDK.',
)
_EMULATOR_SETUP = flags.DEFINE_boolean(
    'perform_emulator_setup',
    False,
    'Whether to perform emulator setup. This must be done once and only once'
    ' before running Android World. After an emulator is setup, this flag'
    ' should always be False.',
)
_DEVICE_CONSOLE_PORT = flags.DEFINE_integer(
    'console_port',
    5554,
    'The console port of the running Android device. This can usually be'
    ' retrieved by looking at the output of `adb devices`. In general, the'
    ' first connected device is port 5554, the second is 5556, and'
    ' so on.',
)

_SUITE_FAMILY = flags.DEFINE_enum(
    'suite_family',
    registry.TaskRegistry.ANDROID_WORLD_FAMILY,
    [
        # Families from the paper.
        registry.TaskRegistry.ANDROID_WORLD_FAMILY,
        registry.TaskRegistry.MINIWOB_FAMILY_SUBSET,
        # Other families for more testing.
        registry.TaskRegistry.MINIWOB_FAMILY,
        registry.TaskRegistry.ANDROID_FAMILY,
        registry.TaskRegistry.INFORMATION_RETRIEVAL_FAMILY,
    ],
    'Suite family to run. See registry.py for more information.',
)
_TASK_RANDOM_SEED = flags.DEFINE_integer(
    'task_random_seed', 30, 'Random seed for task randomness.'
)

_TASKS = flags.DEFINE_list(
    'tasks',
    None,
    'List of specific tasks to run in the given suite family. If None, run all'
    ' tasks in the suite family.',
)
_N_TASK_COMBINATIONS = flags.DEFINE_integer(
    'n_task_combinations',
    1,
    'Number of task instances to run for each task template.',
)

_CHECKPOINT_DIR = flags.DEFINE_string(
    'checkpoint_dir',
    '',
    'The directory to save checkpoints and resume evaluation from. If the'
    ' directory contains existing checkpoint files, evaluation will resume from'
    ' the latest checkpoint. If the directory is empty or does not exist, a new'
    ' directory will be created.',
)
_OUTPUT_PATH = flags.DEFINE_string(
    'output_path',
    os.path.expanduser('~/android_world/runs'),
    'The path to save results to if not resuming from a checkpoint is not'
    ' provided.',
)

# Agent specific.
_AGENT_NAME = flags.DEFINE_string('agent_name', 'm3a_gpt4v', help='Agent name.')

_FIXED_TASK_SEED = flags.DEFINE_boolean(
    'fixed_task_seed',
    False,
    'Whether to use the same task seed when running multiple task combinations'
    ' (n_task_combinations > 1).',
)


# MiniWoB is very lightweight and new screens/View Hierarchy load quickly.
_MINIWOB_TRANSITION_PAUSE = 0.2

# Additional guidelines for the MiniWob tasks.
_MINIWOB_ADDITIONAL_GUIDELINES = [
    (
        'This task is running in a mock app, you must stay in this app and'
        ' DO NOT use the `navigate_home` action.'
    ),
]


def _get_agent(
    env: interface.AsyncEnv,
    family: str | None = None,
) -> base_agent.EnvironmentInteractingAgent:
  """Gets agent."""
  print('Initializing agent...')
  agent = None
  if _AGENT_NAME.value == 'human_agent':
    agent = human_agent.HumanAgent(env)
  elif _AGENT_NAME.value == 'random_agent':
    agent = random_agent.RandomAgent(env)
  # Gemini.
  elif _AGENT_NAME.value == 'm3a_gemini_gcp':
    agent = m3a.M3A(
        env, infer.GeminiGcpWrapper(model_name='gemini-1.5-pro-latest')
    )
  elif _AGENT_NAME.value == 't3a_gemini_gcp':
    agent = t3a.T3A(
        env, infer.GeminiGcpWrapper(model_name='gemini-1.5-pro-latest')
    )
  # GPT.
  elif _AGENT_NAME.value == 't3a_gpt4':
    agent = t3a.T3A(env, infer.Gpt4Wrapper('gpt-4-turbo-2024-04-09'))
  elif _AGENT_NAME.value == 'm3a_gpt4v':
    agent = m3a.M3A(env, infer.Gpt4Wrapper('gpt-4-turbo-2024-04-09'))
  # SeeAct.
  elif _AGENT_NAME.value == 'seeact':
    agent = seeact.SeeAct(env)

  if not agent:
    raise ValueError(f'Unknown agent: {_AGENT_NAME.value}')

  if (
      agent.name in ['M3A', 'T3A', 'SeeAct']
      and family
      and family.startswith('miniwob')
      and hasattr(agent, 'set_task_guidelines')
  ):
    agent.set_task_guidelines(_MINIWOB_ADDITIONAL_GUIDELINES)
  agent.name = _AGENT_NAME.value

  return agent


def _main() -> None:
  """Runs eval suite and gets rewards back."""
  env = env_launcher.load_and_setup_env(
      console_port=_DEVICE_CONSOLE_PORT.value,
      emulator_setup=_EMULATOR_SETUP.value,
      adb_path=_ADB_PATH.value,
  )
  env_launcher.verify_api_level(env)

  n_task_combinations = _N_TASK_COMBINATIONS.value
  task_registry = registry.TaskRegistry()
  suite = suite_utils.create_suite(
      task_registry.get_registry(family=_SUITE_FAMILY.value),
      n_task_combinations=n_task_combinations,
      seed=_TASK_RANDOM_SEED.value,
      tasks=_TASKS.value,
      use_identical_params=_FIXED_TASK_SEED.value,
  )
  suite.suite_family = _SUITE_FAMILY.value

  agent = _get_agent(env, _SUITE_FAMILY.value)

  if _SUITE_FAMILY.value.startswith('miniwob'):
    # MiniWoB pages change quickly, don't need to wait for screen to stabilize.
    agent.transition_pause = _MINIWOB_TRANSITION_PAUSE
  else:
    agent.transition_pause = None

  if _CHECKPOINT_DIR.value:
    checkpoint_dir = _CHECKPOINT_DIR.value
  else:
    checkpoint_dir = checkpointer_lib.create_run_directory(_OUTPUT_PATH.value)

  print(
      f'Starting eval with agent {_AGENT_NAME.value} and writing to'
      f' {checkpoint_dir}'
  )
  suite_utils.run(
      suite,
      agent,
      checkpointer=checkpointer_lib.IncrementalCheckpointer(checkpoint_dir),
      demo_mode=False,
  )
  print(
      f'Finished running agent {_AGENT_NAME.value} on {_SUITE_FAMILY.value}'
      f' family. Wrote to {checkpoint_dir}.'
  )
  env.close()


def main(argv: Sequence[str]) -> None:
  del argv
  _main()


if __name__ == '__main__':
  app.run(main)


absl-py==2.1.0
dm_env==1.6
fuzzywuzzy==0.18.0
google-generativeai==0.5.1
grpcio-tools
immutabledict==2.0.0
IPython
jsonschema==4.17.3
matplotlib==3.6.1
numpy==1.26.3
opencv-python
pandas==2.1.4
pydub
python-Levenshtein
pytest
requests
tenacity
termcolor

# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Setup file for AndroidWorld."""

import os

import pkg_resources
import setuptools
from setuptools.command import build_py

_ROOT_DIR = os.path.dirname(os.path.abspath(__file__))
_PACKAGE_PROTOS = (
    'android_world/task_evals/information_retrieval/proto/state.proto',
    'android_world/task_evals/information_retrieval/proto/task.proto',
)


class _GenerateProtoFiles(setuptools.Command):
  """Command to generate protobuf bindings for AndroidEnv protos."""

  descriptions = 'Generates Python protobuf bindings for AndroidEnv protos.'
  user_options = []

  def initialize_options(self):
    pass

  def finalize_options(self):
    pass

  def run(self):
    # Import grpc_tools here, after setuptools has installed setup_requires
    # dependencies.
    from grpc_tools import protoc  # pylint: disable=g-import-not-at-top

    grpc_protos_include = pkg_resources.resource_filename(
        'grpc_tools', '_proto'
    )

    for proto_path in _PACKAGE_PROTOS:
      proto_args = [
          'grpc_tools.protoc',
          '--proto_path={}'.format(grpc_protos_include),
          '--proto_path={}'.format(_ROOT_DIR),
          '--python_out={}'.format(_ROOT_DIR),
          '--grpc_python_out={}'.format(_ROOT_DIR),
          os.path.join(_ROOT_DIR, proto_path),
      ]
      if protoc.main(proto_args) != 0:
        raise RuntimeError('ERROR: {}'.format(proto_args))


class _BuildPy(build_py.build_py):
  """Generate protobuf bindings during the build_py stage."""

  def run(self):
    self.run_command('generate_protos')
    super().run()


setuptools.setup(
    name='android_world',
    package_data={'': ['proto/*.proto']},  # Copy protobuf files.
    packages=setuptools.find_packages(),
    setup_requires=['grpcio-tools'],
    cmdclass={
        'build_py': _BuildPy,
        'generate_protos': _GenerateProtoFiles,
    },
)


[{"name":"Anaa","code":"AAA","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Annaba Les Salines","code":"AAE","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Aalborg","code":"AAL","stateCode":"","countryCode":"DK","countryName":"Denmark"},{"name":"Mala Mala","code":"AAM","stateCode":"","countryCode":"ZA","countryName":"South Africa"},{"name":"Al Ain","code":"AAN","stateCode":"","countryCode":"AE","countryName":"United Arab Emirates"},{"name":"Anapa","code":"AAQ","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Aarhus Tirstrup","code":"AAR","stateCode":"","countryCode":"DK","countryName":"Denmark"},{"name":"Altay","code":"AAT","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Araxa","code":"AAX","stateCode":"MG","countryCode":"BR","countryName":"Brazil"},{"name":"Al Ghaydah","code":"AAY","stateCode":"","countryCode":"YE","countryName":"Yemen"},{"name":"Abakan","code":"ABA","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Albacete Los Llanos","code":"ABC","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Abadan","code":"ABD","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Allentown Bethlehem Easton Lehigh Valley Intl","code":"ABE","stateCode":"PA","countryCode":"US","countryName":"United States"},{"name":"Abilene Regional Airport","code":"ABI","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Abidjan Felix Houphouet Boigny","code":"ABJ","stateCode":"","countryCode":"CI","countryName":"Ivory Coast"},{"name":"Kabri Dar","code":"ABK","stateCode":"","countryCode":"ET","countryName":"Ethiopia"},{"name":"Ambler","code":"ABL","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Bamaga","code":"ABM","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Albuquerque International","code":"ABQ","stateCode":"NM","countryCode":"US","countryName":"United States"},{"name":"Aberdeen Municipal","code":"ABR","stateCode":"SD","countryCode":"US","countryName":"United States"},{"name":"Abu Simbel","code":"ABS","stateCode":"","countryCode":"EG","countryName":"Egypt"},{"name":"Al Baha Al Aqiq","code":"ABT","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Abuja International","code":"ABV","stateCode":"","countryCode":"NG","countryName":"Nigeria"},{"name":"Albury","code":"ABX","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Albany Dougherty County","code":"ABY","stateCode":"GA","countryCode":"US","countryName":"United States"},{"name":"Aberdeen Dyce","code":"ABZ","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Acapulco Juan Alvarez International","code":"ACA","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Accra Kotoka","code":"ACC","stateCode":"","countryCode":"GH","countryName":"Ghana"},{"name":"Lanzarote","code":"ACE","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Altenrhein","code":"ACH","stateCode":"","countryCode":"CH","countryName":"Switzerland"},{"name":"Alderney The Blaye","code":"ACI","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Nantucket Memorial","code":"ACK","stateCode":"MA","countryCode":"US","countryName":"United States"},{"name":"Sahand","code":"ACP","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Achinsk","code":"ACS","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Waco Metropolitan Area","code":"ACT","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Eureka Arcata","code":"ACV","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Atlantic City Intl","code":"ACY","stateCode":"NJ","countryCode":"US","countryName":"United States"},{"name":"P Zabol A","code":"ACZ","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Adana","code":"ADA","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Izmir Adnan Menderes Arpt","code":"ADB","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Addis Ababa Bole","code":"ADD","stateCode":"","countryCode":"ET","countryName":"Ethiopia"},{"name":"Aden International","code":"ADE","stateCode":"","countryCode":"YE","countryName":"Yemen"},{"name":"Adiyaman","code":"ADF","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Amman Civil   Marka Airport","code":"ADJ","stateCode":"","countryCode":"JO","countryName":"Jordan"},{"name":"Adak Island NS","code":"ADK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Adelaide","code":"ADL","stateCode":"SA","countryCode":"AU","countryName":"Australia"},{"name":"Kodiak Airport","code":"ADQ","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Ardabil","code":"ADU","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"St Andrews Leuchars","code":"ADX","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"San Andres Island","code":"ADZ","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Abecher","code":"AEH","stateCode":"","countryCode":"TD","countryName":"Chad"},{"name":"Buenos Aires Arpt Jorge Newbery","code":"AEP","stateCode":"BA","countryCode":"AR","countryName":"Argentina"},{"name":"Sochi International Airport","code":"AER","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Aalesund Vigra","code":"AES","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Allakaket","code":"AET","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Alexandria Internation","code":"AEX","stateCode":"LA","countryCode":"US","countryName":"United States"},{"name":"Akureyri","code":"AEY","stateCode":"","countryCode":"IS","countryName":"Iceland"},{"name":"San Rafael","code":"AFA","stateCode":"MD","countryCode":"AR","countryName":"Argentina"},{"name":"Alta Floresta","code":"AFL","stateCode":"MT","countryCode":"BR","countryName":"Brazil"},{"name":"Afutara Aerodrome","code":"AFT","stateCode":"","countryCode":"SB","countryName":"Solomon Islands"},{"name":"Agadir Almassira","code":"AGA","stateCode":"","countryCode":"MA","countryName":"Morocco"},{"name":"Agen La Garenne","code":"AGF","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Helsingborg Angelholm","code":"AGH","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Tasiilaq","code":"AGM","stateCode":"","countryCode":"GL","countryName":"Greenland"},{"name":"Angoon","code":"AGN","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Malaga","code":"AGP","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Agra Kheria","code":"AGR","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Augusta Bush Field","code":"AGS","stateCode":"GA","countryCode":"US","countryName":"United States"},{"name":"Ciudad del Este Alejo Garcia","code":"AGT","stateCode":"","countryCode":"PY","countryName":"Paraguay"},{"name":"Aguascalientes","code":"AGU","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Acarigua","code":"AGV","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"Agatti Island","code":"AGX","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Abha","code":"AHB","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Herlong Amedee AAF","code":"AHC","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Ahe Airport","code":"AHE","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Alghero Fertilia","code":"AHO","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Ahuas","code":"AHS","stateCode":"","countryCode":"HN","countryName":"Honduras"},{"name":"Al Hoceima Charif Al Idrissi","code":"AHU","stateCode":"","countryCode":"MA","countryName":"Morocco"},{"name":"Alliance","code":"AIA","stateCode":"NE","countryCode":"US","countryName":"United States"},{"name":"Wainwright","code":"AIN","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Aitutaki","code":"AIT","stateCode":"","countryCode":"CK","countryName":"Cook Islands"},{"name":"Atiu Island","code":"AIU","stateCode":"","countryCode":"CK","countryName":"Cook Islands"},{"name":"Atlantic City Bader Field","code":"AIY","stateCode":"NJ","countryCode":"US","countryName":"United States"},{"name":"Ajaccio Campo Dell Oro","code":"AJA","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Jouf","code":"AJF","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Agri","code":"AJI","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Aizawl","code":"AJL","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Anjouan Ouani","code":"AJN","stateCode":"","countryCode":"KM","countryName":"Comoros"},{"name":"Sabre Tech Off line Point","code":"AJP","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Arvidsjaur","code":"AJR","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Aracaju","code":"AJU","stateCode":"SE","countryCode":"BR","countryName":"Brazil"},{"name":"Ankang","code":"AKA","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Atka","code":"AKB","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kufrah","code":"AKF","stateCode":"","countryCode":"LY","countryName":"Libya"},{"name":"Akiak","code":"AKI","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Asahikawa","code":"AKJ","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Akhiok SPB","code":"AKK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Auckland Jean Batten","code":"AKL","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"King Salmon","code":"AKN","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Anaktuvuk","code":"AKP","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Auki Gwaunaruu","code":"AKS","stateCode":"","countryCode":"SB","countryName":"Solomon Islands"},{"name":"Aksu","code":"AKU","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Akulivik","code":"AKV","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Aktyubinsk","code":"AKX","stateCode":"","countryCode":"KZ","countryName":"Kazakhstan"},{"name":"Sittwe Civil","code":"AKY","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Almaty","code":"ALA","stateCode":"","countryCode":"KZ","countryName":"Kazakhstan"},{"name":"Albany International","code":"ALB","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"Alicante","code":"ALC","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Alta","code":"ALF","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Algiers Houari Boumediene","code":"ALG","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Albany","code":"ALH","stateCode":"WA","countryCode":"AU","countryName":"Australia"},{"name":"Alamogordo Municipal","code":"ALM","stateCode":"NM","countryCode":"US","countryName":"United States"},{"name":"Waterloo","code":"ALO","stateCode":"IA","countryCode":"US","countryName":"United States"},{"name":"Alamosa Municipal","code":"ALS","stateCode":"CO","countryCode":"US","countryName":"United States"},{"name":"Walla Walla","code":"ALW","stateCode":"WA","countryCode":"US","countryName":"United States"},{"name":"Alexandria El Nohza","code":"ALY","stateCode":"","countryCode":"EG","countryName":"Egypt"},{"name":"Alitak SPB","code":"ALZ","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Amarillo International","code":"AMA","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Ahmedabad","code":"AMD","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Arba Mintch","code":"AMH","stateCode":"","countryCode":"ET","countryName":"Ethiopia"},{"name":"Mataram Selaparang","code":"AMI","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Amman Queen Alia Intl","code":"AMM","stateCode":"","countryCode":"JO","countryName":"Jordan"},{"name":"Ambon Pattimura","code":"AMQ","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Amsterdam Schiphol","code":"AMS","stateCode":"","countryCode":"NL","countryName":"Netherlands"},{"name":"Amderma","code":"AMV","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Ambatomainty","code":"AMY","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Anchorage International","code":"ANC","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Angers Marce","code":"ANE","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Antofagasta Cerro Moreno","code":"ANF","stateCode":"","countryCode":"CL","countryName":"Chile"},{"name":"Aniak","code":"ANI","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Ankara Etimesgut","code":"ANK","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Antalaha Antsirabato","code":"ANM","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Antwerp Deurne","code":"ANR","stateCode":"","countryCode":"BE","countryName":"Belgium"},{"name":"Andahuaylas","code":"ANS","stateCode":"","countryCode":"PE","countryName":"Peru"},{"name":"Antigua VC Bird Intl","code":"ANU","stateCode":"","countryCode":"AG","countryName":"Antigua And Barbuda"},{"name":"Anvik","code":"ANV","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Andenes","code":"ANX","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Eskisehir Anadolu University","code":"AOE","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Ancona Falconara","code":"AOI","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Aomori","code":"AOJ","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Karpathos","code":"AOK","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Altoona Martinsburg","code":"AOO","stateCode":"PA","countryCode":"US","countryName":"United States"},{"name":"Alor Setar","code":"AOR","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Amook","code":"AOS","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Denver Arapahoe Co","code":"APA","stateCode":"CO","countryCode":"US","countryName":"United States"},{"name":"Naples","code":"APF","stateCode":"FL","countryCode":"US","countryName":"United States"},{"name":"Apataki","code":"APK","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Nampula","code":"APL","stateCode":"","countryCode":"MZ","countryName":"Mozambique"},{"name":"Alpena County Regional","code":"APN","stateCode":"MI","countryCode":"US","countryName":"United States"},{"name":"Apartado","code":"APO","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Apia Faleolo","code":"APW","stateCode":"","countryCode":"WS","countryName":"Samoa"},{"name":"Anqing","code":"AQG","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Qaisumah","code":"AQI","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Aqaba King Hussein Intl","code":"AQJ","stateCode":"","countryCode":"JO","countryName":"Jordan"},{"name":"Arequipa Rodriguez Ballon","code":"AQP","stateCode":"","countryCode":"PE","countryName":"Peru"},{"name":"New Iberia Acadiana Regional","code":"ARA","stateCode":"LA","countryCode":"US","countryName":"United States"},{"name":"Arctic Village","code":"ARC","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Arkhangelsk","code":"ARH","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Arica Chacalluta","code":"ARI","stateCode":"","countryCode":"CL","countryName":"Chile"},{"name":"Arusha","code":"ARK","stateCode":"","countryCode":"TZ","countryName":"Tanzania"},{"name":"Armidale","code":"ARM","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Stockholm Arlanda","code":"ARN","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Watertown","code":"ART","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"Aracatuba","code":"ARU","stateCode":"SP","countryCode":"BR","countryName":"Brazil"},{"name":"Minocqua Noble F Lee","code":"ARV","stateCode":"WI","countryCode":"US","countryName":"United States"},{"name":"Arad","code":"ARW","stateCode":"","countryCode":"RO","countryName":"Romania"},{"name":"Assab","code":"ASA","stateCode":"","countryCode":"ER","countryName":"Eritrea"},{"name":"Ashgabat","code":"ASB","stateCode":"","countryCode":"TM","countryName":"Turkmenistan"},{"name":"Andros Town","code":"ASD","stateCode":"","countryCode":"BS","countryName":"Bahamas"},{"name":"Aspen","code":"ASE","stateCode":"CO","countryCode":"US","countryName":"United States"},{"name":"Astrakhan","code":"ASF","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Georgetown Wideawake Fld","code":"ASI","stateCode":"","countryCode":"SH","countryName":"Saint Helena"},{"name":"Amami O Shima","code":"ASJ","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Asmara International","code":"ASM","stateCode":"","countryCode":"ER","countryName":"Eritrea"},{"name":"Asosa","code":"ASO","stateCode":"","countryCode":"ET","countryName":"Ethiopia"},{"name":"Alice Springs","code":"ASP","stateCode":"NT","countryCode":"AU","countryName":"Australia"},{"name":"Kayseri","code":"ASR","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Asuncion Silvio Pettirossi","code":"ASU","stateCode":"","countryCode":"PY","countryName":"Paraguay"},{"name":"Amboseli","code":"ASV","stateCode":"","countryCode":"KE","countryName":"Kenya"},{"name":"Aswan","code":"ASW","stateCode":"","countryCode":"EG","countryName":"Egypt"},{"name":"Arthurs Town","code":"ATC","stateCode":"","countryCode":"BS","countryName":"Bahamas"},{"name":"Atoifi","code":"ATD","stateCode":"","countryCode":"SB","countryName":"Solomon Islands"},{"name":"Athens Eleftherios Venizelos","code":"ATH","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Atqasuk","code":"ATK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Atlanta Hartsfield Jackson","code":"ATL","stateCode":"GA","countryCode":"US","countryName":"United States"},{"name":"Altamira","code":"ATM","stateCode":"PA","countryCode":"BR","countryName":"Brazil"},{"name":"Amritsar Raja Sansi","code":"ATQ","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Atar Mouakchott","code":"ATR","stateCode":"","countryCode":"MR","countryName":"Mauritania"},{"name":"Atmautluak","code":"ATT","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Appleton International Airport","code":"ATW","stateCode":"WI","countryCode":"US","countryName":"United States"},{"name":"Watertown","code":"ATY","stateCode":"SD","countryCode":"US","countryName":"United States"},{"name":"Assiut","code":"ATZ","stateCode":"","countryCode":"EG","countryName":"Egypt"},{"name":"Aruba Reina Beatrix","code":"AUA","stateCode":"","countryCode":"AW","countryName":"Aruba"},{"name":"Arauca","code":"AUC","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Augusta","code":"AUG","stateCode":"ME","countryCode":"US","countryName":"United States"},{"name":"Abu Dhabi Intl","code":"AUH","stateCode":"","countryCode":"AE","countryName":"United Arab Emirates"},{"name":"Alakanuk","code":"AUK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Atuona","code":"AUQ","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Aurillac","code":"AUR","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Austin Bergstrom Intl","code":"AUS","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Aurukun Mission","code":"AUU","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Wausau","code":"AUW","stateCode":"WI","countryCode":"US","countryName":"United States"},{"name":"Araguaina","code":"AUX","stateCode":"TO","countryCode":"BR","countryName":"Brazil"},{"name":"Aneityum","code":"AUY","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Asheville Asheville Regional Hendersonville","code":"AVL","stateCode":"NC","countryCode":"US","countryName":"United States"},{"name":"Avignon Caum","code":"AVN","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Scranton Wilkes Barre International","code":"AVP","stateCode":"PA","countryCode":"US","countryName":"United States"},{"name":"Avu Avu","code":"AVU","stateCode":"","countryCode":"SB","countryName":"Solomon Islands"},{"name":"Melbourne Avalon","code":"AVV","stateCode":"VI","countryCode":"AU","countryName":"Australia"},{"name":"Awaba","code":"AWB","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Aniwa","code":"AWD","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Ahwaz","code":"AWZ","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Anguilla Wallblake","code":"AXA","stateCode":"","countryCode":"AI","countryName":"Anguilla"},{"name":"Alexandroupolis Demokritos Airport","code":"AXD","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Armenia El Eden","code":"AXM","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Spring Point Springpoint Arpt","code":"AXP","stateCode":"","countryCode":"BS","countryName":"Bahamas"},{"name":"Arutua","code":"AXR","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Akita","code":"AXT","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Axum","code":"AXU","stateCode":"","countryCode":"ET","countryName":"Ethiopia"},{"name":"Ayacucho Yanamilla","code":"AYP","stateCode":"","countryCode":"PE","countryName":"Peru"},{"name":"Ayers Rock Connellan","code":"AYQ","stateCode":"NT","countryCode":"AU","countryName":"Australia"},{"name":"Antalya","code":"AYT","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Yazd","code":"AZD","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Andizhan","code":"AZN","stateCode":"","countryCode":"UZ","countryName":"Uzbekistan"},{"name":"Kalamazoo Battle Creek Intl","code":"AZO","stateCode":"MI","countryCode":"US","countryName":"United States"},{"name":"Adrar","code":"AZR","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Samana International","code":"AZS","stateCode":"","countryCode":"DO","countryName":"Dominican Republic"},{"name":"Baguio Loakan","code":"BAG","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Bahrain International","code":"BAH","stateCode":"","countryCode":"BH","countryName":"Bahrain"},{"name":"Batman","code":"BAL","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Barranquilla E Cortissoz","code":"BAQ","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Balalae","code":"BAS","stateCode":"","countryCode":"SB","countryName":"Solomon Islands"},{"name":"Bauru","code":"BAU","stateCode":"SP","countryCode":"BR","countryName":"Brazil"},{"name":"Baotou","code":"BAV","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Barnaul","code":"BAX","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Baia Mare","code":"BAY","stateCode":"","countryCode":"RO","countryName":"Romania"},{"name":"Balmaceda Teniente Vidal","code":"BBA","stateCode":"","countryCode":"CL","countryName":"Chile"},{"name":"Bhubaneswar","code":"BBI","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Kasane","code":"BBK","stateCode":"","countryCode":"BW","countryName":"Botswana"},{"name":"Bario","code":"BBN","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Berbera","code":"BBO","stateCode":"","countryCode":"SO","countryName":"Somalia"},{"name":"Blackbush","code":"BBS","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Bucharest Baneasa","code":"BBU","stateCode":"","countryCode":"RO","countryName":"Romania"},{"name":"Baracoa","code":"BCA","stateCode":"","countryCode":"CU","countryName":"Cuba"},{"name":"Bacolod","code":"BCD","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Barcaldine","code":"BCI","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Barra Colorado","code":"BCL","stateCode":"","countryCode":"CR","countryName":"Costa Rica"},{"name":"Bacau","code":"BCM","stateCode":"","countryCode":"RO","countryName":"Romania"},{"name":"Barcelona","code":"BCN","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Bermuda Bermuda International Hamilton","code":"BDA","stateCode":"","countryCode":"BM","countryName":"Bermuda"},{"name":"Bundaberg","code":"BDB","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Badu Island","code":"BDD","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Bandar Lengeh","code":"BDH","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Banjarmasin Sjamsudin Noor","code":"BDJ","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Hartford Springfield Windsor Locks Bradley International","code":"BDL","stateCode":"CT","countryCode":"US","countryName":"United States"},{"name":"Bandung Husein Sastranegara","code":"BDO","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Bhadrapur","code":"BDP","stateCode":"","countryCode":"NP","countryName":"Nepal"},{"name":"Vadodara","code":"BDQ","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Bridgeport Igor I Sikorsky Mem","code":"BDR","stateCode":"CT","countryCode":"US","countryName":"United States"},{"name":"Brindisi Papola Casale","code":"BDS","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Benbecula","code":"BEB","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Belgrade Beograd","code":"BEG","stateCode":"","countryCode":"RS","countryName":"Serbia"},{"name":"Belem Val De Cans","code":"BEL","stateCode":"PA","countryCode":"BR","countryName":"Brazil"},{"name":"Benghazi Benina Intl","code":"BEN","stateCode":"","countryCode":"LY","countryName":"Libya"},{"name":"Bellary","code":"BEP","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Berlin","code":"BER","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Brest Guipavas","code":"BES","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Bethel Airport","code":"BET","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Bedourie","code":"BEU","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Beira","code":"BEW","stateCode":"","countryCode":"MZ","countryName":"Mozambique"},{"name":"Beirut International","code":"BEY","stateCode":"","countryCode":"LB","countryName":"Lebanon"},{"name":"Bradford","code":"BFD","stateCode":"PA","countryCode":"US","countryName":"United States"},{"name":"Bielefeld","code":"BFE","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Scottsbluff Scotts Bluff County","code":"BFF","stateCode":"NE","countryCode":"US","countryName":"United States"},{"name":"Seattle Boeing Fld Intl","code":"BFI","stateCode":"WA","countryCode":"US","countryName":"United States"},{"name":"Bakersfield Meadows Field","code":"BFL","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Bloemfontein Intl","code":"BFN","stateCode":"","countryCode":"ZA","countryName":"South Africa"},{"name":"Belfast Intl Arpt","code":"BFS","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Buri Ram","code":"BFV","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Bucaramanga Palo Negro","code":"BGA","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Bangui","code":"BGF","stateCode":"","countryCode":"CF","countryName":"Central African Republic"},{"name":"Bridgetown Grantley Adams Intl","code":"BGI","stateCode":"","countryCode":"BB","countryName":"Barbados"},{"name":"Binghamton Endicott Johnson City","code":"BGM","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"Bergen Flesland","code":"BGO","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Bangor International","code":"BGR","stateCode":"ME","countryCode":"US","countryName":"United States"},{"name":"Baghdad Al Muthana","code":"BGW","stateCode":"","countryCode":"IQ","countryName":"Iraq"},{"name":"Milan Orio Al Serio","code":"BGY","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Bar Harbor","code":"BHB","stateCode":"ME","countryCode":"US","countryName":"United States"},{"name":"Belfast City Airport","code":"BHD","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Blenheim","code":"BHE","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Brus Laguna","code":"BHG","stateCode":"","countryCode":"HN","countryName":"Honduras"},{"name":"Bisha","code":"BHH","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Bahia Blanca Comandante","code":"BHI","stateCode":"BA","countryCode":"AR","countryName":"Argentina"},{"name":"Bhuj Rudra Mata","code":"BHJ","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Bukhara","code":"BHK","stateCode":"","countryCode":"UZ","countryName":"Uzbekistan"},{"name":"Birmingham","code":"BHM","stateCode":"AL","countryCode":"US","countryName":"United States"},{"name":"Bhopal","code":"BHO","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Broken Hill","code":"BHQ","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Bharatpur","code":"BHR","stateCode":"","countryCode":"NP","countryName":"Nepal"},{"name":"Bathurst Raglan","code":"BHS","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Bhavnagar","code":"BHU","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Bahawalpur","code":"BHV","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Birmingham","code":"BHX","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Beihai","code":"BHY","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Belo Horizonte","code":"BHZ","stateCode":"MG","countryCode":"BR","countryName":"Brazil"},{"name":"Bastia Poretta","code":"BIA","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Block Island","code":"BID","stateCode":"RI","countryCode":"US","countryName":"United States"},{"name":"Bikini Atoll Enyu Airfield","code":"BII","stateCode":"","countryCode":"MH","countryName":"Marshall Islands"},{"name":"Biak Mokmer","code":"BIK","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Billings","code":"BIL","stateCode":"MT","countryCode":"US","countryName":"United States"},{"name":"Bimini International","code":"BIM","stateCode":"","countryCode":"BS","countryName":"Bahamas"},{"name":"Bilbao","code":"BIO","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Biarritz Parme","code":"BIQ","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Biratnagar","code":"BIR","stateCode":"","countryCode":"NP","countryName":"Nepal"},{"name":"Bismarck","code":"BIS","stateCode":"ND","countryCode":"US","countryName":"United States"},{"name":"Bejaia","code":"BJA","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Bojnord","code":"BJB","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Batsfjord","code":"BJF","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Bemidji","code":"BJI","stateCode":"MN","countryCode":"US","countryName":"United States"},{"name":"Banjul Yundum International","code":"BJL","stateCode":"","countryCode":"GM","countryName":"Gambia"},{"name":"Bujumbura International","code":"BJM","stateCode":"","countryCode":"BI","countryName":"Burundi"},{"name":"Bahar Dar","code":"BJR","stateCode":"","countryCode":"ET","countryName":"Ethiopia"},{"name":"Beijing","code":"BJS","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Bodrum Milas Airport","code":"BJV","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Guanajuato Leon Del Bajio","code":"BJX","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Badajoz Talaveral La Real","code":"BJZ","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Moscow Bykovo","code":"BKA","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Buckland","code":"BKC","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kota Kinabalu","code":"BKI","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Bangkok International","code":"BKK","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Cleveland Burke Lakefront","code":"BKL","stateCode":"OH","countryCode":"US","countryName":"United States"},{"name":"Bakalalan","code":"BKM","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Bamako","code":"BKO","stateCode":"","countryCode":"ML","countryName":"Mali"},{"name":"Blackall","code":"BKQ","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Bengkulu Padangkemiling","code":"BKS","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Beckley","code":"BKW","stateCode":"WV","countryCode":"US","countryName":"United States"},{"name":"Bukavu Kamenbe","code":"BKY","stateCode":"","countryCode":"CD","countryName":"Congo (kinshasa)"},{"name":"Barcelona Gen J A Anzoategui","code":"BLA","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"Boulder City","code":"BLD","stateCode":"NV","countryCode":"US","countryName":"United States"},{"name":"Borlange Falun Dala","code":"BLE","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Bellingham","code":"BLI","stateCode":"WA","countryCode":"US","countryName":"United States"},{"name":"Batna","code":"BLJ","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Blackpool","code":"BLK","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Billund","code":"BLL","stateCode":"","countryCode":"DK","countryName":"Denmark"},{"name":"Bologna Guglielmo Marconi","code":"BLQ","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Bangalore Hindustan","code":"BLR","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Blackwater","code":"BLT","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Belleville","code":"BLV","stateCode":"IL","countryCode":"US","countryName":"United States"},{"name":"Blantyre Chileka","code":"BLZ","stateCode":"","countryCode":"MW","countryName":"Malawi"},{"name":"Stockholm Bromma","code":"BMA","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Broome","code":"BME","stateCode":"WA","countryCode":"AU","countryName":"Australia"},{"name":"Bloomington Normal","code":"BMI","stateCode":"IL","countryCode":"US","countryName":"United States"},{"name":"Borkum","code":"BMK","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Bhamo","code":"BMO","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Bima","code":"BMU","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Banmethuot Phung Duc","code":"BMV","stateCode":"","countryCode":"VN","countryName":"Vietnam"},{"name":"Bordj Badji Mokhtar","code":"BMW","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Belep Island","code":"BMY","stateCode":"","countryCode":"NC","countryName":"New Caledonia"},{"name":"Nashville International","code":"BNA","stateCode":"TN","countryCode":"US","countryName":"United States"},{"name":"Bandar Abbas","code":"BND","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Brisbane International","code":"BNE","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Benin City","code":"BNI","stateCode":"","countryCode":"NG","countryName":"Nigeria"},{"name":"Cologne Bonn   Off line Point","code":"BNJ","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Ballina Byron Gateway","code":"BNK","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Bronnoysund Bronnoy","code":"BNN","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Barinas","code":"BNS","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"Banja Luka","code":"BNX","stateCode":"","countryCode":"BA","countryName":"Bosnia And Herzegovina"},{"name":"Bellona","code":"BNY","stateCode":"","countryCode":"SB","countryName":"Solomon Islands"},{"name":"Bora Bora Motu mute","code":"BOB","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Bocas Del Toro","code":"BOC","stateCode":"","countryCode":"PA","countryName":"Panama"},{"name":"Bordeaux Airport","code":"BOD","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Bogota Eldorado","code":"BOG","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Bournemouth International","code":"BOH","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Boise Air Term Gowen Fld","code":"BOI","stateCode":"ID","countryCode":"US","countryName":"United States"},{"name":"Bourgas","code":"BOJ","stateCode":"","countryCode":"BG","countryName":"Bulgaria"},{"name":"Mumbai Chhatrapati Shivaji","code":"BOM","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Bonaire Flamingo International","code":"BON","stateCode":"","countryCode":"BQ","countryName":"Bes Islands"},{"name":"Bodo","code":"BOO","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Boston Logan International","code":"BOS","stateCode":"MA","countryCode":"US","countryName":"United States"},{"name":"Bartow","code":"BOW","stateCode":"FL","countryCode":"US","countryName":"United States"},{"name":"Bobo Dioulasso Borgo","code":"BOY","stateCode":"","countryCode":"BF","countryName":"Burkina Faso"},{"name":"Balikpapan Sepingan","code":"BPN","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Porto Seguro","code":"BPS","stateCode":"BA","countryCode":"BR","countryName":"Brazil"},{"name":"Beaumont Jefferson County","code":"BPT","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Bangda","code":"BPX","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Besalampy","code":"BPY","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Brunswick Glynco Jetport","code":"BQK","stateCode":"GA","countryCode":"US","countryName":"United States"},{"name":"Boulia","code":"BQL","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Aguadilla Borinquen","code":"BQN","stateCode":"","countryCode":"PR","countryName":"Puerto Rico"},{"name":"Blagoveschensk","code":"BQS","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Barreiras","code":"BRA","stateCode":"BA","countryCode":"BR","countryName":"Brazil"},{"name":"San Carlos De Bariloche International","code":"BRC","stateCode":"RN","countryCode":"AR","countryName":"Argentina"},{"name":"Brainerd Crow Wing County","code":"BRD","stateCode":"MN","countryCode":"US","countryName":"United States"},{"name":"Bremen","code":"BRE","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Bradford","code":"BRF","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Bari Palese","code":"BRI","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Bourke","code":"BRK","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Burlington","code":"BRL","stateCode":"IA","countryCode":"US","countryName":"United States"},{"name":"Barquisimeto","code":"BRM","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"Berne Belp","code":"BRN","stateCode":"","countryCode":"CH","countryName":"Switzerland"},{"name":"Brownsville South Padre Is Intl","code":"BRO","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Brno Turany","code":"BRQ","stateCode":"","countryCode":"CZ","countryName":"Czech Republic"},{"name":"Barra North Bay","code":"BRR","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Bristol","code":"BRS","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Brussels National","code":"BRU","stateCode":"","countryCode":"BE","countryName":"Belgium"},{"name":"Bremerhaven","code":"BRV","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Barrow WRogers M Wiley Post","code":"BRW","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Bossaso","code":"BSA","stateCode":"","countryCode":"SO","countryName":"Somalia"},{"name":"Brasilia International","code":"BSB","stateCode":"DF","countryCode":"BR","countryName":"Brazil"},{"name":"Bahia Solano","code":"BSC","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Baoshan","code":"BSD","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Bata","code":"BSG","stateCode":"","countryCode":"GQ","countryName":"Equatorial Guinea"},{"name":"Brighton","code":"BSH","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Biskra","code":"BSK","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Basel Mulhouse EuroAirport Swiss","code":"BSL","stateCode":"","countryCode":"CH","countryName":"Switzerland"},{"name":"Basco","code":"BSO","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Basra International","code":"BSR","stateCode":"","countryCode":"IQ","countryName":"Iraq"},{"name":"Bassein","code":"BSX","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Batam Hang Nadim","code":"BTH","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Barter Island","code":"BTI","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Banda Aceh Blang Bintang","code":"BTJ","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Bratsk","code":"BTK","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Battle Creek WK Kellogg Regional","code":"BTL","stateCode":"MI","countryCode":"US","countryName":"United States"},{"name":"Butte","code":"BTM","stateCode":"MT","countryCode":"US","countryName":"United States"},{"name":"Baton Rouge Ryan","code":"BTR","stateCode":"LA","countryCode":"US","countryName":"United States"},{"name":"Bratislava Ivanka","code":"BTS","stateCode":"","countryCode":"SK","countryName":"Slovakia"},{"name":"Bettles","code":"BTT","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Bintulu","code":"BTU","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Burlington International","code":"BTV","stateCode":"VT","countryCode":"US","countryName":"United States"},{"name":"Bursa Airport","code":"BTZ","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Buka","code":"BUA","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Burketown","code":"BUC","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Budapest Ferihegy","code":"BUD","stateCode":"","countryCode":"HU","countryName":"Hungary"},{"name":"Buenos Aires","code":"BUE","stateCode":"BA","countryCode":"AR","countryName":"Argentina"},{"name":"Buffalo Niagara Intl","code":"BUF","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"Bucharest","code":"BUH","stateCode":"","countryCode":"RO","countryName":"Romania"},{"name":"Buenaventura","code":"BUN","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Burao","code":"BUO","stateCode":"","countryCode":"SO","countryName":"Somalia"},{"name":"Bulawayo","code":"BUQ","stateCode":"","countryCode":"ZW","countryName":"Zimbabwe"},{"name":"Hollywood Burbank Airport","code":"BUR","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Batumi","code":"BUS","stateCode":"","countryCode":"GE","countryName":"Georgia"},{"name":"Bunia","code":"BUX","stateCode":"","countryCode":"CD","countryName":"Congo (kinshasa)"},{"name":"Bushehr","code":"BUZ","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Paris Beauvais Tille Beauvais Tille Airport","code":"BVA","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Boa Vista","code":"BVB","stateCode":"RR","countryCode":"BR","countryName":"Brazil"},{"name":"Boa Vista Rabil","code":"BVC","stateCode":"","countryCode":"CV","countryName":"Cape Verde"},{"name":"Brive La Gaillarde Laroche","code":"BVE","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Berlevag","code":"BVG","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Vilhena","code":"BVH","stateCode":"RO","countryCode":"BR","countryName":"Brazil"},{"name":"Birdsville","code":"BVI","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Bhairawa","code":"BWA","stateCode":"","countryCode":"NP","countryName":"Nepal"},{"name":"Braunschweig","code":"BWE","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Barrow In Furness Walney Island","code":"BWF","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Baltimore Washington International Airport","code":"BWI","stateCode":"MD","countryCode":"US","countryName":"United States"},{"name":"Bol","code":"BWK","stateCode":"","countryCode":"HR","countryName":"Croatia"},{"name":"Bandar Seri Begawan Brunei International","code":"BWN","stateCode":"","countryCode":"BN","countryName":"Brunei"},{"name":"Burnie Wynyard","code":"BWT","stateCode":"TS","countryCode":"AU","countryName":"Australia"},{"name":"Bam","code":"BXR","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Butuan","code":"BXU","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Bayamo CM de Cespedes","code":"BYM","stateCode":"","countryCode":"CU","countryName":"Cuba"},{"name":"Bayankhongor","code":"BYN","stateCode":"","countryCode":"MN","countryName":"Mongolia"},{"name":"Belize City Philip SWGoldson Int","code":"BZE","stateCode":"","countryCode":"BZ","countryName":"Belize"},{"name":"Bydgoszcz","code":"BZG","stateCode":"","countryCode":"PL","countryName":"Poland"},{"name":"Briansk","code":"BZK","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Barisal","code":"BZL","stateCode":"","countryCode":"BD","countryName":"Bangladesh"},{"name":"Bozeman Gallatin Field","code":"BZN","stateCode":"MT","countryCode":"US","countryName":"United States"},{"name":"Bolzano","code":"BZO","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Beziers Vias","code":"BZR","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Brazzaville Maya Maya","code":"BZV","stateCode":"","countryCode":"CG","countryName":"Congo (brazzaville)"},{"name":"Brize Norton RAF Station","code":"BZZ","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Cabinda","code":"CAB","stateCode":"","countryCode":"AO","countryName":"Angola"},{"name":"Cascavel","code":"CAC","stateCode":"PR","countryCode":"BR","countryName":"Brazil"},{"name":"Columbia Metropolitan Airport","code":"CAE","stateCode":"SC","countryCode":"US","countryName":"United States"},{"name":"Cagliari Elmas","code":"CAG","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Ca Mau","code":"CAH","stateCode":"","countryCode":"VN","countryName":"Vietnam"},{"name":"Cairo International","code":"CAI","stateCode":"","countryCode":"EG","countryName":"Egypt"},{"name":"Akron Canton Regional","code":"CAK","stateCode":"OH","countryCode":"US","countryName":"United States"},{"name":"Campbeltown Machrihanish","code":"CAL","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Guangzhou Baiyun","code":"CAN","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Cap Haitien","code":"CAP","stateCode":"","countryCode":"HT","countryName":"Haiti"},{"name":"Casablanca Anfa","code":"CAS","stateCode":"","countryCode":"MA","countryName":"Morocco"},{"name":"Carlisle","code":"CAX","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Cayenne Rochambeau","code":"CAY","stateCode":"","countryCode":"GF","countryName":"French Guiana"},{"name":"Cobar","code":"CAZ","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Cochabamba J Wilsterman","code":"CBB","stateCode":"","countryCode":"BO","countryName":"Bolivia"},{"name":"Cambridge","code":"CBG","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Bechar Leger","code":"CBH","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Cotabato Awang","code":"CBO","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Calabar","code":"CBQ","stateCode":"","countryCode":"NG","countryName":"Nigeria"},{"name":"Canberra","code":"CBR","stateCode":"AC","countryCode":"AU","countryName":"Australia"},{"name":"Catumbela","code":"CBT","stateCode":"","countryCode":"AO","countryName":"Angola"},{"name":"Cayo Coco","code":"CCC","stateCode":"","countryCode":"CU","countryName":"Cuba"},{"name":"Kozhikode","code":"CCJ","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Cocos Islands","code":"CCK","stateCode":"","countryCode":"CC","countryName":"Cocos (keeling) Islands"},{"name":"Criciuma","code":"CCM","stateCode":"SC","countryCode":"BR","countryName":"Brazil"},{"name":"Concepcion Carriel Sur","code":"CCP","stateCode":"","countryCode":"CL","countryName":"Chile"},{"name":"Caracas Simon Bolivar","code":"CCS","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"Kolkata Netaji Subhas Chandra","code":"CCU","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Craig Cove","code":"CCV","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Chub Cay","code":"CCZ","stateCode":"","countryCode":"BS","countryName":"Bahamas"},{"name":"Cold Bay","code":"CDB","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Cedar City","code":"CDC","stateCode":"UT","countryCode":"US","countryName":"United States"},{"name":"Paris Ch De Gaulle","code":"CDG","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Chadron","code":"CDR","stateCode":"NE","countryCode":"US","countryName":"United States"},{"name":"Cordova Mudhole Smith","code":"CDV","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Caldwell Wright","code":"CDW","stateCode":"NJ","countryCode":"US","countryName":"United States"},{"name":"Cebu Mactan International","code":"CEB","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Crescent City Mc Namara Fld","code":"CEC","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Ceduna","code":"CED","stateCode":"SA","countryCode":"AU","countryName":"Australia"},{"name":"Cherepovets","code":"CEE","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Chester","code":"CEG","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Chiang Rai","code":"CEI","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Chelyabinsk","code":"CEK","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Central","code":"CEM","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Ciudad Obregon","code":"CEN","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Cortez Montezuma County","code":"CEZ","stateCode":"CO","countryCode":"US","countryName":"United States"},{"name":"Cacador","code":"CFC","stateCode":"SC","countryCode":"BR","countryName":"Brazil"},{"name":"Clermont Ferrand Aulnat","code":"CFE","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Cienfuegos","code":"CFG","stateCode":"","countryCode":"CU","countryName":"Cuba"},{"name":"Chlef","code":"CFK","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Donegal","code":"CFN","stateCode":"","countryCode":"IE","countryName":"Ireland"},{"name":"Caen Carpiquet","code":"CFR","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Coffs Harbour","code":"CFS","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Kerkyra I Kapodistrias","code":"CFU","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Craig SPB","code":"CGA","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Cuiaba Marechal Rondon","code":"CGB","stateCode":"MT","countryCode":"BR","countryName":"Brazil"},{"name":"Changde","code":"CGD","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Sao Paulo Congonhas","code":"CGH","stateCode":"SP","countryCode":"BR","countryName":"Brazil"},{"name":"Cape Girardeau","code":"CGI","stateCode":"MO","countryCode":"US","countryName":"United States"},{"name":"Jakarta Soekarno Hatta Intl","code":"CGK","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Camiguin Mambajao","code":"CGM","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Bonn Cologne","code":"CGN","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Zhengzhou","code":"CGO","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Chittagong Patenga","code":"CGP","stateCode":"","countryCode":"BD","countryName":"Bangladesh"},{"name":"Changchun","code":"CGQ","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Campo Grande Internacional","code":"CGR","stateCode":"MS","countryCode":"BR","countryName":"Brazil"},{"name":"Cagayan De Oro Lumbia","code":"CGY","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Chattanooga Lovell Field","code":"CHA","stateCode":"TN","countryCode":"US","countryName":"United States"},{"name":"Christchurch International","code":"CHC","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Chicago","code":"CHI","stateCode":"IL","countryCode":"US","countryName":"United States"},{"name":"Charlottesville Albemarle","code":"CHO","stateCode":"VA","countryCode":"US","countryName":"United States"},{"name":"Chania Souda","code":"CHQ","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Charleston AFB International Airport","code":"CHS","stateCode":"SC","countryCode":"US","countryName":"United States"},{"name":"Chatham Island Karewa","code":"CHT","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Chuathbaluk","code":"CHU","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Choiseul Bay","code":"CHY","stateCode":"","countryCode":"SB","countryName":"Solomon Islands"},{"name":"Rome Ciampino","code":"CIA","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Chico","code":"CIC","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Cedar Rapids","code":"CID","stateCode":"IA","countryCode":"US","countryName":"United States"},{"name":"Chifeng","code":"CIF","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Changzhi","code":"CIH","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Cobija E Beltram","code":"CIJ","stateCode":"","countryCode":"BO","countryName":"Bolivia"},{"name":"Chalkyitsik","code":"CIK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Chipata","code":"CIP","stateCode":"","countryCode":"ZM","countryName":"Zambia"},{"name":"Shimkent","code":"CIT","stateCode":"","countryCode":"KZ","countryName":"Kazakhstan"},{"name":"Sault Ste Marie Chippewa County","code":"CIU","stateCode":"MI","countryCode":"US","countryName":"United States"},{"name":"Canouan Island","code":"CIW","stateCode":"","countryCode":"VC","countryName":"Saint Vincent And The Grenadines"},{"name":"Chiclayo Cornel Ruiz","code":"CIX","stateCode":"","countryCode":"PE","countryName":"Peru"},{"name":"Cajamarca","code":"CJA","stateCode":"","countryCode":"PE","countryName":"Peru"},{"name":"Coimbatore Peelamedu","code":"CJB","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Calama El Loa","code":"CJC","stateCode":"","countryCode":"CL","countryName":"Chile"},{"name":"Cheongju","code":"CJJ","stateCode":"","countryCode":"KR","countryName":"South Korea"},{"name":"Chitral","code":"CJL","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Ciudad Juarez Intl Abraham Gonzalez","code":"CJS","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Jeju Airport","code":"CJU","stateCode":"","countryCode":"KR","countryName":"South Korea"},{"name":"Clarksburg Benedum","code":"CKB","stateCode":"WV","countryCode":"US","countryName":"United States"},{"name":"Crooked Creek","code":"CKD","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Chongqing","code":"CKG","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Chokurdah","code":"CKH","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Carajas","code":"CKS","stateCode":"PA","countryCode":"BR","countryName":"Brazil"},{"name":"Chicken","code":"CKX","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Conakry","code":"CKY","stateCode":"","countryCode":"GN","countryName":"Guinea"},{"name":"Canakkale","code":"CKZ","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"San Diego Carlsbad","code":"CLD","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Cleveland Hopkins International","code":"CLE","stateCode":"OH","countryCode":"US","countryName":"United States"},{"name":"Cluj Napoca","code":"CLJ","stateCode":"","countryCode":"RO","countryName":"Romania"},{"name":"College Station Easterwood Field","code":"CLL","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Port Angeles Fairchild Intl","code":"CLM","stateCode":"WA","countryCode":"US","countryName":"United States"},{"name":"Cali Alfonso B Aragon","code":"CLO","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Clarks Point","code":"CLP","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Colima","code":"CLQ","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Charlotte Douglas International Airport","code":"CLT","stateCode":"NC","countryCode":"US","countryName":"United States"},{"name":"Clearwater Executive","code":"CLW","stateCode":"FL","countryCode":"US","countryName":"United States"},{"name":"Calvi Ste Catherine","code":"CLY","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Cunnamulla","code":"CMA","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Colombo Bandaranayake Intl","code":"CMB","stateCode":"","countryCode":"LK","countryName":"Sri Lanka"},{"name":"Ciudad Del Carmen","code":"CME","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Chambery","code":"CMF","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Corumba Internacional","code":"CMG","stateCode":"MS","countryCode":"BR","countryName":"Brazil"},{"name":"John Glenn Columbus Intl","code":"CMH","stateCode":"OH","countryCode":"US","countryName":"United States"},{"name":"Champaign Willard University","code":"CMI","stateCode":"IL","countryCode":"US","countryName":"United States"},{"name":"Casablanca Mohamed V","code":"CMN","stateCode":"","countryCode":"MA","countryName":"Morocco"},{"name":"Kundiawa Chimbu","code":"CMU","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Camaguey Ign Agramonte Intl","code":"CMW","stateCode":"","countryCode":"CU","countryName":"Cuba"},{"name":"Hancock Houghton County","code":"CMX","stateCode":"MI","countryCode":"US","countryName":"United States"},{"name":"Coonamble","code":"CNB","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Coconut Island","code":"CNC","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Constanta Kogalniceanu","code":"CND","stateCode":"","countryCode":"RO","countryName":"Romania"},{"name":"Belo Horizonte Tancredo Neves Intl","code":"CNF","stateCode":"MG","countryCode":"BR","countryName":"Brazil"},{"name":"Cloncurry","code":"CNJ","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Carlsbad","code":"CNM","stateCode":"NM","countryCode":"US","countryName":"United States"},{"name":"Neerlerit Inaat","code":"CNP","stateCode":"","countryCode":"GL","countryName":"Greenland"},{"name":"Corrientes Camba Punta","code":"CNQ","stateCode":"CR","countryCode":"AR","countryName":"Argentina"},{"name":"Cairns","code":"CNS","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Chiang Mai International","code":"CNX","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Moab Canyonlands Field","code":"CNY","stateCode":"UT","countryCode":"US","countryName":"United States"},{"name":"Cody Yellowstone Yellowstone Regional","code":"COD","stateCode":"WY","countryCode":"US","countryName":"United States"},{"name":"Kochi","code":"COK","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Coll Island","code":"COL","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Cotonou","code":"COO","stateCode":"","countryCode":"BJ","countryName":"Benin"},{"name":"Choibalsan","code":"COQ","stateCode":"","countryCode":"MN","countryName":"Mongolia"},{"name":"Cordoba Pajas Blancas","code":"COR","stateCode":"CD","countryCode":"AR","countryName":"Argentina"},{"name":"Colorado Springs Municipal","code":"COS","stateCode":"CO","countryCode":"US","countryName":"United States"},{"name":"Columbia Regional","code":"COU","stateCode":"MO","countryCode":"US","countryName":"United States"},{"name":"San Martin DeLos Andes Chapelco","code":"CPC","stateCode":"NE","countryCode":"AR","countryName":"Argentina"},{"name":"Coober Pedy","code":"CPD","stateCode":"SA","countryCode":"AU","countryName":"Australia"},{"name":"Campeche International","code":"CPE","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Copenhagen Airport","code":"CPH","stateCode":"","countryCode":"DK","countryName":"Denmark"},{"name":"Copiapo Chamonate","code":"CPO","stateCode":"","countryCode":"CL","countryName":"Chile"},{"name":"Campinas International","code":"CPQ","stateCode":"SP","countryCode":"BR","countryName":"Brazil"},{"name":"Casper","code":"CPR","stateCode":"WY","countryCode":"US","countryName":"United States"},{"name":"Cape Town International","code":"CPT","stateCode":"","countryCode":"ZA","countryName":"South Africa"},{"name":"Campina Grande Joao Suassuna","code":"CPV","stateCode":"PB","countryCode":"BR","countryName":"Brazil"},{"name":"Culebra","code":"CPX","stateCode":"","countryCode":"PR","countryName":"Puerto Rico"},{"name":"Shahre Kord","code":"CQD","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Calais","code":"CQF","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Craiova","code":"CRA","stateCode":"","countryCode":"RO","countryName":"Romania"},{"name":"Comodoro Rivadavia","code":"CRD","stateCode":"CB","countryCode":"AR","countryName":"Argentina"},{"name":"Crooked Island","code":"CRI","stateCode":"","countryCode":"BS","countryName":"Bahamas"},{"name":"Luzon Is Clark Field","code":"CRK","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Charleroi Brussels So","code":"CRL","stateCode":"","countryCode":"BE","countryName":"Belgium"},{"name":"Catarman National","code":"CRM","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Corpus Christi International","code":"CRP","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Charleston Yeager","code":"CRW","stateCode":"WV","countryCode":"US","countryName":"United States"},{"name":"Colonsay Is","code":"CSA","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Columbus Metropolitan","code":"CSG","stateCode":"GA","countryCode":"US","countryName":"United States"},{"name":"Cap Skirring","code":"CSK","stateCode":"","countryCode":"SN","countryName":"Senegal"},{"name":"San Luis Obispo OSullivan AAF","code":"CSL","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Changsha","code":"CSX","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Cheboksary","code":"CSY","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Catania Fontanarossa","code":"CTA","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Catamarca","code":"CTC","stateCode":"CA","countryCode":"AR","countryName":"Argentina"},{"name":"Cartagena Rafael Nunez","code":"CTG","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Charleville","code":"CTL","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Chetumal","code":"CTM","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Cooktown","code":"CTN","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Sapporo Chitose","code":"CTS","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Chengdu","code":"CTU","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Cucuta Camilo Dazo","code":"CUC","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Cuenca","code":"CUE","stateCode":"","countryCode":"EC","countryName":"Ecuador"},{"name":"Cuneo Levaldigi","code":"CUF","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Caye Caulker","code":"CUK","stateCode":"","countryCode":"BZ","countryName":"Belize"},{"name":"Culiacan Fedl De Bachigualato","code":"CUL","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Cumana","code":"CUM","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"Cancun","code":"CUN","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Carupano","code":"CUP","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"Coen","code":"CUQ","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Curacao Aeropuerto Hato","code":"CUR","stateCode":"","countryCode":"CW","countryName":"Curacao"},{"name":"Chihuahua Gen Fierro Villalobos","code":"CUU","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Cuzco Velazco Astete","code":"CUZ","stateCode":"","countryCode":"PE","countryName":"Peru"},{"name":"Cincinnati Cinci/Nrthrn Kentucky","code":"CVG","stateCode":"OH","countryCode":"US","countryName":"United States"},{"name":"Ciudad Victoria","code":"CVM","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Clovis Metropolitan Area","code":"CVN","stateCode":"NM","countryCode":"US","countryName":"United States"},{"name":"Carnarvon","code":"CVQ","stateCode":"WA","countryCode":"AU","countryName":"Australia"},{"name":"Coventry Baginton","code":"CVT","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Corvo Island","code":"CVU","stateCode":"","countryCode":"PT","countryName":"Portugal"},{"name":"Wausau Central Wisconsin","code":"CWA","stateCode":"WI","countryCode":"US","countryName":"United States"},{"name":"Curitiba Afonso Pena","code":"CWB","stateCode":"PR","countryCode":"BR","countryName":"Brazil"},{"name":"Chernovtsy","code":"CWC","stateCode":"","countryCode":"UA","countryName":"Ukraine"},{"name":"Cardiff Wales Arpt","code":"CWL","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Coxs Bazar","code":"CXB","stateCode":"","countryCode":"BD","countryName":"Bangladesh"},{"name":"Vancouver Coal Harbour","code":"CXH","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Christmas Island","code":"CXI","stateCode":"","countryCode":"KI","countryName":"Kiribati"},{"name":"Caxias Do Sul Campo Dos Bugres","code":"CXJ","stateCode":"RS","countryCode":"BR","countryName":"Brazil"},{"name":"Cayman Brac Is Gerrard Smith","code":"CYB","stateCode":"","countryCode":"KY","countryName":"Cayman Islands"},{"name":"Chefornak SPB","code":"CYF","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Chiayi","code":"CYI","stateCode":"","countryCode":"TW","countryName":"Taiwan"},{"name":"Cayo Largo Del Sur","code":"CYO","stateCode":"","countryCode":"CU","countryName":"Cuba"},{"name":"Calbayog","code":"CYP","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Cheyenne","code":"CYS","stateCode":"WY","countryCode":"US","countryName":"United States"},{"name":"Cuyo","code":"CYU","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Cherskiy","code":"CYX","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Cauayan","code":"CYZ","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Coro","code":"CZE","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"Corozal","code":"CZH","stateCode":"","countryCode":"BZ","countryName":"Belize"},{"name":"Constantine Ain El Bey","code":"CZL","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Cozumel","code":"CZM","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Chisana Field","code":"CZN","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Cruzeiro Do Sul Campo Internacional","code":"CZS","stateCode":"AC","countryCode":"BR","countryName":"Brazil"},{"name":"Corozal","code":"CZU","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Changzhou","code":"CZX","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Daytona Beach International","code":"DAB","stateCode":"FL","countryCode":"US","countryName":"United States"},{"name":"Dhaka Zia International","code":"DAC","stateCode":"","countryCode":"BD","countryName":"Bangladesh"},{"name":"Da Nang","code":"DAD","stateCode":"","countryCode":"VN","countryName":"Vietnam"},{"name":"Dallas Love Field","code":"DAL","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Dar Es Salaam International","code":"DAR","stateCode":"","countryCode":"TZ","countryName":"Tanzania"},{"name":"Datong","code":"DAT","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Daru","code":"DAU","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"David Enrique Malek","code":"DAV","stateCode":"","countryCode":"PA","countryName":"Panama"},{"name":"Daxian","code":"DAX","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Dayton International Airport","code":"DAY","stateCode":"OH","countryCode":"US","countryName":"United States"},{"name":"Dalbandin","code":"DBA","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Dubbo","code":"DBO","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Dubuque Regional Airport","code":"DBQ","stateCode":"IA","countryCode":"US","countryName":"United States"},{"name":"Dubrovnik","code":"DBV","stateCode":"","countryCode":"HR","countryName":"Croatia"},{"name":"Washington Ronald Reagan National","code":"DCA","stateCode":"DC","countryCode":"US","countryName":"United States"},{"name":"Dominica Cane Field","code":"DCF","stateCode":"","countryCode":"DM","countryName":"Dominica"},{"name":"Castres Mazamet","code":"DCM","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Dodge City Municipal","code":"DDC","stateCode":"KS","countryCode":"US","countryName":"United States"},{"name":"Dandong","code":"DDG","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Dera Ghazi Khan","code":"DEA","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Decatur Arpt","code":"DEC","stateCode":"IL","countryCode":"US","countryName":"United States"},{"name":"Dehra Dun","code":"DED","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Delhi Indira Gandhi Intl","code":"DEL","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Denver International","code":"DEN","stateCode":"CO","countryCode":"US","countryName":"United States"},{"name":"Dallas Fort Worth International","code":"DFW","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Dangriga","code":"DGA","stateCode":"","countryCode":"BZ","countryName":"Belize"},{"name":"Mudgee","code":"DGE","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Dongguan","code":"DGM","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Durango Guadalupe Victoria","code":"DGO","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Dumaguete","code":"DGT","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Dharamsala Gaggal Airport","code":"DHM","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Dothan Arpt","code":"DHN","stateCode":"AL","countryCode":"US","countryName":"United States"},{"name":"Dibrugarh Chabua","code":"DIB","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Antsiranana Arrachart","code":"DIE","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Diqing","code":"DIG","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Dickinson","code":"DIK","stateCode":"ND","countryCode":"US","countryName":"United States"},{"name":"Dili Comoro","code":"DIL","stateCode":"","countryCode":"TL","countryName":"East Timor"},{"name":"Dien Bien Phu Dien Bien","code":"DIN","stateCode":"","countryCode":"VN","countryName":"Vietnam"},{"name":"Dire Dawa Aba Tenna D Yilma","code":"DIR","stateCode":"","countryCode":"ET","countryName":"Ethiopia"},{"name":"Loubomo","code":"DIS","stateCode":"","countryCode":"CG","countryName":"Congo (brazzaville)"},{"name":"Diu","code":"DIU","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Diyarbakir","code":"DIY","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Jambi Sultan Taha Syarifudn","code":"DJB","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Djerba Melita","code":"DJE","stateCode":"","countryCode":"TN","countryName":"Tunisia"},{"name":"Djanet Inedbirenne","code":"DJG","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Jayapura Sentani","code":"DJJ","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Dakar Yoff","code":"DKR","stateCode":"","countryCode":"SN","countryName":"Senegal"},{"name":"Douala","code":"DLA","stateCode":"","countryCode":"CM","countryName":"Cameroon"},{"name":"Dalian","code":"DLC","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Dillingham Municipal","code":"DLG","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Duluth International","code":"DLH","stateCode":"MN","countryCode":"US","countryName":"United States"},{"name":"Dalat Lienkhang","code":"DLI","stateCode":"","countryCode":"VN","countryName":"Vietnam"},{"name":"Dalaman","code":"DLM","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Disneyland Paris","code":"DLP","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Dali City Dali","code":"DLU","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Dillons Bay","code":"DLY","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Dalanzadgad","code":"DLZ","stateCode":"","countryCode":"MN","countryName":"Mongolia"},{"name":"Doomadgee","code":"DMD","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Moscow Domodedovo","code":"DME","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Dammam King Fahad Intl","code":"DMM","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Dimapur","code":"DMU","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Dundee","code":"DND","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Dunhuang","code":"DNH","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Dnepropetrovsk","code":"DNK","stateCode":"","countryCode":"UA","countryName":"Ukraine"},{"name":"Dinard Pleurtuit","code":"DNR","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Denizli Cardak","code":"DNZ","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Doha","code":"DOH","stateCode":"","countryCode":"QA","countryName":"Qatar"},{"name":"Donetsk","code":"DOK","stateCode":"","countryCode":"UA","countryName":"Ukraine"},{"name":"Dominica Melville Hall","code":"DOM","stateCode":"","countryCode":"DM","countryName":"Dominica"},{"name":"Dolpa","code":"DOP","stateCode":"","countryCode":"NP","countryName":"Nepal"},{"name":"Dourados","code":"DOU","stateCode":"MS","countryCode":"BR","countryName":"Brazil"},{"name":"Dongying","code":"DOY","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Dipolog","code":"DPL","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Devonport","code":"DPO","stateCode":"TS","countryCode":"AU","countryName":"Australia"},{"name":"Denpasar Bali Ngurah Rai","code":"DPS","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Deering","code":"DRG","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Durango La Plata","code":"DRO","stateCode":"CO","countryCode":"US","countryName":"United States"},{"name":"Dresden Arpt","code":"DRS","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Del Rio International","code":"DRT","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Darwin","code":"DRW","stateCode":"NT","countryCode":"AU","countryName":"Australia"},{"name":"Des Moines","code":"DSM","stateCode":"IA","countryCode":"US","countryName":"United States"},{"name":"Dongsheng","code":"DSN","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Dortmund","code":"DTM","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Detroit","code":"DTT","stateCode":"MI","countryCode":"US","countryName":"United States"},{"name":"Detroit Metropolitan Wayne County Airport","code":"DTW","stateCode":"MI","countryCode":"US","countryName":"United States"},{"name":"Dublin","code":"DUB","stateCode":"","countryCode":"IE","countryName":"Ireland"},{"name":"Dunedin","code":"DUD","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Dundo","code":"DUE","stateCode":"","countryCode":"AO","countryName":"Angola"},{"name":"Duisburg","code":"DUI","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Dubois Jefferson County","code":"DUJ","stateCode":"PA","countryCode":"US","countryName":"United States"},{"name":"Durban International","code":"DUR","stateCode":"","countryCode":"ZA","countryName":"South Africa"},{"name":"Dusseldorf International","code":"DUS","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Dutch Harbor Emergency Field","code":"DUT","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Devils Lake","code":"DVL","stateCode":"ND","countryCode":"US","countryName":"United States"},{"name":"Davao Mati","code":"DVO","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Soalala","code":"DWB","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Dubai","code":"DWC","stateCode":"","countryCode":"AE","countryName":"United Arab Emirates"},{"name":"Dubai","code":"DXB","stateCode":"","countryCode":"AE","countryName":"United Arab Emirates"},{"name":"Dayong","code":"DYG","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Anadyr","code":"DYR","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Dushanbe dyu","code":"DYU","stateCode":"","countryCode":"TJ","countryName":"Tajikistan"},{"name":"Dzaoudzi","code":"DZA","stateCode":"","countryCode":"YT","countryName":"Mayotte"},{"name":"Zhezkazgan Zhezhazgan","code":"DZN","stateCode":"","countryCode":"KZ","countryName":"Kazakhstan"},{"name":"Eagle","code":"EAA","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Emae","code":"EAE","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Kwajalein Atoll Elenak","code":"EAL","stateCode":"","countryCode":"MH","countryName":"Marshall Islands"},{"name":"Nejran","code":"EAM","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Basel Basel Mulhouse Mulhouse","code":"EAP","stateCode":"","countryCode":"CH","countryName":"Switzerland"},{"name":"Kearney","code":"EAR","stateCode":"NE","countryCode":"US","countryName":"United States"},{"name":"San Sebastian","code":"EAS","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Wenatchee Pangborn Field","code":"EAT","stateCode":"WA","countryCode":"US","countryName":"United States"},{"name":"Eau Claire","code":"EAU","stateCode":"WI","countryCode":"US","countryName":"United States"},{"name":"Elba Island Marina Di Campo","code":"EBA","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Entebbe","code":"EBB","stateCode":"","countryCode":"UG","countryName":"Uganda"},{"name":"Esbjerg","code":"EBJ","stateCode":"","countryCode":"DK","countryName":"Denmark"},{"name":"Erbil","code":"EBL","stateCode":"","countryCode":"IQ","countryName":"Iraq"},{"name":"Ercan","code":"ECN","stateCode":"","countryCode":"CY","countryName":"Cyprus"},{"name":"Northwest Florida Beaches International Airport","code":"ECP","stateCode":"FL","countryCode":"US","countryName":"United States"},{"name":"Edna Bay","code":"EDA","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Edinburgh","code":"EDI","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Eldoret","code":"EDL","stateCode":"","countryCode":"KE","countryName":"Kenya"},{"name":"Edremit Korfez","code":"EDO","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Edward River","code":"EDR","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Eek","code":"EEK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kefallinia Argostolion","code":"EFL","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Bergerac Roumanieres","code":"EGC","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Eagle Vail Eagle County","code":"EGE","stateCode":"CO","countryCode":"US","countryName":"United States"},{"name":"Belgorod","code":"EGO","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Egilsstadir","code":"EGS","stateCode":"","countryCode":"IS","countryName":"Iceland"},{"name":"Eagle River","code":"EGV","stateCode":"WI","countryCode":"US","countryName":"United States"},{"name":"Egegik","code":"EGX","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Eisenach","code":"EIB","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Eniseysk","code":"EIE","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Eindhoven","code":"EIN","stateCode":"","countryCode":"NL","countryName":"Netherlands"},{"name":"Beef Island Airport","code":"EIS","stateCode":"","countryCode":"VG","countryName":"Virgin Islands, British"},{"name":"Barrancabermeja Variguies","code":"EJA","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Wedjh","code":"EJH","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Elko","code":"EKO","stateCode":"NV","countryCode":"US","countryName":"United States"},{"name":"Eskilstuna","code":"EKT","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Elcho Island","code":"ELC","stateCode":"NT","countryCode":"AU","countryName":"Australia"},{"name":"El Golea","code":"ELG","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"North Eleuthera International","code":"ELH","stateCode":"","countryCode":"BS","countryName":"Bahamas"},{"name":"Elim","code":"ELI","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Elmira Corning Regional Airport","code":"ELM","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"El Paso International","code":"ELP","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Gassim","code":"ELQ","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"East London","code":"ELS","stateCode":"","countryCode":"ZA","countryName":"South Africa"},{"name":"El Oued Guemar","code":"ELU","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Elfin Cove SPB","code":"ELV","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Ely Yelland","code":"ELY","stateCode":"NV","countryCode":"US","countryName":"United States"},{"name":"Nottingham E Midlands","code":"EMA","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Emerald","code":"EMD","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Emden","code":"EME","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Emmonak","code":"EMK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kenai","code":"ENA","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Ende","code":"ENE","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Enontekio","code":"ENF","stateCode":"","countryCode":"FI","countryName":"Finland"},{"name":"Enshi","code":"ENH","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"El Nido","code":"ENI","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Enschede Twente","code":"ENS","stateCode":"","countryCode":"NL","countryName":"Netherlands"},{"name":"Enugu","code":"ENU","stateCode":"","countryCode":"NG","countryName":"Nigeria"},{"name":"Kenosha","code":"ENW","stateCode":"WI","countryCode":"US","countryName":"United States"},{"name":"Yanan","code":"ENY","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Medellin Enrique Olaya Herrera","code":"EOH","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Elorza","code":"EOZ","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"Esperance","code":"EPR","stateCode":"WA","countryCode":"AU","countryName":"Australia"},{"name":"Esquel","code":"EQS","stateCode":"CB","countryCode":"AR","countryName":"Argentina"},{"name":"Erzincan","code":"ERC","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Erfurt","code":"ERF","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Errachidia","code":"ERH","stateCode":"","countryCode":"MA","countryName":"Morocco"},{"name":"Erie International","code":"ERI","stateCode":"PA","countryCode":"US","countryName":"United States"},{"name":"Erechim Comandante Kraemer","code":"ERM","stateCode":"RS","countryCode":"BR","countryName":"Brazil"},{"name":"ERO","code":"ERO","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Windhoek Eros","code":"ERS","stateCode":"","countryCode":"NA","countryName":"Namibia"},{"name":"Erzurum","code":"ERZ","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Ankara Esenboga","code":"ESB","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Escanaba Delta County Arpt","code":"ESC","stateCode":"MI","countryCode":"US","countryName":"United States"},{"name":"Eastsound Orcas Island","code":"ESD","stateCode":"WA","countryCode":"US","countryName":"United States"},{"name":"Esmeraldas","code":"ESM","stateCode":"","countryCode":"EC","countryName":"Ecuador"},{"name":"El Salvador","code":"ESR","stateCode":"","countryCode":"CL","countryName":"Chile"},{"name":"Essen","code":"ESS","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Essaouira","code":"ESU","stateCode":"","countryCode":"MA","countryName":"Morocco"},{"name":"Elat","code":"ETH","stateCode":"","countryCode":"IL","countryName":"Israel"},{"name":"Metz Nancy Metz Nancy Lorraine","code":"ETZ","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Eua Kaufana","code":"EUA","stateCode":"","countryCode":"TO","countryName":"Tonga"},{"name":"Eugene","code":"EUG","stateCode":"OR","countryCode":"US","countryName":"United States"},{"name":"Neumuenster","code":"EUM","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Laayoune Hassan I","code":"EUN","stateCode":"","countryCode":"MA","countryName":"Morocco"},{"name":"St Eustatius F D Roosevelt","code":"EUX","stateCode":"","countryCode":"BQ","countryName":"Bes Islands"},{"name":"Harstad Narvik Evenes","code":"EVE","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Yerevan","code":"EVN","stateCode":"","countryCode":"AM","countryName":"Armenia"},{"name":"Evansville Dress Regional","code":"EVV","stateCode":"IN","countryCode":"US","countryName":"United States"},{"name":"Fall River New Bedford","code":"EWB","stateCode":"MA","countryCode":"US","countryName":"United States"},{"name":"New Bern Simmons Nott","code":"EWN","stateCode":"NC","countryCode":"US","countryName":"United States"},{"name":"Newark Liberty Intl","code":"EWR","stateCode":"NJ","countryCode":"US","countryName":"United States"},{"name":"Excursion Inlet SPB","code":"EXI","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Exeter","code":"EXT","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"El Yopal","code":"EYP","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Key West International","code":"EYW","stateCode":"FL","countryCode":"US","countryName":"United States"},{"name":"Buenos Aires Ministro Pistarini","code":"EZE","stateCode":"BA","countryCode":"AR","countryName":"Argentina"},{"name":"Elazig","code":"EZS","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Farnborough","code":"FAB","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Faroe Islands Vagar","code":"FAE","stateCode":"","countryCode":"FO","countryName":"Faroe Islands"},{"name":"Fairbanks International","code":"FAI","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Faro","code":"FAO","stateCode":"","countryCode":"PT","countryName":"Portugal"},{"name":"Fargo Hector Field","code":"FAR","stateCode":"ND","countryCode":"US","countryName":"United States"},{"name":"Fresno Airterminal","code":"FAT","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Fakarava","code":"FAV","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Fayetteville","code":"FAY","stateCode":"NC","countryCode":"US","countryName":"United States"},{"name":"Lubumbashi Luano","code":"FBM","stateCode":"","countryCode":"CD","countryName":"Congo (kinshasa)"},{"name":"Kalispell Glacier National Park","code":"FCA","stateCode":"MT","countryCode":"US","countryName":"United States"},{"name":"Cuxhaven Nordholz","code":"FCN","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Rome Intercontinental Airport Leonardo da Vinci","code":"FCO","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Forde Bringeland","code":"FDE","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Fort De France Lamentin","code":"FDF","stateCode":"","countryCode":"MQ","countryName":"Martinique"},{"name":"Friedrichshafen","code":"FDH","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Fergana","code":"FEG","stateCode":"","countryCode":"UZ","countryName":"Uzbekistan"},{"name":"Fernando De Noronha","code":"FEN","stateCode":"FN","countryCode":"BR","countryName":"Brazil"},{"name":"Fez Sais","code":"FEZ","stateCode":"","countryCode":"MA","countryName":"Morocco"},{"name":"Fangatau","code":"FGU","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Fakahina","code":"FHZ","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Kinshasa NDjili","code":"FIH","stateCode":"","countryCode":"CD","countryName":"Congo (kinshasa)"},{"name":"Al Fujairah Fujairah Intl Arpt","code":"FJR","stateCode":"","countryCode":"AE","countryName":"United Arab Emirates"},{"name":"Baden Baden Karlsruhe Soellingen","code":"FKB","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Kisangani","code":"FKI","stateCode":"","countryCode":"CD","countryName":"Congo (kinshasa)"},{"name":"Franklin Chess Lambertin","code":"FKL","stateCode":"PA","countryCode":"US","countryName":"United States"},{"name":"Fak Fak","code":"FKQ","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Fukushima Airport","code":"FKS","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Florencia Capitolio","code":"FLA","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Flagstaff Pulliam Field","code":"FLG","stateCode":"AZ","countryCode":"US","countryName":"United States"},{"name":"Fort Lauderdale International","code":"FLL","stateCode":"FL","countryCode":"US","countryName":"United States"},{"name":"Florianopolis Hercilio Luz","code":"FLN","stateCode":"SC","countryCode":"BR","countryName":"Brazil"},{"name":"Florence","code":"FLO","stateCode":"SC","countryCode":"US","countryName":"United States"},{"name":"Florence Peretola","code":"FLR","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Flores Island Santa Cruz","code":"FLW","stateCode":"","countryCode":"PT","countryName":"Portugal"},{"name":"Formosa El Pucu","code":"FMA","stateCode":"FO","countryCode":"AR","countryName":"Argentina"},{"name":"Farmington Municipal","code":"FMN","stateCode":"NM","countryCode":"US","countryName":"United States"},{"name":"Muenster","code":"FMO","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Freetown Lungi International","code":"FNA","stateCode":"","countryCode":"SL","countryName":"Sierra Leone"},{"name":"Madeira","code":"FNC","stateCode":"","countryCode":"PT","countryName":"Portugal"},{"name":"Nimes Garons","code":"FNI","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Pyongyang Sunan","code":"FNJ","stateCode":"","countryCode":"KP","countryName":"North Korea"},{"name":"Fort Collins Loveland Municipal Airport","code":"FNL","stateCode":"CO","countryCode":"US","countryName":"United States"},{"name":"Flint Bishop","code":"FNT","stateCode":"MI","countryCode":"US","countryName":"United States"},{"name":"Fuzhou","code":"FOC","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Fort Dodge","code":"FOD","stateCode":"IA","countryCode":"US","countryName":"United States"},{"name":"Foggia Gino Lisa","code":"FOG","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Fortaleza Pinto Martins","code":"FOR","stateCode":"CE","countryCode":"BR","countryName":"Brazil"},{"name":"Freeport Grand Bahama Intl","code":"FPO","stateCode":"","countryCode":"BS","countryName":"Bahamas"},{"name":"Frankfurt International","code":"FRA","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Franca","code":"FRC","stateCode":"SP","countryCode":"BR","countryName":"Brazil"},{"name":"Friday Harbor","code":"FRD","stateCode":"WA","countryCode":"US","countryName":"United States"},{"name":"Fera Island","code":"FRE","stateCode":"","countryCode":"SB","countryName":"Solomon Islands"},{"name":"Forli Luigi Ridolfi","code":"FRL","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Floro Flora","code":"FRO","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Flores Santa Elena","code":"FRS","stateCode":"","countryCode":"GT","countryName":"Guatemala"},{"name":"Bishkek","code":"FRU","stateCode":"","countryCode":"KG","countryName":"Kyrgyzstan"},{"name":"Francistown","code":"FRW","stateCode":"","countryCode":"BW","countryName":"Botswana"},{"name":"Figari Sud Corse","code":"FSC","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Sioux Falls RegionalJo Foss Fld","code":"FSD","stateCode":"SD","countryCode":"US","countryName":"United States"},{"name":"Fort Smith Regional Airport","code":"FSM","stateCode":"AR","countryCode":"US","countryName":"United States"},{"name":"St Pierre","code":"FSP","stateCode":"","countryCode":"PM","countryName":"Saint Pierre And Miquelon"},{"name":"Futuna Island Futuna Airport","code":"FTA","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"El Calafate","code":"FTE","stateCode":"SC","countryCode":"AR","countryName":"Argentina"},{"name":"Fort Dauphin Marillac","code":"FTU","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Fuerteventura Puerto del Rosario","code":"FUE","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Fuyang","code":"FUG","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Fukue","code":"FUJ","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Fukuoka","code":"FUK","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Funafuti Atol International","code":"FUN","stateCode":"","countryCode":"TV","countryName":"Tuvalu"},{"name":"Futuna Island","code":"FUT","stateCode":"","countryCode":"WF","countryName":"Wallis And Futuna"},{"name":"Fort Wayne International Airport","code":"FWA","stateCode":"IN","countryCode":"US","countryName":"United States"},{"name":"Fort William Heliport","code":"FWM","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Fort Yukon","code":"FYU","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Fayetteville Municipal Drake Fld","code":"FYV","stateCode":"AR","countryCode":"US","countryName":"United States"},{"name":"Filton","code":"FZO","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Gabes","code":"GAE","stateCode":"","countryCode":"TN","countryName":"Tunisia"},{"name":"Gafsa","code":"GAF","stateCode":"","countryCode":"TN","countryName":"Tunisia"},{"name":"Yamagata Junmachi","code":"GAJ","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Galena","code":"GAL","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Gambell","code":"GAM","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Gan Island Gan Seenu","code":"GAN","stateCode":"","countryCode":"MV","countryName":"Maldives"},{"name":"Guantanamo Los Canos","code":"GAO","stateCode":"","countryCode":"CU","countryName":"Cuba"},{"name":"Gawahati Borjhar","code":"GAU","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Gamba","code":"GAX","stateCode":"","countryCode":"GA","countryName":"Gabon"},{"name":"Gaya","code":"GAY","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Great Bend","code":"GBD","stateCode":"KS","countryCode":"US","countryName":"United States"},{"name":"Gaborone Sir Seretse Khama Int","code":"GBE","stateCode":"","countryCode":"BW","countryName":"Botswana"},{"name":"Marie Galante Les Bases","code":"GBJ","stateCode":"","countryCode":"GP","countryName":"Guadeloupe"},{"name":"Gorgan","code":"GBT","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Gillette Campbell County","code":"GCC","stateCode":"WY","countryCode":"US","countryName":"United States"},{"name":"Guernsey","code":"GCI","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Garden City Municipal Airport","code":"GCK","stateCode":"KS","countryCode":"US","countryName":"United States"},{"name":"Grand Cayman Island Owen Roberts Intl","code":"GCM","stateCode":"","countryCode":"KY","countryName":"Cayman Islands"},{"name":"Gode Iddidole","code":"GDE","stateCode":"","countryCode":"ET","countryName":"Ethiopia"},{"name":"Guadalajara Miguel Hidalgo","code":"GDL","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Gdansk Rebiechowo","code":"GDN","stateCode":"","countryCode":"PL","countryName":"Poland"},{"name":"Guasdualito Vare Maria","code":"GDO","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"Gondar","code":"GDQ","stateCode":"","countryCode":"ET","countryName":"Ethiopia"},{"name":"Grand Turk Is","code":"GDT","stateCode":"","countryCode":"TC","countryName":"Turks And Caicos Islands"},{"name":"Glendive Dawson Community","code":"GDV","stateCode":"MT","countryCode":"US","countryName":"United States"},{"name":"Magadan","code":"GDX","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Noumea Magenta","code":"GEA","stateCode":"","countryCode":"NC","countryName":"New Caledonia"},{"name":"Spokane International","code":"GEG","stateCode":"WA","countryCode":"US","countryName":"United States"},{"name":"Santo Angelo Sepe Tiaraju","code":"GEL","stateCode":"RS","countryCode":"BR","countryName":"Brazil"},{"name":"Georgetown Cheddi Jagan Intl","code":"GEO","stateCode":"","countryCode":"GY","countryName":"Guyana"},{"name":"Nueva Gerona Rafael Cabrera","code":"GER","stateCode":"","countryCode":"CU","countryName":"Cuba"},{"name":"General Santos Buayan","code":"GES","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Geraldton","code":"GET","stateCode":"WA","countryCode":"AU","countryName":"Australia"},{"name":"Gallivare","code":"GEV","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Griffith","code":"GFF","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Grand Forks","code":"GFK","stateCode":"ND","countryCode":"US","countryName":"United States"},{"name":"Grafton","code":"GFN","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Longview Gladewater Gregg County Kilgore","code":"GGG","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"George Town Exuma International","code":"GGT","stateCode":"","countryCode":"BS","countryName":"Bahamas"},{"name":"Glasgow International","code":"GGW","stateCode":"MT","countryCode":"US","countryName":"United States"},{"name":"Ghardaia Noumerate","code":"GHA","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Governors Harbour","code":"GHB","stateCode":"","countryCode":"BS","countryName":"Bahamas"},{"name":"Ghat","code":"GHT","stateCode":"","countryCode":"LY","countryName":"Libya"},{"name":"Gibraltar North Front","code":"GIB","stateCode":"","countryCode":"GI","countryName":"Gibraltar"},{"name":"Boigu Island","code":"GIC","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Rio De Janeiro Internacional","code":"GIG","stateCode":"RJ","countryCode":"BR","countryName":"Brazil"},{"name":"Gilgit","code":"GIL","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Gisborne","code":"GIS","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Jazan","code":"GIZ","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Guanaja","code":"GJA","stateCode":"","countryCode":"HN","countryName":"Honduras"},{"name":"Jijel","code":"GJL","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Grand Junction Walker Field","code":"GJT","stateCode":"CO","countryCode":"US","countryName":"United States"},{"name":"Goroka","code":"GKA","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Glasgow International","code":"GLA","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Golfito","code":"GLF","stateCode":"","countryCode":"CR","countryName":"Costa Rica"},{"name":"Greenville","code":"GLH","stateCode":"MS","countryCode":"US","countryName":"United States"},{"name":"Galcaio","code":"GLK","stateCode":"","countryCode":"SO","countryName":"Somalia"},{"name":"Goulimime","code":"GLN","stateCode":"","countryCode":"MA","countryName":"Morocco"},{"name":"Gloucestershire","code":"GLO","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Gladstone","code":"GLT","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Golovin","code":"GLV","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Gemena","code":"GMA","stateCode":"","countryCode":"CD","countryName":"Congo (kinshasa)"},{"name":"Gambela","code":"GMB","stateCode":"","countryCode":"ET","countryName":"Ethiopia"},{"name":"Seoul Gimpo International","code":"GMP","stateCode":"","countryCode":"KR","countryName":"South Korea"},{"name":"Gambier Is","code":"GMR","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"San Sebas de la Gomera La Gomera","code":"GMZ","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Lyon Saint Geoirs","code":"GNB","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Maurice Bishop Intl","code":"GND","stateCode":"","countryCode":"GD","countryName":"Grenada"},{"name":"Goodnews Bay","code":"GNU","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Gainesville Regional Airport","code":"GNV","stateCode":"FL","countryCode":"US","countryName":"United States"},{"name":"Genoa Cristoforo Colombo","code":"GOA","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Nuuk","code":"GOH","stateCode":"","countryCode":"GL","countryName":"Greenland"},{"name":"Goa Dabolim","code":"GOI","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Nizhniy Novgorod","code":"GOJ","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Goma","code":"GOM","stateCode":"","countryCode":"CD","countryName":"Congo (kinshasa)"},{"name":"Gorakhpur","code":"GOP","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Golmud","code":"GOQ","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Gothenburg Landvetter","code":"GOT","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Garoua","code":"GOU","stateCode":"","countryCode":"CM","countryName":"Cameroon"},{"name":"Gove Nhulunbuy","code":"GOV","stateCode":"NT","countryCode":"AU","countryName":"Australia"},{"name":"Patras Araxos Airport","code":"GPA","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Guapi","code":"GPI","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Galapagos Is Baltra","code":"GPS","stateCode":"","countryCode":"EC","countryName":"Ecuador"},{"name":"Gulfport Biloxi Regional","code":"GPT","stateCode":"MS","countryCode":"US","countryName":"United States"},{"name":"Green Bay Austin Straubel International Airport","code":"GRB","stateCode":"WI","countryCode":"US","countryName":"United States"},{"name":"Grand Island","code":"GRI","stateCode":"NE","countryCode":"US","countryName":"United States"},{"name":"George","code":"GRJ","stateCode":"","countryCode":"ZA","countryName":"South Africa"},{"name":"Killeen Fort Hood Regional Airport","code":"GRK","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Gerona Costa Brava","code":"GRO","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Groningen Eelde","code":"GRQ","stateCode":"","countryCode":"NL","countryName":"Netherlands"},{"name":"Gerald R Ford International Airport","code":"GRR","stateCode":"MI","countryCode":"US","countryName":"United States"},{"name":"Sao Paulo Guarulhos Intl","code":"GRU","stateCode":"SP","countryCode":"BR","countryName":"Brazil"},{"name":"Groznyj","code":"GRV","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Graciosa Island","code":"GRW","stateCode":"","countryCode":"PT","countryName":"Portugal"},{"name":"Granada","code":"GRX","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Grimsey","code":"GRY","stateCode":"","countryCode":"IS","countryName":"Iceland"},{"name":"Graz Thalerhof","code":"GRZ","stateCode":"","countryCode":"AT","countryName":"Austria"},{"name":"Gothenburg Saeve","code":"GSE","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Gheshm","code":"GSM","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Greensboro High Point Piedmont Triad Intl","code":"GSO","stateCode":"NC","countryCode":"US","countryName":"United States"},{"name":"Greer Greenville Spartanburg","code":"GSP","stateCode":"SC","countryCode":"US","countryName":"United States"},{"name":"Gustavus Arpt","code":"GST","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Grimsby Binbrook","code":"GSY","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Gatokae Aerodrom","code":"GTA","stateCode":"","countryCode":"SB","countryName":"Solomon Islands"},{"name":"Groote Eylandt Alyangula","code":"GTE","stateCode":"NT","countryCode":"AU","countryName":"Australia"},{"name":"Great Falls International","code":"GTF","stateCode":"MT","countryCode":"US","countryName":"United States"},{"name":"Gorontalo Tolotio","code":"GTO","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Columbus Golden Triangle Reg","code":"GTR","stateCode":"MS","countryCode":"US","countryName":"United States"},{"name":"Granites","code":"GTS","stateCode":"NT","countryCode":"AU","countryName":"Australia"},{"name":"Guatemala City La Aurora","code":"GUA","stateCode":"","countryCode":"GT","countryName":"Guatemala"},{"name":"Gunnison Crested Butte Regional Airport","code":"GUC","stateCode":"CO","countryCode":"US","countryName":"United States"},{"name":"Guam AB Won Pat Intl","code":"GUM","stateCode":"","countryCode":"GU","countryName":"Guam"},{"name":"Alotau Gurney","code":"GUR","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Atyrau","code":"GUW","stateCode":"","countryCode":"KZ","countryName":"Kazakhstan"},{"name":"Geneva Geneve Cointrin","code":"GVA","stateCode":"","countryCode":"CH","countryName":"Switzerland"},{"name":"Governador Valadares","code":"GVR","stateCode":"MG","countryCode":"BR","countryName":"Brazil"},{"name":"Gavle Sandviken","code":"GVX","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Gwadar","code":"GWD","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Gwalior","code":"GWL","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Westerland   Sylt","code":"GWT","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Galway Carnmore","code":"GWY","stateCode":"","countryCode":"IE","countryName":"Ireland"},{"name":"Seiyun","code":"GXF","stateCode":"","countryCode":"YE","countryName":"Yemen"},{"name":"Negage","code":"GXG","stateCode":"","countryCode":"AO","countryName":"Angola"},{"name":"Guayaramerin","code":"GYA","stateCode":"","countryCode":"BO","countryName":"Bolivia"},{"name":"Baku Heydar Aliyev Intl","code":"GYD","stateCode":"","countryCode":"AZ","countryName":"Azerbaijan"},{"name":"Jose Joaquin de Olmedo International Airport","code":"GYE","stateCode":"","countryCode":"EC","countryName":"Ecuador"},{"name":"Argyle","code":"GYL","stateCode":"WA","countryCode":"AU","countryName":"Australia"},{"name":"Guaymas Gen Jose M Yanez","code":"GYM","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Goiania Santa Genoveva","code":"GYN","stateCode":"GO","countryCode":"BR","countryName":"Brazil"},{"name":"Gizo","code":"GZO","stateCode":"","countryCode":"SB","countryName":"Solomon Islands"},{"name":"Gaziantep","code":"GZT","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Hasvik","code":"HAA","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Hachijo Jima","code":"HAC","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Halmstad","code":"HAD","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Havasupai","code":"HAE","stateCode":"AZ","countryCode":"US","countryName":"United States"},{"name":"Moroni Prince Said Ibrahim In","code":"HAH","stateCode":"","countryCode":"KM","countryName":"Comoros"},{"name":"Hanover Arpt","code":"HAJ","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Haikou","code":"HAK","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Hamburg Fuhlsbuettel","code":"HAM","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Hanoi Noibai","code":"HAN","stateCode":"","countryCode":"VN","countryName":"Vietnam"},{"name":"Hanimaadhoo","code":"HAQ","stateCode":"","countryCode":"MV","countryName":"Maldives"},{"name":"Harrisburg Skyport","code":"HAR","stateCode":"PA","countryCode":"US","countryName":"United States"},{"name":"Hail","code":"HAS","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Haugesund","code":"HAU","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Havana Jose Marti Intl","code":"HAV","stateCode":"","countryCode":"CU","countryName":"Cuba"},{"name":"Hobart","code":"HBA","stateCode":"TS","countryCode":"AU","countryName":"Australia"},{"name":"Alexandria Borg El Arab","code":"HBE","stateCode":"","countryCode":"EG","countryName":"Egypt"},{"name":"Hafr Albatin","code":"HBT","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Hubli","code":"HBX","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Hengchun","code":"HCN","stateCode":"","countryCode":"TW","countryName":"Taiwan"},{"name":"Holy Cross","code":"HCR","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Heidelberg","code":"HDB","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Hyderabad","code":"HDD","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Heringsdorf","code":"HDF","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Hamadan","code":"HDM","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Hayden Yampa Valley Steamboat Springs","code":"HDN","stateCode":"CO","countryCode":"US","countryName":"United States"},{"name":"Hoedspruit Airport","code":"HDS","stateCode":"","countryCode":"ZA","countryName":"South Africa"},{"name":"Hat Yai","code":"HDY","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Herat","code":"HEA","stateCode":"","countryCode":"AF","countryName":"Afghanistan"},{"name":"Heho","code":"HEH","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Heide Busum","code":"HEI","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Heihe","code":"HEK","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Helsinki Vantaa","code":"HEL","stateCode":"","countryCode":"FI","countryName":"Finland"},{"name":"Heraklion N Kazantzakis Apt","code":"HER","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Hohhot","code":"HET","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Haifa","code":"HFA","stateCode":"","countryCode":"IL","countryName":"Israel"},{"name":"Hartford Brainard","code":"HFD","stateCode":"CT","countryCode":"US","countryName":"United States"},{"name":"Hefei","code":"HFE","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Hammerfest","code":"HFT","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Hargeisa","code":"HGA","stateCode":"","countryCode":"SO","countryName":"Somalia"},{"name":"Hughenden","code":"HGD","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Hangzhou","code":"HGH","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Helgoland","code":"HGL","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Mae Hong Son","code":"HGN","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Hagerstown Wash County Regional","code":"HGR","stateCode":"MD","countryCode":"US","countryName":"United States"},{"name":"Mount Hagen Kagamuga","code":"HGU","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Hilton Head","code":"HHH","stateCode":"SC","countryCode":"US","countryName":"United States"},{"name":"Frankfurt Hahn","code":"HHN","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Hua Hin Airport","code":"HHQ","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Hikueru","code":"HHZ","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Hibbing Chisholm","code":"HIB","stateCode":"MN","countryCode":"US","countryName":"United States"},{"name":"Horn Island","code":"HID","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Hiroshima International","code":"HIJ","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Shillavo","code":"HIL","stateCode":"","countryCode":"ET","countryName":"Ethiopia"},{"name":"Jinju Sacheon","code":"HIN","stateCode":"","countryCode":"KR","countryName":"South Korea"},{"name":"Honiara Henderson Intl","code":"HIR","stateCode":"","countryCode":"SB","countryName":"Solomon Islands"},{"name":"Hayman Island","code":"HIS","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Khajuraho","code":"HJR","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Healy Lake","code":"HKB","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Hakodate","code":"HKD","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Hong Kong Intl","code":"HKG","stateCode":"","countryCode":"HK","countryName":"Hong Kong"},{"name":"Hokitika Arpt","code":"HKK","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Hoskins","code":"HKN","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Phuket International","code":"HKT","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Hailar","code":"HLD","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Ulanhot","code":"HLH","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Helena","code":"HLN","stateCode":"MT","countryCode":"US","countryName":"United States"},{"name":"Holyhead","code":"HLY","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Hamilton","code":"HLZ","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Khanty Mansiysk","code":"HMA","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Hassi Messaoud Oued Irara Apt","code":"HME","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Hermosillo Gen Pesqueira Garcia","code":"HMO","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Hemavan","code":"HMV","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Hanamaki","code":"HNA","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Tokyo Haneda","code":"HND","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Hoonah","code":"HNH","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Honolulu International Airport","code":"HNL","stateCode":"HI","countryCode":"US","countryName":"United States"},{"name":"Maui Hana","code":"HNM","stateCode":"HI","countryCode":"US","countryName":"United States"},{"name":"Haines Municipal","code":"HNS","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Hobbs Lea County","code":"HOB","stateCode":"NM","countryCode":"US","countryName":"United States"},{"name":"Hodeidah Arpt","code":"HOD","stateCode":"","countryCode":"YE","countryName":"Yemen"},{"name":"Houeisay","code":"HOE","stateCode":"","countryCode":"LA","countryName":"Laos"},{"name":"Alahsa","code":"HOF","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Holguin Frank Pais","code":"HOG","stateCode":"","countryCode":"CU","countryName":"Cuba"},{"name":"Hohenems","code":"HOH","stateCode":"","countryCode":"AT","countryName":"Austria"},{"name":"Hao Island","code":"HOI","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Homer","code":"HOM","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Huron Howes","code":"HON","stateCode":"SD","countryCode":"US","countryName":"United States"},{"name":"Hof","code":"HOQ","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Horta","code":"HOR","stateCode":"","countryCode":"PT","countryName":"Portugal"},{"name":"Houston Hobby","code":"HOU","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Orsta Volda Hovden","code":"HOV","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"HaApai Salote Pilolevu","code":"HPA","stateCode":"","countryCode":"TO","countryName":"Tonga"},{"name":"Hooper Bay","code":"HPB","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Haiphong Catbi","code":"HPH","stateCode":"","countryCode":"VN","countryName":"Vietnam"},{"name":"Westchester County Apt","code":"HPN","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"Harbin","code":"HRB","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Harare","code":"HRE","stateCode":"","countryCode":"ZW","countryName":"Zimbabwe"},{"name":"Hurghada","code":"HRG","stateCode":"","countryCode":"EG","countryName":"Egypt"},{"name":"Kharkov","code":"HRK","stateCode":"","countryCode":"UA","countryName":"Ukraine"},{"name":"Harlingen Valley International","code":"HRL","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Harrogate Linton On Ouse","code":"HRT","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Saga","code":"HSG","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Huslia","code":"HSL","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Zhoushan","code":"HSN","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Huntsville Intl","code":"HSV","stateCode":"AL","countryCode":"US","countryName":"United States"},{"name":"Chita","code":"HTA","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Hatanga","code":"HTG","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Hamilton Island","code":"HTI","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Hotan","code":"HTN","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Huntington Ashland Milton Tri State","code":"HTS","stateCode":"WV","countryCode":"US","countryName":"United States"},{"name":"Huahine","code":"HUH","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Hue Phu Bai","code":"HUI","stateCode":"","countryCode":"VN","countryName":"Vietnam"},{"name":"Hualien","code":"HUN","stateCode":"","countryCode":"TW","countryName":"Taiwan"},{"name":"Houn","code":"HUQ","stateCode":"","countryCode":"LY","countryName":"Libya"},{"name":"Hughes Municipal","code":"HUS","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Hudiksvall","code":"HUV","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Huatulco","code":"HUX","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Humberside Arpt","code":"HUY","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Huizhou","code":"HUZ","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Analalava","code":"HVA","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Hervey Bay","code":"HVB","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Khovd","code":"HVD","stateCode":"","countryCode":"MN","countryName":"Mongolia"},{"name":"Honningsvag Valan","code":"HVG","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"New Haven","code":"HVN","stateCode":"CT","countryCode":"US","countryName":"United States"},{"name":"Havre City County","code":"HVR","stateCode":"MT","countryCode":"US","countryName":"United States"},{"name":"Hyannis Barnstable","code":"HYA","stateCode":"MA","countryCode":"US","countryName":"United States"},{"name":"Hyderabad Rajiv Gandhi International Airport","code":"HYD","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Hydaburg SPB","code":"HYG","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Hollis SPB","code":"HYL","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Huangyan","code":"HYN","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Hays Municipal","code":"HYS","stateCode":"KS","countryCode":"US","countryName":"United States"},{"name":"Hanzhong","code":"HZG","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Igarka","code":"IAA","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Washington Dulles Intl","code":"IAD","stateCode":"DC","countryCode":"US","countryName":"United States"},{"name":"Niagara Falls International","code":"IAG","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"Houston George Bush Intercntl","code":"IAH","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"In Amenas","code":"IAM","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Kiana Bob Baker Memorial Airport","code":"IAN","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Iasi","code":"IAS","stateCode":"","countryCode":"RO","countryName":"Romania"},{"name":"Ibadan","code":"IBA","stateCode":"","countryCode":"NG","countryName":"Nigeria"},{"name":"Ibague","code":"IBE","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Ibiza","code":"IBZ","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Cicia","code":"ICI","stateCode":"","countryCode":"FJ","countryName":"Fiji"},{"name":"Seoul Incheon International","code":"ICN","stateCode":"","countryCode":"KR","countryName":"South Korea"},{"name":"Wichita Dwight D Eisenhower","code":"ICT","stateCode":"KS","countryCode":"US","countryName":"United States"},{"name":"Idaho Falls Fanning Field","code":"IDA","stateCode":"ID","countryCode":"US","countryName":"United States"},{"name":"Indore","code":"IDR","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Zielona Gora Babimost","code":"IEG","stateCode":"","countryCode":"PL","countryName":"Poland"},{"name":"Kiev Zhulhany","code":"IEV","stateCode":"","countryCode":"UA","countryName":"Ukraine"},{"name":"Isafjordur","code":"IFJ","stateCode":"","countryCode":"IS","countryName":"Iceland"},{"name":"Isfahan","code":"IFN","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Ivano Frankovsk","code":"IFO","stateCode":"","countryCode":"UA","countryName":"Ukraine"},{"name":"Laughlin Bullhead Intl","code":"IFP","stateCode":"AZ","countryCode":"US","countryName":"United States"},{"name":"Inagua","code":"IGA","stateCode":"","countryCode":"BS","countryName":"Bahamas"},{"name":"Igiugig","code":"IGG","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kingman","code":"IGM","stateCode":"AZ","countryCode":"US","countryName":"United States"},{"name":"Iguazu Cataratas","code":"IGR","stateCode":"MI","countryCode":"AR","countryName":"Argentina"},{"name":"Iguassu Falls Cataratas","code":"IGU","stateCode":"PR","countryCode":"BR","countryName":"Brazil"},{"name":"Iran Shahr","code":"IHR","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Ilaam","code":"IIL","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Izhevsk","code":"IJK","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Imam Khomeini International Airport","code":"IKA","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Nikolski AFS","code":"IKO","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Tiksi","code":"IKS","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Irkutsk","code":"IKT","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Greater Wilmington","code":"ILG","stateCode":"DE","countryCode":"US","countryName":"United States"},{"name":"Iliamna","code":"ILI","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Wilmington New Hanover County","code":"ILM","stateCode":"NC","countryCode":"US","countryName":"United States"},{"name":"Wilmington Clinton Field","code":"ILN","stateCode":"OH","countryCode":"US","countryName":"United States"},{"name":"Iloilo Mandurriao","code":"ILO","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Ile Des Pins","code":"ILP","stateCode":"","countryCode":"NC","countryName":"New Caledonia"},{"name":"Ilorin","code":"ILR","stateCode":"","countryCode":"NG","countryName":"Nigeria"},{"name":"Islay Glenegedale","code":"ILY","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Zilina","code":"ILZ","stateCode":"","countryCode":"SK","countryName":"Slovakia"},{"name":"Imphal Municipal","code":"IMF","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Simikot","code":"IMK","stateCode":"","countryCode":"NP","countryName":"Nepal"},{"name":"Imperatriz","code":"IMP","stateCode":"MA","countryCode":"BR","countryName":"Brazil"},{"name":"Iron Mountain Ford","code":"IMT","stateCode":"MI","countryCode":"US","countryName":"United States"},{"name":"Yinchuan","code":"INC","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Indianapolis International","code":"IND","stateCode":"IN","countryCode":"US","countryName":"United States"},{"name":"Inhambane","code":"INH","stateCode":"","countryCode":"MZ","countryName":"Mozambique"},{"name":"Nis","code":"INI","stateCode":"","countryCode":"RS","countryName":"Serbia"},{"name":"International Falls Falls Intl","code":"INL","stateCode":"MN","countryCode":"US","countryName":"United States"},{"name":"Innsbruck Kranebitten","code":"INN","stateCode":"","countryCode":"AT","countryName":"Austria"},{"name":"Winston Salem Smith Reynolds","code":"INT","stateCode":"NC","countryCode":"US","countryName":"United States"},{"name":"Nauru Island International","code":"INU","stateCode":"","countryCode":"NR","countryName":"Nauru"},{"name":"Inverness","code":"INV","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"In Salah","code":"INZ","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Ioannina","code":"IOA","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Isle Of Man Ronaldsway","code":"IOM","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Impfondo","code":"ION","stateCode":"","countryCode":"CG","countryName":"Congo (brazzaville)"},{"name":"Ilheus Eduardo Gomes","code":"IOS","stateCode":"BA","countryCode":"BR","countryName":"Brazil"},{"name":"Ipota","code":"IPA","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Easter Island Mataveri Intl","code":"IPC","stateCode":"","countryCode":"CL","countryName":"Chile"},{"name":"Ipoh","code":"IPH","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Ipiales San Luis","code":"IPI","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"El Centro Imperial Imperial County","code":"IPL","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Ipatinga Usiminas","code":"IPN","stateCode":"MG","countryCode":"BR","countryName":"Brazil"},{"name":"Williamsport Lycoming County","code":"IPT","stateCode":"PA","countryCode":"US","countryName":"United States"},{"name":"Ipswich","code":"IPW","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Qiemo","code":"IQM","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Qingyang","code":"IQN","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Iquique Cavancha","code":"IQQ","stateCode":"","countryCode":"CL","countryName":"Chile"},{"name":"Iquitos CF Secada","code":"IQT","stateCode":"","countryCode":"PE","countryName":"Peru"},{"name":"Kirakira","code":"IRA","stateCode":"","countryCode":"SB","countryName":"Solomon Islands"},{"name":"Circle City","code":"IRC","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Lockhart River","code":"IRG","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"La Rioja","code":"IRJ","stateCode":"LR","countryCode":"AR","countryName":"Argentina"},{"name":"Kirksville Municipal","code":"IRK","stateCode":"MO","countryCode":"US","countryName":"United States"},{"name":"Mount Isa","code":"ISA","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Islamabad Intl","code":"ISB","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Ishigaki","code":"ISG","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Williston Sloulin Field Intl","code":"ISN","stateCode":"ND","countryCode":"US","countryName":"United States"},{"name":"Kinston Stallings Field","code":"ISO","stateCode":"NC","countryCode":"US","countryName":"United States"},{"name":"Islip Long Island Macarthur","code":"ISP","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"Istanbul Ataturk","code":"IST","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Sulaymaniyah International Airport","code":"ISU","stateCode":"","countryCode":"IQ","countryName":"Iraq"},{"name":"Ithaca Tompkins County","code":"ITH","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"Osaka Itami","code":"ITM","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Hilo Big Island Hilo International","code":"ITO","stateCode":"HI","countryCode":"US","countryName":"United States"},{"name":"Niue Island Hanan","code":"IUE","stateCode":"","countryCode":"NU","countryName":"Niue"},{"name":"Invercargill","code":"IVC","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Ivalo","code":"IVL","stateCode":"","countryCode":"FI","countryName":"Finland"},{"name":"Inverell","code":"IVR","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Ironwood Gogebic County","code":"IWD","stateCode":"MI","countryCode":"US","countryName":"United States"},{"name":"Iwami","code":"IWJ","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Iwakuni Kintaikyo Airport","code":"IWK","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Agartala Singerbhil","code":"IXA","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Bagdogra","code":"IXB","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Chandigarh","code":"IXC","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Allahabad Bamrauli","code":"IXD","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Mangalore Bajpe","code":"IXE","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Belgaum Sambre","code":"IXG","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Lilabari","code":"IXI","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Jammu Satwari","code":"IXJ","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Leh","code":"IXL","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Madurai","code":"IXM","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Ranchi","code":"IXR","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Silchar Kumbhirgram","code":"IXS","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Aurangabad Chikkalthana","code":"IXU","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Jamshedpur Sonari","code":"IXW","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Kandla","code":"IXY","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Port Blair","code":"IXZ","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Inyokern Kern County","code":"IYK","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Izmir","code":"IZM","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Izumo","code":"IZO","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Jackson Hole Airport","code":"JAC","stateCode":"WY","countryCode":"US","countryName":"United States"},{"name":"Jaipur Sanganeer","code":"JAI","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Jalapa","code":"JAL","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Jackson Intl","code":"JAN","stateCode":"MS","countryCode":"US","countryName":"United States"},{"name":"Ilulissat","code":"JAV","stateCode":"","countryCode":"GL","countryName":"Greenland"},{"name":"Jacksonville International","code":"JAX","stateCode":"FL","countryCode":"US","countryName":"United States"},{"name":"Joacaba","code":"JCB","stateCode":"SC","countryCode":"BR","countryName":"Brazil"},{"name":"Qasigiannguit","code":"JCH","stateCode":"","countryCode":"GL","countryName":"Greenland"},{"name":"Julia Creek","code":"JCK","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Juiz De Fora Francisco De Assis","code":"JDF","stateCode":"MG","countryCode":"BR","countryName":"Brazil"},{"name":"Jodhpur","code":"JDH","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Juazeiro Do Norte Regional Do Cariri","code":"JDO","stateCode":"CE","countryCode":"BR","countryName":"Brazil"},{"name":"Jingdezhen","code":"JDZ","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Jeddah King Abdulaziz Intl","code":"JED","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Jefferson City Memorial","code":"JEF","stateCode":"MO","countryCode":"US","countryName":"United States"},{"name":"Aasiaat","code":"JEG","stateCode":"","countryCode":"GL","countryName":"Greenland"},{"name":"Jeh","code":"JEJ","stateCode":"","countryCode":"MH","countryName":"Marshall Islands"},{"name":"Jersey States","code":"JER","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"New York John F Kennedy Intl","code":"JFK","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"Paamiut","code":"JFR","stateCode":"","countryCode":"GL","countryName":"Greenland"},{"name":"Jamnagar Govardhanpur","code":"JGA","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Grand Canyon Heliport","code":"JGC","stateCode":"AZ","countryCode":"US","countryName":"United States"},{"name":"Jiayuguan","code":"JGN","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Qeqertarsuaq","code":"JGO","stateCode":"","countryCode":"GL","countryName":"Greenland"},{"name":"Johor Bahru Sultan Ismail Intl","code":"JHB","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Jinghong Gasa","code":"JHG","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Maui Kapalua","code":"JHM","stateCode":"HI","countryCode":"US","countryName":"United States"},{"name":"Sisimiut","code":"JHS","stateCode":"","countryCode":"GL","countryName":"Greenland"},{"name":"Jamestown","code":"JHW","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"Djibouti Ambouli","code":"JIB","stateCode":"","countryCode":"DJ","countryName":"Djibouti"},{"name":"Jijiga Jigiga","code":"JIJ","stateCode":"","countryCode":"ET","countryName":"Ethiopia"},{"name":"Ikaria Island Ikaria","code":"JIK","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Jimma","code":"JIM","stateCode":"","countryCode":"ET","countryName":"Ethiopia"},{"name":"Jiujiang","code":"JIU","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Jinjiang","code":"JJN","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Qaqortoq Heliport","code":"JJU","stateCode":"","countryCode":"GL","countryName":"Greenland"},{"name":"Jonkoping Axamo","code":"JKG","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Chios","code":"JKH","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Jakarta","code":"JKT","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Landskrona Heliport","code":"JLD","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Joplin","code":"JLN","stateCode":"MO","countryCode":"US","countryName":"United States"},{"name":"Jabalpur","code":"JLR","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Mikonos","code":"JMK","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Jamestown","code":"JMS","stateCode":"ND","countryCode":"US","countryName":"United States"},{"name":"Jiamusi","code":"JMU","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Johannesburg Intl","code":"JNB","stateCode":"","countryCode":"ZA","countryName":"South Africa"},{"name":"Nanortalik","code":"JNN","stateCode":"","countryCode":"GL","countryName":"Greenland"},{"name":"Narsaq Heliport","code":"JNS","stateCode":"","countryCode":"GL","countryName":"Greenland"},{"name":"Juneau International","code":"JNU","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Naxos Airport","code":"JNX","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Jinzhou","code":"JNZ","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Joensuu","code":"JOE","stateCode":"","countryCode":"FI","countryName":"Finland"},{"name":"Yogyakarta Adisutjipto","code":"JOG","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Joinville Cubatao","code":"JOI","stateCode":"SC","countryCode":"BR","countryName":"Brazil"},{"name":"Jolo","code":"JOL","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Joao Pessoa Castro Pinto","code":"JPA","stateCode":"PB","countryCode":"BR","countryName":"Brazil"},{"name":"Ji Parana","code":"JPR","stateCode":"RO","countryCode":"BR","countryName":"Brazil"},{"name":"Qaarsut","code":"JQA","stateCode":"","countryCode":"GL","countryName":"Greenland"},{"name":"New York Downtown Manhattan H P","code":"JRB","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"Jorhat Rowriah","code":"JRH","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Kilimanjaro","code":"JRO","stateCode":"","countryCode":"TZ","countryName":"Tanzania"},{"name":"Jaisalmer","code":"JSA","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Sitia","code":"JSH","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Skiathos","code":"JSI","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Sodertalje Heliport","code":"JSO","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Jessore","code":"JSR","stateCode":"","countryCode":"BD","countryName":"Bangladesh"},{"name":"Johnstown Cambria County","code":"JST","stateCode":"PA","countryCode":"US","countryName":"United States"},{"name":"Maniitsoq Heliport","code":"JSU","stateCode":"","countryCode":"GL","countryName":"Greenland"},{"name":"Syros Island","code":"JSY","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Thira","code":"JTR","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Astypalaia Island Astypalaia","code":"JTY","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Jujuy El Cadillal","code":"JUJ","stateCode":"PJ","countryCode":"AR","countryName":"Argentina"},{"name":"Juliaca","code":"JUL","stateCode":"","countryCode":"PE","countryName":"Peru"},{"name":"Jumla","code":"JUM","stateCode":"","countryCode":"NP","countryName":"Nepal"},{"name":"Upernavik Heliport","code":"JUV","stateCode":"","countryCode":"GL","countryName":"Greenland"},{"name":"Juzhou","code":"JUZ","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Ankavandra","code":"JVA","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Jyvaskyla","code":"JYV","stateCode":"","countryCode":"FI","countryName":"Finland"},{"name":"Kariba","code":"KAB","stateCode":"","countryCode":"ZW","countryName":"Zimbabwe"},{"name":"Kaduna","code":"KAD","stateCode":"","countryCode":"NG","countryName":"Nigeria"},{"name":"Kake SPB","code":"KAE","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kajaani","code":"KAJ","stateCode":"","countryCode":"FI","countryName":"Finland"},{"name":"Kaltag","code":"KAL","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Aminu Kano Intl Apt","code":"KAN","stateCode":"","countryCode":"NG","countryName":"Nigeria"},{"name":"Kuusamo","code":"KAO","stateCode":"","countryCode":"FI","countryName":"Finland"},{"name":"Kaitaia","code":"KAT","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Kawthaung","code":"KAW","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Kalbarri","code":"KAX","stateCode":"WA","countryCode":"AU","countryName":"Australia"},{"name":"Birch Creek","code":"KBC","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kabul Khwaja Rawash","code":"KBL","stateCode":"","countryCode":"AF","countryName":"Afghanistan"},{"name":"Kiev Borispol","code":"KBP","stateCode":"","countryCode":"UA","countryName":"Ukraine"},{"name":"Kota Bharu Pengkalan Chepa","code":"KBR","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Krabi","code":"KBV","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Kuqa","code":"KCA","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Coffman Cove SPB","code":"KCC","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kadanwari","code":"KCF","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Chignik Fisheries","code":"KCG","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kuching","code":"KCH","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Chignik Lagoon","code":"KCL","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kahramanmaras","code":"KCM","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Chignik","code":"KCQ","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kochi","code":"KCZ","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Kandahar","code":"KDH","stateCode":"","countryCode":"AF","countryName":"Afghanistan"},{"name":"Kendari Wolter Monginsidi","code":"KDI","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Kardla","code":"KDL","stateCode":"","countryCode":"EE","countryName":"Estonia"},{"name":"Kaadedhdhoo","code":"KDM","stateCode":"","countryCode":"MV","countryName":"Maldives"},{"name":"Kadhdhoo","code":"KDO","stateCode":"","countryCode":"MV","countryName":"Maldives"},{"name":"Skardu","code":"KDU","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Kandavu","code":"KDV","stateCode":"","countryCode":"FJ","countryName":"Fiji"},{"name":"Nanwalek","code":"KEB","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Reykjavik Keflavik International","code":"KEF","stateCode":"","countryCode":"IS","countryName":"Iceland"},{"name":"Kemerovo","code":"KEJ","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Ekwok","code":"KEK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kemi Tornio","code":"KEM","stateCode":"","countryCode":"FI","countryName":"Finland"},{"name":"Nepalganj","code":"KEP","stateCode":"","countryCode":"NP","countryName":"Nepal"},{"name":"Kerman","code":"KER","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Keng Tung","code":"KET","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Keewaywin","code":"KEW","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Kiffa","code":"KFA","stateCode":"","countryCode":"MR","countryName":"Mauritania"},{"name":"False Pass","code":"KFP","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kananga","code":"KGA","stateCode":"","countryCode":"CD","countryName":"Congo (kinshasa)"},{"name":"Kingscote","code":"KGC","stateCode":"SA","countryCode":"AU","countryName":"Australia"},{"name":"Kaliningrad","code":"KGD","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Kagau","code":"KGE","stateCode":"","countryCode":"SB","countryName":"Solomon Islands"},{"name":"Karaganda","code":"KGF","stateCode":"","countryCode":"KZ","countryName":"Kazakhstan"},{"name":"Kalgoorlie","code":"KGI","stateCode":"WA","countryCode":"AU","countryName":"Australia"},{"name":"New Koliganek","code":"KGK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kigali Gregoire Kayibanda","code":"KGL","stateCode":"","countryCode":"RW","countryName":"Rwanda"},{"name":"Kogalym International","code":"KGP","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Kos","code":"KGS","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Grayling","code":"KGX","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kherson","code":"KHE","stateCode":"","countryCode":"UA","countryName":"Ukraine"},{"name":"Kashi","code":"KHG","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Kaohsiung International","code":"KHH","stateCode":"","countryCode":"TW","countryName":"Taiwan"},{"name":"Karachi Quaid E Azam Intl","code":"KHI","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Khamti","code":"KHM","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Nanchang","code":"KHN","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Khasab","code":"KHS","stateCode":"","countryCode":"OM","countryName":"Oman"},{"name":"Khabarovsk Novyy","code":"KHV","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Kauehi","code":"KHZ","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Kristianstad","code":"KID","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Kingfisher Lake","code":"KIF","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Kish Island","code":"KIH","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Niigata","code":"KIJ","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Kirkuk","code":"KIK","stateCode":"","countryCode":"IQ","countryName":"Iraq"},{"name":"Kimberley","code":"KIM","stateCode":"","countryCode":"ZA","countryName":"South Africa"},{"name":"Kingston Norman Manley","code":"KIN","stateCode":"","countryCode":"JM","countryName":"Jamaica"},{"name":"Kerry County Airport","code":"KIR","stateCode":"","countryCode":"IE","countryName":"Ireland"},{"name":"Kisumu","code":"KIS","stateCode":"","countryCode":"KE","countryName":"Kenya"},{"name":"Kithira","code":"KIT","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Chisinau","code":"KIV","stateCode":"","countryCode":"MD","countryName":"Moldova"},{"name":"Osaka Kansai International","code":"KIX","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Krasnojarsk","code":"KJA","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Koyuk","code":"KKA","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kitoi Bay SPB","code":"KKB","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Khon Kaen","code":"KKC","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Kokoda","code":"KKD","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Kerikeri","code":"KKE","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Kongiganak","code":"KKH","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Akiachak Spb","code":"KKI","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kita Kyushu Kokura","code":"KKJ","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Kirkenes Hoeybuktmoen","code":"KKN","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Kaukura Atoll","code":"KKR","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Ekuk","code":"KKU","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kalskag Municipal","code":"KLG","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kolhapur","code":"KLH","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Levelock","code":"KLL","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Larsen Bay Larsen SPB","code":"KLN","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kalibo","code":"KLO","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Kalmar","code":"KLR","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Klagenfurt","code":"KLU","stateCode":"","countryCode":"AT","countryName":"Austria"},{"name":"Karlovy Vary","code":"KLV","stateCode":"","countryCode":"CZ","countryName":"Czech Republic"},{"name":"Klawock","code":"KLW","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kalamata","code":"KLX","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Kerema","code":"KMA","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"King Khalid Mil City King Khalid Military","code":"KMC","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Kamembe","code":"KME","stateCode":"","countryCode":"RW","countryName":"Rwanda"},{"name":"Kunming","code":"KMG","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Miyazaki","code":"KMI","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Kumamoto","code":"KMJ","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Manokotak SPB","code":"KMO","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Komatsu","code":"KMQ","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Kumasi","code":"KMS","stateCode":"","countryCode":"GH","countryName":"Ghana"},{"name":"Kalemyo","code":"KMV","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Moser Bay","code":"KMY","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kindu","code":"KND","stateCode":"","countryCode":"CD","countryName":"Congo (kinshasa)"},{"name":"Kings Lynn Marham RAF","code":"KNF","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Kaimana","code":"KNG","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Kinmen Shang Yi","code":"KNH","stateCode":"","countryCode":"TW","countryName":"Taiwan"},{"name":"Kakhonak","code":"KNK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kone","code":"KNQ","stateCode":"","countryCode":"NC","countryName":"New Caledonia"},{"name":"King Island","code":"KNS","stateCode":"TS","countryCode":"AU","countryName":"Australia"},{"name":"Kanpur","code":"KNU","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"New Stuyahok","code":"KNW","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kununurra","code":"KNX","stateCode":"WA","countryCode":"AU","countryName":"Australia"},{"name":"Kona Big Island Keahole","code":"KOA","stateCode":"HI","countryCode":"US","countryName":"United States"},{"name":"Koumac","code":"KOC","stateCode":"","countryCode":"NC","countryName":"New Caledonia"},{"name":"Kupang Eltari","code":"KOE","stateCode":"","countryCode":"TL","countryName":"East Timor"},{"name":"Kirkwall Kirkwall Arpt Orkney Island","code":"KOI","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Kagoshima","code":"KOJ","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Kokkola Pietarsaari Kruunupyy","code":"KOK","stateCode":"","countryCode":"FI","countryName":"Finland"},{"name":"Nakhon Phanom","code":"KOP","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Kotlik","code":"KOT","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Koulamoutou","code":"KOU","stateCode":"","countryCode":"GA","countryName":"Gabon"},{"name":"Ganzhou","code":"KOW","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Olga Bay SPB","code":"KOY","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Ouzinkie SPB","code":"KOZ","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Point Baker SPB","code":"KPB","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Port Clarence","code":"KPC","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kipnuk SPB","code":"KPN","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Pohang","code":"KPO","stateCode":"","countryCode":"KR","countryName":"South Korea"},{"name":"Port Williams SPB","code":"KPR","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Perryville SPB","code":"KPV","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Port Bailey SPB","code":"KPY","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Akutan","code":"KQA","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Karumba","code":"KRB","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Kramfors","code":"KRF","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Kikori","code":"KRI","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Krakow J Paul II Balice Intl","code":"KRK","stateCode":"","countryCode":"PL","countryName":"Poland"},{"name":"Korla","code":"KRL","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Kiruna","code":"KRN","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Karup","code":"KRP","stateCode":"","countryCode":"DK","countryName":"Denmark"},{"name":"Krasnodar","code":"KRR","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Kristiansand Kjevik","code":"KRS","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Karamay","code":"KRY","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Kosrae","code":"KSA","stateCode":"","countryCode":"FM","countryName":"Micronesia"},{"name":"Kosice Barca","code":"KSC","stateCode":"","countryCode":"SK","countryName":"Slovakia"},{"name":"Karlstad","code":"KSD","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Kassel Calden","code":"KSF","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Kermanshah","code":"KSH","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Kasos Island","code":"KSJ","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Saint Marys","code":"KSM","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kostanay","code":"KSN","stateCode":"","countryCode":"KZ","countryName":"Kazakhstan"},{"name":"Kastoria Aristoteles Airport","code":"KSO","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Karshi","code":"KSQ","stateCode":"","countryCode":"UZ","countryName":"Uzbekistan"},{"name":"Kristiansund Kvernberget","code":"KSU","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Kars","code":"KSY","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Kotlas","code":"KSZ","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Karratha","code":"KTA","stateCode":"WA","countryCode":"AU","countryName":"Australia"},{"name":"Thorne Bay","code":"KTB","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kerteh","code":"KTE","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Kathmandu Tribhuvan","code":"KTM","stateCode":"","countryCode":"NP","countryName":"Nepal"},{"name":"Ketchikan International","code":"KTN","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Teller Mission Brevig Mission","code":"KTS","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kittila","code":"KTT","stateCode":"","countryCode":"FI","countryName":"Finland"},{"name":"Katowice Pyrzowice","code":"KTW","stateCode":"","countryCode":"PL","countryName":"Poland"},{"name":"Kuantan","code":"KUA","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Kudat","code":"KUD","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Samara","code":"KUF","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Kubin Island","code":"KUG","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Kushiro","code":"KUH","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Kasigluk","code":"KUK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kuala Lumpur Intl","code":"KUL","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Kaunas","code":"KUN","stateCode":"","countryCode":"LT","countryName":"Lithuania"},{"name":"Kuopio","code":"KUO","stateCode":"","countryCode":"FI","countryName":"Finland"},{"name":"Kulusuk","code":"KUS","stateCode":"","countryCode":"GL","countryName":"Greenland"},{"name":"Kutaisi","code":"KUT","stateCode":"","countryCode":"GE","countryName":"Georgia"},{"name":"Kulu Bhuntar","code":"KUU","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Gunsan","code":"KUV","stateCode":"","countryCode":"KR","countryName":"South Korea"},{"name":"Kavala Megas Alexandros Apt","code":"KVA","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Skovde","code":"KVB","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"King Cove","code":"KVC","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Gyandzha","code":"KVD","stateCode":"","countryCode":"AZ","countryName":"Azerbaijan"},{"name":"Kavieng","code":"KVG","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Kirovsk","code":"KVK","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Kivalina","code":"KVL","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kwajalein","code":"KWA","stateCode":"","countryCode":"MH","countryName":"Marshall Islands"},{"name":"Guiyang","code":"KWE","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Waterfall SPB","code":"KWF","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Krivoy Rog","code":"KWG","stateCode":"","countryCode":"UA","countryName":"Ukraine"},{"name":"Kuwait International","code":"KWI","stateCode":"","countryCode":"KW","countryName":"Kuwait"},{"name":"Gwangju","code":"KWJ","stateCode":"","countryCode":"KR","countryName":"South Korea"},{"name":"Kwigillingok","code":"KWK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Guilin","code":"KWL","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Kowanyama","code":"KWM","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Quinhagak Kwinhagak","code":"KWN","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"West Point Village SPB","code":"KWP","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kwethluk","code":"KWT","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kolwezi","code":"KWZ","stateCode":"","countryCode":"CD","countryName":"Congo (kinshasa)"},{"name":"Kasaan SPB","code":"KXA","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Koro Island","code":"KXF","stateCode":"","countryCode":"FJ","countryName":"Fiji"},{"name":"Komsomolsk Na Amure","code":"KXK","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Katiu","code":"KXU","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Konya","code":"KYA","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Karluk","code":"KYK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Milton Keynes","code":"KYN","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Kyaukpyu","code":"KYP","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Kayes","code":"KYS","stateCode":"","countryCode":"ML","countryName":"Mali"},{"name":"Koyukuk","code":"KYU","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kyzyl","code":"KYZ","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Zachar Bay SPB","code":"KZB","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kozani Philippos Airport","code":"KZI","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Kazan","code":"KZN","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Kzyl Orda","code":"KZO","stateCode":"","countryCode":"KZ","countryName":"Kazakhstan"},{"name":"Kastelorizo","code":"KZS","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Luanda 4 de Fevereiro","code":"LAD","stateCode":"","countryCode":"AO","countryName":"Angola"},{"name":"Lae Nadzab","code":"LAE","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Lannion Servel","code":"LAI","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Lages","code":"LAJ","stateCode":"SC","countryCode":"BR","countryName":"Brazil"},{"name":"Aklavik","code":"LAK","stateCode":"NT","countryCode":"CA","countryName":"Canada"},{"name":"Lansing Capital City","code":"LAN","stateCode":"MI","countryCode":"US","countryName":"United States"},{"name":"Laoag","code":"LAO","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"La Paz Leon","code":"LAP","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Beida La Braq","code":"LAQ","stateCode":"","countryCode":"LY","countryName":"Libya"},{"name":"Laramie General Brees Field","code":"LAR","stateCode":"WY","countryCode":"US","countryName":"United States"},{"name":"Las Vegas McCarran Intl","code":"LAS","stateCode":"NV","countryCode":"US","countryName":"United States"},{"name":"Lamu","code":"LAU","stateCode":"","countryCode":"KE","countryName":"Kenya"},{"name":"Lawton Municipal","code":"LAW","stateCode":"OK","countryCode":"US","countryName":"United States"},{"name":"Los Angeles International","code":"LAX","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Bradford Leeds","code":"LBA","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Lubbock Preston Smith International Airport","code":"LBB","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Hamburg Luebeck","code":"LBC","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Khudzhand","code":"LBD","stateCode":"","countryCode":"TJ","countryName":"Tajikistan"},{"name":"Latrobe Westmoreland County","code":"LBE","stateCode":"PA","countryCode":"US","countryName":"United States"},{"name":"North Platte Lee Bird Field","code":"LBF","stateCode":"NE","countryCode":"US","countryName":"United States"},{"name":"Paris Le Bourget","code":"LBG","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Liberal Municipal","code":"LBL","stateCode":"KS","countryCode":"US","countryName":"United States"},{"name":"Long Banga Airfield","code":"LBP","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Labasa","code":"LBS","stateCode":"","countryCode":"FJ","countryName":"Fiji"},{"name":"Labuan","code":"LBU","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Libreville","code":"LBV","stateCode":"","countryCode":"GA","countryName":"Gabon"},{"name":"Larnaca","code":"LCA","stateCode":"","countryCode":"CY","countryName":"Cyprus"},{"name":"La Ceiba Goloson International","code":"LCE","stateCode":"","countryCode":"HN","countryName":"Honduras"},{"name":"La Coruna","code":"LCG","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Lake Charles Municipal","code":"LCH","stateCode":"LA","countryCode":"US","countryName":"United States"},{"name":"Lodz Lublinek","code":"LCJ","stateCode":"","countryCode":"PL","countryName":"Poland"},{"name":"Columbus Rickenbacker","code":"LCK","stateCode":"OH","countryCode":"US","countryName":"United States"},{"name":"La Chorrera","code":"LCR","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"London City Airport","code":"LCY","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Londrina","code":"LDB","stateCode":"PR","countryCode":"BR","countryName":"Brazil"},{"name":"Lourdes Tarbes Tarbes Ossun Lourdes","code":"LDE","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Lord Howe Island","code":"LDH","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Lamidanda","code":"LDN","stateCode":"","countryCode":"NP","countryName":"Nepal"},{"name":"Lahad Datu","code":"LDU","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Landivisiau","code":"LDV","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Londonderry Eglinton","code":"LDY","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Learmonth","code":"LEA","stateCode":"WA","countryCode":"AU","countryName":"Australia"},{"name":"Lebanon Hanover Regional White River","code":"LEB","stateCode":"NH","countryCode":"US","countryName":"United States"},{"name":"St Petersburg Pulkovo","code":"LED","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Le Havre Octeville","code":"LEH","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Almeria","code":"LEI","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Halle Leipzig","code":"LEJ","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Leon","code":"LEN","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Leinster","code":"LER","stateCode":"WA","countryCode":"AU","countryName":"Australia"},{"name":"Leticia Gen AV Cobo","code":"LET","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Bureta Levuka Airfield","code":"LEV","stateCode":"","countryCode":"FJ","countryName":"Fiji"},{"name":"Lexington Blue Grass","code":"LEX","stateCode":"KY","countryCode":"US","countryName":"United States"},{"name":"Lamerd","code":"LFM","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Lafayette Regional","code":"LFT","stateCode":"LA","countryCode":"US","countryName":"United States"},{"name":"Lome","code":"LFW","stateCode":"","countryCode":"TG","countryName":"Togo"},{"name":"New York LaGuardia","code":"LGA","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"Long Beach Municipal","code":"LGB","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Liege Bierset","code":"LGG","stateCode":"","countryCode":"BE","countryName":"Belgium"},{"name":"Long Island Deadmans Cay","code":"LGI","stateCode":"","countryCode":"BS","countryName":"Bahamas"},{"name":"Langkawi","code":"LGK","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Long Lellang","code":"LGL","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Legaspi","code":"LGP","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Lago Agrio","code":"LGQ","stateCode":"","countryCode":"EC","countryName":"Ecuador"},{"name":"London Gatwick","code":"LGW","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Lahore","code":"LHE","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Lightning Ridge","code":"LHG","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"London Heathrow","code":"LHR","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Lanzhou Arpt","code":"LHW","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Lifou","code":"LIF","stateCode":"","countryCode":"NC","countryName":"New Caledonia"},{"name":"Limoges Bellegarde","code":"LIG","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Kauai Island Lihue","code":"LIH","stateCode":"HI","countryCode":"US","countryName":"United States"},{"name":"Lima Jorge Chavez International","code":"LIM","stateCode":"","countryCode":"PE","countryName":"Peru"},{"name":"Milan Linate","code":"LIN","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Limon","code":"LIO","stateCode":"","countryCode":"CR","countryName":"Costa Rica"},{"name":"Daniel Oduber Quiros International Airport","code":"LIR","stateCode":"","countryCode":"CR","countryName":"Costa Rica"},{"name":"Lisbon Lisboa","code":"LIS","stateCode":"","countryCode":"PT","countryName":"Portugal"},{"name":"Little Rock National Airport","code":"LIT","stateCode":"AR","countryCode":"US","countryName":"United States"},{"name":"Loikaw","code":"LIW","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Lijiang City Lijiang","code":"LJG","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Ljubljana Brnik","code":"LJU","stateCode":"","countryCode":"SI","countryName":"Slovenia"},{"name":"Lakeba","code":"LKB","stateCode":"","countryCode":"FJ","countryName":"Fiji"},{"name":"Seattle Lake Union SPB","code":"LKE","stateCode":"WA","countryCode":"US","countryName":"United States"},{"name":"Lokichoggio","code":"LKG","stateCode":"","countryCode":"KE","countryName":"Kenya"},{"name":"Long Akah","code":"LKH","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Lakselv Banak","code":"LKL","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Leknes","code":"LKN","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Lucknow Amausi","code":"LKO","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Lulea Kallax","code":"LLA","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"LingLing","code":"LLF","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Lalibela","code":"LLI","stateCode":"","countryCode":"ET","countryName":"Ethiopia"},{"name":"Alluitsup Paa","code":"LLU","stateCode":"","countryCode":"GL","countryName":"Greenland"},{"name":"Lilongwe International","code":"LLW","stateCode":"","countryCode":"MW","countryName":"Malawi"},{"name":"Lake Minchumina","code":"LMA","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Lamacarena","code":"LMC","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Los Mochis Federal","code":"LMM","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Limbang","code":"LMN","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Lampedusa","code":"LMP","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Klamath Falls Kingsley Field","code":"LMT","stateCode":"OR","countryCode":"US","countryName":"United States"},{"name":"Lake Murray","code":"LMY","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Lamen Bay","code":"LNB","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Lonorore","code":"LNE","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Lincang","code":"LNJ","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Lincoln Municipal","code":"LNK","stateCode":"NE","countryCode":"US","countryName":"United States"},{"name":"Leonora","code":"LNO","stateCode":"WA","countryCode":"AU","countryName":"Australia"},{"name":"Lancaster","code":"LNS","stateCode":"PA","countryCode":"US","countryName":"United States"},{"name":"Lihir Island","code":"LNV","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Lanai City","code":"LNY","stateCode":"HI","countryCode":"US","countryName":"United States"},{"name":"Linz Hoersching","code":"LNZ","stateCode":"","countryCode":"AT","countryName":"Austria"},{"name":"Longana","code":"LOD","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Loja","code":"LOH","stateCode":"","countryCode":"EC","countryName":"Ecuador"},{"name":"London","code":"LON","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Lagos Murtala Muhammed","code":"LOS","stateCode":"","countryCode":"NG","countryName":"Nigeria"},{"name":"Louisville Bowman Field","code":"LOU","stateCode":"KY","countryCode":"US","countryName":"United States"},{"name":"Monclova","code":"LOV","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Las Palmas Arpt De Gran Canaria","code":"LPA","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"La Paz El Alto","code":"LPB","stateCode":"","countryCode":"BO","countryName":"Bolivia"},{"name":"La Pedrera","code":"LPD","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Linkoping","code":"LPI","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Lipetsk","code":"LPK","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Liverpool John Lennon","code":"LPL","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Lamap","code":"LPM","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Lappeenranta","code":"LPP","stateCode":"","countryCode":"FI","countryName":"Finland"},{"name":"Luang Prabang","code":"LPQ","stateCode":"","countryCode":"LA","countryName":"Laos"},{"name":"Lopez Island","code":"LPS","stateCode":"WA","countryCode":"US","countryName":"United States"},{"name":"Lampang","code":"LPT","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Liepaya","code":"LPX","stateCode":"","countryCode":"LV","countryName":"Latvia"},{"name":"Le Puy Loudes","code":"LPY","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Puerto Leguizamo","code":"LQM","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Laredo International","code":"LRD","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Longreach","code":"LRE","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"La Rochelle Laleu","code":"LRH","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"La Romana","code":"LRM","stateCode":"","countryCode":"DO","countryName":"Dominican Republic"},{"name":"Lar A P","code":"LRR","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Leros","code":"LRS","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Lorient Lann Bihoue","code":"LRT","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Losuia","code":"LSA","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"La Serena La Florida","code":"LSC","stateCode":"","countryCode":"CL","countryName":"Chile"},{"name":"La Crosse Municipal","code":"LSE","stateCode":"WI","countryCode":"US","countryName":"United States"},{"name":"Lashio","code":"LSH","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Shetland Islands Sumburgh","code":"LSI","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Las Piedras Josefa Camejo","code":"LSP","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"Terre de Haut","code":"LSS","stateCode":"","countryCode":"GP","countryName":"Guadeloupe"},{"name":"Launceston","code":"LST","stateCode":"TS","countryCode":"AU","countryName":"Australia"},{"name":"Lismore","code":"LSY","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Ghadames","code":"LTD","stateCode":"","countryCode":"LY","countryName":"Libya"},{"name":"Altai","code":"LTI","stateCode":"","countryCode":"MN","countryName":"Mongolia"},{"name":"London Lunton Luton Airport","code":"LTN","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Loreto","code":"LTO","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Saint Tropez La Mole","code":"LTT","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Latacunga Cotapaxi International","code":"LTX","stateCode":"","countryCode":"EC","countryName":"Ecuador"},{"name":"Lukla","code":"LUA","stateCode":"","countryCode":"NP","countryName":"Nepal"},{"name":"Luderitz","code":"LUD","stateCode":"","countryCode":"NA","countryName":"Namibia"},{"name":"Phoenix Luke AFB","code":"LUF","stateCode":"AZ","countryCode":"US","countryName":"United States"},{"name":"Lugano","code":"LUG","stateCode":"","countryCode":"CH","countryName":"Switzerland"},{"name":"Laurel Hesler Noble Field","code":"LUL","stateCode":"MS","countryCode":"US","countryName":"United States"},{"name":"Luxi Mangshi","code":"LUM","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Lusaka","code":"LUN","stateCode":"","countryCode":"ZM","countryName":"Zambia"},{"name":"Luena","code":"LUO","stateCode":"","countryCode":"AO","countryName":"Angola"},{"name":"Molokai Kalaupapa","code":"LUP","stateCode":"HI","countryCode":"US","countryName":"United States"},{"name":"San Luis","code":"LUQ","stateCode":"SL","countryCode":"AR","countryName":"Argentina"},{"name":"Cape Lisburne","code":"LUR","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Langgur","code":"LUV","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Luxembourg","code":"LUX","stateCode":"","countryCode":"LU","countryName":"Luxembourg"},{"name":"Livingstone","code":"LVI","stateCode":"","countryCode":"ZM","countryName":"Zambia"},{"name":"Laverton","code":"LVO","stateCode":"WA","countryCode":"AU","countryName":"Australia"},{"name":"Lewisburg Greenbrier Valley","code":"LWB","stateCode":"WV","countryCode":"US","countryName":"United States"},{"name":"Gyoumri","code":"LWN","stateCode":"","countryCode":"AM","countryName":"Armenia"},{"name":"Lviv Snilow","code":"LWO","stateCode":"","countryCode":"UA","countryName":"Ukraine"},{"name":"Lewiston Nez Perce County Rgnl","code":"LWS","stateCode":"ID","countryCode":"US","countryName":"United States"},{"name":"Lewistown Municipal","code":"LWT","stateCode":"MT","countryCode":"US","countryName":"United States"},{"name":"Lawas","code":"LWY","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Lhasa","code":"LXA","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Luang Namtha","code":"LXG","stateCode":"","countryCode":"LA","countryName":"Laos"},{"name":"Luxor","code":"LXR","stateCode":"","countryCode":"EG","countryName":"Egypt"},{"name":"Limnos","code":"LXS","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Luoyang","code":"LYA","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Little Cayman","code":"LYB","stateCode":"","countryCode":"KY","countryName":"Cayman Islands"},{"name":"Lycksele","code":"LYC","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Lianyungang","code":"LYG","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Lynchburg Preston Glenn Field","code":"LYH","stateCode":"VA","countryCode":"US","countryName":"United States"},{"name":"Linyi","code":"LYI","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Faisalabad","code":"LYP","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Longyearbyen Svalbard","code":"LYR","stateCode":"","countryCode":"SJ","countryName":"Svalbard And Jan Mayen"},{"name":"Lyon Satolas","code":"LYS","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Lazaro Cardenas","code":"LZC","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Liuzhou","code":"LZH","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Nangan","code":"LZN","stateCode":"","countryCode":"TW","countryName":"Taiwan"},{"name":"Luzhou","code":"LZO","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Chennai","code":"MAA","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Maraba","code":"MAB","stateCode":"PA","countryCode":"BR","countryName":"Brazil"},{"name":"Madrid Barajas","code":"MAD","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Midland Odessa Regional","code":"MAF","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Madang","code":"MAG","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Menorca","code":"MAH","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Majuro Amata Kabua Intl","code":"MAJ","stateCode":"","countryCode":"MH","countryName":"Marshall Islands"},{"name":"Matamoros","code":"MAM","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Manchester International","code":"MAN","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Manaus Eduardo Gomes Intl","code":"MAO","stateCode":"AM","countryCode":"BR","countryName":"Brazil"},{"name":"Maracaibo La Chinita","code":"MAR","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"Manus Island Momote","code":"MAS","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Maupiti","code":"MAU","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Mayaguez Eugenio M De Hostos","code":"MAZ","stateCode":"","countryCode":"PR","countryName":"Puerto Rico"},{"name":"Mombasa Moi International","code":"MBA","stateCode":"","countryCode":"KE","countryName":"Kenya"},{"name":"Mmabatho International","code":"MBD","stateCode":"","countryCode":"ZA","countryName":"South Africa"},{"name":"Monbetsu","code":"MBE","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Maryborough","code":"MBH","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Montego Bay Sangster Intl","code":"MBJ","stateCode":"","countryCode":"JM","countryName":"Jamaica"},{"name":"Manistee Blacker","code":"MBL","stateCode":"MI","countryCode":"US","countryName":"United States"},{"name":"Saginaw Bay City Midland Tri City","code":"MBS","stateCode":"MI","countryCode":"US","countryName":"United States"},{"name":"Masbate","code":"MBT","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Mbambanakira","code":"MBU","stateCode":"","countryCode":"SB","countryName":"Solomon Islands"},{"name":"Merced Municipal Arpt","code":"MCE","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Mcgrath","code":"MCG","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Kansas City International","code":"MCI","stateCode":"MO","countryCode":"US","countryName":"United States"},{"name":"Mccook","code":"MCK","stateCode":"NE","countryCode":"US","countryName":"United States"},{"name":"Monte Carlo Heliport","code":"MCM","stateCode":"","countryCode":"MC","countryName":"Monaco"},{"name":"Macon Lewis B Wilson","code":"MCN","stateCode":"GA","countryCode":"US","countryName":"United States"},{"name":"Orlando International","code":"MCO","stateCode":"FL","countryCode":"US","countryName":"United States"},{"name":"Macapa Internacional","code":"MCP","stateCode":"AP","countryCode":"BR","countryName":"Brazil"},{"name":"Muscat Seeb","code":"MCT","stateCode":"","countryCode":"OM","countryName":"Oman"},{"name":"Mcarthur River","code":"MCV","stateCode":"NT","countryCode":"AU","countryName":"Australia"},{"name":"Mason City","code":"MCW","stateCode":"IA","countryCode":"US","countryName":"United States"},{"name":"Makhachkala","code":"MCX","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Sunshine Coast Maroochydore","code":"MCY","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Maceio Palmares","code":"MCZ","stateCode":"AL","countryCode":"BR","countryName":"Brazil"},{"name":"Manado Samratulangi","code":"MDC","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Medellin Jose Marie Cordova","code":"MDE","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Mudanjiang","code":"MDG","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Mbandaka","code":"MDK","stateCode":"","countryCode":"CD","countryName":"Congo (kinshasa)"},{"name":"Mandalay Annisaton","code":"MDL","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Mar Del Plata","code":"MDQ","stateCode":"BA","countryCode":"AR","countryName":"Argentina"},{"name":"Middle Caicos","code":"MDS","stateCode":"","countryCode":"TC","countryName":"Turks And Caicos Islands"},{"name":"Harrisburg Intl","code":"MDT","stateCode":"PA","countryCode":"US","countryName":"United States"},{"name":"Mendi","code":"MDU","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Chicago Midway","code":"MDW","stateCode":"IL","countryCode":"US","countryName":"United States"},{"name":"Mendoza El Plumerillo","code":"MDZ","stateCode":"MD","countryCode":"AR","countryName":"Argentina"},{"name":"Manta","code":"MEC","stateCode":"","countryCode":"EC","countryName":"Ecuador"},{"name":"Madinah Mohammad Bin Abdulaziz","code":"MED","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Mare","code":"MEE","stateCode":"","countryCode":"NC","countryName":"New Caledonia"},{"name":"Malange","code":"MEG","stateCode":"","countryCode":"AO","countryName":"Angola"},{"name":"Mehamn","code":"MEH","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Meridian Key Field","code":"MEI","stateCode":"MS","countryCode":"US","countryName":"United States"},{"name":"Melbourne Tullamarine","code":"MEL","stateCode":"VI","countryCode":"AU","countryName":"Australia"},{"name":"Memphis International","code":"MEM","stateCode":"TN","countryCode":"US","countryName":"United States"},{"name":"Medan Polania","code":"MES","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Mexico City Benito Juarez International","code":"MEX","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Meghauli","code":"MEY","stateCode":"","countryCode":"NP","countryName":"Nepal"},{"name":"McAllen Miller International McAllen","code":"MFE","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Moala","code":"MFJ","stateCode":"","countryCode":"FJ","countryName":"Fiji"},{"name":"Matsu","code":"MFK","stateCode":"","countryCode":"TW","countryName":"Taiwan"},{"name":"Macau","code":"MFM","stateCode":"","countryCode":"MO","countryName":"Macau"},{"name":"Medford Jackson County","code":"MFR","stateCode":"OR","countryCode":"US","countryName":"United States"},{"name":"Mfuwe","code":"MFU","stateCode":"","countryCode":"ZM","countryName":"Zambia"},{"name":"Managua Augusto C Sandino","code":"MGA","stateCode":"","countryCode":"NI","countryName":"Nicaragua"},{"name":"Mount Gambier","code":"MGB","stateCode":"SA","countryCode":"AU","countryName":"Australia"},{"name":"Regional De Maringa","code":"MGF","stateCode":"PR","countryCode":"BR","countryName":"Brazil"},{"name":"Margate","code":"MGH","stateCode":"","countryCode":"ZA","countryName":"South Africa"},{"name":"Montgomery Dannelly Fld","code":"MGM","stateCode":"AL","countryCode":"US","countryName":"United States"},{"name":"Mogadishu International","code":"MGQ","stateCode":"","countryCode":"SO","countryName":"Somalia"},{"name":"Mangaia Island","code":"MGS","stateCode":"","countryCode":"CK","countryName":"Cook Islands"},{"name":"Milingimbi","code":"MGT","stateCode":"NT","countryCode":"AU","countryName":"Australia"},{"name":"Morgantown","code":"MGW","stateCode":"WV","countryCode":"US","countryName":"United States"},{"name":"Myeik","code":"MGZ","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Mashad","code":"MHD","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Mannheim Arpt","code":"MHG","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Marsh Harbour International","code":"MHH","stateCode":"","countryCode":"BS","countryName":"Bahamas"},{"name":"Manhattan Regional Airport","code":"MHK","stateCode":"KS","countryCode":"US","countryName":"United States"},{"name":"Minsk International 1","code":"MHP","stateCode":"","countryCode":"BY","countryName":"Belarus"},{"name":"Mariehamn","code":"MHQ","stateCode":"","countryCode":"FI","countryName":"Finland"},{"name":"Sacramento Mather AFB","code":"MHR","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Manchester Municipal","code":"MHT","stateCode":"NH","countryCode":"US","countryName":"United States"},{"name":"Miami International","code":"MIA","stateCode":"FL","countryCode":"US","countryName":"United States"},{"name":"Merida Rejon","code":"MID","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Mian Yang","code":"MIG","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Marilia Dr Gastao Vidigal","code":"MII","stateCode":"SP","countryCode":"BR","countryName":"Brazil"},{"name":"Milan","code":"MIL","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Merimbula","code":"MIM","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Monastir Habib Bourguiba Intl","code":"MIR","stateCode":"","countryCode":"TN","countryName":"Tunisia"},{"name":"Misima Island","code":"MIS","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Manja","code":"MJA","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Mohenjodaro","code":"MJD","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Mosjoen Kjaerstad","code":"MJF","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Mitiga","code":"MJI","stateCode":"","countryCode":"LY","countryName":"Libya"},{"name":"Monkey Mia Shark Bay","code":"MJK","stateCode":"WA","countryCode":"AU","countryName":"Australia"},{"name":"Mouila","code":"MJL","stateCode":"","countryCode":"GA","countryName":"Gabon"},{"name":"Mbuji Mayi","code":"MJM","stateCode":"","countryCode":"CD","countryName":"Congo (kinshasa)"},{"name":"Majunga Amborovy","code":"MJN","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Mytilene","code":"MJT","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Murcia San Javier","code":"MJV","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Mirnyj","code":"MJZ","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Milwaukee General Mitchell","code":"MKE","stateCode":"WI","countryCode":"US","countryName":"United States"},{"name":"Muskegon","code":"MKG","stateCode":"MI","countryCode":"US","countryName":"United States"},{"name":"Hoolehua Molokai","code":"MKK","stateCode":"HI","countryCode":"US","countryName":"United States"},{"name":"Mukah","code":"MKM","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Makemo","code":"MKP","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Merauke Mopah","code":"MKQ","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Meekatharra","code":"MKR","stateCode":"WA","countryCode":"AU","countryName":"Australia"},{"name":"Makokou","code":"MKU","stateCode":"","countryCode":"GA","countryName":"Gabon"},{"name":"Manokwari Rendani","code":"MKW","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Mackay","code":"MKY","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Malta Luqa","code":"MLA","stateCode":"","countryCode":"MT","countryName":"Malta"},{"name":"Melbourne Intl","code":"MLB","stateCode":"FL","countryCode":"US","countryName":"United States"},{"name":"Male International","code":"MLE","stateCode":"","countryCode":"MV","countryName":"Maldives"},{"name":"Malang","code":"MLG","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Basel Mulhouse EuroAirport French","code":"MLH","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Moline Quad City","code":"MLI","stateCode":"IL","countryCode":"US","countryName":"United States"},{"name":"Marshall","code":"MLL","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Morelia","code":"MLM","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Melilla","code":"MLN","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Milos","code":"MLO","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Monroe Municipal","code":"MLU","stateCode":"LA","countryCode":"US","countryName":"United States"},{"name":"Malatya","code":"MLX","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Manley Hot Springs","code":"MLY","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Malmo","code":"MMA","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Memanbetsu","code":"MMB","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Durham Tees Valley","code":"MME","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Mount Magnet","code":"MMG","stateCode":"WA","countryCode":"AU","countryName":"Australia"},{"name":"Mammoth Lakes","code":"MMH","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Murmansk","code":"MMK","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Vila Do Maio","code":"MMO","stateCode":"","countryCode":"CV","countryName":"Cape Verde"},{"name":"Malmo Sturup","code":"MMX","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Miyako Jima Hirara","code":"MMY","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Mana Island Airstrip","code":"MNF","stateCode":"","countryCode":"FJ","countryName":"Fiji"},{"name":"Maningrida","code":"MNG","stateCode":"NT","countryCode":"AU","countryName":"Australia"},{"name":"Mananjary","code":"MNJ","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Manila Ninoy Aquino Intl","code":"MNL","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Minto","code":"MNT","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Maulmyine","code":"MNU","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Moa Orestes Acosta","code":"MOA","stateCode":"","countryCode":"CU","countryName":"Cuba"},{"name":"Mobile Municipal Arpt","code":"MOB","stateCode":"AL","countryCode":"US","countryName":"United States"},{"name":"Montes Claros","code":"MOC","stateCode":"MG","countryCode":"BR","countryName":"Brazil"},{"name":"Modesto Municipal","code":"MOD","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Maumere Waioti","code":"MOF","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Mong Hsat","code":"MOG","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Mitiaro Island","code":"MOI","stateCode":"","countryCode":"CK","countryName":"Cook Islands"},{"name":"Molde Aro","code":"MOL","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Morondava","code":"MOQ","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Minot International","code":"MOT","stateCode":"ND","countryCode":"US","countryName":"United States"},{"name":"Mountain Village","code":"MOU","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Moranbah","code":"MOV","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Moscow","code":"MOW","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Moorea Temae","code":"MOZ","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Mpacha","code":"MPA","stateCode":"","countryCode":"NA","countryName":"Namibia"},{"name":"Caticlan Malay","code":"MPH","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Montpellier Meditarranee","code":"MPL","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Maputo International","code":"MPM","stateCode":"","countryCode":"MZ","countryName":"Mozambique"},{"name":"Mount Pleasant","code":"MPN","stateCode":"","countryCode":"FK","countryName":"Falkland Islands"},{"name":"Mariupol","code":"MPW","stateCode":"","countryCode":"UA","countryName":"Ukraine"},{"name":"Magnitogorsk","code":"MQF","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Mildura","code":"MQL","stateCode":"VI","countryCode":"AU","countryName":"Australia"},{"name":"Mardin","code":"MQM","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Mo I Rana","code":"MQN","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Nelspruit Kruger Mpumalanga","code":"MQP","stateCode":"","countryCode":"ZA","countryName":"South Africa"},{"name":"Marquette Sawyer International","code":"MQT","stateCode":"MI","countryCode":"US","countryName":"United States"},{"name":"Makale","code":"MQX","stateCode":"","countryCode":"ET","countryName":"Ethiopia"},{"name":"Misurata","code":"MRA","stateCode":"","countryCode":"LY","countryName":"Libya"},{"name":"Merida A Carnevalli","code":"MRD","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"Mara Lodges","code":"MRE","stateCode":"","countryCode":"KE","countryName":"Kenya"},{"name":"Marseille","code":"MRS","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Mauritius SSeewoosagur RamInt","code":"MRU","stateCode":"","countryCode":"MU","countryName":"Mauritius"},{"name":"Mineralnye Vody","code":"MRV","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Carmel Monterey Peninsula","code":"MRY","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Moree","code":"MRZ","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Muskrat Dam","code":"MSA","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Manston Kent International","code":"MSE","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Misawa","code":"MSJ","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Florence Muscle Shoals Sheffield","code":"MSL","stateCode":"AL","countryCode":"US","countryName":"United States"},{"name":"Madison Dane County Regional","code":"MSN","stateCode":"WI","countryCode":"US","countryName":"United States"},{"name":"Missoula Johnson Bell Field","code":"MSO","stateCode":"MT","countryCode":"US","countryName":"United States"},{"name":"Minneapolis St Paul International","code":"MSP","stateCode":"MN","countryCode":"US","countryName":"United States"},{"name":"Minsk International 2","code":"MSQ","stateCode":"","countryCode":"BY","countryName":"Belarus"},{"name":"Mus","code":"MSR","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Massena Richards Field","code":"MSS","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"Aachen Maastricht","code":"MST","stateCode":"","countryCode":"NL","countryName":"Netherlands"},{"name":"Maseru Moshoeshoe Intl","code":"MSU","stateCode":"","countryCode":"LS","countryName":"Lesotho"},{"name":"Massawa","code":"MSW","stateCode":"","countryCode":"ER","countryName":"Eritrea"},{"name":"New Orleans Louis Armstrong Intl","code":"MSY","stateCode":"LA","countryCode":"US","countryName":"United States"},{"name":"Namibe","code":"MSZ","stateCode":"","countryCode":"AO","countryName":"Angola"},{"name":"Montrose Telluride","code":"MTJ","stateCode":"CO","countryCode":"US","countryName":"United States"},{"name":"Metlakatla SPB","code":"MTM","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Monteria S Jeronimo","code":"MTR","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Manzini Matsapha Intl","code":"MTS","stateCode":"","countryCode":"SZ","countryName":"Swaziland"},{"name":"Minatitlan","code":"MTT","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Mota Lava","code":"MTV","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Monterrey Gen Mariano Escobedo","code":"MTY","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Munda","code":"MUA","stateCode":"","countryCode":"SB","countryName":"Solomon Islands"},{"name":"Maun","code":"MUB","stateCode":"","countryCode":"BW","countryName":"Botswana"},{"name":"Munich Franz Josef Strauss","code":"MUC","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Big Island Kamuela","code":"MUE","stateCode":"HI","countryCode":"US","countryName":"United States"},{"name":"Mersa Matruh","code":"MUH","stateCode":"","countryCode":"EG","countryName":"Egypt"},{"name":"Mauke Island","code":"MUK","stateCode":"","countryCode":"CK","countryName":"Cook Islands"},{"name":"Maturin Quiriquire","code":"MUN","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"Marudi","code":"MUR","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Multan","code":"MUX","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Musoma","code":"MUZ","stateCode":"","countryCode":"TZ","countryName":"Tanzania"},{"name":"Franceville Mvengue","code":"MVB","stateCode":"","countryCode":"GA","countryName":"Gabon"},{"name":"Montevideo Carrasco","code":"MVD","stateCode":"","countryCode":"UY","countryName":"Uruguay"},{"name":"Mitu","code":"MVP","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Maroua Salam","code":"MVR","stateCode":"","countryCode":"CM","countryName":"Cameroon"},{"name":"Mucuri","code":"MVS","stateCode":"BA","countryCode":"BR","countryName":"Brazil"},{"name":"Mataiva","code":"MVT","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Marthas Vineyard","code":"MVY","stateCode":"MA","countryCode":"US","countryName":"United States"},{"name":"Marion Williamson County","code":"MWA","stateCode":"IL","countryCode":"US","countryName":"United States"},{"name":"Maewo","code":"MWF","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Magwe","code":"MWQ","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Mwanza","code":"MWZ","stateCode":"","countryCode":"TZ","countryName":"Tanzania"},{"name":"Moro","code":"MXH","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Mexicali","code":"MXL","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Morombe","code":"MXM","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Morlaix","code":"MXN","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Milan Malpensa","code":"MXP","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Maintirano","code":"MXT","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Moron","code":"MXV","stateCode":"","countryCode":"MN","countryName":"Mongolia"},{"name":"Mora","code":"MXX","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Meixian","code":"MXZ","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Moruya","code":"MYA","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Malindi","code":"MYD","stateCode":"","countryCode":"KE","countryName":"Kenya"},{"name":"Miyake Jima","code":"MYE","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Mayaguana","code":"MYG","stateCode":"","countryCode":"BS","countryName":"Bahamas"},{"name":"Murray Island","code":"MYI","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Matsuyama","code":"MYJ","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Mccall","code":"MYL","stateCode":"ID","countryCode":"US","countryName":"United States"},{"name":"Myrtle Beach AFB","code":"MYR","stateCode":"SC","countryCode":"US","countryName":"United States"},{"name":"Myitkyina","code":"MYT","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Mekoryuk Ellis Field","code":"MYU","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Mtwara","code":"MYW","stateCode":"","countryCode":"TZ","countryName":"Tanzania"},{"name":"Miri","code":"MYY","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Makung","code":"MZG","stateCode":"","countryCode":"TW","countryName":"Taiwan"},{"name":"Merzifon","code":"MZH","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Mopti","code":"MZI","stateCode":"","countryCode":"ML","countryName":"Mali"},{"name":"Manizales Santaguida","code":"MZL","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Manzanillo Sierra Maestra","code":"MZO","stateCode":"","countryCode":"CU","countryName":"Cuba"},{"name":"Mazar I Sharif","code":"MZR","stateCode":"","countryCode":"AF","countryName":"Afghanistan"},{"name":"Mazatlan Gen Rafael Buelna","code":"MZT","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Mulu","code":"MZV","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Narrabri","code":"NAA","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Naracoorte","code":"NAC","stateCode":"SA","countryCode":"AU","countryName":"Australia"},{"name":"Nagpur Sonegaon","code":"NAG","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Nakhichevan","code":"NAJ","stateCode":"","countryCode":"AZ","countryName":"Azerbaijan"},{"name":"Nadi International","code":"NAN","stateCode":"","countryCode":"FJ","countryName":"Fiji"},{"name":"Nanchong","code":"NAO","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Naples","code":"NAP","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Qaanaaq","code":"NAQ","stateCode":"","countryCode":"GL","countryName":"Greenland"},{"name":"Nassau Intl","code":"NAS","stateCode":"","countryCode":"BS","countryName":"Bahamas"},{"name":"Sao Gonzalo Do Amarante","code":"NAT","stateCode":"RN","countryCode":"BR","countryName":"Brazil"},{"name":"Napuka Island","code":"NAU","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Nevsehir","code":"NAV","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Narathiwat","code":"NAW","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Beijing Nanyuan Airport","code":"NAY","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Naberevnye Chelny","code":"NBC","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Enfidha","code":"NBE","stateCode":"","countryCode":"TN","countryName":"Tunisia"},{"name":"Nairobi Jomo Kenyatta Intl","code":"NBO","stateCode":"","countryCode":"KE","countryName":"Kenya"},{"name":"Guantanamo NAS","code":"NBW","stateCode":"","countryCode":"CU","countryName":"Cuba"},{"name":"Nabire","code":"NBX","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"North Caicos","code":"NCA","stateCode":"","countryCode":"TC","countryName":"Turks And Caicos Islands"},{"name":"Nice Cote DAzur","code":"NCE","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Newcastle Airport","code":"NCL","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"New Chenega","code":"NCN","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Luzon Is Cubi Pt NAS","code":"NCP","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Nukus","code":"NCU","stateCode":"","countryCode":"UZ","countryName":"Uzbekistan"},{"name":"Annecy Meythe","code":"NCY","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Nouadhibou","code":"NDB","stateCode":"","countryCode":"MR","countryName":"Mauritania"},{"name":"Qiqihar","code":"NDG","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Ndjamena","code":"NDJ","stateCode":"","countryCode":"TD","countryName":"Chad"},{"name":"Nador","code":"NDR","stateCode":"","countryCode":"MA","countryName":"Morocco"},{"name":"Neryungri","code":"NER","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Nevis Newcastle","code":"NEV","stateCode":"","countryCode":"KN","countryName":"Saint Kitts And Nevis"},{"name":"Niuafoou Mataaho","code":"NFO","stateCode":"","countryCode":"TO","countryName":"Tonga"},{"name":"Ningbo","code":"NGB","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Ngaoundere","code":"NGE","stateCode":"","countryCode":"CM","countryName":"Cameroon"},{"name":"Ngau Island","code":"NGI","stateCode":"","countryCode":"FJ","countryName":"Fiji"},{"name":"Nagoya Chubu Centrair Intl","code":"NGO","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Nagasaki","code":"NGS","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Nha Trang","code":"NHA","stateCode":"","countryCode":"VN","countryName":"Vietnam"},{"name":"Nuku Hiva","code":"NHV","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Nikolai","code":"NIB","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Niamey","code":"NIM","stateCode":"","countryCode":"NE","countryName":"Niger"},{"name":"Jacksonville NAS","code":"NIP","stateCode":"FL","countryCode":"US","countryName":"United States"},{"name":"Nizhnevartovsk","code":"NJC","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Nouakchott","code":"NKC","stateCode":"","countryCode":"MR","countryName":"Mauritania"},{"name":"Nanjing Nanking","code":"NKG","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Naukiti","code":"NKI","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Ndola","code":"NLA","stateCode":"","countryCode":"ZM","countryName":"Zambia"},{"name":"Nuevo Laredo Intl Quetzalcoatl","code":"NLD","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Darnley Island","code":"NLF","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Nelson Lagoon","code":"NLG","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Norfolk Island","code":"NLK","stateCode":"","countryCode":"NF","countryName":"Norfolk Island"},{"name":"Nikolaev","code":"NLV","stateCode":"","countryCode":"UA","countryName":"Ukraine"},{"name":"Namangan","code":"NMA","stateCode":"","countryCode":"UZ","countryName":"Uzbekistan"},{"name":"Nightmute","code":"NME","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Santa Ana","code":"NNB","stateCode":"","countryCode":"SB","countryName":"Solomon Islands"},{"name":"Nanning","code":"NNG","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Nondalton","code":"NNL","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Naryan Mar","code":"NNM","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Nan","code":"NNT","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Nanyang","code":"NNY","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Nosara Beach","code":"NOB","stateCode":"","countryCode":"CR","countryName":"Costa Rica"},{"name":"Knock International","code":"NOC","stateCode":"","countryCode":"IE","countryName":"Ireland"},{"name":"Nojabrxsk","code":"NOJ","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Nossi be Fascene","code":"NOS","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Noumea Tontouta","code":"NOU","stateCode":"","countryCode":"NC","countryName":"New Caledonia"},{"name":"Huambo","code":"NOV","stateCode":"","countryCode":"AO","countryName":"Angola"},{"name":"Novokuznetsk","code":"NOZ","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Napier Hastings Hawkes Bay","code":"NPE","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"New Plymouth","code":"NPL","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Neuquen","code":"NQN","stateCode":"NE","countryCode":"AR","countryName":"Argentina"},{"name":"Nottingham Airport","code":"NQT","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Nuqui","code":"NQU","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Newquay St Mawgan","code":"NQY","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Narrandera","code":"NRA","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Norrkoping Kungsangen","code":"NRK","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Tokyo Narita","code":"NRT","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Bimini North Seaplane Base","code":"NSB","stateCode":"","countryCode":"BS","countryName":"Bahamas"},{"name":"Now Shahr","code":"NSH","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Yaounde Nsimalen","code":"NSI","stateCode":"","countryCode":"CM","countryName":"Cameroon"},{"name":"Norilsk","code":"NSK","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Nelson","code":"NSN","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Nakhon Si Thammarat","code":"NST","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Nantes Atlantique","code":"NTE","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Nantong","code":"NTG","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Newcastle Williamtown","code":"NTL","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Normanton","code":"NTN","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Niuatoputapu Kuini Lavenia","code":"NTT","stateCode":"","countryCode":"TO","countryName":"Tonga"},{"name":"Nuremberg Airport","code":"NUE","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Nuiqsut","code":"NUI","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Nukutavake","code":"NUK","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Nulato","code":"NUL","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Nunapitchuk","code":"NUP","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Norsup","code":"NUS","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Novy Urengoy","code":"NUX","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Neiva La Marguita","code":"NVA","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Narvik Framnes","code":"NVK","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Novgorod","code":"NVR","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Navegantes","code":"NVT","stateCode":"SC","countryCode":"BR","countryName":"Brazil"},{"name":"Moheli","code":"NWA","stateCode":"","countryCode":"KM","countryName":"Comoros"},{"name":"Norwich Arpt","code":"NWI","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"New York","code":"NYC","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"Nanyuki","code":"NYK","stateCode":"","countryCode":"KE","countryName":"Kenya"},{"name":"Nadym","code":"NYM","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Stockholm Skavsta","code":"NYO","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Nyaung u","code":"NYU","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Orange Springhill","code":"OAG","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Jacksonville Albert J Ellis","code":"OAJ","stateCode":"NC","countryCode":"US","countryName":"United States"},{"name":"Oakland Metropolitan Oak Intl","code":"OAK","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Oamaru","code":"OAM","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Oaxaca Xoxocotlan","code":"OAX","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Oban Connel","code":"OBN","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Obihiro","code":"OBO","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Kobuk Wien","code":"OBU","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Obo","code":"OBX","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Coca","code":"OCC","stateCode":"","countryCode":"EC","countryName":"Ecuador"},{"name":"Long Seridan","code":"ODN","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Odessa Central","code":"ODS","stateCode":"","countryCode":"UA","countryName":"Ukraine"},{"name":"Oak Harbor","code":"ODW","stateCode":"WA","countryCode":"US","countryName":"United States"},{"name":"Oudomxay","code":"ODY","stateCode":"","countryCode":"LA","countryName":"Laos"},{"name":"Ornskoldsvik","code":"OER","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Ouango Fitini","code":"OFI","stateCode":"","countryCode":"CI","countryName":"Ivory Coast"},{"name":"Kahului Airport Kahului Maui","code":"OGG","stateCode":"HI","countryCode":"US","countryName":"United States"},{"name":"Yonaguni Jima","code":"OGN","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Ogdensburg","code":"OGS","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"Ouargla Ain Beida","code":"OGX","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Vladikavkaz","code":"OGZ","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Ohrid","code":"OHD","stateCode":"","countryCode":"MK","countryName":"Macedonia"},{"name":"Okhotsk","code":"OHO","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Oshima","code":"OIM","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Oita","code":"OIT","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Okinawa Naha","code":"OKA","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Oklahoma City Will Rogers World","code":"OKC","stateCode":"OK","countryCode":"US","countryName":"United States"},{"name":"Sapporo Okadama","code":"OKD","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Oki Island","code":"OKI","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Okayama","code":"OKJ","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Yorke Island","code":"OKR","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Oakey","code":"OKY","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Orland","code":"OLA","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Olbia Costa Smeralda","code":"OLB","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Wolf Point International","code":"OLF","stateCode":"MT","countryCode":"US","countryName":"United States"},{"name":"Old Harbor SPB","code":"OLH","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Olpoi","code":"OLJ","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Olympic Dam","code":"OLP","stateCode":"SA","countryCode":"AU","countryName":"Australia"},{"name":"Omaha Eppley Airfield","code":"OMA","stateCode":"NE","countryCode":"US","countryName":"United States"},{"name":"Omboue","code":"OMB","stateCode":"","countryCode":"GA","countryName":"Gabon"},{"name":"Ormoc","code":"OMC","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Oranjemund","code":"OMD","stateCode":"","countryCode":"NA","countryName":"Namibia"},{"name":"Nome","code":"OME","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Urmieh","code":"OMH","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Mostar","code":"OMO","stateCode":"","countryCode":"BA","countryName":"Bosnia And Herzegovina"},{"name":"Oradea","code":"OMR","stateCode":"","countryCode":"RO","countryName":"Romania"},{"name":"Omsk","code":"OMS","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Ondangwa","code":"OND","stateCode":"","countryCode":"NA","countryName":"Namibia"},{"name":"Mornington","code":"ONG","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Odate Noshiro","code":"ONJ","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Oneill","code":"ONL","stateCode":"NE","countryCode":"US","countryName":"United States"},{"name":"Ontario International","code":"ONT","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Toksook Bay","code":"OOK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Gold Coast","code":"OOL","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Miami Opa Locka","code":"OPF","stateCode":"FL","countryCode":"US","countryName":"United States"},{"name":"Porto","code":"OPO","stateCode":"","countryCode":"PT","countryName":"Portugal"},{"name":"Sinop","code":"OPS","stateCode":"MT","countryCode":"BR","countryName":"Brazil"},{"name":"Balimo","code":"OPU","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Orebro Bofors","code":"ORB","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Chicago OHare International","code":"ORD","stateCode":"IL","countryCode":"US","countryName":"United States"},{"name":"Norfolk International","code":"ORF","stateCode":"VA","countryCode":"US","countryName":"United States"},{"name":"Worcester","code":"ORH","stateCode":"MA","countryCode":"US","countryName":"United States"},{"name":"Port Lions SPB","code":"ORI","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Cork","code":"ORK","stateCode":"","countryCode":"IE","countryName":"Ireland"},{"name":"Northampton","code":"ORM","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Oran Es Senia","code":"ORN","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Noorvik Curtis Memorial","code":"ORV","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Paris Orly","code":"ORY","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Osaka","code":"OSA","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Ostersund Froesoe","code":"OSD","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Osijek","code":"OSI","stateCode":"","countryCode":"HR","countryName":"Croatia"},{"name":"Oskarshamn","code":"OSK","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Oslo Airport","code":"OSL","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Mosul","code":"OSM","stateCode":"","countryCode":"IQ","countryName":"Iraq"},{"name":"Ostrava Mosnov","code":"OSR","stateCode":"","countryCode":"CZ","countryName":"Czech Republic"},{"name":"Osh","code":"OSS","stateCode":"","countryCode":"KG","countryName":"Kyrgyzstan"},{"name":"Ostend Railway","code":"OST","stateCode":"","countryCode":"BE","countryName":"Belgium"},{"name":"Orsk","code":"OSW","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Namsos","code":"OSY","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Koszalin","code":"OSZ","stateCode":"","countryCode":"PL","countryName":"Poland"},{"name":"North Bend","code":"OTH","stateCode":"OR","countryCode":"US","countryName":"United States"},{"name":"Bucharest Otopeni International","code":"OTP","stateCode":"","countryCode":"RO","countryName":"Romania"},{"name":"Coto 47","code":"OTR","stateCode":"","countryCode":"CR","countryName":"Costa Rica"},{"name":"Kotzebue","code":"OTZ","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Ouagadougou","code":"OUA","stateCode":"","countryCode":"BF","countryName":"Burkina Faso"},{"name":"Oujda Les Angades","code":"OUD","stateCode":"","countryCode":"MA","countryName":"Morocco"},{"name":"Ouesso","code":"OUE","stateCode":"","countryCode":"CG","countryName":"Congo (brazzaville)"},{"name":"Oulu","code":"OUL","stateCode":"","countryCode":"FI","countryName":"Finland"},{"name":"Zouerate","code":"OUZ","stateCode":"","countryCode":"MR","countryName":"Mauritania"},{"name":"Novosibirsk Tolmachevo","code":"OVB","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Asturias","code":"OVD","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Owensboro Daviess County","code":"OWB","stateCode":"KY","countryCode":"US","countryName":"United States"},{"name":"Bissau Osvaldo Vieira","code":"OXB","stateCode":"","countryCode":"GW","countryName":"Guinea-Bissau"},{"name":"Oxford Kidlington","code":"OXF","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Oxnard Ventura","code":"OXR","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Oyem","code":"OYE","stateCode":"","countryCode":"GA","countryName":"Gabon"},{"name":"Moyo","code":"OYG","stateCode":"","countryCode":"UG","countryName":"Uganda"},{"name":"Ozamis City Labo","code":"OZC","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Zaporozhye","code":"OZH","stateCode":"","countryCode":"UA","countryName":"Ukraine"},{"name":"Ouarzazate","code":"OZZ","stateCode":"","countryCode":"MA","countryName":"Morocco"},{"name":"Paderborn","code":"PAD","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Paducah Barkley Regional","code":"PAH","stateCode":"KY","countryCode":"US","countryName":"United States"},{"name":"Pailin","code":"PAI","stateCode":"","countryCode":"KH","countryName":"Cambodia"},{"name":"Port Au Prince Mais Gate","code":"PAP","stateCode":"","countryCode":"HT","countryName":"Haiti"},{"name":"Paris","code":"PAR","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Paros","code":"PAS","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Patna","code":"PAT","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Poza Rica Tajin","code":"PAZ","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Puebla Huejotsingo","code":"PBC","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Porbandar","code":"PBD","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Plattsburgh AFB","code":"PBG","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"Paro","code":"PBH","stateCode":"","countryCode":"BT","countryName":"Bhutan"},{"name":"West Palm Beach International","code":"PBI","stateCode":"FL","countryCode":"US","countryName":"United States"},{"name":"Paama","code":"PBJ","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Paramaribo Zanderij Intl","code":"PBM","stateCode":"","countryCode":"SR","countryName":"Suriname"},{"name":"Paraburdoo","code":"PBO","stateCode":"WA","countryCode":"AU","countryName":"Australia"},{"name":"Punta Islita","code":"PBP","stateCode":"","countryCode":"CR","countryName":"Costa Rica"},{"name":"Putao","code":"PBU","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Painter Creek","code":"PCE","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Pucallpa Capitan Rolden","code":"PCL","stateCode":"","countryCode":"PE","countryName":"Peru"},{"name":"Puerto Carreno","code":"PCR","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Puerto Inirida","code":"PDA","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Pedro Bay","code":"PDB","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Padang Tabing","code":"PDG","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Ponta Delgada Nordela","code":"PDL","stateCode":"","countryCode":"PT","countryName":"Portugal"},{"name":"Punta Del Este","code":"PDP","stateCode":"","countryCode":"UY","countryName":"Uruguay"},{"name":"Piedras Negras","code":"PDS","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Pendleton","code":"PDT","stateCode":"OR","countryCode":"US","countryName":"United States"},{"name":"Portland International","code":"PDX","stateCode":"OR","countryCode":"US","countryName":"United States"},{"name":"Pelican SPB","code":"PEC","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Pardubice","code":"PED","stateCode":"","countryCode":"CZ","countryName":"Czech Republic"},{"name":"Perm","code":"PEE","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Perugia Sant Egidio","code":"PEG","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Pereira Matecana","code":"PEI","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Beijing Capital","code":"PEK","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Puerto Maldonado","code":"PEM","stateCode":"","countryCode":"PE","countryName":"Peru"},{"name":"Penang International","code":"PEN","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Perth","code":"PER","stateCode":"WA","countryCode":"AU","countryName":"Australia"},{"name":"Petrozavodsk","code":"PES","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Pelotas Federal","code":"PET","stateCode":"RS","countryCode":"BR","countryName":"Brazil"},{"name":"Puerto Lempira","code":"PEU","stateCode":"","countryCode":"HN","countryName":"Honduras"},{"name":"Peshawar","code":"PEW","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Pechora","code":"PEX","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Penza","code":"PEZ","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Passo Fundo","code":"PFB","stateCode":"RS","countryCode":"BR","countryName":"Brazil"},{"name":"Panama City Bay County","code":"PFN","stateCode":"FL","countryCode":"US","countryName":"United States"},{"name":"Paphos International","code":"PFO","stateCode":"","countryCode":"CY","countryName":"Cyprus"},{"name":"Parsabad","code":"PFQ","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Page","code":"PGA","stateCode":"AZ","countryCode":"US","countryName":"United States"},{"name":"Perpignan Llabanere","code":"PGF","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Pangkalpinang","code":"PGK","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Port Graham","code":"PGM","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Pitt Greenville","code":"PGV","stateCode":"NC","countryCode":"US","countryName":"United States"},{"name":"Perigueux","code":"PGX","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Port Harcourt","code":"PHC","stateCode":"","countryCode":"NG","countryName":"Nigeria"},{"name":"Port Hedland","code":"PHE","stateCode":"WA","countryCode":"AU","countryName":"Australia"},{"name":"Hampton Williamsburg Newport News Williamsb","code":"PHF","stateCode":"VA","countryCode":"US","countryName":"United States"},{"name":"Port Harcourt City","code":"PHG","stateCode":"","countryCode":"NG","countryName":"Nigeria"},{"name":"Philadelphia International","code":"PHL","stateCode":"PA","countryCode":"US","countryName":"United States"},{"name":"Point Hope","code":"PHO","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Phitsanulok","code":"PHS","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Phalaborwa","code":"PHW","stateCode":"","countryCode":"ZA","countryName":"South Africa"},{"name":"Phoenix Sky Harbor Intl","code":"PHX","stateCode":"AZ","countryCode":"US","countryName":"United States"},{"name":"Greater Peoria","code":"PIA","stateCode":"IL","countryCode":"US","countryName":"United States"},{"name":"Hattiesburg Laurel Reg","code":"PIB","stateCode":"MS","countryCode":"US","countryName":"United States"},{"name":"Clearwater St Petersburg International","code":"PIE","stateCode":"FL","countryCode":"US","countryName":"United States"},{"name":"Pingtung","code":"PIF","stateCode":"","countryCode":"TW","countryName":"Taiwan"},{"name":"Pocatello","code":"PIH","stateCode":"ID","countryCode":"US","countryName":"United States"},{"name":"Glasgow Prestwick","code":"PIK","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Parintins","code":"PIN","stateCode":"AM","countryCode":"BR","countryName":"Brazil"},{"name":"Pilot Point Arpt","code":"PIP","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Pierre","code":"PIR","stateCode":"SD","countryCode":"US","countryName":"United States"},{"name":"Poitiers Biard","code":"PIS","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Pittsburgh Intl Apt","code":"PIT","stateCode":"PA","countryCode":"US","countryName":"United States"},{"name":"Piura","code":"PIU","stateCode":"","countryCode":"PE","countryName":"Peru"},{"name":"Pico Island","code":"PIX","stateCode":"","countryCode":"PT","countryName":"Portugal"},{"name":"Point Lay Dew Station","code":"PIZ","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Pajala","code":"PJA","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Panjgur","code":"PJG","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Puerto Jimenez","code":"PJM","stateCode":"","countryCode":"CR","countryName":"Costa Rica"},{"name":"Napaskiak SPB","code":"PKA","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Parkersburg Marietta Wood County","code":"PKB","stateCode":"WV","countryCode":"US","countryName":"United States"},{"name":"Petropavlovsk Kamchats","code":"PKC","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Parkes","code":"PKE","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Pangkor Airport","code":"PKG","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Pakokku","code":"PKK","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Puka Puka","code":"PKP","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Pokhara","code":"PKR","stateCode":"","countryCode":"NP","countryName":"Nepal"},{"name":"Pekanbaru Simpang Tiga","code":"PKU","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Palangkaraya","code":"PKY","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Pakse","code":"PKZ","stateCode":"","countryCode":"LA","countryName":"Laos"},{"name":"Plattsburgh Clinton County","code":"PLB","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"Playa Samara","code":"PLD","stateCode":"","countryCode":"CR","countryName":"Costa Rica"},{"name":"Plymouth","code":"PLH","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Placencia","code":"PLJ","stateCode":"","countryCode":"BZ","countryName":"Belize"},{"name":"Palembang Mahmud Badaruddin Ii","code":"PLM","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Pellston Emmet County","code":"PLN","stateCode":"MI","countryCode":"US","countryName":"United States"},{"name":"Port Lincoln","code":"PLO","stateCode":"SA","countryCode":"AU","countryName":"Australia"},{"name":"Klaipeda Palanga Palanga International","code":"PLQ","stateCode":"","countryCode":"LT","countryName":"Lithuania"},{"name":"Providenciales International","code":"PLS","stateCode":"","countryCode":"TC","countryName":"Turks And Caicos Islands"},{"name":"Belo Horizonte Pampulha","code":"PLU","stateCode":"MG","countryCode":"BR","countryName":"Brazil"},{"name":"Palu Mutiara","code":"PLW","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Semipalatinsk","code":"PLX","stateCode":"","countryCode":"KZ","countryName":"Kazakhstan"},{"name":"Port Elizabeth","code":"PLZ","stateCode":"","countryCode":"ZA","countryName":"South Africa"},{"name":"Pemba Wawi","code":"PMA","stateCode":"","countryCode":"TZ","countryName":"Tanzania"},{"name":"Puerto Montt Tepual","code":"PMC","stateCode":"","countryCode":"CL","countryName":"Chile"},{"name":"Palmdale Air Force 42","code":"PMD","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Portsmouth","code":"PME","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Milan Parma","code":"PMF","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Palma  Mallorca Palma Mallorca","code":"PMI","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Palm Island","code":"PMK","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Port Moller AFS","code":"PML","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Palermo Punta Raisi","code":"PMO","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Palmerston North","code":"PMR","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Porlamar DelCaribe Gen S Marino","code":"PMV","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"Palmas","code":"PMW","stateCode":"TO","countryCode":"BR","countryName":"Brazil"},{"name":"Puerto Madryn El Tehuelche","code":"PMY","stateCode":"CB","countryCode":"AR","countryName":"Argentina"},{"name":"Palmar Sur","code":"PMZ","stateCode":"","countryCode":"CR","countryName":"Costa Rica"},{"name":"Pamplona","code":"PNA","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Punta Gorda","code":"PND","stateCode":"","countryCode":"BZ","countryName":"Belize"},{"name":"Phnom Penh Pochentong","code":"PNH","stateCode":"","countryCode":"KH","countryName":"Cambodia"},{"name":"Pohnpei","code":"PNI","stateCode":"","countryCode":"FM","countryName":"Micronesia"},{"name":"Pontianak Supadio","code":"PNK","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Pantelleria","code":"PNL","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Popondetta Girua","code":"PNP","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Pune Lohegaon","code":"PNQ","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Pointe Noire","code":"PNR","stateCode":"","countryCode":"CG","countryName":"Congo (brazzaville)"},{"name":"Pensacola Regional","code":"PNS","stateCode":"FL","countryCode":"US","countryName":"United States"},{"name":"Petrolina Internacional","code":"PNZ","stateCode":"PE","countryCode":"BR","countryName":"Brazil"},{"name":"Porto Alegre Salgado Filho","code":"POA","stateCode":"RS","countryCode":"BR","countryName":"Brazil"},{"name":"Port Gentil","code":"POG","stateCode":"","countryCode":"GA","countryName":"Gabon"},{"name":"Pemba","code":"POL","stateCode":"","countryCode":"MZ","countryName":"Mozambique"},{"name":"Port Moresby Jackson Fld","code":"POM","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Puerto Plata La Union","code":"POP","stateCode":"","countryCode":"DO","countryName":"Dominican Republic"},{"name":"Pori","code":"POR","stateCode":"","countryCode":"FI","countryName":"Finland"},{"name":"Port Of Spain Trinidad Piarco International","code":"POS","stateCode":"","countryCode":"TT","countryName":"Trinidad And Tobago"},{"name":"Poughkeepsie Dutchess County","code":"POU","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"Poznan Lawica","code":"POZ","stateCode":"","countryCode":"PL","countryName":"Poland"},{"name":"Presidente Prudente A De Barros","code":"PPB","stateCode":"SP","countryCode":"BR","countryName":"Brazil"},{"name":"Puerto Penasco","code":"PPE","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Pago Pago International","code":"PPG","stateCode":"","countryCode":"AS","countryName":"American Samoa"},{"name":"Petropavlovsk","code":"PPK","stateCode":"","countryCode":"KZ","countryName":"Kazakhstan"},{"name":"Phaplu","code":"PPL","stateCode":"","countryCode":"NP","countryName":"Nepal"},{"name":"Popayan Machangara","code":"PPN","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Proserpine Whitsunday Coast","code":"PPP","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Puerto Princesa","code":"PPS","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Papeete Faaa","code":"PPT","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Port Protection","code":"PPV","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Phu Quoc Duong Dang","code":"PQC","stateCode":"","countryCode":"VN","countryName":"Vietnam"},{"name":"Presque Isle Municipal","code":"PQI","stateCode":"ME","countryCode":"US","countryName":"United States"},{"name":"Palenque International Airport","code":"PQM","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Port Macquarie","code":"PQQ","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Pilot Station","code":"PQS","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Prescott","code":"PRC","stateCode":"AZ","countryCode":"US","countryName":"United States"},{"name":"Prague Ruzyne","code":"PRG","stateCode":"","countryCode":"CZ","countryName":"Czech Republic"},{"name":"Praslin Island","code":"PRI","stateCode":"","countryCode":"SC","countryName":"Seychelles"},{"name":"Pristina","code":"PRN","stateCode":"","countryCode":"RS","countryName":"Serbia"},{"name":"Pisa Gal Galilei","code":"PSA","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Pasco Tri Cities","code":"PSC","stateCode":"WA","countryCode":"US","countryName":"United States"},{"name":"Ponce Mercedita","code":"PSE","stateCode":"","countryCode":"PR","countryName":"Puerto Rico"},{"name":"Petersburg Municipal","code":"PSG","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Pasto Cano","code":"PSO","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Palm Springs International Airport","code":"PSP","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Pescara Liberi","code":"PSR","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Posadas","code":"PSS","stateCode":"MI","countryCode":"AR","countryName":"Argentina"},{"name":"Puerto Suarez","code":"PSZ","stateCode":"","countryCode":"BO","countryName":"Bolivia"},{"name":"Port Alsworth","code":"PTA","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Malololailai","code":"PTF","stateCode":"","countryCode":"FJ","countryName":"Fiji"},{"name":"Polokwane","code":"PTG","stateCode":"","countryCode":"ZA","countryName":"South Africa"},{"name":"Port Heiden","code":"PTH","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Pointe a Pitre Le Raizet","code":"PTP","stateCode":"","countryCode":"GP","countryName":"Guadeloupe"},{"name":"Platinum","code":"PTU","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Panama City Tocumen International","code":"PTY","stateCode":"","countryCode":"PA","countryName":"Panama"},{"name":"Pueblo Memorial","code":"PUB","stateCode":"CO","countryCode":"US","countryName":"United States"},{"name":"Pau Uzein","code":"PUF","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Punta Cana","code":"PUJ","stateCode":"","countryCode":"DO","countryName":"Dominican Republic"},{"name":"Pukarua","code":"PUK","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Punta Arenas Pres Ibanez","code":"PUQ","stateCode":"","countryCode":"CL","countryName":"Chile"},{"name":"Busan Gimhae","code":"PUS","stateCode":"","countryCode":"KR","countryName":"South Korea"},{"name":"Puerto Asis","code":"PUU","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Pullman Moscow Regional","code":"PUW","stateCode":"WA","countryCode":"US","countryName":"United States"},{"name":"Pula","code":"PUY","stateCode":"","countryCode":"HR","countryName":"Croatia"},{"name":"Providencia","code":"PVA","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Provincetown","code":"PVC","stateCode":"MA","countryCode":"US","countryName":"United States"},{"name":"Providence Theodore Francis","code":"PVD","stateCode":"RI","countryCode":"US","countryName":"United States"},{"name":"Shanghai Pudong international Airport","code":"PVG","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Porto Velho Belmonte","code":"PVH","stateCode":"RO","countryCode":"BR","countryName":"Brazil"},{"name":"Lefkas Preveza Aktion","code":"PVK","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Puerto Vallarta Gustavo Diaz Ordaz","code":"PVR","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Pevek","code":"PWE","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Chicago","code":"PWK","stateCode":"IL","countryCode":"US","countryName":"United States"},{"name":"Portland Intl Jetport","code":"PWM","stateCode":"ME","countryCode":"US","countryName":"United States"},{"name":"Pavlodar","code":"PWQ","stateCode":"","countryCode":"KZ","countryName":"Kazakhstan"},{"name":"Puerto Escondido","code":"PXM","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Porto Santo","code":"PXO","stateCode":"","countryCode":"PT","countryName":"Portugal"},{"name":"Pleiku","code":"PXU","stateCode":"","countryCode":"VN","countryName":"Vietnam"},{"name":"Puerto Ayacucho","code":"PYH","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"Polyarnyj","code":"PYJ","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Pietermaritzburg","code":"PZB","stateCode":"","countryCode":"ZA","countryName":"South Africa"},{"name":"Penzance","code":"PZE","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Puerto Ordaz","code":"PZO","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"Bella Coola","code":"QBC","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Bochum","code":"QBO","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Ashford Intl Rail Station","code":"QDH","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Dusseldorf Station","code":"QDU","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Freiburg","code":"QFB","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Saarbruecken HBF Railway Service","code":"QFZ","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Kolobrzeg Bus Service","code":"QJY","stateCode":"","countryCode":"PL","countryName":"Poland"},{"name":"Nantes Railway Service","code":"QJZ","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Cologne Railway Service","code":"QKL","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Mainz","code":"QMZ","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Owerri","code":"QOW","stateCode":"","countryCode":"NG","countryName":"Nigeria"},{"name":"Berlin","code":"QPP","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Dover Rail Station","code":"QQD","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Harwich Rail Station","code":"QQH","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"London Kings Cross Rail Service","code":"QQK","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Manchester Piccadilly Rail Station","code":"QQM","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Birmingham New Street Rail Service","code":"QQN","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"London Paddington Rail Service","code":"QQP","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Ramsgate Rail Station","code":"QQR","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Britrail Rail Zone S London St Pancras","code":"QQS","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"London Euston Rail Service","code":"QQU","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"London Waterloo","code":"QQW","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Bath Rail Service","code":"QQX","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"York Rail Service","code":"QQY","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Rotterdam Central Station","code":"QRH","stateCode":"","countryCode":"NL","countryName":"Netherlands"},{"name":"Queretaro","code":"QRO","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Warri","code":"QRW","stateCode":"","countryCode":"NG","countryName":"Nigeria"},{"name":"Tallinn Pirita Harbour","code":"QUF","stateCode":"","countryCode":"EE","countryName":"Estonia"},{"name":"Ulm","code":"QUL","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Berlin HBF Railway Service","code":"QWB","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Wuerzburg Railway Station","code":"QWU","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Aix en Provence Railway Service","code":"QXB","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Angers Rail Station","code":"QXG","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Railway   Germany Railway Service","code":"QYG","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Gavle Railway Service","code":"QYU","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Uppsala C Railway Service","code":"QYX","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Rabaul Tokua","code":"RAB","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Arar","code":"RAE","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Rafha","code":"RAH","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Praia Francisco Mendes","code":"RAI","stateCode":"","countryCode":"CV","countryName":"Cape Verde"},{"name":"Rajkot Civil","code":"RAJ","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Marrakech Menara","code":"RAK","stateCode":"","countryCode":"MA","countryName":"Morocco"},{"name":"Riverside Municipal","code":"RAL","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Ribeirao Preto Leite Lopes","code":"RAO","stateCode":"SP","countryCode":"BR","countryName":"Brazil"},{"name":"Rapid City Regional","code":"RAP","stateCode":"SD","countryCode":"US","countryName":"United States"},{"name":"Rarotonga","code":"RAR","stateCode":"","countryCode":"CK","countryName":"Cook Islands"},{"name":"Rasht","code":"RAS","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Rabat Sale","code":"RBA","stateCode":"","countryCode":"MA","countryName":"Morocco"},{"name":"Brooks Lodge","code":"RBH","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Rurrenabaque","code":"RBQ","stateCode":"","countryCode":"BO","countryName":"Bolivia"},{"name":"Rio Branco Pres Medici","code":"RBR","stateCode":"AC","countryCode":"BR","countryName":"Brazil"},{"name":"Ramata","code":"RBV","stateCode":"","countryCode":"SB","countryName":"Solomon Islands"},{"name":"Ruby","code":"RBY","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Richards Bay","code":"RCB","stateCode":"","countryCode":"ZA","countryName":"South Africa"},{"name":"Roche Harbor","code":"RCE","stateCode":"WA","countryCode":"US","countryName":"United States"},{"name":"Riohacha","code":"RCH","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Redcliffe","code":"RCL","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Richmond","code":"RCM","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Red Dog","code":"RDB","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Redding","code":"RDD","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Redmond Bend Roberts Field","code":"RDM","stateCode":"OR","countryCode":"US","countryName":"United States"},{"name":"LTS Pulau Redang","code":"RDN","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Raleigh Durham","code":"RDU","stateCode":"NC","countryCode":"US","countryName":"United States"},{"name":"Red Devil","code":"RDV","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Rodez Marcillac","code":"RDZ","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Reao","code":"REA","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Recife Guararapes Intl","code":"REC","stateCode":"PE","countryCode":"BR","countryName":"Brazil"},{"name":"Reggio Calabria Tito Menniti","code":"REG","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Reykjavik","code":"REK","stateCode":"","countryCode":"IS","countryName":"Iceland"},{"name":"Trelew","code":"REL","stateCode":"CB","countryCode":"AR","countryName":"Argentina"},{"name":"Orenburg","code":"REN","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Siem Reap","code":"REP","stateCode":"","countryCode":"KH","countryName":"Cambodia"},{"name":"Resistencia","code":"RES","stateCode":"CH","countryCode":"AR","countryName":"Argentina"},{"name":"Reynosa Gen Lucio Blanco","code":"REX","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Greater Rockford","code":"RFD","stateCode":"IL","countryCode":"US","countryName":"United States"},{"name":"Raiatea","code":"RFP","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Rio Grande","code":"RGA","stateCode":"TF","countryCode":"AR","countryName":"Argentina"},{"name":"Rangiroa","code":"RGI","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Rio Gallegos Internacional","code":"RGL","stateCode":"SC","countryCode":"AR","countryName":"Argentina"},{"name":"Yangon Mingaladon","code":"RGN","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Rhinelander Oneida County","code":"RHI","stateCode":"WI","countryCode":"US","countryName":"United States"},{"name":"Rhodes Diagoras Airport","code":"RHO","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Santa Maria Base Aerea","code":"RIA","stateCode":"RS","countryCode":"BR","countryName":"Brazil"},{"name":"Riberalta Gen Buech","code":"RIB","stateCode":"","countryCode":"BO","countryName":"Bolivia"},{"name":"Richmond Intl Byrd Field","code":"RIC","stateCode":"VA","countryCode":"US","countryName":"United States"},{"name":"Rio Grande","code":"RIG","stateCode":"RS","countryCode":"BR","countryName":"Brazil"},{"name":"Rio De Janeiro","code":"RIO","stateCode":"RJ","countryCode":"BR","countryName":"Brazil"},{"name":"Rishiri","code":"RIS","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Riverside March AFB","code":"RIV","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Riverton","code":"RIW","stateCode":"WY","countryCode":"US","countryName":"United States"},{"name":"Riga","code":"RIX","stateCode":"","countryCode":"LV","countryName":"Latvia"},{"name":"Riyan Mukalla","code":"RIY","stateCode":"","countryCode":"YE","countryName":"Yemen"},{"name":"Rajahmundry","code":"RJA","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Rijeka","code":"RJK","stateCode":"","countryCode":"HR","countryName":"Croatia"},{"name":"Rafsanjan","code":"RJN","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Rockland Knox County Regional","code":"RKD","stateCode":"ME","countryCode":"US","countryName":"United States"},{"name":"Rock Springs Sweetwater County","code":"RKS","stateCode":"WY","countryCode":"US","countryName":"United States"},{"name":"Ras Al Khaimah","code":"RKT","stateCode":"","countryCode":"AE","countryName":"United Arab Emirates"},{"name":"Reykjavik Domestic","code":"RKV","stateCode":"","countryCode":"IS","countryName":"Iceland"},{"name":"Rostock Laage Laage","code":"RLG","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Roma","code":"RMA","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Marsa  Alam","code":"RMF","stateCode":"","countryCode":"EG","countryName":"Egypt"},{"name":"Rimini Miramare","code":"RMI","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Rampart","code":"RMP","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Taichung RMQ, Chinese Taipei","code":"RMQ","stateCode":"","countryCode":"TW","countryName":"Taiwan"},{"name":"Arona Ulawa Airport","code":"RNA","stateCode":"","countryCode":"SB","countryName":"Solomon Islands"},{"name":"Ronneby Kallinge","code":"RNB","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Rennell","code":"RNL","stateCode":"","countryCode":"SB","countryName":"Solomon Islands"},{"name":"Bornholm","code":"RNN","stateCode":"","countryCode":"DK","countryName":"Denmark"},{"name":"Reno Tahoe Intl","code":"RNO","stateCode":"NV","countryCode":"US","countryName":"United States"},{"name":"Rongelap Island","code":"RNP","stateCode":"","countryCode":"MH","countryName":"Marshall Islands"},{"name":"Rennes St Jacques","code":"RNS","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Roanoke Municipal","code":"ROA","stateCode":"VA","countryCode":"US","countryName":"United States"},{"name":"Monrovia Roberts Intl","code":"ROB","stateCode":"","countryCode":"LR","countryName":"Liberia"},{"name":"Rochester Monroe County","code":"ROC","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"Roi Et Airport","code":"ROI","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Rockhampton","code":"ROK","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Rome","code":"ROM","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Rondonopolis","code":"ROO","stateCode":"MT","countryCode":"BR","countryName":"Brazil"},{"name":"Rota","code":"ROP","stateCode":"","countryCode":"MP","countryName":"Mariana Islands"},{"name":"Koror Airai","code":"ROR","stateCode":"","countryCode":"PW","countryName":"Palau"},{"name":"Rosario Fisherton","code":"ROS","stateCode":"SF","countryCode":"AR","countryName":"Argentina"},{"name":"Rotorua","code":"ROT","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Rostov","code":"ROV","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Roswell International Air Center","code":"ROW","stateCode":"NM","countryCode":"US","countryName":"United States"},{"name":"Raipur","code":"RPR","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Rodrigues Is","code":"RRG","stateCode":"","countryCode":"MU","countryName":"Mauritius"},{"name":"Roros","code":"RRS","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Santa Rosa","code":"RSA","stateCode":"LP","countryCode":"AR","countryName":"Argentina"},{"name":"Rock Sound S Eleuthera","code":"RSD","stateCode":"","countryCode":"BS","countryName":"Bahamas"},{"name":"Russian Mission Russian SPB","code":"RSH","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Rosario SPB","code":"RSJ","stateCode":"WA","countryCode":"US","countryName":"United States"},{"name":"Rochester International Airport","code":"RST","stateCode":"MN","countryCode":"US","countryName":"United States"},{"name":"Yeosu","code":"RSU","stateCode":"","countryCode":"KR","countryName":"South Korea"},{"name":"Fort Myers Southwest Florida Reg","code":"RSW","stateCode":"FL","countryCode":"US","countryName":"United States"},{"name":"Rotuma Island","code":"RTA","stateCode":"","countryCode":"FJ","countryName":"Fiji"},{"name":"Roatan","code":"RTB","stateCode":"","countryCode":"HN","countryName":"Honduras"},{"name":"Rotterdam Zestienhoven","code":"RTM","stateCode":"","countryCode":"NL","countryName":"Netherlands"},{"name":"Saratov","code":"RTW","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Arua","code":"RUA","stateCode":"","countryCode":"UG","countryName":"Uganda"},{"name":"Riyadh King Khaled Intl","code":"RUH","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Rukumkot","code":"RUK","stateCode":"","countryCode":"NP","countryName":"Nepal"},{"name":"Rumjatar","code":"RUM","stateCode":"","countryCode":"NP","countryName":"Nepal"},{"name":"St Denis de la Reunion Gillot","code":"RUN","stateCode":"","countryCode":"RE","countryName":"Reunion"},{"name":"Rurutu","code":"RUR","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Rutland","code":"RUT","stateCode":"VT","countryCode":"US","countryName":"United States"},{"name":"Farafangana","code":"RVA","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Saravena","code":"RVE","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Roervik Ryumsjoen Aprt","code":"RVK","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Rovaniemi","code":"RVN","stateCode":"","countryCode":"FI","countryName":"Finland"},{"name":"Rairua Raivavae","code":"RVV","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Roxas City","code":"RXS","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Rahim Yar Khan","code":"RYK","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Rzeszow Jasionka","code":"RZE","stateCode":"","countryCode":"PL","countryName":"Poland"},{"name":"Ramsar","code":"RZR","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Sawan","code":"RZS","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Saba Island J Yrausquin","code":"SAB","stateCode":"","countryCode":"BQ","countryName":"Bes Islands"},{"name":"Sacramento Executive","code":"SAC","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Santa Fe","code":"SAF","stateCode":"NM","countryCode":"US","countryName":"United States"},{"name":"Sanaa International","code":"SAH","stateCode":"","countryCode":"YE","countryName":"Yemen"},{"name":"San Salvador Comalapa International","code":"SAL","stateCode":"","countryCode":"SV","countryName":"El Salvador"},{"name":"San Diego Lindbergh Fld SDiego","code":"SAN","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Sao Paulo","code":"SAO","stateCode":"SP","countryCode":"BR","countryName":"Brazil"},{"name":"San Pedro Sula Ramon Villeda Morales","code":"SAP","stateCode":"","countryCode":"HN","countryName":"Honduras"},{"name":"San Andros","code":"SAQ","stateCode":"","countryCode":"BS","countryName":"Bahamas"},{"name":"San Antonio International","code":"SAT","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Hilton Head Savannah","code":"SAV","stateCode":"GA","countryCode":"US","countryName":"United States"},{"name":"Sabiha Gokcen","code":"SAW","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Santa Barbara Airport","code":"SBA","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"St Barthelemy","code":"SBH","stateCode":"","countryCode":"GP","countryName":"Guadeloupe"},{"name":"Santa Ana Yacuma","code":"SBL","stateCode":"","countryCode":"BO","countryName":"Bolivia"},{"name":"South Bend Regional","code":"SBN","stateCode":"IN","countryCode":"US","countryName":"United States"},{"name":"San Luis Obispo County Airport","code":"SBP","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Saibai Island","code":"SBR","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Sibu","code":"SBW","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Salisbury Ocean City Wicomico Regional","code":"SBY","stateCode":"MD","countryCode":"US","countryName":"United States"},{"name":"Sibiu","code":"SBZ","stateCode":"","countryCode":"RO","countryName":"Romania"},{"name":"Deadhorse Prudhoe Bay","code":"SCC","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"State College University Park","code":"SCE","stateCode":"PA","countryCode":"US","countryName":"United States"},{"name":"Stockton","code":"SCK","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Santiago Arturo Merino Benitez","code":"SCL","stateCode":"","countryCode":"CL","countryName":"Chile"},{"name":"Scammon Bay SPB","code":"SCM","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Saarbruecken Ensheim","code":"SCN","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Aktau","code":"SCO","stateCode":"","countryCode":"KZ","countryName":"Kazakhstan"},{"name":"Santiago De Compostela","code":"SCQ","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Socotra","code":"SCT","stateCode":"","countryCode":"YE","countryName":"Yemen"},{"name":"Santiago Antonio Maceo","code":"SCU","stateCode":"","countryCode":"CU","countryName":"Cuba"},{"name":"Suceava Salcea","code":"SCV","stateCode":"","countryCode":"RO","countryName":"Romania"},{"name":"Syktyvkar","code":"SCW","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Salina Cruz","code":"SCX","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"San Cristobal Airport","code":"SCY","stateCode":"","countryCode":"EC","countryName":"Ecuador"},{"name":"Santa Cruz Is","code":"SCZ","stateCode":"","countryCode":"SB","countryName":"Solomon Islands"},{"name":"Lubango","code":"SDD","stateCode":"","countryCode":"AO","countryName":"Angola"},{"name":"Santiago Del Estero","code":"SDE","stateCode":"SE","countryCode":"AR","countryName":"Argentina"},{"name":"Louisville Standiford Field","code":"SDF","stateCode":"KY","countryCode":"US","countryName":"United States"},{"name":"Sanandaj","code":"SDG","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Sendai","code":"SDJ","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Sandakan","code":"SDK","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Harnosand Sundsvall","code":"SDL","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Sandane","code":"SDN","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Sand Point Municipal","code":"SDP","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Santo Domingo Las Americas","code":"SDQ","stateCode":"","countryCode":"DO","countryName":"Dominican Republic"},{"name":"Santander","code":"SDR","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Saidu Sharif","code":"SDT","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Rio De Janeiro Santos Dumont","code":"SDU","stateCode":"RJ","countryCode":"BR","countryName":"Brazil"},{"name":"Tel Aviv Yafo Sde Dov","code":"SDV","stateCode":"","countryCode":"IL","countryName":"Israel"},{"name":"Sidney Richland Municipal","code":"SDY","stateCode":"MT","countryCode":"US","countryName":"United States"},{"name":"Shetland Islands","code":"SDZ","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Seattle Tacoma Intl","code":"SEA","stateCode":"WA","countryCode":"US","countryName":"United States"},{"name":"Sebha","code":"SEB","stateCode":"","countryCode":"LY","countryName":"Libya"},{"name":"Seoul","code":"SEL","stateCode":"","countryCode":"KR","countryName":"South Korea"},{"name":"Southend Municipal","code":"SEN","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Siwa","code":"SEW","stateCode":"","countryCode":"EG","countryName":"Egypt"},{"name":"Mahe Island Seychelles Intl","code":"SEZ","stateCode":"","countryCode":"SC","countryName":"Seychelles"},{"name":"Sfax El Maou","code":"SFA","stateCode":"","countryCode":"TN","countryName":"Tunisia"},{"name":"San Fernando De Apure Las Flecheras","code":"SFD","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"San Fernando","code":"SFE","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"St Martin Esperance","code":"SFG","stateCode":"","countryCode":"GP","countryName":"Guadeloupe"},{"name":"Kangerlussuaq","code":"SFJ","stateCode":"","countryCode":"GL","countryName":"Greenland"},{"name":"Sao Filipe","code":"SFL","stateCode":"","countryCode":"CV","countryName":"Cape Verde"},{"name":"Santa Fe","code":"SFN","stateCode":"SF","countryCode":"AR","countryName":"Argentina"},{"name":"San Francisco International","code":"SFO","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Skelleftea","code":"SFT","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Springfield","code":"SFY","stateCode":"MA","countryCode":"US","countryName":"United States"},{"name":"Surgut","code":"SGC","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Sonderborg","code":"SGD","stateCode":"","countryCode":"DK","countryName":"Denmark"},{"name":"Springfield Branson Rg","code":"SGF","stateCode":"MO","countryCode":"US","countryName":"United States"},{"name":"Ho Chi Minh City","code":"SGN","stateCode":"","countryCode":"VN","countryName":"Vietnam"},{"name":"St George","code":"SGO","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Saint George Municipal","code":"SGU","stateCode":"UT","countryCode":"US","countryName":"United States"},{"name":"Songea","code":"SGX","stateCode":"","countryCode":"TZ","countryName":"Tanzania"},{"name":"Skagway Municipal","code":"SGY","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Shanghai Hongqiao International Airport","code":"SHA","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Nakashibetsu","code":"SHB","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Indaselassie","code":"SHC","stateCode":"","countryCode":"ET","countryName":"Ethiopia"},{"name":"Staunton Shenandoah Valley","code":"SHD","stateCode":"VA","countryCode":"US","countryName":"United States"},{"name":"Shenyang","code":"SHE","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Shungnak","code":"SHG","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Shishmaref","code":"SHH","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Sharjah","code":"SHJ","stateCode":"","countryCode":"AE","countryName":"United Arab Emirates"},{"name":"Shillong","code":"SHL","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Shirahama","code":"SHM","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Qinhuangdao","code":"SHP","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Sheridan","code":"SHR","stateCode":"WY","countryCode":"US","countryName":"United States"},{"name":"Shreveport Regional","code":"SHV","stateCode":"LA","countryCode":"US","countryName":"United States"},{"name":"Sharurah","code":"SHW","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Shageluk","code":"SHX","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Shinyanga","code":"SHY","stateCode":"","countryCode":"TZ","countryName":"Tanzania"},{"name":"Sinop Arpt","code":"SIC","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Sal Amilcar Cabral Intl","code":"SID","stateCode":"","countryCode":"CV","countryName":"Cape Verde"},{"name":"Simara","code":"SIF","stateCode":"","countryCode":"NP","countryName":"Nepal"},{"name":"San Juan Isla Grande","code":"SIG","stateCode":"","countryCode":"PR","countryName":"Puerto Rico"},{"name":"Singapore Changi","code":"SIN","stateCode":"","countryCode":"SG","countryName":"Singapore"},{"name":"Simferopol","code":"SIP","stateCode":"","countryCode":"UA","countryName":"Ukraine"},{"name":"Sitka","code":"SIT","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"San Jose International","code":"SJC","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Cabo San Lucas Los Cabos","code":"SJD","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"San Jose Del Gua","code":"SJE","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"St John Island","code":"SJF","stateCode":"","countryCode":"VI","countryName":"Virgin Islands, U.S."},{"name":"San Jose Mcguire Fld","code":"SJI","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Sarajevo Butmir","code":"SJJ","stateCode":"","countryCode":"BA","countryName":"Bosnia And Herzegovina"},{"name":"Sao Jose Dos Campos","code":"SJK","stateCode":"SP","countryCode":"BR","countryName":"Brazil"},{"name":"San Jose Juan Santamaria Intl","code":"SJO","stateCode":"","countryCode":"CR","countryName":"Costa Rica"},{"name":"Sao Jose Do Rio Preto","code":"SJP","stateCode":"SP","countryCode":"BR","countryName":"Brazil"},{"name":"San Angelo Mathis Fld","code":"SJT","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"San Juan Luis Munoz Marin Intl","code":"SJU","stateCode":"","countryCode":"PR","countryName":"Puerto Rico"},{"name":"Shijiazhuang Daguocun","code":"SJW","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Seinajoki Ilmajoki","code":"SJY","stateCode":"","countryCode":"FI","countryName":"Finland"},{"name":"Sao Jorge Island","code":"SJZ","stateCode":"","countryCode":"PT","countryName":"Portugal"},{"name":"St Kitts Robert L Bradshaw International","code":"SKB","stateCode":"","countryCode":"KN","countryName":"Saint Kitts And Nevis"},{"name":"Suki","code":"SKC","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Samarkand","code":"SKD","stateCode":"","countryCode":"UZ","countryName":"Uzbekistan"},{"name":"Skien","code":"SKE","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Thessaloniki Makedonia Apt","code":"SKG","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Surkhet","code":"SKH","stateCode":"","countryCode":"NP","countryName":"Nepal"},{"name":"Shaktoolik","code":"SKK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Stokmarknes Skagen","code":"SKN","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Sokoto","code":"SKO","stateCode":"","countryCode":"NG","countryName":"Nigeria"},{"name":"Skopje","code":"SKP","stateCode":"","countryCode":"MK","countryName":"Macedonia"},{"name":"Sialkot","code":"SKT","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Skiros","code":"SKU","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Sukkur","code":"SKZ","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Salta Gen Belgrano","code":"SLA","stateCode":"SA","countryCode":"AR","countryName":"Argentina"},{"name":"Salt Lake City International","code":"SLC","stateCode":"UT","countryCode":"US","countryName":"United States"},{"name":"Salem Mcnary Field","code":"SLE","stateCode":"OR","countryCode":"US","countryName":"United States"},{"name":"Sola","code":"SLH","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Solwezi","code":"SLI","stateCode":"","countryCode":"ZM","countryName":"Zambia"},{"name":"Saranac Lake Adirondack","code":"SLK","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"Salalah","code":"SLL","stateCode":"","countryCode":"OM","countryName":"Oman"},{"name":"Salamanca Matacan","code":"SLM","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Salina","code":"SLN","stateCode":"KS","countryCode":"US","countryName":"United States"},{"name":"San Luis Potosi","code":"SLP","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Sleetmute","code":"SLQ","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Simla","code":"SLV","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Saltillo Plan de Guadalupe","code":"SLW","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Salt Cay","code":"SLX","stateCode":"","countryCode":"TC","countryName":"Turks And Caicos Islands"},{"name":"Salekhard","code":"SLY","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Sao Luiz Marechal Cunha Machado","code":"SLZ","stateCode":"MA","countryCode":"BR","countryName":"Brazil"},{"name":"Santa Maria Vila Do Porto","code":"SMA","stateCode":"","countryCode":"PT","countryName":"Portugal"},{"name":"Sacramento International","code":"SMF","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Samos","code":"SMI","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"St Michael","code":"SMK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Stella Maris Estate Airstrip","code":"SML","stateCode":"","countryCode":"BS","countryName":"Bahamas"},{"name":"Salmon","code":"SMN","stateCode":"ID","countryCode":"US","countryName":"United States"},{"name":"Santa Marta Simon Bolivar","code":"SMR","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Sainte Marie","code":"SMS","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Santa Maria Public","code":"SMX","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Orange County John Wayne","code":"SNA","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Salinas","code":"SNC","stateCode":"","countryCode":"EC","countryName":"Ecuador"},{"name":"Sao Nicolau Preguica","code":"SNE","stateCode":"","countryCode":"CV","countryName":"Cape Verde"},{"name":"Shannon","code":"SNN","stateCode":"","countryCode":"IE","countryName":"Ireland"},{"name":"Sakon Nakhon","code":"SNO","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Saint Paul Island","code":"SNP","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"St Nazaire Montoir","code":"SNR","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Santa Clara","code":"SNU","stateCode":"","countryCode":"CU","countryName":"Cuba"},{"name":"Thandwe","code":"SNW","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Balaton Saarmelleek","code":"SOB","stateCode":"","countryCode":"HU","countryName":"Hungary"},{"name":"Solo City Adi Sumarmo","code":"SOC","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Sofia","code":"SOF","stateCode":"","countryCode":"BG","countryName":"Bulgaria"},{"name":"Sogndal Haukasen","code":"SOG","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Sorkjosen","code":"SOJ","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"San Tome El Tigre","code":"SOM","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"Espiritu Santo Pekoa","code":"SON","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Soderhamn","code":"SOO","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Sorong Jefman","code":"SOQ","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Southampton Eastleigh","code":"SOU","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Seldovia","code":"SOV","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Show Low","code":"SOW","stateCode":"AZ","countryCode":"US","countryName":"United States"},{"name":"St Thomas Island SPB","code":"SPB","stateCode":"","countryCode":"VI","countryName":"Virgin Islands, U.S."},{"name":"Santa Cruz De La Palma La Palma","code":"SPC","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Springfield Capital","code":"SPI","stateCode":"IL","countryCode":"US","countryName":"United States"},{"name":"Sapporo","code":"SPK","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Schiphol Railway Service","code":"SPL","stateCode":"","countryCode":"NL","countryName":"Netherlands"},{"name":"Saipan International","code":"SPN","stateCode":"","countryCode":"MP","countryName":"Mariana Islands"},{"name":"Menongue","code":"SPP","stateCode":"","countryCode":"AO","countryName":"Angola"},{"name":"San Pedro","code":"SPR","stateCode":"","countryCode":"BZ","countryName":"Belize"},{"name":"Wichita Falls Sheppard AFB","code":"SPS","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Split","code":"SPU","stateCode":"","countryCode":"HR","countryName":"Croatia"},{"name":"Storuman Gunnarn","code":"SQO","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Santa Rosa","code":"SRA","stateCode":"RS","countryCode":"BR","countryName":"Brazil"},{"name":"Sucre","code":"SRE","stateCode":"","countryCode":"BO","countryName":"Bolivia"},{"name":"Semarang Achmad Uani","code":"SRG","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"San Borja Capitan G Q Guardia","code":"SRJ","stateCode":"","countryCode":"BO","countryName":"Bolivia"},{"name":"Stord Airport","code":"SRP","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Sarasota Bradenton","code":"SRQ","stateCode":"FL","countryCode":"US","countryName":"United States"},{"name":"Stony River","code":"SRV","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Sert","code":"SRX","stateCode":"","countryCode":"LY","countryName":"Libya"},{"name":"Sary Dashte Naz","code":"SRY","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Salvador Airport Luis Eduardo Magalhaes","code":"SSA","stateCode":"BA","countryCode":"BR","countryName":"Brazil"},{"name":"St Croix Island SPB","code":"SSB","stateCode":"","countryCode":"VI","countryName":"Virgin Islands, U.S."},{"name":"Malabo Santa Isabel","code":"SSG","stateCode":"","countryCode":"GQ","countryName":"Equatorial Guinea"},{"name":"Sharm El Sheikh Ophira","code":"SSH","stateCode":"","countryCode":"EG","countryName":"Egypt"},{"name":"Brunswick Mckinnon","code":"SSI","stateCode":"GA","countryCode":"US","countryName":"United States"},{"name":"Sandnessjoen Stokka","code":"SSJ","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Sault Ste Marie","code":"SSM","stateCode":"MI","countryCode":"US","countryName":"United States"},{"name":"Sara","code":"SSR","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"MBanza Congo","code":"SSY","stateCode":"","countryCode":"AO","countryName":"Angola"},{"name":"Saint Cloud Municipal","code":"STC","stateCode":"MN","countryCode":"US","countryName":"United States"},{"name":"Santo Domingo Mayo Guerrero","code":"STD","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"St George Island","code":"STG","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Cibao International Airport","code":"STI","stateCode":"","countryCode":"DO","countryName":"Dominican Republic"},{"name":"Lambert St Louis Intl","code":"STL","stateCode":"MO","countryCode":"US","countryName":"United States"},{"name":"Santarem Eduardo Gomes","code":"STM","stateCode":"PA","countryCode":"BR","countryName":"Brazil"},{"name":"London Stansted","code":"STN","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Stockholm","code":"STO","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Stuttgart Echterdingen","code":"STR","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Santa Rosa Sonoma County","code":"STS","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"St Thomas Island Cyril E King","code":"STT","stateCode":"","countryCode":"VI","countryName":"Virgin Islands, U.S."},{"name":"Surat","code":"STV","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Stavropol","code":"STW","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Henry E Rohlsen International Airport","code":"STX","stateCode":"","countryCode":"VI","countryName":"Virgin Islands, U.S."},{"name":"Surabaya Juanda","code":"SUB","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Lamezia Terme S Eufemia","code":"SUF","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Surigao","code":"SUG","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Satu Mare","code":"SUJ","stateCode":"","countryCode":"RO","countryName":"Romania"},{"name":"Sui","code":"SUL","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Hailey Sun Valley","code":"SUN","stateCode":"ID","countryCode":"US","countryName":"United States"},{"name":"Summer Beaver","code":"SUR","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Suva Nausori","code":"SUV","stateCode":"","countryCode":"FJ","countryName":"Fiji"},{"name":"Sioux City Sioux Gateway","code":"SUX","stateCode":"IA","countryCode":"US","countryName":"United States"},{"name":"Savoonga","code":"SVA","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Sambava","code":"SVB","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Silver City Grant County","code":"SVC","stateCode":"NM","countryCode":"US","countryName":"United States"},{"name":"St Vincent ET Joshua","code":"SVD","stateCode":"","countryCode":"VC","countryName":"Saint Vincent And The Grenadines"},{"name":"Stavanger Sola","code":"SVG","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"San Vicente","code":"SVI","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Svolvaer Helle","code":"SVJ","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Savonlinna","code":"SVL","stateCode":"","countryCode":"FI","countryName":"Finland"},{"name":"Moscow Sheremetyevo","code":"SVO","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Sevilla","code":"SVQ","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Stevens Village","code":"SVS","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Savusavu","code":"SVU","stateCode":"","countryCode":"FJ","countryName":"Fiji"},{"name":"Ekaterinburg","code":"SVX","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"San Antonio","code":"SVZ","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"Shantou","code":"SWA","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Stewart Newburgh","code":"SWF","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"South West Bay","code":"SWJ","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Milan Segrate","code":"SWK","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Stillwater Regional Airport","code":"SWO","stateCode":"OK","countryCode":"US","countryName":"United States"},{"name":"Swansea Fairwood Comm","code":"SWS","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Strasbourg Entzheim","code":"SXB","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Berlin Schoenefeld","code":"SXF","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Sligo Collooney","code":"SXL","stateCode":"","countryCode":"IE","countryName":"Ireland"},{"name":"St Maarten Princ Juliana","code":"SXM","stateCode":"","countryCode":"SX","countryName":"Sint Maarten"},{"name":"Sheldon Point Sheldon SPB","code":"SXP","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Srinagar","code":"SXR","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Seal Bay","code":"SYB","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Sydney Kingsford Smith","code":"SYD","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Sirjan","code":"SYJ","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Simao","code":"SYM","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Shonai","code":"SYO","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Syracuse Hancock Intl","code":"SYR","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"Sue Island Warraber Island","code":"SYU","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Sanya","code":"SYX","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Stornoway","code":"SYY","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Shiraz","code":"SYZ","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Soyo","code":"SZA","stateCode":"","countryCode":"AO","countryName":"Angola"},{"name":"Kuala Lumpur Sultan Abdul Aziz Shah","code":"SZB","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Sheffield City Airport","code":"SZD","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Samsun Carsamba","code":"SZF","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Salzburg WA Mozart","code":"SZG","stateCode":"","countryCode":"AT","countryName":"Austria"},{"name":"Suzhou","code":"SZV","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Shenzhen","code":"SZX","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Szczecin Goleniow","code":"SZZ","stateCode":"","countryCode":"PL","countryName":"Poland"},{"name":"Tobago","code":"TAB","stateCode":"","countryCode":"TT","countryName":"Trinidad And Tobago"},{"name":"Tacloban DZ Romualdez","code":"TAC","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Daegu","code":"TAE","stateCode":"","countryCode":"KR","countryName":"South Korea"},{"name":"Tagbilaran","code":"TAG","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Tanna","code":"TAH","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Taiz Al Janad","code":"TAI","stateCode":"","countryCode":"YE","countryName":"Yemen"},{"name":"Takamatsu","code":"TAK","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Tanana Ralph Calhoun","code":"TAL","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Tampico Gen F Javier Mina","code":"TAM","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Qingdao","code":"TAO","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Tapachula International","code":"TAP","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Tashkent Vostochny","code":"TAS","stateCode":"","countryCode":"UZ","countryName":"Uzbekistan"},{"name":"Poprad Tatry","code":"TAT","stateCode":"","countryCode":"SK","countryName":"Slovakia"},{"name":"Tuy Hoa","code":"TBB","stateCode":"","countryCode":"VN","countryName":"Vietnam"},{"name":"Tabubil","code":"TBG","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Tablas","code":"TBH","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"The Bight","code":"TBI","stateCode":"","countryCode":"BS","countryName":"Bahamas"},{"name":"Tabarka","code":"TBJ","stateCode":"","countryCode":"TN","countryName":"Tunisia"},{"name":"Fort Leonard Wood Forney AAF","code":"TBN","stateCode":"MO","countryCode":"US","countryName":"United States"},{"name":"Tabora","code":"TBO","stateCode":"","countryCode":"TZ","countryName":"Tanzania"},{"name":"Tumbes","code":"TBP","stateCode":"","countryCode":"PE","countryName":"Peru"},{"name":"Tbilisi Novo Alexeyevka","code":"TBS","stateCode":"","countryCode":"GE","countryName":"Georgia"},{"name":"NukuAlofa FuaAmotu Internationa","code":"TBU","stateCode":"","countryCode":"TO","countryName":"Tonga"},{"name":"Tambov","code":"TBW","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Tabriz","code":"TBZ","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Treasure Cay","code":"TCB","stateCode":"","countryCode":"BS","countryName":"Bahamas"},{"name":"Tulcea","code":"TCE","stateCode":"","countryCode":"RO","countryName":"Romania"},{"name":"Tchibanga","code":"TCH","stateCode":"","countryCode":"GA","countryName":"Gabon"},{"name":"Tenerife","code":"TCI","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Tumaco La Florida","code":"TCO","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Taba International","code":"TCP","stateCode":"","countryCode":"EG","countryName":"Egypt"},{"name":"Tacna","code":"TCQ","stateCode":"","countryCode":"PE","countryName":"Peru"},{"name":"Tuticorin","code":"TCR","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Takotna","code":"TCT","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Trinidad","code":"TDD","stateCode":"","countryCode":"BO","countryName":"Bolivia"},{"name":"Trat","code":"TDX","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Teterboro","code":"TEB","stateCode":"NJ","countryCode":"US","countryName":"United States"},{"name":"Tbessa","code":"TEE","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Tatitlek","code":"TEK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Tongren","code":"TEN","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Terceira Island Lajes","code":"TER","stateCode":"","countryCode":"PT","countryName":"Portugal"},{"name":"Tete Matunda","code":"TET","stateCode":"","countryCode":"MZ","countryName":"Mozambique"},{"name":"Telluride","code":"TEX","stateCode":"CO","countryCode":"US","countryName":"United States"},{"name":"Tufi","code":"TFI","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Tenerife Norte Los Rodeos","code":"TFN","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Tenerife Sur Reina Sofia","code":"TFS","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Podgorica Golubovci","code":"TGD","stateCode":"","countryCode":"ME","countryName":"Montenegro"},{"name":"Kuala Terengganu Sultan Mahmood","code":"TGG","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Tongoa","code":"TGH","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Tiga","code":"TGJ","stateCode":"","countryCode":"NC","countryName":"New Caledonia"},{"name":"Tirgu Mures","code":"TGM","stateCode":"","countryCode":"RO","countryName":"Romania"},{"name":"Tongliao","code":"TGO","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Touggourt","code":"TGR","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Tegucigalpa Toncontin","code":"TGU","stateCode":"","countryCode":"HN","countryName":"Honduras"},{"name":"Tuxtla Gutierrez Llano San Juan","code":"TGZ","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Teresina","code":"THE","stateCode":"PI","countryCode":"BR","countryName":"Brazil"},{"name":"Tachilek","code":"THL","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Trollhattan","code":"THN","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Thorshofn","code":"THO","stateCode":"","countryCode":"IS","countryName":"Iceland"},{"name":"Sukhothai","code":"THS","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Pituffik","code":"THU","stateCode":"","countryCode":"GL","countryName":"Greenland"},{"name":"Tirana Rinas","code":"TIA","stateCode":"","countryCode":"AL","countryName":"Albania"},{"name":"Taif","code":"TIF","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Tikehau Atoll","code":"TIH","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Tijuana Rodriguez","code":"TIJ","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Tembagapura Timika","code":"TIM","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Tindouf","code":"TIN","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Tripoli International","code":"TIP","stateCode":"","countryCode":"LY","countryName":"Libya"},{"name":"Tinian","code":"TIQ","stateCode":"","countryCode":"MP","countryName":"Mariana Islands"},{"name":"Tirupati","code":"TIR","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Thursday Island","code":"TIS","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Timaru","code":"TIU","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Tivat","code":"TIV","stateCode":"","countryCode":"ME","countryName":"Montenegro"},{"name":"Tari","code":"TIZ","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Tarija","code":"TJA","stateCode":"","countryCode":"BO","countryName":"Bolivia"},{"name":"Tyumen","code":"TJM","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Takume","code":"TJN","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Tanjung Pandan Bulutumbang","code":"TJQ","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Tenakee Springs Tenakee SPB","code":"TKE","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Bandar Lampung Branti","code":"TKG","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Tok","code":"TKJ","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Truk","code":"TKK","stateCode":"","countryCode":"FM","countryName":"Micronesia"},{"name":"Tokunoshima","code":"TKN","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Takapoto","code":"TKP","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Kigoma","code":"TKQ","stateCode":"","countryCode":"TZ","countryName":"Tanzania"},{"name":"Tokushima","code":"TKS","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Turku","code":"TKU","stateCode":"","countryCode":"FI","countryName":"Finland"},{"name":"Tatakoto","code":"TKV","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Takaroa","code":"TKX","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Teller","code":"TLA","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Toluca","code":"TLC","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Tulear","code":"TLE","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Tallahassee Municipal","code":"TLH","stateCode":"FL","countryCode":"US","countryName":"United States"},{"name":"Tatalina AFS","code":"TLJ","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Tallinn Ulemiste","code":"TLL","stateCode":"","countryCode":"EE","countryName":"Estonia"},{"name":"Tlemcen Zenata","code":"TLM","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Toulon Hyeres","code":"TLN","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Toulouse Blagnac","code":"TLS","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Tuluksak","code":"TLT","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Tel Aviv Yafo Ben Gurion Intl","code":"TLV","stateCode":"","countryCode":"IL","countryName":"Israel"},{"name":"Tambolaka","code":"TMC","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Tame","code":"TME","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Termez","code":"TMJ","stateCode":"","countryCode":"UZ","countryName":"Uzbekistan"},{"name":"Tamale","code":"TML","stateCode":"","countryCode":"GH","countryName":"Ghana"},{"name":"Tamatave","code":"TMM","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Tampere Pirkkala","code":"TMP","stateCode":"","countryCode":"FI","countryName":"Finland"},{"name":"Tamanrasset Aguemar","code":"TMR","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Sao Tome Is","code":"TMS","stateCode":"","countryCode":"ST","countryName":"Sao Tome And Principe"},{"name":"Trombetas","code":"TMT","stateCode":"PA","countryCode":"BR","countryName":"Brazil"},{"name":"Tambor","code":"TMU","stateCode":"","countryCode":"CR","countryName":"Costa Rica"},{"name":"Tamworth","code":"TMW","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Timimoun","code":"TMX","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Jinan","code":"TNA","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Tin City AFS","code":"TNC","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Tangier Boukhalef","code":"TNG","stateCode":"","countryCode":"MA","countryName":"Morocco"},{"name":"Tanjung Pinang Kidjang","code":"TNJ","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Tununak","code":"TNK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Tainan","code":"TNN","stateCode":"","countryCode":"TW","countryName":"Taiwan"},{"name":"Tamarindo","code":"TNO","stateCode":"","countryCode":"CR","countryName":"Costa Rica"},{"name":"Antananarivo","code":"TNR","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Tioman","code":"TOD","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Tozeur","code":"TOE","stateCode":"","countryCode":"TN","countryName":"Tunisia"},{"name":"Tomsk","code":"TOF","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Togiak Village","code":"TOG","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Torres Airstrip","code":"TOH","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Toledo Express","code":"TOL","stateCode":"OH","countryCode":"US","countryName":"United States"},{"name":"Tombouctou","code":"TOM","stateCode":"","countryCode":"ML","countryName":"Mali"},{"name":"Langnes Tromso","code":"TOS","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Touho","code":"TOU","stateCode":"","countryCode":"NC","countryName":"New Caledonia"},{"name":"Toyama","code":"TOY","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Tampa International","code":"TPA","stateCode":"FL","countryCode":"US","countryName":"United States"},{"name":"Taiwan Taoyuan International Airport","code":"TPE","stateCode":"","countryCode":"TW","countryName":"Taiwan"},{"name":"Taplejung","code":"TPJ","stateCode":"","countryCode":"NP","countryName":"Nepal"},{"name":"Tarapoto","code":"TPP","stateCode":"","countryCode":"PE","countryName":"Peru"},{"name":"Tepic","code":"TPQ","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Trapani Birgi","code":"TPS","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"San Domino Island","code":"TQR","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Torreon","code":"TRC","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Trondheim Vaernes","code":"TRD","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Tiree","code":"TRE","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Oslo Sandefjord","code":"TRF","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Tauranga","code":"TRG","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Bristol Johnson City Kingsport Tri Cities Regional","code":"TRI","stateCode":"TN","countryCode":"US","countryName":"United States"},{"name":"Tarakan","code":"TRK","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Turin Citta Di Torino","code":"TRN","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Taree","code":"TRO","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Trieste Dei Legionari","code":"TRS","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Trujillo","code":"TRU","stateCode":"","countryCode":"PE","countryName":"Peru"},{"name":"Thiruvananthapuram International","code":"TRV","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Tarawa Bonriki","code":"TRW","stateCode":"","countryCode":"KI","countryName":"Kiribati"},{"name":"Tiruchirapally Civil","code":"TRZ","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Taipei Sung Shan","code":"TSA","stateCode":"","countryCode":"TW","countryName":"Taiwan"},{"name":"Astana","code":"TSE","stateCode":"","countryCode":"KZ","countryName":"Kazakhstan"},{"name":"Venice Treviso","code":"TSF","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Tsushima","code":"TSJ","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Tamuin","code":"TSL","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Tianjin","code":"TSN","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Timisoara","code":"TSR","stateCode":"","countryCode":"RO","countryName":"Romania"},{"name":"New York East 34th St Heliport","code":"TSS","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"Trang","code":"TST","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Townsville","code":"TSV","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Tan Tan","code":"TTA","stateCode":"","countryCode":"MA","countryName":"Morocco"},{"name":"Ternate Babullah","code":"TTE","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Tottori","code":"TTJ","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Tortuquero","code":"TTQ","stateCode":"","countryCode":"CR","countryName":"Costa Rica"},{"name":"Taitung","code":"TTT","stateCode":"","countryCode":"TW","countryName":"Taiwan"},{"name":"Tetuan Sania Ramel","code":"TTU","stateCode":"","countryCode":"MA","countryName":"Morocco"},{"name":"Tulcan","code":"TUA","stateCode":"","countryCode":"EC","countryName":"Ecuador"},{"name":"Tubuai","code":"TUB","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Tucuman Benj Matienzo","code":"TUC","stateCode":"TU","countryCode":"AR","countryName":"Argentina"},{"name":"Tambacounda","code":"TUD","stateCode":"","countryCode":"SN","countryName":"Senegal"},{"name":"Tours St Symphorien","code":"TUF","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Tuguegarao","code":"TUG","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Turaif","code":"TUI","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Turbat","code":"TUK","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Tulsa International","code":"TUL","stateCode":"OK","countryCode":"US","countryName":"United States"},{"name":"Tunis Carthage","code":"TUN","stateCode":"","countryCode":"TN","countryName":"Tunisia"},{"name":"Taupo","code":"TUO","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Tupelo Lemons Municipal","code":"TUP","stateCode":"MS","countryCode":"US","countryName":"United States"},{"name":"Tucurui","code":"TUR","stateCode":"PA","countryCode":"BR","countryName":"Brazil"},{"name":"Tucson International","code":"TUS","stateCode":"AZ","countryCode":"US","countryName":"United States"},{"name":"Tabuk","code":"TUU","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Traverse City","code":"TVC","stateCode":"MI","countryCode":"US","countryName":"United States"},{"name":"Thief River Falls Regional","code":"TVF","stateCode":"MN","countryCode":"US","countryName":"United States"},{"name":"Taveuni Matei","code":"TVU","stateCode":"","countryCode":"FJ","countryName":"Fiji"},{"name":"Dawe","code":"TVY","stateCode":"","countryCode":"MM","countryName":"Myanmar"},{"name":"Twin Hills","code":"TWA","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Toowoomba","code":"TWB","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Twin Falls City County","code":"TWF","stateCode":"ID","countryCode":"US","countryName":"United States"},{"name":"Tawitawi","code":"TWT","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Tawau","code":"TWU","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Texarkana Municipal","code":"TXK","stateCode":"AR","countryCode":"US","countryName":"United States"},{"name":"Berlin Tegel","code":"TXL","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Tunxi","code":"TXN","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Talara","code":"TYL","stateCode":"","countryCode":"PE","countryName":"Peru"},{"name":"Taiyuan","code":"TYN","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Tokyo","code":"TYO","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Tyler Pounds Field","code":"TYR","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Knoxville Mc Ghee Tyson","code":"TYS","stateCode":"TN","countryCode":"US","countryName":"United States"},{"name":"Belize City Municipal","code":"TZA","stateCode":"","countryCode":"BZ","countryName":"Belize"},{"name":"South Andros","code":"TZN","stateCode":"","countryCode":"BS","countryName":"Bahamas"},{"name":"Trabzon","code":"TZX","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Ua Huka","code":"UAH","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Narsarsuaq","code":"UAK","stateCode":"","countryCode":"GL","countryName":"Greenland"},{"name":"Ua Pou","code":"UAP","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"San Juan","code":"UAQ","stateCode":"SJ","countryCode":"AR","countryName":"Argentina"},{"name":"Samburu","code":"UAS","stateCode":"","countryCode":"KE","countryName":"Kenya"},{"name":"Uberaba","code":"UBA","stateCode":"MG","countryCode":"BR","countryName":"Brazil"},{"name":"Ube","code":"UBJ","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Ubon Ratchathani Muang Ubon","code":"UBP","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Columbus Lowndes County","code":"UBS","stateCode":"MS","countryCode":"US","countryName":"United States"},{"name":"Ukhta","code":"UCT","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Uberlandia Ten Cel Aviador Cesar Bombonato","code":"UDI","stateCode":"MG","countryCode":"BR","countryName":"Brazil"},{"name":"Uzhgorod","code":"UDJ","stateCode":"","countryCode":"UA","countryName":"Ukraine"},{"name":"Udaipur Dabok","code":"UDR","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Quelimane","code":"UEL","stateCode":"","countryCode":"MZ","countryName":"Mozambique"},{"name":"Kumejima","code":"UEO","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Quetta","code":"UET","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Ufa","code":"UFA","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Pilot Point Ugashik Bay","code":"UGB","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Urgench","code":"UGC","stateCode":"","countryCode":"UZ","countryName":"Uzbekistan"},{"name":"Uganik","code":"UGI","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Quibdo","code":"UIB","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Qui Nhon","code":"UIH","stateCode":"","countryCode":"VN","countryName":"Vietnam"},{"name":"Utila","code":"UII","stateCode":"","countryCode":"HN","countryName":"Honduras"},{"name":"Quincy Municipal","code":"UIN","stateCode":"IL","countryCode":"US","countryName":"United States"},{"name":"Quito Mariscal Sucre","code":"UIO","stateCode":"","countryCode":"EC","countryName":"Ecuador"},{"name":"Quimper Pluguffan","code":"UIP","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Kobe","code":"UKB","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Ust Kamenogorsk","code":"UKK","stateCode":"","countryCode":"KZ","countryName":"Kazakhstan"},{"name":"Ulei","code":"ULB","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Ulaanbaatar Buyant Uhaa","code":"ULN","stateCode":"","countryCode":"MN","countryName":"Mongolia"},{"name":"Ulaangom","code":"ULO","stateCode":"","countryCode":"MN","countryName":"Mongolia"},{"name":"Quilpie","code":"ULP","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Gulu","code":"ULU","stateCode":"","countryCode":"UG","countryName":"Uganda"},{"name":"Ulyanovsk","code":"ULY","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Uummannaq","code":"UMD","stateCode":"","countryCode":"GL","countryName":"Greenland"},{"name":"Umea","code":"UME","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Kiunga","code":"UNG","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Unalakleet","code":"UNK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Ranong","code":"UNN","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Ujung Pandang Hasanudin","code":"UPG","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Uralsk","code":"URA","stateCode":"","countryCode":"KZ","countryName":"Kazakhstan"},{"name":"Urumqi","code":"URC","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Kuressaare","code":"URE","stateCode":"","countryCode":"EE","countryName":"Estonia"},{"name":"Uruguaiana Ruben Berta","code":"URG","stateCode":"RS","countryCode":"BR","countryName":"Brazil"},{"name":"Uraj","code":"URJ","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Rouen Boos","code":"URO","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Kursk","code":"URS","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Surat Thani","code":"URT","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Gurayat","code":"URY","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Ushuaia Islas Malvinas","code":"USH","stateCode":"TF","countryCode":"AR","countryName":"Argentina"},{"name":"Usinsk","code":"USK","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Koh Samui","code":"USM","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Ulsan","code":"USN","stateCode":"","countryCode":"KR","countryName":"South Korea"},{"name":"Usak","code":"USQ","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Busuanga","code":"USU","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Udon Thani","code":"UTH","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Upington","code":"UTN","stateCode":"","countryCode":"ZA","countryName":"South Africa"},{"name":"Utapao","code":"UTP","stateCode":"","countryCode":"TH","countryName":"Thailand"},{"name":"Umtata","code":"UTT","stateCode":"","countryCode":"ZA","countryName":"South Africa"},{"name":"Ulan Ude","code":"UUD","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Baruun Urt","code":"UUN","stateCode":"","countryCode":"MN","countryName":"Mongolia"},{"name":"Yuzhno Sakhalinsk","code":"UUS","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Ouvea","code":"UVE","stateCode":"","countryCode":"NC","countryName":"New Caledonia"},{"name":"St Lucia Hewanorra","code":"UVF","stateCode":"","countryCode":"LC","countryName":"Saint Lucia"},{"name":"Wiesbaden","code":"UWE","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Yulin","code":"UYN","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Vaasa","code":"VAA","stateCode":"","countryCode":"FI","countryName":"Finland"},{"name":"Vanimo","code":"VAI","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Chevak","code":"VAK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Van","code":"VAN","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Suavanao Airstrip","code":"VAO","stateCode":"","countryCode":"SB","countryName":"Solomon Islands"},{"name":"Varna","code":"VAR","stateCode":"","countryCode":"BG","countryName":"Bulgaria"},{"name":"Sivas","code":"VAS","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Vavau Lupepauu","code":"VAV","stateCode":"","countryCode":"TO","countryName":"Tonga"},{"name":"Vardoe","code":"VAW","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Verona Montichiari","code":"VBS","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Vanuabalavu","code":"VBV","stateCode":"","countryCode":"FJ","countryName":"Fiji"},{"name":"Visby","code":"VBY","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Venice Marco Polo","code":"VCE","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Campinas","code":"VCP","stateCode":"SP","countryCode":"BR","countryName":"Brazil"},{"name":"Victoria County Foster","code":"VCT","stateCode":"TX","countryCode":"US","countryName":"United States"},{"name":"Victorville George AFB","code":"VCV","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Ovda","code":"VDA","stateCode":"","countryCode":"IL","countryName":"Israel"},{"name":"Fagernes Valdres","code":"VDB","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Vitoria Da Conquista","code":"VDC","stateCode":"BA","countryCode":"BR","countryName":"Brazil"},{"name":"Valverde Hierro","code":"VDE","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Viedma","code":"VDM","stateCode":"RN","countryCode":"AR","countryName":"Argentina"},{"name":"Vadso","code":"VDS","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Valdez Municipal","code":"VDZ","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Venetie","code":"VEE","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Vernal","code":"VEL","stateCode":"UT","countryCode":"US","countryName":"United States"},{"name":"Veracruz Las Bajadas","code":"VER","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Vestmannaeyjar","code":"VEY","stateCode":"","countryCode":"IS","countryName":"Iceland"},{"name":"Victoria Falls","code":"VFA","stateCode":"","countryCode":"ZW","countryName":"Zimbabwe"},{"name":"Vijayawada","code":"VGA","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Vigo","code":"VGO","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Villagarzon","code":"VGZ","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Saurimo","code":"VHC","stateCode":"","countryCode":"AO","countryName":"Angola"},{"name":"Vilhelmina","code":"VHM","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Vahitahi","code":"VHZ","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Vienna International","code":"VIE","stateCode":"","countryCode":"AT","countryName":"Austria"},{"name":"El Vigia","code":"VIG","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"Vinh City","code":"VII","stateCode":"","countryCode":"VN","countryName":"Vietnam"},{"name":"Virgin Gorda Airport","code":"VIJ","stateCode":"","countryCode":"VG","countryName":"Virgin Islands, British"},{"name":"Dakhla","code":"VIL","stateCode":"","countryCode":"MA","countryName":"Morocco"},{"name":"Visalia","code":"VIS","stateCode":"CA","countryCode":"US","countryName":"United States"},{"name":"Vitoria","code":"VIT","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Vitoria Eurico Sales","code":"VIX","stateCode":"ES","countryCode":"BR","countryName":"Brazil"},{"name":"Rach Gia","code":"VKG","stateCode":"","countryCode":"VN","countryName":"Vietnam"},{"name":"Moscow Vnukovo","code":"VKO","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Vorkuta","code":"VKT","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Valencia","code":"VLC","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Valdosta Regional","code":"VLD","stateCode":"GA","countryCode":"US","countryName":"United States"},{"name":"Port Vila Bauerfield","code":"VLI","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Valladolid","code":"VLL","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Valencia","code":"VLN","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"Valesdir","code":"VLS","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Valera Carvajal","code":"VLV","stateCode":"","countryCode":"VE","countryName":"Venezuela"},{"name":"Vilnius","code":"VNO","stateCode":"","countryCode":"LT","countryName":"Lithuania"},{"name":"Varanasi","code":"VNS","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Vilanculos","code":"VNX","stateCode":"","countryCode":"MZ","countryName":"Mozambique"},{"name":"Volgograd","code":"VOG","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Volos Nea Anchialos","code":"VOL","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Voronezh","code":"VOZ","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Ongiva","code":"VPE","stateCode":"","countryCode":"AO","countryName":"Angola"},{"name":"Vopnafjordur","code":"VPN","stateCode":"","countryCode":"IS","countryName":"Iceland"},{"name":"Destin Fort Walton Beach","code":"VPS","stateCode":"FL","countryCode":"US","countryName":"United States"},{"name":"Chimoio","code":"VPY","stateCode":"","countryCode":"MZ","countryName":"Mozambique"},{"name":"Vieques","code":"VQS","stateCode":"","countryCode":"PR","countryName":"Puerto Rico"},{"name":"Varadero Juan Gualberto Gomez","code":"VRA","stateCode":"","countryCode":"CU","countryName":"Cuba"},{"name":"Virac","code":"VRC","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Varkaus","code":"VRK","stateCode":"","countryCode":"FI","countryName":"Finland"},{"name":"Verona","code":"VRN","stateCode":"","countryCode":"IT","countryName":"Italy"},{"name":"Vaeroy Stolport","code":"VRY","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Villahermosa Capitan Carlos Perez","code":"VSA","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Lugansk","code":"VSG","stateCode":"","countryCode":"UA","countryName":"Ukraine"},{"name":"Stockholm Hasslo Vasteras","code":"VST","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Vientiane Wattay","code":"VTE","stateCode":"","countryCode":"LA","countryName":"Laos"},{"name":"Las Tunas","code":"VTU","stateCode":"","countryCode":"CU","countryName":"Cuba"},{"name":"Vishakhapatnam","code":"VTZ","stateCode":"","countryCode":"IN","countryName":"India"},{"name":"Valledupar","code":"VUP","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Villavicencio La Vanguardia","code":"VVC","stateCode":"","countryCode":"CO","countryName":"Colombia"},{"name":"Santa Cruz Viru Viru Intl","code":"VVI","stateCode":"","countryCode":"BO","countryName":"Bolivia"},{"name":"Vladivostok","code":"VVO","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Illizi","code":"VVZ","stateCode":"","countryCode":"DZ","countryName":"Algeria"},{"name":"Lichinga","code":"VXC","stateCode":"","countryCode":"MZ","countryName":"Mozambique"},{"name":"Sao Vicente San Pedro","code":"VXE","stateCode":"","countryCode":"CV","countryName":"Cape Verde"},{"name":"Vaxjo","code":"VXO","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Wales","code":"WAA","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Wadi Ad Dawasir","code":"WAE","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Wanganui","code":"WAG","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Antsalova","code":"WAQ","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Washington","code":"WAS","stateCode":"DC","countryCode":"US","countryName":"United States"},{"name":"Waterford","code":"WAT","stateCode":"","countryCode":"IE","countryName":"Ireland"},{"name":"Warsaw Frederic Chopin","code":"WAW","stateCode":"","countryCode":"PL","countryName":"Poland"},{"name":"Stebbins","code":"WBB","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Beaver","code":"WBQ","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Windhoek Hosea Kutako Intl","code":"WDH","stateCode":"","countryCode":"NA","countryName":"Namibia"},{"name":"Weifang","code":"WEF","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Weihai","code":"WEH","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Weipa","code":"WEI","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Wagga Wagga Forrest Hill","code":"WGA","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Walgett","code":"WGE","stateCode":"NS","countryCode":"AU","countryName":"Australia"},{"name":"Waingapu","code":"WGP","stateCode":"","countryCode":"ID","countryName":"Indonesia"},{"name":"Whakatane","code":"WHK","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Wick","code":"WIC","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Nairobi Wilson","code":"WIL","stateCode":"","countryCode":"KE","countryName":"Kenya"},{"name":"Winton","code":"WIN","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Woja","code":"WJA","stateCode":"","countryCode":"MH","countryName":"Marshall Islands"},{"name":"WonJu","code":"WJU","stateCode":"","countryCode":"KR","countryName":"South Korea"},{"name":"Wanaka","code":"WKA","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Wakkanai Hokkaido","code":"WKJ","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Aleknagik","code":"WKK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Wellington International","code":"WLG","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Walaha","code":"WLH","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Selawik","code":"WLK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Wallis Island","code":"WLS","stateCode":"","countryCode":"WF","countryName":"Wallis And Futuna"},{"name":"Meyers Chuck SPB","code":"WMK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Maroantsetra","code":"WMN","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"White Mountain","code":"WMO","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Mananara","code":"WMR","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Napakiak SPB","code":"WNA","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Wunnummin Lake","code":"WNN","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Naga","code":"WNP","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Windorah","code":"WNR","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Nawabshah","code":"WNS","stateCode":"","countryCode":"PK","countryName":"Pakistan"},{"name":"Wenzhou","code":"WNZ","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Wipim","code":"WPM","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Whangarei","code":"WRE","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Wrangell SPB","code":"WRG","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Worland","code":"WRL","stateCode":"WY","countryCode":"US","countryName":"United States"},{"name":"Wroclaw Strachowice","code":"WRO","stateCode":"","countryCode":"PL","countryName":"Poland"},{"name":"South Naknek","code":"WSN","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Westerly State","code":"WST","stateCode":"RI","countryCode":"US","countryName":"United States"},{"name":"Westsound","code":"WSX","stateCode":"WA","countryCode":"US","countryName":"United States"},{"name":"Westport","code":"WSZ","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Noatak","code":"WTK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Tuntutuliak","code":"WTL","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Tsiroanomandidy","code":"WTS","stateCode":"","countryCode":"MG","countryName":"Madagascar"},{"name":"Wuhan","code":"WUH","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Wiluna","code":"WUN","stateCode":"WA","countryCode":"AU","countryName":"Australia"},{"name":"Wuyishan","code":"WUS","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Wuxi","code":"WUX","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Walvis Bay Rooikop","code":"WVB","stateCode":"","countryCode":"NA","countryName":"Namibia"},{"name":"Wewak Boram","code":"WWK","stateCode":"","countryCode":"PG","countryName":"Papua New Guinea"},{"name":"Whale Pass","code":"WWP","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Newtok","code":"WWT","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Wanxian","code":"WXN","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Whyalla","code":"WYA","stateCode":"SA","countryCode":"AU","countryName":"Australia"},{"name":"West Yellowstone Yellowstone","code":"WYS","stateCode":"MT","countryCode":"US","countryName":"United States"},{"name":"Chapeco","code":"XAP","stateCode":"SC","countryCode":"BR","countryName":"Brazil"},{"name":"Bearskin Lake","code":"XBE","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Birjand","code":"XBJ","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Christmas Island","code":"XCH","stateCode":"","countryCode":"CX","countryName":"Christmas Island"},{"name":"Chalons Sur Marne Vatry Airport","code":"XCR","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Lille Europe Rail Svc","code":"XDB","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Ottawa Rail Station","code":"XDS","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Disneyland Paris Railway Service","code":"XED","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Strasbourg Bus Service","code":"XER","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Baden Baden Karlsruhe Bus Service","code":"XET","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Stockholm STO C Railway Service","code":"XEV","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Sodertalje S Railway","code":"XEZ","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Calais Frethun Rail Station","code":"XFF","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Strangnas Railway Service","code":"XFH","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Eskilstuna Railway Service","code":"XFJ","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Xiangfan","code":"XFN","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Malmo Railway Service","code":"XFP","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Malmo South Railway","code":"XFR","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Tierp Railway Service","code":"XFU","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Lund C Railway Service","code":"XGC","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Grantham Rail Station","code":"XGM","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Kangiqsualujjuaq","code":"XGR","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Valence Railway Service","code":"XHK","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Xichang","code":"XIC","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Xilinhot","code":"XIL","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Dresden Railway Station","code":"XIR","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Leipzig Halle Railway Station","code":"XIT","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Erfurt Railway Station","code":"XIU","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Xi An Xianyang","code":"XIY","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Reims Champagne Railway Station","code":"XIZ","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Xieng Khouang","code":"XKH","stateCode":"","countryCode":"LA","countryName":"Laos"},{"name":"Kuala Lumpur KUL Sentral Rail","code":"XKL","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Kasabonika","code":"XKS","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Lac Brochet","code":"XLB","stateCode":"MB","countryCode":"CA","countryName":"Canada"},{"name":"St Louis","code":"XLS","stateCode":"","countryCode":"SN","countryName":"Senegal"},{"name":"Manihi","code":"XMH","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Xiamen","code":"XMN","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Macas","code":"XMS","stateCode":"","countryCode":"EC","countryName":"Ecuador"},{"name":"Yam Island","code":"XMY","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Northwest Arkansas Regional Airport","code":"XNA","stateCode":"AR","countryCode":"US","countryName":"United States"},{"name":"Newport Gwent Rail Station","code":"XNE","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Newark Northgate Rail Station","code":"XNK","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Nottingham Railway Service","code":"XNM","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Xining","code":"XNN","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Northallerton Rail Station","code":"XNO","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Nuneaton Rail Station","code":"XNV","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Poitiers Rail Station","code":"XOP","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Penrith Rail Station","code":"XPF","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Paris Gare du Nord Rail Stn","code":"XPG","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Montpellier Railway Station","code":"XPJ","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Port Klang Ferry","code":"XPQ","stateCode":"","countryCode":"MY","countryName":"Malaysia"},{"name":"Preston Rail Station","code":"XPT","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Berwick Rail Station","code":"XQG","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Nottingham Railway Station","code":"XQH","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Lancaster Rail Station","code":"XQL","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Quepos","code":"XQP","stateCode":"","countryCode":"CR","countryName":"Costa Rica"},{"name":"Qualicum","code":"XQU","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Runcorn Rail Station","code":"XRC","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Reading Railway Service","code":"XRE","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Marseille Railway Station","code":"XRF","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Rugby Rail Station","code":"XRU","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Jerez De La Frontera La Parra","code":"XRY","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"South Caicos International","code":"XSC","stateCode":"","countryCode":"TC","countryName":"Turks And Caicos Islands"},{"name":"Tours Railway Service","code":"XSH","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"South Indian Lake","code":"XSI","stateCode":"MB","countryCode":"CA","countryName":"Canada"},{"name":"Singapore Seletar","code":"XSP","stateCode":"","countryCode":"SG","countryName":"Singapore"},{"name":"Salisbury Rail Station","code":"XSR","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Thargomindah","code":"XTG","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Thirsk Rail Station","code":"XTK","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Tadoule Lake","code":"XTL","stateCode":"MB","countryCode":"CA","countryName":"Canada"},{"name":"Xuzhou","code":"XUZ","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Stockport Rail Station","code":"XVA","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Stafford Rail Station","code":"XVB","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Crewe Rail Station","code":"XVC","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Darlington Rail Station","code":"XVG","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Peterborough Rail Station","code":"XVH","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Stevenage Rail Station","code":"XVJ","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Durham Rail Station","code":"XVU","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Wolverhampton Rail Station","code":"XVW","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Wakefield Westgate Rail Station","code":"XWD","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Borlange Falun Falun Railway Service","code":"XWF","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Strasbourg Railway Station","code":"XWG","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Stoke on Trent Rail Station","code":"XWH","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Ronneby Karlskrona Rail Svc","code":"XWK","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Gothenburg Rail","code":"XWL","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Hallsberg Rail Station","code":"XWM","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Warrington BQ Rail Station","code":"XWN","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Hassleholm","code":"XWP","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Enkoping","code":"XWQ","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Orebro Railway Service","code":"XWR","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Swindon Rail Station","code":"XWS","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Varberg Rail Station","code":"XWV","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Nassjo Rail Station","code":"XWX","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Nykoping","code":"XWZ","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Alvesta","code":"XXA","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Degerfors Rail Station","code":"XXD","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Koping Rail Station","code":"XXI","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Katrineholm","code":"XXK","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Mjolby Rail Station","code":"XXM","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Kil Rail Service","code":"XXN","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Leksand Rail Station","code":"XXO","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Arboga Rail Station","code":"XXT","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Hedemora","code":"XXU","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Kumla Rail Station","code":"XXV","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Sundsvall Rail Service","code":"XXZ","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Yandina","code":"XYA","stateCode":"","countryCode":"SB","countryName":"Solomon Islands"},{"name":"Borlange Falun Borlange Railway Svc","code":"XYB","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Herrljunga","code":"XYC","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Lyon Part Dieu Rail Sv","code":"XYD","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Falkoping Rail Station","code":"XYF","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Angelholm Helsingborg Helsingborg Railway","code":"XYH","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Flen","code":"XYI","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Norrkoping Railway Service","code":"XYK","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Kristinehamn Rail","code":"XYN","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Avesta Krylbo","code":"XYP","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Angelholm Helsingborg Angelholm Railway Svc","code":"XYQ","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Sala","code":"XYX","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Arvika Rail Station","code":"XYY","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Harnosand Rail Station","code":"XYZ","stateCode":"","countryCode":"SE","countryName":"Sweden"},{"name":"Metz Railway Station","code":"XZI","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Macau Ferry","code":"XZM","stateCode":"","countryCode":"MO","countryName":"Macau"},{"name":"Avignon Railway Station","code":"XZN","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Oslo Central Station","code":"XZO","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Pass Generic","code":"XZP","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Rail Generic","code":"XZR","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Anahim Lake","code":"YAA","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Cat Lake","code":"YAC","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Fort Frances Municipal","code":"YAG","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Yakutat","code":"YAK","stateCode":"AK","countryCode":"US","countryName":"United States"},{"name":"Sault Ste Marie","code":"YAM","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Yap","code":"YAP","stateCode":"","countryCode":"FM","countryName":"Micronesia"},{"name":"Attawapiskat","code":"YAT","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Angling Lake","code":"YAX","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"St Anthony","code":"YAY","stateCode":"NL","countryCode":"CA","countryName":"Canada"},{"name":"Tofino Airport","code":"YAZ","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Kugaaruk","code":"YBB","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Baie Comeau","code":"YBC","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Bagotville","code":"YBG","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Black Tickle","code":"YBI","stateCode":"NL","countryCode":"CA","countryName":"Canada"},{"name":"Baker Lake","code":"YBK","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Campbell River","code":"YBL","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Yibin","code":"YBP","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Brandon","code":"YBR","stateCode":"MB","countryCode":"CA","countryName":"Canada"},{"name":"Brochet","code":"YBT","stateCode":"MB","countryCode":"CA","countryName":"Canada"},{"name":"Berens River","code":"YBV","stateCode":"MB","countryCode":"CA","countryName":"Canada"},{"name":"Bedwell Harbor","code":"YBW","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Blanc Sablon","code":"YBX","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Cambridge Bay","code":"YCB","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Nanaimo Arpt","code":"YCD","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Castlegar","code":"YCG","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Colville Lake","code":"YCK","stateCode":"NT","countryCode":"CA","countryName":"Canada"},{"name":"Coppermine Kugluktuk","code":"YCO","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Cross Lake","code":"YCR","stateCode":"MB","countryCode":"CA","countryName":"Canada"},{"name":"Chesterfield Inlet","code":"YCS","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Clyde River","code":"YCY","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Dawson City","code":"YDA","stateCode":"YT","countryCode":"CA","countryName":"Canada"},{"name":"Deer Lake","code":"YDF","stateCode":"NL","countryCode":"CA","countryName":"Canada"},{"name":"Dauphin","code":"YDN","stateCode":"MB","countryCode":"CA","countryName":"Canada"},{"name":"Nain","code":"YDP","stateCode":"NL","countryCode":"CA","countryName":"Canada"},{"name":"Dawson Creek","code":"YDQ","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Edmonton","code":"YEA","stateCode":"AB","countryCode":"CA","countryName":"Canada"},{"name":"Edmonton International","code":"YEG","stateCode":"AB","countryCode":"CA","countryName":"Canada"},{"name":"Bursa Yenisehir","code":"YEI","stateCode":"","countryCode":"TR","countryName":"Turkey"},{"name":"Arviat","code":"YEK","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Fort Severn","code":"YER","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Yasouj","code":"YES","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Inuvik Mike Zubko","code":"YEV","stateCode":"NT","countryCode":"CA","countryName":"Canada"},{"name":"Fort Albany","code":"YFA","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Iqaluit","code":"YFB","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Fredericton","code":"YFC","stateCode":"NB","countryCode":"CA","countryName":"Canada"},{"name":"Fort Hope","code":"YFH","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Snare Lake","code":"YFJ","stateCode":"NT","countryCode":"CA","countryName":"Canada"},{"name":"Flin Flon","code":"YFO","stateCode":"MB","countryCode":"CA","countryName":"Canada"},{"name":"Fort Simpson","code":"YFS","stateCode":"NT","countryCode":"CA","countryName":"Canada"},{"name":"Fox Harbour St Lewis","code":"YFX","stateCode":"NL","countryCode":"CA","countryName":"Canada"},{"name":"Gillies Bay","code":"YGB","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Ganges Harbor","code":"YGG","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Fort Good Hope","code":"YGH","stateCode":"NT","countryCode":"CA","countryName":"Canada"},{"name":"Yonago Miho","code":"YGJ","stateCode":"","countryCode":"JP","countryName":"Japan"},{"name":"Kingston","code":"YGK","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"La Grande","code":"YGL","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Gods Narrows","code":"YGO","stateCode":"MB","countryCode":"CA","countryName":"Canada"},{"name":"Iles De La Madeleine","code":"YGR","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Igloolik","code":"YGT","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Havre St Pierre","code":"YGV","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Kuujjuarapik","code":"YGW","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Gillam","code":"YGX","stateCode":"MB","countryCode":"CA","countryName":"Canada"},{"name":"Grise Fiord","code":"YGZ","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Port Hope Simpson","code":"YHA","stateCode":"NL","countryCode":"CA","countryName":"Canada"},{"name":"Dryden Municipal","code":"YHD","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Charlottetown","code":"YHG","stateCode":"NL","countryCode":"CA","countryName":"Canada"},{"name":"Holman","code":"YHI","stateCode":"NT","countryCode":"CA","countryName":"Canada"},{"name":"Gjoa Haven","code":"YHK","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Hamilton","code":"YHM","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Hopedale","code":"YHO","stateCode":"NL","countryCode":"CA","countryName":"Canada"},{"name":"Poplar Hill","code":"YHP","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Chevery","code":"YHR","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Sechelt","code":"YHS","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Montreal St Hubert","code":"YHU","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Hay River","code":"YHY","stateCode":"NT","countryCode":"CA","countryName":"Canada"},{"name":"Halifax Stanfield International Airport","code":"YHZ","stateCode":"NS","countryCode":"CA","countryName":"Canada"},{"name":"Pakuashipi","code":"YIF","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Yichang","code":"YIH","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Ivujivik","code":"YIK","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Yining","code":"YIN","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Pond Inlet","code":"YIO","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Detroit Willow Run","code":"YIP","stateCode":"MI","countryCode":"US","countryName":"United States"},{"name":"Garden Hill Island Lk","code":"YIV","stateCode":"MB","countryCode":"CA","countryName":"Canada"},{"name":"Yiwu","code":"YIW","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Stephenville","code":"YJT","stateCode":"NL","countryCode":"CA","countryName":"Canada"},{"name":"Kamloops","code":"YKA","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Kitchener Waterloo International Airport","code":"YKF","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Kangirsuk","code":"YKG","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Schefferville","code":"YKL","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Yakima Air Terminal","code":"YKM","stateCode":"WA","countryCode":"US","countryName":"United States"},{"name":"Waskaganish","code":"YKQ","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Yakutsk","code":"YKS","stateCode":"","countryCode":"RU","countryName":"Russia"},{"name":"Klemtu","code":"YKT","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Chisasibi","code":"YKU","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Lake Harbour Kimmirut","code":"YLC","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Lac La Martre Wha Ti","code":"YLE","stateCode":"NT","countryCode":"CA","countryName":"Canada"},{"name":"Lansdowne House","code":"YLH","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Lloydminster","code":"YLL","stateCode":"AB","countryCode":"CA","countryName":"Canada"},{"name":"Kelowna","code":"YLW","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Langley Regional","code":"YLY","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Marys Harbour","code":"YMH","stateCode":"NL","countryCode":"CA","countryName":"Canada"},{"name":"Fort Mcmurray","code":"YMM","stateCode":"AB","countryCode":"CA","countryName":"Canada"},{"name":"Makkovik","code":"YMN","stateCode":"NL","countryCode":"CA","countryName":"Canada"},{"name":"Moosonee","code":"YMO","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Montreal","code":"YMQ","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Chibougamau","code":"YMT","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Montreal Mirabel","code":"YMX","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Natashquan","code":"YNA","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Yanbu","code":"YNB","stateCode":"","countryCode":"SA","countryName":"Saudi Arabia"},{"name":"Wemindji","code":"YNC","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Ottawa Gatineau","code":"YND","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Norway House","code":"YNE","stateCode":"MB","countryCode":"CA","countryName":"Canada"},{"name":"Youngstown","code":"YNG","stateCode":"OH","countryCode":"US","countryName":"United States"},{"name":"Yanji","code":"YNJ","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"North Spirit Lake","code":"YNO","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Nemiscau","code":"YNS","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Yantai Laishan","code":"YNT","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Yangyang","code":"YNY","stateCode":"","countryCode":"KR","countryName":"South Korea"},{"name":"Yancheng","code":"YNZ","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Old Crow","code":"YOC","stateCode":"YT","countryCode":"CA","countryName":"Canada"},{"name":"Ogoki","code":"YOG","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Oxford House","code":"YOH","stateCode":"MB","countryCode":"CA","countryName":"Canada"},{"name":"High Level Footner Lake","code":"YOJ","stateCode":"AB","countryCode":"CA","countryName":"Canada"},{"name":"Rainbow Lake","code":"YOP","stateCode":"AB","countryCode":"CA","countryName":"Canada"},{"name":"Ottawa International","code":"YOW","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Port Alberni","code":"YPB","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Paulatuk","code":"YPC","stateCode":"NT","countryCode":"CA","countryName":"Canada"},{"name":"Peace River","code":"YPE","stateCode":"AB","countryCode":"CA","countryName":"Canada"},{"name":"Inukjuak","code":"YPH","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Aupaluk","code":"YPJ","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Pickle Lake","code":"YPL","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Pikangikum","code":"YPM","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Peawanuck","code":"YPO","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Prince Rupert Digby Island","code":"YPR","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Powell River","code":"YPW","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Povungnituk Puvirnituq","code":"YPX","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Quebec","code":"YQB","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Quaqtaq","code":"YQC","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"The Pas","code":"YQD","stateCode":"MB","countryCode":"CA","countryName":"Canada"},{"name":"Red Deer","code":"YQF","stateCode":"AB","countryCode":"CA","countryName":"Canada"},{"name":"Windsor","code":"YQG","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Kenora","code":"YQK","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Lethbridge","code":"YQL","stateCode":"AB","countryCode":"CA","countryName":"Canada"},{"name":"Greater Moncton International Airport","code":"YQM","stateCode":"NB","countryCode":"CA","countryName":"Canada"},{"name":"Nakina","code":"YQN","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Comox","code":"YQQ","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Regina","code":"YQR","stateCode":"SK","countryCode":"CA","countryName":"Canada"},{"name":"Thunder Bay","code":"YQT","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Grande Prairie","code":"YQU","stateCode":"AB","countryCode":"CA","countryName":"Canada"},{"name":"Gander","code":"YQX","stateCode":"NL","countryCode":"CA","countryName":"Canada"},{"name":"Sydney","code":"YQY","stateCode":"NS","countryCode":"CA","countryName":"Canada"},{"name":"Quesnel","code":"YQZ","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Rae Lakes","code":"YRA","stateCode":"NT","countryCode":"CA","countryName":"Canada"},{"name":"Resolute","code":"YRB","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Cartwright","code":"YRF","stateCode":"NL","countryCode":"CA","countryName":"Canada"},{"name":"Rigolet","code":"YRG","stateCode":"NL","countryCode":"CA","countryName":"Canada"},{"name":"Roberval","code":"YRJ","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Red Lake","code":"YRL","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Red Sucker Lake","code":"YRS","stateCode":"MB","countryCode":"CA","countryName":"Canada"},{"name":"Rankin Inlet","code":"YRT","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Sudbury","code":"YSB","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Snowdrift Lutselke","code":"YSG","stateCode":"NT","countryCode":"CA","countryName":"Canada"},{"name":"Saint John","code":"YSJ","stateCode":"NB","countryCode":"CA","countryName":"Canada"},{"name":"Sanikiluaq","code":"YSK","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Fort Smith","code":"YSM","stateCode":"NT","countryCode":"CA","countryName":"Canada"},{"name":"Postville","code":"YSO","stateCode":"NL","countryCode":"CA","countryName":"Canada"},{"name":"Nanisivik","code":"YSR","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Ste Therese Point","code":"YST","stateCode":"MB","countryCode":"CA","countryName":"Canada"},{"name":"Sachs Harbour","code":"YSY","stateCode":"NT","countryCode":"CA","countryName":"Canada"},{"name":"Cape Dorset","code":"YTE","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Thompson","code":"YTH","stateCode":"MB","countryCode":"CA","countryName":"Canada"},{"name":"Big Trout","code":"YTL","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Guildwood Toronto","code":"YTO","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Tasiujuaq","code":"YTQ","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Timmins","code":"YTS","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Toronto Island","code":"YTZ","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Tuktoyaktuk","code":"YUB","stateCode":"NT","countryCode":"CA","countryName":"Canada"},{"name":"Umiujaq","code":"YUD","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Montreal Pierre Elliott Trudeau","code":"YUL","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Yuma International","code":"YUM","stateCode":"AZ","countryCode":"US","countryName":"United States"},{"name":"Repulse Bay","code":"YUT","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Hall Beach","code":"YUX","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Rouyn","code":"YUY","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Moroni Iconi","code":"YVA","stateCode":"","countryCode":"KM","countryName":"Comoros"},{"name":"Bonaventure","code":"YVB","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Qikiqtarjuaq","code":"YVM","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Val DOr","code":"YVO","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Kuujjuaq","code":"YVP","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Norman Wells","code":"YVQ","stateCode":"NT","countryCode":"CA","countryName":"Canada"},{"name":"Vancouver Intl","code":"YVR","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Deer Lake","code":"YVZ","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Kangiqsujuaq","code":"YWB","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Winnipeg","code":"YWG","stateCode":"MB","countryCode":"CA","countryName":"Canada"},{"name":"Victoria Inner Harbor","code":"YWH","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Deline","code":"YWJ","stateCode":"NT","countryCode":"CA","countryName":"Canada"},{"name":"Wabush","code":"YWK","stateCode":"NL","countryCode":"CA","countryName":"Canada"},{"name":"Williams Lake","code":"YWL","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Williams Harbour","code":"YWM","stateCode":"NL","countryCode":"CA","countryName":"Canada"},{"name":"Webequie","code":"YWP","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Whistler","code":"YWS","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Cranbrook","code":"YXC","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Saskatoon","code":"YXE","stateCode":"SK","countryCode":"CA","countryName":"Canada"},{"name":"Medicine Hat","code":"YXH","stateCode":"AB","countryCode":"CA","countryName":"Canada"},{"name":"Fort St John","code":"YXJ","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Rimouski","code":"YXK","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Sioux Lookout","code":"YXL","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Whale Cove","code":"YXN","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Pangnirtung","code":"YXP","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Prince George","code":"YXS","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Terrace","code":"YXT","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"London International","code":"YXU","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Abbotsford","code":"YXX","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Whitehorse","code":"YXY","stateCode":"YT","countryCode":"CA","countryName":"Canada"},{"name":"North Bay","code":"YYB","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Calgary International","code":"YYC","stateCode":"AB","countryCode":"CA","countryName":"Canada"},{"name":"Smithers","code":"YYD","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Fort Nelson","code":"YYE","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Penticton","code":"YYF","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Charlottetown","code":"YYG","stateCode":"PE","countryCode":"CA","countryName":"Canada"},{"name":"Taloyoak","code":"YYH","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Victoria International","code":"YYJ","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Lynn Lake","code":"YYL","stateCode":"MB","countryCode":"CA","countryName":"Canada"},{"name":"Goose Bay","code":"YYR","stateCode":"NL","countryCode":"CA","countryName":"Canada"},{"name":"St Johns","code":"YYT","stateCode":"NL","countryCode":"CA","countryName":"Canada"},{"name":"Kapuskasing","code":"YYU","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Mont Joli","code":"YYY","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Toronto Pearson International","code":"YYZ","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Yellowknife","code":"YZF","stateCode":"NT","countryCode":"CA","countryName":"Canada"},{"name":"Salluit","code":"YZG","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Sandspit","code":"YZP","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Sarnia","code":"YZR","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Coral Harbour","code":"YZS","stateCode":"NU","countryCode":"CA","countryName":"Canada"},{"name":"Port Hardy","code":"YZT","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Sept Iles","code":"YZV","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"York Landing","code":"ZAC","stateCode":"MB","countryCode":"CA","countryName":"Canada"},{"name":"Zadar","code":"ZAD","stateCode":"","countryCode":"HR","countryName":"Croatia"},{"name":"Zagreb Pleso","code":"ZAG","stateCode":"","countryCode":"HR","countryName":"Croatia"},{"name":"Zahedan","code":"ZAH","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Valdivia Pichoy","code":"ZAL","stateCode":"","countryCode":"CL","countryName":"Chile"},{"name":"Zamboanga","code":"ZAM","stateCode":"","countryCode":"PH","countryName":"Philippines"},{"name":"Nuremberg HBF Railway Service","code":"ZAQ","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Zhaotong","code":"ZAT","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Zaragoza","code":"ZAZ","stateCode":"","countryCode":"ES","countryName":"Spain"},{"name":"Basel Mulhouse Basil Bad   Railway","code":"ZBA","stateCode":"","countryCode":"CH","countryName":"Switzerland"},{"name":"Bathurst","code":"ZBF","stateCode":"NB","countryCode":"CA","countryName":"Canada"},{"name":"Biloela","code":"ZBL","stateCode":"QL","countryCode":"AU","countryName":"Australia"},{"name":"Chah Bahar","code":"ZBR","stateCode":"","countryCode":"IR","countryName":"Iran"},{"name":"Aschaffenburg","code":"ZCB","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Baden Baden","code":"ZCC","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Zacatecas La Calera","code":"ZCL","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Temuco","code":"ZCO","stateCode":"","countryCode":"CL","countryName":"Chile"},{"name":"Basel Mulhouse SBB Railway Service","code":"ZDH","stateCode":"","countryCode":"CH","countryName":"Switzerland"},{"name":"Brno Bus Service","code":"ZDN","stateCode":"","countryCode":"CZ","countryName":"Czech Republic"},{"name":"Dundee ScotRail","code":"ZDU","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Fulda","code":"ZEE","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Garmisch Partenkirchen","code":"ZEI","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Gelsenkirchen Off line Point","code":"ZEJ","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Bella Bella","code":"ZEL","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"East Main","code":"ZEM","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"London Rail","code":"ZEP","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Goettingen","code":"ZEU","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Guetersloh","code":"ZEX","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Chesterfield Bus Service","code":"ZFI","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Gare de Rennes","code":"ZFJ","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Fort Mcpherson","code":"ZFM","stateCode":"NT","countryCode":"CA","countryName":"Canada"},{"name":"Fort Norman Tulita","code":"ZFN","stateCode":"NT","countryCode":"CA","countryName":"Canada"},{"name":"Gare de Bordeaux","code":"ZFQ","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Philadelphia 30st Rail Station","code":"ZFV","stateCode":"PA","countryCode":"US","countryName":"United States"},{"name":"Glasgow ScotRail","code":"ZGG","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Copenhagen Rail Station","code":"ZGH","stateCode":"","countryCode":"DK","countryName":"Denmark"},{"name":"Gods River","code":"ZGI","stateCode":"MB","countryCode":"CA","countryName":"Canada"},{"name":"Zhongshan Ferry Port","code":"ZGN","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Gotha Railway","code":"ZGO","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Gethsemani","code":"ZGS","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Gaua","code":"ZGU","stateCode":"","countryCode":"VU","countryName":"Vanuatu"},{"name":"Zhanjiang","code":"ZHA","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Ziguinchor","code":"ZIG","stateCode":"","countryCode":"SN","countryName":"Senegal"},{"name":"Ixtapa Zihuatanejo Internacional","code":"ZIH","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Inverness ScotRail","code":"ZIV","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Kaschechewan","code":"ZKE","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Kegaska","code":"ZKG","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Le Mans Rail Station","code":"ZLN","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Manzanillo","code":"ZLO","stateCode":"","countryCode":"MX","countryName":"Mexico"},{"name":"Liverpool Street Stn Railway Service","code":"ZLS","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"La Tabatiere","code":"ZLT","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Hamburg Railway Service","code":"ZMB","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Newark Metropark Rail","code":"ZME","stateCode":"NJ","countryCode":"US","countryName":"United States"},{"name":"Magdeburg Railway Service","code":"ZMG","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Masset","code":"ZMT","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Munich HBF Railway Service","code":"ZMU","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Nanaimo Harbour","code":"ZNA","stateCode":"BC","countryCode":"CA","countryName":"Canada"},{"name":"Hamm","code":"ZNB","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Newman","code":"ZNE","stateCode":"WA","countryCode":"AU","countryName":"Australia"},{"name":"Ingolstadt","code":"ZNQ","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Koblenz","code":"ZNV","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Limburg","code":"ZNW","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Zanzibar Kisauni","code":"ZNZ","stateCode":"","countryCode":"TZ","countryName":"Tanzania"},{"name":"Lueneburg Railway Service","code":"ZOG","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Osorno Canal Balo","code":"ZOS","stateCode":"","countryCode":"CL","countryName":"Chile"},{"name":"Oberhausen","code":"ZOY","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Offenburg","code":"ZPA","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Sachigo Lake","code":"ZPB","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Regensburg Railway Service","code":"ZPM","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Siegburg","code":"ZPY","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Queenstown Frankton","code":"ZQN","stateCode":"","countryCode":"NZ","countryName":"New Zealand"},{"name":"Wolfsburg","code":"ZQU","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Saarbruecken","code":"ZQW","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Frankfurt HBF Railway Service","code":"ZRB","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Zurich","code":"ZRH","stateCode":"","countryCode":"CH","countryName":"Switzerland"},{"name":"Round Lake","code":"ZRJ","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Newark NJ Rail","code":"ZRP","stateCode":"NJ","countryCode":"US","countryName":"United States"},{"name":"San Salvador","code":"ZSA","stateCode":"","countryCode":"BS","countryName":"Bahamas"},{"name":"St Pierre dela Reunion","code":"ZSE","stateCode":"","countryCode":"RE","countryName":"Reunion"},{"name":"Sandy Lake","code":"ZSJ","stateCode":"ON","countryCode":"CA","countryName":"Canada"},{"name":"Stendal Railway Service","code":"ZSN","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Tureira","code":"ZTA","stateCode":"","countryCode":"PF","countryName":"French Polynesia"},{"name":"Tete a La Baleine","code":"ZTB","stateCode":"QC","countryCode":"CA","countryName":"Canada"},{"name":"Westchester County Stamford Rail STN","code":"ZTF","stateCode":"NY","countryCode":"US","countryName":"United States"},{"name":"Zakinthos Is","code":"ZTH","stateCode":"","countryCode":"GR","countryName":"Greece"},{"name":"Shamattawa","code":"ZTM","stateCode":"MB","countryCode":"CA","countryName":"Canada"},{"name":"Zhuhai Airport","code":"ZUH","stateCode":"","countryCode":"CN","countryName":"China"},{"name":"Churchill Falls","code":"ZUM","stateCode":"NL","countryCode":"CA","countryName":"Canada"},{"name":"New Haven Rail","code":"ZVE","stateCode":"CT","countryCode":"US","countryName":"United States"},{"name":"Savannakhet","code":"ZVK","stateCode":"","countryCode":"LA","countryName":"Laos"},{"name":"Hanover Railway","code":"ZVR","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Wilmington Rail","code":"ZWI","stateCode":"DE","countryCode":"US","countryName":"United States"},{"name":"Stuttgart Railway Service","code":"ZWS","stateCode":"","countryCode":"DE","countryName":"Germany"},{"name":"Aberdeen ScotRail","code":"ZXA","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Edinburgh ScotRail","code":"ZXE","stateCode":"","countryCode":"GB","countryName":"United Kingdom"},{"name":"Roervik","code":"ZXF","stateCode":"","countryCode":"NO","countryName":"Norway"},{"name":"Amsterdam Railway Service","code":"ZYA","stateCode":"","countryCode":"NL","countryName":"Netherlands"},{"name":"Sylhet Civil","code":"ZYL","stateCode":"","countryCode":"BD","countryName":"Bangladesh"},{"name":"Nimes Railway","code":"ZYN","stateCode":"","countryCode":"FR","countryName":"France"},{"name":"Brussels Midi Railway Station","code":"ZYR","stateCode":"","countryCode":"BE","countryName":"Belgium"},{"name":"Antwerp Berchem Railway Stn","code":"ZYZ","stateCode":"","countryCode":"BE","countryName":"Belgium"}]

[
"Aberdeen, SD (ABR-Aberdeen)",
"Abilene, TX (ABI-Abilene Regional)",
"Acapulco, Mexico (ACA-Juan N. Alvarez)",
"Adak Island, AK (ADK-Adak Island)",
"Aguascalientes, Mexico (AGU-Aguascalientes)",
"Akron, OH (CAK-Akron/Canton Regional)",
"Albany, GA (ABY-Albany Dougherty County)",
"Albany, NY (ALB-Albany County)",
"Albuquerque, NM (ABQ-Albuquerque Intl.)",
"Alexandria, LA (AEX-Alexandria Intl.)",
"Allentown, PA (ABE-Allentown/Bethlehem/Easton)",
"Alpena, MI (APN-County Regional)",
"Amarillo, TX (AMA-Amarillo Intl.)",
"Anchorage, AK (ANC-Anchorage Intl.)",
"Aniak, AK (ANI-Aniak)",
"Appleton, WI (ATW-Outagamie County)",
"Arcata, CA (ACV-Arcata/Eureka)",
"Asheville, NC (AVL-Asheville Regional)",
"Aspen, CO (ASE-Sardy Field)",
"Atka, AK (AKB-Atka)",
"Atlanta, GA (ATL-Hartsfield Intl.)",
"Atlantic City, NJ (ACY-Atlantic City Intl.)",
"Augusta, GA (AGS-Augusta Bush Field)",
"Austin, TX (AUS-Austin/Bergstrom Intl.)",
"Bakersfield, CA (BFL-Bakersfield)",
"Baltimore, MD (BWI-Baltimore Washington)",
"Bangor, ME (BGR-Bangor Intl.)",
"Bar Harbor, ME (BHB-Bar Harbor)",
"Barrow, AK (BRW-Wiley Post/Will Rogers)",
"Baton Rouge, LA (BTR-Metropolitan)",
"Beaumont, TX (BPT-Jefferson County)",
"Bellingham, WA (BLI-Bellingham Intl.)",
"Bemidji, MN (BJI-Bemidji/Beltrami County)",
"Bend, OR (RDM-Bend/Redmond/Roberts Field)",
"Bethel, AK (BET-Bethel Municipal)",
"Billings, MT (BIL-Logan Intl.)",
"Biloxi, MS (GPT-Gulfport Biloxi)",
"Binghamton, NY (BGM-Edwin A. Link Field)",
"Birmingham, AL (BHM-Birmingham Intl.)",
"Bismarck, ND (BIS-Bismarck Municipal)",
"Bloomington, IL (BMI-Bloomington Normal)",
"Boise, ID (BOI-Boise Air Terminal)",
"Boston, MA (BOS-Logan Intl.)",
"Bozeman, MT (BZN-Gallatin Field)",
"Brainerd, MN (BRD-Crow Wing)",
"Brownsville, TX (BRO-South Padre Island Intl.)",
"Brunswick, GA (BQK-Brunswick Glynco Jetport)",
"Buffalo, NY (BUF-Buffalo Niagara Intl.)",
"Burbank, CA (BUR-Burbank/Glendale/Pasadena)",
"Burlington, VT (BTV-Burlington Intl.)",
"Butte, MT (BTM-Bert Mooney)",
"Cabo San Lucas, Mexico (SJD-Los Cabos Intl.)",
"Calgary, AB, Canada (YYC-Calgary Intl.)",
"Cancun, Mexico (CUN-Cancun Intl.)",
"Canton, OH (CAK-Akron/Canton Regional)",
"Casper, WY (CPR-Natrona County Intl.)",
"Cedar Rapids, IA (CID-Cedar Rapids Municipal)",
"Champaign, IL (CMI-University Of Illinois/Willard)",
"Charleston, SC (CHS-Charleston Intl.)",
"Charleston, WV (CRW-Yeager)",
"Charlotte, NC (CLT-Douglas Intl.)",
"Charlottesville, VA (CHO-Charlottesville)",
"Chattanooga, TN (CHA-Lovell Field)",
"Chicago, IL (All Airports)",
"Chicago, IL (MDW-Midway)",
"Chicago, IL (ORD-O'Hare)",
"Chihuahua, Mexico (CUU-Gral Roberto Fierro Villalobos)",
"Cincinnati, OH (CVG-Cincinnati N. Ky.)",
"Ciudad Del Carmen, Mexico (CME-Ciudad Del Carmen)",
"Cleveland, OH (CLE-Hopkins Intl.)",
"Cody, WY (COD-Cody)",
"Cold Bay, AK (CDB-Cold Bay)",
"College Station, TX (CLL-Easterwood)",
"Colorado Springs, CO (COS-Colorado Springs)",
"Columbia, SC (CAE-Metropolitan)",
"Columbus, GA (CSG-Columbus Metropolitan)",
"Columbus, MS (GTR-Golden Triangle)",
"Columbus, OH (CMH-Port Columbus Intl.)",
"Coos Bay, OR (OTH-North Bend Municipal)",
"Cordova, AK (CDV-Mudhole Smith)",
"Corpus Christi, TX (CRP-Corpus Christi Intl.)",
"Cozumel, Mexico (CZM-Cozumel Intl.)",
"Crescent City, CA (CEC-Crescent City)",
"Dallas-Ft. Worth, TX (DFW-Dallas/Fort Worth Intl.)",
"Dallas, TX (DAL-Love Field)",
"Daytona Beach, FL (DAB-Daytona Beach Intl.)",
"Dayton, OH (DAY-Dayton Intl.)",
"Denver, CO (DEN-Denver Intl.)",
"Des Moines, IA (DSM-Des Moines Intl.)",
"Detroit, MI (DTW-Wayne County)",
"Devils Lake, ND (DVL-Devils Lake)",
"Dillingham, AK (DLG-Dillingham)",
"Dodge City, KS (DDC-Dodge City)",
"Dothan, AL (DHN-Dothan)",
"Dubuque, IA (DBQ-Dubuque Regional)",
"Duluth, MN (DLH-Duluth Intl.)",
"Durango, CO (DRO-La Plata Field)",
"Dutch Harbor, AK (DUT-Dutch Harbor)",
"Eau Claire, WI (EAU-Chippewa Valley Regional)",
"Edmonton, AB, Canada (YEG-Edmonton Intl.)",
"Elko, NV (EKO-Elko)",
"Elmira, NY (ELM-Elmira/Corning Regional)",
"El Paso, TX (ELP-El Paso Intl.)",
"Erie, PA (ERI-Erie Intl.)",
"Eugene, OR (EUG-Mahlon Sweet Field)",
"Eureka, CA (ACV-Arcata/Eureka)",
"Evansville, IN (EVV-Dress Regional)",
"Fairbanks, AK (FAI-Fairbanks Intl.)",
"Fargo, ND (FAR-Hector)",
"Fayetteville, AR (XNA-Northwest Arkansas Regional)",
"Fayetteville, NC (FAY-Fayetteville Municipal)",
"Flint, MI (FNT-Bishop Intl.)",
"Florence, SC (FLO-Florence)",
"Fort Dodge, IA (FOD-Fort Dodge Regional)",
"Fort Lauderdale, FL (FLL-Hollywood Intl.)",
"Fort Myers, FL (RSW-Southwest Florida Regional)",
"Fort Smith, AR (FSM-Fort Smith Regional)",
"Fort Walton Beach, FL (VPS-Okaloosa County)",
"Fort Wayne, IN (FWA-Baer Field)",
"Fredericton, NB, Canada (YFC-Fredericton)",
"Fresno, CA (FAT-Fresno Air Terminal)",
"Gainesville, FL (GNV-Gainesville)",
"Garden City, KS (GCK-Garden City)",
"Glacier Bay, AK (GST-Gustavus)",
"Glasgow, MT (GGW-Glasgow)",
"Glendive, MT (GDV-Dawson Community)",
"Grand Forks, ND (GFK-Grand Forks Intl.)",
"Grand Junction, CO (GJT-Grand Junction)",
"Grand Rapids, MI (GRR-Gerald R. Ford Intl.)",
"Great Falls, MT (GTF-Great Falls Intl.)",
"Green Bay, WI (GRB-Austin Straubel Intl.)",
"Greenbrier, WV (LWB-Lewisburg)",
"Greensboro, NC (GSO-Piedmont Triad Intl.)",
"Greenville, MS (GLH-Greenville Municipal)",
"Greenville, SC (GSP-Greenville)",
"Guadalajara, Mexico (GDL-Miguel Hidalgo)",
"Gulfport, MS (GPT-Gulfport Biloxi)",
"Gunnison, CO (GUC-County)",
"Gustavus, AK (GST-Gustavus)",
"Halifax, NS, Canada (YHZ-Halifax Intl.)",
"Hancock, MI (CMX-Memorial)",
"Harlingen, TX (HRL-Valley Intl.)",
"Harrisburg, PA (MDT-Harrisburg Intl.)",
"Hartford, CT (BDL-Bradley Intl.)",
"Hattiesburg, MS (PIB-Hattiesburg/Laurel Regional)",
"Havana, Cuba (HAV-Havana)",
"Havre, MT (HVR-City County)",
"Helena, MT (HLN-Helena Regional)",
"Hibbing, MN (HIB-Hibbing/Chisholm)",
"Homer, AK (HOM-Howes)",
"Honolulu, HI (HNL-Honolulu Intl.)",
"Houston, TX (HOU-Houston Hobby)",
"Houston, TX (IAH-Houston Bush Intercontinental)",
"Huntington, WV (HTS-Huntington)",
"Huntsville, AL (HSV-Madison County)",
"Idaho Falls, ID (IDA-Fanning Field)",
"Indianapolis, IN (IND-Indianapolis Intl.)",
"International Falls, MN (INL-Falls Intl.)",
"Islip, NY (ISP-MacArthur)",
"Ixtapa, Mexico (ZIH-Ixtapa/Zihuatanejo Intl.)",
"Jackson Hole, WY (JAC-Jackson Hole)",
"Jackson, MS (JAN-Jackson Intl.)",
"Jacksonville, FL (JAX-Jacksonville Intl.)",
"Jamestown, ND (JMS-Jamestown)",
"Juneau, AK (JNU-Juneau Intl.)",
"Kahului, HI (OGG-Kahului/Maui)",
"Kailua, HI (KOA-Keahole)",
"Kalamazoo, MI (AZO-Kalamazoo/Battle Creek Intl.)",
"Kalispell, MT (FCA-Glacier Park Intl.)",
"Kamloops, BC, Canada (YKA-Kamloops)",
"Kansas City, MO (MCI-Kansas City Intl.)",
"Kearney, NE (EAR-Kearney)",
"Kelowna, BC, Canada (YLW-Ellison Field)",
"Kenai, AK (ENA-Kenai)",
"Kennewick, WA (PSC-Tri-Cities)",
"Ketchikan, AK (KTN-Ketchikan Intl.)",
"Key West, FL (EYW-Key West Intl.)",
"King Cove, AK (KVC-King Cove)",
"King Salmon, AK (AKN-King Salmon)",
"Kitchener, ON, Canada (YKF-Kitchener)",
"Klamath Falls, OR (LMT-Kingsley Field)",
"Knoxville, TN (TYS-McGhee/Tyson)",
"Kodiak, AK (ADQ-Kodiak)",
"Kona, HI (KOA-Keahole)",
"Kotzebue, AK (OTZ-Ralph Wien Memorial)",
"La Crosse, WI (LSE-La Crosse Municipal)",
"Lafayette, LA (LFT-Lafayette Regional)",
"Lake Charles, LA (LCH-Lake Charles Regional)",
"Lansing, MI (LAN-Capital City)",
"La Paz, Mexico (LAP-La Paz)",
"Laredo, TX (LRD-Laredo Intl.)",
"Las Vegas, NV (LAS-McCarran Intl.)",
"Laurel, MS (PIB-Hattiesburg/Laurel Regional)",
"Lawton, OK (LAW-Lawton Municipal)",
"Leon, Mexico (BJX-Del Bajio)",
"Lewisburg, WV (LWB-Lewisburg)",
"Lewiston, ID (LWS-Nez Perce County Regional)",
"Lewistown, MT (LWT-Lewistown)",
"Lexington, KY (LEX-Blue Grass Field)",
"Liberal, KS (LBL-Liberal)",
"Liberia, Costa Rica (LIR-Liberia)",
"Lihue, HI (LIH-Lihue/Kauai)",
"Lincoln, NE (LNK-Lincoln Municipal)",
"Little Rock, AR (LIT-Adams Field)",
"London, ON, Canada (YXU-London Municipal)",
"Long Beach, CA (LGB-Long Beach Municipal)",
"Longview, TX (GGG-Gregg County)",
"Loreto, Mexico (LTO-Loreto)",
"Los Angeles, CA (LAX-Los Angeles Intl.)",
"Los Cabos, Mexico (SJD-Los Cabos Intl.)",
"Louisville, KY (SDF-Standiford Field)",
"Lubbock, TX (LBB-Lubbock Intl.)",
"Lynchburg, VA (LYH-Lynchburg)",
"Macon, GA (MCN-Macon Lewis B Wilson)",
"Madison, WI (MSN-Dane County Regional)",
"Mammoth Lakes, CA (MMH-Mammoth Lakes)",
"Manchester, NH (MHT-Manchester)",
"Manzanillo, Mexico (ZLO-Intl. Playa de Oro)",
"Marquette, MI (MQT-Marquette County)",
"Mason City, IA (MCW-Mason City Municipal)",
"Maui, HI (OGG-Kahului/Maui)",
"Mazatlan, Mexico (MZT-Gen Rafael Buelna)",
"McAllen, TX (MFE-Miller Intl.)",
"McGrath, AK (MCG-McGrath)",
"Medford, OR (MFR-Medford/Jackson County)",
"Melbourne, FL (MLB-Melbourne Intl.)",
"Memphis, TN (MEM-Memphis Intl.)",
"Merida, Mexico (MID-Manuel Crescencio Rejon)",
"Meridian, MS (MEI-Meridian)",
"Mexico City, Mexico (MEX-Juarez Intl.)",
"Miami, FL (MIA-Miami Intl.)",
"Midland, TX (MAF-Midland Intl.)",
"Miles City, MT (MLS-Miles City)",
"Milwaukee, WI (MKE-General Mitchell Intl.)",
"Minneapolis, MN (MSP-Minneapolis/St. Paul Intl.)",
"Minot, ND (MOT-Minot Intl.)",
"Missoula, MT (MSO-Missoula County)",
"Mobile, AL (MOB-Mobile Regional)",
"Moline, IL (MLI-Quad City)",
"Monclova, Mexico (LOV-Monclova)",
"Monroe, LA (MLU-Monroe Regional)",
"Monterey, CA (MRY-Monterey Peninsula)",
"Monterrey, Mexico (MTY-Gen Mariano Escobedo)",
"Montgomery, AL (MGM-Dannelly Field)",
"Montreal, QC, Canada (YUL-Dorval)",
"Montrose, CO (MTJ-County)",
"Morelia, Mexico (MLM-Morelia)",
"Moscow, ID (PUW-Pullman/Moscow Regional)",
"Muscle Shoals, AL (MSL-Muscle Shoals Regional)",
"Muskegon, MI (MKG-Muskegon County)",
"Myrtle Beach, SC (MYR-Myrtle Beach Jetport)",
"Nantucket, MA (ACK-Nantucket)",
"Naples, FL (APF-Naples)",
"Nashville, TN (BNA-Nashville Intl.)",
"Nelson Lagoon, AK (NLG-Nelson Lagoon)",
"Newark, NJ (EWR-Newark Intl.)",
"New Bern, NC (EWN-New Bern)",
"Newburgh, NY (SWF-Stewart)",
"New Haven, CT (HVN-New Haven)",
"New Orleans, LA (MSY-New Orleans Intl.)",
"New Stuyahok, AK (KNW-New Stuyahok)",
"New York, NY (All Airports)",
"New York, NY (EWR-Newark Intl.)",
"New York, NY (JFK-Kennedy)",
"New York, NY (LGA-LaGuardia)",
"Nome, AK (OME-Nome)",
"Norfolk, VA (ORF-Norfolk Intl.)",
"North Bend, OR (OTH-North Bend Municipal)",
"North Platte, NE (LBF-North Platte)",
"Oakland, CA (OAK-Oakland Intl.)",
"Oaxaca, Mexico (OAX-Oaxaca)",
"Oklahoma City, OK (OKC-Will Rogers World)",
"Omaha, NE (OMA-Eppley Field)",
"Ontario, CA (ONT-Ontario Intl.)",
"Orange County, CA (SNA-Santa Ana)",
"Orlando, FL (MCO-Orlando Intl.)",
"Ottawa, ON, Canada (YOW-Ottawa Intl.)",
"Paducah, KY (PAH-Barkley Regional)",
"Palm Springs, CA (PSP-Palm Springs International Airport)",
"Panama City, FL (ECP-Bay County)",
"Panama City, FL (PFN-Bay County)",
"Pasco, WA (PSC-Tri-Cities)",
"Pellston, MI (PLN-Emmet County/Mackinac Isl.)",
"Pendleton, OR (PDT-Eastern Oregon Regional)",
"Pensacola, FL (PNS-Pensacola Regional)",
"Peoria, IL (PIA-Greater Peoria)",
"Petersburg, AK (PSG-James A. Johnson)",
"Philadelphia, PA (PHL-Philadelphia Intl.)",
"Phoenix, AZ (PHX-Sky Harbor Intl.)",
"Pierre, SD (PIR-Pierre Regional)",
"Pittsburgh, PA (PIT-Greater Pittsburgh Intl.)",
"Pocatello, ID (PIH-Pocatello Regional)",
"Portland, ME (PWM-Intl. Jet Port)",
"Portland, OR (PDX-Portland Intl.)",
"Port Moller, AK (PML-Port Moller)",
"Providence, RI (PVD-T.F. Green State)",
"Prudhoe Bay, AK (SCC-Deadhorse)",
"Puebla, Mexico (PBC-Puebla)",
"Puerto Vallarta, Mexico (PVR-Gustavo Diaz Ordaz)",
"Pullman, WA (PUW-Pullman/Moscow Regional)",
"Quebec, QC, Canada (YQB-Quebec)",
"Raleigh, NC (RDU-Raleigh Durham Intl.)",
"Rapid City, SD (RAP-Rapid City Regional)",
"Redding, CA (RDD-Redding Municipal)",
"Redmond, OR (RDM-Bend/Redmond/Roberts Field)",
"Regina, SK, Canada (YQR-Regina)",
"Reno, NV (RNO-Reno/Tahoe Intl.)",
"Rhinelander, WI (RHI-Oneida County)",
"Richmond, VA (RIC-Richmond Intl.)",
"Riviera Nayarit, Mexico (PVR-Gustavo Diaz Ordaz)",
"Roanoke, VA (ROA-Roanoke Regional)",
"Rochester, MN (RST-Rochester Intl.)",
"Rochester, NY (ROC-Greater Rochester Intl.)",
"Sacramento, CA (SMF-Metropolitan)",
"Sacramento, CA (SMF-Sacramento Intl.)",
"Saginaw, MI (MBS-Tri-City)",
"Salisbury-Ocean City, MD (SBY-Salisbury-Ocean City)",
"Saltillo, Mexico (SLW-Saltillo)",
"Salt Lake City, UT (SLC-Salt Lake City Intl.)",
"San Angelo, TX (SJT-Mathis Field)",
"San Antonio, TX (SAT-San Antonio Intl.)",
"San Diego, CA (SAN-Lindbergh Field)",
"Sand Point, AK (SDP-Sand Point)",
"San Francisco, CA (SFO-San Francisco Intl.)",
"San Jose, CA (SJC-San Jose Intl.)",
"San Jose, Costa Rica (SJO-San Jose Juan Santamaria)",
"San Jose del Cabo, Mexico (SJD-Los Cabos Intl.)",
"San Luis Obispo, CA (SBP-San Luis Obispo)",
"San Luis Potosi, Mexico (SLP-San Luis Potosi)",
"Santa Ana, CA (SNA-Santa Ana)",
"Santa Barbara, CA (SBA-Santa Barbara Municipal)",
"Santa Rosa, CA (STS-Santa Rosa)",
"Sarasota, FL (SRQ-Sarasota/Bradenton)",
"Saskatoon, SK, Canada (YXE-Saskatoon)",
"Sault Ste Marie, MI (CIU-Chippewa County Intl.)",
"Savannah, GA (SAV-Savannah Intl.)",
"Scottsbluff, NE (BFF-Scottsbluff)",
"Seattle, WA (SEA-Seattle/Tacoma Intl.)",
"Shreveport, LA (SHV-Shreveport Regional)",
"Sidney, MT (SDY-Sidney)",
"Sioux City, IA (SUX-Sioux Gateway)",
"Sioux Falls, SD (FSD-Joe Foss Field)",
"Sitka, AK (SIT-Sitka)",
"Sonoma County, CA (STS-Santa Rosa)",
"South Bend, IN (SBN-Michiana Regional)",
"Spartanburg, SC (GSP-Spartanburg)",
"Spokane, WA (GEG-Spokane Intl.)",
"Springfield, MO (SGF-Springfield Branson Regional)",
"State College, PA (SCE-University Park)",
"St. Cloud, MN (STC-St. Cloud Municipal)",
"Steamboat Springs, CO (HDN-Hayden)",
"St. George Island, AK (STG-St. George Island)",
"St. George, UT (SGU-St. George)",
"St. Louis, MO (STL-Lambert/St. Louis Intl.)",
"St. Paul Island, AK (SNP-St. Paul Island)",
"Sun Valley, ID (SUN-Friedman Memorial)",
"Syracuse, NY (SYR-Hancock Intl.)",
"Tallahassee, FL (TLH-Tallahassee Regional)",
"Tampa, FL (TPA-Tampa Intl.)",
"Tampico, Mexico (TAM-Gen. F. Javier Mina)",
"Texarkana, AR (TXK-Texarkana Regional)",
"Thief River Falls, MN (TVF-Thief River Falls Regional)",
"Thunder Bay, ON, Canada (YQT-Thunder Bay)",
"Toledo, OH (TOL-Toledo Express)",
"Toluca, Mexico (TLC-Toluca)",
"Toronto, ON, Canada (YYZ-Pearson)",
"Torreon, Mexico (TRC-Torreon)",
"Traverse City, MI (TVC-Cherry Capital)",
"Tri-City, TN (TRI-Tri-City Regional)",
"Tucson, AZ (TUS-Tucson Intl.)",
"Tulsa, OK (TUL-Tulsa Intl.)",
"Tupelo, MS (TUP-C.D. Lemons Municipal)",
"Twin Falls, ID (TWF-Twin Falls)",
"Tyler, TX (TYR-Pounds Field)",
"Unalakleet, AK (UNK-Unalakleet)",
"Urbana, IL (CMI-University Of Illinois/Willard)",
"Vail, CO (EGE-Eagle County)",
"Valdez, AK (VDZ-Valdez)",
"Valdosta, GA (VLD-Valdosta Regional)",
"Vancouver, BC, Canada (YVR-Vancouver Intl.)",
"Veracruz, Mexico (VER-Las Bajadas)",
"Victoria, BC, Canada (YYJ-Victoria)",
"Victoria, TX (VCT-County Foster)",
"Villahermosa, Mexico (VSA-Villahermosa)",
"Waco, TX (ACT-Waco Regional)",
"Walla Walla, WA (ALW-Walla Walla Regional)",
"Washington, DC (All Airports)",
"Washington, DC (BWI-Baltimore Washington)",
"Washington, DC (DCA-Reagan National)",
"Washington, DC (IAD-Dulles)",
"Waterloo, IA (ALO-Waterloo Municipal)",
"Watertown, SD (ATY-Watertown Municipal)",
"Wausau, WI (CWA-Cen. WI Regional)",
"Wenatchee, WA (EAT-Pangborn Field)",
"West Palm Beach, FL (PBI-Palm Beach Intl.)",
"West Yellowstone, MT (WYS-West Yellowstone)",
"White Plains, NY (HPN-Westchester Co.)",
"Wichita Falls, TX (SPS-Sheppard Air Force Base)",
"Wichita, KS (ICT-Continent)",
"Wichita, KS (ICT-Dwight D. Eisenhower National)",
"Wilkes-Barre, PA (AVP-Wilkes-Barre Scranton Intl.)",
"Wilmington, NC (ILM-Wilmington)",
"Winnipeg, MB, Canada (YWG-Winnipeg Intl.)",
"Wolf Point, MT (OLF-Wolf Point)",
"Wrangell, AK (WRG-Wrangell)",
"Yakima, WA (YKM-Yakima Air Terminal)",
"Yakutat, AK (YAK-Yakutat)",
"Yosemite, CA (FAT-Fresno Air Terminal)",
"Yosemite, CA (MMH-Mammoth Lakes)",
"Zihuatanejo, Mexico (ZIH-Ixtapa/Zihuatanejo Intl.)"
]


[
"Aberdeen, SD (ABR-Aberdeen)",
"Abilene, TX (ABI-Abilene Regional)",
"Acapulco, Mexico (ACA-Juan N. Alvarez)",
"Adak Island, AK (ADK-Adak Island)",
"Aguascalientes, Mexico (AGU-Aguascalientes)",
"Akron, OH (CAK-Akron/Canton Regional)",
"Albany, GA (ABY-Albany Dougherty County)",
"Albany, NY (ALB-Albany County)",
"Albuquerque, NM (ABQ-Albuquerque Intl.)",
"Alexandria, LA (AEX-Alexandria Intl.)",
"Allentown, PA (ABE-Allentown/Bethlehem/Easton)",
"Alpena, MI (APN-County Regional)",
"Amarillo, TX (AMA-Amarillo Intl.)",
"Anchorage, AK (ANC-Anchorage Intl.)",
"Aniak, AK (ANI-Aniak)",
"Appleton, WI (ATW-Outagamie County)",
"Arcata, CA (ACV-Arcata/Eureka)",
"Asheville, NC (AVL-Asheville Regional)",
"Aspen, CO (ASE-Sardy Field)",
"Atka, AK (AKB-Atka)",
"Atlanta, GA (ATL-Hartsfield Intl.)",
"Atlantic City, NJ (ACY-Atlantic City Intl.)",
"Augusta, GA (AGS-Augusta Bush Field)",
"Austin, TX (AUS-Austin/Bergstrom Intl.)",
"Bakersfield, CA (BFL-Bakersfield)",
"Baltimore, MD (BWI-Baltimore Washington)",
"Bangor, ME (BGR-Bangor Intl.)",
"Bar Harbor, ME (BHB-Bar Harbor)",
"Barrow, AK (BRW-Wiley Post/Will Rogers)",
"Baton Rouge, LA (BTR-Metropolitan)",
"Beaumont, TX (BPT-Jefferson County)",
"Bellingham, WA (BLI-Bellingham Intl.)",
"Bemidji, MN (BJI-Bemidji/Beltrami County)",
"Bend, OR (RDM-Bend/Redmond/Roberts Field)",
"Bethel, AK (BET-Bethel Municipal)",
"Billings, MT (BIL-Logan Intl.)",
"Biloxi, MS (GPT-Gulfport Biloxi)",
"Binghamton, NY (BGM-Edwin A. Link Field)",
"Birmingham, AL (BHM-Birmingham Intl.)",
"Bismarck, ND (BIS-Bismarck Municipal)",
"Bloomington, IL (BMI-Bloomington Normal)",
"Boise, ID (BOI-Boise Air Terminal)",
"Boston, MA (BOS-Logan Intl.)",
"Bozeman, MT (BZN-Gallatin Field)",
"Brainerd, MN (BRD-Crow Wing)",
"Brownsville, TX (BRO-South Padre Island Intl.)",
"Brunswick, GA (BQK-Brunswick Glynco Jetport)",
"Buffalo, NY (BUF-Buffalo Niagara Intl.)",
"Burbank, CA (BUR-Burbank/Glendale/Pasadena)",
"Burlington, VT (BTV-Burlington Intl.)",
"Butte, MT (BTM-Bert Mooney)",
"Cabo San Lucas, Mexico (SJD-Los Cabos Intl.)",
"Calgary, AB, Canada (YYC-Calgary Intl.)",
"Cancun, Mexico (CUN-Cancun Intl.)",
"Canton, OH (CAK-Akron/Canton Regional)",
"Casper, WY (CPR-Natrona County Intl.)",
"Cedar Rapids, IA (CID-Cedar Rapids Municipal)",
"Champaign, IL (CMI-University Of Illinois/Willard)",
"Charleston, SC (CHS-Charleston Intl.)",
"Charleston, WV (CRW-Yeager)",
"Charlotte, NC (CLT-Douglas Intl.)",
"Charlottesville, VA (CHO-Charlottesville)",
"Chattanooga, TN (CHA-Lovell Field)",
"Chicago, IL (All Airports)",
"Chicago, IL (MDW-Midway)",
"Chicago, IL (ORD-O'Hare)",
"Chihuahua, Mexico (CUU-Gral Roberto Fierro Villalobos)",
"Cincinnati, OH (CVG-Cincinnati N. Ky.)",
"Ciudad Del Carmen, Mexico (CME-Ciudad Del Carmen)",
"Cleveland, OH (CLE-Hopkins Intl.)",
"Cody, WY (COD-Cody)",
"Cold Bay, AK (CDB-Cold Bay)",
"College Station, TX (CLL-Easterwood)",
"Colorado Springs, CO (COS-Colorado Springs)",
"Columbia, SC (CAE-Metropolitan)",
"Columbus, GA (CSG-Columbus Metropolitan)",
"Columbus, MS (GTR-Golden Triangle)",
"Columbus, OH (CMH-Port Columbus Intl.)",
"Coos Bay, OR (OTH-North Bend Municipal)",
"Cordova, AK (CDV-Mudhole Smith)",
"Corpus Christi, TX (CRP-Corpus Christi Intl.)",
"Cozumel, Mexico (CZM-Cozumel Intl.)",
"Crescent City, CA (CEC-Crescent City)",
"Dallas-Ft. Worth, TX (DFW-Dallas/Fort Worth Intl.)",
"Dallas, TX (DAL-Love Field)",
"Daytona Beach, FL (DAB-Daytona Beach Intl.)",
"Dayton, OH (DAY-Dayton Intl.)",
"Denver, CO (DEN-Denver Intl.)",
"Des Moines, IA (DSM-Des Moines Intl.)",
"Detroit, MI (DTW-Wayne County)",
"Devils Lake, ND (DVL-Devils Lake)",
"Dillingham, AK (DLG-Dillingham)",
"Dodge City, KS (DDC-Dodge City)",
"Dothan, AL (DHN-Dothan)",
"Dubuque, IA (DBQ-Dubuque Regional)",
"Duluth, MN (DLH-Duluth Intl.)",
"Durango, CO (DRO-La Plata Field)",
"Dutch Harbor, AK (DUT-Dutch Harbor)",
"Eau Claire, WI (EAU-Chippewa Valley Regional)",
"Edmonton, AB, Canada (YEG-Edmonton Intl.)",
"Elko, NV (EKO-Elko)",
"Elmira, NY (ELM-Elmira/Corning Regional)",
"El Paso, TX (ELP-El Paso Intl.)",
"Erie, PA (ERI-Erie Intl.)",
"Eugene, OR (EUG-Mahlon Sweet Field)",
"Eureka, CA (ACV-Arcata/Eureka)",
"Evansville, IN (EVV-Dress Regional)",
"Fairbanks, AK (FAI-Fairbanks Intl.)",
"Fargo, ND (FAR-Hector)",
"Fayetteville, AR (XNA-Northwest Arkansas Regional)",
"Fayetteville, NC (FAY-Fayetteville Municipal)",
"Flint, MI (FNT-Bishop Intl.)",
"Florence, SC (FLO-Florence)",
"Fort Dodge, IA (FOD-Fort Dodge Regional)",
"Fort Lauderdale, FL (FLL-Hollywood Intl.)",
"Fort Myers, FL (RSW-Southwest Florida Regional)",
"Fort Smith, AR (FSM-Fort Smith Regional)",
"Fort Walton Beach, FL (VPS-Okaloosa County)",
"Fort Wayne, IN (FWA-Baer Field)",
"Fredericton, NB, Canada (YFC-Fredericton)",
"Fresno, CA (FAT-Fresno Air Terminal)",
"Gainesville, FL (GNV-Gainesville)",
"Garden City, KS (GCK-Garden City)",
"Glacier Bay, AK (GST-Gustavus)",
"Glasgow, MT (GGW-Glasgow)",
"Glendive, MT (GDV-Dawson Community)",
"Grand Forks, ND (GFK-Grand Forks Intl.)",
"Grand Junction, CO (GJT-Grand Junction)",
"Grand Rapids, MI (GRR-Gerald R. Ford Intl.)",
"Great Falls, MT (GTF-Great Falls Intl.)",
"Green Bay, WI (GRB-Austin Straubel Intl.)",
"Greenbrier, WV (LWB-Lewisburg)",
"Greensboro, NC (GSO-Piedmont Triad Intl.)",
"Greenville, MS (GLH-Greenville Municipal)",
"Greenville, SC (GSP-Greenville)",
"Guadalajara, Mexico (GDL-Miguel Hidalgo)",
"Gulfport, MS (GPT-Gulfport Biloxi)",
"Gunnison, CO (GUC-County)",
"Gustavus, AK (GST-Gustavus)",
"Halifax, NS, Canada (YHZ-Halifax Intl.)",
"Hancock, MI (CMX-Memorial)",
"Harlingen, TX (HRL-Valley Intl.)",
"Harrisburg, PA (MDT-Harrisburg Intl.)",
"Hartford, CT (BDL-Bradley Intl.)",
"Hattiesburg, MS (PIB-Hattiesburg/Laurel Regional)",
"Havana, Cuba (HAV-Havana)",
"Havre, MT (HVR-City County)",
"Helena, MT (HLN-Helena Regional)",
"Hibbing, MN (HIB-Hibbing/Chisholm)",
"Homer, AK (HOM-Howes)",
"Honolulu, HI (HNL-Honolulu Intl.)",
"Houston, TX (HOU-Houston Hobby)",
"Houston, TX (IAH-Houston Bush Intercontinental)",
"Huntington, WV (HTS-Huntington)",
"Huntsville, AL (HSV-Madison County)",
"Idaho Falls, ID (IDA-Fanning Field)",
"Indianapolis, IN (IND-Indianapolis Intl.)",
"International Falls, MN (INL-Falls Intl.)",
"Islip, NY (ISP-MacArthur)",
"Ixtapa, Mexico (ZIH-Ixtapa/Zihuatanejo Intl.)",
"Jackson Hole, WY (JAC-Jackson Hole)",
"Jackson, MS (JAN-Jackson Intl.)",
"Jacksonville, FL (JAX-Jacksonville Intl.)",
"Jamestown, ND (JMS-Jamestown)",
"Juneau, AK (JNU-Juneau Intl.)",
"Kahului, HI (OGG-Kahului/Maui)",
"Kailua, HI (KOA-Keahole)",
"Kalamazoo, MI (AZO-Kalamazoo/Battle Creek Intl.)",
"Kalispell, MT (FCA-Glacier Park Intl.)",
"Kamloops, BC, Canada (YKA-Kamloops)",
"Kansas City, MO (MCI-Kansas City Intl.)",
"Kearney, NE (EAR-Kearney)",
"Kelowna, BC, Canada (YLW-Ellison Field)",
"Kenai, AK (ENA-Kenai)",
"Kennewick, WA (PSC-Tri-Cities)",
"Ketchikan, AK (KTN-Ketchikan Intl.)",
"Key West, FL (EYW-Key West Intl.)",
"King Cove, AK (KVC-King Cove)",
"King Salmon, AK (AKN-King Salmon)",
"Kitchener, ON, Canada (YKF-Kitchener)",
"Klamath Falls, OR (LMT-Kingsley Field)",
"Knoxville, TN (TYS-McGhee/Tyson)",
"Kodiak, AK (ADQ-Kodiak)",
"Kona, HI (KOA-Keahole)",
"Kotzebue, AK (OTZ-Ralph Wien Memorial)",
"La Crosse, WI (LSE-La Crosse Municipal)",
"Lafayette, LA (LFT-Lafayette Regional)",
"Lake Charles, LA (LCH-Lake Charles Regional)",
"Lansing, MI (LAN-Capital City)",
"La Paz, Mexico (LAP-La Paz)",
"Laredo, TX (LRD-Laredo Intl.)",
"Las Vegas, NV (LAS-McCarran Intl.)",
"Laurel, MS (PIB-Hattiesburg/Laurel Regional)",
"Lawton, OK (LAW-Lawton Municipal)",
"Leon, Mexico (BJX-Del Bajio)",
"Lewisburg, WV (LWB-Lewisburg)",
"Lewiston, ID (LWS-Nez Perce County Regional)",
"Lewistown, MT (LWT-Lewistown)",
"Lexington, KY (LEX-Blue Grass Field)",
"Liberal, KS (LBL-Liberal)",
"Liberia, Costa Rica (LIR-Liberia)",
"Lihue, HI (LIH-Lihue/Kauai)",
"Lincoln, NE (LNK-Lincoln Municipal)",
"Little Rock, AR (LIT-Adams Field)",
"London, ON, Canada (YXU-London Municipal)",
"Long Beach, CA (LGB-Long Beach Municipal)",
"Longview, TX (GGG-Gregg County)",
"Loreto, Mexico (LTO-Loreto)",
"Los Angeles, CA (LAX-Los Angeles Intl.)",
"Los Cabos, Mexico (SJD-Los Cabos Intl.)",
"Louisville, KY (SDF-Standiford Field)",
"Lubbock, TX (LBB-Lubbock Intl.)",
"Lynchburg, VA (LYH-Lynchburg)",
"Macon, GA (MCN-Macon Lewis B Wilson)",
"Madison, WI (MSN-Dane County Regional)",
"Mammoth Lakes, CA (MMH-Mammoth Lakes)",
"Manchester, NH (MHT-Manchester)",
"Manzanillo, Mexico (ZLO-Intl. Playa de Oro)",
"Marquette, MI (MQT-Marquette County)",
"Mason City, IA (MCW-Mason City Municipal)",
"Maui, HI (OGG-Kahului/Maui)",
"Mazatlan, Mexico (MZT-Gen Rafael Buelna)",
"McAllen, TX (MFE-Miller Intl.)",
"McGrath, AK (MCG-McGrath)",
"Medford, OR (MFR-Medford/Jackson County)",
"Melbourne, FL (MLB-Melbourne Intl.)",
"Memphis, TN (MEM-Memphis Intl.)",
"Merida, Mexico (MID-Manuel Crescencio Rejon)",
"Meridian, MS (MEI-Meridian)",
"Mexico City, Mexico (MEX-Juarez Intl.)",
"Miami, FL (MIA-Miami Intl.)",
"Midland, TX (MAF-Midland Intl.)",
"Miles City, MT (MLS-Miles City)",
"Milwaukee, WI (MKE-General Mitchell Intl.)",
"Minneapolis, MN (MSP-Minneapolis/St. Paul Intl.)",
"Minot, ND (MOT-Minot Intl.)",
"Missoula, MT (MSO-Missoula County)",
"Mobile, AL (MOB-Mobile Regional)",
"Moline, IL (MLI-Quad City)",
"Monclova, Mexico (LOV-Monclova)",
"Monroe, LA (MLU-Monroe Regional)",
"Monterey, CA (MRY-Monterey Peninsula)",
"Monterrey, Mexico (MTY-Gen Mariano Escobedo)",
"Montgomery, AL (MGM-Dannelly Field)",
"Montreal, QC, Canada (YUL-Dorval)",
"Montrose, CO (MTJ-County)",
"Morelia, Mexico (MLM-Morelia)",
"Moscow, ID (PUW-Pullman/Moscow Regional)",
"Muscle Shoals, AL (MSL-Muscle Shoals Regional)",
"Muskegon, MI (MKG-Muskegon County)",
"Myrtle Beach, SC (MYR-Myrtle Beach Jetport)",
"Nantucket, MA (ACK-Nantucket)",
"Naples, FL (APF-Naples)",
"Nashville, TN (BNA-Nashville Intl.)",
"Nelson Lagoon, AK (NLG-Nelson Lagoon)",
"Newark, NJ (EWR-Newark Intl.)",
"New Bern, NC (EWN-New Bern)",
"Newburgh, NY (SWF-Stewart)",
"New Haven, CT (HVN-New Haven)",
"New Orleans, LA (MSY-New Orleans Intl.)",
"New Stuyahok, AK (KNW-New Stuyahok)",
"New York, NY (All Airports)",
"New York, NY (EWR-Newark Intl.)",
"New York, NY (JFK-Kennedy)",
"New York, NY (LGA-LaGuardia)",
"Nome, AK (OME-Nome)",
"Norfolk, VA (ORF-Norfolk Intl.)",
"North Bend, OR (OTH-North Bend Municipal)",
"North Platte, NE (LBF-North Platte)",
"Oakland, CA (OAK-Oakland Intl.)",
"Oaxaca, Mexico (OAX-Oaxaca)",
"Oklahoma City, OK (OKC-Will Rogers World)",
"Omaha, NE (OMA-Eppley Field)",
"Ontario, CA (ONT-Ontario Intl.)",
"Orange County, CA (SNA-Santa Ana)",
"Orlando, FL (MCO-Orlando Intl.)",
"Ottawa, ON, Canada (YOW-Ottawa Intl.)",
"Paducah, KY (PAH-Barkley Regional)",
"Palm Springs, CA (PSP-Palm Springs International Airport)",
"Panama City, FL (ECP-Bay County)",
"Panama City, FL (PFN-Bay County)",
"Pasco, WA (PSC-Tri-Cities)",
"Pellston, MI (PLN-Emmet County/Mackinac Isl.)",
"Pendleton, OR (PDT-Eastern Oregon Regional)",
"Pensacola, FL (PNS-Pensacola Regional)",
"Peoria, IL (PIA-Greater Peoria)",
"Petersburg, AK (PSG-James A. Johnson)",
"Philadelphia, PA (PHL-Philadelphia Intl.)",
"Phoenix, AZ (PHX-Sky Harbor Intl.)",
"Pierre, SD (PIR-Pierre Regional)",
"Pittsburgh, PA (PIT-Greater Pittsburgh Intl.)",
"Pocatello, ID (PIH-Pocatello Regional)",
"Portland, ME (PWM-Intl. Jet Port)",
"Portland, OR (PDX-Portland Intl.)",
"Port Moller, AK (PML-Port Moller)",
"Providence, RI (PVD-T.F. Green State)",
"Prudhoe Bay, AK (SCC-Deadhorse)",
"Puebla, Mexico (PBC-Puebla)",
"Puerto Vallarta, Mexico (PVR-Gustavo Diaz Ordaz)",
"Pullman, WA (PUW-Pullman/Moscow Regional)",
"Quebec, QC, Canada (YQB-Quebec)",
"Raleigh, NC (RDU-Raleigh Durham Intl.)",
"Rapid City, SD (RAP-Rapid City Regional)",
"Redding, CA (RDD-Redding Municipal)",
"Redmond, OR (RDM-Bend/Redmond/Roberts Field)",
"Regina, SK, Canada (YQR-Regina)",
"Reno, NV (RNO-Reno/Tahoe Intl.)",
"Rhinelander, WI (RHI-Oneida County)",
"Richmond, VA (RIC-Richmond Intl.)",
"Riviera Nayarit, Mexico (PVR-Gustavo Diaz Ordaz)",
"Roanoke, VA (ROA-Roanoke Regional)",
"Rochester, MN (RST-Rochester Intl.)",
"Rochester, NY (ROC-Greater Rochester Intl.)",
"Sacramento, CA (SMF-Metropolitan)",
"Sacramento, CA (SMF-Sacramento Intl.)",
"Saginaw, MI (MBS-Tri-City)",
"Salisbury-Ocean City, MD (SBY-Salisbury-Ocean City)",
"Saltillo, Mexico (SLW-Saltillo)",
"Salt Lake City, UT (SLC-Salt Lake City Intl.)",
"San Angelo, TX (SJT-Mathis Field)",
"San Antonio, TX (SAT-San Antonio Intl.)",
"San Diego, CA (SAN-Lindbergh Field)",
"Sand Point, AK (SDP-Sand Point)",
"San Francisco, CA (SFO-San Francisco Intl.)",
"San Jose, CA (SJC-San Jose Intl.)",
"San Jose, Costa Rica (SJO-San Jose Juan Santamaria)",
"San Jose del Cabo, Mexico (SJD-Los Cabos Intl.)",
"San Luis Obispo, CA (SBP-San Luis Obispo)",
"San Luis Potosi, Mexico (SLP-San Luis Potosi)",
"Santa Ana, CA (SNA-Santa Ana)",
"Santa Barbara, CA (SBA-Santa Barbara Municipal)",
"Santa Rosa, CA (STS-Santa Rosa)",
"Sarasota, FL (SRQ-Sarasota/Bradenton)",
"Saskatoon, SK, Canada (YXE-Saskatoon)",
"Sault Ste Marie, MI (CIU-Chippewa County Intl.)",
"Savannah, GA (SAV-Savannah Intl.)",
"Scottsbluff, NE (BFF-Scottsbluff)",
"Seattle, WA (SEA-Seattle/Tacoma Intl.)",
"Shreveport, LA (SHV-Shreveport Regional)",
"Sidney, MT (SDY-Sidney)",
"Sioux City, IA (SUX-Sioux Gateway)",
"Sioux Falls, SD (FSD-Joe Foss Field)",
"Sitka, AK (SIT-Sitka)",
"Sonoma County, CA (STS-Santa Rosa)",
"South Bend, IN (SBN-Michiana Regional)",
"Spartanburg, SC (GSP-Spartanburg)",
"Spokane, WA (GEG-Spokane Intl.)",
"Springfield, MO (SGF-Springfield Branson Regional)",
"State College, PA (SCE-University Park)",
"St. Cloud, MN (STC-St. Cloud Municipal)",
"Steamboat Springs, CO (HDN-Hayden)",
"St. George Island, AK (STG-St. George Island)",
"St. George, UT (SGU-St. George)",
"St. Louis, MO (STL-Lambert/St. Louis Intl.)",
"St. Paul Island, AK (SNP-St. Paul Island)",
"Sun Valley, ID (SUN-Friedman Memorial)",
"Syracuse, NY (SYR-Hancock Intl.)",
"Tallahassee, FL (TLH-Tallahassee Regional)",
"Tampa, FL (TPA-Tampa Intl.)",
"Tampico, Mexico (TAM-Gen. F. Javier Mina)",
"Texarkana, AR (TXK-Texarkana Regional)",
"Thief River Falls, MN (TVF-Thief River Falls Regional)",
"Thunder Bay, ON, Canada (YQT-Thunder Bay)",
"Toledo, OH (TOL-Toledo Express)",
"Toluca, Mexico (TLC-Toluca)",
"Toronto, ON, Canada (YYZ-Pearson)",
"Torreon, Mexico (TRC-Torreon)",
"Traverse City, MI (TVC-Cherry Capital)",
"Tri-City, TN (TRI-Tri-City Regional)",
"Tucson, AZ (TUS-Tucson Intl.)",
"Tulsa, OK (TUL-Tulsa Intl.)",
"Tupelo, MS (TUP-C.D. Lemons Municipal)",
"Twin Falls, ID (TWF-Twin Falls)",
"Tyler, TX (TYR-Pounds Field)",
"Unalakleet, AK (UNK-Unalakleet)",
"Urbana, IL (CMI-University Of Illinois/Willard)",
"Vail, CO (EGE-Eagle County)",
"Valdez, AK (VDZ-Valdez)",
"Valdosta, GA (VLD-Valdosta Regional)",
"Vancouver, BC, Canada (YVR-Vancouver Intl.)",
"Veracruz, Mexico (VER-Las Bajadas)",
"Victoria, BC, Canada (YYJ-Victoria)",
"Victoria, TX (VCT-County Foster)",
"Villahermosa, Mexico (VSA-Villahermosa)",
"Waco, TX (ACT-Waco Regional)",
"Walla Walla, WA (ALW-Walla Walla Regional)",
"Washington, DC (All Airports)",
"Washington, DC (BWI-Baltimore Washington)",
"Washington, DC (DCA-Reagan National)",
"Washington, DC (IAD-Dulles)",
"Waterloo, IA (ALO-Waterloo Municipal)",
"Watertown, SD (ATY-Watertown Municipal)",
"Wausau, WI (CWA-Cen. WI Regional)",
"Wenatchee, WA (EAT-Pangborn Field)",
"West Palm Beach, FL (PBI-Palm Beach Intl.)",
"West Yellowstone, MT (WYS-West Yellowstone)",
"White Plains, NY (HPN-Westchester Co.)",
"Wichita Falls, TX (SPS-Sheppard Air Force Base)",
"Wichita, KS (ICT-Continent)",
"Wichita, KS (ICT-Dwight D. Eisenhower National)",
"Wilkes-Barre, PA (AVP-Wilkes-Barre Scranton Intl.)",
"Wilmington, NC (ILM-Wilmington)",
"Winnipeg, MB, Canada (YWG-Winnipeg Intl.)",
"Wolf Point, MT (OLF-Wolf Point)",
"Wrangell, AK (WRG-Wrangell)",
"Yakima, WA (YKM-Yakima Air Terminal)",
"Yakutat, AK (YAK-Yakutat)",
"Yosemite, CA (FAT-Fresno Air Terminal)",
"Yosemite, CA (MMH-Mammoth Lakes)",
"Zihuatanejo, Mexico (ZIH-Ixtapa/Zihuatanejo Intl.)"
]


[
"Aberdeen, SD (ABR-Aberdeen)",
"Abilene, TX (ABI-Abilene Regional)",
"Acapulco, Mexico (ACA-Juan N. Alvarez)",
"Adak Island, AK (ADK-Adak Island)",
"Aguascalientes, Mexico (AGU-Aguascalientes)",
"Akron, OH (CAK-Akron/Canton Regional)",
"Albany, GA (ABY-Albany Dougherty County)",
"Albany, NY (ALB-Albany County)",
"Albuquerque, NM (ABQ-Albuquerque Intl.)",
"Alexandria, LA (AEX-Alexandria Intl.)",
"Allentown, PA (ABE-Allentown/Bethlehem/Easton)",
"Alpena, MI (APN-County Regional)",
"Amarillo, TX (AMA-Amarillo Intl.)",
"Anchorage, AK (ANC-Anchorage Intl.)",
"Aniak, AK (ANI-Aniak)",
"Appleton, WI (ATW-Outagamie County)",
"Arcata, CA (ACV-Arcata/Eureka)",
"Asheville, NC (AVL-Asheville Regional)",
"Aspen, CO (ASE-Sardy Field)",
"Atka, AK (AKB-Atka)",
"Atlanta, GA (ATL-Hartsfield Intl.)",
"Atlantic City, NJ (ACY-Atlantic City Intl.)",
"Augusta, GA (AGS-Augusta Bush Field)",
"Austin, TX (AUS-Austin/Bergstrom Intl.)",
"Bakersfield, CA (BFL-Bakersfield)",
"Baltimore, MD (BWI-Baltimore Washington)",
"Bangor, ME (BGR-Bangor Intl.)",
"Bar Harbor, ME (BHB-Bar Harbor)",
"Barrow, AK (BRW-Wiley Post/Will Rogers)",
"Baton Rouge, LA (BTR-Metropolitan)",
"Beaumont, TX (BPT-Jefferson County)",
"Bellingham, WA (BLI-Bellingham Intl.)",
"Bemidji, MN (BJI-Bemidji/Beltrami County)",
"Bend, OR (RDM-Bend/Redmond/Roberts Field)",
"Bethel, AK (BET-Bethel Municipal)",
"Billings, MT (BIL-Logan Intl.)",
"Biloxi, MS (GPT-Gulfport Biloxi)",
"Binghamton, NY (BGM-Edwin A. Link Field)",
"Birmingham, AL (BHM-Birmingham Intl.)",
"Bismarck, ND (BIS-Bismarck Municipal)",
"Bloomington, IL (BMI-Bloomington Normal)",
"Boise, ID (BOI-Boise Air Terminal)",
"Boston, MA (BOS-Logan Intl.)",
"Bozeman, MT (BZN-Gallatin Field)",
"Brainerd, MN (BRD-Crow Wing)",
"Brownsville, TX (BRO-South Padre Island Intl.)",
"Brunswick, GA (BQK-Brunswick Glynco Jetport)",
"Buffalo, NY (BUF-Buffalo Niagara Intl.)",
"Burbank, CA (BUR-Burbank/Glendale/Pasadena)",
"Burlington, VT (BTV-Burlington Intl.)",
"Butte, MT (BTM-Bert Mooney)",
"Cabo San Lucas, Mexico (SJD-Los Cabos Intl.)",
"Calgary, AB, Canada (YYC-Calgary Intl.)",
"Cancun, Mexico (CUN-Cancun Intl.)",
"Canton, OH (CAK-Akron/Canton Regional)",
"Casper, WY (CPR-Natrona County Intl.)",
"Cedar Rapids, IA (CID-Cedar Rapids Municipal)",
"Champaign, IL (CMI-University Of Illinois/Willard)",
"Charleston, SC (CHS-Charleston Intl.)",
"Charleston, WV (CRW-Yeager)",
"Charlotte, NC (CLT-Douglas Intl.)",
"Charlottesville, VA (CHO-Charlottesville)",
"Chattanooga, TN (CHA-Lovell Field)",
"Chicago, IL (All Airports)",
"Chicago, IL (MDW-Midway)",
"Chicago, IL (ORD-O'Hare)",
"Chihuahua, Mexico (CUU-Gral Roberto Fierro Villalobos)",
"Cincinnati, OH (CVG-Cincinnati N. Ky.)",
"Ciudad Del Carmen, Mexico (CME-Ciudad Del Carmen)",
"Cleveland, OH (CLE-Hopkins Intl.)",
"Cody, WY (COD-Cody)",
"Cold Bay, AK (CDB-Cold Bay)",
"College Station, TX (CLL-Easterwood)",
"Colorado Springs, CO (COS-Colorado Springs)",
"Columbia, SC (CAE-Metropolitan)",
"Columbus, GA (CSG-Columbus Metropolitan)",
"Columbus, MS (GTR-Golden Triangle)",
"Columbus, OH (CMH-Port Columbus Intl.)",
"Coos Bay, OR (OTH-North Bend Municipal)",
"Cordova, AK (CDV-Mudhole Smith)",
"Corpus Christi, TX (CRP-Corpus Christi Intl.)",
"Cozumel, Mexico (CZM-Cozumel Intl.)",
"Crescent City, CA (CEC-Crescent City)",
"Dallas-Ft. Worth, TX (DFW-Dallas/Fort Worth Intl.)",
"Dallas, TX (DAL-Love Field)",
"Daytona Beach, FL (DAB-Daytona Beach Intl.)",
"Dayton, OH (DAY-Dayton Intl.)",
"Denver, CO (DEN-Denver Intl.)",
"Des Moines, IA (DSM-Des Moines Intl.)",
"Detroit, MI (DTW-Wayne County)",
"Devils Lake, ND (DVL-Devils Lake)",
"Dillingham, AK (DLG-Dillingham)",
"Dodge City, KS (DDC-Dodge City)",
"Dothan, AL (DHN-Dothan)",
"Dubuque, IA (DBQ-Dubuque Regional)",
"Duluth, MN (DLH-Duluth Intl.)",
"Durango, CO (DRO-La Plata Field)",
"Dutch Harbor, AK (DUT-Dutch Harbor)",
"Eau Claire, WI (EAU-Chippewa Valley Regional)",
"Edmonton, AB, Canada (YEG-Edmonton Intl.)",
"Elko, NV (EKO-Elko)",
"Elmira, NY (ELM-Elmira/Corning Regional)",
"El Paso, TX (ELP-El Paso Intl.)",
"Erie, PA (ERI-Erie Intl.)",
"Eugene, OR (EUG-Mahlon Sweet Field)",
"Eureka, CA (ACV-Arcata/Eureka)",
"Evansville, IN (EVV-Dress Regional)",
"Fairbanks, AK (FAI-Fairbanks Intl.)",
"Fargo, ND (FAR-Hector)",
"Fayetteville, AR (XNA-Northwest Arkansas Regional)",
"Fayetteville, NC (FAY-Fayetteville Municipal)",
"Flint, MI (FNT-Bishop Intl.)",
"Florence, SC (FLO-Florence)",
"Fort Dodge, IA (FOD-Fort Dodge Regional)",
"Fort Lauderdale, FL (FLL-Hollywood Intl.)",
"Fort Myers, FL (RSW-Southwest Florida Regional)",
"Fort Smith, AR (FSM-Fort Smith Regional)",
"Fort Walton Beach, FL (VPS-Okaloosa County)",
"Fort Wayne, IN (FWA-Baer Field)",
"Fredericton, NB, Canada (YFC-Fredericton)",
"Fresno, CA (FAT-Fresno Air Terminal)",
"Gainesville, FL (GNV-Gainesville)",
"Garden City, KS (GCK-Garden City)",
"Glacier Bay, AK (GST-Gustavus)",
"Glasgow, MT (GGW-Glasgow)",
"Glendive, MT (GDV-Dawson Community)",
"Grand Forks, ND (GFK-Grand Forks Intl.)",
"Grand Junction, CO (GJT-Grand Junction)",
"Grand Rapids, MI (GRR-Gerald R. Ford Intl.)",
"Great Falls, MT (GTF-Great Falls Intl.)",
"Green Bay, WI (GRB-Austin Straubel Intl.)",
"Greenbrier, WV (LWB-Lewisburg)",
"Greensboro, NC (GSO-Piedmont Triad Intl.)",
"Greenville, MS (GLH-Greenville Municipal)",
"Greenville, SC (GSP-Greenville)",
"Guadalajara, Mexico (GDL-Miguel Hidalgo)",
"Gulfport, MS (GPT-Gulfport Biloxi)",
"Gunnison, CO (GUC-County)",
"Gustavus, AK (GST-Gustavus)",
"Halifax, NS, Canada (YHZ-Halifax Intl.)",
"Hancock, MI (CMX-Memorial)",
"Harlingen, TX (HRL-Valley Intl.)",
"Harrisburg, PA (MDT-Harrisburg Intl.)",
"Hartford, CT (BDL-Bradley Intl.)",
"Hattiesburg, MS (PIB-Hattiesburg/Laurel Regional)",
"Havana, Cuba (HAV-Havana)",
"Havre, MT (HVR-City County)",
"Helena, MT (HLN-Helena Regional)",
"Hibbing, MN (HIB-Hibbing/Chisholm)",
"Homer, AK (HOM-Howes)",
"Honolulu, HI (HNL-Honolulu Intl.)",
"Houston, TX (HOU-Houston Hobby)",
"Houston, TX (IAH-Houston Bush Intercontinental)",
"Huntington, WV (HTS-Huntington)",
"Huntsville, AL (HSV-Madison County)",
"Idaho Falls, ID (IDA-Fanning Field)",
"Indianapolis, IN (IND-Indianapolis Intl.)",
"International Falls, MN (INL-Falls Intl.)",
"Islip, NY (ISP-MacArthur)",
"Ixtapa, Mexico (ZIH-Ixtapa/Zihuatanejo Intl.)",
"Jackson Hole, WY (JAC-Jackson Hole)",
"Jackson, MS (JAN-Jackson Intl.)",
"Jacksonville, FL (JAX-Jacksonville Intl.)",
"Jamestown, ND (JMS-Jamestown)",
"Juneau, AK (JNU-Juneau Intl.)",
"Kahului, HI (OGG-Kahului/Maui)",
"Kailua, HI (KOA-Keahole)",
"Kalamazoo, MI (AZO-Kalamazoo/Battle Creek Intl.)",
"Kalispell, MT (FCA-Glacier Park Intl.)",
"Kamloops, BC, Canada (YKA-Kamloops)",
"Kansas City, MO (MCI-Kansas City Intl.)",
"Kearney, NE (EAR-Kearney)",
"Kelowna, BC, Canada (YLW-Ellison Field)",
"Kenai, AK (ENA-Kenai)",
"Kennewick, WA (PSC-Tri-Cities)",
"Ketchikan, AK (KTN-Ketchikan Intl.)",
"Key West, FL (EYW-Key West Intl.)",
"King Cove, AK (KVC-King Cove)",
"King Salmon, AK (AKN-King Salmon)",
"Kitchener, ON, Canada (YKF-Kitchener)",
"Klamath Falls, OR (LMT-Kingsley Field)",
"Knoxville, TN (TYS-McGhee/Tyson)",
"Kodiak, AK (ADQ-Kodiak)",
"Kona, HI (KOA-Keahole)",
"Kotzebue, AK (OTZ-Ralph Wien Memorial)",
"La Crosse, WI (LSE-La Crosse Municipal)",
"Lafayette, LA (LFT-Lafayette Regional)",
"Lake Charles, LA (LCH-Lake Charles Regional)",
"Lansing, MI (LAN-Capital City)",
"La Paz, Mexico (LAP-La Paz)",
"Laredo, TX (LRD-Laredo Intl.)",
"Las Vegas, NV (LAS-McCarran Intl.)",
"Laurel, MS (PIB-Hattiesburg/Laurel Regional)",
"Lawton, OK (LAW-Lawton Municipal)",
"Leon, Mexico (BJX-Del Bajio)",
"Lewisburg, WV (LWB-Lewisburg)",
"Lewiston, ID (LWS-Nez Perce County Regional)",
"Lewistown, MT (LWT-Lewistown)",
"Lexington, KY (LEX-Blue Grass Field)",
"Liberal, KS (LBL-Liberal)",
"Liberia, Costa Rica (LIR-Liberia)",
"Lihue, HI (LIH-Lihue/Kauai)",
"Lincoln, NE (LNK-Lincoln Municipal)",
"Little Rock, AR (LIT-Adams Field)",
"London, ON, Canada (YXU-London Municipal)",
"Long Beach, CA (LGB-Long Beach Municipal)",
"Longview, TX (GGG-Gregg County)",
"Loreto, Mexico (LTO-Loreto)",
"Los Angeles, CA (LAX-Los Angeles Intl.)",
"Los Cabos, Mexico (SJD-Los Cabos Intl.)",
"Louisville, KY (SDF-Standiford Field)",
"Lubbock, TX (LBB-Lubbock Intl.)",
"Lynchburg, VA (LYH-Lynchburg)",
"Macon, GA (MCN-Macon Lewis B Wilson)",
"Madison, WI (MSN-Dane County Regional)",
"Mammoth Lakes, CA (MMH-Mammoth Lakes)",
"Manchester, NH (MHT-Manchester)",
"Manzanillo, Mexico (ZLO-Intl. Playa de Oro)",
"Marquette, MI (MQT-Marquette County)",
"Mason City, IA (MCW-Mason City Municipal)",
"Maui, HI (OGG-Kahului/Maui)",
"Mazatlan, Mexico (MZT-Gen Rafael Buelna)",
"McAllen, TX (MFE-Miller Intl.)",
"McGrath, AK (MCG-McGrath)",
"Medford, OR (MFR-Medford/Jackson County)",
"Melbourne, FL (MLB-Melbourne Intl.)",
"Memphis, TN (MEM-Memphis Intl.)",
"Merida, Mexico (MID-Manuel Crescencio Rejon)",
"Meridian, MS (MEI-Meridian)",
"Mexico City, Mexico (MEX-Juarez Intl.)",
"Miami, FL (MIA-Miami Intl.)",
"Midland, TX (MAF-Midland Intl.)",
"Miles City, MT (MLS-Miles City)",
"Milwaukee, WI (MKE-General Mitchell Intl.)",
"Minneapolis, MN (MSP-Minneapolis/St. Paul Intl.)",
"Minot, ND (MOT-Minot Intl.)",
"Missoula, MT (MSO-Missoula County)",
"Mobile, AL (MOB-Mobile Regional)",
"Moline, IL (MLI-Quad City)",
"Monclova, Mexico (LOV-Monclova)",
"Monroe, LA (MLU-Monroe Regional)",
"Monterey, CA (MRY-Monterey Peninsula)",
"Monterrey, Mexico (MTY-Gen Mariano Escobedo)",
"Montgomery, AL (MGM-Dannelly Field)",
"Montreal, QC, Canada (YUL-Dorval)",
"Montrose, CO (MTJ-County)",
"Morelia, Mexico (MLM-Morelia)",
"Moscow, ID (PUW-Pullman/Moscow Regional)",
"Muscle Shoals, AL (MSL-Muscle Shoals Regional)",
"Muskegon, MI (MKG-Muskegon County)",
"Myrtle Beach, SC (MYR-Myrtle Beach Jetport)",
"Nantucket, MA (ACK-Nantucket)",
"Naples, FL (APF-Naples)",
"Nashville, TN (BNA-Nashville Intl.)",
"Nelson Lagoon, AK (NLG-Nelson Lagoon)",
"Newark, NJ (EWR-Newark Intl.)",
"New Bern, NC (EWN-New Bern)",
"Newburgh, NY (SWF-Stewart)",
"New Haven, CT (HVN-New Haven)",
"New Orleans, LA (MSY-New Orleans Intl.)",
"New Stuyahok, AK (KNW-New Stuyahok)",
"New York, NY (All Airports)",
"New York, NY (EWR-Newark Intl.)",
"New York, NY (JFK-Kennedy)",
"New York, NY (LGA-LaGuardia)",
"Nome, AK (OME-Nome)",
"Norfolk, VA (ORF-Norfolk Intl.)",
"North Bend, OR (OTH-North Bend Municipal)",
"North Platte, NE (LBF-North Platte)",
"Oakland, CA (OAK-Oakland Intl.)",
"Oaxaca, Mexico (OAX-Oaxaca)",
"Oklahoma City, OK (OKC-Will Rogers World)",
"Omaha, NE (OMA-Eppley Field)",
"Ontario, CA (ONT-Ontario Intl.)",
"Orange County, CA (SNA-Santa Ana)",
"Orlando, FL (MCO-Orlando Intl.)",
"Ottawa, ON, Canada (YOW-Ottawa Intl.)",
"Paducah, KY (PAH-Barkley Regional)",
"Palm Springs, CA (PSP-Palm Springs International Airport)",
"Panama City, FL (ECP-Bay County)",
"Panama City, FL (PFN-Bay County)",
"Pasco, WA (PSC-Tri-Cities)",
"Pellston, MI (PLN-Emmet County/Mackinac Isl.)",
"Pendleton, OR (PDT-Eastern Oregon Regional)",
"Pensacola, FL (PNS-Pensacola Regional)",
"Peoria, IL (PIA-Greater Peoria)",
"Petersburg, AK (PSG-James A. Johnson)",
"Philadelphia, PA (PHL-Philadelphia Intl.)",
"Phoenix, AZ (PHX-Sky Harbor Intl.)",
"Pierre, SD (PIR-Pierre Regional)",
"Pittsburgh, PA (PIT-Greater Pittsburgh Intl.)",
"Pocatello, ID (PIH-Pocatello Regional)",
"Portland, ME (PWM-Intl. Jet Port)",
"Portland, OR (PDX-Portland Intl.)",
"Port Moller, AK (PML-Port Moller)",
"Providence, RI (PVD-T.F. Green State)",
"Prudhoe Bay, AK (SCC-Deadhorse)",
"Puebla, Mexico (PBC-Puebla)",
"Puerto Vallarta, Mexico (PVR-Gustavo Diaz Ordaz)",
"Pullman, WA (PUW-Pullman/Moscow Regional)",
"Quebec, QC, Canada (YQB-Quebec)",
"Raleigh, NC (RDU-Raleigh Durham Intl.)",
"Rapid City, SD (RAP-Rapid City Regional)",
"Redding, CA (RDD-Redding Municipal)",
"Redmond, OR (RDM-Bend/Redmond/Roberts Field)",
"Regina, SK, Canada (YQR-Regina)",
"Reno, NV (RNO-Reno/Tahoe Intl.)",
"Rhinelander, WI (RHI-Oneida County)",
"Richmond, VA (RIC-Richmond Intl.)",
"Riviera Nayarit, Mexico (PVR-Gustavo Diaz Ordaz)",
"Roanoke, VA (ROA-Roanoke Regional)",
"Rochester, MN (RST-Rochester Intl.)",
"Rochester, NY (ROC-Greater Rochester Intl.)",
"Sacramento, CA (SMF-Metropolitan)",
"Sacramento, CA (SMF-Sacramento Intl.)",
"Saginaw, MI (MBS-Tri-City)",
"Salisbury-Ocean City, MD (SBY-Salisbury-Ocean City)",
"Saltillo, Mexico (SLW-Saltillo)",
"Salt Lake City, UT (SLC-Salt Lake City Intl.)",
"San Angelo, TX (SJT-Mathis Field)",
"San Antonio, TX (SAT-San Antonio Intl.)",
"San Diego, CA (SAN-Lindbergh Field)",
"Sand Point, AK (SDP-Sand Point)",
"San Francisco, CA (SFO-San Francisco Intl.)",
"San Jose, CA (SJC-San Jose Intl.)",
"San Jose, Costa Rica (SJO-San Jose Juan Santamaria)",
"San Jose del Cabo, Mexico (SJD-Los Cabos Intl.)",
"San Luis Obispo, CA (SBP-San Luis Obispo)",
"San Luis Potosi, Mexico (SLP-San Luis Potosi)",
"Santa Ana, CA (SNA-Santa Ana)",
"Santa Barbara, CA (SBA-Santa Barbara Municipal)",
"Santa Rosa, CA (STS-Santa Rosa)",
"Sarasota, FL (SRQ-Sarasota/Bradenton)",
"Saskatoon, SK, Canada (YXE-Saskatoon)",
"Sault Ste Marie, MI (CIU-Chippewa County Intl.)",
"Savannah, GA (SAV-Savannah Intl.)",
"Scottsbluff, NE (BFF-Scottsbluff)",
"Seattle, WA (SEA-Seattle/Tacoma Intl.)",
"Shreveport, LA (SHV-Shreveport Regional)",
"Sidney, MT (SDY-Sidney)",
"Sioux City, IA (SUX-Sioux Gateway)",
"Sioux Falls, SD (FSD-Joe Foss Field)",
"Sitka, AK (SIT-Sitka)",
"Sonoma County, CA (STS-Santa Rosa)",
"South Bend, IN (SBN-Michiana Regional)",
"Spartanburg, SC (GSP-Spartanburg)",
"Spokane, WA (GEG-Spokane Intl.)",
"Springfield, MO (SGF-Springfield Branson Regional)",
"State College, PA (SCE-University Park)",
"St. Cloud, MN (STC-St. Cloud Municipal)",
"Steamboat Springs, CO (HDN-Hayden)",
"St. George Island, AK (STG-St. George Island)",
"St. George, UT (SGU-St. George)",
"St. Louis, MO (STL-Lambert/St. Louis Intl.)",
"St. Paul Island, AK (SNP-St. Paul Island)",
"Sun Valley, ID (SUN-Friedman Memorial)",
"Syracuse, NY (SYR-Hancock Intl.)",
"Tallahassee, FL (TLH-Tallahassee Regional)",
"Tampa, FL (TPA-Tampa Intl.)",
"Tampico, Mexico (TAM-Gen. F. Javier Mina)",
"Texarkana, AR (TXK-Texarkana Regional)",
"Thief River Falls, MN (TVF-Thief River Falls Regional)",
"Thunder Bay, ON, Canada (YQT-Thunder Bay)",
"Toledo, OH (TOL-Toledo Express)",
"Toluca, Mexico (TLC-Toluca)",
"Toronto, ON, Canada (YYZ-Pearson)",
"Torreon, Mexico (TRC-Torreon)",
"Traverse City, MI (TVC-Cherry Capital)",
"Tri-City, TN (TRI-Tri-City Regional)",
"Tucson, AZ (TUS-Tucson Intl.)",
"Tulsa, OK (TUL-Tulsa Intl.)",
"Tupelo, MS (TUP-C.D. Lemons Municipal)",
"Twin Falls, ID (TWF-Twin Falls)",
"Tyler, TX (TYR-Pounds Field)",
"Unalakleet, AK (UNK-Unalakleet)",
"Urbana, IL (CMI-University Of Illinois/Willard)",
"Vail, CO (EGE-Eagle County)",
"Valdez, AK (VDZ-Valdez)",
"Valdosta, GA (VLD-Valdosta Regional)",
"Vancouver, BC, Canada (YVR-Vancouver Intl.)",
"Veracruz, Mexico (VER-Las Bajadas)",
"Victoria, BC, Canada (YYJ-Victoria)",
"Victoria, TX (VCT-County Foster)",
"Villahermosa, Mexico (VSA-Villahermosa)",
"Waco, TX (ACT-Waco Regional)",
"Walla Walla, WA (ALW-Walla Walla Regional)",
"Washington, DC (All Airports)",
"Washington, DC (BWI-Baltimore Washington)",
"Washington, DC (DCA-Reagan National)",
"Washington, DC (IAD-Dulles)",
"Waterloo, IA (ALO-Waterloo Municipal)",
"Watertown, SD (ATY-Watertown Municipal)",
"Wausau, WI (CWA-Cen. WI Regional)",
"Wenatchee, WA (EAT-Pangborn Field)",
"West Palm Beach, FL (PBI-Palm Beach Intl.)",
"West Yellowstone, MT (WYS-West Yellowstone)",
"White Plains, NY (HPN-Westchester Co.)",
"Wichita Falls, TX (SPS-Sheppard Air Force Base)",
"Wichita, KS (ICT-Continent)",
"Wichita, KS (ICT-Dwight D. Eisenhower National)",
"Wilkes-Barre, PA (AVP-Wilkes-Barre Scranton Intl.)",
"Wilmington, NC (ILM-Wilmington)",
"Winnipeg, MB, Canada (YWG-Winnipeg Intl.)",
"Wolf Point, MT (OLF-Wolf Point)",
"Wrangell, AK (WRG-Wrangell)",
"Yakima, WA (YKM-Yakima Air Terminal)",
"Yakutat, AK (YAK-Yakutat)",
"Yosemite, CA (FAT-Fresno Air Terminal)",
"Yosemite, CA (MMH-Mammoth Lakes)",
"Zihuatanejo, Mexico (ZIH-Ixtapa/Zihuatanejo Intl.)"
]


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from typing import Any
from unittest import mock
from absl.testing import absltest
from android_world import constants
from android_world import episode_runner
from android_world.agents import base_agent
from android_world.env import interface


class FakeEnvironmentInteractingAgent(base_agent.EnvironmentInteractingAgent):

  def __init__(
      self,
      env: interface.AsyncAndroidEnv,
      name: str,
      return_done: bool = False,
      return_data: dict[str, Any] | None = None,
  ):
    super().__init__(env, name)
    self.return_done = return_done
    self.return_data = return_data
    self.call_count = 0
    if return_data is None:
      self.return_data = {}

  def step(self, goal: str) -> base_agent.AgentInteractionResult:
    self.call_count += 1
    return base_agent.AgentInteractionResult(
        done=self.return_done, data=self.return_data
    )


class EpisodeRunnerTest(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.env = mock.create_autospec(interface.AsyncAndroidEnv)

  @mock.patch.object(base_agent, 'EnvironmentInteractingAgent')
  def test_max_steps_reached(self, mock_agent_class):
    mock_agent = FakeEnvironmentInteractingAgent(self.env, 'fake_agent')
    mock_agent_class.return_value = mock_agent

    result = episode_runner.run_episode('test_goal', mock_agent, max_n_steps=2)

    self.assertFalse(result.done)
    self.assertLen(result.step_data[constants.STEP_NUMBER], 2)
    self.assertEqual(mock_agent.call_count, 2)

  @mock.patch.object(base_agent, 'EnvironmentInteractingAgent')
  def test_termination_fn_early_termination(self, mock_agent_class):
    mock_agent = FakeEnvironmentInteractingAgent(self.env, 'fake_agent')
    mock_agent_class.return_value = mock_agent

    def termination_fn(env):
      del env
      return True

    result = episode_runner.run_episode(
        'test_goal', mock_agent, termination_fn=termination_fn
    )

    self.assertTrue(result.done)
    self.assertEqual(mock_agent.call_count, 1)
    self.assertLen(result.step_data[constants.STEP_NUMBER], 1)

  @mock.patch.object(base_agent, 'EnvironmentInteractingAgent')
  def test_start_on_home_screen(self, mock_agent_class):
    mock_agent = FakeEnvironmentInteractingAgent(self.env, 'fake_agent')
    mock_agent_class.return_value = mock_agent

    episode_runner.run_episode(
        'test_goal', mock_agent, start_on_home_screen=True
    )

    mock_agent.env.reset.assert_called_with(go_home=True)


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import tempfile
from absl.testing import absltest
from android_world import checkpointer


class CheckpointerTest(absltest.TestCase):

  def setUp(self) -> None:
    super().setUp()
    self.temp_dir = tempfile.TemporaryDirectory()
    self.checkpointer = checkpointer.IncrementalCheckpointer(
        directory=self.temp_dir.name
    )

  def tearDown(self) -> None:
    super().tearDown()
    self.temp_dir.cleanup()

  def test_save_and_load_valid_data(self) -> None:
    """Tests if save and load work as expected with valid data."""
    task_group1 = [{'key': 'value1'}]
    task_group2 = [{'key': 'value2'}]
    self.checkpointer.save_episodes(task_group1, 'task_group1')
    self.checkpointer.save_episodes(task_group2, 'task_group2')
    loaded_data = self.checkpointer.load()
    self.assertCountEqual(loaded_data, task_group1 + task_group2)

  def test_load_empty_directory(self) -> None:
    """Tests if loading an empty directory returns empty data."""
    loaded_data = self.checkpointer.load()
    self.assertEqual([], loaded_data)

  def test_overwrite_existing_task_group(self) -> None:
    """Tests if save overwrites an existing task group."""
    initial_data = [{'initial_key': 'initial_value'}]
    self.checkpointer.save_episodes(initial_data, 'task_group')
    new_data = [{'new_key': 'new_value'}]
    self.checkpointer.save_episodes(new_data, 'task_group')
    loaded_data = self.checkpointer.load()
    self.assertEqual(new_data, loaded_data)

  def test_save_and_load_multiple_task_groups(self) -> None:
    """Tests saving and loading multiple task groups."""
    task_groups = [
        ([{'key1': 'value1'}], 'task_group1'),
        ([{'key2': 'value2'}], 'task_group2'),
        ([{'key3': 'value3'}], 'task_group3'),
    ]
    for task_group, task_group_id in task_groups:
      self.checkpointer.save_episodes(task_group, task_group_id)
    loaded_data = self.checkpointer.load()
    expected_data = [data for data, _ in task_groups]
    self.assertCountEqual(
        loaded_data, [item for sublist in expected_data for item in sublist]  # pylint: disable=g-complex-comprehension
    )

  def test_load_invalid_file(self) -> None:
    """Tests if loading an invalid file is gracefully handled."""
    invalid_file = os.path.join(self.temp_dir.name, 'invalid.txt')
    with open(invalid_file, 'w') as f:
      f.write('invalid data')
    loaded_data = self.checkpointer.load()
    self.assertEqual([], loaded_data)

  def test_load_fields(self) -> None:
    """Tests if loading fields works as expected."""
    task_group = [{'key1': 'value1', 'key2': 'value2'}]
    self.checkpointer.save_episodes(task_group, 'task_group')
    loaded_data = self.checkpointer.load(fields=['key1'])
    expected_data = [{'key1': 'value1'}]
    self.assertEqual(expected_data, loaded_data)


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Registers the task classes."""

import types
from typing import Any

from android_world.task_evals import task_eval
from android_world.task_evals.composite import markor_sms
from android_world.task_evals.composite import system as system_composite
from android_world.task_evals.information_retrieval import information_retrieval
from android_world.task_evals.information_retrieval import information_retrieval_registry
from android_world.task_evals.miniwob import miniwob_registry
from android_world.task_evals.single import audio_recorder
from android_world.task_evals.single import browser
from android_world.task_evals.single import camera
from android_world.task_evals.single import clock
from android_world.task_evals.single import contacts
from android_world.task_evals.single import expense
from android_world.task_evals.single import files
from android_world.task_evals.single import markor
from android_world.task_evals.single import osmand
from android_world.task_evals.single import recipe
from android_world.task_evals.single import retro_music
from android_world.task_evals.single import simple_draw_pro
from android_world.task_evals.single import simple_gallery_pro
from android_world.task_evals.single import sms
from android_world.task_evals.single import system
from android_world.task_evals.single import vlc
from android_world.task_evals.single.calendar import calendar


def get_information_retrieval_task_path() -> None:
  return None


def get_families() -> list[str]:
  return [
      TaskRegistry.ANDROID_WORLD_FAMILY,
      TaskRegistry.ANDROID_FAMILY,
      TaskRegistry.MINIWOB_FAMILY,
      TaskRegistry.MINIWOB_FAMILY_SUBSET,
      TaskRegistry.INFORMATION_RETRIEVAL_FAMILY,
  ]


class TaskRegistry:
  """Registry of tasks."""

  # The AndroidWorld family.
  ANDROID_WORLD_FAMILY = 'android_world'  # Entire suite.
  ANDROID_FAMILY = 'android'  # Subset.
  INFORMATION_RETRIEVAL_FAMILY = 'information_retrieval'  # Subset.

  # The MiniWoB family.
  MINIWOB_FAMILY = 'miniwob'
  MINIWOB_FAMILY_SUBSET = 'miniwob_subset'

  # Task registries; they contain a mapping from each task name to its class,
  # to construct instances of a task.
  ANDROID_TASK_REGISTRY = {}
  INFORMATION_RETRIEVAL_TASK_REGISTRY = (
      information_retrieval_registry.InformationRetrievalRegistry[
          information_retrieval.InformationRetrieval
      ](filename=get_information_retrieval_task_path()).registry
  )

  MINIWOB_TASK_REGISTRY = miniwob_registry.TASK_REGISTRY

  def get_registry(self, family: str) -> Any:
    """Gets the task registry for the given family.

    Args:
      family: The family.

    Returns:
      Task registry.

    Raises:
      ValueError: If provided family doesn't exist.
    """
    if family == self.ANDROID_WORLD_FAMILY:
      return {
          **self.ANDROID_TASK_REGISTRY,
          **self.INFORMATION_RETRIEVAL_TASK_REGISTRY,
      }
    elif family == self.ANDROID_FAMILY:
      return self.ANDROID_TASK_REGISTRY
    elif family == self.MINIWOB_FAMILY:
      return self.MINIWOB_TASK_REGISTRY
    elif family == self.MINIWOB_FAMILY_SUBSET:
      return miniwob_registry.TASK_REGISTRY_SUBSET
    elif family == self.INFORMATION_RETRIEVAL_FAMILY:
      return self.INFORMATION_RETRIEVAL_TASK_REGISTRY
    else:
      raise ValueError(f'Unsupported family: {family}')

  _TASKS = (
      # keep-sorted start
      audio_recorder.AudioRecorderRecordAudio,
      audio_recorder.AudioRecorderRecordAudioWithFileName,
      browser.BrowserDraw,
      browser.BrowserMaze,
      browser.BrowserMultiply,
      calendar.SimpleCalendarAddOneEvent,
      calendar.SimpleCalendarAddOneEventInTwoWeeks,
      calendar.SimpleCalendarAddOneEventRelativeDay,
      calendar.SimpleCalendarAddOneEventTomorrow,
      calendar.SimpleCalendarAddRepeatingEvent,
      calendar.SimpleCalendarDeleteEvents,
      calendar.SimpleCalendarDeleteEventsOnRelativeDay,
      calendar.SimpleCalendarDeleteOneEvent,
      camera.CameraTakePhoto,
      camera.CameraTakeVideo,
      clock.ClockStopWatchPausedVerify,
      clock.ClockStopWatchRunning,
      clock.ClockTimerEntry,
      contacts.ContactsAddContact,
      contacts.ContactsNewContactDraft,
      expense.ExpenseAddMultiple,
      expense.ExpenseAddMultipleFromGallery,
      expense.ExpenseAddMultipleFromMarkor,
      expense.ExpenseAddSingle,
      expense.ExpenseDeleteDuplicates,
      expense.ExpenseDeleteDuplicates2,
      expense.ExpenseDeleteMultiple,
      expense.ExpenseDeleteMultiple2,
      expense.ExpenseDeleteSingle,
      files.FilesDeleteFile,
      files.FilesMoveFile,
      markor.MarkorAddNoteHeader,
      markor.MarkorChangeNoteContent,
      markor.MarkorCreateFolder,
      markor.MarkorCreateNote,
      markor.MarkorCreateNoteFromClipboard,
      markor.MarkorDeleteAllNotes,
      markor.MarkorDeleteNewestNote,
      markor.MarkorDeleteNote,
      markor.MarkorEditNote,
      markor.MarkorMergeNotes,
      markor.MarkorMoveNote,
      markor.MarkorTranscribeReceipt,
      markor.MarkorTranscribeVideo,
      # Markor composite tasks.
      markor_sms.MarkorCreateNoteAndSms,
      # OsmAnd.
      osmand.OsmAndFavorite,
      osmand.OsmAndMarker,
      osmand.OsmAndTrack,
      recipe.RecipeAddMultipleRecipes,
      recipe.RecipeAddMultipleRecipesFromImage,
      recipe.RecipeAddMultipleRecipesFromMarkor,
      recipe.RecipeAddMultipleRecipesFromMarkor2,
      recipe.RecipeAddSingleRecipe,
      recipe.RecipeDeleteDuplicateRecipes,
      recipe.RecipeDeleteDuplicateRecipes2,
      recipe.RecipeDeleteDuplicateRecipes3,
      recipe.RecipeDeleteMultipleRecipes,
      recipe.RecipeDeleteMultipleRecipesWithConstraint,
      recipe.RecipeDeleteMultipleRecipesWithNoise,
      recipe.RecipeDeleteSingleRecipe,
      recipe.RecipeDeleteSingleWithRecipeWithNoise,
      retro_music.RetroCreatePlaylist,
      retro_music.RetroPlayingQueue,
      retro_music.RetroPlaylistDuration,
      retro_music.RetroSavePlaylist,
      simple_draw_pro.SimpleDrawProCreateDrawing,
      simple_gallery_pro.SaveCopyOfReceiptTaskEval,
      sms.SimpleSmsReply,
      sms.SimpleSmsReplyMostRecent,
      sms.SimpleSmsResend,
      sms.SimpleSmsSend,
      sms.SimpleSmsSendClipboardContent,
      sms.SimpleSmsSendReceivedAddress,
      system.OpenAppTaskEval,
      system.SystemBluetoothTurnOff,
      system.SystemBluetoothTurnOffVerify,
      system.SystemBluetoothTurnOn,
      system.SystemBluetoothTurnOnVerify,
      system.SystemBrightnessMax,
      system.SystemBrightnessMaxVerify,
      system.SystemBrightnessMin,
      system.SystemBrightnessMinVerify,
      system.SystemCopyToClipboard,
      system.SystemWifiTurnOff,
      system.SystemWifiTurnOffVerify,
      system.SystemWifiTurnOn,
      system.SystemWifiTurnOnVerify,
      system_composite.TurnOffWifiAndTurnOnBluetooth,
      system_composite.TurnOnWifiAndOpenApp,
      # keep-sorted end
      # VLC media player tasks.
      vlc.VlcCreatePlaylist,
      vlc.VlcCreateTwoPlaylists,
      # Phone operations are flaky and the root cause is not known. Disabling
      # until resolution.
      # phone.MarkorCallApartment,
      # phone.PhoneAnswerCall,
      # phone.PhoneCallTextSender,
      # phone.PhoneMakeCall,
      # phone.PhoneRedialNumber,
      # phone.PhoneReturnMissedCall,
      # sms.SimpleSmsSendAfterCall,
  )

  def register_task(
      self, task_registry: dict[Any, Any], task_class: type[task_eval.TaskEval]
  ) -> None:
    """Registers the task class.

    Args:
      task_registry: The registry to register the task in.
      task_class: The class to register.
    """
    task_registry[task_class.__name__] = task_class

  def __init__(self):
    for task in self._TASKS:
      self.register_task(self.ANDROID_TASK_REGISTRY, task)

  # Add names with "." notation for autocomplete in Colab.
  names = types.SimpleNamespace(**{
      k: k
      for k in {
          **ANDROID_TASK_REGISTRY,
          **INFORMATION_RETRIEVAL_TASK_REGISTRY,
          **MINIWOB_TASK_REGISTRY,
          **MINIWOB_TASK_REGISTRY,
      }
  })


[
  {
    "task_name": "AudioRecorderRecordAudio",
    "task_template": "Record an audio clip using Audio Recorder app and save it.",
    "difficulty": "easy",
    "tags": ["requires_setup"],
    "optimal_steps": "6"
  },
  {
    "task_name": "AudioRecorderRecordAudioWithFileName",
    "task_template": "Record an audio clip and save it with name \"{file_name}\" using Audio Recorder app.",
    "difficulty": "easy",
    "tags": ["data_entry", "complex_ui_understanding", "parameterized"],
    "optimal_steps": "10"
  },
  {
    "task_name": "BrowserDraw",
    "task_template": "Open the file task.html in Downloads in the file manager; when prompted open it with Chrome. Then create a drawing using the three colors shown at the top and hit submit.",
    "difficulty": "easy",
    "tags": ["game_playing", "parameterized"],
    "optimal_steps": "5"
  },
  {
    "task_name": "BrowserMaze",
    "task_template": "Open the file task.html in Downloads in the file manager; when prompted open it with Chrome. Then navigate the X to the bottom-right cell, by using the direction buttons.",
    "difficulty": "easy",
    "tags": [
      "game_playing",
      "multi_app",
      "complex_ui_understanding",
      "memorization",
      "parameterized"
    ],
    "optimal_steps": "9"
  },
  {
    "task_name": "BrowserMultiply",
    "task_template": "Open the file task.html in Downloads in the file manager; when prompted open it with Chrome. Then click the button 5 times, remember the numbers displayed, and enter their product in the form.",
    "difficulty": "hard",
    "tags": ["math_counting", "memorization", "screen_reading"],
    "optimal_steps": "11"
  },
  {
    "task_name": "CameraTakePhoto",
    "task_template": "Take one photo.",
    "difficulty": "easy",
    "tags": [""],
    "optimal_steps": "2"
  },
  {
    "task_name": "CameraTakeVideo",
    "task_template": "Take one video.",
    "difficulty": "medium",
    "tags": [""],
    "optimal_steps": "3"
  },
  {
    "task_name": "ClockStopWatchPausedVerify",
    "task_template": "Pause the stopwatch.",
    "difficulty": "easy",
    "tags": ["verification"],
    "optimal_steps": "1"
  },
  {
    "task_name": "ClockStopWatchRunning",
    "task_template": "Run the stopwatch.",
    "difficulty": "easy",
    "tags": [""],
    "optimal_steps": "3"
  },
  {
    "task_name": "ClockTimerEntry",
    "task_template": "Create a timer with {hours} hours, {minutes} minutes, and {seconds} seconds. Do not start the timer.",
    "difficulty": "easy",
    "tags": ["data_entry", "parameterized"],
    "optimal_steps": "3"
  },
  {
    "task_name": "ContactsAddContact",
    "task_template": "Create a new contact for {name}. Their number is {number}.",
    "difficulty": "easy",
    "tags": ["data_entry", "parameterized"],
    "optimal_steps": "5"
  },
  {
    "task_name": "ContactsNewContactDraft",
    "task_template": "Go to the new contact screen and enter the following details: First Name: {first}, Last Name: {last}, Phone: {phone}, Phone Label: {phone_label}. Do NOT hit save.",
    "difficulty": "easy",
    "tags": ["screen_reading", "data_entry"],
    "optimal_steps": "6"
  },
  {
    "task_name": "ExpenseAddMultiple",
    "task_template": "Add the following expenses into the arduia pro expense: {expenses}",
    "difficulty": "medium",
    "tags": ["data_entry", "parameterized"],
    "optimal_steps": "20"
  },
  {
    "task_name": "ExpenseAddMultipleFromGallery",
    "task_template": "Add the expenses from expenses.jpg in Simple Gallery Pro to pro expense.",
    "difficulty": "hard",
    "tags": [
      "multi_app",
      "screen_reading",
      "data_entry",
      "information_retrieval",
      "parameterized"
    ],
    "optimal_steps": "10"
  },
  {
    "task_name": "ExpenseAddMultipleFromMarkor",
    "task_template": "Go through the transactions in my_expenses.txt in Markor. Log the reimbursable transactions in the arduia pro expense.",
    "difficulty": "hard",
    "tags": [
      "transcription",
      "repetition",
      "multi_app",
      "data_entry",
      "memorization",
      "parameterized"
    ],
    "optimal_steps": "15"
  },
  {
    "task_name": "ExpenseAddSingle",
    "task_template": "Add the following expenses into the arduia pro expense: {expense}",
    "difficulty": "easy",
    "tags": ["parameterized", "data_entry", "search"],
    "optimal_steps": "6"
  },
  {
    "task_name": "ExpenseDeleteDuplicates",
    "task_template": "Delete all but one of any expenses in arduia pro expense that are exact duplicates, ensuring at least one instance of each unique expense remains.",
    "difficulty": "medium",
    "tags": ["data_edit", "parameterized"],
    "optimal_steps": "6"
  },
  {
    "task_name": "ExpenseDeleteDuplicates2",
    "task_template": "Delete all but one of any expenses in arduia pro expense that are exact duplicates, ensuring at least one instance of each unique expense remains.",
    "difficulty": "medium",
    "tags": ["data_edit", "requires_setup", "parameterized"],
    "optimal_steps": "9"
  },
  {
    "task_name": "ExpenseDeleteMultiple",
    "task_template": "Delete the following expenses from arduia pro expense: {expenses}.",
    "difficulty": "easy",
    "tags": ["data_edit", "parameterized"],
    "optimal_steps": "10"
  },
  {
    "task_name": "ExpenseDeleteMultiple2",
    "task_template": "Delete the following expenses from arduia pro expense: {expenses}.",
    "difficulty": "hard",
    "tags": ["screen_reading", "parameterized"],
    "optimal_steps": "17"
  },
  {
    "task_name": "ExpenseDeleteSingle",
    "task_template": "Delete the following expenses from arduia pro expense: {expense}.",
    "difficulty": "easy",
    "tags": ["screen_reading", "parameterized"],
    "optimal_steps": "3"
  },
  {
    "task_name": "FilesDeleteFile",
    "task_template": "Delete the file {file_name} from the Android filesystem located in the {subfolder} folder within the sdk_gphone_x86_64 storage area.",
    "difficulty": "medium",
    "tags": ["data_edit", "parameterized"],
    "optimal_steps": "4"
  },
  {
    "task_name": "FilesMoveFile",
    "task_template": "Move the file {file_name} from {source_folder} within the sdk_gphone_x86_64 storage area to the {destination_folder} within the same sdk_gphone_x86_64 storage area in the Android filesystem.",
    "difficulty": "medium",
    "tags": ["search", "screen_reading", "parameterized"],
    "optimal_steps": "10"
  },
  {
    "task_name": "MarkorAddNoteHeader",
    "task_template": "Update the Markor note {file_name} by adding the following text, along with a new blank line before the existing content: \"{header}\".",
    "difficulty": "medium",
    "tags": ["data_entry", "parameterized"],
    "optimal_steps": "6"
  },
  {
    "task_name": "MarkorChangeNoteContent",
    "task_template": "Update the content of {file_name} to \"{updated_content}\" in Markor.",
    "difficulty": "medium",
    "tags": ["data_entry", "requires_setup", "parameterized"],
    "optimal_steps": "5"
  },
  {
    "task_name": "MarkorCreateFolder",
    "task_template": "Create a new folder in Markor named {folder_name}.",
    "difficulty": "easy",
    "tags": ["data_entry", "parameterized"],
    "optimal_steps": "4"
  },
  {
    "task_name": "MarkorCreateNote",
    "task_template": "Create a new note in Markor named {file_name} with the following text: {text}",
    "difficulty": "medium",
    "tags": ["data_entry", "parameterized"],
    "optimal_steps": "8"
  },
  {
    "task_name": "MarkorCreateNoteAndSms",
    "task_template": "Create a new note in Markor named {file_name} with the following text: {text}. Share the entire content of the note with the phone number {number} via SMS using Simple SMS Messenger",
    "difficulty": "hard",
    "tags": ["multi_app", "data_entry", "parameterized"],
    "optimal_steps": "9"
  },
  {
    "task_name": "MarkorCreateNoteFromClipboard",
    "task_template": "Create a note in Markor named {file_name}. Perform a paste operation in the note and save the note.",
    "difficulty": "medium",
    "tags": ["data_entry", "parameterized"],
    "optimal_steps": "7"
  },
  {
    "task_name": "MarkorDeleteAllNotes",
    "task_template": "Delete all my notes in Markor.",
    "difficulty": "easy",
    "tags": ["data_edit", "repetition", "parameterized"],
    "optimal_steps": "7"
  },
  {
    "task_name": "MarkorDeleteNewestNote",
    "task_template": "Delete the newest note in Markor.",
    "difficulty": "easy",
    "tags": ["data_edit", "parameterized"],
    "optimal_steps": "4"
  },
  {
    "task_name": "MarkorDeleteNote",
    "task_template": "Delete the note in Markor named {file_name}.",
    "difficulty": "easy",
    "tags": ["data_edit", "requires_setup", "parameterized"],
    "optimal_steps": "5"
  },
  {
    "task_name": "MarkorEditNote",
    "task_template": "Edit {file_name} in Markor. Add to the top of the note {header}",
    "difficulty": "easy",
    "tags": ["data_edit", "transcription", "parameterized"],
    "optimal_steps": "4"
  },
  {
    "task_name": "MarkorMergeNotes",
    "task_template": "Merge the contents of Markor notes {file1_name}, {file2_name} and {file3_name} (in the same order) into a new Markor note named {new_file_name} and save it. Add a new line between the content of each note.",
    "difficulty": "hard",
    "tags": ["data_edit", "data_entry", "parameterized"],
    "optimal_steps": "39"
  },
  {
    "task_name": "MarkorMoveNote",
    "task_template": "In Markor, move the note {file_name} from {source_folder} to {destination_folder}.",
    "difficulty": "medium",
    "tags": ["parameterized", "complex_ui_understanding"],
    "optimal_steps": "7"
  },
  {
    "task_name": "MarkorTranscribeReceipt",
    "task_template": "Create a file in Markor, called receipt.md with the transactions from the receipt.png. Use Simple Gallery to view the receipt. Please enter transactions in csv format including the header \"Date, Item, Amount\".",
    "difficulty": "medium",
    "tags": [
      "transcription",
      "data_entry",
      "multi_app",
      "screen_reading",
      "memorization",
      "parameterized"
    ],
    "optimal_steps": "9"
  },
  {
    "task_name": "MarkorTranscribeVideo",
    "task_template": "Transcribe the contents of video {video_name} by watching it in VLC player (located in Download) and writing the sequence of strings shown on each frame to the text file {file_name} in Markor as a comma separated list. For example, if the first frame shows the text \"edna\" and the second frame shows the text \"pineapple\", then the text file should contains only the following text: \"edna, pineapple\".",
    "difficulty": "hard",
    "tags": [
      "multi_app",
      "transcription",
      "requires_setup",
      "memorization",
      "screen_reading",
      "parameterized"
    ],
    "optimal_steps": "10"
  },
  {
    "task_name": "NotesIsTodo",
    "task_template": "Is the note titled '{title}' in the Joplin app marked as a todo item? Respond with either 'True' if it is a todo or 'False' if not.",
    "difficulty": "easy",
    "tags": ["information_retrieval", "parameterized"],
    "optimal_steps": "2"
  },
  {
    "task_name": "NotesMeetingAttendeeCount",
    "task_template": "How many attendees were present in the meeting titled '{title}' in the Joplin app? Express your answer as just a single number.",
    "difficulty": "easy",
    "tags": ["search", "parameterized"],
    "optimal_steps": "3"
  },
  {
    "task_name": "NotesRecipeIngredientCount",
    "task_template": "What quantity of {ingredient} do I need for the recipe '{title}' in the Joplin app? Express your answer in the format <amount> <unit> without using abbreviations.",
    "difficulty": "easy",
    "tags": ["search", "parameterized"],
    "optimal_steps": "2"
  },
  {
    "task_name": "NotesTodoItemCount",
    "task_template": "How many to-dos do I have in the '{folder}' folder in the Joplin app? Express your answer as just a single number.",
    "difficulty": "medium",
    "tags": ["information_retrieval", "math_counting", "parameterized"],
    "optimal_steps": "5"
  },
  {
    "task_name": "OpenAppTaskEval",
    "task_template": "Open the {app_name} app. Clear any pop-ups that may appear by granting all permissions that are required.",
    "difficulty": "easy",
    "tags": ["parameterized"],
    "optimal_steps": "2"
  },
  {
    "task_name": "OsmAndFavorite",
    "task_template": "Add a favorite location marker for {location} in the OsmAnd maps app.",
    "difficulty": "medium",
    "tags": ["search", "complex_ui_understanding", "parameterized"],
    "optimal_steps": "6"
  },
  {
    "task_name": "OsmAndMarker",
    "task_template": "Add a location marker for {location} in the OsmAnd maps app.",
    "difficulty": "hard",
    "tags": ["complex_ui_understanding", "search", "parameterized"],
    "optimal_steps": "10"
  },
  {
    "task_name": "OsmAndTrack",
    "task_template": "Save a track with waypoints Ruggell, Liechtenstein, Bendern, Liechtenstein in the OsmAnd maps app in the same order as listed.",
    "difficulty": "hard",
    "tags": [
      "complex_ui_understanding",
      "search",
      "data_entry",
      "repetition",
      "parameterized"
    ],
    "optimal_steps": "60"
  },
  {
    "task_name": "RecipeAddMultipleRecipes",
    "task_template": "Add the following recipes into the Broccoli app: {recipes}",
    "difficulty": "medium",
    "tags": ["data_entry", "parameterized"],
    "optimal_steps": "34"
  },
  {
    "task_name": "RecipeAddMultipleRecipesFromImage",
    "task_template": "Add the recipes from recipes.jpg in Simple Gallery Pro to the Broccoli recipe app.",
    "difficulty": "hard",
    "tags": [
      "transcription",
      "screen_reading",
      "data_entry",
      "complex_ui_understanding",
      "parameterized"
    ],
    "optimal_steps": "13"
  },
  {
    "task_name": "RecipeAddMultipleRecipesFromMarkor",
    "task_template": "Add the recipes from recipes.txt in Markor to the Broccoli recipe app.",
    "difficulty": "hard",
    "tags": [
      "data_entry",
      "multi_app",
      "screen_reading",
      "memorization",
      "parameterized"
    ],
    "optimal_steps": "24"
  },
  {
    "task_name": "RecipeAddMultipleRecipesFromMarkor2",
    "task_template": "Add the recipes from recipes.txt in Markor that take {prep_time} to prepare into the Broccoli recipe app.",
    "difficulty": "hard",
    "tags": [
      "parameterized",
      "screen_reading",
      "complex_ui_understanding",
      "repetition",
      "multi_app",
      "data_entry",
      "information_retrieval"
    ],
    "optimal_steps": "26"
  },
  {
    "task_name": "RecipeAddSingleRecipe",
    "task_template": "Add the following recipes into the Broccoli app:\n{recipe}",
    "difficulty": "easy",
    "tags": ["data_entry", "parameterized"],
    "optimal_steps": "12"
  },
  {
    "task_name": "RecipeDeleteDuplicateRecipes",
    "task_template": "Delete all but one of any recipes in the Broccoli app that are exact duplicates, ensuring at least one instance of each unique recipe remains",
    "difficulty": "easy",
    "tags": [
      "search",
      "data_edit",
      "screen_reading",
      "repetition",
      "parameterized"
    ],
    "optimal_steps": "4"
  },
  {
    "task_name": "RecipeDeleteDuplicateRecipes2",
    "task_template": "Delete all but one of any recipes in the Broccoli app that are exact duplicates, ensuring at least one instance of each unique recipe remains",
    "difficulty": "medium",
    "tags": ["repetition", "data_edit", "parameterized"],
    "optimal_steps": "11"
  },
  {
    "task_name": "RecipeDeleteDuplicateRecipes3",
    "task_template": "Delete all but one of any recipes in the Broccoli app that are exact duplicates, ensuring at least one instance of each unique recipe remains",
    "difficulty": "medium",
    "tags": ["data_edit", "parameterized"],
    "optimal_steps": "16"
  },
  {
    "task_name": "RecipeDeleteMultipleRecipes",
    "task_template": "Delete the following recipes from Broccoli app: {titles}.",
    "difficulty": "easy",
    "tags": ["data_edit", "parameterized"],
    "optimal_steps": "12"
  },
  {
    "task_name": "RecipeDeleteMultipleRecipesWithConstraint",
    "task_template": "Delete the recipes from Broccoli app that use {ingredient} in the directions.",
    "difficulty": "hard",
    "tags": ["screen_reading", "repetition", "parameterized"],
    "optimal_steps": "20"
  },
  {
    "task_name": "RecipeDeleteMultipleRecipesWithNoise",
    "task_template": "Delete the following recipes from Broccoli app: {titles}.",
    "difficulty": "medium",
    "tags": [
      "parameterized",
      "search",
      "complex_ui_understanding",
      "repetition"
    ],
    "optimal_steps": "17"
  },
  {
    "task_name": "RecipeDeleteSingleRecipe",
    "task_template": "Delete the following recipes from Broccoli app: {titles}.",
    "difficulty": "easy",
    "tags": ["data_edit", "search", "parameterized"],
    "optimal_steps": "5"
  },
  {
    "task_name": "RecipeDeleteSingleWithRecipeWithNoise",
    "task_template": "Delete the following recipes from Broccoli app: {titles}.",
    "difficulty": "easy",
    "tags": ["search", "screen_reading", "data_edit", "parameterized"],
    "optimal_steps": "10"
  },
  {
    "task_name": "RetroCreatePlaylist",
    "task_template": "Create a playlist in Retro Music titled \"{playlist_name}\" with the following songs, in order: {names}",
    "difficulty": "medium",
    "tags": ["data_entry", "repetition", "parameterized"],
    "optimal_steps": "12"
  },
  {
    "task_name": "RetroPlayingQueue",
    "task_template": "Add the following songs, in order, {names} to my playing queue in Retro music.",
    "difficulty": "easy",
    "tags": ["parameterized"],
    "optimal_steps": "16"
  },
  {
    "task_name": "RetroPlaylistDuration",
    "task_template": "Create a playlist in Retro Music titled \"{playlist_name}\" with a duration between 45 and 50 minutes using the provided songs.",
    "difficulty": "medium",
    "tags": [
      "math_counting",
      "complex_ui_understanding",
      "repetition",
      "parameterized"
    ],
    "optimal_steps": "15"
  },
  {
    "task_name": "RetroSavePlaylist",
    "task_template": "Create a playlist in Retro Music titled \"{playlist_name}\" with the following songs, in order: {names}. Then export the playlist to the Downloads directory on the device.",
    "difficulty": "hard",
    "tags": ["search", "repetition", "parameterized"],
    "optimal_steps": "25"
  },
  {
    "task_name": "SaveCopyOfReceiptTaskEval",
    "task_template": "Copy {file_name} in DCIM and save a copy with the same name in Download",
    "difficulty": "hard",
    "tags": ["parameterized", "complex_ui_understanding"],
    "optimal_steps": "8"
  },
  {
    "task_name": "SimpleCalendarAddOneEvent",
    "task_template": "In Simple Calendar Pro, create a calendar event on {year}-{month}-{day} at {hour}h with the title '{event_title}' and the description '{event_description}'. The event should last for {duration_mins} mins.",
    "difficulty": "hard",
    "tags": ["data_entry", "complex_ui_understanding", "parameterized"],
    "optimal_steps": "17"
  },
  {
    "task_name": "SimpleCalendarAddOneEventInTwoWeeks",
    "task_template": "In Simple Calendar Pro, create a calendar event in two weeks from today at {hour}h with the title '{event_title}' and the description '{event_description}'. The event should last for {duration_mins} mins.",
    "difficulty": "medium",
    "tags": ["data_entry", "math_counting", "parameterized"],
    "optimal_steps": "10"
  },
  {
    "task_name": "SimpleCalendarAddOneEventRelativeDay",
    "task_template": "In Simple Calendar Pro, create a calendar event for this {day_of_week} at {hour}h with the title '{event_title}' and the description '{event_description}'. The event should last for {duration_mins} mins.",
    "difficulty": "easy",
    "tags": ["data_entry", "parameterized"],
    "optimal_steps": "17"
  },
  {
    "task_name": "SimpleCalendarAddOneEventTomorrow",
    "task_template": "In Simple Calendar Pro, create a calendar event for tomorrow at {hour}h with the title '{event_title}' and the description '{event_description}'. The event should last for {duration_mins} mins.",
    "difficulty": "easy",
    "tags": ["data_entry", "parameterized"],
    "optimal_steps": "13"
  },
  {
    "task_name": "SimpleCalendarAddRepeatingEvent",
    "task_template": "In Simple Calendar Pro, create a recurring calendar event titled '{event_title}' starting on {year}-{month}-{day} at {hour}h. The event recurs {repeat_rule}, forever, and lasts for {duration_mins} minutes each occurrence. The event description should be '{event_description}'.",
    "difficulty": "easy",
    "tags": ["data_entry", "complex_ui_understanding", "parameterized"],
    "optimal_steps": "14"
  },
  {
    "task_name": "SimpleCalendarAnyEventsOnDate",
    "task_template": "Do I have any events {date} in Simple Calendar Pro? Answer with the titles only. If there are multiples titles, format your answer in a comma separated list.",
    "difficulty": "easy",
    "tags": ["information_retrieval", "parameterized"],
    "optimal_steps": "4"
  },
  {
    "task_name": "SimpleCalendarDeleteEvents",
    "task_template": "In Simple Calendar Pro, delete all the calendar events on {year}-{month}-{day}",
    "difficulty": "easy",
    "tags": ["parameterized", "data_edit"],
    "optimal_steps": "7"
  },
  {
    "task_name": "SimpleCalendarDeleteEventsOnRelativeDay",
    "task_template": "In Simple Calendar Pro, delete all events scheduled for this {day_of_week}.",
    "difficulty": "medium",
    "tags": ["data_edit", "parameterized"],
    "optimal_steps": "6"
  },
  {
    "task_name": "SimpleCalendarDeleteOneEvent",
    "task_template": "In Simple Calendar Pro, delete the calendar event on {year}-{month}-{day} at {hour}h with the title '{event_title}'",
    "difficulty": "easy",
    "tags": ["data_edit", "complex_ui_understanding", "parameterized"],
    "optimal_steps": "6"
  },
  {
    "task_name": "SimpleCalendarEventOnDateAtTime",
    "task_template": "What is on my schedule for {date} at {time} in Simple Calendar Pro? Answer with the titles only. If there are multiples titles, format your answer in a comma separated list.",
    "difficulty": "medium",
    "tags": ["information_retrieval", "parameterized"],
    "optimal_steps": "3"
  },
  {
    "task_name": "SimpleCalendarEventsInNextWeek",
    "task_template": "What events do I have in the next week in Simple Calendar Pro? Answer with the titles only. If there are multiples titles, format your answer in a comma separated list.",
    "difficulty": "easy",
    "tags": ["data_entry", "parameterized"],
    "optimal_steps": "3"
  },
  {
    "task_name": "SimpleCalendarEventsInTimeRange",
    "task_template": "Do I have any events between {start_time} and 8pm {date} in Simple Calendar Pro? Answer with the titles only. If there are multiples titles, format your answer in a comma separated list.",
    "difficulty": "easy",
    "tags": [
      "complex_ui_understanding",
      "screen_reading",
      "search",
      "transcription",
      "information_retrieval",
      "parameterized"
    ],
    "optimal_steps": "2"
  },
  {
    "task_name": "SimpleCalendarEventsOnDate",
    "task_template": "What events do I have {date} in Simple Calendar Pro? Answer with the titles only. If there are multiple titles, format your answer as a comma separated list.",
    "difficulty": "medium",
    "tags": ["information_retrieval", "parameterized"],
    "optimal_steps": "4"
  },
  {
    "task_name": "SimpleCalendarFirstEventAfterStartTime",
    "task_template": "What is my first event after {time} {date} in Simple Calendar Pro? Answer with the titles only. If there are multiples titles, format your answer in a comma separated list.",
    "difficulty": "easy",
    "tags": ["parameterized", "screen_reading"],
    "optimal_steps": "2"
  },
  {
    "task_name": "SimpleCalendarLocationOfEvent",
    "task_template": "What is the location of my {title} event in Simple Calendar Pro? Answer with the location only.",
    "difficulty": "easy",
    "tags": ["search", "parameterized"],
    "optimal_steps": "4"
  },
  {
    "task_name": "SimpleCalendarNextEvent",
    "task_template": "What is my next upcoming event in Simple Calendar Pro? Answer with the title only. If there are multiples titles, format your answer in a comma separated list.",
    "difficulty": "easy",
    "tags": [
      "complex_ui_understanding",
      "screen_reading",
      "information_retrieval",
      "parameterized"
    ],
    "optimal_steps": "4"
  },
  {
    "task_name": "SimpleCalendarNextMeetingWithPerson",
    "task_template": "When is my next meeting with {person} in Simple Calendar Pro? Express your answer in the format <month name> <day> <year> <hour in 24-hour format>:<minutes>.",
    "difficulty": "medium",
    "tags": ["information_retrieval", "parameterized"],
    "optimal_steps": "5"
  },
  {
    "task_name": "SimpleDrawProCreateDrawing",
    "task_template": "Create a new drawing in Simple Draw Pro. Name it {file_name}. Save it in the Pictures folder within the sdk_gphone_x86_64 storage area.",
    "difficulty": "easy",
    "tags": ["data_entry", "parameterized"],
    "optimal_steps": "9"
  },
  {
    "task_name": "SimpleSmsReply",
    "task_template": "Reply to {number} with message: {message} in Simple SMS Messenger",
    "difficulty": "easy",
    "tags": ["search", "data_entry", "parameterized"],
    "optimal_steps": "4"
  },
  {
    "task_name": "SimpleSmsReplyMostRecent",
    "task_template": "Reply to the most recent text message using Simple SMS Messenger with message: {message}",
    "difficulty": "medium",
    "tags": ["parameterized"],
    "optimal_steps": "5"
  },
  {
    "task_name": "SimpleSmsResend",
    "task_template": "Resend the message I just sent to {name} in Simple SMS Messenger",
    "difficulty": "medium",
    "tags": ["parameterized"],
    "optimal_steps": "6"
  },
  {
    "task_name": "SimpleSmsSend",
    "task_template": "Send a text message using Simple SMS Messenger to {number} with message: {message}",
    "difficulty": "medium",
    "tags": ["parameterized"],
    "optimal_steps": "6"
  },
  {
    "task_name": "SimpleSmsSendClipboardContent",
    "task_template": "Send a message to {number} with the clipboard content in Simple SMS Messenger",
    "difficulty": "easy",
    "tags": ["data_entry", "parameterized"],
    "optimal_steps": "6"
  },
  {
    "task_name": "SimpleSmsSendReceivedAddress",
    "task_template": "Text the address of the event to {name1} that {name2} just sent me in Simple SMS Messenger",
    "difficulty": "medium",
    "tags": ["information_retrieval", "parameterized"],
    "optimal_steps": "9"
  },
  {
    "task_name": "SportsTrackerActivitiesCountForWeek",
    "task_template": "How many {category} activities did I do this week in the OpenTracks app? Express your answer as a single integer.",
    "difficulty": "easy",
    "tags": ["search", "requires_setup", "parameterized"],
    "optimal_steps": "3"
  },
  {
    "task_name": "SportsTrackerActivitiesOnDate",
    "task_template": "What activities did I do {date} in the OpenTracks app? Answer with the category only. If there are multiples categories, format your answer in a comma separated list.",
    "difficulty": "hard",
    "tags": [
      "search",
      "complex_ui_understanding",
      "screen_reading",
      "information_retrieval",
      "transcription",
      "parameterized"
    ],
    "optimal_steps": "10"
  },
  {
    "task_name": "SportsTrackerActivityDuration",
    "task_template": "How long was my {category} activity {date} in the OpenTracks app? Express your answer in minutes as a single integer.",
    "difficulty": "easy",
    "tags": ["information_retrieval", "parameterized"],
    "optimal_steps": "6"
  },
  {
    "task_name": "SportsTrackerLongestDistanceActivity",
    "task_template": "What was the longest distance covered in a {category} activity in the OpenTracks app this week? Express your answer in meters as a single integer.",
    "difficulty": "easy",
    "tags": [
      "parameterized",
      "screen_reading",
      "information_retrieval",
      "math_counting"
    ],
    "optimal_steps": "2"
  },
  {
    "task_name": "SportsTrackerTotalDistanceForCategoryOverInterval",
    "task_template": "What was the total distance covered for {category} activities in the OpenTracks app from {start_date} to {end_date}? Express your answer in meters as a single integer.",
    "difficulty": "hard",
    "tags": ["search", "parameterized", "math_counting"],
    "optimal_steps": "11"
  },
  {
    "task_name": "SportsTrackerTotalDurationForCategoryThisWeek",
    "task_template": "What was the total duration of {category} activities in the OpenTracks app this week? Express your answer in minutes as a single integer.",
    "difficulty": "hard",
    "tags": ["math_counting", "search", "parameterized"],
    "optimal_steps": "8"
  },
  {
    "task_name": "SystemBluetoothTurnOff",
    "task_template": "Turn bluetooth {on_or_off}.",
    "difficulty": "easy",
    "tags": [""],
    "optimal_steps": "2"
  },
  {
    "task_name": "SystemBluetoothTurnOffVerify",
    "task_template": "Turn bluetooth {on_or_off}.",
    "difficulty": "easy",
    "tags": ["verification"],
    "optimal_steps": "2"
  },
  {
    "task_name": "SystemBluetoothTurnOn",
    "task_template": "Turn bluetooth {on_or_off}.",
    "difficulty": "easy",
    "tags": ["screen_reading"],
    "optimal_steps": "2"
  },
  {
    "task_name": "SystemBluetoothTurnOnVerify",
    "task_template": "Turn bluetooth {on_or_off}.",
    "difficulty": "easy",
    "tags": ["verification"],
    "optimal_steps": "2"
  },
  {
    "task_name": "SystemBrightnessMax",
    "task_template": "Turn brightness to the {max_or_min} value.",
    "difficulty": "easy",
    "tags": [""],
    "optimal_steps": "3"
  },
  {
    "task_name": "SystemBrightnessMaxVerify",
    "task_template": "Turn brightness to the {max_or_min} value.",
    "difficulty": "easy",
    "tags": ["verification"],
    "optimal_steps": "2"
  },
  {
    "task_name": "SystemBrightnessMin",
    "task_template": "Turn brightness to the {max_or_min} value.",
    "difficulty": "easy",
    "tags": [""],
    "optimal_steps": "3"
  },
  {
    "task_name": "SystemBrightnessMinVerify",
    "task_template": "Turn brightness to the {max_or_min} value.",
    "difficulty": "easy",
    "tags": ["verification"],
    "optimal_steps": "3"
  },
  {
    "task_name": "SystemCopyToClipboard",
    "task_template": "Copy the following text to the clipboard: {clipboard_content}",
    "difficulty": "easy",
    "tags": ["data_entry", "parameterized"],
    "optimal_steps": "2"
  },
  {
    "task_name": "SystemWifiTurnOff",
    "task_template": "Turn wifi {on_or_off}.",
    "difficulty": "easy",
    "tags": ["screen_reading"],
    "optimal_steps": "3"
  },
  {
    "task_name": "SystemWifiTurnOffVerify",
    "task_template": "Turn wifi {on_or_off}.",
    "difficulty": "easy",
    "tags": ["verification"],
    "optimal_steps": "3"
  },
  {
    "task_name": "SystemWifiTurnOn",
    "task_template": "Turn wifi {on_or_off}.",
    "difficulty": "easy",
    "tags": ["screen_reading"],
    "optimal_steps": "3"
  },
  {
    "task_name": "SystemWifiTurnOnVerify",
    "task_template": "Turn wifi {on_or_off}.",
    "difficulty": "easy",
    "tags": ["verification"],
    "optimal_steps": "3"
  },
  {
    "task_name": "TasksCompletedTasksForDate",
    "task_template": "Which tasks have I completed for {date} in Tasks app? Answer with the titles only. If there are multiples titles, format your answer in a comma separated list.",
    "difficulty": "medium",
    "tags": ["information_retrieval", "search", "parameterized"],
    "optimal_steps": "5"
  },
  {
    "task_name": "TasksDueNextWeek",
    "task_template": "How many tasks do I have due next week in Tasks app? Express your answer as a single integer.",
    "difficulty": "medium",
    "tags": ["information_retrieval", "parameterized"],
    "optimal_steps": "6"
  },
  {
    "task_name": "TasksDueOnDate",
    "task_template": "What tasks do I have due {date} in Tasks app? Answer with the titles only. If there are multiples titles, format your answer in a comma separated list.",
    "difficulty": "easy",
    "tags": ["search", "parameterized"],
    "optimal_steps": "2"
  },
  {
    "task_name": "TasksHighPriorityTasks",
    "task_template": "What are my high priority tasks in Tasks app? Answer with the titles only. If there are multiples titles, format your answer in a comma separated list.",
    "difficulty": "medium",
    "tags": [
      "complex_ui_understanding",
      "search",
      "information_retrieval",
      "transcription",
      "parameterized"
    ],
    "optimal_steps": "2"
  },
  {
    "task_name": "TasksHighPriorityTasksDueOnDate",
    "task_template": "Which tasks with high priority are due {date} in the Tasks app? Answer with the title only. If there are multiples titles, format your answer in a comma separated list.",
    "difficulty": "medium",
    "tags": ["information_retrieval", "screen_reading", "parameterized"],
    "optimal_steps": "5"
  },
  {
    "task_name": "TasksIncompleteTasksOnDate",
    "task_template": "What incomplete tasks do I have still have to do by {date} in Tasks app? Answer with the titles only. If there are multiples titles, format your answer in a comma separated list.",
    "difficulty": "easy",
    "tags": ["parameterized", "screen_reading", "information_retrieval"],
    "optimal_steps": "2"
  },
  {
    "task_name": "TurnOffWifiAndTurnOnBluetooth",
    "task_template": "Turn off WiFi, then enable bluetooth",
    "difficulty": "medium",
    "tags": [""],
    "optimal_steps": "5"
  },
  {
    "task_name": "TurnOnWifiAndOpenApp",
    "task_template": "Turn on Wifi, then open the {app_name} app",
    "difficulty": "easy",
    "tags": ["parameterized"],
    "optimal_steps": "4"
  },
  {
    "task_name": "VlcCreatePlaylist",
    "task_template": "Create a playlist titled \"{playlist_name}\" with the following files in VLC (located in Internal Memory/VLCVideos), in order: {files}",
    "difficulty": "medium",
    "tags": ["data_edit", "repetition", "parameterized"],
    "optimal_steps": "14"
  },
  {
    "task_name": "VlcCreateTwoPlaylists",
    "task_template": "Create a playlist titled \"{playlist_name1}\" with the following files in VLC, in order: {files1}. And then, Create a playlist titled \"{playlist_name2}\" with the following files in VLC (located in Internal Memory/VLCVideos), in order: {files1}",
    "difficulty": "medium",
    "tags": ["data_entry", "requires_setup", "parameterized"],
    "optimal_steps": "24"
  }
]


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Constant key names for storing episode data during evaluation runs."""

# The current step number in a given episode.
STEP_NUMBER = 'step_number'


class EpisodeConstants:
  """Episode-level constants when recording agents performing automation tasks.

  Attributes:
    EPISODE_DATA: Data for a full episode.
    GOAL: The high-level (episode-level) goal for an episode.
    INSTANCE_ID: The index of the instance in the combinations.
    TASK_TEMPLATE: A task template, e.g., MessagesSendSMS
    IS_SUCCESSFUL: Binary variable whether automated system detects success.
    RUN_TIME: Time to run episode.
    AGENT_NAME: The name of the agent. This is logged on the screen and in the
      trajectory data.
    EPISODE_LENGTH: The length of the episode.
    FINISH_DTIME: The datetime the task finished.
    SEED: The random seed to initialize the current episode's task.
  """

  EPISODE_DATA = 'episode_data'
  GOAL = 'goal'
  INSTANCE_ID = 'instance_id'
  # Scripted task constants.
  TASK_TEMPLATE = 'task_template'
  IS_SUCCESSFUL = 'is_successful'
  RUN_TIME = 'run_time'
  AGENT_NAME = 'agent_name'
  EPISODE_LENGTH = 'episode_length'
  SCREEN_CONFIG = 'screen_config'
  EXCEPTION_INFO = 'exception_info'
  FINISH_DTIME = 'finish_dtime'
  SEED = 'seed'


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Runs an agent on the environment."""

import dataclasses
from typing import Any, Callable, Optional

from android_env import env_interface
from android_world import constants
from android_world.agents import base_agent
import termcolor


@dataclasses.dataclass()
class EpisodeResult:
  """Represents an episode of an agent interacting with the environment.

  Attributes:
    done: Whether the agent indicated the task is complete.
    step_data: Environment and agent data for each step.
    env_reward: Reward returned by environment, if applicable.
  """

  done: bool
  step_data: dict[str, Any]
  env_reward: Optional[float] = None


def run_episode(
    goal: str,
    agent: base_agent.EnvironmentInteractingAgent,
    max_n_steps: int = 10,
    start_on_home_screen: bool = False,
    termination_fn: (
        Callable[[env_interface.AndroidEnvInterface], float] | None
    ) = None,
) -> EpisodeResult:
  """Runs an agent on goal, e.g., "turn off wifi".

  An agent will start from whatever state the provided environment is in and
  run until it determines a task is complete, if the max number of
  steps is reached, of if the termination_fn is True.

  Args:
    goal: The goal instruction for the agent.
    agent: The agent to run on the environment.
    max_n_steps: The max number of steps to allow an agent to run before ending
      an episode.
    start_on_home_screen: Whether to start episode from the home screen or just
      the current screen.
    termination_fn: If provided, a determines whether to terminate an episode.
      For example, for MiniWoB++ tasks, the episode should terminate if there is
      a nonzero reward.

  Returns:
    Data collected during running agent on goal.
  """
  if max_n_steps == 0:
    return EpisodeResult(done=False, step_data={})
  if termination_fn is None:
    termination_fn = lambda env: False

  agent.reset(start_on_home_screen)

  output = []
  for step_n in range(max_n_steps):
    result = agent.step(goal)
    print('Completed step {:d}.'.format(step_n + 1))
    assert constants.STEP_NUMBER not in result.data
    output.append(result.data | {constants.STEP_NUMBER: step_n})
    if termination_fn(agent.env.controller):
      print('Environment ends episode.')
      return EpisodeResult(
          done=True,
          step_data=_transpose_lod_to_dol(output),
      )
    elif result.done:
      print('Agent indicates task is done.')
      return EpisodeResult(
          done=result.done,
          step_data=_transpose_lod_to_dol(output),
      )
  print(
      termcolor.colored(
          'Agent did not indicate task is done. Reached max number of steps.',
          'red',
      )
  )
  return EpisodeResult(
      done=result.done, step_data=_transpose_lod_to_dol(output)  # pylint: disable=undefined-variable
  )


def _transpose_lod_to_dol(data: list[dict[str, Any]]) -> dict[str, list[Any]]:
  """Transposes a list of dictionaries to a dictionary of lists.

  Args:
    data: A list of dictionaries.

  Returns:
    A dictionary where each key is from the input dictionaries and each value is
    a list of values for that key.
  """
  result = {}
  for d in data:
    for key, value in d.items():
      if key not in result:
        result[key] = []
      result[key].append(value)
  return result


def transpose_dol_to_lod(data: dict[str, list[Any]]) -> list[dict[str, Any]]:
  """Converts a dictionary of lists to a list of dictionaries.

  Useful for post-processing of results; e.g., in colab.

  Args:
    data: A dictionary where each value is a list.

  Returns:
    A list of dictionaries.
  """
  return [dict(zip(data.keys(), values)) for values in zip(*data.values())]


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tests for suite utils."""

import copy
import time
from typing import Any
from unittest import mock
from absl.testing import absltest
from absl.testing import parameterized
from android_world import checkpointer
from android_world import constants
from android_world import episode_runner
from android_world import registry
from android_world import suite_utils
from android_world.agents import base_agent
from android_world.env import adb_utils
from android_world.env import interface
from android_world.utils import test_utils
import dm_env
import numpy as np


class TestCreateSuite(parameterized.TestCase):
  """Test that entire suite can be created.

  Later tests probe specific features related to the registry.
  """

  @parameterized.named_parameters(
      dict(testcase_name='android', family='information_retrieval'),
      dict(testcase_name='miniwob', family='miniwob'),
      dict(
          testcase_name='information_retrieval', family='information_retrieval'
      ),
  )
  def test_create_suite(self, family: str):
    suite_utils.create_suite(
        registry.TaskRegistry().get_registry(family), n_task_combinations=2
    )


class TestSuite(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.task_registry = registry.TaskRegistry()
    self.original_registry = copy.deepcopy(
        self.task_registry.ANDROID_TASK_REGISTRY
    )
    self.testing_registry = {
        'Task1': test_utils.FakeCurrentStateEval,
        'Task2': test_utils.FakeAdbEval,
    }
    self.seed = 42

  def test_create_entire_suite(self):
    suite_utils.create_suite(self.original_registry, n_task_combinations=2)

  def test_create_suite(self):
    n_task_combinations = 2
    suite = suite_utils.create_suite(
        self.testing_registry, n_task_combinations=n_task_combinations
    )
    self.assertLen(
        suite['Task1'],
        n_task_combinations,
        'Should create 2 instances for Task1',
    )
    self.assertLen(
        suite['Task2'],
        n_task_combinations,
        'Should create 2 instances for Task2',
    )

  def test_determinism_with_same_seed(self):
    suite1 = suite_utils.create_suite(
        self.testing_registry, n_task_combinations=2, seed=self.seed
    )
    suite2 = suite_utils.create_suite(
        self.testing_registry, n_task_combinations=2, seed=self.seed
    )

    self.assertEqual(
        suite1['Task1'][0].params,
        suite2['Task1'][0].params,
        'Task1 instance 1 params should match with the same seed',
    )
    self.assertEqual(
        suite1['Task1'][1].params,
        suite2['Task1'][1].params,
        'Task1 instance 2 params should match with the same seed',
    )
    self.assertEqual(
        suite1['Task2'][0].params,
        suite2['Task2'][0].params,
        'Task2 instance 1 params should match with the same seed',
    )
    self.assertEqual(
        suite1['Task2'][1].params,
        suite2['Task2'][1].params,
        'Task2 instance 2 params should match with the same seed',
    )

  def test_variation_with_different_seed(self):
    suite1 = suite_utils.create_suite(
        self.testing_registry, n_task_combinations=2, seed=self.seed
    )
    suite2 = suite_utils.create_suite(
        self.testing_registry, n_task_combinations=2, seed=self.seed + 1
    )

    self.assertNotEqual(
        suite1['Task1'][0].params,
        suite2['Task1'][0].params,
        'Task1 instance 1 params should not match with different seeds',
    )
    self.assertNotEqual(
        suite1['Task2'][0].params,
        suite2['Task2'][0].params,
        'Task2 instance 1 params should not match with different seeds',
    )

  @mock.patch.object(suite_utils.random, 'seed')
  def test_no_seed_provides_randomness(self, mock_seed):
    suite_utils.create_suite(self.testing_registry, n_task_combinations=2)
    mock_seed.assert_not_called()

  def test_return_all_when_tasks_none(self):
    suite = suite_utils.Suite(
        **{
            'Task1': [
                test_utils.FakeCurrentStateEval(
                    test_utils.FakeCurrentStateEval.generate_random_params()
                ),
                test_utils.FakeCurrentStateEval(
                    test_utils.FakeCurrentStateEval.generate_random_params()
                ),
            ],
            'Task2': [
                test_utils.FakeAdbEval(
                    test_utils.FakeAdbEval.generate_random_params()
                )
            ],
        },
    )
    suite.suite_family = 'test'
    tasks = None

    result = suite_utils._filter_tasks(
        suite,
        self.task_registry.get_registry(registry.TaskRegistry.ANDROID_FAMILY),
        tasks,
    )

    self.assertEqual(
        result, suite, 'Should return the same suite when tasks is None'
    )

  def test_valid_tasks_subset(self):
    expected = [
        test_utils.FakeCurrentStateEval(
            test_utils.FakeCurrentStateEval.generate_random_params()
        )
    ]
    tasks = ['Task1']

    result = suite_utils._filter_tasks(
        {
            'Task1': expected,
            'Task2': [
                test_utils.FakeCurrentStateEval(
                    test_utils.FakeCurrentStateEval.generate_random_params()
                )
            ],
            'Task3': [
                test_utils.FakeAdbEval(
                    test_utils.FakeAdbEval.generate_random_params()
                )
            ],
        },
        self.testing_registry,
        tasks,
    )

    self.assertEqual(
        result, {'Task1': expected}, 'Should return the subset of tasks'
    )

  def test_invalid_task_raises_value_error(self):
    suite = suite_utils.Suite(
        **{
            'Task1': [
                test_utils.FakeCurrentStateEval(
                    test_utils.FakeCurrentStateEval.generate_random_params()
                )
            ],
            'Task2': [
                test_utils.FakeAdbEval(
                    test_utils.FakeAdbEval.generate_random_params()
                )
            ],
        },
    )
    suite.suite_family = 'test'
    tasks = ['Task1', 'Task3']

    with self.assertRaises(ValueError):
      suite_utils._filter_tasks(
          suite,
          self.task_registry.get_registry(registry.TaskRegistry.ANDROID_FAMILY),
          tasks,
      )


class SuiteUtilsTest(parameterized.TestCase):

  def setUp(self):
    super().setUp()
    self.testing_registry = {
        'Task1': test_utils.FakeCurrentStateEval,
        'Task2': test_utils.FakeAdbEval,
    }

  @parameterized.named_parameters(
      dict(testcase_name='no_demo_mode', demo_mode=False),
      dict(testcase_name='demo_mode', demo_mode=True),
  )
  @mock.patch.object(test_utils.FakeAdbEval, 'initialize_task', autospec=True)
  @mock.patch.object(interface, 'AsyncAndroidEnv')
  @mock.patch.object(adb_utils, 'send_android_intent')
  @mock.patch.object(time, 'sleep', autospec=True)
  def test_run_adb_task_instances(
      self,
      mock_sleep,
      mock_send_android_intent,
      mock_env,
      mock_initialize_task,
      demo_mode,
  ):
    pixels = np.zeros((3, 3, 3))
    mock_env.get_state.return_value = (
        dm_env.TimeStep(
            observation={'pixels': pixels},
            reward=0,
            discount=0,
            step_type=dm_env.StepType.LAST,
        ),
        [],
    )
    mock_android_env = mock.PropertyMock(return_value=mock.MagicMock())
    mock_env.controller = mock_android_env
    mock_run_e2e = mock.MagicMock()
    mock_run_e2e.return_value = episode_runner.EpisodeResult(
        True,
        {'step_number': [0]},
    )

    result = suite_utils._run_task(
        test_utils.FakeAdbEval(test_utils.FakeAdbEval.generate_random_params()),
        mock_run_e2e,
        mock_env,
        demo_mode=demo_mode,
    )

    self.assertEqual(result['is_successful'], 1)
    self.assertIn(result['goal'], 'ADB eval')
    mock_initialize_task.assert_called_once()
    if demo_mode:
      mock_send_android_intent.assert_has_calls([
          mock.call(
              'broadcast',
              'com.example.ACTION_UPDATE_OVERLAY',
              mock_android_env,
              extras={'success_string': '1'},
          ),
      ])
      mock_sleep.assert_called()

  def test_run_miniwob_task_instances_initialize(self):
    mock_run_e2e = mock.MagicMock()
    mock_run_e2e.return_value = episode_runner.EpisodeResult(
        done=True,
        step_data={'step_number': [0]},
    )
    failing_instance = test_utils.FakeMiniWobTask(
        test_utils.FakeMiniWobTask.generate_random_params()
    )

    result = suite_utils._run_task(
        failing_instance, mock_run_e2e, mock.MagicMock(), demo_mode=False
    )

    self.assertIsNone(result[constants.EpisodeConstants.EXCEPTION_INFO])

  def test_run_adb_task_instances_initialize_fails(self):
    mock_run_e2e = mock.MagicMock()
    mock_run_e2e.return_value = episode_runner.EpisodeResult(
        done=True,
        step_data={'step_number': [0]},
    )
    failing_instance = test_utils.FakeAdbEval(
        test_utils.FakeAdbEval.generate_random_params()
    )
    failing_instance.initialize_task = lambda: ValueError(
        'Something went wrong'
    )

    result = suite_utils._run_task(
        failing_instance, mock_run_e2e, mock.MagicMock(), demo_mode=False
    )
    self.assertIsNotNone(result[constants.EpisodeConstants.EXCEPTION_INFO])

  @mock.patch.object(interface, 'AsyncAndroidEnv')
  def test_run_adb_task_instances_is_successful_fails(self, mock_env):
    mock_run_e2e = mock.MagicMock()
    mock_run_e2e.return_value = episode_runner.EpisodeResult(
        True,
        {
            'step_number': [0],
        },
    )
    failing_instance = test_utils.FakeAdbEval(
        test_utils.FakeAdbEval.generate_random_params()
    )
    failing_instance.is_successful = lambda: ValueError('Something went wrong')

    result = suite_utils._run_task(
        failing_instance,
        mock_run_e2e,
        mock_env,
        demo_mode=False,
    )

    self.assertIsNotNone(result[constants.EpisodeConstants.EXCEPTION_INFO])

  @mock.patch.object(suite_utils, '_run_task_suite')
  @mock.patch.object(base_agent, 'EnvironmentInteractingAgent', autospec=True)
  def test_run(
      self,
      mock_agent,
      mock_run_suite,
  ):
    mock_run_suite.return_value = [{
        'goal': 'Goal',
        'is_successful': 1.0,
        'agent_name': 'AnAgent',
    }] * 2
    mock_agent.name = 'AnAgent'
    mock_agent.env = test_utils.FakeAsyncEnv()
    n_task_combinations = 1
    tasks = ['Task1']
    suite = suite_utils.create_suite(
        self.testing_registry,
        n_task_combinations=n_task_combinations,
        tasks=tasks,
    )

    results = suite_utils.run(suite, agent=mock_agent, demo_mode=False)

    mock_run_suite.assert_called_once()
    self.assertLen(results, 2)
    for result in results:
      self.assertEqual(result[constants.EpisodeConstants.GOAL], 'Goal')
      self.assertEqual(result[constants.EpisodeConstants.IS_SUCCESSFUL], True)
      self.assertEqual(result[constants.EpisodeConstants.AGENT_NAME], 'AnAgent')


class RunTaskSuiteTest(absltest.TestCase):

  def assertTaskResults(self, results: list[dict[str, Any]]) -> None:
    """Asserts that the tasks have executed as expected.

    Args:
      results: A list of dictionaries containing the result of task execution.
    """
    self.assertEqual(results[0]['is_successful'], 0)
    self.assertIn(results[0]['goal'], 'Current state eval')
    self.assertEqual(results[1]['is_successful'], 1)
    self.assertIn(results[1]['goal'], 'Current state eval')
    self.assertEqual(results[2]['is_successful'], 1)
    self.assertIn(results[2]['goal'], 'ADB eval')

  @mock.patch.object(interface, 'AsyncAndroidEnv')
  def test_run_task_suite(self, mock_env):
    mock_env.get_state.return_value = (
        dm_env.TimeStep(
            observation={'pixels': np.zeros((3, 3, 3))},
            reward=0,
            discount=0,
            step_type=dm_env.StepType.LAST,
        ),
        [],
    )
    mock_run_e2e = mock.MagicMock()
    mock_run_e2e.side_effect = [
        # for each, add task_template
        episode_runner.EpisodeResult(
            False,
            {'step_number': [0]},
        ),
        episode_runner.EpisodeResult(
            True,
            {'step_number': [0]},
        ),
        episode_runner.EpisodeResult(
            True,
            {'step_number': [0]},
        ),
    ]

    suite = suite_utils.Suite(
        **{
            'Task1': [
                test_utils.FakeCurrentStateEval(
                    test_utils.FakeCurrentStateEval.generate_random_params()
                ),
                test_utils.FakeCurrentStateEval(
                    test_utils.FakeCurrentStateEval.generate_random_params()
                ),
            ],
            'Task2': [
                test_utils.FakeAdbEval(
                    test_utils.FakeAdbEval.generate_random_params()
                )
            ],
        },
    )
    suite.suite_family = 'android'
    result = suite_utils._run_task_suite(
        suite, mock_run_e2e, mock_env, demo_mode=False
    )

    self.assertTaskResults(result)

  @mock.patch.object(time, 'sleep', autospec=True)
  @mock.patch.object(interface, 'AsyncAndroidEnv')
  @mock.patch.object(adb_utils, 'send_android_intent')
  @mock.patch.object(checkpointer, 'Checkpointer')
  def test_resume_from_middle(
      self,
      mock_checkpointer,
      unused_mock_send_android_intent,
      mock_env,
      unused_mock_sleep,
  ):
    # Simulating partially completed Task1
    mock_checkpointer.load.return_value = [
        {
            'instance_id': 0,
            'is_successful': 0.0,
            'goal': 'Current state eval',
            'task_template': 'FakeCurrentStateEval',
            'episode_length': 1,
            'run_time': 0,
        },
    ]
    mock_env.get_state.return_value = (
        dm_env.TimeStep(
            observation={'pixels': np.zeros((3, 3, 3))},
            reward=0,
            discount=0,
            step_type=dm_env.StepType.LAST,
        ),
        [],
    )
    mock_run_e2e = mock.MagicMock()
    mock_run_e2e.side_effect = [
        episode_runner.EpisodeResult(
            True,
            {'step_number': [0]},
        ),
        episode_runner.EpisodeResult(
            True,
            {'step_number': [0]},
        ),
    ]

    suite = suite_utils.Suite(
        **{
            'FakeCurrentStateEval': [
                test_utils.FakeCurrentStateEval(
                    test_utils.FakeCurrentStateEval.generate_random_params()
                ),
                test_utils.FakeCurrentStateEval(
                    test_utils.FakeCurrentStateEval.generate_random_params()
                ),
            ],
            'FakeAdbEval': [
                test_utils.FakeAdbEval(
                    test_utils.FakeAdbEval.generate_random_params()
                )
            ],
        },
    )
    suite.suite_family = 'android'
    result = suite_utils._run_task_suite(
        suite, mock_run_e2e, mock_env, mock_checkpointer
    )

    self.assertTaskResults(result)
    mock_checkpointer.load.assert_called_once()
    # Run one instance for Task1, one instance for Task2
    mock_run_e2e.assert_called()
    mock_checkpointer.save_episodes.assert_has_calls([
        mock.call(mock.ANY, 'FakeCurrentStateEval_1'),
        mock.call(mock.ANY, 'FakeAdbEval_0'),
    ])

  @mock.patch.object(time, 'sleep', autospec=True)
  @mock.patch.object(interface, 'AsyncAndroidEnv')
  @mock.patch.object(adb_utils, 'send_android_intent')
  @mock.patch.object(checkpointer, 'Checkpointer')
  def test_start_from_beginning(
      self,
      mock_checkpointer,
      unused_mock_send_android_intent,
      mock_env,
      unused_mock_sleep,
  ):
    mock_checkpointer.load.return_value = []
    mock_env.get_state.return_value = (
        dm_env.TimeStep(
            observation={'pixels': np.zeros((3, 3, 3))},
            reward=0,
            discount=0,
            step_type=dm_env.StepType.LAST,
        ),
        [],
    )
    mock_run_e2e = mock.MagicMock()
    mock_run_e2e.side_effect = [
        episode_runner.EpisodeResult(
            False,
            {'step_number': [0]},
        ),
        episode_runner.EpisodeResult(
            True,
            {'step_number': [0]},
        ),
        episode_runner.EpisodeResult(
            True,
            {'step_number': [0]},
        ),
    ]
    suite = suite_utils.Suite(
        **{
            'FakeCurrentStateEval': [
                test_utils.FakeCurrentStateEval(
                    test_utils.FakeCurrentStateEval.generate_random_params()
                ),
                test_utils.FakeCurrentStateEval(
                    test_utils.FakeCurrentStateEval.generate_random_params()
                ),
            ],
            'FakeAdbEval': [
                test_utils.FakeAdbEval(
                    test_utils.FakeAdbEval.generate_random_params()
                )
            ],
        },
    )
    suite.suite_family = 'android'

    result = suite_utils._run_task_suite(
        suite, mock_run_e2e, mock_env, mock_checkpointer
    )

    self.assertTaskResults(result)
    self.assertEqual(mock_run_e2e.call_count, 3)
    mock_checkpointer.load.assert_called_once()
    mock_checkpointer.save_episodes.assert_has_calls(
        [
            mock.call(mock.ANY, 'FakeCurrentStateEval_0'),
            mock.call(mock.ANY, 'FakeCurrentStateEval_1'),
            mock.call(mock.ANY, 'FakeAdbEval_0'),
        ],
        any_order=False,
    )

  @mock.patch.object(time, 'sleep', autospec=True)
  @mock.patch.object(interface, 'AsyncAndroidEnv')
  @mock.patch.object(adb_utils, 'send_android_intent')
  @mock.patch.object(checkpointer, 'Checkpointer')
  def test_start_from_end(
      self,
      mock_checkpointer,
      unused_mock_send_android_intent,
      mock_env,
      unused_mock_sleep,
  ):
    mock_checkpointer.load.return_value = [
        {
            'instance_id': 0,
            'is_successful': 0,
            'goal': 'Current state eval',
            'task_template': 'FakeCurrentStateEval',
        },
        {
            'instance_id': 1,
            'is_successful': 1,
            'goal': 'Current state eval',
            'task_template': 'FakeCurrentStateEval',
        },
        {
            'instance_id': 0,
            'is_successful': 1,
            'goal': 'ADB eval',
            'task_template': 'FakeAdbEval',
        },
    ]
    mock_run_e2e = mock.MagicMock()
    suite = suite_utils.Suite(
        **{
            'FakeCurrentStateEval': [
                test_utils.FakeCurrentStateEval(
                    test_utils.FakeCurrentStateEval.generate_random_params()
                ),
                test_utils.FakeCurrentStateEval(
                    test_utils.FakeCurrentStateEval.generate_random_params()
                ),
            ],
            'FakeAdbEval': [
                test_utils.FakeAdbEval(
                    test_utils.FakeAdbEval.generate_random_params()
                )
            ],
        },
    )
    suite.suite_family = 'android'

    result = suite_utils._run_task_suite(
        suite, mock_run_e2e, mock_env, mock_checkpointer
    )

    self.assertTaskResults(result)
    mock_run_e2e.assert_not_called()
    mock_checkpointer.load.assert_called_once()
    mock_checkpointer.save.assert_not_called()

  @mock.patch.object(time, 'sleep', autospec=True)
  @mock.patch.object(interface, 'AsyncAndroidEnv')
  @mock.patch.object(adb_utils, 'send_android_intent')
  @mock.patch.object(checkpointer, 'Checkpointer')
  def test_result_suite_equal_in_number(
      self,
      mock_checkpointer,
      unused_mock_send_android_intent,
      mock_env,
      unused_mock_sleep,
  ):
    mock_checkpointer.load.return_value = [
        {
            'instance_id': 0,
            'is_successful': 0,
            'goal': 'Current state eval',
            'task_template': 'FakeCurrentStateEval',
        },
        {
            'instance_id': 0,
            'is_successful': 1,
            'goal': 'ADB eval',
            'task_template': 'FakeAdbEval',
        },
    ]
    mock_run_e2e = mock.MagicMock()
    suite = suite_utils.Suite(
        **{
            'FakeCurrentStateEval': [
                test_utils.FakeCurrentStateEval(
                    test_utils.FakeCurrentStateEval.generate_random_params()
                ),
            ],
            'FakeAdbEval': [
                test_utils.FakeAdbEval(
                    test_utils.FakeAdbEval.generate_random_params()
                )
            ],
        },
    )
    suite.suite_family = 'android'

    result = suite_utils._run_task_suite(
        suite, mock_run_e2e, mock_env, mock_checkpointer
    )
    self.assertLen(result, 2)

    suite2 = suite_utils.Suite(
        **{
            'FakeAdbEval': [
                test_utils.FakeAdbEval(
                    test_utils.FakeAdbEval.generate_random_params()
                )
            ],
        },
    )
    result2 = suite_utils._run_task_suite(
        suite2, mock_run_e2e, mock_env, mock_checkpointer
    )
    self.assertLen(result2, 1)


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Checkpointer class."""

import abc
import datetime
import gzip
import io
import os
import pickle
from typing import Any

from absl import logging

INSTANCE_SEPARATOR = '_'

Episode = dict[str, Any]


def _gzip_pickle(data: Any) -> bytes:
  """Pickle and gzip compress an object in memory.

  Args:
      data: The data to be pickled and gzipped.

  Returns:
      A bytes object containing the gzipped pickled data.
  """
  pickled_data = io.BytesIO()
  pickle.dump(data, pickled_data)

  pickled_data.seek(0)  # Reset the stream position to the beginning
  compressed_data = io.BytesIO()
  with gzip.GzipFile(
      fileobj=compressed_data, mode='wb', compresslevel=5
  ) as f_out:
    f_out.write(pickled_data.getvalue())

  return compressed_data.getvalue()


def _unzip_and_read_pickle(file_path: str) -> Any:
  """Reads a gzipped pickle file using 'with open', unzips, and unpickles it.

  Args:
      file_path: The path to the gzipped pickle file.

  Returns:
      The original Python object that was pickled and gzipped.
  """
  with open(file_path, 'rb') as f:
    compressed = f.read()

  with gzip.open(io.BytesIO(compressed), 'rb') as f_in:
    return pickle.load(f_in)


class Checkpointer(abc.ABC):
  """Saves and loads the results of an evaluation run."""

  @abc.abstractmethod
  def save_episodes(self, task_episodes: list[Episode], task_name: str) -> None:
    """Saves a task's episodes to disk."""

  @abc.abstractmethod
  def load(self, fields: list[str] | None = None) -> list[Episode]:
    """Loads all episodes from disk."""


class IncrementalCheckpointer(Checkpointer):
  """Saves and loads the results of an evaluation run.

  Designed for incremental saving of episodes for each task, enabling the
  checkpointer to save the results of an evaluation run task by task, rather
  than saving the entire dataset at once.

  Attributes:
      directory: The directory to store the task data.
  """

  def __init__(self, directory: str) -> None:
    self.directory = directory
    os.makedirs(directory, exist_ok=True)

  def save_episodes(self, task_episodes: list[Episode], task_name: str):
    """Saves a task group to disk.

    Args:
        task_episodes: The task's episodes to save.
        task_name: The unique identifier for the task group.
    """
    filename = os.path.join(self.directory, f'{task_name}.pkl.gz')
    with open(filename, 'wb') as f:
      compressed = _gzip_pickle(task_episodes)
      f.write(compressed)
    print(f'Wrote task episodes for {task_name} to {filename}')

  def load(self, fields: list[str] | None = None) -> list[Episode]:
    """Loads all task groups from disk."""
    # Keep same order as runtime.
    directories = os.listdir(self.directory)
    directories.sort(key=lambda x: x.split(INSTANCE_SEPARATOR)[0])

    data = []
    for filename in directories:
      if filename.endswith('.pkl.gz'):
        try:
          task_group_id = filename[:-7]  # Remove ".pkl.gz" extension
          task_group = self._load_task_group(task_group_id)
          if fields is not None:
            task_group = [
                {field: episode[field] for field in fields}
                for episode in task_group
            ]
          data.extend(task_group)
        except Exception as e:  # pylint: disable=broad-exception-caught
          print(f'Unable to load {filename} with exception: {e}')
    return data

  def _load_task_group(self, task_group_id: str) -> list[Episode]:
    """Loads a single task group from disk."""
    filename = os.path.join(self.directory, f'{task_group_id}.pkl.gz')
    try:
      return _unzip_and_read_pickle(filename)
    except FileNotFoundError:
      logging.info(
          'File not readable: %s. It may not exist. Starting from empty state.',
          filename,
      )
      return []


class NullCheckpointer(Checkpointer):
  """Checkpointer that does nothing."""

  def __init__(self) -> None:
    """Constructor."""

  def save_episodes(self, task_episodes: list[Episode], task_name: str):
    pass

  def load(self, fields: list[str] | None = None) -> list[Episode]:
    del fields
    return []


def create_run_directory(location: str) -> str:
  """Creates the UUID directory name to save run results.

  Args:
    location: Location to write the directory.

  Returns:
    A UUID directory name.
  """
  timestamp = datetime.datetime.now().strftime('%Y%m%dT%H%M%S')
  return os.path.join(location, f'run_{timestamp}')


class DeprecatedCheckpointer:
  """Saves and loads the results of an evaluation run.

  Attributes:
    filename: The name of the file to write.
  """

  def __init__(self, filename: str) -> None:
    self.filename = filename

  def save(self, data: list[Episode], completed_tasks: list[str]) -> None:
    """Saves the results of an evaluation run.

    Args:
      data: The data for the run.
      completed_tasks: Metadata containing the tuple of completed tasks.
    """
    with open(self.filename, 'wb') as f:
      compressed = _gzip_pickle((data, completed_tasks))
      f.write(compressed)
    print(f'Wrote to {self.filename}')

  def load(
      self, fields: list[str] | None = None
  ) -> tuple[list[Episode], list[str]]:
    """Loads the results of an evaluation run."""
    del fields
    try:
      return _unzip_and_read_pickle(self.filename)
    except FileNotFoundError:
      logging.info(
          'File not readable: %s. It may not exist. Starting from empty state.',
          self.filename,
      )
      return [], []


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""android_world API."""

# A new PyPI release will be pushed every time `__version__` is increased.
# When changing this, also update the CHANGELOG.md.
__version__ = '0.1.0'


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Utilities for evaluating automation agents."""

import collections
import datetime
import hashlib
import os
import random
import time
import traceback
from typing import Any, Callable, Type

from android_env import env_interface
from android_world import checkpointer as checkpointer_lib
from android_world import constants
from android_world import episode_runner
from android_world.agents import base_agent
from android_world.env import adb_utils
from android_world.env import interface
from android_world.task_evals import task_eval
from android_world.task_evals.miniwob import miniwob_base
from fuzzywuzzy import process
import numpy as np
import pandas as pd

# A fixed seed to use when use identical parameters but seed is not set.
_FIXED_SEED = 123
_TASK_TEMPLATE_COLUMN = 'task_template'
_TASK_PROMPT_COLUMN = 'task_prompt'


class Suite(dict[str, list[task_eval.TaskEval]]):
  """A suite of tasks.

  Each key is the task name as defined in registry.py and its value is a list
  of instantiated task objects. These instances differ from each other by their
  parameter initializations; i.e. each task will have different task parameters.
  """

  def __init__(self, *args, **kwargs):
    super().__init__(*args, **kwargs)
    self._suite_family = None

  @property
  def suite_family(self) -> str:
    """Getter for suite_family."""
    if self._suite_family is None:
      raise ValueError('Suite family is not set; please first set it.')
    return self._suite_family

  @suite_family.setter
  def suite_family(self, value: str):
    """Setter for suite_family."""
    self._suite_family = value


def _instantiate_task(
    task: Type[task_eval.TaskEval],
    params: dict[str, Any] | None = None,
    seed: int | None = None,
    env: interface.AsyncEnv | None = None,
) -> task_eval.TaskEval:
  """Creates an instance of a task with params.

  If params is not provided, it will use random params, controlled by a seed.

  Args:
    task: The task to instantiate.
    params: Params to use.
    seed: Seed for the random number generator.
    env: The environment.

  Returns:
    An instance of a task.
  """
  task.set_device_time(env)
  if params is None:
    if seed is not None:
      random.seed(seed)
    params = task.generate_random_params()
    params[constants.EpisodeConstants.SEED] = seed
  return task(params)


def create_suite(
    task_registry: dict[str, Type[task_eval.TaskEval]],
    n_task_combinations: int = 1,
    seed: int | None = None,
    tasks: list[str] | None = None,
    use_identical_params: bool = False,
    env: interface.AsyncEnv | None = None,
) -> Suite:
  """Creates task suite.

  A task suite is a set of tasks. Each task is instantiated
  `n_task_combinations` times using new parameters. For example a task suite
  could look like:

  ```python
  {
      'GoogleSearchTask': [
          GoogleSearchTask({'term': 'cute cats'}),
          GoogleSearchTask({'term': 'comfy pillows'}),
      ],
      'WifiDisable': [  # No params for WiFi task.
          WifiDisable({}),
          WifiDisable({}),
      ],
  }
  ```

  Args:
    task_registry: Maps task names to their TaskEvals.
    n_task_combinations: Number of instances to create per task. Each instance
      will have unique param combinations.
    seed: Seed for the random number generator. Setting the seed will result in
      the same sequence of params for task instantiation per each task.
    tasks: List of task types that should be in the suite. If value is `None`
      all task types and associated instances will be created.
    use_identical_params: If True, each instance of a task, for a total of
      `n_task_combinations`, will have the same params.
    env: The environment that will be run on.

  Returns:
    A mapping of task name to instances of the task.
  """

  def _get_instance_seed(name: str, i: int) -> int:
    unique_seed_str = f'{seed}_{name}_{i}'
    return int(hashlib.sha256(unique_seed_str.encode()).hexdigest(), 16) % (
        2**32
    )

  suite = {}
  for name, task_type in task_registry.items():
    current = []
    for i in range(n_task_combinations):
      if use_identical_params:
        instance_seed = (
            _get_instance_seed(name, 0) if seed is not None else _FIXED_SEED
        )
      elif seed is not None:
        instance_seed = _get_instance_seed(name, i)
      else:
        instance_seed = None
      current.append(_instantiate_task(task_type, seed=instance_seed, env=env))
    suite[name] = current
  suite = _filter_tasks(suite, task_registry, tasks)

  # Sort suite alphabetically by task name.
  return Suite(sorted(suite.items()))


def _suggest_keyword(
    typo: str, keywords: list[str], threshold: int = 80
) -> str:
  """Suggests a keyword."""
  suggestion, score = process.extractOne(typo, keywords)
  if score >= threshold:
    return f" Did you mean '{suggestion}'?"
  else:
    return ''


def _filter_tasks(
    suite: dict[str, list[task_eval.TaskEval]],
    task_registry: dict[str, Type[task_eval.TaskEval]],
    tasks: list[str] | None = None,
) -> dict[str, list[task_eval.TaskEval]]:
  """Filters a suite by specific tasks.

  Args:
    suite: The suite to retrieve tasks from.
    task_registry: The task registry the suite is from.
    tasks: The tasks to retrieve. If None, just return entire suite.

  Returns:
    A "mini-suite" of tasks from suite.

  Raises:
    ValueError: If invalid task name.
  """
  if tasks is None:
    return suite
  subset = {}

  # Validate.
  for name in tasks:
    if name not in task_registry:
      raise ValueError(
          f'Task {name} not found in the task registry.'
          + _suggest_keyword(name, list(task_registry.keys()))
      )

  # Filter.
  for name, instances in suite.items():
    if name in tasks:
      subset[name] = instances
  return subset


def _run_task(
    task: task_eval.TaskEval,
    run_episode: Callable[[task_eval.TaskEval], episode_runner.EpisodeResult],
    env: interface.AsyncEnv,
    demo_mode: bool,
) -> dict[str, Any]:
  """Runs a task.

  Args:
    task: The task.
    run_episode: Runs the agent on the task.
    env: Environment that will be run on.
    demo_mode: Whether running in demo mode; will display success overlay if so.

  Returns:
    Episode data and associated success signals.

  Raises:
    ValueError: If step data was not as expected.
  """
  start = time.time()
  try:
    task.initialize_task(env)
    print(f'Running task {task.name} with goal "{task.goal}"')
    interaction_results = run_episode(task)
    task_successful = task.is_successful(env)
  except Exception:  # pylint: disable=broad-exception-caught
    print('~' * 80 + '\n' + f'SKIPPING {task.name}.')
    traceback.print_exc()
    return _create_failed_result(
        task.name, task.goal, traceback.format_exc(), time.time() - start
    )
  else:
    agent_successful = task_successful if interaction_results.done else 0.0
    print(
        f'{"Task Successful ‚úÖ" if agent_successful > 0.5 else "Task Failed ‚ùå"};'
        f' {task.goal}'
    )

    if demo_mode:
      _display_success_overlay(env.controller, agent_successful)

    result = {
        constants.EpisodeConstants.GOAL: task.goal,
        constants.EpisodeConstants.TASK_TEMPLATE: task.name,
        constants.EpisodeConstants.EPISODE_DATA: interaction_results.step_data,
        constants.EpisodeConstants.IS_SUCCESSFUL: agent_successful,
        constants.EpisodeConstants.RUN_TIME: time.time() - start,
        constants.EpisodeConstants.FINISH_DTIME: datetime.datetime.now(),
        constants.EpisodeConstants.EPISODE_LENGTH: len(
            interaction_results.step_data[constants.STEP_NUMBER]
        ),
        constants.EpisodeConstants.SCREEN_CONFIG: _get_screen_config(task),
        constants.EpisodeConstants.EXCEPTION_INFO: None,
        constants.EpisodeConstants.SEED: task.params[
            constants.EpisodeConstants.SEED
        ],
    }
    task.tear_down(env)
    return result


def _get_task_info(
    episodes: list[dict[str, Any]],
) -> tuple[dict[str, list[dict[str, Any]]], dict[str, list[dict[str, Any]]]]:
  """Gets task info from episodes.

  Args:
    episodes: Episodes to get info from.

  Returns:
    A tuple of completed and failed task lookup tables.
  """

  completed = collections.defaultdict(list)
  failed = collections.defaultdict(list)
  for episode in episodes:
    instance_name = (
        episode[constants.EpisodeConstants.TASK_TEMPLATE]
        + checkpointer_lib.INSTANCE_SEPARATOR
        + str(episode[constants.EpisodeConstants.INSTANCE_ID])
    )
    if episode.get(constants.EpisodeConstants.EXCEPTION_INFO) is not None:
      failed[instance_name].append(episode)
    else:
      completed[instance_name].append(episode)
  return completed, failed


def _run_task_suite(
    suite: Suite,
    run_episode: Callable[[task_eval.TaskEval], episode_runner.EpisodeResult],
    env: interface.AsyncEnv,
    checkpointer: checkpointer_lib.Checkpointer = checkpointer_lib.NullCheckpointer(),
    demo_mode: bool = False,
    agent_name: str = '',
) -> list[dict[str, Any]]:
  """Runs e2e system on suite.

  Args:
    suite: The suite to run it on.
    run_episode: The e2e system. See run_suite.py for an example.
    env: The environment e2e system runs on.
    checkpointer: See docstring from `run`.
    demo_mode: Whether to display the scoreboard.
    agent_name: The name of the agent.

  Returns:
    Metadata for each episode, including the scripted reward.
  """
  metadata_fields = [
      constants.EpisodeConstants.GOAL,
      constants.EpisodeConstants.TASK_TEMPLATE,
      constants.EpisodeConstants.INSTANCE_ID,
      constants.EpisodeConstants.IS_SUCCESSFUL,
      constants.EpisodeConstants.EPISODE_LENGTH,
      constants.EpisodeConstants.RUN_TIME,
      constants.EpisodeConstants.EXCEPTION_INFO,
  ]
  completed_tasks, failed_tasks = _get_task_info(
      checkpointer.load(fields=metadata_fields)
  )
  episodes_metadata: list[dict[str, Any]] = []
  correct, total = 0, 0
  for name, instances in suite.items():
    msg = 'Running task: ' + name
    print(msg + '\n' + '=' * len(msg))

    for i, instance in enumerate(instances):
      instance_name = (
          instance.name + checkpointer_lib.INSTANCE_SEPARATOR + str(i)
      )
      # Transferring from old checkpoint.
      if instance_name in completed_tasks:
        completed_episodes: list[dict[str, Any]] = completed_tasks[
            instance_name
        ]
        episodes_metadata.extend(completed_episodes)
      if instance_name in failed_tasks:
        episodes_metadata.extend(failed_tasks[instance_name])
      already_processed = (
          instance_name in completed_tasks and instance_name not in failed_tasks
      )
      if already_processed:
        print(f'Skipping already processed task {instance_name}')
        continue

      episode = _run_task(instance, run_episode, env, demo_mode=demo_mode)
      episode[constants.EpisodeConstants.AGENT_NAME] = agent_name
      episode[constants.EpisodeConstants.INSTANCE_ID] = i
      checkpointer.save_episodes([episode], instance_name)

      episodes_metadata.append({k: episode[k] for k in metadata_fields})
      process_episodes(episodes_metadata, print_summary=True)

      if episode[constants.EpisodeConstants.EXCEPTION_INFO] is not None:
        # Don't include episode in tally if execution/eval logic errored out.
        continue
      correct += episode[constants.EpisodeConstants.IS_SUCCESSFUL]
      total += 1
      if demo_mode:
        _update_scoreboard(correct, total, env.controller)
    print()

  return episodes_metadata


def run(
    suite: Suite,
    agent: base_agent.EnvironmentInteractingAgent,
    checkpointer: checkpointer_lib.Checkpointer = checkpointer_lib.NullCheckpointer(),
    demo_mode: bool = False,
) -> list[dict[str, Any]]:
  """Create suite and runs eval suite.

  Args:
    suite: The suite of tasks to run on.
    agent: An agent that interacts on the environment.
    checkpointer: Checkpointer that loads from existing run and resumes from
      there. NOTE: It will resume from the last fully completed task template.
      Relatedly, data for a task template will not be saved until all instances
      are executed.
    demo_mode: Whether to run in demo mode, which displays a scoreboard and the
      task instruction as a notification.

  Returns:
    Step-by-step data from each episode.
  """

  def run_episode(task: task_eval.TaskEval) -> episode_runner.EpisodeResult:
    if demo_mode:
      _display_goal(agent.env, task)
    return episode_runner.run_episode(
        goal=task.goal,
        agent=agent,
        max_n_steps=_allocate_step_budget(task.complexity),
        start_on_home_screen=task.start_on_home_screen,
        termination_fn=(
            miniwob_base.is_episode_terminated
            if task.name.lower().startswith('miniwob')
            else None
        ),
    )

  if demo_mode:
    adb_utils.send_android_intent(
        'broadcast',
        'com.example.ACTION_UPDATE_SCOREBOARD',
        agent.env.controller,
        extras={'player_name': agent.name, 'scoreboard_value': '00/00'},
    )

  results = _run_task_suite(
      suite,
      run_episode,
      agent.env,
      checkpointer=checkpointer,
      demo_mode=demo_mode,
      agent_name=agent.name,
  )

  return results


def _allocate_step_budget(task_complexity: int) -> int:
  """Allocates number of steps dynamically based on the complexity score.

  Args:
    task_complexity: Complexity score of the task.

  Returns:
    Allocated number of steps for the task.
  """
  if task_complexity is None:
    raise ValueError('Task complexity must be provided.')
  return int(10 * (task_complexity))


def _display_message(
    header: str, body: str, env: env_interface.AndroidEnvInterface
) -> None:
  adb_utils.send_android_intent(
      'broadcast',
      'com.example.ACTION_UPDATE_OVERLAY',
      env,
      extras={'task_type_string': header, 'goal_string': body},
  )


def _display_goal(env: interface.AsyncEnv, task: task_eval.TaskEval) -> None:
  """Displays the goal on the screen using Android World.

  Args:
    env: The environment.
    task: The current task.
  """
  adb_utils.launch_app('android world', env.controller)
  time.sleep(1.0)
  _display_message(task.goal, task.name, env.controller)
  time.sleep(6.0)
  adb_utils.press_home_button(env.controller)
  time.sleep(1.0)


def _get_screen_config(task: task_eval.TaskEval) -> dict[str, Any]:
  return {
      'width': task.width if hasattr(task, 'width') else 1080,
      'height': task.height if hasattr(task, 'height') else 2400,
      'orientation': (
          task.orientation if hasattr(task, 'orientation') else 'portrait'
      ),
      'config_name': (
          task.config_name if hasattr(task, 'config_name') else 'default'
      ),
  }


def _create_failed_result(
    name: str, goal: str, exception: str, run_time: float
) -> dict[str, Any]:
  """Creates empty result to use if the run fails for some reason."""
  return {
      constants.EpisodeConstants.GOAL: goal,
      constants.EpisodeConstants.TASK_TEMPLATE: name,
      constants.EpisodeConstants.EPISODE_DATA: np.nan,
      constants.EpisodeConstants.IS_SUCCESSFUL: np.nan,
      constants.EpisodeConstants.FINISH_DTIME: datetime.datetime.now(),
      constants.EpisodeConstants.RUN_TIME: run_time,
      constants.EpisodeConstants.EPISODE_LENGTH: np.nan,
      constants.EpisodeConstants.EXCEPTION_INFO: exception,
  }


def _display_success_overlay(
    env: env_interface.AndroidEnvInterface, success: float
) -> None:
  """Displays success overlay."""
  adb_utils.send_android_intent(
      'broadcast',
      'com.example.ACTION_UPDATE_OVERLAY',
      env,
      extras={'success_string': str(int(success))},
  )
  time.sleep(1.0)  # Let display linger.


def _update_scoreboard(
    n_correct: int, n: int, env: env_interface.AndroidEnvInterface
) -> None:
  """Updates the scoreboard."""
  percentage = (n_correct / n) * 100
  scoreboard_value = f'{n_correct}/{n} ({percentage:.1f}%)'

  adb_utils.send_android_intent(
      'broadcast',
      'com.example.ACTION_UPDATE_SCOREBOARD',
      env,
      extras={'scoreboard_value': scoreboard_value},
  )


def _extract_task_metadata() -> pd.DataFrame:
  """Extracts metadata from task_metadata.json."""
  name = 'task_metadata.json'
  filepath = os.path.join(os.path.dirname(os.path.abspath(__file__)), name)
  df = pd.read_json(filepath)
  df.rename(columns={_TASK_TEMPLATE_COLUMN: _TASK_PROMPT_COLUMN}, inplace=True)
  df.rename(columns={'task_name': _TASK_TEMPLATE_COLUMN}, inplace=True)
  return df.set_index(_TASK_TEMPLATE_COLUMN)[
      ['difficulty', 'optimal_steps', 'tags']
  ]


def _print_results_by_tag(result_df: pd.DataFrame) -> None:
  exploded_df = result_df.explode('tags').reset_index()
  exploded_df.tags.replace(regex=r'', value='untagged', inplace=True)
  return (
      exploded_df.groupby(['tags', 'difficulty'], as_index=False)
      .agg(
          num_tasks=(_TASK_TEMPLATE_COLUMN, 'count'),
          mean_success_rate=('mean_success_rate', 'mean'),
      )
      .pivot_table(
          index=['tags'],
          columns='difficulty',
          values=[
              'mean_success_rate',
          ],
      )
      .fillna('-')
      .reindex(columns=['easy', 'medium', 'hard'], level='difficulty')
  )


def process_episodes(
    episodes: list[dict[str, Any]], print_summary: bool = False
) -> pd.DataFrame:
  """Processes task suite results; i.e. the output from `run_task_suite`.

  results = run_task_suite(...)
  # Contents of results.
  results = [
    {
        'goal': 'Pause the stopwatch.',
        'task_template': 'ClockStopWatchPaused',
        'episode_data': ...,
        'is_successful': True
    },
    {
        'goal': 'Pause the stopwatch.',
        'task_template': 'ClockStopWatchPaused',
        'episode_data': ...,
        'is_successful': False
    },
    {
        'goal': 'Run the stopwatch.',
        'task_template': 'ClockStopWatchRunnin',
        'episode_data': ...,
        'is_successful': True
    },
    {
        'goal': 'Run the stopwatch.',
        'task_template': 'ClockStopWatchRunnin',
        'episode_data': ...,
        'is_successful': True
    }
  ]

  process_episodes(results)
  # Output:
  # | task_template               |   n_trials |   average_success_rate |
  # |:----------------------------|-----------:|-----------------------:|
  # | ClockStopWatchPausedVerify  |          2 |                   0.5  |
  # | ClockStopWatchRunning       |          2 |                   1    |
  # | ==========Average========== |          2 |                   0.75 |

  Args:
    episodes: Results from running `run_task_suite`.
    print_summary: Whether to print the dataframe with a summary row.

  Returns:
    A dataframe aggregating results of run.
  """

  df = pd.DataFrame(list(episodes))

  # Add exeception info for backwards compatibility.
  df = df.assign(**{
      constants.EpisodeConstants.EXCEPTION_INFO: df.get(
          constants.EpisodeConstants.EXCEPTION_INFO, np.nan
      )
  })

  result_df = df.groupby(
      constants.EpisodeConstants.TASK_TEMPLATE, dropna=True
  ).agg({
      constants.EpisodeConstants.IS_SUCCESSFUL: ['count', 'mean'],
      constants.EpisodeConstants.EPISODE_LENGTH: 'mean',
      constants.EpisodeConstants.RUN_TIME: 'sum',
      constants.EpisodeConstants.EXCEPTION_INFO: [
          ('none_count', lambda x: x.notnull().sum())
      ],
  })
  result_df = result_df.sort_index()
  result_df.columns = [
      'num_complete_trials',
      'mean_success_rate',
      'mean_episode_length',
      'total_runtime_s',
      'num_fail_trials',
  ]
  result_df['total_runtime_s'] = result_df['total_runtime_s'].map(
      lambda x: float('{:.1f}'.format(x))
  )

  # Extract metadata and merge with the results table.
  metadata_df = _extract_task_metadata()
  tagged_result_df = result_df.merge(
      metadata_df, on=[_TASK_TEMPLATE_COLUMN], how='left'
  )

  if print_summary:
    avg = result_df.mean(axis=0)
    avg.name = '========= Average ========='

    result = pd.concat([result_df, avg.to_frame().T])
    result.index.name = 'task'
    result.insert(0, 'task_num', list(range(len(result) - 1)) + [0])
    result.task_num = result.task_num.astype(int)
    pd.set_option('display.max_columns', 100)
    pd.set_option('display.max_rows', 1000)
    pd.set_option('display.width', 1000)
    print(f'\n\n{result}')

    # Add a chart that shows mean success rate by tag and difficulty.
    tags_df = _print_results_by_tag(tagged_result_df)
    pd.set_option('display.precision', 2)
    print(f'\n\n{tags_df}')

  return tagged_result_df


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Interface for a task and the evaluation logic for that task."""

import abc
import random
from typing import Any
from absl import logging
from android_world.env import adb_utils
from android_world.env import device_constants
from android_world.env import interface
from android_world.utils import app_snapshot
from android_world.utils import datetime_utils
import jsonschema


class TaskEval(abc.ABC):
  """Interface for a task and its evaluation.

  It consists of two parts: a) defining the task, which consists of a template
  and parameters and b) logic to determine if a task is complete.
  """

  template = ""  # Each task eval needs a template.
  device_time = device_constants.DT

  start_on_home_screen = True

  def __init__(self, params: dict[str, Any]):
    self.initialized = False
    jsonschema.validate(params, self.schema)
    self._params = params

  @property
  @abc.abstractmethod
  def complexity(self) -> int:
    """The complexity of the task.

    We use heuristics to dynamically allocate number of steps based on the
    complexity of the task. These are roughly calculated.

    complexity | budget
    1 | 1-10 steps
    2 | 11-20 steps
    ...
    """

  @property
  def name(self) -> str:
    """The name of the task."""
    return self.__class__.__name__

  @property
  @abc.abstractmethod
  def app_names(self) -> tuple[str, ...]:
    """The names of the apps that the agent will be interacting with during the task.

    Apps will be closed upon app initialization. The app names should correspond
    to the regex patterns in adb_utils._PATTERN_TO_ACTIVITY.
    """

  @property
  @abc.abstractmethod
  def schema(self) -> dict[str, Any]:
    """The JSON Schema of parameters for defining the task.

    E.g., for a task that validates a certain date has been set, this could be
    ```
    {
      "type": "object",
      "properties": {
          "day": {"type": "string"},
          "month": {"type": "string"},
          "year": {"type": "string"},
      },
      "required": ["day", "month", "year"],
    }
    ```
    """

  @property
  def params(self) -> dict[str, Any]:
    """The parameters for defining the task.

    They define the task's inputs: i.e. what is necessary for the task to be
    performed + evaluated.
    """
    return self._params

  @property
  def goal(self) -> str:
    """The language goal constructed from the template with the params."""
    return self.template.format(**self.params)

  @classmethod
  @abc.abstractmethod
  def generate_random_params(cls) -> dict[str, Any]:
    """Returns a random set of parameters for defining the task."""

  def _initialize_apps(self, env: interface.AsyncEnv) -> None:

    for app_name in self.app_names:
      if app_name:
        try:
          app_snapshot.restore_snapshot(app_name, env.controller)
        except RuntimeError as error:
          logging.warn("Skipping app snapshot loading : %s", error)

  @classmethod
  def set_device_time(cls, env: interface.AsyncEnv) -> None:
    """Sets the device time."""
    del env
    cls.device_time = device_constants.DT

  def initialize_device_time(self, env: interface.AsyncEnv) -> None:
    """Initializes the device time."""
    datetime_utils.setup_datetime(env.controller)
    datetime_utils.set_datetime(env.controller, self.device_time)

  def initialize_task(self, env: interface.AsyncEnv) -> None:  # pylint: disable=unused-argument
    """Initializes the task."""
    # Reset the interaction cache so previous tasks don't affect this run:
    env.interaction_cache = ""
    self.initialize_device_time(env)
    self._initialize_apps(env)
    logging.info("Initializing %s", self.name)
    if self.initialized:
      raise RuntimeError(f"{self.name}.initialize_task() is already called.")
    self.initialized = True

    # Set random seed for so that any random params initialized here are
    # deterministic when initialize_task is called again.
    seed = self.params.get("seed")
    if seed is not None:
      random.seed(seed)

  def _check_is_initialized(self) -> None:
    if not self.initialized:
      raise RuntimeError(
          f"{self.name}.initialize_task() must be called before"
          f" {self.name}.is_successful()."
      )

  def is_successful(self, env: interface.AsyncEnv) -> float:  # pylint: disable=unused-argument
    """Determines if the task is successful.

    Args:
      env:

    Returns:
      0: Not successful.
      1.0: Task is successful.

      For composite tasks, that combine together multiple tasks, the output is
      defined as sum(successful_tasks)/total_tasks.
    """
    self._check_is_initialized()
    return 1.0

  def tear_down(self, env: interface.AsyncEnv) -> None:  # pylint: disable=unused-argument
    """Tears down the task."""
    self._initialize_apps(env)
    adb_utils.close_recents(env.controller)
    self.initialized = False
    logging.info("Tearing down %s", self.name)


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from typing import Any
from unittest import mock
from absl.testing import absltest
from android_world.env import interface
from android_world.task_evals import task_eval
from android_world.utils import test_utils


class MockTaskEval(task_eval.TaskEval):

  @property
  def complexity(self) -> int:
    return 1

  @property
  def app_names(self) -> tuple[str, ...]:
    return ("MockApp",)

  @property
  def schema(self) -> dict[str, Any]:
    return {
        "type": "object",
        "properties": {
            "param1": {"type": "string"},
        },
        "required": ["param1"],
    }

  @property
  def template(self) -> str:
    return "Mock task with {param1}"

  @classmethod
  def generate_random_params(cls) -> dict[str, str]:
    return {"param1": "value1"}

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    return 1.0


class TestTaskEval(test_utils.AdbEvalTestBase):

  def setUp(self):
    super().setUp()
    self.params = {"param1": "test"}
    self.mock_env = mock.create_autospec(interface.AsyncEnv)
    self.scripted_task = MockTaskEval(self.params)

  def test_initialization(self):
    self.assertFalse(self.scripted_task.initialized)
    self.scripted_task.initialize_task(self.mock_env)
    self.mock_set_datetime.assert_called_once()
    self.assertTrue(self.scripted_task.initialized)

  def test_initialize_already_initialized(self):
    self.scripted_task.initialize_task(self.mock_env)
    with self.assertRaises(RuntimeError):
      self.scripted_task.initialize_task(self.mock_env)

  def test_is_successful_not_initialized(self):
    with self.assertRaises(RuntimeError):
      self.scripted_task.is_successful(self.mock_env)

  def test_name_property(self):
    self.assertEqual(self.scripted_task.name, "MockTaskEval")

  def test_goal_property(self):
    self.assertEqual(self.scripted_task.goal, "Mock task with test")

  def test_tear_down(self):
    self.scripted_task.tear_down(self.mock_env)
    self.mock_close_recents.assert_called_once()


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from absl.testing import absltest
from absl.testing import parameterized
from android_world.task_evals.information_retrieval import task_app_utils
from android_world.task_evals.information_retrieval.proto import state_pb2
from android_world.task_evals.information_retrieval.proto import task_pb2


class TaskAppUtilsTest(parameterized.TestCase):

  @parameterized.parameters([
      (
          state_pb2.TasksAppTask(
              due_date='October 15 2023',
              due_time='12:30',
              importance='2',
              title='Meeting',
          ),
          [
              task_pb2.ExclusionCondition(
                  field='due_date',
                  value='October 15 2023',
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
              )
          ],
          False,
      ),
      (
          state_pb2.TasksAppTask(
              completed_date='October 22 2023',
              due_date='October 25 2023',
              importance='1',
              title='Meeting',
          ),
          [
              task_pb2.ExclusionCondition(
                  field='completed_date',
                  value='October 24 2023',
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
              )
          ],
          True,
      ),
      (
          state_pb2.TasksAppTask(
              hide_until_date='October 22 2023',
              hide_until_time='12:30',
              importance='3',
              title='Meeting',
          ),
          [
              task_pb2.ExclusionCondition(
                  field='hide_until_time',
                  value='12:30pm',
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
              )
          ],
          False,
      ),
      (
          state_pb2.TasksAppTask(
              due_date='October 22 2023',
              due_time='12:30',
              importance='1',
              title='Meeting with David',
          ),
          [
              task_pb2.ExclusionCondition(
                  field='due_date',
                  value='October 24 2023',
                  operation=task_pb2.ExclusionCondition.Operation.GREATER_THAN,
              ),
              task_pb2.ExclusionCondition(
                  field='title',
                  value='David',
                  operation=task_pb2.ExclusionCondition.Operation.CONTAINS,
              ),
          ],
          True,
      ),
      (
          state_pb2.TasksAppTask(
              completed_date='October 22 2023',
              importance='0',
              title='Meeting with David',
          ),
          [
              task_pb2.ExclusionCondition(
                  field='title',
                  value='Jane',
                  operation=task_pb2.ExclusionCondition.Operation.CONTAINS,
              )
          ],
          True,
      ),
      (
          state_pb2.TasksAppTask(
              due_date='October 15 2023',
              due_time='12:30',
              importance='2',
              title='Meeting',
          ),
          [
              task_pb2.ExclusionCondition(
                  field='due_date',
                  value='October 15 2023',
                  operation=task_pb2.ExclusionCondition.Operation.GREATER_THAN_OR_EQUAL_TO,
              )
          ],
          False,
      ),
      (
          state_pb2.TasksAppTask(
              hide_until_date='October 22 2023',
              hide_until_time='12:30',
              importance='2',
              title='Meeting',
          ),
          [
              task_pb2.ExclusionCondition(
                  field='importance',
                  value='3',
                  operation=task_pb2.ExclusionCondition.Operation.GREATER_THAN_OR_EQUAL_TO,
              )
          ],
          True,
      ),
  ])
  def test_check_task_conditions(
      self,
      tasks_app_task: state_pb2.TasksAppTask,
      exclusion_conditions: list[task_pb2.ExclusionCondition],
      expected_value: bool,
  ):
    task = task_app_utils.create_task_from_proto(tasks_app_task)
    self.assertEqual(
        task_app_utils.check_task_conditions(task, exclusion_conditions),
        expected_value,
    )


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Information Retrieval utils for Simple Calendar Pro."""

import datetime
import random
import zoneinfo
from android_world.env import device_constants
from android_world.env import interface
from android_world.task_evals.information_retrieval import datetime_utils as datetime_utils_ir
from android_world.task_evals.information_retrieval import proto_utils
from android_world.task_evals.information_retrieval.proto import state_pb2
from android_world.task_evals.information_retrieval.proto import task_pb2
from android_world.task_evals.single.calendar import calendar_utils as utils
from android_world.task_evals.single.calendar import events_generator
from android_world.task_evals.utils import sqlite_schema_utils
from android_world.utils import datetime_utils

TIME_FORMAT = '%H:%M'
DEFAULT_DURATION_S = 1800  # 30 minutes


def parse_duration(duration: str) -> int:
  """Converts a duration string into a seconds integer.

  Handles the following formats:
    %dh,%d hour(s), %dm, %d minutes

  This is not very robust and assumes the inputs are correctly formatted.
  Args:
    duration: The duration string to convert.

  Returns:
    int: The number of seconds corresponding to the input duration.
  """
  if 'h' in duration:
    return int(3600 * float(duration[: duration.find('h')].strip()))
  if 'm' in duration:
    return 60 * int(duration[: duration.find('m')].strip())

  raise ValueError(f'Invalid duration: {duration}')


def create_event_from_proto(
    event: state_pb2.Event,
) -> sqlite_schema_utils.CalendarEvent:
  """Creates an Event object from a state_pb2.Event proto."""
  start_unix_ts = convert_datetime_to_unix_ts(
      event.start_date, event.start_time
  )
  duration = DEFAULT_DURATION_S
  if event.HasField('duration'):
    duration = parse_duration(event.duration)
  end_ts = start_unix_ts + duration
  return sqlite_schema_utils.CalendarEvent(
      start_ts=start_unix_ts,
      end_ts=end_ts,
      title=event.title,
      location=event.location,
      description=event.description,
  )


def convert_str_to_datetime(
    date_str: str, time_str: str, tzinfo: zoneinfo.ZoneInfo | None = None
) -> datetime.datetime:
  """Converts a date string and a time string to a datetime.

  Handles the following formats for date_str:
    <month name> <day> <year>

  Handles the following formats for time_str:
    <24 hour format>:<minute> : e.g. 10:30, 15:00
    <12 hour format>:<minute><pm/am>: e.g. 10:30am, 10:00pm
    <12 hour format><pm/am> : e.g. 10am, 10pm

  Args:
    date_str: The date string to convert.
    time_str: The time string to convert.
    tzinfo: The timezone to use. If None, uses the default timezone.

  Returns:
    The datetime corresponding to the input date string.
  """
  dt = datetime_utils_ir.get_date(date_str)

  if dt is None:
    dt = datetime.date.fromtimestamp(device_constants.DT.timestamp())
  time_dt = datetime.time(hour=0)
  if time_str:
    time_dt = datetime_utils_ir.parse_time(time_str)
  hour = time_dt.hour
  minute = time_dt.minute

  localized_dt = datetime.datetime(
      dt.year,
      dt.month,
      dt.day,
      hour,
      minute,
      tzinfo=tzinfo if tzinfo else zoneinfo.ZoneInfo(device_constants.TIMEZONE),
  )
  return localized_dt


def convert_datetime_to_unix_ts(date_str: str, time_str: str) -> int:
  """Converts a date string and a time string to a datetime.

  See convert_str_to_datetime for supported string formats.

  Args:
    date_str: The date string to convert.
    time_str: The time string to convert.

  Returns:
    The UNIX timestamp corresponding to the input date and time strings.
  """
  return int(convert_str_to_datetime(date_str, time_str).timestamp())


def setup_task_state(
    relevant_state: state_pb2.Calendar,
    exclusion_conditions: list[task_pb2.ExclusionCondition],
    env: interface.AsyncEnv,
) -> None:
  """Initializes the calendar app with initial state + other random events.

  This is specifically for information retrieval tasks. Other tasks
  should be initialized using SQLiteApp.

  Args:
    relevant_state: The initial, required Calendar state to set up the app with.
    exclusion_conditions: A list of conditions that constrain the extra random
      events.
    env: The android environment instance.
  """
  utils.clear_calendar_db(env)
  events = []
  for event in relevant_state.events:
    events.append(create_event_from_proto(event))
  events += [generate_random_event(exclusion_conditions) for _ in range(75)]
  random.shuffle(events)
  utils.add_events(events, env)


def generate_random_event(
    exclusion_conditions: list[task_pb2.ExclusionCondition],
    max_retries: int = 100,
) -> sqlite_schema_utils.CalendarEvent:
  """Generates a random event with the given exclusion conditions."""
  attempt = 0
  while attempt < max_retries:
    event = state_pb2.Event()
    random_datetime = datetime_utils.generate_random_datetime(
        window_size=datetime.timedelta(days=30)
    )
    event.start_date = random_datetime.date().strftime(
        datetime_utils_ir.DATE_FORMAT
    )
    event.start_time = random_datetime.time().strftime(TIME_FORMAT)
    random_duration = random.choice([15, 30, 45, 60])
    event.duration = '{} m'.format(random_duration)
    event.title = events_generator.generate_event_title()
    event.description = events_generator.generate_event_description()
    if check_event_conditions(event, exclusion_conditions):
      start_ts = int(random_datetime.timestamp())
      end_ts = start_ts + random_duration * 60
      return sqlite_schema_utils.CalendarEvent(
          start_ts=start_ts,
          end_ts=end_ts,
          title=event.title,
          description=event.description,
      )
    attempt += 1
  raise ValueError(
      'Failed to create a random event that meets the exclusion conditions'
  )


def check_event_conditions(
    event: state_pb2.Event,
    exclusion_conditions: list[task_pb2.ExclusionCondition],
) -> bool:
  """Evaluates the specified event against a set of exclusion conditions.

  An event is considered eligible if it does not satisfy all of the conditions
  specified in the exclusion_conditions list. Each condition is checked against
  various fields of the event such as start date, start time, and title. The
  event is eligible if not all of these conditions are met, ensuring it doesn't
  fall under any exclusion criteria defined.

  Args:
    event: The event to check
    exclusion_conditions: All the conditions the event will be checked against,
      if they are all met, this event should be excluded and does not meet the
      conditions.

  Returns:
    A bool, True if the event does not meet all of the exclusion conditions,
    False
      otherwise.
  """
  if not exclusion_conditions:
    return True
  # Keeps track of whether an exclusion condition is met.
  all_conditions_met = True

  # If both start_date and start_time are specified in the exclusion conditions
  # as exact matches, use them together as a single datetime.
  fields_to_conditions = {
      condition.field: condition
      for condition in exclusion_conditions
      if condition.operation == task_pb2.ExclusionCondition.Operation.EQUAL_TO
  }
  if (
      'start_date' in fields_to_conditions.keys()
      and 'start_time' in fields_to_conditions.keys()
  ):
    condition_date = datetime_utils_ir.get_date(
        fields_to_conditions['start_date'].value
    )
    condition_time = datetime_utils_ir.parse_time(
        fields_to_conditions['start_time'].value
    )
    condition_datetime = datetime.datetime.combine(
        condition_date, condition_time
    )
  else:
    condition_datetime = None
  for condition in exclusion_conditions:
    start_date = datetime_utils_ir.get_date(event.start_date)
    start_time = datetime.datetime.strptime(
        event.start_time, TIME_FORMAT
    ).time()
    start_datetime = datetime.datetime.combine(start_date, start_time)
    end_datetime = start_datetime + datetime.timedelta(
        seconds=parse_duration(event.duration)
    )
    if condition.field == 'start_date':
      condition_value = (
          condition_datetime
          if condition_datetime
          else datetime_utils_ir.get_date(condition.value)
      )
      event_start_value = start_datetime if condition_datetime else start_date
      event_end_value = (
          end_datetime if condition_datetime else end_datetime.date()
      )

      if condition.operation == task_pb2.ExclusionCondition.Operation.EQUAL_TO:

        # Checks that no date between start and end overlaps with the
        # condition value.
        overlaps = proto_utils.compare(
            event_start_value,
            task_pb2.ExclusionCondition.Operation.LESS_THAN_OR_EQUAL_TO,
            condition_value,
        ) and proto_utils.compare(
            event_end_value,
            task_pb2.ExclusionCondition.Operation.GREATER_THAN_OR_EQUAL_TO,
            condition_value,
        )
      else:
        # Checks if the whole span of the event meets the exclusion condition in
        # case the event spans multiple days.
        overlaps = proto_utils.compare(
            event_start_value,
            condition.operation,
            condition_value,
        ) or proto_utils.compare(
            event_end_value,
            condition.operation,
            condition_value,
        )
      all_conditions_met = all_conditions_met and overlaps

    elif condition.field == 'start_time':
      condition_value = (
          condition_datetime
          if condition_datetime
          else datetime_utils_ir.parse_time(condition.value)
      )
      event_start_value = start_datetime if condition_datetime else start_time
      event_end_value = (
          end_datetime if condition_datetime else end_datetime.time()
      )

      if condition.operation == task_pb2.ExclusionCondition.Operation.EQUAL_TO:
        # Checks that no time between start and end time overlaps with the
        # condition value.
        overlaps = proto_utils.compare(
            event_start_value,
            task_pb2.ExclusionCondition.Operation.LESS_THAN_OR_EQUAL_TO,
            condition_value,
        ) and proto_utils.compare(
            event_end_value,
            task_pb2.ExclusionCondition.Operation.GREATER_THAN_OR_EQUAL_TO,
            condition_value,
        )

      else:
        # Checks if the whole span of the event meets the exclusion condition.
        overlaps = proto_utils.compare(
            event_start_value,
            condition.operation,
            condition_value,
        ) or proto_utils.compare(
            event_end_value,
            condition.operation,
            condition_value,
        )
      all_conditions_met = all_conditions_met and overlaps

    elif condition.field == 'title':
      all_conditions_met = all_conditions_met and proto_utils.compare(
          event.title.lower(), condition.operation, condition.value.lower()
      )

  return not all_conditions_met


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Utils for Open Tracks sports activity tracker.

App available at github.com/OpenTracksApp/OpenTracks.
"""

import datetime
import random
from android_world.env import adb_utils
from android_world.env import device_constants
from android_world.env import interface
from android_world.task_evals.information_retrieval import calendar_utils
from android_world.task_evals.information_retrieval import datetime_utils as datetime_utils_ir
from android_world.task_evals.information_retrieval import proto_utils
from android_world.task_evals.information_retrieval.proto import state_pb2
from android_world.task_evals.information_retrieval.proto import task_pb2
from android_world.task_evals.utils import sqlite_schema_utils
from android_world.task_evals.utils import sqlite_utils
from android_world.utils import datetime_utils

_PRIMARY_KEY = '_id'
_TABLE = 'tracks'
_DB_PATH = '/data/data/de.dennisguse.opentracks/databases/database.db'
_APP_NAME = 'activity tracker'

_MILES_TO_METERS = 1609.34


def setup_task_state(
    relevant_state: state_pb2.SportsActivityApp,
    exclusion_conditions: list[task_pb2.ExclusionCondition],
    env: interface.AsyncEnv,
) -> None:
  clear_db(env)
  activities = []
  for activity in relevant_state.sports_activities:
    activities.append(_create_activity_from_proto(activity))
  activities += _generate_random_activities(20, exclusion_conditions)
  random.shuffle(activities)
  _add_activities(activities, env)


def _distance_rounding_error_conversion(value: float) -> float:
  # OpenTracks stores distance in meters but displays in miles or feet.
  # To make sure that we don't lose too much precision in the conversion,
  # we first convert to miles, rounded to 2 decimal places (which is what is
  # displayed in the app) then back to rounded meters and set that value
  # both in the proto and for the app.
  return round(round(value * (1.0 / _MILES_TO_METERS), 2) * _MILES_TO_METERS)


def _create_activity_from_proto(
    activity: state_pb2.SportsActivity,
) -> sqlite_schema_utils.SportsActivity:
  """Creates a SportsActivity object from a state_pb2.SportsActivity proto."""
  start_unix_ts = (
      calendar_utils.convert_datetime_to_unix_ts(
          activity.start_date, activity.start_time
      )
      * 1000
  )

  total_distance = _distance_rounding_error_conversion(
      float(activity.total_distance)
  )
  activity.total_distance = str(total_distance)
  # Duration is in minutes, we need time to be in milliseconds.
  stop_unix_ts = start_unix_ts + int(float(activity.duration) * 60 * 1000)
  total_time = stop_unix_ts - start_unix_ts
  description = activity.description if activity.HasField('description') else ''
  category = activity.category if activity.HasField('category') else ''
  avg_speed = float(activity.total_distance) / (
      (stop_unix_ts - start_unix_ts) * 1000
  )
  return sqlite_schema_utils.SportsActivity(
      name=activity.name,
      category=category,
      activity_type=category,
      description=description,
      totaldistance=float(activity.total_distance),
      starttime=start_unix_ts,
      stoptime=stop_unix_ts,
      totaltime=total_time,
      movingtime=total_time,
      avgspeed=avg_speed,
      avgmovingspeed=avg_speed,
      elevationgain=(
          int(activity.elevation_gain)
          if activity.HasField('elevation_gain')
          else 0
      ),
      elevationloss=(
          int(activity.elevation_loss)
          if activity.HasField('elevation_loss')
          else 0
      ),
  )


def clear_db(env: interface.AsyncEnv) -> None:
  """Clears the task database."""
  sqlite_utils.delete_all_rows_from_table(_TABLE, _DB_PATH, env, _APP_NAME)
  adb_utils.close_app(_APP_NAME, env.controller)  # Register changes.


def _add_activities(
    rows: list[sqlite_schema_utils.SportsActivity],
    env: interface.AsyncEnv,
) -> None:
  sqlite_utils.insert_rows_to_remote_db(
      rows,
      _PRIMARY_KEY,
      _TABLE,
      _DB_PATH,
      _APP_NAME,
      env,
  )


def list_rows(
    env: interface.AsyncEnv,
) -> list[sqlite_schema_utils.SportsActivity]:
  return sqlite_utils.get_rows_from_remote_device(
      _TABLE,
      _DB_PATH,
      sqlite_schema_utils.SportsActivity,
      env,
  )


def _generate_random_activities(
    num_activities: int,
    exclusion_conditions: list[task_pb2.ExclusionCondition],
) -> list[sqlite_schema_utils.Task]:
  """Generates random tasks with the given exclusion conditions."""
  return sqlite_schema_utils.get_random_items(
      num_activities,
      generate_item_fn=_generate_random_activity,
      filter_fn=lambda x: _check_activity_conditions(x, exclusion_conditions),
  )


def _generate_random_activity():
  """Generates a single random sqlite_schema_utils.SportsActivity object."""
  new_activity = state_pb2.SportsActivity()
  new_activity.category = random.choice(
      list(_CATEGORY_TO_ACTIVITY_NAMES.keys())
  )
  new_activity.name = random.choice(
      _CATEGORY_TO_ACTIVITY_NAMES[new_activity.category]
  )
  # Make sure that the start date is in the past
  random_start_datetime = datetime_utils.generate_random_datetime(
      window_center=device_constants.DT - datetime.timedelta(days=7)
  )
  new_activity.start_date = random_start_datetime.date().strftime(
      datetime_utils_ir.DATE_FORMAT
  )
  new_activity.start_time = random_start_datetime.time().strftime('%H:%M')

  random_duration = datetime.timedelta(minutes=random.randrange(1, 60 * 5))
  new_activity.duration = '{}'.format(int(random_duration.seconds / 60))
  new_activity.total_distance = str(random.randint(0, 20000))
  new_activity.elevation_gain = str(random.randint(0, 500))
  new_activity.elevation_loss = str(random.randint(0, 500))
  return _create_activity_from_proto(new_activity)


def _check_activity_conditions(
    activity: sqlite_schema_utils.SportsActivity,
    exclusion_conditions: list[task_pb2.ExclusionCondition],
) -> bool:
  """Evaluates the specified task against a set of exclusion conditions.

  A activity is considered eligible if it does not satisfy all of the conditions
  specified in the exclusion_conditions list. Each condition is checked against
  various fields of the activity. The activity is eligible if not all of these
  conditions are met, ensuring it doesn't fall under any exclusion criteria
  defined.

  Args:
    activity: The activity to check.
    exclusion_conditions: All the conditions the activity will be checked
      against, if they are all met, this activity should be excluded and does
      not meet the conditions.

  Returns:
    A bool, True if the activity does not meet all of the exclusion conditions,
    False otherwise.
  """
  if not exclusion_conditions:
    return True
  # Keeps track of whether an exclusion condition is met.
  all_conditions_met = True
  for condition in exclusion_conditions:
    if condition.field == 'start_date':
      condition_value = datetime_utils_ir.get_date(condition.value)
      start_datetime = datetime_utils.timestamp_to_localized_datetime(
          int(activity.starttime / 1000)
      )

      all_conditions_met = all_conditions_met and proto_utils.compare(
          start_datetime.date(), condition.operation, condition_value
      )
    elif condition.field == 'category':
      all_conditions_met = all_conditions_met and proto_utils.compare(
          activity.category.lower(),
          condition.operation,
          condition.value.lower(),
      )
    elif condition.field == 'total_distance':
      all_conditions_met = all_conditions_met and proto_utils.compare(
          activity.totaldistance,
          condition.operation,
          float(_distance_rounding_error_conversion(float(condition.value))),
      )

  return not all_conditions_met


_CATEGORY_TO_ACTIVITY_NAMES = {
    'biking': [
        'Scenic Cycling',
        'Bike Tour',
        'Trail Ride',
        'Bicycle Adventure',
        'Pedal Excursion',
        'Cycle Trip',
        'Off-road Cycling',
        'Mountain Biking',
        'Road Cycling',
        'Bike Expedition',
    ],
    'running': [
        'Trail Run',
        'Road Run',
        'Jogging',
        'Running Adventure',
        'Sprint Session',
        'Trail Jog',
        'Long Distance Run',
        'Morning Run',
        'Evening Run',
        'Running Challenge',
    ],
    'hiking': [
        'Trail Hike',
        'Mountain Trek',
        'Hiking Excursion',
        'Nature Walk',
        'Outdoor Hike',
        'Scenic Hike',
        'Mountain Hike',
        'Wilderness Hike',
        'Hill Walk',
        'Nature Hike',
    ],
    'swimming': [
        'Pool Swim',
        'Open Water Swim',
        'Swim Workout',
        'Swim Session',
        'Swimming Adventure',
        'Lap Swim',
        'Swim Training',
        'Water Exercise',
        'Swimming Excursion',
        'Swim Challenge',
    ],
    'walking': [
        'Neighborhood Walk',
        'Evening Stroll',
        'Morning Walk',
        'Urban Walk',
        'Nature Walk',
        'City Stroll',
        'Trail Walk',
        'Casual Walk',
        'Power Walk',
        'Brisk Walk',
    ],
    'skiing': [
        'Ski Trip',
        'Slope Session',
        'Alpine Skiing',
        'Downhill Skiing',
        'Cross-country Skiing',
        'Backcountry Skiing',
        'Powder Day',
        'Snow Adventure',
        'Winter Skiing',
        'Ski Expedition',
    ],
    'snowboarding': [
        'Snowboard Trip',
        'Freestyle Session',
        'Slope Riding',
        'Snowboard Adventure',
        'Snowboarding Excursion',
        'Powder Ride',
        'Mountain Snowboarding',
        'Backcountry Snowboarding',
        'Snowboard Challenge',
        'Snowboard Trek',
    ],
    'kayaking': [
        'Kayak Tour',
        'Paddling Adventure',
        'Kayak Excursion',
        'River Paddle',
        'Lake Kayaking',
        'Sea Kayaking',
        'Kayak Expedition',
        'Waterway Paddle',
        'Kayak Journey',
        'Paddle Outing',
    ],
    'rowing': [
        'Rowing Adventure',
        'Crew Session',
        'Lake Rowing',
        'River Rowing',
        'Rowing Excursion',
        'Rowing Challenge',
        'Rowing Workout',
        'Rowing Trek',
        'Rowing Expedition',
        'Sculling Session',
    ],
    'sailing': [
        'Sailing Trip',
        'Sailing Adventure',
        'Sailboat Ride',
        'Boat Tour',
        'Yacht Sailing',
        'Sailing Excursion',
        'Nautical Adventure',
        'Sailing Expedition',
        'Windward Sailing',
        'Sailboat Expedition',
    ],
    'skateboarding': [
        'Skateboard Session',
        'Urban Skate',
        'Skatepark Session',
        'Skateboard Adventure',
        'Street Skateboarding',
        'Skateboarding Excursion',
        'Skateboard Trek',
        'Skateboard Ride',
        'Skateboard Challenge',
        'Skateboard Exploration',
    ],
    'surfing': [
        'Surf Session',
        'Beach Surfing',
        'Wave Riding',
        'Surfing Adventure',
        'Surfing Excursion',
        'Surfboard Session',
        'Surfing Challenge',
        'Surf Trek',
        'Surfing Expedition',
        'Wave Exploration',
    ],
    'climbing': [
        'Rock Climbing',
        'Indoor Climbing',
        'Bouldering',
        'Climbing Adventure',
        'Climbing Excursion',
        'Crag Climbing',
        'Mountain Climbing',
        'Rock Climbing Challenge',
        'Climbing Session',
        'Climbing Expedition',
    ],
    'mountain biking': [
        'Mountain Bike Ride',
        'Trail Biking',
        'MTB Adventure',
        'Mountain Biking Excursion',
        'Off-road Biking',
        'Dirt Biking',
        'Mountain Bike Expedition',
        'Singletrack Session',
        'MTB Trek',
        'Trail Riding',
    ],
    'road biking': [
        'Road Bike Ride',
        'Cycling Adventure',
        'Road Cycling',
        'Long Distance Ride',
        'Bike Touring',
        'Road Bike Session',
        'Countryside Cycling',
        'City Cycling',
        'Bike Commute',
        'Road Riding',
    ],
    'trail running': [
        'Trail Run',
        'Off-road Running',
        'Trail Jog',
        'Trail Running Adventure',
        'Trail Run Session',
        'Trail Running Challenge',
        'Long Distance Trail Run',
        'Trail Run Expedition',
        'Trail Running Trek',
        'Off-road Run',
    ],
    'trail hiking': [
        'Trail Hike',
        'Hiking Adventure',
        'Nature Hike',
        'Mountain Trail Hike',
        'Scenic Hiking',
        'Trail Trek',
        'Trail Walking',
        'Off-road Hike',
        'Trail Hiking Excursion',
        'Hiking Expedition',
    ],
    'cycling': [
        'Scenic Cycling',
        'Bike Tour',
        'Trail Ride',
        'Bicycle Adventure',
        'Pedal Excursion',
        'Cycle Trip',
        'Off-road Cycling',
        'Mountain Biking',
        'Road Cycling',
        'Bike Expedition',
    ],
    'paddling': [
        'Boat Tour',
        'Paddle Adventure',
        'River Paddle',
        'Lake Paddling',
        'Sea Paddling',
        'Boating Expedition',
        'Waterway Paddle',
        'Paddle Journey',
        'Paddle Outing',
        'Canoeing Adventure',
    ],
}


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from absl.testing import absltest
from absl.testing import parameterized
from android_world.task_evals.information_retrieval import activity_app_utils
from android_world.task_evals.information_retrieval.proto import state_pb2
from android_world.task_evals.information_retrieval.proto import task_pb2


class ActivityAppUtilsTest(parameterized.TestCase):

  @parameterized.parameters([
      (
          state_pb2.SportsActivity(
              start_date='October 15 2023',
              start_time='12:30',
              category='running',
              name='Morning Run',
              total_distance='10000',
              duration='60',
          ),
          [
              task_pb2.ExclusionCondition(
                  field='start_date',
                  value='October 15 2023',
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
              )
          ],
          False,
      ),
      (
          state_pb2.SportsActivity(
              start_date='October 15 2023',
              start_time='12:30',
              category='running',
              name='Morning Run',
              total_distance='10000',
              duration='60',
          ),
          [
              task_pb2.ExclusionCondition(
                  field='start_date',
                  value='October 22 2023',
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
              )
          ],
          True,
      ),
      (
          state_pb2.SportsActivity(
              start_date='October 15 2023',
              start_time='12:30',
              category='running',
              name='Morning Run',
              total_distance='10000',
              duration='60',
          ),
          [
              task_pb2.ExclusionCondition(
                  field='category',
                  value='running',
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
              )
          ],
          False,
      ),
      (
          state_pb2.SportsActivity(
              start_date='October 22 2023',
              start_time='12:30',
              category='running',
              name='Morning Run',
              total_distance='10000',
              duration='60',
          ),
          [
              task_pb2.ExclusionCondition(
                  field='start_date',
                  value='October 22 2023',
                  operation=task_pb2.ExclusionCondition.Operation.GREATER_THAN,
              ),
              task_pb2.ExclusionCondition(
                  field='category',
                  value='running',
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
              ),
          ],
          True,
      ),
      (
          state_pb2.SportsActivity(
              start_date='October 22 2023',
              start_time='12:30',
              category='running',
              name='Morning Run',
              total_distance='10000',
              duration='60',
          ),
          [
              task_pb2.ExclusionCondition(
                  field='total_distance',
                  value='10000',
                  operation=task_pb2.ExclusionCondition.Operation.GREATER_THAN_OR_EQUAL_TO,
              ),
          ],
          False,
      ),
  ])
  def test_check_task_conditions(
      self,
      activity_proto: state_pb2.SportsActivity,
      exclusion_conditions: list[task_pb2.ExclusionCondition],
      expected_value: bool,
  ):
    activity = activity_app_utils._create_activity_from_proto(activity_proto)
    self.assertEqual(
        activity_app_utils._check_activity_conditions(
            activity, exclusion_conditions
        ),
        expected_value,
    )


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import random
from unittest import mock
from absl.testing import absltest
from android_world.env import interface
from android_world.task_evals import task_eval
from android_world.task_evals.information_retrieval import activity_app_utils
from android_world.task_evals.information_retrieval import calendar_utils
from android_world.task_evals.information_retrieval import information_retrieval
from android_world.task_evals.information_retrieval import task_app_utils
from android_world.task_evals.information_retrieval.proto import state_pb2
from android_world.task_evals.information_retrieval.proto import task_pb2

DEFAULT_TASK_TEMPLATE = task_pb2.Task(
    name="test_task",
    prompt="Test {prompt} for {start_date}",
    relevant_state=task_pb2.RelevantState(
        state=state_pb2.State(
            calendar=state_pb2.Calendar(
                app_name="simple calendar pro",
                events=[
                    state_pb2.Event(
                        start_date="{start_date}",
                        start_time="10am",
                        title="{title}",
                    )
                ],
            ),
            tasks_app=state_pb2.TasksApp(
                tasks_app_tasks=[
                    state_pb2.TasksAppTask(
                        completed_date="{completed_date}",
                        importance="{importance}",
                        title="Pay Rent",
                    )
                ]
            ),
            sports_activity_app=state_pb2.SportsActivityApp(
                sports_activities=[
                    state_pb2.SportsActivity(
                        start_date="{start_date}",
                        start_time="14:00",
                        category="{category}",
                        name="Morning run",
                    )
                ]
            ),
        ),
        exclusion_conditions=[
            task_pb2.ExclusionCondition(
                operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
                field="start_date",
                value="October 16 2023",
            ),
            task_pb2.ExclusionCondition(
                operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
                field="completed_date",
                value="October 15 2023",
            ),
            task_pb2.ExclusionCondition(
                operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
                field="category",
                value="biking",
            ),
        ],
    ),
    task_params=[
        task_pb2.TaskParams(name="prompt", possible_values=["perform {task}"]),
        task_pb2.TaskParams(
            name="start_date", possible_values=["October 15 2023"]
        ),
        task_pb2.TaskParams(name="title", possible_values=["test title"]),
        task_pb2.TaskParams(
            name="completed_date", possible_values=["October 16 2023"]
        ),
        task_pb2.TaskParams(name="importance", possible_values=["0"]),
        task_pb2.TaskParams(name="category", possible_values=["running"]),
        task_pb2.TaskParams(name="task", possible_values=["task"]),
    ],
    success_criteria=task_pb2.SuccessCriteria(
        expectations=[
            task_pb2.Expectation(
                field_transformation=task_pb2.FieldTransformation(
                    field_name="title",
                ),
                match_type=task_pb2.Expectation.MatchType.STRING_MATCH,
            ),
        ]
    ),
)


class InformationRetrievalTaskForTest(
    information_retrieval.InformationRetrieval
):

  @classmethod
  def generate_random_params(cls):
    return {
        "prompt": "perform {task}",
        "start_date": "October 15 2023",
        "title": "test title",
        "importance": "0",
        "completed_date": "October 16 2023",
        "category": "running",
        "task": "task",
    }

  def __init__(
      self,
      params: dict[str, str],
      template: task_pb2.Task = DEFAULT_TASK_TEMPLATE,
  ):
    self._task_template = template
    super().__init__(params)

  @property
  def task_template(self) -> task_pb2.Task:
    return self._task_template


class InformationRetrievalTest(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.mock_env = mock.create_autospec(interface.AsyncEnv)
    self.params = {"task_name": "test_task"}
    self.mock_task = InformationRetrievalTaskForTest(
        InformationRetrievalTaskForTest.generate_random_params()
    )
    self.mock_initialize_task = mock.patch.object(
        task_eval.TaskEval, "initialize_task"
    ).start()
    self.mock_is_successful = mock.patch.object(
        task_eval.TaskEval, "is_successful"
    ).start()
    self.mock_initialize_calendar_app = mock.patch.object(
        calendar_utils, "setup_task_state"
    ).start()
    self.mock_initialize_tasks_app = mock.patch.object(
        task_app_utils, "setup_task_state"
    ).start()
    self.mock_initialize_sports_app = mock.patch.object(
        activity_app_utils, "setup_task_state"
    ).start()

  @mock.patch.object(random, "choice")
  def test_initialize_task(self, mock_choice):
    mock_choice.return_value = "today"
    expected_task = task_pb2.Task(
        name="test_task",
        prompt="Test {prompt} for {start_date}",
        relevant_state=task_pb2.RelevantState(
            state=state_pb2.State(
                calendar=state_pb2.Calendar(
                    app_name="simple calendar pro",
                    events=[
                        state_pb2.Event(
                            start_date="October 15 2023",
                            start_time="10am",
                            title="test title",
                        )
                    ],
                ),
                tasks_app=state_pb2.TasksApp(
                    tasks_app_tasks=[
                        state_pb2.TasksAppTask(
                            completed_date="October 16 2023",
                            importance="0",
                            title="Pay Rent",
                        )
                    ]
                ),
                sports_activity_app=state_pb2.SportsActivityApp(
                    sports_activities=[
                        state_pb2.SportsActivity(
                            start_date="October 15 2023",
                            start_time="14:00",
                            category="running",
                            name="Morning run",
                        )
                    ]
                ),
            ),
            exclusion_conditions=[
                task_pb2.ExclusionCondition(
                    operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
                    field="start_date",
                    value="October 16 2023",
                ),
                task_pb2.ExclusionCondition(
                    operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
                    field="completed_date",
                    value="October 15 2023",
                ),
                task_pb2.ExclusionCondition(
                    operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
                    field="category",
                    value="biking",
                ),
            ],
        ),
        task_params=[
            task_pb2.TaskParams(
                name="prompt", possible_values=["perform task"]
            ),
            task_pb2.TaskParams(
                name="start_date", possible_values=["October 15 2023"]
            ),
            task_pb2.TaskParams(name="title", possible_values=["test title"]),
            task_pb2.TaskParams(
                name="completed_date", possible_values=["October 16 2023"]
            ),
            task_pb2.TaskParams(name="importance", possible_values=["0"]),
            task_pb2.TaskParams(name="category", possible_values=["running"]),
            task_pb2.TaskParams(name="task", possible_values=["task"]),
        ],
        success_criteria=task_pb2.SuccessCriteria(
            expectations=[
                task_pb2.Expectation(
                    field_transformation=task_pb2.FieldTransformation(
                        field_name="title",
                    ),
                    match_type=task_pb2.Expectation.MatchType.STRING_MATCH,
                ),
            ]
        ),
    )

    self.mock_task.initialize_task(self.mock_env)
    self.mock_initialize_task.assert_called_once_with(self.mock_env)
    expected_exclusion_conditions = [
        task_pb2.ExclusionCondition(
            operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
            field="start_date",
            value="October 16 2023",
        ),
        task_pb2.ExclusionCondition(
            operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
            field="completed_date",
            value="October 15 2023",
        ),
        task_pb2.ExclusionCondition(
            operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
            field="category",
            value="biking",
        ),
    ]
    self.mock_initialize_calendar_app.assert_called_once_with(
        self.mock_task.task.relevant_state.state.calendar,
        expected_exclusion_conditions,
        self.mock_env,
    )
    self.mock_initialize_tasks_app.assert_called_once_with(
        self.mock_task.task.relevant_state.state.tasks_app,
        expected_exclusion_conditions,
        self.mock_env,
    )
    self.mock_initialize_sports_app.assert_called_once_with(
        self.mock_task.task.relevant_state.state.sports_activity_app,
        expected_exclusion_conditions,
        self.mock_env,
    )
    self.assertEqual(self.mock_task.task, expected_task)
    self.assertEqual(self.mock_task.goal, "Test perform task for today")

  def test_is_successful_string_match_succeeds(self):
    self.mock_task.initialize_task(self.mock_env)
    self.mock_env.interaction_cache = "Test title, Pay Rent"

    self.assertEqual(self.mock_task.is_successful(self.mock_env), 1.0)

  def test_is_successful_number_match_succeeds(self):
    new_template = task_pb2.Task()
    new_template.CopyFrom(self.mock_task.task_template)
    new_template.success_criteria.CopyFrom(
        task_pb2.SuccessCriteria(
            expectations=[
                task_pb2.Expectation(
                    field_transformation=task_pb2.FieldTransformation(
                        field_name="importance",
                    ),
                    match_type=task_pb2.Expectation.MatchType.NUMBER_MATCH,
                ),
            ]
        )
    )
    self.mock_task = InformationRetrievalTaskForTest(
        InformationRetrievalTaskForTest.generate_random_params(), new_template
    )
    self.mock_task.initialize_task(self.mock_env)
    self.mock_env.interaction_cache = "0"

    self.assertEqual(self.mock_task.is_successful(self.mock_env), 1.0)

  def test_is_successful_date_match_succeeds(self):
    new_template = task_pb2.Task()
    new_template.CopyFrom(self.mock_task.task_template)
    new_template.success_criteria.CopyFrom(
        task_pb2.SuccessCriteria(
            expectations=[
                task_pb2.Expectation(
                    field_transformation=task_pb2.FieldTransformation(
                        field_name="start_date",
                    ),
                    match_type=task_pb2.Expectation.MatchType.DATE_MATCH,
                ),
            ]
        )
    )
    self.mock_task = InformationRetrievalTaskForTest(
        InformationRetrievalTaskForTest.generate_random_params(), new_template
    )
    self.mock_task.initialize_task(self.mock_env)
    self.mock_env.interaction_cache = "October 15 2023, October 15 2023"

    self.assertEqual(self.mock_task.is_successful(self.mock_env), 1.0)

  def test_is_successful_time_match_succeeds(self):
    new_template = task_pb2.Task()
    new_template.CopyFrom(self.mock_task.task_template)
    new_template.success_criteria.CopyFrom(
        task_pb2.SuccessCriteria(
            expectations=[
                task_pb2.Expectation(
                    field_transformation=task_pb2.FieldTransformation(
                        field_name="start_time",
                    ),
                    match_type=task_pb2.Expectation.MatchType.TIME_MATCH,
                ),
            ]
        )
    )
    self.mock_task = InformationRetrievalTaskForTest(
        InformationRetrievalTaskForTest.generate_random_params(), new_template
    )
    self.mock_task.initialize_task(self.mock_env)
    self.mock_env.interaction_cache = "10:00, 14:00"

    self.assertEqual(self.mock_task.is_successful(self.mock_env), 1.0)

  def test_is_successful_datetime_match_succeeds(self):
    new_template = task_pb2.Task()
    new_template.CopyFrom(self.mock_task.task_template)
    new_template.success_criteria.CopyFrom(
        task_pb2.SuccessCriteria(
            expectations=[
                task_pb2.Expectation(
                    field_transformation=task_pb2.FieldTransformation(
                        field_name="start_date",
                    ),
                    match_type=task_pb2.Expectation.MatchType.DATE_MATCH,
                ),
                task_pb2.Expectation(
                    field_transformation=task_pb2.FieldTransformation(
                        field_name="start_time",
                    ),
                    match_type=task_pb2.Expectation.MatchType.TIME_MATCH,
                ),
            ]
        )
    )
    self.mock_task = InformationRetrievalTaskForTest(
        InformationRetrievalTaskForTest.generate_random_params(), new_template
    )
    self.mock_task.initialize_task(self.mock_env)
    self.mock_env.interaction_cache = (
        "October 15 2023 10:00, October 15 2023 14:00"
    )

    self.assertEqual(self.mock_task.is_successful(self.mock_env), 1.0)

  def test_is_successful_match_fails(self):
    new_template = task_pb2.Task()
    new_template.CopyFrom(self.mock_task.task_template)
    new_template.success_criteria.CopyFrom(
        task_pb2.SuccessCriteria(
            expectations=[
                task_pb2.Expectation(
                    field_transformation=task_pb2.FieldTransformation(
                        field_name="start_date",
                    ),
                    match_type=task_pb2.Expectation.MatchType.DATE_MATCH,
                ),
            ]
        )
    )
    self.mock_task = InformationRetrievalTaskForTest(
        InformationRetrievalTaskForTest.generate_random_params(), new_template
    )
    self.mock_task.initialize_task(self.mock_env)
    self.mock_env.interaction_cache = "October 15 2023, October 16 2023"

    self.assertEqual(self.mock_task.is_successful(self.mock_env), 0.0)

  def test_is_successful_empty_interaction_cache_fails(self):
    self.mock_env.interaction_cache = ""
    self.mock_task.initialize_task(self.mock_env)

    self.assertEqual(self.mock_task.is_successful(self.mock_env), 0.0)


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Functions for adding, deleting, and listing tasks for Tasks app database.

https://f-droid.org/en/packages/org.tasks/
"""

import datetime
import random
import uuid
from android_world.env import adb_utils
from android_world.env import device_constants
from android_world.env import interface
from android_world.task_evals.information_retrieval import calendar_utils
from android_world.task_evals.information_retrieval import datetime_utils as datetime_utils_ir
from android_world.task_evals.information_retrieval import proto_utils
from android_world.task_evals.information_retrieval.proto import state_pb2
from android_world.task_evals.information_retrieval.proto import task_pb2
from android_world.task_evals.utils import sqlite_schema_utils
from android_world.task_evals.utils import sqlite_utils
from android_world.utils import datetime_utils

_PRIMARY_KEY = '_id'
_TASK_TABLE = 'tasks'
_DB_PATH = '/data/data/org.tasks/databases/database'
_APP_NAME = 'tasks'


def setup_task_state(
    relevant_state: state_pb2.TasksApp,
    exclusion_conditions: list[task_pb2.ExclusionCondition],
    env: interface.AsyncEnv,
) -> None:
  clear_task_db(env)
  tasks = []
  for task in relevant_state.tasks_app_tasks:
    tasks.append(create_task_from_proto(task))
  tasks += generate_random_tasks(20, exclusion_conditions)
  random.shuffle(tasks)
  add_tasks(tasks, env)


def create_task_from_proto(
    task: state_pb2.TasksAppTask,
) -> sqlite_schema_utils.Task:
  """Creates a Task object from a state_pb2.TasksAppTask proto."""
  due_date_ts = 0
  hide_until_date_ts = 0
  completed_date_ts = 0
  if task.HasField('due_date'):
    due_date_ts = (
        calendar_utils.convert_datetime_to_unix_ts(task.due_date, task.due_time)
        * 1000
    )
  # created date is 1 week before due date.
  created_date_ts = due_date_ts - 7 * 3600
  if task.HasField('hide_until_date'):
    hide_until_date_ts = (
        calendar_utils.convert_datetime_to_unix_ts(
            task.hide_until_date, task.hide_until_time
        )
        * 1000
    )
  if task.HasField('completed_date'):
    completed_date_ts = (
        calendar_utils.convert_datetime_to_unix_ts(
            task.completed_date, task.completed_time
        )
        * 1000
    )
  notes = task.notes if task.HasField('notes') else None
  importance = int(task.importance) if task.HasField('importance') else 2
  return sqlite_schema_utils.Task(
      title=task.title,
      importance=importance,
      dueDate=due_date_ts,
      hideUntil=hide_until_date_ts,
      completed=completed_date_ts,
      created=created_date_ts,
      modified=created_date_ts,
      notes=notes,
      remoteId=str(uuid.uuid4().int),
      recurrence=None,
  )


def add_tasks(
    rows: list[sqlite_schema_utils.Task], env: interface.AsyncEnv
) -> None:
  sqlite_utils.insert_rows_to_remote_db(
      rows,
      _PRIMARY_KEY,
      _TASK_TABLE,
      _DB_PATH,
      _APP_NAME,
      env,
  )
  adb_utils.close_app(_APP_NAME, env.controller)  # Register changes.


def clear_task_db(env: interface.AsyncEnv) -> None:
  """Clears the task database."""
  sqlite_utils.delete_all_rows_from_table(_TASK_TABLE, _DB_PATH, env, _APP_NAME)
  adb_utils.close_app(_APP_NAME, env.controller)  # Register changes.


def list_rows(
    env: interface.AsyncEnv,
) -> list[sqlite_schema_utils.Task]:
  return sqlite_utils.get_rows_from_remote_device(
      _TASK_TABLE,
      _DB_PATH,
      sqlite_schema_utils.Task,
      env,
  )


def _generate_random_task():
  """Generates a single random sqlite_schema_utils.Task object."""
  new_task = state_pb2.TasksAppTask()
  new_task.title = random.choice(list(_TASKS.keys()))
  if random.choice([True, False]):
    new_task.notes = _TASKS[new_task.title]
  new_task.importance = str(random.choice([0, 1, 2, 3]))
  random_due_datetime = datetime_utils.generate_random_datetime()
  new_task.due_date = random_due_datetime.date().strftime(
      datetime_utils_ir.DATE_FORMAT
  )
  new_task.due_time = random_due_datetime.time().strftime('%H:%M')
  # Make sure the hide_until_date is before the due date
  random_hide_until_datetime = datetime_utils.generate_random_datetime(
      window_size=datetime.timedelta(days=5),
      window_center=random_due_datetime - datetime.timedelta(days=6),
  )
  new_task.hide_until_date = random_hide_until_datetime.date().strftime(
      '%B %d %Y'
  )
  new_task.hide_until_time = random_hide_until_datetime.time().strftime('%H:%M')
  is_completed = random.choice([True, False])
  if is_completed:
    # Make sure completed date is before current time
    random_completed_datetime = datetime_utils.generate_random_datetime(
        window_center=device_constants.DT - datetime.timedelta(days=14)
    )
    new_task.completed_date = random_completed_datetime.date().strftime(
        datetime_utils_ir.DATE_FORMAT
    )
    new_task.completed_time = random_completed_datetime.time().strftime('%H:%M')
  return create_task_from_proto(new_task)


def generate_random_tasks(
    num_tasks: int,
    exclusion_conditions: list[task_pb2.ExclusionCondition],
) -> list[sqlite_schema_utils.Task]:
  """Generates random tasks with the given exclusion conditions."""
  return sqlite_schema_utils.get_random_items(
      num_tasks,
      generate_item_fn=_generate_random_task,
      filter_fn=lambda x: check_task_conditions(x, exclusion_conditions),
  )


def check_task_conditions(
    task: sqlite_schema_utils.Task,
    exclusion_conditions: list[task_pb2.ExclusionCondition],
) -> bool:
  """Evaluates the specified task against a set of exclusion conditions.

  A task is considered eligible if it does not satisfy all of the conditions
  specified in the exclusion_conditions list. Each condition is checked against
  various fields of the task such as importance, completed date, due date, and
  title. The task is eligible if not all of these conditions are met, ensuring
  it doesn't fall under any exclusion criteria defined.

  Args:
    task: The task to check
    exclusion_conditions: All the conditions the task will be checked against,
      if they are all met, this task should be excluded and does not meet the
      conditions.

  Returns:
    A bool, True if the task does not meet all of the exclusion conditions,
    False otherwise.
  """
  if not exclusion_conditions:
    return True
  # Keeps track of whether an exclusion condition is met.
  all_conditions_met = True
  for condition in exclusion_conditions:
    if condition.field == 'due_date':
      condition_value = datetime_utils_ir.get_date(condition.value)
      due_datetime = datetime_utils.timestamp_to_localized_datetime(
          int(task.dueDate / 1000)
      )

      all_conditions_met = all_conditions_met and proto_utils.compare(
          due_datetime.date(), condition.operation, condition_value
      )
    if condition.field == 'completed_date':
      completed_datetime = datetime_utils.timestamp_to_localized_datetime(
          int(task.completed / 1000)
      )
      # Tasks app uses 0 in completed_date to indicate it's not complete.
      if condition.value == '0':
        all_conditions_met = all_conditions_met and proto_utils.compare(
            int(task.completed), condition.operation, 0
        )
      else:
        condition_value = datetime_utils_ir.get_date(condition.value)
        all_conditions_met = all_conditions_met and proto_utils.compare(
            completed_datetime.date(), condition.operation, condition_value
        )

    elif condition.field == 'title':
      all_conditions_met = all_conditions_met and proto_utils.compare(
          task.title.lower(), condition.operation, condition.value.lower()
      )
    elif condition.field == 'importance':
      all_conditions_met = all_conditions_met and proto_utils.compare(
          int(task.importance), condition.operation, int(condition.value)
      )

  return not all_conditions_met


_TASKS = {
    'Grocery Shopping': (
        'Don\t forget milk, eggs, and bread. Also need to pick up snacks for'
        ' the kids.'
    ),
    'Finish Project Proposal': (
        'Deadline is Friday. Need to finalize budget and timeline sections.'
    ),
    'Schedule Dentist Appointment': (
        "Teeth cleaning overdue. Call Dr. Smith's office."
    ),
    'Water Plants': (
        'Check moisture level before watering. Fertilize succulents.'
    ),
    'Meal Prep for the Week': (
        'Make a grocery list based on planned meals. Cook chicken and chop'
        ' veggies on Sunday.'
    ),
    'Research Vacation Destinations': (
        'Looking for beach destinations with family-friendly activities.'
    ),
    "Read 'The Martian'": 'Started last week. Aim to finish by next weekend.',
    'Call Grandma': (
        'Catch up on family news. Ask for her famous cookie recipe.'
    ),
    'Change Air Filter': (
        'Last changed 3 months ago. Buy a new filter at the hardware store.'
    ),
    'Brainstorm Blog Post Ideas': (
        "Need 5 new topics for the next month's content calendar."
    ),
    "Renew Driver's License": (
        'Expires next month. Check DMV website for requirements.'
    ),
    'Organize Closet': (
        'Donate old clothes and shoes. Put winter clothes in storage.'
    ),
    'Submit Expense Report': (
        'Deadline is Wednesday. Attach receipts for all purchases.'
    ),
    'Attend Team Meeting': (
        'Agenda includes project updates and brainstorming new initiatives.'
    ),
    'Learn to Play Guitar': (
        'Practice chords for 30 minutes every day. Find online tutorials.'
    ),
    'Reply to Emails': (
        'Inbox is overflowing. Prioritize urgent messages and unsubscribe from'
        ' unwanted lists.'
    ),
    'Clean Out Fridge': (
        'Check expiration dates and discard old food. Wipe down shelves.'
    ),
    'Create Budget for Next Month': (
        'Track income and expenses. Set savings goals.'
    ),
    'Back Up Computer Files': (
        'Use external hard drive or cloud storage. Schedule regular backups.'
    ),
    'Take Dog to the Vet': 'Annual checkup and vaccinations due.',
}


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import datetime
from typing import Any
from absl.testing import absltest
from absl.testing import parameterized
from android_world.task_evals.information_retrieval import proto_utils
from android_world.task_evals.information_retrieval.proto import state_pb2
from android_world.task_evals.information_retrieval.proto import task_pb2
from android_world.task_evals.utils import sqlite_schema_utils


class ProtoUtilsTest(parameterized.TestCase):

  @parameterized.parameters([
      (
          [
              state_pb2.Event(
                  start_date='{month} {day} 2023',
                  duration='{duration}',
                  location='{location}',
                  description='{description}',
              )
          ],
          {
              'month': 'October',
              'day': '1',
              'extra': 'extra',
              'duration': '60m',
              'location': 'Mountain View',
              'description': 'Meeting',
          },
          [],
          [
              state_pb2.Event(
                  start_date='October 1 2023',
                  duration='60m',
                  location='Mountain View',
                  description='Meeting',
              )
          ],
      ),
      (
          [
              state_pb2.Event(
                  start_date='{date}',
                  duration='{duration}',
                  start_time='{time}',
              ),
              state_pb2.Event(
                  start_date='{date_without_replacement}',
                  duration='{duration_without_replacement}',
                  start_time='{time_without_replacement}',
              ),
          ],
          {
              'date': 'next Tuesday',
              'time': '12:30',
              'duration': '1h',
          },
          [
              task_pb2.TaskParams(
                  name='date', possible_values=['next Tuesday', 'today']
              ),
              task_pb2.TaskParams(
                  name='time', possible_values=['12:30', '5pm']
              ),
              task_pb2.TaskParams(
                  name='duration', possible_values=['15m', '1h']
              ),
          ],
          [
              state_pb2.Event(
                  start_date='next Tuesday',
                  duration='1h',
                  start_time='12:30',
              ),
              state_pb2.Event(
                  start_date='today',
                  duration='15m',
                  start_time='5pm',
              ),
          ],
      ),
  ])
  def test_format_calendar_state_with_params(
      self,
      events: list[state_pb2.Event],
      chosen_params: dict[str, Any],
      all_params: list[task_pb2.TaskParams],
      expected_events: list[sqlite_schema_utils.CalendarEvent],
  ):
    calendar = state_pb2.Calendar(events=events)
    state = state_pb2.State(calendar=calendar)
    expected_all_params = []
    for param in all_params:
      expected_param = task_pb2.TaskParams()
      expected_param.CopyFrom(param)
      expected_all_params.append(expected_param)
    proto_utils.format_state_with_params(state, chosen_params, all_params)

    self.assertEqual(
        list(state.calendar.events),
        expected_events,
    )
    # Make sure all_params hasn't been modified.
    self.assertEqual(
        all_params,
        expected_all_params,
    )

  @parameterized.parameters([
      (
          [
              state_pb2.TasksAppTask(
                  due_date='{month} {day} 2023',
                  importance='{importance}',
                  title='{title}',
              )
          ],
          {
              'month': 'October',
              'day': '1',
              'extra': 'extra',
              'importance': '3',
              'title': 'Unimportant task',
          },
          [],
          [
              state_pb2.TasksAppTask(
                  due_date='October 1 2023',
                  importance='3',
                  title='Unimportant task',
              )
          ],
      ),
      (
          [
              state_pb2.TasksAppTask(
                  completed_date='{date}',
                  title='{title}',
                  importance='{importance}',
              ),
              state_pb2.TasksAppTask(
                  completed_date='{date_without_replacement}',
                  title='{title_without_replacement}',
                  importance='{importance_without_replacement}',
              ),
          ],
          {
              'date': 'next Tuesday',
              'title': 'Pay Rent',
              'importance': '0',
          },
          [
              task_pb2.TaskParams(
                  name='date', possible_values=['next Tuesday', 'today']
              ),
              task_pb2.TaskParams(
                  name='title', possible_values=['Pay Rent', 'Unimportant task']
              ),
              task_pb2.TaskParams(
                  name='importance', possible_values=['0', '3']
              ),
          ],
          [
              state_pb2.TasksAppTask(
                  completed_date='next Tuesday',
                  importance='0',
                  title='Pay Rent',
              ),
              state_pb2.TasksAppTask(
                  completed_date='today',
                  importance='3',
                  title='Unimportant task',
              ),
          ],
      ),
  ])
  def test_format_tasks_app_state_with_params(
      self,
      tasks_app_tasks: list[state_pb2.TasksAppTask],
      chosen_params: dict[str, Any],
      all_params: list[task_pb2.TaskParams],
      expected_tasks: list[sqlite_schema_utils.Task],
  ):
    tasks_app = state_pb2.TasksApp(tasks_app_tasks=tasks_app_tasks)
    state = state_pb2.State(tasks_app=tasks_app)
    expected_all_params = []
    for param in all_params:
      expected_param = task_pb2.TaskParams()
      expected_param.CopyFrom(param)
      expected_all_params.append(expected_param)
    proto_utils.format_state_with_params(state, chosen_params, all_params)

    self.assertEqual(
        list(state.tasks_app.tasks_app_tasks),
        expected_tasks,
    )
    self.assertEqual(all_params, expected_all_params)

  def test_format_initial_calendar_state_with_params(self):
    params = {
        'month': 'October',
        'day': '1',
        'extra': 'extra',
        'duration': '60m',
        'location': 'Mountain View',
        'description': 'Meeting',
    }

    event = state_pb2.Event()
    event.start_date = '{month} {day} 2023'
    event.duration = '{duration}'
    event.location = '{location}'
    event.description = '{description}'

    expected_event = state_pb2.Event()
    expected_event.start_date = 'October 1 2023'
    expected_event.duration = '60m'
    expected_event.location = 'Mountain View'
    expected_event.description = 'Meeting'

    exclusion_condition = task_pb2.ExclusionCondition()
    exclusion_condition.operation = task_pb2.ExclusionCondition.EQUAL_TO
    exclusion_condition.field = 'start_date'
    exclusion_condition.value = '{month} {day}'
    expected_exclusion_condition = task_pb2.ExclusionCondition()
    expected_exclusion_condition.operation = (
        task_pb2.ExclusionCondition.EQUAL_TO
    )
    expected_exclusion_condition.field = 'start_date'
    expected_exclusion_condition.value = 'October 1'
    calendar = state_pb2.Calendar(events=[event, event, event])
    relevant_state = task_pb2.RelevantState(
        state=state_pb2.State(calendar=calendar),
        exclusion_conditions=[exclusion_condition],
    )
    proto_utils.format_relevant_state_with_params(relevant_state, params, [])

    self.assertEqual(
        list(relevant_state.state.calendar.events),
        [expected_event, expected_event, expected_event],
    )
    self.assertEqual(
        list(relevant_state.exclusion_conditions),
        [expected_exclusion_condition],
    )

  def test_format_initial_tasks_app_state_with_params(self):
    params = {
        'month': 'October',
        'day': '1',
        'extra': 'extra',
        'importance': '0',
        'title': 'Pay Rent',
    }

    tasks_app_task = state_pb2.TasksAppTask()
    tasks_app_task.due_date = '{month} {day} 2023'
    tasks_app_task.title = '{title}'
    tasks_app_task.importance = '{importance}'

    expected_task = state_pb2.TasksAppTask()
    expected_task.due_date = 'October 1 2023'
    expected_task.title = 'Pay Rent'
    expected_task.importance = '0'

    exclusion_condition = task_pb2.ExclusionCondition()
    exclusion_condition.operation = task_pb2.ExclusionCondition.EQUAL_TO
    exclusion_condition.field = 'due_date'
    exclusion_condition.value = '{month} {day}'
    expected_exclusion_condition = task_pb2.ExclusionCondition()
    expected_exclusion_condition.operation = (
        task_pb2.ExclusionCondition.EQUAL_TO
    )
    expected_exclusion_condition.field = 'due_date'
    expected_exclusion_condition.value = 'October 1'
    tasks_app = state_pb2.TasksApp(
        tasks_app_tasks=[tasks_app_task, tasks_app_task, tasks_app_task]
    )
    relevant_state = task_pb2.RelevantState(
        state=state_pb2.State(tasks_app=tasks_app),
        exclusion_conditions=[exclusion_condition],
    )
    proto_utils.format_relevant_state_with_params(relevant_state, params, [])

    self.assertEqual(
        list(relevant_state.state.tasks_app.tasks_app_tasks),
        [expected_task, expected_task, expected_task],
    )
    self.assertEqual(
        list(relevant_state.exclusion_conditions),
        [expected_exclusion_condition],
    )

  @parameterized.parameters([
      (
          task_pb2.Task(
              relevant_state=task_pb2.RelevantState(
                  state=state_pb2.State(
                      calendar=state_pb2.Calendar(
                          events=[
                              state_pb2.Event(
                                  start_date='{month} {day} 2023',
                                  duration='{duration}',
                                  location='{location}',
                                  description='{description}',
                              )
                          ]
                      )
                  ),
                  exclusion_conditions=[
                      task_pb2.ExclusionCondition(
                          operation=task_pb2.ExclusionCondition.EQUAL_TO,
                          field='start_date',
                          value='{month} {day} 2023',
                      )
                  ],
              ),
              task_params=[
                  task_pb2.TaskParams(
                      name='month', possible_values=['October', 'November']
                  ),
                  task_pb2.TaskParams(name='day', possible_values=['1', '2']),
                  task_pb2.TaskParams(
                      name='duration', possible_values=['60m', '1h']
                  ),
              ],
          ),
          {
              'month': 'October',
              'day': '1',
              'extra': 'extra',
              'duration': '60m',
              'location': 'Mountain View',
              'description': 'Meeting',
          },
          task_pb2.Task(
              relevant_state=task_pb2.RelevantState(
                  state=state_pb2.State(
                      calendar=state_pb2.Calendar(
                          events=[
                              state_pb2.Event(
                                  start_date='October 1 2023',
                                  duration='60m',
                                  location='Mountain View',
                                  description='Meeting',
                              )
                          ]
                      )
                  ),
                  exclusion_conditions=[
                      task_pb2.ExclusionCondition(
                          operation=task_pb2.ExclusionCondition.EQUAL_TO,
                          field='start_date',
                          value='October 1 2023',
                      )
                  ],
              ),
              task_params=[
                  task_pb2.TaskParams(
                      name='month', possible_values=['October', 'November']
                  ),
                  task_pb2.TaskParams(name='day', possible_values=['1', '2']),
                  task_pb2.TaskParams(
                      name='duration', possible_values=['60m', '1h']
                  ),
              ],
          ),
      ),
      (
          task_pb2.Task(
              relevant_state=task_pb2.RelevantState(
                  state=state_pb2.State(
                      calendar=state_pb2.Calendar(
                          events=[
                              state_pb2.Event(
                                  start_date='{month} {day} 2023',
                                  duration='{duration}',
                                  location='{location}',
                                  description='{description}',
                              ),
                              state_pb2.Event(
                                  start_date='{month_without_replacement}',
                                  duration='{duration_without_replacement}',
                                  location='{location_without_replacement}',
                              ),
                          ]
                      )
                  ),
                  exclusion_conditions=[
                      task_pb2.ExclusionCondition(
                          operation=task_pb2.ExclusionCondition.EQUAL_TO,
                          field='start_date',
                          value='{month} {day} 2023',
                      )
                  ],
              ),
              task_params=[
                  task_pb2.TaskParams(
                      name='month',
                      possible_values=['{CURRENT_MONTH}', '{NEXT_MONTH}'],
                  ),
                  task_pb2.TaskParams(name='day', possible_values=['1', '2']),
                  task_pb2.TaskParams(
                      name='duration', possible_values=['60m', '30m']
                  ),
                  task_pb2.TaskParams(
                      name='location',
                      possible_values=['Mountain View', 'London'],
                  ),
              ],
          ),
          {
              'month': '{CURRENT_MONTH}',
              'CURRENT_MONTH': 'October',
              'day': '1',
              'extra': 'extra',
              'duration': '60m',
              'location': 'Mountain View',
              'description': 'Meeting',
              'NEXT_MONTH': 'November',
          },
          task_pb2.Task(
              relevant_state=task_pb2.RelevantState(
                  state=state_pb2.State(
                      calendar=state_pb2.Calendar(
                          events=[
                              state_pb2.Event(
                                  start_date='October 1 2023',
                                  duration='60m',
                                  location='Mountain View',
                                  description='Meeting',
                              ),
                              state_pb2.Event(
                                  start_date='November',
                                  duration='30m',
                                  location='London',
                              ),
                          ]
                      )
                  ),
                  exclusion_conditions=[
                      task_pb2.ExclusionCondition(
                          operation=task_pb2.ExclusionCondition.EQUAL_TO,
                          field='start_date',
                          value='October 1 2023',
                      )
                  ],
              ),
              task_params=[
                  task_pb2.TaskParams(
                      name='month', possible_values=['October', 'November']
                  ),
                  task_pb2.TaskParams(name='day', possible_values=['1', '2']),
                  task_pb2.TaskParams(
                      name='duration', possible_values=['60m', '30m']
                  ),
                  task_pb2.TaskParams(
                      name='location',
                      possible_values=['Mountain View', 'London'],
                  ),
              ],
          ),
      ),
  ])
  def test_format_calendar_proto_with_params(
      self,
      task: task_pb2.Task,
      chosen_params: dict[str, Any],
      expected_proto: task_pb2.Task,
  ):
    proto_utils.initialize_proto(task, chosen_params)

    self.assertEqual(
        task,
        expected_proto,
    )

  @parameterized.parameters([
      (
          datetime.date(2023, 10, 15),
          datetime.date(2023, 10, 15),
          task_pb2.ExclusionCondition.Operation.EQUAL_TO,
          True,
      ),
      (
          datetime.date(2023, 11, 15),
          datetime.date(2023, 10, 15),
          task_pb2.ExclusionCondition.Operation.EQUAL_TO,
          False,
      ),
      (
          datetime.time(8, 54),
          datetime.time(20, 15),
          task_pb2.ExclusionCondition.Operation.EQUAL_TO,
          False,
      ),
      (
          'Meeting with David',
          'David',
          task_pb2.ExclusionCondition.Operation.CONTAINS,
          True,
      ),
      (
          'Meeting with David',
          'John',
          task_pb2.ExclusionCondition.Operation.CONTAINS,
          False,
      ),
      (
          datetime.date(2023, 11, 15),
          datetime.date(2023, 10, 15),
          task_pb2.ExclusionCondition.Operation.GREATER_THAN,
          True,
      ),
      (
          datetime.date(2023, 10, 15),
          datetime.date(2023, 10, 15),
          task_pb2.ExclusionCondition.Operation.GREATER_THAN,
          False,
      ),
      (
          datetime.time(8, 54),
          datetime.time(20, 15),
          task_pb2.ExclusionCondition.Operation.GREATER_THAN,
          False,
      ),
      (
          datetime.date(2023, 11, 15),
          datetime.date(2023, 10, 15),
          task_pb2.ExclusionCondition.Operation.GREATER_THAN_OR_EQUAL_TO,
          True,
      ),
      (
          datetime.date(2023, 10, 15),
          datetime.date(2023, 10, 15),
          task_pb2.ExclusionCondition.Operation.GREATER_THAN_OR_EQUAL_TO,
          True,
      ),
      (
          datetime.time(8, 54),
          datetime.time(20, 15),
          task_pb2.ExclusionCondition.Operation.GREATER_THAN_OR_EQUAL_TO,
          False,
      ),
      (
          datetime.date(2023, 11, 15),
          datetime.date(2023, 10, 15),
          task_pb2.ExclusionCondition.Operation.LESS_THAN,
          False,
      ),
      (
          datetime.date(2023, 10, 10),
          datetime.date(2023, 10, 15),
          task_pb2.ExclusionCondition.Operation.LESS_THAN,
          True,
      ),
      (
          datetime.time(8, 54),
          datetime.time(20, 15),
          task_pb2.ExclusionCondition.Operation.LESS_THAN,
          True,
      ),
      (
          datetime.date(2023, 11, 15),
          datetime.date(2023, 10, 15),
          task_pb2.ExclusionCondition.Operation.LESS_THAN_OR_EQUAL_TO,
          False,
      ),
      (
          datetime.date(2023, 10, 15),
          datetime.date(2023, 10, 15),
          task_pb2.ExclusionCondition.Operation.LESS_THAN_OR_EQUAL_TO,
          True,
      ),
      (
          datetime.time(8, 54),
          datetime.time(20, 15),
          task_pb2.ExclusionCondition.Operation.LESS_THAN_OR_EQUAL_TO,
          True,
      ),
      (0, 3, task_pb2.ExclusionCondition.Operation.EQUAL_TO, False),
  ])
  def test_compare(
      self,
      field_value: Any,
      conditional_value: Any,
      operator: task_pb2.ExclusionCondition.Operation,
      expected_value: bool,
  ):
    self.assertEqual(
        proto_utils.compare(field_value, operator, conditional_value),
        expected_value,
    )

  @parameterized.parameters([
      (
          state_pb2.State(
              calendar=state_pb2.Calendar(
                  events=[
                      state_pb2.Event(
                          start_date='October 15 2023',
                          start_time='12:30',
                          duration='30m',
                          location='library',
                      ),
                      state_pb2.Event(
                          start_date='October 16 2023',
                          start_time='15:30',
                          duration='30m',
                          location='meeting room A',
                      ),
                  ]
              )
          ),
          'start_date',
          ['October 15 2023', 'October 16 2023'],
      ),
      (
          state_pb2.State(
              tasks_app=state_pb2.TasksApp(
                  tasks_app_tasks=[
                      state_pb2.TasksAppTask(
                          due_date='October 17 2023',
                          importance='2',
                          title='Chores',
                      ),
                      state_pb2.TasksAppTask(
                          due_date='October 18 2023',
                          importance='0',
                          title='Important task',
                      ),
                  ]
              ),
          ),
          'title',
          ['Chores', 'Important task'],
      ),
  ])
  def test_get_field_values(
      self,
      message: state_pb2.State,
      field_name: str,
      expected_values: list[Any],
  ):
    self.assertEqual(
        list(proto_utils._get_field_values(message, field_name)),
        expected_values,
    )

  @parameterized.parameters([
      (
          task_pb2.Task(
              name='test_task',
              prompt='Test calendar',
              relevant_state=task_pb2.RelevantState(
                  state=state_pb2.State(
                      calendar=state_pb2.Calendar(
                          events=[
                              state_pb2.Event(
                                  start_date='October 15 2023',
                                  start_time='12:30',
                                  duration='30m',
                                  location='library',
                                  title='Meet with Sam',
                              ),
                              state_pb2.Event(
                                  start_date='October 16 2023',
                                  start_time='15:30',
                                  duration='30m',
                                  title='Presentation',
                              ),
                          ]
                      ),
                  )
              ),
              success_criteria=task_pb2.SuccessCriteria(
                  expectations=[
                      task_pb2.Expectation(
                          field_transformation=task_pb2.FieldTransformation(
                              operation=task_pb2.FieldTransformation.Operation.IDENTITY,
                              field_name='title',
                          ),
                          match_type=task_pb2.Expectation.MatchType.STRING_MATCH,
                      ),
                  ]
              ),
          ),
          ['Meet with Sam', 'Presentation'],
      ),
      (
          task_pb2.Task(
              name='test_task',
              prompt='Test tasks_app',
              relevant_state=task_pb2.RelevantState(
                  state=state_pb2.State(
                      tasks_app=state_pb2.TasksApp(
                          tasks_app_tasks=[
                              state_pb2.TasksAppTask(
                                  due_date='October 17 2023',
                                  importance='2',
                                  title='Chores',
                              ),
                              state_pb2.TasksAppTask(
                                  due_date='October 18 2023',
                                  importance='0',
                                  title='Important task',
                              ),
                          ]
                      )
                  )
              ),
              success_criteria=task_pb2.SuccessCriteria(
                  expectations=[
                      task_pb2.Expectation(
                          field_transformation=task_pb2.FieldTransformation(
                              operation=task_pb2.FieldTransformation.Operation.COUNT,
                              field_name='tasks_app_tasks',
                          )
                      ),
                  ]
              ),
          ),
          [2],
      ),
      (
          task_pb2.Task(
              name='test_task',
              prompt='Test sports app',
              relevant_state=task_pb2.RelevantState(
                  state=state_pb2.State(
                      sports_activity_app=state_pb2.SportsActivityApp(
                          sports_activities=[
                              state_pb2.SportsActivity(
                                  total_distance='200',
                                  name='Morning Run',
                                  category='running',
                              ),
                              state_pb2.SportsActivity(
                                  total_distance='500',
                                  name='Morning Run',
                                  category='running',
                              ),
                          ]
                      )
                  )
              ),
              success_criteria=task_pb2.SuccessCriteria(
                  expectations=[
                      task_pb2.Expectation(
                          field_transformation=task_pb2.FieldTransformation(
                              operation=task_pb2.FieldTransformation.Operation.SUM,
                              field_name='total_distance',
                          )
                      ),
                  ]
              ),
          ),
          [700],
      ),
      (
          task_pb2.Task(
              name='test_task',
              prompt='Test tasks_app',
              relevant_state=task_pb2.RelevantState(
                  state=state_pb2.State(
                      tasks_app=state_pb2.TasksApp(
                          tasks_app_tasks=[
                              state_pb2.TasksAppTask(
                                  due_date='October 17 2023',
                                  due_time='12:30',
                                  importance='2',
                                  title='Chores',
                              ),
                              state_pb2.TasksAppTask(
                                  due_date='October 18 2023',
                                  due_time='8:30',
                                  importance='0',
                                  title='Important task',
                              ),
                          ]
                      )
                  )
              ),
              success_criteria=task_pb2.SuccessCriteria(
                  expectations=[
                      task_pb2.Expectation(
                          field_transformation=task_pb2.FieldTransformation(
                              operation=task_pb2.FieldTransformation.Operation.IDENTITY,
                              field_name='due_date',
                          ),
                          match_type=task_pb2.Expectation.MatchType.DATE_MATCH,
                      ),
                      task_pb2.Expectation(
                          field_transformation=task_pb2.FieldTransformation(
                              field_name='due_time',
                          ),
                          match_type=task_pb2.Expectation.MatchType.TIME_MATCH,
                      ),
                  ]
              ),
          ),
          [
              datetime.datetime(
                  year=2023, month=10, day=17, hour=12, minute=30
              ),
              datetime.datetime(year=2023, month=10, day=18, hour=8, minute=30),
          ],
      ),
  ])
  def test_get_expected_answer(
      self,
      task: task_pb2.Task,
      expected_values: list[Any],
  ):
    self.assertEqual(proto_utils.get_expected_answer(task), expected_values)

  @parameterized.parameters([
      (
          'Meet with Sam',
          task_pb2.Task(
              name='test_task',
              prompt='Test task',
              relevant_state=task_pb2.RelevantState(
                  state=state_pb2.State(
                      calendar=state_pb2.Calendar(
                          events=[
                              state_pb2.Event(
                                  start_date='October 15 2023',
                                  start_time='10am',
                                  title='Meet with Sam',
                              ),
                              state_pb2.Event(
                                  start_date='October 15 2023',
                                  start_time='10am',
                                  title='Dentist appointment',
                              ),
                          ]
                      ),
                  ),
              ),
              success_criteria=task_pb2.SuccessCriteria(
                  expectations=[
                      task_pb2.Expectation(
                          field_transformation=task_pb2.FieldTransformation(
                              field_name='title',
                              operation=task_pb2.FieldTransformation.Operation.IDENTITY,
                          ),
                          match_type=task_pb2.Expectation.MatchType.STRING_MATCH,
                      ),
                  ]
              ),
          ),
          False,
      ),
      (
          'Dentist appointment, Meet with Sam',
          task_pb2.Task(
              name='test_task',
              prompt='Test task',
              relevant_state=task_pb2.RelevantState(
                  state=state_pb2.State(
                      calendar=state_pb2.Calendar(
                          events=[
                              state_pb2.Event(
                                  start_date='October 15 2023',
                                  start_time='10am',
                                  title='Meet with Sam',
                              ),
                              state_pb2.Event(
                                  start_date='October 15 2023',
                                  start_time='10am',
                                  title='Dentist appointment',
                              ),
                          ]
                      ),
                  ),
              ),
              success_criteria=task_pb2.SuccessCriteria(
                  expectations=[
                      task_pb2.Expectation(
                          field_transformation=task_pb2.FieldTransformation(
                              field_name='title',
                              operation=task_pb2.FieldTransformation.Operation.IDENTITY,
                          ),
                          match_type=task_pb2.Expectation.MatchType.STRING_MATCH,
                      ),
                  ]
              ),
          ),
          True,
      ),
      (
          'Meet with Sam October 15 2023, Presentation October 16 2023',
          task_pb2.Task(
              name='test_task',
              prompt='Test calendar',
              relevant_state=task_pb2.RelevantState(
                  state=state_pb2.State(
                      calendar=state_pb2.Calendar(
                          events=[
                              state_pb2.Event(
                                  start_date='October 15 2023',
                                  start_time='12:30',
                                  duration='30m',
                                  location='library',
                                  title='Meet with Sam',
                              ),
                              state_pb2.Event(
                                  start_date='October 16 2023',
                                  start_time='15:30',
                                  duration='30m',
                                  title='Presentation',
                              ),
                          ]
                      ),
                  )
              ),
              success_criteria=task_pb2.SuccessCriteria(
                  expectations=[
                      task_pb2.Expectation(
                          field_transformation=task_pb2.FieldTransformation(
                              field_name='title',
                              operation=task_pb2.FieldTransformation.Operation.IDENTITY,
                          ),
                          match_type=task_pb2.Expectation.MatchType.STRING_MATCH,
                      ),
                      task_pb2.Expectation(
                          field_transformation=task_pb2.FieldTransformation(
                              field_name='start_date',
                              operation=task_pb2.FieldTransformation.Operation.IDENTITY,
                          ),
                          match_type=task_pb2.Expectation.MatchType.DATE_MATCH,
                      ),
                  ]
              ),
          ),
          ValueError(
              "Unsupported combined match types: ['STRING_MATCH', 'DATE_MATCH']"
          ),
      ),
      (
          'You had 2 events totaling 60 minutes.',
          task_pb2.Task(
              name='test_task',
              prompt='Test calendar',
              relevant_state=task_pb2.RelevantState(
                  state=state_pb2.State(
                      calendar=state_pb2.Calendar(
                          events=[
                              state_pb2.Event(
                                  start_date='October 15 2023',
                                  start_time='12:30',
                                  duration='30',
                                  location='library',
                                  title='Meet with Sam',
                              ),
                              state_pb2.Event(
                                  start_date='October 16 2023',
                                  start_time='15:30',
                                  duration='30',
                                  title='Presentation',
                              ),
                          ]
                      ),
                  )
              ),
              success_criteria=task_pb2.SuccessCriteria(
                  expectations=[
                      task_pb2.Expectation(
                          field_transformation=task_pb2.FieldTransformation(
                              operation=task_pb2.FieldTransformation.Operation.SUM,
                              field_name='duration',
                          )
                      ),
                  ]
              ),
          ),
          ValueError('Answer given in the incorrect format.'),
      ),
      (
          '10000',
          task_pb2.Task(
              name='test_task',
              prompt='Test task',
              relevant_state=task_pb2.RelevantState(
                  state=state_pb2.State(
                      sports_activity_app=state_pb2.SportsActivityApp(
                          sports_activities=[
                              state_pb2.SportsActivity(
                                  start_date='October 15 2023',
                                  name='Workout',
                                  total_distance='9895',
                              ),
                              state_pb2.SportsActivity(
                                  start_date='October 10 2023',
                                  name='Workout 2',
                                  total_distance='100',
                              ),
                          ]
                      ),
                  ),
              ),
              success_criteria=task_pb2.SuccessCriteria(
                  expectations=[
                      task_pb2.Expectation(
                          field_transformation=task_pb2.FieldTransformation(
                              field_name='total_distance',
                              operation=task_pb2.FieldTransformation.Operation.SUM,
                          ),
                          match_type=task_pb2.Expectation.MatchType.NUMBER_MATCH,
                          tolerance=10,
                      ),
                  ]
              ),
          ),
          True,
      ),
  ])
  def test_check_agent_answer(
      self, agent_answer, task, expected: bool | Exception
  ):
    if isinstance(expected, bool):
      got = proto_utils.check_agent_answer(agent_answer, task)
      self.assertEqual(expected, got)
    else:
      with self.assertRaises(type(expected)) as exception:
        proto_utils.check_agent_answer(agent_answer, task)
      self.assertEqual(exception.exception.args, expected.args)


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Utils for Joplin app."""

import os
import random

from android_world.env import adb_utils
from android_world.env import interface
from android_world.task_evals.information_retrieval import proto_utils
from android_world.task_evals.information_retrieval.proto import state_pb2
from android_world.task_evals.information_retrieval.proto import task_pb2
from android_world.task_evals.utils import sqlite_schema_utils
from android_world.task_evals.utils import sqlite_utils

_NOTES_TABLE = "notes"
_NOTES_NORMALIZED_TABLE = "notes_normalized"
_FOLDER_TABLE = "folders"
_DB_PATH = "/data/data/net.cozic.joplin/databases/joplin.sqlite"
_APP_NAME = "joplin"
# Sometimes this field gets added to the Joplin db, but we do not need it.
_EXCLUDE_FIELD = "deleted_time"


def setup_task_state(
    relevant_state: state_pb2.NotesApp,
    exclusion_conditions: list[task_pb2.ExclusionCondition],
    env: interface.AsyncEnv,
) -> None:
  """Sets up the  state for the Joplin app.

  Args:
    relevant_state: The state to set up.
    exclusion_conditions: The exclusion conditions to use when generating random
      notes.
    env: The Android environment interface for database interaction.
  """
  clear_dbs(env)
  notes = []

  # Keep track of already created folders.
  folder_mapping = {}
  notes += _generate_random_notes(
      100,
      exclusion_conditions,
      [note.folder for note in relevant_state.notes],
      folder_mapping,
      env,
  )
  for note in relevant_state.notes:
    notes.append(_create_note_from_proto(note, folder_mapping, env))
  random.shuffle(notes)
  add_notes(notes, env)


def clear_dbs(env: interface.AsyncEnv) -> None:
  """Clears Joplin databases."""
  sqlite_utils.delete_all_rows_from_table(
      _FOLDER_TABLE, _DB_PATH, env, _APP_NAME
  )
  sqlite_utils.delete_all_rows_from_table(
      _NOTES_TABLE, _DB_PATH, env, _APP_NAME
  )
  sqlite_utils.delete_all_rows_from_table(
      _NOTES_NORMALIZED_TABLE, _DB_PATH, env, _APP_NAME
  )
  adb_utils.close_app(_APP_NAME, env.controller)  # Register changes.


def _get_folder_to_id(
    env: interface.AsyncEnv,
) -> dict[str, str]:
  """Gets a mapping from folder title to ID as represented in Folder table."""
  with env.controller.pull_file(_DB_PATH) as local_db_directory:
    local_db_path = os.path.join(local_db_directory, os.path.split(_DB_PATH)[1])
    folder_info = sqlite_utils.execute_query(
        f"select * from {_FOLDER_TABLE};",
        local_db_path,
        sqlite_schema_utils.JoplinFolder,
    )

  result = {}
  for row in folder_info:
    result[row.title] = row.id
  return result


def _add_folders(
    rows: list[sqlite_schema_utils.JoplinFolder],
    env: interface.AsyncEnv,
) -> None:
  """Inserts multiple folder rows into the remote Joplin database.

  Args:
      rows: A list of JoplinFolder instances to be inserted.
      env: The Android environment interface for database interaction.
  """

  sqlite_utils.insert_rows_to_remote_db(
      rows,
      _EXCLUDE_FIELD,
      _FOLDER_TABLE,
      _DB_PATH,
      _APP_NAME,
      env,
  )


def create_note(
    folder: str,
    title: str,
    body: str,
    folder_mapping: dict[str, str],
    env: interface.AsyncEnv,
    is_todo: int = False,
    todo_completed: bool = False,
) -> sqlite_schema_utils.JoplinNote:
  """Generates random note."""
  if not folder_mapping:
    folder_mapping.update(_get_folder_to_id(env))

  if folder not in folder_mapping:
    # Folder hasn't been created yet.
    _add_folders([sqlite_schema_utils.JoplinFolder(folder)], env)
    folder_mapping.clear()
    folder_mapping.update(_get_folder_to_id(env))
    if folder not in folder_mapping:
      raise ValueError("Something went wrong could not find or create folder.")
  parent_id = folder_mapping[folder]
  return sqlite_schema_utils.JoplinNote(
      parent_id=parent_id,
      title=title,
      body=body,
      is_todo=int(is_todo),
      todo_completed=int(todo_completed),
  )


def add_notes(
    rows: list[sqlite_schema_utils.JoplinNote],
    env: interface.AsyncEnv,
) -> None:
  """Inserts multiple note rows into the remote Joplin database."""
  sqlite_utils.insert_rows_to_remote_db(
      rows,
      None,
      _NOTES_TABLE,
      _DB_PATH,
      _APP_NAME,
      env,
  )
  sqlite_utils.insert_rows_to_remote_db(
      _normalize_notes(rows),
      None,
      _NOTES_NORMALIZED_TABLE,
      _DB_PATH,
      _APP_NAME,
      env,
  )


def _normalize_notes(
    notes: list[sqlite_schema_utils.JoplinNote],
) -> list[sqlite_schema_utils.JoplinNormalizedNote]:
  return [
      sqlite_schema_utils.JoplinNormalizedNote(
          id=note.id,
          parent_id=note.parent_id,
          title=note.title.lower(),
          body=note.body,
          is_todo=note.is_todo,
          todo_completed=note.todo_completed,
          user_created_time=note.user_created_time,
          user_updated_time=note.user_updated_time,
          latitude=note.latitude,
          longitude=note.longitude,
          altitude=note.altitude,
          source_url=note.source_url,
          todo_due=note.todo_due,
      )
      for note in notes
  ]


def list_notes(
    env: interface.AsyncEnv,
) -> list[sqlite_schema_utils.JoplinNote]:
  return sqlite_utils.get_rows_from_remote_device(
      _NOTES_TABLE,
      _DB_PATH,
      sqlite_schema_utils.JoplinNote,
      env,
  )


def _create_note_from_proto(
    note: state_pb2.Note,
    folder_mapping: dict[str, str],
    env: interface.AsyncEnv,
) -> sqlite_schema_utils.JoplinNote:
  """Creates a JoplinNote object from a state_pb2.Note proto."""
  is_todo = note.is_todo.lower() == "true"
  todo_completed = note.todo_completed.lower() == "true"
  return create_note(
      note.folder,
      note.title,
      note.body,
      folder_mapping,
      env,
      is_todo,
      todo_completed,
  )


def _generate_random_notes(
    num_notes: int,
    exclusion_conditions: list[task_pb2.ExclusionCondition],
    relevant_folders: list[str],
    folder_mapping: dict[str, str],
    env: interface.AsyncEnv,
) -> list[sqlite_schema_utils.JoplinNote]:
  """Generates random notes with the given exclusion conditions."""
  return sqlite_schema_utils.get_random_items(
      num_notes,
      generate_item_fn=lambda: _generate_random_note(
          relevant_folders, folder_mapping, env
      ),
      filter_fn=lambda x: _check_note_conditions(
          x, exclusion_conditions, folder_mapping
      ),
  )


def _generate_random_note(
    relevant_folders: list[str],
    folder_mapping: dict[str, str],
    env: interface.AsyncEnv,
):
  """Generates a single random sqlite_schema_utils.JoplinNote object."""
  new_note = state_pb2.Note()
  # add to relevant folders 30% of the time:
  add_to_relevant_folder = random.random() < 0.3
  if add_to_relevant_folder:
    folder = random.choice(relevant_folders)
    if folder not in _FOLDERS:
      raise ValueError("Unexpected folder name: {}".format(folder))
  else:
    folder = random.choice(list(_FOLDERS.keys()))
  new_note.folder = folder
  new_note.is_todo = str(random.choice([True, False]))
  if new_note.is_todo:
    new_note.todo_completed = random.choice(["True", "False"])
  random_note = random.choice(_FOLDERS[folder])

  new_note.title = random_note["title"]
  new_note.body = random_note["body"]
  note = _create_note_from_proto(new_note, folder_mapping, env)
  return note


def _check_note_conditions(
    note: sqlite_schema_utils.JoplinNote,
    exclusion_conditions: list[task_pb2.ExclusionCondition],
    folder_mapping: dict[str, str],
) -> bool:
  """Evaluates the specified task against a set of exclusion conditions.

  A note is considered eligible if it does not satisfy all of the conditions
  specified in the exclusion_conditions list. Each condition is checked against
  various fields of the note. The note is eligible if not all of these
  conditions are met, ensuring it doesn't fall under any exclusion criteria
  defined.

  Args:
    note: The note to check.
    exclusion_conditions: All the conditions the note will be checked against,
      if they are all met, this note should be excluded and does not meet the
      conditions.
    folder_mapping: A map from folder name to ID as represented in the Folder
      table.

  Returns:
    A bool, True if the note does not meet all of the exclusion conditions,
    False otherwise.
  """
  if not exclusion_conditions:
    return True
  # Keeps track of whether an exclusion condition is met.
  all_conditions_met = True
  for condition in exclusion_conditions:
    if condition.field == "title":
      all_conditions_met = all_conditions_met and proto_utils.compare(
          note.title.lower(),
          condition.operation,
          condition.value.lower(),
      )
    elif condition.field == "folder":
      folder_name = [
          key.lower()
          for (key, value) in folder_mapping.items()
          if note.parent_id == value
      ]
      all_conditions_met = all_conditions_met and proto_utils.compare(
          folder_name[0],
          condition.operation,
          condition.value.lower(),
      )
    elif condition.field == "is_todo":
      all_conditions_met = all_conditions_met and proto_utils.compare(
          note.is_todo,
          condition.operation,
          1 if condition.value.lower() == "true" else 0,
      )
    elif condition.field == "todo_completed":
      all_conditions_met = all_conditions_met and proto_utils.compare(
          note.todo_completed,
          condition.operation,
          1 if condition.value.lower() == "true" else 0,
      )

  return not all_conditions_met


_RECIPES = [
    {
        "title": "Zesty Quinoa Salad",
        "body": (
            "Ingredients:\nCooked quinoa, chopped cucumber, diced tomato,"
            " crumbled feta cheese, lemon vinaigrette\nInstructions:\nToss"
            " ingredients together. Season to taste."
        ),
    },
    {
        "title": "Peanut Butter Power Smoothie",
        "body": (
            "Ingredients:\nPeanut butter, banana, milk of choice, protein"
            " powder, ice\nInstructions:\nBlend until smooth and creamy."
        ),
    },
    {
        "title": "Cheesy Veggie Scramble",
        "body": (
            "Ingredients:\nEggs, shredded cheese, diced bell pepper, chopped"
            " spinach, hot sauce (optional)\nInstructions:\nSaut√© peppers and"
            " spinach. Whisk eggs with cheese, add to pan, and scramble. Top"
            " with hot sauce if desired."
        ),
    },
    {
        "title": "Tuna Salad Surprise",
        "body": (
            "Ingredients:\nCanned tuna, celery, mayonnaise, relish, crackers or"
            " bread\nInstructions:\nMix tuna, celery, mayonnaise, and relish."
            " Serve on crackers or bread."
        ),
    },
    {
        "title": "Spicy Black Bean Wrap",
        "body": (
            "Ingredients:\nBlack beans, salsa, shredded cheese, avocado,"
            " tortilla\nInstructions:\nWarm beans, top tortilla with beans,"
            " salsa, cheese, and avocado."
        ),
    },
    {
        "title": "Fruity Yogurt Parfait",
        "body": (
            "Ingredients:\nGreek yogurt, granola, mixed"
            " berries\nInstructions:\nLayer yogurt, granola, and berries in a"
            " glass or jar."
        ),
    },
    {
        "title": "Sweet Potato Hash",
        "body": (
            "Ingredients:\nDiced sweet potato, onion, breakfast sausage"
            " (optional), seasoning\nInstructions:\nCook sweet potatoes and"
            " onion until tender. Add sausage if desired. Season to taste."
        ),
    },
    {
        "title": "Hummus and Veggie Delight",
        "body": (
            "Ingredients:\nHummus, pita bread, cucumber slices, carrot"
            " sticks\nInstructions:\nSpread hummus on pita, top with cucumbers"
            " and carrots."
        ),
    },
    {
        "title": "Creamy Tomato Soup",
        "body": (
            "Ingredients:\nCanned tomatoes, heavy cream, basil, grilled cheese"
            " sandwich (for dipping)\nInstructions:\nBlend tomatoes and cream,"
            " heat gently. Season with basil. Serve with grilled cheese for"
            " dipping."
        ),
    },
    {
        "title": "Apple Cinnamon Overnight Oats",
        "body": (
            "Ingredients:\nRolled oats, milk of choice, grated apple, cinnamon,"
            " pinch of brown sugar\nInstructions:\nCombine oats, milk, apple,"
            " cinnamon, and brown sugar. Refrigerate overnight."
        ),
    },
    {
        "title": "Chicken Tikka Masala",
        "body": (
            "Marinated chicken cooked in a creamy tomato sauce with aromatic"
            " spices."
        ),
    },
    {
        "title": "Chocolate Chip Cookies",
        "body": (
            "Classic recipe for chewy cookies with chocolate chips and a hint"
            " of vanilla."
        ),
    },
    {
        "title": "Beef Stir-Fry",
        "body": (
            "Quick and easy stir-fry with tenderbeef, colorful vegetables, and"
            " a savory sauce."
        ),
    },
    {
        "title": "Vegetarian Chili",
        "body": (
            "Hearty chili packed with beans, vegetables, and spices, perfect"
            " for a cold day."
        ),
    },
    {
        "title": "Salmon with Roasted Vegetables",
        "body": (
            "Healthy and flavorful dish with baked salmon and seasonal"
            " vegetables."
        ),
    },
    {
        "title": "Homemade Pizza",
        "body": (
            "Pizza dough recipe, sauce options, topping ideas for a"
            " customizable pizza night."
        ),
    },
    {
        "title": "Pasta Carbonara",
        "body": (
            "Creamy pasta dish with pancetta, eggs, Parmesan cheese, and black"
            " pepper."
        ),
    },
    {
        "title": "Pad Thai",
        "body": (
            "Stir-fried rice noodles with tofu or shrimp, eggs, bean sprouts,"
            " and a tangy sauce."
        ),
    },
    {
        "title": "Chicken Pot Pie",
        "body": (
            "Comforting pie filled with chicken, vegetables, and creamy sauce,"
            " topped with flaky crust."
        ),
    },
    {
        "title": "Shrimp Scampi",
        "body": (
            "Garlic butter shrimp with pasta, lemon juice, white wine, and"
            " fresh herbs."
        ),
    },
    {
        "title": "French Onion Soup",
        "body": (
            "Rich and flavorful soup with caramelized onions, beef broth, and"
            " crusty bread topped with melted cheese."
        ),
    },
    {
        "title": "Vegetable Curry",
        "body": (
            "Aromatic curry with a variety of vegetables, coconut milk, and"
            " spices."
        ),
    },
    {
        "title": "Quinoa Salad",
        "body": (
            "Healthy and refreshing salad with quinoa, vegetables, herbs, and a"
            " lemon vinaigrette."
        ),
    },
    {
        "title": "Banana Bread",
        "body": (
            "Moist and flavorful bread made with ripe bananas, perfect for"
            " breakfast or a snack."
        ),
    },
    {
        "title": "Breakfast Burritos",
        "body": (
            "Scrambled eggs, sausage, cheese, and vegetables wrapped in a warm"
            " tortilla."
        ),
    },
    {
        "title": "Chocolate Mousse",
        "body": (
            "Decadent dessert made with chocolate, eggs, and cream, perfect for"
            " a special occasion."
        ),
    },
    {
        "title": "Apple Pie",
        "body": (
            "Classic American dessert with a flaky crust filled with sweet and"
            " tart apples."
        ),
    },
    {
        "title": "Brownies",
        "body": "Fudgy or cakey brownies with chocolate chips or nuts.",
    },
    {
        "title": "Pancakes",
        "body": (
            "Fluffy pancakes topped with butter, maple syrup, and fresh fruit."
        ),
    },
    {
        "title": "Smoothie Recipes",
        "body": (
            "Various combinations of fruits, vegetables, yogurt, and protein"
            " powder for healthy and refreshing smoothies."
        ),
    },
]

_TASKS = [
    {
        "title": "Morning Routine",
        "body": (
            "Tasks:\nMake bed\nShower and get dressed\nHealthy"
            " breakfast\nReview daily schedule"
        ),
    },
    {
        "title": "Website Updates",
        "body": (
            "Tasks:\nAdd new product photos\nUpdate contact form\nFix broken"
            " link on About page\nRun website speed test"
        ),
    },
    {
        "title": "Grocery Trip",
        "body": (
            "Tasks:\nCheck pantry staples\nMake a list of needed"
            " items\nRemember reusable bags\nCheck for coupons or deals"
        ),
    },
    {
        "title": "Travel Packing",
        "body": (
            "Tasks:\nCheck weather forecast\nChoose outfits and pack\nGather"
            " toiletries and essentials\nPrint travel documents"
        ),
    },
    {
        "title": "Apartment Cleanup",
        "body": (
            "Tasks:\nDo the dishes\nVacuum floors\nTidy living room\nTake out"
            " the trash"
        ),
    },
    {
        "title": "Project Brainstorm",
        "body": (
            "Tasks:\nDefine project goals\nFree-write potential ideas\nCreate a"
            " mind map\nIdentify next steps"
        ),
    },
    {
        "title": "Email Inbox Zero",
        "body": (
            "Tasks:\nDelete junk mail\nRespond to urgent emails\nOrganize"
            " important emails into folders\nUnsubscribe from unwanted lists"
        ),
    },
    {
        "title": "Workout Routine",
        "body": (
            "Tasks:\n5-minute warmup\n30 minutes cardio\nStrength"
            " training\nCool-down and stretching"
        ),
    },
    {
        "title": "Meal Planning",
        "body": (
            "Tasks:\nChoose recipes for the week\nMake a grocery list\nPrep"
            " ingredients if possible\nPlan for leftovers"
        ),
    },
    {
        "title": "Relax and Recharge",
        "body": (
            "Tasks:\nRead a book\nTake a relaxing bath\nListen to calming"
            " music\nGo for an evening walk"
        ),
    },
    {
        "title": "Grocery Shopping",
        "body": (
            "- Milk, eggs, bread \n- Fruits and vegetables \n- Chicken breast"
            " \n- Pasta \n- Toilet paper"
        ),
    },
    {
        "title": "Pay Bills",
        "body": (
            "- Electricity bill due May 15th \n- Internet bill due May 20th \n-"
            " Credit card payment due May 25th"
        ),
    },
    {
        "title": "Schedule Doctor's Appointment",
        "body": "Call Dr. Smith's office to schedule a check-up for next week.",
    },
    {
        "title": "Email Project Update to Client",
        "body": (
            "Send a summary of project progress and next steps to Acme Corp. by"
            " EOD."
        ),
    },
    {
        "title": "Finish Presentation Slides for Team Meeting",
        "body": "Complete slides on Q2 marketing strategy by Tuesday morning.",
    },
    {
        "title": "Book Flight for Summer Vacation",
        "body": "Research and book round-trip flights to Hawaii for July.",
    },
    {
        "title": "Renew Driver's License",
        "body": (
            "Visit the DMV to renew driver's license before it expires next"
            " month."
        ),
    },
    {
        "title": "Research Summer Camps for Kids",
        "body": (
            "Find options for summer camps that align with kids' interests and"
            " ages."
        ),
    },
    {
        "title": "Meal Prep for the Week",
        "body": (
            "Cook a large batch of chicken and vegetables for lunches and"
            " dinners."
        ),
    },
    {
        "title": "Clean Out Garage",
        "body": (
            "Sort through items, donate unwanted items, organize remaining"
            " items."
        ),
    },
    {
        "title": "Write Thank You Notes for Wedding Gifts",
        "body": "Send personalized thank you notes to all wedding guests.",
    },
    {
        "title": "Call Mom for Her Birthday",
        "body": "Wish Mom a happy birthday and catch up.",
    },
    {
        "title": "Schedule Oil Change for Car",
        "body": (
            "Make an appointment with the mechanic for an oil change and tire"
            " rotation."
        ),
    },
    {
        "title": "Research New Laptop",
        "body": "Compare features, prices, and reviews of different laptops.",
    },
    {
        "title": "Plant Vegetable Garden",
        "body": (
            "Buy seeds or seedlings, prepare soil, plant vegetables in raised"
            " beds."
        ),
    },
    {
        "title": "Organize Closet",
        "body": (
            "Declutter clothes, donate or sell unwanted items, rearrange"
            " remaining clothes."
        ),
    },
    {
        "title": "File Taxes",
        "body": (
            "Gather tax documents, complete tax return, submit online or by"
            " mail."
        ),
    },
    {
        "title": "Plan Weekend Getaway",
        "body": (
            "Research destinations, book accommodations, plan activities for a"
            " short trip."
        ),
    },
    {
        "title": "Learn New Skill",
        "body": (
            "Enroll in online course or workshop on photography, coding, or"
            " language learning."
        ),
    },
    {
        "title": "Set Up Retirement Account",
        "body": (
            "Open a Roth IRA or 401(k) and start contributing to retirement"
            " savings."
        ),
    },
]

_ATTENDEES = [
    "Emily",
    "John",
    "Sarah",
    "David",
    "Ava",
    "Michael",
    "Jessica",
    "Joshua",
]
_ACTION_ITEMS = [
    "Follow up with client on proposal",
    "Draft project timeline",
    "Research market trends",
    "Schedule team check-in",
    "Create design mockups",
    "Update website content",
    "Review budget report",
    "Send out meeting follow-up email",
    "Conduct user testing",
    "Finalize presentation materials",
    "Order supplies for event",
    "Coordinate with external vendors",
    "Submit reimbursement requests",
]

_MEETING_NOTES = [
    {
        "title": "Team Meeting - May 6, 2024",
        "body": (
            "Agenda, discussion points, action items, decisions made, next"
            " steps."
        ),
    },
    {
        "title": "Client Meeting - Acme Corp. - April 25, 2024",
        "body": (
            "Attendees, project updates, feedback, next steps, action items."
        ),
    },
    {
        "title": "Brainstorming Session - New Product Ideas - April 18, 2024",
        "body": (
            "Generated ideas, pros and cons, feasibility assessment, next"
            " steps."
        ),
    },
    {
        "title": "Project Kickoff Meeting - Website Redesign - April 10, 2024",
        "body": (
            "Project scope, timeline, team roles, communication plan, budget."
        ),
    },
    {
        "title": "One-on-One Meeting with John - April 3, 2024",
        "body": (
            "Performance feedback, career goals discussion, development"
            " opportunities."
        ),
    },
    {
        "title": "Board Meeting - Q1 Financial Results - March 28, 2024",
        "body": (
            "Financial report review, key performance indicators, budget"
            " discussion, future outlook."
        ),
    },
    {
        "title": "Weekly Team Update - March 21, 2024",
        "body": (
            "Progress updates on individual tasks, roadblocks, upcoming"
            " deadlines, team collaboration."
        ),
    },
    {
        "title": "Client Presentation - Proposal Review - March 14, 2024",
        "body": (
            "Proposal summary, client feedback, questions, revisions needed,"
            " next steps."
        ),
    },
    {
        "title": "Training Session - New Software - March 7, 2024",
        "body": (
            "Key features, how-to guide, troubleshooting tips, Q&A session."
        ),
    },
    {
        "title": "Conference Call - Remote Team - February 28, 2024",
        "body": (
            "Agenda, discussion points, action items for remote team"
            " collaboration and communication."
        ),
    },
    {
        "title": "Performance Review Meeting - Sarah - February 21, 2024",
        "body": (
            "Strengths, areas for improvement, goals for next quarter,"
            " development plan."
        ),
    },
    {
        "title": "Departmental Budget Meeting - February 14, 2024",
        "body": (
            "Budget review, cost-cutting measures, resource allocation,"
            " approval process."
        ),
    },
    {
        "title": "All-Hands Meeting - Company Update - February 7, 2024",
        "body": (
            "CEO presentation on company performance, new initiatives, Q&A"
            " session."
        ),
    },
    {
        "title": "Client Feedback Session - Project X - January 31, 2024",
        "body": (
            "Gathering feedback from client on project X, addressing concerns,"
            " identifying improvements."
        ),
    },
    {
        "title": "Strategic Planning Meeting - January 24, 2024",
        "body": (
            "Defining long-term goals, SWOT analysis, strategy development,"
            " implementation plan."
        ),
    },
    {
        "title": "Team Building Workshop - January 17, 2024",
        "body": (
            "Activities and exercises to improve communication, collaboration,"
            " and trust among team members."
        ),
    },
    {
        "title": "New Hire Orientation - January 10, 2024",
        "body": (
            "Welcome new employees, introduce company culture, provide"
            " onboarding information."
        ),
    },
    {
        "title": "Annual Performance Review - Self-Assessment - December 2023",
        "body": (
            "Reflect on accomplishments, challenges, areas for growth, goals"
            " for the coming year."
        ),
    },
    {
        "title": "Holiday Party Planning Meeting - December 2023",
        "body": (
            "Venue selection, catering options, entertainment, budget,"
            " decorations, guest list."
        ),
    },
    {
        "title": "Year-End Review Meeting - December 2023",
        "body": (
            "Summary of company performance, achievements, challenges, goals"
            " for the next year."
        ),
    },
    {
        "title": "Project Kickoff",
        "body": (
            "Attendees:\n"
            + "\n".join(random.sample(_ATTENDEES, 3))
            + "\nAgenda:\nProject scope and objectives\nTimeline and"
            " milestones\nRoles and responsibilities\nAction Items:\n"
            + "\n".join(random.sample(_ACTION_ITEMS, 3))
        ),
    },
    {
        "title": "Marketing Strategy Brainstorm",
        "body": (
            "Attendees:\n"
            + "\n".join(random.sample(_ATTENDEES, 2))
            + "\nAgenda:\nTarget audience analysis\nCampaign ideas\nBudget"
            " considerations\nAction Items:\n"
            + "\n".join(random.sample(_ACTION_ITEMS, 2))
        ),
    },
    {
        "title": "Website Redesign Review",
        "body": (
            "Attendees:\n"
            + "\n".join(random.sample(_ATTENDEES, 4))
            + "\nAgenda:\nReview proposed wireframes\nDiscuss content"
            " updates\nFeedback on user experience\nAction Items:\n"
            + "\n".join(random.sample(_ACTION_ITEMS, 4))
        ),
    },
    {
        "title": "Quarterly Sales Meeting",
        "body": (
            "Attendees:\n"
            + "\n".join(random.sample(_ATTENDEES, 3))
            + "\nAgenda:\nSales performance review\nNew product launch"
            " updates\nMarket analysis\nAction Items:\n"
            + "\n".join(random.sample(_ACTION_ITEMS, 2))
        ),
    },
    {
        "title": "Team Building Workshop",
        "body": (
            "Attendees:\n"
            + "\n".join(random.sample(_ATTENDEES, 3))
            + "\nAgenda:\nTeam challenges discussion\nCommunication"
            " exercises\nGoal-setting activities\nAction Items:\n"
            + "\n".join(random.sample(_ACTION_ITEMS, 2))
        ),
    },
    {
        "title": "Client Project Update",
        "body": (
            "Attendees:\n"
            + "\n".join(random.sample(_ATTENDEES, 3))
            + "\nAgenda:\nProject progress status\nChallenges and"
            " solutions\nBudget review\nAction Items:\n"
            + "\n".join(random.sample(_ACTION_ITEMS, 2))
        ),
    },
    {
        "title": "HR Policy Review",
        "body": (
            "Attendees:\n"
            + "\n".join(random.sample(_ATTENDEES, 4))
            + "\nAgenda:\nReview updates to vacation policy\nDiscuss benefits"
            " package changes\nNew hire onboarding process\nAction Items:\n"
            + "\n".join(random.sample(_ACTION_ITEMS, 4))
        ),
    },
    {
        "title": "Design Sprint Planning",
        "body": (
            "Attendees:\n"
            + "\n".join(random.sample(_ATTENDEES, 3))
            + "\nAgenda:\nDefine problem statement\nBrainstorm"
            " solutions\nPrototype and test ideas\nAction Items:\n"
            + "\n".join(random.sample(_ACTION_ITEMS, 2))
        ),
    },
    {
        "title": "Budget Review Meeting",
        "body": (
            "Attendees:\n"
            + "\n".join(random.sample(_ATTENDEES, 2))
            + "\nAgenda:\nReview past quarter expenses\nAnalyze budget"
            " variances\nDiscuss upcoming project costs\nAction Items:\n"
            + "\n".join(random.sample(_ACTION_ITEMS, 2))
        ),
    },
    {
        "title": "All-Hands Team Meeting",
        "body": (
            "Attendees:\n"
            + "\n".join(random.sample(_ATTENDEES, 4))
            + "\nAgenda:\nCompany updates\nDepartment announcements\nCelebrate"
            " wins\nAction Items:\n"
            + "\n".join(random.sample(_ACTION_ITEMS, 3))
        ),
    },
]

_PERSONAL = [
    {
        "title": "Dream Journal Entry",
        "body": "Had a vivid dream about flyingover a vast ocean.",
    },
    {
        "title": "Bucket List",
        "body": "1. Learn to surf. 2. Visit Machu Picchu. 3. Write a novel.",
    },
    {
        "title": "Grocery List",
        "body": "Milk, eggs, bread, cheese, fruit, vegetables",
    },
    {
        "title": "Favorite Quotes",
        "body": (
            '"The only limit to our realization of tomorrow will be our doubts'
            ' of today." - Franklin D. Roosevelt'
        ),
    },
    {
        "title": "Movie Recommendations",
        "body": (
            "- Everything Everywhere All at Once \n- The Grand Budapest Hotel"
            " \n- Parasite"
        ),
    },
    {
        "title": "Birthday Gift Ideas for Mom",
        "body": "Spa day, gardening tools, personalized photo album",
    },
    {
        "title": "Workout Routine",
        "body": (
            "Monday: Cardio \nTuesday: Strength training \nWednesday: Rest"
            " \nThursday: Yoga \nFriday: Cardio \nWeekend: Active recovery"
        ),
    },
    {
        "title": "Travel Itinerary for Japan",
        "body": (
            "Day 1: Arrive in Tokyo, explore Shinjuku \nDay 2: Visit the"
            " Imperial Palace and Sensoji Temple \nDay 3: Take a day trip to"
            " Hakone \nDay 4: Travel to Kyoto, visit Kiyomizu-dera Temple \nDay"
            " 5: Explore Arashiyama Bamboo Forest \nDay 6: Depart from Osaka"
        ),
    },
    {
        "title": "Things I'm Grateful For",
        "body": "My family, my health, my friends, my home, my job",
    },
    {
        "title": "Home Improvement Projects",
        "body": (
            "Repaint the living room, install new kitchen backsplash, build a"
            " deck in the backyard"
        ),
    },
    {
        "title": "Party Planning Checklist",
        "body": (
            "Send invitations, plan menu, decorate venue, create playlist, hire"
            " photographer"
        ),
    },
    {
        "title": "Random Thoughts",
        "body": (
            "I wonder why cats purr? Is time travel possible? What's the"
            " meaning of life?"
        ),
    },
    {
        "title": "Password Ideas",
        "body": (
            "Combination of letters, numbers, symbols, not easily guessable"
        ),
    },
    {
        "title": "Favorite Recipes",
        "body": "Chocolate chip cookies, lasagna, chicken tikka masala",
    },
    {
        "title": "Book Recommendations",
        "body": (
            "- The Lord of the Rings \n- The Hitchhiker's Guide to the Galaxy"
            " \n- Pride and Prejudice"
        ),
    },
    {
        "title": "Song Lyrics I Love",
        "body": '"Imagine no possessions, I wonder if you can." - John Lennon',
    },
    {
        "title": "Things to Do This Weekend",
        "body": (
            "Hike in the mountains, visit a museum, have a picnic in the park"
        ),
    },
    {
        "title": "Self-Care Ideas",
        "body": (
            "Take a bubble bath, read a good book, meditate, spend time in"
            " nature"
        ),
    },
    {
        "title": "Personal Goals for the Year",
        "body": (
            "1. Save for a down payment on a house. 2. Get a promotion at work."
            " 3. Run a marathon."
        ),
    },
]

_WORK = [
    {
        "title": "Meeting Notes - Q2 Marketing Strategy",
        "body": (
            "Discussed social media campaigns, new product launch timeline,"
            " budget allocation."
        ),
    },
    {
        "title": "Project Timeline - Website Redesign",
        "body": (
            "Phase 1: Wireframes due May 15th \nPhase 2: Design approvals by"
            " June 1st \nPhase 3: Development complete by July 15th \nPhase 4:"
            " Launch by August 1st"
        ),
    },
    {
        "title": "Performance Review Talking Points",
        "body": (
            "- Exceeded sales targets by 15% \n- Successfully led"
            " cross-functional team \n- Developed new client onboarding process"
        ),
    },
    {
        "title": "Client Feedback - Acme Corp.",
        "body": (
            "Positive feedback on project delivery, requested additional"
            " features for Phase 2."
        ),
    },
    {
        "title": "To-Do List",
        "body": (
            "1. Respond to client emails \n2. Prepare presentation for team"
            " meeting \n3. Review budget proposal \n4. Schedule one-on-one with"
            " Sarah"
        ),
    },
    {
        "title": "Conference Notes - Tech Summit 2024",
        "body": (
            "Key takeaways on emerging technologies, potential applications for"
            " our industry."
        ),
    },
    {
        "title": "Team Brainstorming - New Product Ideas",
        "body": (
            "Generated 15 potential product ideas, will narrow down to top 3"
            " for further development."
        ),
    },
    {
        "title": "Employee Onboarding Checklist",
        "body": (
            "1. Set up workstation \n2. Provide access to company systems \n3."
            " Schedule training sessions \n4. Assign mentor"
        ),
    },
    {
        "title": "Company Policies and Procedures",
        "body": (
            "Links to documents on vacation policy, expense reimbursement, code"
            " of conduct."
        ),
    },
    {
        "title": "Travel Itinerary - Client Visit",
        "body": (
            "Flights booked, hotel reservations confirmed, meeting schedule"
            " finalized."
        ),
    },
    {
        "title": "KPI Report - Q1 2024",
        "body": (
            "Sales revenue up 10%, customer satisfaction rating at 92%,"
            " employee turnover rate at 5%."
        ),
    },
    {
        "title": "Code Snippets - Python",
        "body": (
            "Useful code examples for data analysis, web scraping, automation"
            " tasks."
        ),
    },
    {
        "title": "Industry News and Trends",
        "body": (
            "Summary of recent articles on market developments, competitor"
            " activity, regulatory changes."
        ),
    },
    {
        "title": "Job Descriptions - Open Positions",
        "body": (
            "Detailed descriptions for Marketing Manager, Software Engineer,"
            " Sales Representative roles."
        ),
    },
    {
        "title": "Meeting Minutes - Weekly Team Update",
        "body": (
            "Summary of discussion points, action items, decisions made during"
            " the meeting."
        ),
    },
    {
        "title": "Training Materials - New Software",
        "body": (
            "Step-by-step guides, video tutorials, FAQs for learning how to use"
            " the new software."
        ),
    },
    {
        "title": "Contact List - Key Clients",
        "body": (
            "Names, email addresses, phone numbers, company affiliations of"
            " important clients."
        ),
    },
    {
        "title": "Budget Proposal - 2025",
        "body": (
            "Detailed breakdown of projected expenses and revenue for each"
            " department."
        ),
    },
    {
        "title": "Professional Development Resources",
        "body": (
            "Links to online courses, workshops, conferences relevant to career"
            " growth."
        ),
    },
    {
        "title": "Team Building Activities",
        "body": (
            "Ideas for virtual and in-person activities to improve team morale"
            " and collaboration."
        ),
    },
]

_SCHOOL = [
    {
        "title": "Lecture Notes - Intro to Psychology",
        "body": (
            "Key concepts: nature vs. nurture, cognitive development, social"
            " psychology."
        ),
    },
    {
        "title": "Reading List - American Literature",
        "body": "- The Scarlet Letter \n- The Great Gatsby \n- Moby Dick",
    },
    {
        "title": "Study Guide - Calculus Midterm",
        "body": "Topics covered: derivatives, integrals, limits, applications.",
    },
    {
        "title": "Research Paper Outline - Climate Change",
        "body": (
            "I. Introduction \nII. Causes of Climate Change \nIII. Impacts on"
            " the Environment \nIV. Solutions \nV. Conclusion"
        ),
    },
    {
        "title": "Group Project Notes - Marketing Campaign",
        "body": (
            "Team members: Sarah, David, Emily. Due date: May 30th. Focus:"
            " promoting a new sustainable product."
        ),
    },
    {
        "title": "Exam Schedule - Spring Semester",
        "body": (
            "May 10th: Calculus \nMay 15th: American Literature \nMay 20th:"
            " Psychology"
        ),
    },
    {
        "title": "Class Syllabus - Introduction to Computer Science",
        "body": (
            "Course overview, grading policy, weekly schedule, required"
            " readings."
        ),
    },
    {
        "title": "Essay Draft - The Role of Technology in Education",
        "body": (
            "Discusses the benefits and challenges of integrating technology"
            " into classrooms."
        ),
    },
    {
        "title": "Lab Report - Chemistry Experiment",
        "body": "Purpose, materials, procedure, results, analysis, conclusion.",
    },
    {
        "title": "Flashcards - Spanish Vocabulary",
        "body": "Front: hola \nBack: hello",
    },
    {
        "title": "Scholarship Application Deadlines",
        "body": (
            "May 1st: National Merit Scholarship \nJune 1st: College Board"
            " Opportunity Scholarships"
        ),
    },
    {
        "title": "Student Club Meeting Notes - Debate Club",
        "body": (
            "Discussed upcoming tournament, new member recruitment, fundraising"
            " ideas."
        ),
    },
    {
        "title": "Campus Resources - Writing Center",
        "body": (
            "Offers one-on-one tutoring for essays, research papers, and other"
            " writing assignments."
        ),
    },
    {
        "title": "Professor Contact Information",
        "body": (
            "Dr. Smith: jsmith@university.edu \nDr. Johnson:"
            " sjohnson@university.edu"
        ),
    },
    {
        "title": "Financial Aid Checklist",
        "body": (
            "1. Submit FAFSA \n2. Apply for scholarships \n3. Contact financial"
            " aid office"
        ),
    },
    {
        "title": "Campus Event Calendar",
        "body": (
            "May 10th: Spring Concert \nMay 15th: Career Fair \nMay 20th: Guest"
            " Speaker Lecture"
        ),
    },
    {
        "title": "Study Tips for Final Exams",
        "body": (
            "Create a study schedule, review notes regularly, form study"
            " groups, practice with past exams."
        ),
    },
    {
        "title": "Internship Opportunities - Summer 2024",
        "body": (
            "Marketing internship at XYZ Company, Research internship at"
            " ABC Lab"
        ),
    },
    {
        "title": "Book Recommendations from Professor",
        "body": (
            "- Sapiens: A Brief History of Humankind \n- Thinking, Fast and"
            " Slow \n- Outliers: The Story of Success"
        ),
    },
    {
        "title": "Study Abroad Programs - Fall 2024",
        "body": (
            "Programs available in Spain, France, Italy, Germany, and Japan."
        ),
    },
]

_HOME = [
    {
        "title": "Home Maintenance Schedule",
        "body": (
            "Spring: clean gutters, check roof for damage, service AC \nSummer:"
            " mow lawn weekly, trim hedges, check sprinkler system \nFall: rake"
            " leaves, clean chimney, winterize pipes \nWinter: check for ice"
            " dams, shovel snow, change air filters"
        ),
    },
    {
        "title": "Grocery List",
        "body": (
            "- Milk \n- Eggs \n- Bread \n- Cheese \n- Fruits \n- Vegetables \n-"
            " Toilet paper"
        ),
    },
    {
        "title": "Recipe - Chicken Noodle Soup",
        "body": (
            "Ingredients: chicken, noodles, carrots, celery, onion, broth,"
            " herbs."
        ),
    },
    {
        "title": "Cleaning Checklist",
        "body": (
            "Kitchen: clean countertops, wipe down appliances, sweep and mop"
            " floor \nBathroom: clean toilet, sink, shower/tub, mirrors"
            " \nLiving room: dust furniture, vacuum carpet, fluff pillows"
        ),
    },
    {
        "title": "Home Renovation Ideas",
        "body": (
            "- Update kitchen cabinets \n- Refinish hardwood floors \n- Paint"
            " living room walls"
        ),
    },
    {
        "title": "Packing List - Summer Vacation",
        "body": (
            "- Clothes for warm weather \n- Swimsuit \n- Sunscreen \n- Hat \n-"
            " Sunglasses"
        ),
    },
    {
        "title": "Gardening Tips",
        "body": (
            "Water plants regularly, fertilize monthly, prune as needed, check"
            " for pests."
        ),
    },
    {
        "title": "Emergency Contact List",
        "body": "Police: 911 \nFire: 911 \nNeighbor: (123) 456-7890",
    },
    {
        "title": "Wi-Fi Password",
        "body": "Network Name: MyHomeWifi \nPassword: supersecretpassword",
    },
    {
        "title": "Home Inventory",
        "body": (
            "List of valuable items in case of insurance claim (electronics,"
            " jewelry, furniture)."
        ),
    },
    {
        "title": "Houseplant Care Guide",
        "body": (
            "Specific care instructions for each houseplant (watering"
            " frequency, light needs, soil type)."
        ),
    },
    {
        "title": "Utility Bill Due Dates",
        "body": (
            "Electricity: 15th of every month \nGas: 20th of every month"
            " \nWater: 5th of every month"
        ),
    },
    {
        "title": "Party Planning - Birthday",
        "body": "Guest list, menu, decorations, entertainment.",
    },
    {
        "title": "Neighborhood Watch Meeting Notes",
        "body": "Discussed recent crime trends, safety tips, upcoming events.",
    },
    {
        "title": "Pet Care Reminders",
        "body": (
            "Feed dog twice a day, walk dog daily, clean litter box, schedule"
            " vet checkups."
        ),
    },
    {
        "title": "DIY Project - Bookshelf",
        "body": "Materials needed: wood, screws, nails, saw, drill.",
    },
    {
        "title": "Movie Night Ideas",
        "body": "List of family-friendly movies to watch together.",
    },
    {
        "title": "Recipes to Try",
        "body": "Links or descriptions of new recipes to cook at home.",
    },
    {
        "title": "Home Security Checklist",
        "body": (
            "Lock doors and windows, install alarm system, set timers for"
            " lights, don't hide spare keys outside."
        ),
    },
    {
        "title": "Holiday Decoration Ideas",
        "body": "Themes, color schemes, DIY crafts, shopping list.",
    },
]

_PROJECTS = [
    {
        "title": "Community Garden Project",
        "body": (
            "Create a shared green space for the neighborhood, promoting"
            " sustainable food production and community connection."
        ),
    },
    {
        "title": "Home Renovation - Kitchen Remodel",
        "body": (
            "Design plans, budget, materials list, contractor quotes, timeline"
            " for a kitchen renovation."
        ),
    },
    {
        "title": "Mobile App Development - Expense Tracker",
        "body": (
            "Project outline, wireframes, technology stack, development"
            " timeline, marketing plan."
        ),
    },
    {
        "title": "Book Writing Project - Mystery Novel",
        "body": (
            "Outline, character sketches, plot points, research notes, writing"
            " schedule."
        ),
    },
    {
        "title": "Online Course Creation - Web Development Basics",
        "body": (
            "Course curriculum, lesson plans, video scripts, assessment"
            " questions, marketing strategy."
        ),
    },
    {
        "title": "DIY Furniture Building - Coffee Table",
        "body": (
            "Design plans, materials list, tools required, step-by-step"
            " instructions, finishing options."
        ),
    },
    {
        "title": "Photography Portfolio Website",
        "body": (
            "Website design mockups, image selection, content writing, hosting"
            " platform, launch plan."
        ),
    },
    {
        "title": "Charity Fundraising Event - 5K Run/Walk",
        "body": (
            "Event logistics, sponsorships, marketing plan, registration"
            " process, volunteer coordination."
        ),
    },
    {
        "title": "Small Business Launch - Handmade Jewelry",
        "body": (
            "Business plan, product line, branding, pricing, marketing"
            " strategy, online store setup."
        ),
    },
    {
        "title": "Art Installation - Public Sculpture",
        "body": (
            "Concept sketches, material selection, fabrication process,"
            " installation logistics, funding proposals."
        ),
    },
    {
        "title": "Documentary Film - Local Environmental Issues",
        "body": (
            "Research topics, interview subjects, filming locations, script"
            " outline, editing plan."
        ),
    },
    {
        "title": "Music Album Recording - Indie Rock Band",
        "body": (
            "Songwriting, studio booking, recording schedule, mixing and"
            " mastering, album artwork design."
        ),
    },
    {
        "title": "Community Theater Production - Shakespeare Play",
        "body": (
            "Casting calls, rehearsal schedule, set design, costume design,"
            " marketing plan."
        ),
    },
    {
        "title": "Coding Challenge - Machine Learning Algorithm",
        "body": (
            "Problem statement, data set, algorithm implementation, performance"
            " evaluation, results analysis."
        ),
    },
    {
        "title": "Website Redesign - Non-Profit Organization",
        "body": (
            "Needs analysis, wireframes, design mockups, content migration,"
            " development plan."
        ),
    },
    {
        "title": "Product Launch - Smart Home Device",
        "body": (
            "Market research, product specifications, pricing strategy,"
            " marketing campaign, launch timeline."
        ),
    },
    {
        "title": "Interior Design Project - Living Room Makeover",
        "body": (
            "Mood board, furniture selection, color palette, lighting plan,"
            " accessories."
        ),
    },
    {
        "title": "Travel Blog - Solo Trip Around Southeast Asia",
        "body": (
            "Itinerary, travel tips, destination highlights, photography plan,"
            " content schedule."
        ),
    },
    {
        "title": "Language Learning Project - Conversational Spanish",
        "body": (
            "Study plan, learning resources, practice activities, language"
            " exchange partners, progress tracking."
        ),
    },
    {
        "title": "Health and Fitness Challenge - 30-Day Transformation",
        "body": (
            "Workout plan, meal plan, progress tracking, motivation tips,"
            " before-and-after photos."
        ),
    },
]

_IDEAS = [
    {
        "title": "Personalized Pet Portraits",
        "body": (
            "Offer custom-painted portraits of pets based on photos provided by"
            " clients."
        ),
    },
    {
        "title": "Language Learning App",
        "body": (
            "Gamified language learning app with interactive exercises and"
            " personalized feedback."
        ),
    },
    {
        "title": "Sustainable Fashion Subscription Box",
        "body": (
            "Curated selection of eco-friendly clothing and accessories"
            " delivered monthly."
        ),
    },
    {
        "title": "Virtual Reality Escape Room",
        "body": "Immersive escape room experience using VR technology.",
    },
    {
        "title": "Food Delivery Service for Dietary Restrictions",
        "body": (
            "Cater to people with allergies, intolerances, or specific diets."
        ),
    },
    {
        "title": "Mental Health Support App",
        "body": (
            "Provides resources, guided meditations, and online therapy"
            " options."
        ),
    },
    {
        "title": "AI-Powered Personalized Travel Itinerary Generator",
        "body": (
            "Creates custom travel plans based on user preferences and"
            " interests."
        ),
    },
    {
        "title": "Smart Home Gardening System",
        "body": (
            "Automated watering, lighting, and nutrient monitoring for indoor"
            " plants."
        ),
    },
    {
        "title": "Subscription Box for Book Lovers",
        "body": (
            "Curated selection of books, bookish goodies, and exclusive author"
            " content."
        ),
    },
    {
        "title": "Online Platform for Local Artisans",
        "body": (
            "Showcase and sell handmade crafts and artwork directly to"
            " consumers."
        ),
    },
    {
        "title": "Eco-Friendly Cleaning Products",
        "body": (
            "Develop and market a line of sustainable cleaning products for"
            " households."
        ),
    },
    {
        "title": "Personalized Nutrition Coaching App",
        "body": (
            "Offers customized meal plans and fitness recommendations based on"
            " individual goals and needs."
        ),
    },
    {
        "title": "Social Media Platform for Pet Owners",
        "body": (
            "Connect with other pet owners, share photos, and find pet-related"
            " services."
        ),
    },
    {
        "title": "Online Marketplace for Vintage Clothing",
        "body": "Buy and sell unique vintage clothing and accessories.",
    },
    {
        "title": "Augmented Reality Furniture Shopping App",
        "body": (
            "Visualize how furniture would look in your home before buying."
        ),
    },
    {
        "title": "Subscription Service for Sustainable Home Goods",
        "body": (
            "Deliver eco-friendly household products and reusable alternatives"
            " to single-use items."
        ),
    },
    {
        "title": "Crowdfunding Platform for Creative Projects",
        "body": (
            "Support artists, musicians, filmmakers, and other creatives in"
            " funding their projects."
        ),
    },
    {
        "title": "Mobile App for Finding Local Volunteer Opportunities",
        "body": (
            "Connect volunteers with organizations in need of their skills and"
            " time."
        ),
    },
    {
        "title": "Online Marketplace for Personalized Gifts",
        "body": "Offer custom-made gifts for various occasions and interests.",
    },
    {
        "title": "Zero-Waste Grocery Store",
        "body": (
            "Sell bulk food items and package-free products to reduce waste."
        ),
    },
]

_HEALTH = [
    {
        "title": "Workout Routine - Strength Training",
        "body": (
            "Exercises for each muscle group, sets, reps, rest periods, weekly"
            " schedule."
        ),
    },
    {
        "title": "Meal Plan - Week of May 6th",
        "body": (
            "Breakfast, lunch, dinner, snacks for each day, grocery list,"
            " recipes."
        ),
    },
    {
        "title": "Doctor's Appointment Notes - May 3rd",
        "body": (
            "Summary of discussion with doctor, diagnosis, treatment plan,"
            " medication list, follow-up appointments."
        ),
    },
    {
        "title": "Medication Schedule",
        "body": (
            "List of medications, dosage, frequency, time to take, potential"
            " side effects, refills needed."
        ),
    },
    {
        "title": "Health Goals for 2024",
        "body": (
            "Lose 10 pounds, run a 5K, reduce stress, improve sleep quality,"
            " get regular checkups."
        ),
    },
    {
        "title": "Fitness Tracker Data - April 2024",
        "body": (
            "Steps taken, calories burned, active minutes, sleep duration,"
            " heart rate."
        ),
    },
    {
        "title": "Mental Health Resources",
        "body": (
            "Contact information for therapists, support groups, hotlines,"
            " websites, apps for mental well-being."
        ),
    },
    {
        "title": "Healthy Recipes to Try",
        "body": (
            "Links or descriptions of nutritious recipes for breakfast, lunch,"
            " dinner, snacks, desserts."
        ),
    },
    {
        "title": "Nutrition Tips",
        "body": (
            "Guidelines for balanced eating, portion control, healthy food"
            " swaps, meal prep ideas."
        ),
    },
    {
        "title": "Exercise Ideas",
        "body": (
            "Variety of workouts for different fitness levels and interests"
            " (cardio, strength, flexibility)."
        ),
    },
    {
        "title": "Sleep Hygiene Checklist",
        "body": (
            "Tips for creating a relaxing bedtime routine, improving sleep"
            " environment, getting quality sleep."
        ),
    },
    {
        "title": "Health Insurance Information",
        "body": (
            "Policy number, provider contact information, coverage details,"
            " copayments, deductibles."
        ),
    },
    {
        "title": "Allergy Information",
        "body": (
            "List of allergies, triggers, symptoms, treatment plan, emergency"
            " contact information."
        ),
    },
    {
        "title": "Medical History",
        "body": (
            "Summary of past illnesses, surgeries, medications, immunizations,"
            " family medical history."
        ),
    },
    {
        "title": "Weight Loss Progress Tracker",
        "body": (
            "Starting weight, current weight, goal weight, weight loss"
            " milestones, measurements."
        ),
    },
    {
        "title": "Meditation and Mindfulness Resources",
        "body": (
            "Guided meditations, mindfulness exercises, breathing techniques"
            " for stress reduction."
        ),
    },
    {
        "title": "Health-Related Articles and Blogs",
        "body": (
            "Links to informative articles on health topics, wellness trends,"
            " medical research."
        ),
    },
    {
        "title": "Health Challenges and Solutions",
        "body": (
            "Personal notes on overcoming health obstacles, strategies for"
            " managing chronic conditions."
        ),
    },
    {
        "title": "Fitness Class Schedule",
        "body": (
            "Days, times, locations of fitness classes (yoga, Pilates, Zumba,"
            " strength training)."
        ),
    },
    {
        "title": "Food Diary",
        "body": (
            "Record of daily food intake, calories, macronutrients,"
            " micronutrients, water intake."
        ),
    },
]

_TRAVEL = [
    {
        "title": "Trip Itinerary - Europe Summer 2024",
        "body": (
            "Flights, accommodations, transportation, daily activities,"
            " sightseeing plans, restaurant reservations."
        ),
    },
    {
        "title": "Packing List - Beach Vacation",
        "body": (
            "Clothing, toiletries, electronics, travel documents, beach gear,"
            " first-aid kit."
        ),
    },
    {
        "title": "Travel Budget - Southeast Asia Backpacking",
        "body": (
            "Estimated costs for flights, accommodation, food, transportation,"
            " activities, visas."
        ),
    },
    {
        "title": "Travel Insurance Information",
        "body": (
            "Policy number, provider contact information, coverage details,"
            " claim procedures."
        ),
    },
    {
        "title": "Language Phrasebook - Italian",
        "body": (
            "Common phrases for greetings, directions, ordering food, asking"
            " for help."
        ),
    },
    {
        "title": "Travel Tips - Staying Healthy Abroad",
        "body": (
            "Vaccinations, food and water safety, jet lag prevention, managing"
            " common illnesses."
        ),
    },
    {
        "title": "Bucket List Destinations",
        "body": (
            "Dream travel destinations with reasons for visiting and potential"
            " activities."
        ),
    },
    {
        "title": "Hotel Reviews - Paris",
        "body": (
            "Reviews of hotels in Paris based on location, amenities, price,"
            " service, cleanliness."
        ),
    },
    {
        "title": "Flight Confirmation - Round-trip to Tokyo",
        "body": (
            "Airline, flight numbers, departure and arrival times, seat"
            " assignments, baggage allowance."
        ),
    },
    {
        "title": "Restaurant Recommendations - Rome",
        "body": (
            "List of restaurants in Rome with cuisine type, price range,"
            " location, reviews."
        ),
    },
    {
        "title": "Travel Photography Tips",
        "body": (
            "Equipment recommendations, composition techniques, capturing"
            " different types of travel photos."
        ),
    },
    {
        "title": "Visa Requirements - China",
        "body": (
            "Information on visa types, application process, required"
            " documents, processing times."
        ),
    },
    {
        "title": "Travel Journal - Road Trip Across America",
        "body": (
            "Daily entries documenting experiences, observations, thoughts, and"
            " feelings during the trip."
        ),
    },
    {
        "title": "Transportation Options - London",
        "body": (
            "Information on public transportation (tube, buses), taxis,"
            " ride-sharing services, bike rentals."
        ),
    },
    {
        "title": "Travel Apps and Websites",
        "body": (
            "List of useful apps for booking flights, hotels, finding"
            " restaurants, translating languages, navigating."
        ),
    },
    {
        "title": "Cultural Etiquette Tips - Japan",
        "body": (
            "Customs and traditions to be aware of, do's and don'ts,"
            " appropriate behavior in different settings."
        ),
    },
    {
        "title": "Solo Travel Tips",
        "body": (
            "Advice on staying safe, meeting people, planning activities,"
            " budgeting for solo travelers."
        ),
    },
    {
        "title": "Travel Gear Checklist",
        "body": (
            "Essentials like luggage, backpacks, travel adapters, toiletries,"
            " first-aid kit, travel pillow."
        ),
    },
    {
        "title": "Festivals and Events Calendar - Europe",
        "body": (
            "List of upcoming festivals, cultural events, concerts, exhibitions"
            " in different European countries."
        ),
    },
    {
        "title": "Travel Photography Gear",
        "body": (
            "Camera, lenses, tripod, filters, memory cards, batteries, cleaning"
            " supplies."
        ),
    },
]

_FINANCE = [
    {
        "title": "Monthly Budget - May 2024",
        "body": (
            "Income, expenses, savings goals, spending categories, debt"
            " repayment plan."
        ),
    },
    {
        "title": "Investment Portfolio Summary",
        "body": (
            "Breakdown of investments (stocks, bonds, mutual funds),"
            " performance overview, asset allocation."
        ),
    },
    {
        "title": "Retirement Savings Plan",
        "body": (
            "Contribution schedule, target retirement age, projected retirement"
            " income, investment options."
        ),
    },
    {
        "title": "Tax Preparation Checklist - 2023",
        "body": (
            "Documents needed (W-2, 1099 forms), deductions to claim, tax"
            " filing deadline."
        ),
    },
    {
        "title": "Mortgage Payment Schedule",
        "body": (
            "Loan amount, interest rate, monthly payment, remaining balance,"
            " amortization schedule."
        ),
    },
    {
        "title": "Emergency Fund Progress",
        "body": (
            "Current balance, savings goal, monthly contributions, target"
            " amount (3-6 months of expenses)."
        ),
    },
    {
        "title": "Credit Card Statement - April 2024",
        "body": (
            "Transactions, due date, minimum payment, outstanding balance,"
            " rewards earned."
        ),
    },
    {
        "title": "Financial Goals for 2024",
        "body": (
            "Save for a down payment on a house, pay off student loan debt,"
            " increase retirement contributions."
        ),
    },
    {
        "title": "Investment Research - Tech Stocks",
        "body": (
            "Analysis of potential tech companies to invest in, growth"
            " projections, risk assessment."
        ),
    },
    {
        "title": "Budgeting Tips & Tricks",
        "body": (
            "Strategies for saving money, reducing expenses, tracking spending,"
            " automating savings."
        ),
    },
    {
        "title": "Financial Advisor Contact Information",
        "body": (
            "Name, email address, phone number, website of financial advisor."
        ),
    },
    {
        "title": "Online Banking Login Details",
        "body": (
            "Username, password, security questions, account numbers for online"
            " banking access."
        ),
    },
    {
        "title": "Insurance Policies Summary",
        "body": (
            "Coverage details for health, auto, home, life insurance policies,"
            " contact information for insurers."
        ),
    },
    {
        "title": "Debt Repayment Plan",
        "body": (
            "List of debts (credit cards, student loans), balances, interest"
            " rates, minimum payments, payoff strategies."
        ),
    },
    {
        "title": "Expense Tracking Spreadsheet",
        "body": (
            "Template for tracking daily expenses, categorizing spending,"
            " identifying areas for saving."
        ),
    },
    {
        "title": "Financial News & Analysis",
        "body": (
            "Summary of articles and reports on market trends, economic"
            " outlook, investment strategies."
        ),
    },
    {
        "title": "Personal Finance Resources",
        "body": (
            "Links to helpful websites, blogs, podcasts, books on personal"
            " finance topics."
        ),
    },
    {
        "title": "College Savings Plan - 529 Account",
        "body": (
            "Beneficiary information, investment options, contribution history,"
            " projected college costs."
        ),
    },
    {
        "title": "Estate Planning Documents",
        "body": (
            "Will, power of attorney, healthcare directive, beneficiaries,"
            " executor information."
        ),
    },
    {
        "title": "Charitable Giving Log",
        "body": (
            "Record of donations to charitable organizations, amounts, dates,"
            " tax-deductible status."
        ),
    },
]

# Folder names contains all possibilities for the revelant folder names
# in the task proto.
_FOLDERS = {
    "Recipes": _RECIPES,
    "Tasks": _TASKS,
    "Meeting Notes": _MEETING_NOTES,
    "Personal": _PERSONAL,
    "Work": _WORK,
    "School": _SCHOOL,
    "Home": _HOME,
    "Projects": _PROJECTS,
    "Ideas": _IDEAS,
    "Health": _HEALTH,
    "Travel": _TRAVEL,
    "Finance": _FINANCE,
}


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Information retrieval registry; it dynamically creates tasks.

Information retrieval tasks are defined in a textproto file. For each task in
the proto,
we dynamically create a new task with the name of the task in the class name.
"""

import os
import random
from typing import Any, Generic, Type, TypeVar
from android_world.task_evals.information_retrieval import information_retrieval
from android_world.task_evals.information_retrieval.proto import task_pb2
from google.protobuf import text_format

TaskType = TypeVar('TaskType', bound=information_retrieval.InformationRetrieval)


class InformationRetrievalRegistry(Generic[TaskType]):
  """Information retrieval registry; it dynamically creates tasks."""

  @property
  def registry(
      self,
  ) -> dict[str, TaskType]:
    return self._task_registry

  def _read_tasks(self) -> task_pb2.Tasks:
    proto = task_pb2.Tasks()
    script_dir = os.path.dirname(os.path.abspath(__file__))
    local_path = os.path.join(script_dir, 'proto', 'tasks.textproto')
    with open(local_path, 'r') as f:
      textproto_content = f.read()
    text_format.Merge(textproto_content, proto)
    return proto

  def __init__(
      self,
      filename: str | None = None,
      task_type: Type[TaskType] = information_retrieval.InformationRetrieval,
  ):
    self._task_registry: dict[str, TaskType] = {}
    self.filename = filename
    self.task_type = task_type
    raw_tasks = self._read_tasks()
    for raw_task in raw_tasks.tasks:
      task_class = self._build_task_class(raw_task)
      self._task_registry[raw_task.name] = task_class

  def _build_task_class(
      self,
      task_proto: task_pb2.Task,
  ) -> TaskType:
    """Dynamically builds and returns a new subclass of InformationRetrieval.

    This function creates a subclass of InformationRetrieval from the task.

    Args:
      task_proto: The task proto defining the class to be created.

    Returns:
      A subclass of InformationRetrieval that is dynamically created.
    """

    @classmethod
    def generate_random_params(cls) -> dict[str, Any]:  # pylint:disable=unused-argument
      params = {}
      for task_param in task_proto.task_params:
        params[task_param.name] = random.choice(
            list(task_param.possible_values)
        )
      return params

    @property
    def task_template(self) -> task_pb2.Task:  # pylint:disable=unused-argument
      return task_proto

    return type(
        task_proto.name,
        (self.task_type,),
        {
            'generate_random_params': generate_random_params,
            'task_template': task_template,
        },
    )



# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import datetime
import zoneinfo
from absl.testing import absltest
from absl.testing import parameterized
from android_world.env import device_constants
from android_world.task_evals.information_retrieval import datetime_utils


class DatetimeUtilsTest(parameterized.TestCase):

  def test_give_me_a_name(self):
    pass

  @parameterized.parameters([
      ('October 15', 'October 15 2023'),
      ('October 15 2023', 'October 15 2023'),
      ('October 20 2023', 'October 20 2023'),
      ('today', 'October 25 2023'),
      ('tomorrow', 'October 26 2023'),
      ('Thursday', 'October 26 2023'),
      ('Friday', 'October 27 2023'),
      ('Saturday', 'October 28 2023'),
      ('Sunday', 'October 29 2023'),
      ('Monday', 'October 30 2023'),
      ('Tuesday', 'October 31 2023'),
      ('Wednesday', 'November 1 2023'),
      ('this Thursday', 'October 26 2023'),
      ('this Friday', 'October 27 2023'),
      ('this Saturday', 'October 28 2023'),
      ('this Sunday', 'October 29 2023'),
      ('this Monday', 'October 30 2023'),
      ('this Tuesday', 'October 31 2023'),
      ('this Wednesday', 'November 1 2023'),
      ('the Thursday after next', 'November 2 2023'),
      ('the Friday after next', 'November 3 2023'),
      ('the Saturday after next', 'November 4 2023'),
      ('the Sunday after next', 'November 5 2023'),
      ('the Monday after next', 'November 6 2023'),
      ('the Tuesday after next', 'November 7 2023'),
      ('the Wednesday after next', 'November 8 2023'),
  ])
  def test_generate_reworded_date(self, expected_rewording: str, date: str):
    original_today = device_constants.DT
    device_constants.DT = datetime.datetime(
        2023, 10, 25, 15, 34, 0, tzinfo=zoneinfo.ZoneInfo('UTC')
    )
    result = datetime_utils._generate_nl_date_options(date)
    self.assertContainsSubset([expected_rewording], result)
    device_constants.DT = original_today

  @parameterized.parameters([
      ('2:30pm', datetime.time(hour=14, minute=30)),
      ('14:30', datetime.time(hour=14, minute=30)),
      ('2am', datetime.time(hour=2, minute=00)),
  ])
  def test_parse_time(self, time_string: str, expected: datetime.time):
    result = datetime_utils.parse_time(time_string)
    self.assertEqual(result, expected)


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Information Retrieval utils for datetime."""

import datetime
import random
from android_world.env import device_constants

DATE_FORMAT = '%B %d %Y'


def get_date(date_str: str) -> datetime.date:
  return datetime.datetime.strptime(date_str, DATE_FORMAT).date()


def _generate_nl_date_options(date_str: str) -> list[str]:
  """Lists all options for a natural language way of expressing date.

  Possible options include:
    - today, tomorrow, yesterday if they apply
    - <day of week> if the day is within a week in the future or in the past.
    - 'this <day of week>' if the day is within a week in the future.
    - 'the <day of week> after next' if it applies.
    - <month name> <day>
    - <month name> <day> <year>

  Args:
    date_str: The date to rephrase in a natural language formats.

  Returns:
    A list of strings representing the date in a natural way.
  """
  date = get_date(date_str)
  options = [date.strftime('%B %d'), date.strftime(DATE_FORMAT)]
  if date == device_constants.DT.date():
    options.append('today')
  if date == device_constants.DT.date() + datetime.timedelta(days=1):
    options.append('tomorrow')
  if date == device_constants.DT.date() - datetime.timedelta(days=1):
    options.append('yesterday')
  if date > device_constants.DT.date():
    day_name = date.strftime('%A')
    if date - device_constants.DT.date() <= datetime.timedelta(days=7):
      options.append(day_name)
      options.append('this {}'.format(day_name))
    elif date - device_constants.DT.date() <= datetime.timedelta(days=14):
      options.append('the {} after next'.format(day_name))
  if date < device_constants.DT.date():
    day_name = date.strftime('%A')
    if device_constants.DT.date() - date <= datetime.timedelta(days=7):
      options.append(day_name)
  return options


def generate_reworded_date(date_str: str) -> str:
  """Randomly generates a natural language way of expressing date.

  Uses the following options:
    - today, tomorrow, yesterday if they apply
    - <day of week> if the day is within a week in the future or in the past.
    - 'this <day of week>' if the day is within a week in the future.
    - 'the <day of week> after next' if it applies.
    - <month name> <day>
    - <month name> <day> <year>

  Args:
    date_str: The date to rephrase in a natural language format.

  Returns:
    A string representing the date in a natural way.
  """

  options = _generate_nl_date_options(date_str)
  return random.choice(options)


def parse_time(time_str: str) -> datetime.time:
  """Parse a time string into a datetime object using multiple formats.

  The following formats are handled:
    <24 hour format>:<minute> : e.g. 10:00, 15:00
    <12 hour format>:<minute><pm/am>: e.g. 10:00am, 10:00pm
    <12 hour format><pm/am> : e.g. 10am, 10pm

  Args:
    time_str: The string representation of the time.

  Returns:
    A datetime.time object representing the time.

  Raises:
    ValueError: If the time string does not match any of the expected formats.
  """
  time_formats = ('%H:%M', '%I:%M%p', '%I%p')
  for fmt in time_formats:
    try:
      dt = datetime.datetime.strptime(time_str, fmt)
      return datetime.time(hour=dt.hour, minute=dt.minute)
    except ValueError:
      pass
  raise ValueError(f"Time string '{time_str}' does not match any known format.")


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Evaluators for information retrieval tasks."""

import abc
from typing import Any
from android_world.env import interface
from android_world.task_evals import task_eval
from android_world.task_evals.information_retrieval import activity_app_utils
from android_world.task_evals.information_retrieval import calendar_utils as calendar_utils_ir
from android_world.task_evals.information_retrieval import datetime_utils as datetime_utils_ir
from android_world.task_evals.information_retrieval import joplin_app_utils
from android_world.task_evals.information_retrieval import proto_utils
from android_world.task_evals.information_retrieval import task_app_utils
from android_world.task_evals.information_retrieval.proto import task_pb2
from android_world.task_evals.single.calendar import calendar_utils


class InformationRetrieval(task_eval.TaskEval, abc.ABC):
  """Task for information retrieval.

  Each information retrieval task is dynamically generated using the task
  parameters and success criteria are tailored to the specific requirements of
  the task. The class supports initializing tasks with app-specific states and
  handling conditional task logic based on the initial state's app context,
  particularly for apps like SimpleCalendarProApp.
  """

  template = ''
  complexity = 1
  schema = {}
  app_names = ()

  @property
  @abc.abstractmethod
  def task_template(self) -> task_pb2.Task:
    """The Task proto defining this Information Retrieval task."""

  @property
  def task(self) -> task_pb2.Task:
    return self._task

  def __init__(
      self,
      params: dict[str, Any],
  ):
    super().__init__(params)
    # Need to make a copy of the task template so that future runs aren't
    # affected.
    self._task = task_pb2.Task()
    self._task.CopyFrom(self.task_template)
    self.template = self.task.prompt
    self.complexity = self.task.complexity
    if self.task.relevant_state.state.HasField('calendar'):
      self.app_names = (self.task.relevant_state.state.calendar.app_name,)
    if self.task.relevant_state.state.HasField('tasks_app'):
      self.app_names = ('tasks',)
    if self.task.relevant_state.state.HasField('sports_activity_app'):
      self.app_names = ('open tracks sports tracker',)
    if self.task.relevant_state.state.HasField('notes_app'):
      self.app_names = ('joplin',)

  def initialize_task(
      self,
      env: interface.AsyncEnv,
  ) -> None:
    super().initialize_task(env)
    proto_utils.initialize_proto(self.task, self.params)
    _maybe_replace_date(self.params)
    if (
        self.task.relevant_state.state.HasField('calendar')
        and self.task.relevant_state.state.calendar.app_name
        == 'simple calendar pro'
    ):
      calendar_utils_ir.setup_task_state(
          self.task.relevant_state.state.calendar,
          list(self.task.relevant_state.exclusion_conditions),
          env,
      )
    if self.task.relevant_state.state.HasField('tasks_app'):
      task_app_utils.setup_task_state(
          self.task.relevant_state.state.tasks_app,
          list(self.task.relevant_state.exclusion_conditions),
          env,
      )
    if self.task.relevant_state.state.HasField('sports_activity_app'):
      activity_app_utils.setup_task_state(
          self.task.relevant_state.state.sports_activity_app,
          list(self.task.relevant_state.exclusion_conditions),
          env,
      )
    if self.task.relevant_state.state.HasField('notes_app'):
      joplin_app_utils.setup_task_state(
          self.task.relevant_state.state.notes_app,
          list(self.task.relevant_state.exclusion_conditions),
          env,
      )

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    if not env.interaction_cache:
      return 0.0

    try:
      answers_are_equal = proto_utils.check_agent_answer(
          env.interaction_cache, self.task
      )
      return 1.0 if answers_are_equal else 0.0
    except ValueError:
      return 0.0

  def tear_down(self, env: interface.AsyncEnv) -> None:
    calendar_utils.clear_calendar_db(env)
    task_app_utils.clear_task_db(env)
    activity_app_utils.clear_db(env)
    joplin_app_utils.clear_dbs(env)
    super().tear_down(env)


def _maybe_replace_date(params: dict[str, Any]) -> None:
  """Maybe replaces date parameters with a natural language equivalent."""
  for param_name, param_value in params.items():
    if param_name == 'seed':
      continue
    try:
      if not param_value:
        continue
      params[param_name] = datetime_utils_ir.generate_reworded_date(param_value)
    except ValueError:
      pass  # Skip if there's no date parameter.


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from absl.testing import absltest
from android_world.task_evals.information_retrieval import information_retrieval_registry


class InformationRetrievalRegistryTest(absltest.TestCase):

  def test_read_in_tasks(self):
    tasks = information_retrieval_registry.InformationRetrievalRegistry(
    )._read_tasks()
    self.assertNotEmpty(list(tasks.tasks))
    for task in tasks.tasks:
      self.assertNotEmpty(task.name)
      self.assertNotEmpty(task.prompt)

  def test_registry(self):
    ir_registry = information_retrieval_registry.InformationRetrievalRegistry(
    )
    tasks = ir_registry._read_tasks()
    registry = ir_registry.registry
    for task in tasks.tasks:
      task_class = registry[task.name]
      self.assertIn(task.name, registry)
      self.assertEqual(task.name, task_class.__name__)
      self.assertEqual(
          task_class(task_class.generate_random_params()).task_template,
          task,
      )


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Utils for manipulating the task and initialization protos."""

from collections.abc import Iterator
import datetime
import random
import re
from typing import Any, TypeVar

from android_world.task_evals.information_retrieval import datetime_utils as datetime_utils_ir
from android_world.task_evals.information_retrieval.proto import state_pb2
from android_world.task_evals.information_retrieval.proto import task_pb2
from android_world.utils import fuzzy_match_lib
from google.protobuf import message

ExpectedAnswer = TypeVar(
    'ExpectedAnswer',
    str,
    datetime.datetime,
    datetime.date,
    datetime.time,
    float,
    int,
)

AppData = TypeVar(
    'AppData', state_pb2.Event, state_pb2.TasksAppTask, state_pb2.SportsActivity
)

FieldMessage = TypeVar(
    'FieldMessage',
    state_pb2.Event,
    task_pb2.Expectation,
    state_pb2.TasksAppTask,
    state_pb2.SportsActivity,
    task_pb2.ExclusionCondition,
)


def _combine_date_and_time(
    answer1: ExpectedAnswer, answer2: ExpectedAnswer
) -> str | datetime.datetime:
  """Combines two expectations into a single answer.

  Combines them in the following ways:
   - one of the inputs is a date and the other is a time - will output a
   datetime
   - all other combinations will be combined as a string with a single space
   between the two.

  Args:
    answer1: The first answer to be merged.
    answer2: The second answer to be merged

  Returns:
    The merged result, either a datetime or a string.
  """
  if isinstance(answer1, datetime.date) and isinstance(answer2, datetime.time):
    return datetime.datetime(
        answer1.year, answer1.month, answer1.day, answer2.hour, answer2.minute
    )
  elif isinstance(answer2, datetime.date) and isinstance(
      answer1, datetime.time
  ):
    return datetime.datetime(
        answer2.year, answer2.month, answer2.day, answer1.hour, answer1.minute
    )
  else:
    raise ValueError(f'Unsupported combination: {answer1} and {answer2}')


def _check_match_types(
    match_types: list[task_pb2.Expectation.MatchType],
) -> None:
  """Checks if the match types are supported."""

  if len(match_types) == 1 or not match_types:
    return
  if len(match_types) > 2:
    raise ValueError(
        'Unsupported combined match types: {}'.format([
            task_pb2.Expectation.MatchType.Name(match_type)
            for match_type in match_types
        ])
    )
  if set(match_types) != set((
      task_pb2.Expectation.MatchType.DATE_MATCH,
      task_pb2.Expectation.MatchType.TIME_MATCH,
  )):
    raise ValueError(
        'Unsupported combined match types: {}'.format([
            task_pb2.Expectation.MatchType.Name(match_type)
            for match_type in match_types
        ])
    )


def _cast_answers_to_type(
    match_types: list[task_pb2.Expectation.MatchType], answers: list[str]
) -> list[ExpectedAnswer]:
  if not match_types:
    return answers
  match match_types:
    case [task_pb2.Expectation.MatchType.STRING_MATCH]:
      return [str(answer) for answer in answers]
    case [task_pb2.Expectation.MatchType.NUMBER_MATCH]:
      return [float(answer) for answer in answers]
    case [task_pb2.Expectation.MatchType.DATE_MATCH]:
      return [
          datetime.datetime.strptime(
              answer, datetime_utils_ir.DATE_FORMAT
          ).date()
          for answer in answers
      ]
    case [task_pb2.Expectation.MatchType.TIME_MATCH]:
      return [
          datetime.datetime.strptime(answer, '%H:%M').time()
          for answer in answers
      ]
    case [
        task_pb2.Expectation.MatchType.DATE_MATCH,
        task_pb2.Expectation.MatchType.TIME_MATCH,
    ]:
      return [
          datetime.datetime.strptime(
              answer, datetime_utils_ir.DATE_FORMAT + ' %H:%M'
          )
          for answer in answers
      ]
    case _:
      raise ValueError(f'Unsupported match types: {match_types}')


def check_agent_answer(agent_answer: str, task: task_pb2.Task) -> bool:
  """Checks if the agent answer matches the task's expectations."""
  # If there are multiple answers, they are separated by commas
  answers = [answer.strip() for answer in agent_answer.split(',')]
  match_types = list(
      map(
          lambda expectation: expectation.match_type,
          task.success_criteria.expectations,
      )
  )
  _check_match_types(match_types)

  try:
    type_cast_answers = _cast_answers_to_type(match_types, answers)
  except ValueError as e:
    raise ValueError('Answer given in the incorrect format.') from e

  expected_answers = get_expected_answer(task)
  comparator = lambda x, y: x == y
  if task_pb2.Expectation.MatchType.STRING_MATCH in match_types:
    comparator = fuzzy_match_lib.fuzzy_match
  elif (
      task_pb2.Expectation.MatchType.NUMBER_MATCH in match_types
      and task.success_criteria.expectations[0].HasField('tolerance')
  ):
    comparator = (
        lambda x, y: abs(x - y)
        < task.success_criteria.expectations[0].tolerance
    )
  if len(type_cast_answers) != len(expected_answers):
    return False
  return all(
      any(comparator(x, y) for y in expected_answers) for x in type_cast_answers
  )


def get_expected_answer(
    task: task_pb2.Task,
) -> list[ExpectedAnswer]:
  """Gets the expected answer from the task's success criteria."""
  expected_answers = []
  for expectation in task.success_criteria.expectations:
    if expectation.HasField('expected_value'):
      return _cast_answers_to_type(
          [expectation.match_type], [expectation.expected_value]
      )
    field_transformation = expectation.field_transformation
    field_values = _get_field_values(
        task.relevant_state.state, field_transformation.field_name
    )
    expected_answer = []
    # SUM and COUNT are of type NUMBER_MATCH so handle those first.
    if (
        field_transformation.operation
        == task_pb2.FieldTransformation.Operation.SUM
    ):
      return [sum((float(value) for value in field_values))]
    elif (
        field_transformation.operation
        == task_pb2.FieldTransformation.Operation.COUNT
    ):
      return [len(list(field_values))]
    elif expectation.match_type == task_pb2.Expectation.MatchType.STRING_MATCH:
      return list(field_values)
    elif expectation.match_type == task_pb2.Expectation.MatchType.NUMBER_MATCH:
      return [float(value) for value in field_values]
    elif expectation.match_type == task_pb2.Expectation.MatchType.DATE_MATCH:
      expected_answer.extend([
          datetime.datetime.strptime(
              value, datetime_utils_ir.DATE_FORMAT
          ).date()
          for value in field_values
      ])
    elif expectation.match_type == task_pb2.Expectation.MatchType.TIME_MATCH:
      expected_answer.extend(
          [datetime_utils_ir.parse_time(value) for value in field_values]
      )
    if not expected_answers:
      expected_answers.extend(expected_answer)
    else:
      expected_answers = [
          _combine_date_and_time(answer1, answer2)
          for answer1, answer2 in zip(expected_answers, expected_answer)
      ]
  return expected_answers


def _get_field_values(proto: message.Message, field_name: str) -> Iterator[Any]:
  """Gets the values for the given field_name from a proto."""
  for field, _ in proto.ListFields():
    field_value = getattr(proto, field.name)
    is_repeated_field = not isinstance(
        field_value, message.Message
    ) and not isinstance(field_value, str)
    if field.name == field_name:
      if is_repeated_field:
        for value in field_value:
          yield value
      else:
        yield field_value
    elif isinstance(field_value, message.Message):
      yield from _get_field_values(field_value, field_name)
    elif is_repeated_field:
      for element in field_value:
        yield from _get_field_values(element, field_name)


def _remove_used_params(
    used_params: dict[str, Any], all_params: list[task_pb2.TaskParams]
) -> None:
  """Removes the used params from the list of params."""
  for index, param in enumerate(all_params):
    if (
        param.name not in used_params
        or used_params[param.name] not in param.possible_values
    ):
      continue
    used_value = used_params[param.name]
    new_param = task_pb2.TaskParams()
    new_param.CopyFrom(param)
    new_param.possible_values.remove(used_value)
    all_params[index] = new_param


def format_state_with_params(
    state: state_pb2.State,
    task_params: dict[str, Any],
    all_params: list[task_pb2.TaskParams],
) -> None:
  """Formats the state with the task params and all_params if necessary."""
  # Make a copy of the list so that the caller's copy isn't affected.
  unused_params = all_params.copy()
  _remove_used_params(task_params, unused_params)
  for field, _ in state.ListFields():
    app_proto: (
        state_pb2.Calendar
        | state_pb2.TasksAppTask
        | state_pb2.SportsActivityApp
    ) = getattr(state, field.name)
    for app_field, _ in app_proto.ListFields():
      if app_field.name == 'app_name':
        continue
      app_data_list = getattr(app_proto, app_field.name)
      for app_data in app_data_list:
        for app_data_field, _ in app_data.ListFields():
          _format_field_if_exists(
              app_data, app_data_field.name, task_params, unused_params
          )


def format_relevant_state_with_params(
    relevant_state: task_pb2.RelevantState,
    task_params: dict[str, Any],
    all_params: list[task_pb2.TaskParams],
) -> None:
  unused_params = all_params.copy()
  _remove_used_params(task_params, unused_params)
  format_state_with_params(relevant_state.state, task_params, unused_params)
  for condition in relevant_state.exclusion_conditions:
    _format_field_if_exists(condition, 'value', task_params, unused_params)


def _format_params_with_params(
    task_params: list[task_pb2.TaskParams], params: dict[str, Any]
):
  for task_param in task_params:
    for index, possible_value in enumerate(task_param.possible_values):
      task_param.possible_values[index] = possible_value.format(**params)
  for param_name, param_value in params.items():
    if isinstance(param_value, str):
      params[param_name] = param_value.format(**params)


def initialize_proto(task: task_pb2.Task, task_params: dict[str, Any]):
  _format_params_with_params(list(task.task_params), task_params)
  _format_success_criteria_with_params(task.success_criteria, task_params)
  format_relevant_state_with_params(
      task.relevant_state, task_params, list(task.task_params)
  )


def _format_success_criteria_with_params(
    success_criteria: task_pb2.SuccessCriteria, task_params: dict[str, Any]
):
  for expectation in success_criteria.expectations:
    if expectation.HasField('expected_value'):
      _format_field_if_exists(expectation, 'expected_value', task_params, [])


def _format_field_if_exists(
    proto: FieldMessage,
    field_name: str,
    task_params: dict[str, Any],
    unused_params: list[task_pb2.TaskParams],
):
  """Formats the field if it exists with the params.

  Formats each field with task_params. Additionaly, if the field has a param
  with '_without_replacement' in its name, it will pick parameters from
  unused_params to format it. These picked parameter values will then be
  removed from the unused_params list.

  Args:
    proto: The proto whose field will be formatted.
    field_name: The name of the field to format.
    task_params: The task's parameters to format the field with.
    unused_params: Extra list of parameters to chose from if task_params does
      not fully format the field.
  """
  if proto.HasField(field_name):
    if '_without_replacement}' in str(getattr(proto, field_name)):
      _format_without_replacement(proto, field_name, unused_params)
    else:
      setattr(
          proto,
          field_name,
          getattr(proto, field_name).format(**task_params),
      )


def _format_without_replacement(
    proto: FieldMessage,
    field_name: str,
    unused_params: list[task_pb2.TaskParams],
):
  """Handles field formatting when the param name contains '_without_replacement'.

  The field's parameter value will be chosen from the unused_params list and
  that value will then be removed as a possible value from that list.

  Args:
    proto: The proto whose field will be formatted.
    field_name: The name of the field to format.
    unused_params: A list of TaskParams containing possible values that have not
      yet been used for other field formatting.
  """
  field_value = getattr(proto, field_name)
  # Get the names of the parameter:
  without_replacement_params = [
      param_name[1 : param_name.find('_without_replacement')]
      for param_name in re.findall(r'\{.+?\}', field_value)
      if param_name.endswith('without_replacement}')
  ]
  for param_name in without_replacement_params:
    original_param_name = param_name + '_without_replacement'
    new_value = None
    for task_param in unused_params:
      if task_param.name == param_name:
        new_value = random.choice(list(task_param.possible_values))
        _remove_used_params({task_param.name: new_value}, unused_params)
        break

    setattr(
        proto,
        field_name,
        getattr(proto, field_name).format(**{original_param_name: new_value}),
    )


_T = TypeVar('_T')


def compare(
    field_value: _T,
    operator: task_pb2.ExclusionCondition.Operation,
    comparison_value: _T,
) -> bool:
  """Compares the field value against the comparison value using the operator."""
  if operator == task_pb2.ExclusionCondition.Operation.EQUAL_TO:
    return field_value == comparison_value
  elif operator == task_pb2.ExclusionCondition.Operation.GREATER_THAN:
    return field_value > comparison_value
  elif (
      operator == task_pb2.ExclusionCondition.Operation.GREATER_THAN_OR_EQUAL_TO
  ):
    return field_value >= comparison_value
  elif operator == task_pb2.ExclusionCondition.Operation.LESS_THAN:
    return field_value < comparison_value
  elif operator == task_pb2.ExclusionCondition.Operation.LESS_THAN_OR_EQUAL_TO:
    return field_value <= comparison_value
  elif operator == task_pb2.ExclusionCondition.Operation.CONTAINS:
    return comparison_value in str(field_value)
  else:
    raise ValueError(f'Unsupported operator: {operator}')


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import random
from unittest import mock
from absl.testing import absltest
from absl.testing import parameterized
from android_world.task_evals.information_retrieval import calendar_utils
from android_world.task_evals.information_retrieval.proto import state_pb2
from android_world.task_evals.information_retrieval.proto import task_pb2
from android_world.task_evals.utils import sqlite_schema_utils


class TestTimestampToLocalDatetime(parameterized.TestCase):

  @parameterized.parameters([
      ('30m', 30 * 60),
      ('45 minutes', 45 * 60),
      ('45 mins', 45 * 60),
      ('1 hour', 3600),
      ('1.5 hours', 5400),
      ('2h', 3600 * 2),
  ])
  def test_parse_duration(self, duration_string: str, expected: int):
    result = calendar_utils.parse_duration(duration_string)
    self.assertEqual(result, expected)

  def test_convert_date_to_unix_ts(self):
    new_date = 'October 16 2023'
    new_time = '2pm'
    self.assertEqual(
        calendar_utils.convert_datetime_to_unix_ts(new_date, new_time),
        1697464800,
    )

  def test_create_event_from_proto(self):
    event = state_pb2.Event(
        start_date='October 15 2023',
        start_time='2:30pm',
        duration='30 minutes',
        description='Description',
        title='Meeting',
    )

    converted_event = calendar_utils.create_event_from_proto(event)
    expected_event = sqlite_schema_utils.CalendarEvent(
        start_ts=1697380200,  # October 15, 2023 14:30
        end_ts=1697382000,  # October 15, 2023, 15:00
        title='Meeting',
        description='Description',
    )
    self.assertEqual(converted_event, expected_event)

  @mock.patch.object(random, 'choice')
  @mock.patch.object(random, 'randrange')
  def test_generate_random_event(self, mock_randrange, mock_choice):
    expected_event = sqlite_schema_utils.CalendarEvent(
        start_ts=1697556840,  # October 17, 2023 15:34
        end_ts=1697558640,  # October 17, 2023, 16:04
        title='Call with Nick',
        description="We will organize Jess' birthday party.",
    )

    # 1st event mock calls:
    # Mock date will be 2 days after current date (= October 17, 15:34)
    date_call1 = 24 * 60 * 17
    duration_call1 = 30
    title_call1 = 'Meeting with'
    title_name_call1 = 'Dan'
    description_verb_call1 = 'discuss'
    description_object_call1 = 'annual budget'

    # 2nd event mock calls:
    date_call2 = 24 * 60 * 17
    duration_call2 = 30
    title_call2 = 'Call with'
    title_name_call2 = 'Nick'
    description_verb_call2 = 'organize'
    description_object_call2 = "Jess' birthday party"
    mock_randrange.side_effect = [date_call1, date_call2]
    mock_choice.side_effect = [
        duration_call1,
        title_call1,
        title_name_call1,
        description_verb_call1,
        description_object_call1,
        False,
        duration_call2,
        title_call2,
        title_name_call2,
        description_verb_call2,
        description_object_call2,
        False,
    ]

    exclusion_conditions = [
        task_pb2.ExclusionCondition(
            field='title',
            value=title_name_call1,
            operation=task_pb2.ExclusionCondition.Operation.CONTAINS,
        ),
    ]
    event = calendar_utils.generate_random_event(exclusion_conditions)
    self.assertEqual(event, expected_event)

  @parameterized.named_parameters(
      dict(
          testcase_name=(
              'multiple exclusion conditions: start_date exact match, event'
              ' time overlap - is excluded'
          ),
          event=state_pb2.Event(
              start_date='October 5 2023',
              start_time='12:30',
              duration='60m',
              title='test title',
          ),
          exclusion_conditions=[
              task_pb2.ExclusionCondition(
                  field='start_date',
                  value='October 5 2023',
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
              ),
              task_pb2.ExclusionCondition(
                  field='start_time',
                  value='12:45',
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
              ),
          ],
          expected_value=False,
      ),
      dict(
          testcase_name=(
              'multiple exclusion conditions: start_date before exclusion'
              ' condition, event time overlap - not excluded'
          ),
          event=state_pb2.Event(
              start_date='October 4 2023',
              start_time='12:30',
              duration='60m',
              title='test title',
          ),
          exclusion_conditions=[
              task_pb2.ExclusionCondition(
                  field='start_date',
                  value='October 5 2023',
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
              ),
              task_pb2.ExclusionCondition(
                  field='start_time',
                  value='12:45',
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
              ),
          ],
          expected_value=True,
      ),
      dict(
          testcase_name=(
              'multiple exclusion conditions: start_date and time no overlap -'
              ' not excluded'
          ),
          event=state_pb2.Event(
              start_date='October 6 2023',
              start_time='12:30',
              duration='48h',  # end date is October 8 2023
              title='test title',
          ),
          exclusion_conditions=[
              task_pb2.ExclusionCondition(
                  field='start_date',
                  value='October 5 2023',
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
              ),
              task_pb2.ExclusionCondition(
                  field='start_time',
                  value='12:30',
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
              ),
          ],
          expected_value=True,
      ),
      dict(
          testcase_name=(
              'event overlaps start_date exclusion condition - excluded'
          ),
          event=state_pb2.Event(
              start_date='October 4 2023',
              start_time='12:30',
              duration='48h',  # end date is October 6 2023
              title='test title',
          ),
          exclusion_conditions=[
              task_pb2.ExclusionCondition(
                  field='start_date',
                  value='October 5 2023',
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
              ),
          ],
          expected_value=False,
      ),
      dict(
          testcase_name=(
              'event overlaps start_time exclusion condition with no excluded'
              ' start_date - excluded'
          ),
          event=state_pb2.Event(
              start_date='October 4 2023',
              start_time='12:30',
              duration='30m',
              title='test title',
          ),
          exclusion_conditions=[
              task_pb2.ExclusionCondition(
                  field='start_time',
                  value='12:45',
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
              ),
          ],
          expected_value=False,
      ),
      dict(
          testcase_name=(
              'event overlaps start_date and start_time exclusion conditions -'
              ' excluded'
          ),
          event=state_pb2.Event(
              start_date='October 4 2023',
              start_time='12:30',
              duration='48h',  # end date is October 6 2023
              title='test title',
          ),
          exclusion_conditions=[
              task_pb2.ExclusionCondition(
                  field='start_date',
                  value='October 5 2023',
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
              ),
              task_pb2.ExclusionCondition(
                  field='start_time',
                  value='12:45',
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
              ),
          ],
          expected_value=False,
      ),
      dict(
          testcase_name='equal_to exclusion condition not excluded',
          event=state_pb2.Event(
              start_date='October 15 2023',
              start_time='12:30',
              duration='60m',
          ),
          exclusion_conditions=[
              task_pb2.ExclusionCondition(
                  field='start_date',
                  value='October 22 2023',
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
              )
          ],
          expected_value=True,
      ),
      dict(
          testcase_name='less_than exclusion condition is excluded',
          event=state_pb2.Event(
              start_date='October 15 2023',
              start_time='12:30',
              duration='60m',
          ),
          exclusion_conditions=[
              task_pb2.ExclusionCondition(
                  field='start_date',
                  value='October 22 2023',
                  operation=task_pb2.ExclusionCondition.Operation.LESS_THAN,
              )
          ],
          expected_value=False,
      ),
      dict(
          testcase_name=(
              'multiple exclusion conditions: start_date less_than matches,'
              ' start_time does not match - not excluded'
          ),
          event=state_pb2.Event(
              start_date='October 15 2023',
              start_time='12:30',
              duration='60m',
          ),
          exclusion_conditions=[
              task_pb2.ExclusionCondition(
                  field='start_date',
                  value='October 22 2023',
                  operation=task_pb2.ExclusionCondition.Operation.LESS_THAN,
              ),
              task_pb2.ExclusionCondition(
                  field='start_time',
                  value='14:00',
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
              ),
          ],
          expected_value=True,
      ),
      dict(
          testcase_name='contains exclusion condition is excluded',
          event=state_pb2.Event(
              start_date='October 15 2023',
              start_time='12:30',
              duration='60m',
              title='Meeting with John',
          ),
          exclusion_conditions=[
              task_pb2.ExclusionCondition(
                  field='title',
                  value='John',
                  operation=task_pb2.ExclusionCondition.Operation.CONTAINS,
              )
          ],
          expected_value=False,
      ),
      dict(
          testcase_name=(
              'multiple exclusion conditions: only one applies - not excluded'
          ),
          event=state_pb2.Event(
              start_date='October 22 2023',
              start_time='12:30',
              duration='60m',
              title='test title',
          ),
          exclusion_conditions=[
              task_pb2.ExclusionCondition(
                  field='start_date',
                  value='October 22 2023',
                  operation=task_pb2.ExclusionCondition.Operation.GREATER_THAN,
              ),
              task_pb2.ExclusionCondition(
                  field='title',
                  value='test title',
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
              ),
          ],
          expected_value=True,
      ),
      dict(
          testcase_name='single condition: EQUAL_TO start_date - excluded',
          event=state_pb2.Event(
              start_date='October 15 2023',
              start_time='12:30',
              duration='30m',
              location='Mountain View',
              title='Meeting',
          ),
          exclusion_conditions=[
              task_pb2.ExclusionCondition(
                  field='start_date',
                  value='October 15 2023',
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
              )
          ],
          expected_value=False,
      ),
      dict(
          testcase_name='single condition: EQUAL_TO start_date - not excluded',
          event=state_pb2.Event(
              start_date='October 22 2023',
              start_time='12:30',
              duration='30m',
              location='Mountain View',
              title='Meeting',
          ),
          exclusion_conditions=[
              task_pb2.ExclusionCondition(
                  field='start_date',
                  value='October 24 2023',
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
              )
          ],
          expected_value=True,
      ),
      dict(
          testcase_name='single condition: EQUAL_TO start_time - excluded',
          event=state_pb2.Event(
              start_date='October 22 2023',
              start_time='12:30',
              duration='30m',
              location='Mountain View',
              title='Meeting',
          ),
          exclusion_conditions=[
              task_pb2.ExclusionCondition(
                  field='start_time',
                  value='12:30pm',
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
              )
          ],
          expected_value=False,
      ),
      dict(
          testcase_name=(
              'multiple conditions: CONTAINS title met GREATER_THAN date not'
              ' met - not excluded'
          ),
          event=state_pb2.Event(
              start_date='October 22 2023',
              start_time='12:30',
              duration='30m',
              location='Mountain View',
              title='Meeting with David',
          ),
          exclusion_conditions=[
              task_pb2.ExclusionCondition(
                  field='start_date',
                  value='October 24 2023',
                  operation=task_pb2.ExclusionCondition.Operation.GREATER_THAN,
              ),
              task_pb2.ExclusionCondition(
                  field='title',
                  value='David',
                  operation=task_pb2.ExclusionCondition.Operation.CONTAINS,
              ),
          ],
          expected_value=True,
      ),
      dict(
          testcase_name='single condition: title contains - not excluded',
          event=state_pb2.Event(
              start_date='October 22 2023',
              start_time='12:30',
              duration='30m',
              location='Mountain View',
              title='Meeting with David',
          ),
          exclusion_conditions=[
              task_pb2.ExclusionCondition(
                  field='title',
                  value='Jane',
                  operation=task_pb2.ExclusionCondition.Operation.CONTAINS,
              )
          ],
          expected_value=True,
      ),
      dict(
          testcase_name=(
              'single condition: greater_than_or_equal_to start_date - excluded'
          ),
          event=state_pb2.Event(
              start_date='October 15 2023',
              start_time='12:30',
              duration='30m',
              location='Mountain View',
              title='Meeting',
          ),
          exclusion_conditions=[
              task_pb2.ExclusionCondition(
                  field='start_date',
                  value='October 15 2023',
                  operation=task_pb2.ExclusionCondition.Operation.GREATER_THAN_OR_EQUAL_TO,
              )
          ],
          expected_value=False,
      ),
      dict(
          testcase_name=(
              'single condition: GREATER_THAN_OR_EQUAL_TO start_date - not'
              ' excluded'
          ),
          event=state_pb2.Event(
              start_date='October 22 2023',
              start_time='12:30',
              duration='30m',
              location='Mountain View',
              title='Meeting',
          ),
          exclusion_conditions=[
              task_pb2.ExclusionCondition(
                  field='start_date',
                  value='October 24 2023',
                  operation=task_pb2.ExclusionCondition.Operation.GREATER_THAN_OR_EQUAL_TO,
              )
          ],
          expected_value=True,
      ),
      dict(
          testcase_name=(
              'single condition: LESS_THAN_OR_EQUAL_TO - not excluded'
          ),
          event=state_pb2.Event(
              start_date='October 22 2023',
              start_time='12:30',
              duration='30m',
              location='Mountain View',
              title='Meeting',
          ),
          exclusion_conditions=[
              task_pb2.ExclusionCondition(
                  field='start_time',
                  value='12:00pm',
                  operation=task_pb2.ExclusionCondition.Operation.LESS_THAN_OR_EQUAL_TO,
              )
          ],
          expected_value=True,
      ),
      dict(
          testcase_name=(
              'single condition: GREATER_THAN_OR_EQUAL_TO start_time - excluded'
          ),
          event=state_pb2.Event(
              start_date='October 22 2023',
              start_time='12:00',
              duration='30m',
              location='Mountain View',
              title='Meeting',
          ),
          exclusion_conditions=[
              task_pb2.ExclusionCondition(
                  field='start_time',
                  value='12:30pm',
                  operation=task_pb2.ExclusionCondition.Operation.GREATER_THAN_OR_EQUAL_TO,
              )
          ],
          expected_value=False,
      ),
      dict(
          testcase_name=(
              'single condition: GREATER_THAN_OR_EQUAL_TO overlap at day'
              ' boundary - excluded'
          ),
          event=state_pb2.Event(
              start_date='October 21 2023',
              start_time='23:59',
              duration='1h',
              location='Mountain View',
              title='Meeting',
          ),
          exclusion_conditions=[
              task_pb2.ExclusionCondition(
                  field='start_date',
                  value='October 22 2023',
                  operation=task_pb2.ExclusionCondition.Operation.GREATER_THAN_OR_EQUAL_TO,
              )
          ],
          expected_value=False,
      ),
      dict(
          testcase_name='multiple conditions: time range - not excluded',
          event=state_pb2.Event(
              start_date='October 18 2023',
              start_time='00:45',
              duration='15 m',
              description=(
                  'We will celebrate upcoming project milestones. Looking'
                  ' forward to productive discussions.'
              ),
              title='Call with HR',
          ),
          exclusion_conditions=[
              task_pb2.ExclusionCondition(
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
                  field='start_date',
                  value='October 27 2023',
              ),
              task_pb2.ExclusionCondition(
                  operation=task_pb2.ExclusionCondition.Operation.GREATER_THAN_OR_EQUAL_TO,
                  field='start_time',
                  value='11:00am',
              ),
              task_pb2.ExclusionCondition(
                  operation=task_pb2.ExclusionCondition.Operation.LESS_THAN_OR_EQUAL_TO,
                  field='start_time',
                  value='8pm',
              ),
          ],
          expected_value=True,
      ),
      dict(
          testcase_name='multiple conditions: time range - excluded',
          event=state_pb2.Event(
              start_date='October 17 2023',
              start_time='07:31',
              duration='15 m',
              description='We will celebrate contract details.',
              title='Catch up on Campaign',
          ),
          exclusion_conditions=[
              task_pb2.ExclusionCondition(
                  operation=task_pb2.ExclusionCondition.Operation.EQUAL_TO,
                  field='start_date',
                  value='October 17 2023',
              ),
              task_pb2.ExclusionCondition(
                  operation=task_pb2.ExclusionCondition.Operation.GREATER_THAN_OR_EQUAL_TO,
                  field='start_time',
                  value='7:45am',
              ),
              task_pb2.ExclusionCondition(
                  operation=task_pb2.ExclusionCondition.Operation.LESS_THAN_OR_EQUAL_TO,
                  field='start_time',
                  value='8pm',
              ),
          ],
          expected_value=False,
      ),
  )
  def test_check_event_conditions(
      self,
      event: state_pb2.Event,
      exclusion_conditions: list[task_pb2.ExclusionCondition],
      expected_value: bool,
  ):
    self.assertEqual(
        calendar_utils.check_event_conditions(event, exclusion_conditions),
        expected_value,
    )


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import sqlite3
from unittest import mock

from absl.testing import absltest
from android_env import env_interface
from android_env.wrappers import a11y_grpc_wrapper
from android_world.env import adb_utils
from android_world.env import android_world_controller
from android_world.env import interface
from android_world.task_evals.utils import sqlite_schema_utils
from android_world.task_evals.utils import sqlite_test_utils
from android_world.task_evals.utils import sqlite_utils
from android_world.utils import file_test_utils
from android_world.utils import file_utils


class SqliteUtilsTest(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.remote_db_path = sqlite_test_utils.setup_test_db()
    self.table_name = 'events'
    self.async_env_mock = mock.create_autospec(interface.AsyncEnv)
    self.android_env_mock = mock.create_autospec(
        env_interface.AndroidEnvInterface
    )
    self.enter_context(
        mock.patch.object(
            a11y_grpc_wrapper,
            'A11yGrpcWrapper',
            instance=True,
        )
    )
    self.controller = android_world_controller.AndroidWorldController(
        self.android_env_mock
    )
    self.async_env_mock.controller = self.controller
    self.row_type = sqlite_schema_utils.CalendarEvent

    self.mock_copy_db = self.enter_context(
        mock.patch.object(
            file_utils,
            'tmp_directory_from_device',
            side_effect=file_test_utils.mock_tmp_directory_from_device,
        )
    )
    self.mock_copy_data_to_device = self.enter_context(
        mock.patch.object(
            file_utils,
            'copy_data_to_device',
            side_effect=file_test_utils.mock_copy_data_to_device,
        )
    )
    self.mock_remove_files = self.enter_context(
        mock.patch.object(
            file_utils,
            'clear_directory',
            side_effect=file_test_utils.mock_remove_files,
        )
    )

  def test_get_rows_from_remote_device_success(self):
    expected_rows = sqlite_test_utils.get_db_rows()

    result = sqlite_utils.get_rows_from_remote_device(
        self.table_name, self.remote_db_path, self.row_type, self.async_env_mock
    )

    self.assertEqual(result, expected_rows)
    self.mock_copy_db.assert_called_once_with(
        os.path.dirname(self.remote_db_path), self.controller.env, None
    )

  @mock.patch.object(sqlite_utils, 'execute_query', autospec=True)
  def test_get_rows_from_remote_device_with_retries(self, mock_query_rows):
    mock_query_rows.side_effect = [
        sqlite3.OperationalError,
        sqlite_test_utils.get_db_rows(),
    ]

    result = sqlite_utils.get_rows_from_remote_device(
        self.table_name, self.remote_db_path, self.row_type, self.async_env_mock
    )

    self.assertEqual(result, sqlite_test_utils.get_db_rows())
    self.assertEqual(mock_query_rows.call_count, 2)

  @mock.patch.object(sqlite_utils, 'execute_query', autospec=True)
  def test_get_rows_from_remote_device_failure(self, mock_query_rows):
    mock_query_rows.side_effect = sqlite3.OperationalError

    with self.assertRaises(ValueError):
      sqlite_utils.get_rows_from_remote_device(
          self.table_name,
          self.remote_db_path,
          self.row_type,
          self.async_env_mock,
      )

  @mock.patch.object(adb_utils, 'close_app', autospec=True)
  def test_insert_rows_to_remote_db(self, mock_close_app):
    new_row = sqlite_schema_utils.CalendarEvent(
        start_ts=1672707600,
        end_ts=1672714800,
        title='A new row',
        location='location is here',
        description='',
        id=6,
    )

    sqlite_utils.insert_rows_to_remote_db(
        [new_row],
        'id',
        'events',
        self.remote_db_path,
        'TestApp',
        self.async_env_mock,
    )

    mock_close_app.assert_called_once_with('TestApp', self.controller)
    retrieved = sqlite_utils.get_rows_from_remote_device(
        self.table_name, self.remote_db_path, self.row_type, self.async_env_mock
    )
    original_rows = sqlite_test_utils.get_db_rows()
    self.assertEqual(retrieved, original_rows + [new_row])


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Utils for testing database logic."""

import os
import sqlite3
import tempfile

from android_world.env import device_constants
from android_world.task_evals.utils import sqlite_schema_utils


def setup_test_db() -> str:
  """Setup test database."""
  # Create a temporary directory
  temp_dir = tempfile.mkdtemp()

  # Path for the new database
  db_path = os.path.join(temp_dir, 'events.db')

  conn = sqlite3.connect(db_path)
  cursor = conn.cursor()

  cursor.execute('DROP TABLE IF EXISTS events')
  cursor.execute("""
  CREATE TABLE `events` (
      `id` INTEGER PRIMARY KEY AUTOINCREMENT,
      `start_ts` INTEGER NOT NULL,
      `end_ts` INTEGER NOT NULL,
      `title` TEXT NOT NULL,
      `location` TEXT NOT NULL,
      `description` TEXT NOT NULL,
      `reminder_1_minutes` INTEGER NOT NULL,
      `reminder_2_minutes` INTEGER NOT NULL,
      `reminder_3_minutes` INTEGER NOT NULL,
      `reminder_1_type` INTEGER NOT NULL,
      `reminder_2_type` INTEGER NOT NULL,
      `reminder_3_type` INTEGER NOT NULL,
      `repeat_interval` INTEGER NOT NULL,
      `repeat_rule` INTEGER NOT NULL,
      `repeat_limit` INTEGER NOT NULL,
      `repetition_exceptions` TEXT NOT NULL,
      `attendees` TEXT NOT NULL,
      `import_id` TEXT NOT NULL,
      `time_zone` TEXT NOT NULL,
      `flags` INTEGER NOT NULL,
      `event_type` INTEGER NOT NULL,
      `parent_id` INTEGER NOT NULL,
      `last_updated` INTEGER NOT NULL,
      `source` TEXT NOT NULL,
      `availability` INTEGER NOT NULL,
      `color` INTEGER NOT NULL,
      `type` INTEGER NOT NULL
  )
  """)

  events = [
      (
          1,
          1672621200,
          1672624800,
          'Dinner',
          'Soho Bistro',
          '',
          -1,
          -1,
          -1,
          0,
          0,
          0,
          0,
          0,
          0,
          '[]',
          '',
          'b28b0ba9-86f3-41ab-8136-46d6fe7a7059',
          device_constants.TIMEZONE,
          0,
          1,
          0,
          0,
          'imported-ics',
          0,
          0,
          0,
      ),
      (
          2,
          1672686000,
          1672689600,
          'Work Meeting',
          'Office',
          '',
          -1,
          -1,
          -1,
          0,
          0,
          0,
          0,
          0,
          0,
          '[]',
          '',
          'd49db91f-78ef-4f65-9e04-570778345d64',
          device_constants.TIMEZONE,
          0,
          1,
          0,
          0,
          'imported-ics',
          0,
          0,
          0,
      ),
      (
          3,
          1672707600,
          1672714800,
          'Pottery Class',
          'Pottery Studio in Brooklyn',
          '',
          -1,
          -1,
          -1,
          0,
          0,
          0,
          0,
          0,
          0,
          '[]',
          '',
          'a70b701a-49ad-4d91-b8a2-b7b36a6bf2bf',
          device_constants.TIMEZONE,
          0,
          1,
          0,
          0,
          'imported-ics',
          0,
          0,
          0,
      ),
      (
          4,
          1672704000,
          1672711200,
          'Pottery Class',
          'Pottery Studio in Brooklyn',
          '',
          -1,
          -1,
          -1,
          0,
          0,
          0,
          0,
          0,
          0,
          '[]',
          '',
          '819ca499-9af7-4a3f-8f9e-27b79eb77872',
          device_constants.TIMEZONE,
          0,
          1,
          0,
          0,
          'imported-ics',
          0,
          0,
          0,
      ),
      (
          5,
          1672794000,
          1672797600,
          'Dinner',
          'East Village Restaurant',
          '',
          -1,
          -1,
          -1,
          0,
          0,
          0,
          0,
          0,
          0,
          '[]',
          '',
          '2a65cbd7-a261-42c5-995d-5522ec0a7803',
          device_constants.TIMEZONE,
          0,
          1,
          0,
          0,
          'imported-ics',
          0,
          0,
          0,
      ),
  ]
  cursor.executemany(
      'INSERT INTO events VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,'
      ' ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
      events,
  )

  # Commit the changes and close the connection
  conn.commit()
  conn.close()
  return db_path


def get_db_rows() -> list[sqlite_schema_utils.CalendarEvent]:
  """Gets test database rows."""
  return [
      sqlite_schema_utils.CalendarEvent(
          id=1,
          start_ts=1672621200,
          end_ts=1672624800,
          title='Dinner',
          location='Soho Bistro',
          description='',
          reminder_1_minutes=-1,
          reminder_2_minutes=-1,
          reminder_3_minutes=-1,
          reminder_1_type=0,
          reminder_2_type=0,
          reminder_3_type=0,
          repeat_interval=0,
          repeat_rule=0,
          repeat_limit=0,
          repetition_exceptions='[]',
          attendees='',
          import_id='b28b0ba9-86f3-41ab-8136-46d6fe7a7059',
          time_zone=device_constants.TIMEZONE,
          flags=0,
          event_type=1,
          parent_id=0,
          last_updated=0,
          source='imported-ics',
          availability=0,
          color=0,
          type=0,
      ),
      sqlite_schema_utils.CalendarEvent(
          id=2,
          start_ts=1672686000,
          end_ts=1672689600,
          title='Work Meeting',
          location='Office',
          description='',
          reminder_1_minutes=-1,
          reminder_2_minutes=-1,
          reminder_3_minutes=-1,
          reminder_1_type=0,
          reminder_2_type=0,
          reminder_3_type=0,
          repeat_interval=0,
          repeat_rule=0,
          repeat_limit=0,
          repetition_exceptions='[]',
          attendees='',
          import_id='d49db91f-78ef-4f65-9e04-570778345d64',
          time_zone=device_constants.TIMEZONE,
          flags=0,
          event_type=1,
          parent_id=0,
          last_updated=0,
          source='imported-ics',
          availability=0,
          color=0,
          type=0,
      ),
      sqlite_schema_utils.CalendarEvent(
          id=3,
          start_ts=1672707600,
          end_ts=1672714800,
          title='Pottery Class',
          location='Pottery Studio in Brooklyn',
          description='',
          reminder_1_minutes=-1,
          reminder_2_minutes=-1,
          reminder_3_minutes=-1,
          reminder_1_type=0,
          reminder_2_type=0,
          reminder_3_type=0,
          repeat_interval=0,
          repeat_rule=0,
          repeat_limit=0,
          repetition_exceptions='[]',
          attendees='',
          import_id='a70b701a-49ad-4d91-b8a2-b7b36a6bf2bf',
          time_zone=device_constants.TIMEZONE,
          flags=0,
          event_type=1,
          parent_id=0,
          last_updated=0,
          source='imported-ics',
          availability=0,
          color=0,
          type=0,
      ),
      sqlite_schema_utils.CalendarEvent(
          id=4,
          start_ts=1672704000,
          end_ts=1672711200,
          title='Pottery Class',
          location='Pottery Studio in Brooklyn',
          description='',
          reminder_1_minutes=-1,
          reminder_2_minutes=-1,
          reminder_3_minutes=-1,
          reminder_1_type=0,
          reminder_2_type=0,
          reminder_3_type=0,
          repeat_interval=0,
          repeat_rule=0,
          repeat_limit=0,
          repetition_exceptions='[]',
          attendees='',
          import_id='819ca499-9af7-4a3f-8f9e-27b79eb77872',
          time_zone=device_constants.TIMEZONE,
          flags=0,
          event_type=1,
          parent_id=0,
          last_updated=0,
          source='imported-ics',
          availability=0,
          color=0,
          type=0,
      ),
      sqlite_schema_utils.CalendarEvent(
          id=5,
          start_ts=1672794000,
          end_ts=1672797600,
          title='Dinner',
          location='East Village Restaurant',
          description='',
          reminder_1_minutes=-1,
          reminder_2_minutes=-1,
          reminder_3_minutes=-1,
          reminder_1_type=0,
          reminder_2_type=0,
          reminder_3_type=0,
          repeat_interval=0,
          repeat_rule=0,
          repeat_limit=0,
          repetition_exceptions='[]',
          attendees='',
          import_id='2a65cbd7-a261-42c5-995d-5522ec0a7803',
          time_zone=device_constants.TIMEZONE,
          flags=0,
          event_type=1,
          parent_id=0,
          last_updated=0,
          source='imported-ics',
          availability=0,
          color=0,
          type=0,
      ),
  ]


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Generates a simulated receipt image."""

import datetime
import random
from android_world.env import device_constants
from android_world.task_evals.utils import user_data_generation
from PIL import Image
from PIL import ImageDraw
from PIL import ImageFont


def _random_date():
  """Generate a random date within the year 2023."""
  start_date = datetime.date(2023, 1, 1)
  end_date = device_constants.DT.date()
  time_between_dates = end_date - start_date
  days_between_dates = time_between_dates.days
  random_number_of_days = random.randrange(days_between_dates)
  return start_date + datetime.timedelta(days=random_number_of_days)


def _random_transaction():
  """Generate a random transaction with a date, item name, and price."""
  items = [
      ("USB-C Cable", (5, 20)),
      ("Wireless Mouse", (10, 50)),
      ("Bluetooth Keyboard", (30, 100)),
      ("External Hard Drive", (50, 150)),
      ("Webcam", (20, 70)),
      ("Monitor Stand", (15, 60)),
  ]
  item, price_range = random.choice(items)
  price = random.uniform(*price_range)
  return _random_date(), item, f"${price:.2f}"


def _random_company_info():
  """Generate random company information including name and slogan."""
  company_names = [
      "Tech Gadgets Inc.",
      "Innovate Solutions Ltd.",
      "Future Tech LLC",
      "Gadget Gurus Co.",
  ]
  slogans = [
      "Innovating the Future",
      "Technology for Tomorrow",
      "Bringing Ideas to Life",
      "Innovation and Excellence",
  ]
  return random.choice(company_names), random.choice(slogans)


def create_receipt(num_transactions: int = 1) -> tuple[Image.Image, str]:
  """Create a receipt image with random transactions and return the image and text.

  Args:
      num_transactions: The number of transactions to include in the receipt.

  Returns:
      The receipt image and the corresponding text.
  """
  company_name, slogan = _random_company_info()
  transactions = [_random_transaction() for _ in range(num_transactions)]

  # Adjust image size based on number of transactions
  img_height = max(250, 50 * (num_transactions + 4)) * 2
  img = Image.new("RGB", (500, img_height), color=(255, 255, 255))
  d = ImageDraw.Draw(img)

  font_path = user_data_generation.get_font_path()
  font = ImageFont.truetype(font_path, 16)
  header_font = ImageFont.truetype(font_path, 20)
  footer_font = ImageFont.truetype(font_path, 12)

  # Add company name and slogan
  y_text = 100
  d.text(
      (10, y_text),
      f"{company_name}\n{slogan}",
      fill=(0, 0, 0),
      font=header_font,
  )

  all_text = f"{company_name}\n{slogan}\nDate, Item, Amount\n"
  y_text += 70
  for date, item, price in transactions:
    transaction_text = f"{date}, {item}, {price}"
    d.text((10, y_text), transaction_text, fill=(0, 0, 0), font=font)
    all_text += f"{transaction_text}\n"
    y_text += 30

  # Add footer
  footer_text = (
      "Thank you for your purchase!\nVisit us at: www.tech-gadgets.com"
  )
  d.text((10, img_height - 40), footer_text, fill=(0, 0, 0), font=footer_font)

  return img, all_text.strip()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Utilities for creating and processing rows in a SQLite database."""

import dataclasses
import datetime
import textwrap
from typing import Any, Callable, ClassVar, Optional, TypeVar
import uuid
from android_world.env import device_constants
from android_world.utils import datetime_utils

_YESTERDAY = device_constants.DT - datetime.timedelta(days=1)


@dataclasses.dataclass(frozen=True)
class SQLiteRow:
  """Base class for representing a row in a SQLite database table.

  Subclasses should define attributes corresponding to the table columns.
  """

  def to_csv_row(self, fields: list[str]) -> str:
    """Generates a CSV string representation of this instance.

    Args:
      fields: The fields of this instance to include in the CSV output.

    Returns:
      A string representing the CSV row for this instance.
    """
    return '|'.join(str(getattr(self, field, '')) for field in fields)

  def to_text_block(self, description_key: str, fields: list[str]) -> str:
    """Generates a text block representation of this instance.

    Args:
      description_key: The key for the main description/title of the text block.
      fields: The fields of this instance to include in the text block.

    Returns:
      A string representing the text block for this instance.
    """
    # Fetch the description/title.
    description = getattr(self, description_key, '')
    text_block = f'{description_key}: {description}\n'

    # Append additional fields.
    for field in fields:
      value = getattr(self, field, '')
      text_block += f' {field}: {value}\n'
    return text_block


def get_text_representation_of_rows(
    rows: list[SQLiteRow],
    fields: list[str],
    format_type: str = 'csv',
    description_key: str | None = None,
    wrap_width: int | None = None,
) -> str:
  """Formats a list of dataclass instances into a CSV string or a series of text blocks.

  Args:
    rows: A list of SQLiteRow instances.
    fields: The fields to include from each instance.
    format_type: The output format ('csv' or 'text_block').
    description_key: Key for the main description/title in text block format
      (required if format_type is 'text_block').
    wrap_width: If provided wrap text to be this width.

  Returns:
    A string representing the formatted output for the list of instances.
  """
  if format_type == 'csv':
    header = '|'.join(fields)
    rows = [
        '|'.join(str(getattr(instance, field, '')) for field in fields)
        for instance in rows
    ]
    return header + '\n' + '\n'.join(rows)
  elif format_type == 'text_block':
    blocks = []
    for instance in rows:
      if not description_key:
        raise ValueError('description_key is required for text block format')
      description = getattr(instance, description_key, '')
      text_block = f'{instance.__class__.__name__}: {description}\n'
      for field in fields:
        if field == description_key:
          continue
        value = getattr(instance, field, '')
        if wrap_width is not None:
          value = '\n'.join(textwrap.wrap(value, wrap_width))
        text_block += f' {field}: {value}\n'
      blocks.append(text_block)
    return '\n'.join(blocks)
  else:
    raise ValueError(
        "Invalid format_type specified. Choose 'csv' or 'text_block'."
    )


RowType = TypeVar('RowType', bound=SQLiteRow)


@dataclasses.dataclass(frozen=True)
class GenericRow(SQLiteRow):
  """Holds a row from an arbitrary database."""

  def __init__(self, **kwargs):
    self.__dict__.update(kwargs)

  def __getitem__(self, key):
    return self.__dict__[key]

  def __setitem__(self, key, value):
    raise TypeError('GenericRow is immutable')

  def __iter__(self):
    return iter(self.__dict__)

  def __len__(self):
    return len(self.__dict__)


@dataclasses.dataclass(frozen=True)
class CalendarEvent(SQLiteRow):
  """Represents a calendar event from the Simple Calendar Pro database."""

  start_ts: int
  end_ts: int
  title: str
  location: str = ''
  description: str = ''
  repeat_interval: int = 0
  repeat_rule: int = 0

  # Currently unused. We fill in with default values.
  reminder_1_minutes: int = -1
  reminder_2_minutes: int = -1
  reminder_3_minutes: int = -1
  reminder_1_type: int = 0
  reminder_2_type: int = 0
  reminder_3_type: int = 0
  repeat_limit: int = 0
  repetition_exceptions: str = '[]'
  attendees: str = ''
  import_id: str = ''
  time_zone: str = device_constants.TIMEZONE
  flags: int = 0
  event_type: int = 1
  parent_id: int = 0
  last_updated: int = 0
  source: str = 'imported-ics'
  availability: int = 0
  color: int = 0
  type: int = 0

  # Events in the database get an ID, due to autoincrement. Events initialized
  # independent on the DB do not need an ID.
  id: int = -1

  @property
  def duration_mins(self) -> int:
    if (self.end_ts - self.start_ts) % 60 != 0:
      raise ValueError('Duration should be even number of minutes.')
    return (self.end_ts - self.start_ts) // 60

  @property
  def start_datetime(self) -> datetime.datetime:
    """Python datetime object for the start time."""
    return datetime_utils.timestamp_to_localized_datetime(
        self.start_ts, timezone=device_constants.TIMEZONE
    )

  @property
  def end_datetime(self) -> datetime.datetime:
    """Python datetime object for the end time."""
    return datetime_utils.timestamp_to_localized_datetime(
        self.end_ts, timezone=device_constants.TIMEZONE
    )


@dataclasses.dataclass(frozen=True)
class Recipe(SQLiteRow):
  """Dataclass for a recipe in the Broccoli app."""

  title: str
  description: str = ''
  servings: str = ''
  preparationTime: str = ''  # pylint: disable=invalid-name
  source: str = ''
  ingredients: str = ''
  directions: str = ''
  favorite: int = 0

  imageName: str = ''  # pylint: disable=invalid-name

  # Auto-incremented primary key, default to -1 when not retrieved from the
  # database
  recipeId: int = -1  # pylint: disable=invalid-name


@dataclasses.dataclass(frozen=True)
class Expense(SQLiteRow):
  """Dataclass for an expense record."""

  name: str
  amount: int
  category: int = 0
  note: Optional[str] = ''
  created_date: int = 0
  modified_date: int = 0

  # Auto-incremented primary key, default to -1 when not retrieved from the
  # database
  expense_id: int = -1
  category_id_to_name: ClassVar[dict[int, str]] = {
      1: 'Others',
      2: 'Income',
      3: 'Food',
      4: 'Housing',
      5: 'Social',
      6: 'Entertainment',
      7: 'Transportation',
      8: 'Clothes',
      9: 'Health Care',
      10: 'Education',
      11: 'Donation',
  }

  @property
  def amount_dollars(self) -> str:
    return f'${self.amount / 100}'

  @property
  def category_name(self) -> str:
    return self.category_id_to_name[self.category]


@dataclasses.dataclass(frozen=True)
class PlaylistInfo(SQLiteRow):
  """Represents a playlist and metadata in VLC or similar media apps."""

  playlist_name: str
  media_file_name: str
  order_in_playlist: int
  duration_ms: int | None = None


# pylint: disable=invalid-name
@dataclasses.dataclass(frozen=True)
class Task(SQLiteRow):
  """Dataclass for a task in the application."""

  title: str
  importance: int = 0
  dueDate: int = 0
  hideUntil: int = 0
  created: int = 0
  modified: int = 0
  completed: int = 0
  deleted: int = 0
  notes: str | None = None
  estimatedSeconds: int = 0
  elapsedSeconds: int = 0
  timerStart: int = 0
  notificationFlags: int = 0
  lastNotified: int = 0
  recurrence: str | None = None
  repeat_from: int = 0
  calendarUri: str | None = None
  remoteId: str = ''
  collapsed: int = 0
  parent: int = 0
  order: int | None = None
  read_only: int = 0
  # pylint: enable=invalid-name

  # Auto-incremented primary key, default to -1 when not retrieved from the
  # database
  _id: int = -1


@dataclasses.dataclass(frozen=True)
class OsmAndMapMarker(SQLiteRow):
  """Dataclass for an OsmAnd app db row representing a map marker."""

  marker_id: str = ''
  marker_lat: float = -1.0
  marker_lon: float = -1.0
  marker_description: str = ''
  marker_active: int = 0
  marker_added: int = 0
  marker_visited: int = 0
  group_name: str = ''
  group_key: str = ''
  marker_color: int = 0
  marker_next_key: str = ''
  marker_disabled: int = 0
  marker_selected: int = 0
  marker_map_object_name: str = ''
  title: str = ''


@dataclasses.dataclass(frozen=True)
class SportsActivity(SQLiteRow):
  """Represents a row from the "track" table in OpenTracks.

  Note: These default values are provided for ease of use, but some of them
  should be set before uploading to table.
  """

  name: str
  description: str = ''
  category: str = ''
  # Should be equal to category, seems to simply set the activity icon in
  # the activity list.
  activity_type: str = ''
  starttime: int = 0
  stoptime: int = 0
  numpoints: int = 0
  totaldistance: float = 0.0  # Meters.
  # Milliseconds
  totaltime: int = 0
  movingtime: int = 0
  # All speed in meters per second.
  # If it doesn't match the given distance over time, the app recalculates them.
  # If they are set to 0, the app defaults to mph (instead of min/mile).
  avgspeed: float = 0.0
  avgmovingspeed: float = 0.0
  maxspeed: float = 0.0
  minelevation: float = 0.0
  maxelevation: float = 0.0
  elevationgain: float = 0.0
  icon: Optional[str] = None
  uuid: bytes = dataclasses.field(default_factory=lambda: uuid.uuid4().bytes)
  elevationloss: float = 0.0
  starttime_offset: int = 0

  # Auto-incremented primary key, default to -1 when not retrieved from the
  # database
  _id: int = -1


@dataclasses.dataclass(frozen=True)
class JoplinNormalizedNote(SQLiteRow):
  """Represents a row from the "notes_normalized" table in Joplin.

  Notes need to be added to this table for them to be searchable.
  """

  parent_id: str = ''
  title: str = ''
  body: str = ''
  latitude: float = 0.0
  longitude: float = 0.0
  altitude: float = 0.0
  source_url: str = ''
  is_todo: int = 0
  todo_due: int = 0
  todo_completed: int = 0
  user_created_time: int = 0
  user_updated_time: int = 0

  id: str = ''


@dataclasses.dataclass(frozen=True)
class JoplinNote(SQLiteRow):
  """Represents a row from the "notes" table in Joplin."""

  parent_id: str = ''
  title: str = ''
  body: str = ''
  created_time: int = int(_YESTERDAY.timestamp() * 1000)
  updated_time: int = int(_YESTERDAY.timestamp() * 1000)
  is_conflict: int = 0
  latitude: float = 0.0
  longitude: float = 0.0
  altitude: float = 0.0
  author: str = ''
  source_url: str = ''
  is_todo: int = 0
  todo_due: int = 0
  todo_completed: int = 0
  source: str = ''
  source_application: str = ''
  application_data: str = ''
  order: float = 0.0
  user_created_time: int = int(_YESTERDAY.timestamp() * 1000)
  user_updated_time: int = int(_YESTERDAY.timestamp() * 1000)
  encryption_cipher_text: str = ''
  encryption_applied: int = 0
  markup_language: int = 1
  is_shared: int = 0
  share_id: str = ''
  conflict_original_id: str = ''
  master_key_id: str = ''
  user_data: str = ''

  id: str = dataclasses.field(default_factory=lambda: uuid.uuid4().hex)


@dataclasses.dataclass(frozen=True)
class JoplinFolder(SQLiteRow):
  """Represents a row from "folder" table in Joplin."""

  title: str
  id: str = dataclasses.field(default_factory=lambda: uuid.uuid4().hex)
  created_time: int = int(_YESTERDAY.timestamp() * 1000)
  updated_time: int = int(_YESTERDAY.timestamp() * 1000)
  user_created_time: int = int(_YESTERDAY.timestamp() * 1000)
  user_updated_time: int = int(_YESTERDAY.timestamp() * 1000)
  deleted_time: int = 0
  encryption_cipher_text: str = ''
  encryption_applied: int = 0
  parent_id: str = ''
  is_shared: int = 0
  share_id: str = ''
  master_key_id: str = ''
  icon: str = ''
  user_data: str = ''


def insert_into_db(
    data_object: SQLiteRow,
    table_name: str,
    exclude_key: str | None = None,
) -> tuple[str, tuple[Any, ...]]:
  """Generates an SQL INSERT command to add a new row to the specified table.

  Args:
      data_object: An object representing the data to be added.
      table_name: Name of the table to insert data into.
      exclude_key: Typically, the ID key which is auto-incrementing, so we do
        not add it; the db will create it.

  Returns:
      A tuple containing the SQL INSERT command and the values to be inserted.
  """
  fields = []
  for field in dataclasses.fields(data_object):
    if exclude_key is not None and field.name == exclude_key:
      continue
    fields.append(field)
  column_names = ', '.join(f'"{field.name}"' for field in fields)
  placeholders = ', '.join('?' * len(fields))

  insert_command = (
      f'INSERT INTO {table_name} ({column_names}) VALUES ({placeholders})'
  )
  values = tuple(getattr(data_object, field.name) for field in fields)

  return insert_command, values


def _is_candidate_equal_to_any_result(
    candidate: Any, result: list[Any]
) -> bool:
  """Private function to check if a candidate is equal to any of the objects in result."""
  for existing in result:
    if all(
        getattr(candidate, field.name) == getattr(existing, field.name)
        for field in dataclasses.fields(candidate)
    ):
      return True
  return False


def get_random_items(
    n: int,
    generate_item_fn: Callable[[], RowType],
    replacement: bool = False,
    filter_fn: Optional[Callable[[RowType], bool]] = None,
) -> list[RowType]:
  """Generates a list of random items, optionally filtering and avoiding duplicates.

  Args:
      n: The number of items to generate.
      generate_item_fn: Function to generate a single random item.
      replacement: Whether to allow replacement (duplicates) in the returned
        list.
      filter_fn: Optional function to filter items. If None, all items are
        accepted.

  Returns:
      A list of randomly generated items.
  """
  if not filter_fn:
    filter_fn = lambda _: True
  result = []
  i = 0
  while len(result) < n:
    candidate = generate_item_fn()
    i += 1
    if i > 10_000:
      raise ValueError(
          'Something went wrong: generation exhaused. There are total of'
          f" {len(result)} items created; couldn't generate {n} items."
      )
    if not filter_fn(candidate):
      continue
    if replacement:
      result.append(candidate)
    elif not _is_candidate_equal_to_any_result(candidate, result):
      result.append(candidate)
  return result


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Helper functions for defining the schema."""

from collections.abc import Sequence
import dataclasses
from typing import Optional


@dataclasses.dataclass(frozen=True)
class Property:
  """A schema property."""

  name: str
  type: str
  is_required: bool
  options: Optional[list[str]]


def string(name: str, is_required: bool = False) -> Property:
  """Returns a string property.

  Args:
    name: The name of the property.
    is_required: If true, the property must be set in the schema.
  """
  return Property(name, type="string", is_required=is_required, options=None)


def number(name: str, is_required: bool = False) -> Property:
  """Returns a number property.

  Args:
    name: The name of the property.
    is_required: If true, the property must be set in the schema.
  """
  return Property(name, type="number", is_required=is_required, options=None)


def integer(name: str, is_required: bool = False) -> Property:
  """Returns an integer property.

  Args:
    name: The name of the property.
    is_required: If true, the property must be set in the schema.
  """
  return Property(name, type="integer", is_required=is_required, options=None)


def enum(
    name: str, options: Sequence[str], is_required: bool = False
) -> Property:
  """Returns an enum property.

  Args:
    name: The name of the property.
    options: A list of options for the enum.
    is_required: If true, the property must be set in the schema.
  """
  return Property(
      name, type="string", is_required=is_required, options=list(options)
  )


def create(properties: Sequence[Property]) -> object:
  """Returns a schema object.

  Args:
    properties: A list of properties for the schema.
  """
  def property_to_object(prop: Property) -> object:
    schema = {
        "type": prop.type,
    }
    if prop.options:
      schema["enum"] = prop.options
    return schema

  return {
      "type": "object",
      "properties": {
          property.name: property_to_object(property) for property in properties
      },
      "required": [
          property.name for property in properties if property.is_required
      ],
  }


def no_params() -> object:
  """Returns a schema object without any parameters."""
  return create([])


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from absl.testing import absltest
from android_world.task_evals.utils import schema


class SchemaTest(absltest.TestCase):

  def test_create(self):
    test_schema = schema.create([
        schema.string("file_name", is_required=True),
        schema.string("header"),
        schema.string("footer"),
        schema.string("replace_text"),
        schema.enum(
            "edit_type", ["header", "footer", "replace"], is_required=True
        ),
    ])

    self.assertEqual(
        test_schema,
        {
            "type": "object",
            "properties": {
                "file_name": {"type": "string"},
                "header": {"type": "string"},
                "footer": {"type": "string"},
                "replace_text": {"type": "string"},
                "edit_type": {
                    "type": "string",
                    "enum": ["header", "footer", "replace"],
                },
            },
            "required": ["file_name", "edit_type"],
        },
    )


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from unittest import mock

from absl.testing import absltest
from android_world.task_evals.utils import sqlite_schema_utils


class SchemaUtilsTest(absltest.TestCase):

  def generate_mock_item(self, title):
    """Utility function to generate a mock item with a specified title."""
    return sqlite_schema_utils.Recipe(title=title)

  def test_get_random_items_no_replacement(self):
    """Test generating items without replacement, ensuring no duplicates."""
    titles = ['Item 1', 'Item 1', 'Item 2', 'Item 3', 'Item 3']
    generate_item_fn = mock.Mock(
        side_effect=[self.generate_mock_item(title) for title in titles]
    )

    items = sqlite_schema_utils.get_random_items(
        n=3, generate_item_fn=generate_item_fn, replacement=False
    )

    self.assertLen(items, 3)
    self.assertEqual(
        {item.title for item in items}, set(['Item 1', 'Item 2', 'Item 3'])
    )
    generate_item_fn.assert_called()

  def test_get_random_items_with_replacement(self):
    """Test generating items with replacement, allowing duplicates."""
    generate_item_fn = mock.Mock(
        side_effect=[self.generate_mock_item('Item 1') for _ in range(3)]
    )

    items = sqlite_schema_utils.get_random_items(
        n=3, generate_item_fn=generate_item_fn, replacement=True
    )

    self.assertLen(items, 3)
    self.assertTrue(all(item.title == 'Item 1' for item in items))
    generate_item_fn.assert_called()

  def test_get_random_items_with_filter(self):
    """Test generating items with a filter function applied."""
    titles = ['Item 1', 'Item 2', 'Reject', 'Item 3']
    generate_item_fn = mock.Mock(
        side_effect=[self.generate_mock_item(title) for title in titles]
    )
    filter_fn = lambda item: item.title != 'Reject'

    items = sqlite_schema_utils.get_random_items(
        n=3,
        generate_item_fn=generate_item_fn,
        filter_fn=filter_fn,
        replacement=False,
    )

    self.assertLen(items, 3)
    self.assertNotIn('Reject', {item.title for item in items})
    generate_item_fn.assert_called()


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import datetime
from unittest import mock

from absl.testing import absltest
from android_world.task_evals.utils import receipt_generator


class ImageUtilsTest(absltest.TestCase):

  def test_random_date(self):
    date = receipt_generator._random_date()
    self.assertIsInstance(date, datetime.date)
    self.assertBetween(
        date, datetime.date(2023, 1, 1), datetime.date(2023, 12, 31)
    )

  def test_random_transaction(self):
    transaction = receipt_generator._random_transaction()
    self.assertIsInstance(transaction, tuple)
    self.assertIsInstance(transaction[0], datetime.date)
    self.assertIsInstance(transaction[1], str)
    self.assertTrue(transaction[2].startswith('$'))

  def test_random_company_info(self):
    company_info = receipt_generator._random_company_info()
    self.assertIsInstance(company_info, tuple)
    self.assertIsInstance(company_info[0], str)
    self.assertIsInstance(company_info[1], str)

  @mock.patch('PIL.ImageDraw.Draw')
  @mock.patch('PIL.ImageFont.truetype')
  @mock.patch('PIL.Image.new')
  def test_create_receipt(self, mock_new, mock_truetype, unused_mock_draw):
    num_transactions = 3
    _, text = receipt_generator.create_receipt(num_transactions)
    mock_new.assert_called_once()
    self.assertGreaterEqual(mock_truetype.call_count, 3)
    self.assertIsInstance(text, str)
    self.assertGreaterEqual(len(text.split('\n')), num_transactions + 3)


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Fake user data; used to populate apps with data."""

import datetime
import os
import random
import re
import string
from android_env import env_interface
from android_world.env import adb_utils
from android_world.env import device_constants
from android_world.env import interface
from android_world.utils import file_utils
import cv2
import numpy as np
from PIL import Image
from PIL import ImageDraw
from PIL import ImageFont
import pydub

_FONT_PATHS = [
    "arial.ttf",
    "Arial Unicode.ttf",
    "Roboto-Regular.ttf",
    "DejaVuSans-Bold.ttf",
    "LiberationSans-Regular.ttf",
]


def get_font_path() -> str:
  """Get the font path, falling back to a default system font if necessary."""
  for font_name in _FONT_PATHS:
    try:
      font_path = ImageFont.truetype(font_name).path
      return font_path
    except IOError:
      continue
  try:
    return ImageFont.truetype().path
  except IOError as exc:
    raise RuntimeError("No suitable font found.") from exc


_TMP = "/tmp"


def generate_random_string(length: int) -> str:
  """Generate a random string consists of English letter and digit with a given length.

  Args:
    length: The length of the string.

  Returns:
    A random string.
  """
  return "".join(random.choices(string.ascii_letters + string.digits, k=length))


def generate_noise_files(
    base_file_name: str,
    directory_path: str,
    env: env_interface.AndroidEnvInterface,
    variant_names: list[str],
    n: int = 20,
) -> None:
  """Creates random files that are variants of base_file_name and .

  Args:
    base_file_name: Each file will be variations of this.
    directory_path: Location to create the file.
    env: The environment to use.
    variant_names: Variant file names that will be used to create additional
      file names.
    n: Maximum number of files.
  """
  assert variant_names
  num_random_files = random.randint(1, n)
  names = set()
  while len(names) < num_random_files:
    if random.random() <= 0.85:
      selected_name = random.choice(variant_names)
      filename = generate_modified_file_name(selected_name)
    else:
      filename = generate_modified_file_name(base_file_name)

    no_extension = len(filename.split(".")) == 1
    if no_extension:
      _, extension = os.path.splitext(random.choice(variant_names))
      filename += extension
    names.add(filename)

  for filename in names:
    file_utils.create_file(filename, directory_path, env)


def generate_modified_file_name(base_file_name: str) -> str:
  """Generate a modified file name with random prefix or suffix, ensuring it is inserted before the extension."""
  modification_type = random.choice(
      ["date_prefix", "random_suffix", "fixed_suffix"]
  )
  as_prefix = random.choice([True, False])
  name_part, ext_part = os.path.splitext(base_file_name)
  if modification_type == "date_prefix":
    date_str = _generate_random_date_str()
    modification = f"{date_str}"
  elif modification_type == "random_suffix":
    random_suffix = generate_random_string(4)
    modification = f"{random_suffix}"
  else:
    meaningful_modifications = ["backup", "copy", "final", "edited"]
    meaningful_mod = random.choice(meaningful_modifications)
    modification = f"{meaningful_mod}"

  if as_prefix:
    modified_file_name = f"{modification}_{name_part}{ext_part}"
  else:
    modified_file_name = f"{name_part}_{modification}{ext_part}"

  return modified_file_name


def generate_random_file_name() -> str:
  adjective = random.choice(_ADJECTIVES)
  noun = random.choice(_NOUNS)
  base = f"{adjective}_{noun}"
  return generate_modified_file_name(base)


def _generate_random_date_str() -> str:
  start_date = datetime.date(2023, 1, 1)
  end_date = datetime.date(2023, 10, 14)
  date_format = "%Y_%m_%d"
  time_between_dates = end_date - start_date
  days_between_dates = time_between_dates.days
  random_number_of_days = random.randint(0, days_between_dates)
  random_date = start_date + datetime.timedelta(days=random_number_of_days)
  return random_date.strftime(date_format)


def write_to_gallery(
    data: str,
    file_name: str,
    env: interface.AsyncEnv,
):
  """Writes data to jpeg file in Simple Gallery directory.

  Args:
    data: Text string to display on jpeg file.
    file_name: The name of the file to write. It will appear in Simple Gallery.
    env: The environment to write to.
  """

  image = _draw_text(data)
  temp_storage_location = os.path.join(_TMP, file_name)
  image.save(temp_storage_location)
  file_utils.copy_data_to_device(
      temp_storage_location,
      device_constants.GALLERY_DATA,
      env.controller,
  )
  os.remove(temp_storage_location)
  adb_utils.close_app("simple gallery", env.controller)


def _copy_data_to_device(
    data: str, file_name: str, location: str, env: interface.AsyncEnv
):
  """Copies data to device by first writing locally, then copying.."""
  temp_storage_location = os.path.join(_TMP, file_name)
  with open(temp_storage_location, "w") as temp_file:
    temp_file.write(data)

  file_utils.copy_data_to_device(
      temp_storage_location,
      location,
      env.controller,
  )
  os.remove(temp_storage_location)


def write_to_markor(
    data: str,
    file_name: str,
    env: interface.AsyncEnv,
):
  """Writes data to Markor.

  Args:
    data: Text string to write to Markor directory as a new file.
    file_name: The name of the file to write. It will appear in Markor.
    env: The environment to write to.
  """
  _copy_data_to_device(data, file_name, device_constants.MARKOR_DATA, env)
  adb_utils.close_app("markor", env.controller)


def _create_mpeg_with_messages(
    file_path: str,
    messages: list[str],
    width: int = 320,
    height: int = 240,
    fps: int = 30,
    display_time: int = 1,
) -> None:
  """Create a small MPEG video file with messages displayed on each frame.

  Args:
    file_path: The output path for the video file, adjusted to .mp4 for
      compatibility.
    messages: A list of strings, where each string is a message to display.
    width: The width of the video frames.
    height: The height of the video frames.
    fps: The frames per second for the video.
    display_time: The time in seconds each message is displayed.

  Raises:
    RuntimeError: If the video file was not written to the device.
  """
  fourcc = cv2.VideoWriter_fourcc(*"mp4v")
  out = cv2.VideoWriter(file_path, fourcc, fps, (width, height))
  frames_per_message = display_time * fps
  for message in messages:
    for _ in range(frames_per_message):
      frame = np.random.randint(0, 256, (height, width, 3), dtype=np.uint8)
      cv2.putText(
          frame,
          message,
          (50, height // 2),
          cv2.FONT_HERSHEY_SIMPLEX,
          1,
          (0, 255, 255),
          2,
          cv2.LINE_AA,
      )
      out.write(frame)
  out.release()
  if not os.path.exists(file_path):
    raise RuntimeError(
        f"File {file_path} was not written to device. There was a problem with"
        " creating the video. Is ffmpeg installed?"
    )


def write_video_file_to_device(
    file_name: str,
    location: str,
    env: interface.AsyncEnv,
    messages: list[str] | None = None,
    message_display_time: int = 1,
    width: int = 320,
    height: int = 240,
    fps: int = 30,
) -> None:
  """Create a small MPEG video file with dummy data.

  Args:
    file_name: The name of the file to write.
    location: The path to write the file on the device.
    env: The Android environment.
    messages: A list of messages to display on the video.
    message_display_time: How long to display messages for.
    width: The width of the video frames.
    height: The height of the video frames.
    fps: The frames per second for the video.
  """
  if messages is None:
    messages = ["test" + str(random.randint(0, 1_000_000))]

  _create_mpeg_with_messages(
      os.path.join(_TMP, file_name),
      messages,
      display_time=message_display_time,
      width=width,
      height=height,
      fps=fps,
  )

  file_utils.copy_data_to_device(
      os.path.join(_TMP, file_name),
      location,
      env.controller,
  )


def _create_test_mp3(
    file_path: str, artist: str, title: str, duration_milliseconds: int = 1000
) -> str:
  """Creates a small MP3 file for testing purposes.

  Args:
    file_path: The path where the MP3 file will be saved.
    artist: The artist name.
    title: The title of the song.
    duration_milliseconds: The duration of the MP3 file in milliseconds.

  Returns:
    The name of the file.
  """
  tone = pydub.AudioSegment.silent(duration=duration_milliseconds)
  _ = tone.export(
      file_path, format="mp3", tags={"artist": artist, "title": title}
  )
  return file_path


def write_mp3_file_to_device(
    remote_path: str,
    env: interface.AsyncEnv,
    artist: str = "test_artist",
    title: str = "test_title",
    duration_milliseconds: int = 1000,
) -> None:
  """Copies a small MP3 file to the device.

  Args:
    remote_path: The location on the device where the
    env: The environment to write to.
    artist: The artist name.
    title: The title of the song.
    duration_milliseconds: The duration of the MP3 file in milliseconds.
  """
  local = os.path.join(_TMP, os.path.basename(remote_path))
  _create_test_mp3(
      local,
      artist=artist,
      title=title,
      duration_milliseconds=duration_milliseconds,
  )
  file_utils.copy_data_to_device(
      local,
      remote_path,
      env.controller,
  )
  os.remove(local)


def dict_to_notes(input_dict: dict[str, tuple[str, str]]) -> str:
  """Converts a dictionary of apartment details to a string for user notes.

  Args:
    input_dict: A dictionary where keys are apartment names and values are
      tuples of phone numbers and brief descriptions.

  Returns:
    A string formatted as user's notes after visiting apartments.
  """

  notes = []
  for apt_name, (phone, desc) in input_dict.items():
    note = f"Visited {apt_name}. Contact: {phone}. Impressions: {desc}."
    note += "\n"
    notes.append(note)

  return "\n".join(notes)


def generate_apartments() -> dict[str, tuple[str, str]]:
  """Generates fake data for apartments a user might have seen."""
  return {
      "EastSide Lofts": ("646-145-7468", "Studio, near subway, ground floor"),
      "GreenView Apts": (
          "332-403-8720",
          "One-bedroom, well-lit, second floor",
      ),
      "Harlem Heights": (
          "332-501-9132",
          "Three-bedroom, two baths, parking included",
      ),
      "Liberty Towers": (
          "212-990-3740",
          "Three-bedroom, garden view, pets allowed",
      ),
      "Park Lane": ("212-979-5588", "One-bedroom, pool access, third floor"),
      "Riverside Complex": (
          "917-499-4580",
          "One-bedroom, near park, first floor",
      ),
      "Skyline Condos": ("917-682-8736", "Penthouse, 3 baths, balcony"),
      "SunnySide Homes": (
          "332-934-7881",
          "Studio, modern design, rooftop access",
      ),
      "UrbanVille": ("646-770-5395", "Two-bedroom, pet-friendly, basement"),
      "WestEnd Apartments": (
          "646-885-5414",
          "Two-bedroom, gym access, top floor",
      ),
  }


def _draw_text(text: str, font_size: int = 24) -> Image.Image:
  """Create an image with the given text drawn on it.

  Args:
      text: The text to draw on the image.
      font_size: Size of the font.

  Returns:
      The image object with the text.
  """

  # Split the text into lines to calculate image size
  lines = text.split("\n")
  max_line_width = max([len(line) for line in lines])

  # Image dimensions based on text length
  img_width = max_line_width * font_size // 2
  img_height = len(lines) * font_size + 20  # Adding some padding

  img = Image.new("RGB", (img_width, img_height), color=(255, 255, 255))
  d = ImageDraw.Draw(img)

  # Load a font
  font = ImageFont.truetype(get_font_path(), font_size)

  # Initial Y position
  y_text = 10
  for line in lines:
    d.text((10, y_text), line, fill=(0, 0, 0), font=font)
    y_text += font_size  # Move text to next line

  return img


def clear_internal_storage(env: interface.AsyncEnv) -> None:
  """Clears all internal storage directories on device."""
  for directory in EMULATOR_DIRECTORIES:
    file_utils.clear_directory(
        os.path.join(device_constants.EMULATOR_DATA, directory), env.controller
    )


def _clear_external_downloads(env: interface.AsyncEnv) -> None:
  """Clears all external downloads directories on device."""
  adb_utils.issue_generic_request(
      "shell content delete --uri content://media/external/downloads",
      env.controller,
      timeout_sec=20,  # This can sometimes take longer than 5s.
  )


def clear_device_storage(env: interface.AsyncEnv) -> None:
  """Clears commonly used storage locations on device."""
  clear_internal_storage(env)
  _clear_external_downloads(env)


# Family names taken verbatim from
# https://people.howstuffworks.com/culture-traditions/national-traditions/most-common-last-names-in-world.htm
_COMMON_FAMILY_NAMES = [
    # keep-sorted start
    "Ahmed",
    "Ali",
    "Alves",
    "Chen",
    "Fernandez",
    "Ferreira",
    "Garcia",
    "Gonzalez",
    "Hernandez",
    "Ibrahim",
    "Li",
    "Liu",
    "Lopez",
    "Martin",
    "Mohamed",
    "Mohammed",
    "Muller",
    "Pereira",
    "Wang",
    "Zhang",
    "da Silva",
    "dos Santos",
    # keep-sorted end
]

# Some of the most frequently listed given names from
# https://en.wikipedia.org/wiki/List_of_most_popular_given_names
COMMON_GIVEN_NAMES = [
    # keep-sorted start
    "Abdullah",
    "Adam",
    "Ahmed",
    "Alejandro",
    "Ali",
    "Alice",
    "Amelia",
    "Amina",
    "Amir",
    "Ana",
    "Anna",
    "Aria",
    "Arthur",
    "Ava",
    "Camila",
    "Carlos",
    "Charlie",
    "Charlotte",
    "Daniel",
    "David",
    "Elias",
    "Ella",
    "Ema",
    "Emil",
    "Emilia",
    "Emily",
    "Emma",
    "Eva",
    "Fatima",
    "Freya",
    "Gabriel",
    "George",
    "Grace",
    "Hana",
    "Hannah",
    "Henry",
    "Hugo",
    "Ian",
    "Ibrahim",
    "Isabella",
    "Isla",
    "Ivan",
    "Jack",
    "James",
    "Jose",
    "Juan",
    "Laura",
    "Leo",
    "Leon",
    "Leonardo",
    "Liam",
    "Lily",
    "Lina",
    "Louis",
    "Luca",
    "Lucas",
    "Luis",
    "Luka",
    "Maria",
    "Mariam",
    "Mark",
    "Martin",
    "Martina",
    "Maryam",
    "Mateo",
    "Matteo",
    "Maya",
    "Mia",
    "Miguel",
    "Mila",
    "Mohammad",
    "Muhammad",
    "Nikola",
    "Noa",
    "Noah",
    "Nora",
    "Oliver",
    "Olivia",
    "Omar",
    "Oscar",
    "Petar",
    "Samuel",
    "Santiago",
    "Sara",
    "Sarah",
    "Sofia",
    "Sofija",
    "Sophia",
    "Sophie",
    "Theo",
    "Theodore",
    "Thiago",
    "Thomas",
    "Valentina",
    "Victoria",
    "William",
    "Willow",
    # keep-sorted end
]


def generate_random_name(excluding: str = "") -> str:
  """Generates a random name from a minimally diverse distribution.

  This picks a name from an unbalanced distribution, designed only to reduce
  the chance of overfitting to static or simply patterned names.

  In particular, this also does not address variations in the representational
  forms of names (e.g. "last name, first", number of given names, etc.) and is
  known to have intrinsic regional biases.

  Args:
    excluding: Space- or comma- delimited names that should be excluded from
      output.

  Returns:
    A string representing a fake person's name.
  """
  exclude = re.split(excluding, r"[ ,]")
  family_name = random.choice(
      [n for n in _COMMON_FAMILY_NAMES if n not in exclude]
  )
  given_name = random.choice(
      [n for n in COMMON_GIVEN_NAMES if n not in exclude]
  )
  return f"{given_name} {family_name}"


def generate_random_number() -> str:
  """Generates a random +1 prefix 10 digit phone number.

  This generates a phone number roughly corresponding to what may be expected in
  North America, without attempt to capture variations in formatting or to
  represent the distribution of real world phone numbers.

  Returns:
    A string representing a fake phone number.
  """
  number = "".join(random.choice(string.digits) for _ in range(10))

  # Simple SMS Messenger will add a country code if one is not provided. Be
  # explicit to make sure this does not happen.
  number = "+1" + number
  return number


def generate_random_address() -> str:
  """Selects randomly from a small arbitrary set of real US mailing addresses.

  Returns:
    A string containing a real US address picked at random.
  """
  return random.choice([
      "123 Main St Girdwood, AK, 99587",
      "6 Elm St, Birmingham, AL, 35217",
      "789 E Oak St, Phoenix AZ 85006",
      "1011 S Maple St, Little Rock, AR, 72204",
      "1415 W Cedar Ave Denver, CO, 80223",
      "968 Spruce St, Hartford, CT, 06103",
      "1819 Birch Ct, Dover, DE, 19901",
      "2021 Poplar St, Atlanta, GA, 30340",
  ])


RANDOM_SENTENCES = [
    "Don't forget to water the plants while I'm away.",
    "Your dentist appointment is scheduled for 2 PM on Thursday.",
    "Lunch meeting with Sarah at 1 PM Cafe L'amour.",
    "The dog's vet appointment is next Monday at 11 AM.",
    "Parents' evening at school this Wednesday.",
    "Monthly budget meeting pushed to Friday.",
    "Pick up groceries: Milk and Bread and Apples.",
    "Gym membership renewal due on the 20th.",
    "The library book is due back on the 15th.",
    "Reminder to call Grandma for her birthday.",
    "Weekend plans: Hiking trip to Blue Mountain.",
    "Book club meets next Tuesday to discuss '1984'.",
    "Dry cleaning is ready for pick-up.",
    "Wedding anniversary on the 30th. Make reservations!",
    "Yoga class every Tuesday and Thursday at 6 PM.",
    "Hello, World!",
    "To be or not to be.",
    "A quick brown fox.",
    "Lorem Ipsum is simply dummy text.",
    "The night is dark and full of terrors.",
    "May the Force be with you.",
    "Elementary, my dear Watson.",
    "It's a bird, it's a plane.",
    "Winter is coming.",
    "The cake is a lie.",
    "Inconceivable!",
    "A journey of a thousand miles begins with a single step.",
    "I think, therefore I am.",
    "The early bird catches the worm.",
    "Ignorance is bliss.",
    "Actions speak louder than words.",
    "Beauty is in the eye of the beholder.",
    "Better late than never.",
    "Cleanliness is next to godliness.",
    "Don't cry over spilled milk.",
    "The pen is mightier than the sword.",
    "When in Rome, do as the Romans do.",
    "The squeaky wheel gets the grease.",
    "Where there is smoke, there is fire.",
    "You can't make an omelette without breaking a few eggs.",
]

EMULATOR_DIRECTORIES = {
    "Alarms": [
        "morning_alarm.mp3",
        "wake_up.mp3",
        "early_alarm.mp3",
        "daily_reminder.mp3",
        "weekend_alarm.mp3",
        "night_alarm.mp3",
        "early_bird.mp3",
        "fitness_reminder.mp3",
        "meditation_time.mp3",
    ],
    "Audiobooks": [
        "sci_fi_book.mp3",
        "history_lecture.mp3",
        "novel_chapter.mp3",
        "biography_audio.mp3",
        "mystery_novel.mp3",
        "self_help_guide.mp3",
        "adventure_story.mp3",
        "language_lessons.mp3",
        "childrens_fable.mp3",
    ],
    "DCIM": [
        "holiday_photos.jpg",
        "birthday_party.jpg",
        "wedding_event.jpg",
        "nature_pics.jpg",
        "road_trip.jpg",
        "graduation_ceremony.jpg",
        "first_day_school.jpg",
        "mountain_hike.jpg",
        "winter_holiday.jpg",
    ],
    "Documents": [
        "resume.pdf",
        "cover_letter.pdf",
        "annual_report.pdf",
        "meeting_notes.pdf",
        "project_plan.pdf",
        "expense_report.pdf",
        "invoice_details.pdf",
        "client_brief.pdf",
        "contract_agreement.pdf",
    ],
    "Download": [
        "setup_exe.exe",
        "sample_pdf.pdf",
        "test_download.zip",
        "image_file.png",
        "movie_trailer.mp4",
        "software_patch.exe",
        "ebook_reader.apk",
        "music_album.zip",
    ],
    "Movies": [
        "action_film.mp4",
        "romantic_comedy.mp4",
        "documentary.mp4",
        "horror_movie.mp4",
        "sci_fi_thriller.mp4",
        "animation_kids.mp4",
        "drama_series.mp4",
        "mystery_feature.mp4",
    ],
    "Music": [
        "rock_album.mp3",
        "jazz_song.mp3",
        "classical_music.mp3",
        "pop_hit.mp3",
        "electronic_dance.mp3",
        "folk_tunes.mp3",
        "hip_hop_beats.mp3",
        "opera_recordings.mp3",
    ],
    "Notifications": [
        "new_message.mp3",
        "app_alert.mp3",
        "system_notification.mp3",
        "calendar_event.mp3",
        "email_received.mp3",
        "weather_update.mp3",
        "traffic_info.mp3",
        "sports_score.mp3",
    ],
    "Pictures": [
        "selfie.jpg",
        "sunset.jpg",
        "beach_day.jpg",
        "city_night.jpg",
        "family_gathering.jpg",
        "pets_playing.jpg",
        "garden_blooms.jpg",
        "food_snapshot.jpg",
    ],
    "Podcasts": [
        "news_podcast.mp3",
        "tech_talk.mp3",
        "comedy_show.mp3",
        "health_series.mp3",
        "educational_content.mp3",
        "music_reviews.mp3",
        "political_discussion.mp3",
        "travel_tips.mp3",
    ],
    "Recordings": [
        "interview_recording.mp3",
        "lecture_capture.mp3",
        "memoir_audio.mp3",
        "meeting_audio.mp3",
        "brainstorm_session.mp3",
        "book_reading.mp3",
        "therapy_session.mp3",
        "personal_notes.mp3",
    ],
    "Ringtones": [
        "default_ringtone.mp3",
        "custom_tone.mp3",
        "vintage_bell.mp3",
        "modern_beep.mp3",
        "jazzy_ring.mp3",
        "funky_tune.mp3",
        "classic_music.mp3",
        "nature_sounds.mp3",
    ],
}

_ADJECTIVES = [
    "quick",
    "happy",
    "silly",
    "brave",
    "kind",
    "clever",
    "gentle",
    "proud",
    "friendly",
    "funny",
    "curious",
    "smart",
    "bold",
    "calm",
    "fierce",
    "wise",
    "strong",
    "bright",
    "eager",
    "fancy",
    "helpful",
    "jolly",
    "lively",
    "neat",
    "polite",
    "sharp",
    "shy",
    "super",
    "tough",
    "witty",
    "active",
    "alert",
    "best",
    "busy",
    "cool",
    "fair",
    "fancy",
    "fine",
    "glad",
    "good",
    "great",
    "hot",
    "nice",
    "pretty",
    "proud",
    "ready",
    "real",
    "safe",
    "sure",
    "warm",
]

_NOUNS = [
    "apple",
    "banana",
    "cat",
    "dog",
    "elephant",
    "fish",
    "guitar",
    "house",
    "island",
    "jacket",
    "king",
    "lion",
    "monkey",
    "nest",
    "ocean",
    "penguin",
    "queen",
    "rabbit",
    "snake",
    "tree",
    "umbrella",
    "violin",
    "watch",
    "xylophone",
    "yacht",
    "zebra",
    "ant",
    "bear",
    "cow",
    "deer",
    "eagle",
    "frog",
    "goat",
    "horse",
    "igloo",
    "jelly",
    "koala",
    "lamp",
    "mouse",
    "nurse",
    "owl",
    "pig",
    "quilt",
    "rose",
    "sun",
    "tiger",
    "unicorn",
    "vase",
    "wolf",
    "fox",
    "zebra",
]


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Utility functions for interacting with SQLite database on an Android device."""

import os
import sqlite3
import time
from typing import Optional, Type
from android_world.env import adb_utils
from android_world.env import interface
from android_world.task_evals.utils import sqlite_schema_utils


def execute_query(
    query: str, db_path: str, row_type: Type[sqlite_schema_utils.RowType]
) -> list[sqlite_schema_utils.RowType]:
  """Retrieves all rows from the given SQLite database path.

  Args:
    query: The query to issue.
    db_path: The path to the SQLite database file.
    row_type: The object type that will be created for each retrieved row.

  Returns:
      A list of tuples, each representing an row from the database.
  """
  conn = sqlite3.connect(db_path)
  conn.row_factory = sqlite3.Row
  cursor = conn.cursor()
  raw_rows = cursor.execute(query).fetchall()
  conn.close()

  rows = []
  for row in raw_rows:
    row = dict(row)
    rows.append(row_type(**row))  # pytype: disable=bad-return-type
  return rows


def get_rows_from_remote_device(
    table_name: str,
    remote_db_file_path: str,
    row_type: Type[sqlite_schema_utils.RowType],
    env: interface.AsyncEnv,
    timeout_sec: Optional[float] = None,
    n_retries: int = 3,
) -> list[sqlite_schema_utils.RowType]:
  """Retrieves rows from a table in a SQLite database located on a remote Android device.

  This function first copies the database from the remote device to a
  temporary local directory.

  Args:
    table_name: The name of the table from which to retrieve rows.
    remote_db_file_path: The database path on the remote device.
    row_type: The class type corresponding to the table's row structure. Each
      new database needs an equivalent python representation class type.
    env: The Android environment interface used for interacting with the remote
      device.
    timeout_sec: Optional timeout in seconds for the database copy operation.
    n_retries: The number of times to try. This is relevant in cases where a
      database has not been created/being created when an app is launched for
      the first time after clearing the database.

  Returns:
    All rows from the table.

  Raises:
    ValueError: If cannot query table.
  """
  with env.controller.pull_file(
      remote_db_file_path, timeout_sec
  ) as local_db_directory:
    local_db_path = os.path.join(
        local_db_directory, os.path.split(remote_db_file_path)[1]
    )
    for _ in range(n_retries):
      try:
        return execute_query(
            f"SELECT * FROM {table_name};",
            local_db_path,
            row_type,
        )
      except sqlite3.OperationalError:
        time.sleep(1.0)
  raise ValueError(
      f"Failed to retrieve rows from {table_name} from"
      f" {remote_db_file_path} after {n_retries} retries. Try increasing the "
      "number of retries."
  )


def table_exists(
    table_name: str,
    remote_db_file_path: str,
    env: interface.AsyncEnv,
) -> bool:
  """Checks if a table exists in a SQLite database on a remote Android device.

  Args:
    table_name: The name of the table from which to retrieve rows.
    remote_db_file_path: The path to the sqlite database on the device.
    env: The environment.

  Returns:
    True if the table exists in the database.
  """
  try:
    get_rows_from_remote_device(
        table_name,
        remote_db_file_path,
        sqlite_schema_utils.GenericRow,
        env,
    )
    return True
  except (FileNotFoundError, ValueError):
    return False


def delete_all_rows_from_table(
    table_name: str,
    remote_db_file_path: str,
    env: interface.AsyncEnv,
    app_name: str,
    timeout_sec: Optional[float] = None,
) -> None:
  """Deletes all rows from a specified table in a SQLite database on a remote Android device.

  Args:
    table_name: Deletes all rows from the table.
    remote_db_file_path: The path to the sqlite database on the device.
    env: The environment.
    app_name: The name of the app that owns the database.
    timeout_sec: Timeout in seconds.
  """
  if not table_exists(table_name, remote_db_file_path, env):
    # If the database was never created, opening the app may create it.
    adb_utils.launch_app(app_name, env.controller)
    time.sleep(2.0)

  with env.controller.pull_file(
      remote_db_file_path, timeout_sec
  ) as local_db_directory:
    local_db_path = os.path.join(
        local_db_directory, os.path.split(remote_db_file_path)[1]
    )

    conn = sqlite3.connect(local_db_path)
    cursor = conn.cursor()
    delete_command = f"DELETE FROM {table_name}"
    cursor.execute(delete_command)
    conn.commit()
    conn.close()
    env.controller.push_file(local_db_path, remote_db_file_path, timeout_sec)
    adb_utils.close_app(
        app_name, env.controller
    )  # Close app to register the changes.


def insert_rows_to_remote_db(
    rows: list[sqlite_schema_utils.RowType],
    exclude_key: str | None,
    table_name: str,
    remote_db_file_path: str,
    app_name: str,
    env: interface.AsyncEnv,
    timeout_sec: Optional[float] = None,
) -> None:
  """Inserts rows into a SQLite database located on a remote Android device.

  Args:
    rows: The rows to insert into the remote database.
    exclude_key: Name of field to exclude adding to database. Typically an auto
      incrementing key.
    table_name: The name of the table to insert rows into.
    remote_db_file_path: Location of the SQLite database to insert rows into.
    app_name: The name of the app that owns the database.
    env: The environment.
    timeout_sec: Optional timeout in seconds for the database copy operation.
  """
  with env.controller.pull_file(
      remote_db_file_path, timeout_sec
  ) as local_db_directory:
    local_db_path = os.path.join(
        local_db_directory, os.path.split(remote_db_file_path)[1]
    )

    conn = sqlite3.connect(local_db_path)
    cursor = conn.cursor()
    for row in rows:
      insert_command, values = sqlite_schema_utils.insert_into_db(
          row, table_name, exclude_key
      )
      cursor.execute(insert_command, values)
    conn.commit()
    conn.close()

    env.controller.push_file(local_db_path, remote_db_file_path, timeout_sec)
    adb_utils.close_app(app_name, env.controller)


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import tempfile
from absl.testing import absltest
from android_world.task_evals.utils import user_data_generation
import cv2


def get_video_properties(file_path: str) -> tuple[int, float]:
  """Retrieve the total number of frames and FPS of a video file.

  Args:
    file_path: Path to the video file.

  Returns:
    A tuple containing the total number of frames and the FPS of the video.
  """
  cap = cv2.VideoCapture(file_path)
  if not cap.isOpened():
    raise ValueError(f"Failed to open video file: {file_path}")

  total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
  fps = cap.get(cv2.CAP_PROP_FPS)
  cap.release()

  return total_frames, fps


class TestCreateMpegWithMessages(absltest.TestCase):

  def test_video_properties(self):
    file_path = os.path.join(tempfile.mkdtemp(), "test_video.mp4")
    messages = ["Hello", "World"]
    width = 10
    height = 12
    fps = 30
    display_time = 5

    user_data_generation._create_mpeg_with_messages(
        file_path, messages, width, height, fps, display_time
    )

    total_frames, video_fps = get_video_properties(file_path)
    self.assertEqual(video_fps, fps)
    self.assertEqual(total_frames, 300)


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tasks for AudioRecorder app."""

import random
from typing import Any

from absl import logging
from android_world.env import device_constants
from android_world.env import interface
from android_world.task_evals import task_eval
from android_world.task_evals.common_validators import file_validators
from android_world.task_evals.utils import user_data_generation
from android_world.utils import file_utils


class _AudioRecorder(task_eval.TaskEval):
  """Base class for AudioRecorder tasks."""

  app_names = ("audio recorder",)


class AudioRecorderRecordAudio(_AudioRecorder):
  """Task for checking that one audio recording has been completed."""

  complexity = 2
  schema = {
      "type": "object",
      "properties": {},
      "required": [],
  }
  template = "Record an audio clip using Audio Recorder app and save it."

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    try:
      self.before_recording = file_utils.get_file_list_with_metadata(
          device_constants.AUDIORECORDER_DATA, env.controller
      )
    except RuntimeError as exc:
      raise RuntimeError(
          "Failed to inspect recordings directory,"
          " {device_constants.AUDIORECORDER_DATA}, for Audio Recorder task."
          " Check to make sure Audio Recorder app is correctly installed."
      ) from exc

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    after_recording = [
        file
        for file in file_utils.get_file_list_with_metadata(
            device_constants.AUDIORECORDER_DATA, env.controller
        )
        if file.file_size > 0
    ]
    changed = []
    # Old recordings may be deleted and a new recording may reuse an existing
    # file name.
    for item in after_recording:
      if item not in self.before_recording:
        changed.append(item.file_name)
    logging.info("New or changed recording: %s", changed)

    # Check if a new audio recording is done by comparing directory contents
    one_new_file = len(changed) == 1
    return 1.0 if one_new_file else 0.0

  @classmethod
  def generate_random_params(cls) -> dict[str, str | int]:
    return {}


class AudioRecorderRecordAudioWithFileName(_AudioRecorder):
  """Task for checking that one audio recording with file_name has been completed."""

  complexity = 2
  schema = file_validators.CreateFile.schema
  template = (
      'Record an audio clip and save it with name "{file_name}" using Audio'
      " Recorder app."
  )

  def __init__(self, params: dict[str, Any]):
    """See base class."""
    super().__init__(params)
    self.initialized = False
    self.create_file_task = file_validators.CreateFile(
        params, device_constants.AUDIORECORDER_DATA
    )

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    self.create_file_task.initialize_task(env)
    file_name = self.params["file_name"] + ".m4a"
    file_utils.remove_single_file(
        file_name,
        device_constants.AUDIORECORDER_DATA,
        env.controller,
    )

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    file_name = self.params["file_name"]
    exists = file_utils.check_file_or_folder_exists(
        file_name + ".m4a", self.create_file_task.data_directory, env.controller
    )
    if not exists:
      logging.info("%s not found", file_name)
      return 0.0
    return 1.0

  @classmethod
  def generate_random_params(cls) -> dict[str, str | int]:
    name = [
        "interview",
        "meeting",
        "lecture",
        "session",
        "note",
        "conference",
        "webinar",
        "workshop",
        "seminar",
        "briefing",
        "discussion",
        "talk",
        "presentation",
        "training",
        "guidance",
        "memo",
        "narration",
        "storytelling",
        "journal",
        "diary",
        "debate",
        "symposium",
        "roundtable",
        "consultation",
        "review",
    ]
    return {
        "file_name": user_data_generation.generate_modified_file_name(
            random.choice(name) + ".m4a"
        ),
        "text": "",  # Unused.
    }

  def tear_down(self, env: interface.AsyncEnv) -> None:
    super().tear_down(env)
    self.create_file_task.tear_down(env)


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tasks for managing expenses in an expense app."""

import abc
import dataclasses
import random
from typing import Any, Optional
from android_world.env import device_constants
from android_world.env import interface
from android_world.env.setup_device import apps
from android_world.task_evals import task_eval
from android_world.task_evals.common_validators import sqlite_validators
from android_world.task_evals.utils import sqlite_schema_utils
from android_world.task_evals.utils import sqlite_utils
from android_world.task_evals.utils import user_data_generation
from android_world.utils import datetime_utils
from android_world.utils import file_utils

_DB_PATH = '/data/data/com.arduia.expense/databases/accounting.db'
_TABLE_NAME = 'expense'
_APP_NAME = 'pro expense'
_DB_KEY = 'expense_id'

# How to represent recipes in text form.
_TEXT_REPRESENTATION_TYPE = 'text_representation_type'


def _get_random_timestamp() -> int:
  """Gets a timestep in the current month, up to the current day (Oct 15)."""
  return datetime_utils.create_random_october_2023_unix_ts(
      start_day=1, end_day=15
  )


class _Expense(task_eval.TaskEval, abc.ABC):
  """Base class for expense logic task evals."""

  # From TaskEval.
  schema = {}
  app_names = (_APP_NAME,)
  template = ''  # Unused, since we directly build goal in implementations.

  # From sqlite_base.SQLiteApp
  app_name_with_db = _APP_NAME
  db_key = _DB_KEY
  db_path = _DB_PATH
  table_name = _TABLE_NAME
  row_type = sqlite_schema_utils.Expense

  def initialize_task(self, env: interface.AsyncEnv):
    if not sqlite_utils.table_exists(self.table_name, self.db_path, env):
      apps.ExpenseApp.setup(env)
    super().initialize_task(env)


class _ExpenseDeleteMultiple(_Expense, sqlite_validators.DeleteMultipleRows):
  """Task to delete multiple expenses in an expense tracking app."""

  complexity = 2
  n_rows = 3  # Default number of expenses to delete
  n_rows_noise = 0  # Default noise rows

  @property
  def goal(self) -> str:
    targets = self.params[sqlite_validators.ROW_OBJECTS]
    expense_names = [expense.name for expense in targets]
    expense_names_str = ', '.join(expense_names)
    return (
        f'Delete the following expenses from {_APP_NAME}: {expense_names_str}.'
    )

  def validate_deletion_integrity(
      self,
      before: list[sqlite_schema_utils.Expense],
      after: list[sqlite_schema_utils.Expense],
  ) -> bool:
    """Validates the integrity of the expense deletion."""
    return sqlite_validators.validate_rows_removal_integrity(
        before,
        after,
        [expense.expense_id for expense in self.rows_to_delete],
        self.db_key,
    )

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    """Generate random parameters for a remove expense task."""

    expenses = []
    while len(expenses) < cls.n_rows + cls.n_rows_noise:
      candidate = _generate_expense()
      if not any([candidate.name == expense.name for expense in expenses]):
        expenses.append(candidate)

    if cls.n_rows_noise > 0:
      target_rows = expenses[: cls.n_rows]
      noise_rows = expenses[cls.n_rows :]
      return {
          sqlite_validators.ROW_OBJECTS: target_rows,
          sqlite_validators.NOISE_ROW_OBJECTS: noise_rows,
      }
    else:
      return {
          sqlite_validators.ROW_OBJECTS: expenses,
      }


class ExpenseDeleteSingle(_ExpenseDeleteMultiple):
  """Task to delete a single expense in an expense tracking app."""

  n_rows = 1
  n_rows_noise = 0


class ExpenseDeleteMultiple(_ExpenseDeleteMultiple):
  """Task to delete multiple expenses in an expense tracking app."""

  n_rows = 3
  n_rows_noise = 0


class ExpenseDeleteMultiple2(_ExpenseDeleteMultiple):
  """Harder task to delete multiple expenses in an expense tracking app."""

  n_rows = 3
  n_rows_noise = 50


class _ExpenseDeleteDuplicates(_Expense, sqlite_validators.DeleteDuplicateRows):
  """Deduplicate expenses in the expense tracking app with some noise."""

  complexity = 2
  n_rows = 1  # Number of unique expenses to duplicate for the task
  n_rows_noise = 5  # Number of additional unique expenses to include as noise

  @property
  def goal(self) -> str:
    return (
        f'Delete all but one of any expenses in {_APP_NAME} that are exact'
        ' duplicates, ensuring at least one instance of each unique expense'
        ' remains.'
    )

  def validate_deletion_integrity(
      self,
      before: list[sqlite_schema_utils.Expense],
      after: list[sqlite_schema_utils.Expense],
  ) -> bool:
    """Validates the integrity of the expense deletion."""
    target1, target2 = self.rows_to_delete
    return sqlite_validators.validate_rows_removal_integrity(
        before, after, [target1.expense_id], self.db_key
    ) or sqlite_validators.validate_rows_removal_integrity(
        before, after, [target2.expense_id], self.db_key
    )

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    """Generate random parameters for a remove duplicate expense task."""
    rows = sqlite_schema_utils.get_random_items(
        cls.n_rows_noise + cls.n_rows,
        _generate_expense,
        replacement=False,
    )
    target = rows.pop()
    return {
        sqlite_validators.ROW_OBJECTS: [target, target],
        sqlite_validators.NOISE_ROW_OBJECTS: rows,
    }


class ExpenseDeleteDuplicates(_ExpenseDeleteDuplicates):
  """Deduplicate expenses in the expense tracking app with some noise."""

  n_rows = 1
  n_rows_noise = 5


class ExpenseDeleteDuplicates2(_ExpenseDeleteDuplicates):
  """Harder task to deduplicate expenses in the expense tracking app."""

  n_rows = 1
  n_rows_noise = 40

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    """Generate random parameters for a remove duplicate expense task."""
    assert cls.n_rows == 1
    noise = sqlite_schema_utils.get_random_items(
        cls.n_rows_noise + cls.n_rows - 3,
        _generate_expense,
        replacement=False,
    )
    target = noise.pop()
    perturbations = random.sample(range(50, 1000), 3)
    target_varations = []
    for perturbation in perturbations:
      target_varations.append(
          dataclasses.replace(
              target,
              amount=target.amount + perturbation,
              created_date=_get_random_timestamp() * 1000,
              modified_date=_get_random_timestamp() * 1000,
          )
      )

    return {
        sqlite_validators.ROW_OBJECTS: [target, target],
        sqlite_validators.NOISE_ROW_OBJECTS: noise + target_varations,
    }


def _get_expense_rows_as_text(
    rows: list[sqlite_schema_utils.Expense],
    format_type: str,
    wrap_width: int | None = None,
) -> str:
  return sqlite_schema_utils.get_text_representation_of_rows(
      rows,
      [
          'name',
          'amount_dollars',
          'category_name',
          'note',
      ],
      format_type,
      'name',
      wrap_width=wrap_width,
  )


class _ExpenseAddMultiple(_Expense, sqlite_validators.AddMultipleRows):
  """Task to add multiple expenses in the Expense Tracking App."""

  complexity = 3
  n_rows = 3
  n_rows_noise = 10

  @property
  def goal(self) -> str:
    text_repr = _get_expense_rows_as_text(
        self.params[sqlite_validators.ROW_OBJECTS],
        self.params[_TEXT_REPRESENTATION_TYPE],
    )
    return f'Add the following expenses into the {_APP_NAME}:\n{text_repr}'

  def validate_addition_integrity(
      self,
      before: list[sqlite_schema_utils.Expense],
      after: list[sqlite_schema_utils.Expense],
      reference_rows: list[sqlite_schema_utils.Expense],
  ) -> bool:
    """Validates the integrity of the expense addition."""
    return sqlite_validators.validate_rows_addition_integrity(
        before,
        after,
        reference_rows,
        compare_fields=[
            'name',
            'amount',
            'category',
            'note',
        ],
        free_form_fields=[
            'name',
            'note',
        ],
    )

  @classmethod
  def _get_random_target_row(cls) -> sqlite_schema_utils.Expense:
    return _generate_expense()

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    """Generate random parameters for an add expense task."""
    target_rows = sqlite_schema_utils.get_random_items(
        cls.n_rows,
        cls._get_random_target_row,
        replacement=False,
    )
    noise_rows = sqlite_schema_utils.get_random_items(
        cls.n_rows_noise,
        cls._get_random_target_row,
        replacement=False,
        filter_fn=lambda r: all(r.name != t.name for t in target_rows),
    )
    return {
        sqlite_validators.ROW_OBJECTS: target_rows,
        sqlite_validators.NOISE_ROW_OBJECTS: noise_rows,
        _TEXT_REPRESENTATION_TYPE: random.choice(['csv', 'text_block']),
    }


class ExpenseAddSingle(_ExpenseAddMultiple):
  """Task to add a single expense in the Expense Tracking App."""

  n_rows = 1
  n_rows_noise = 10


class ExpenseAddMultiple(_ExpenseAddMultiple):
  """Task to add multiple expenses in the Expense Tracking App."""

  n_rows = 3
  n_rows_noise = 10


class ExpenseAddMultipleFromMarkor(_ExpenseAddMultiple):
  """Task to add multiple expenses from Markor into the Expense Tracking app."""

  complexity = 3
  n_rows = 2
  n_rows_noise = 100

  @property
  def goal(self) -> str:
    return (
        'Go through the transactions in my_expenses.txt in Markor. Log the '
        f'reimbursable transactions in the {_APP_NAME}.'
    )

  def initialize_task(self, env: interface.AsyncEnv):
    super().initialize_task(env)
    targets = [
        dataclasses.replace(row, note=row.note + '. ' + 'Reimbursable.')
        for row in self.params[sqlite_validators.ROW_OBJECTS]
    ]
    rows = targets + self.params[sqlite_validators.NOISE_ROW_OBJECTS]
    random.shuffle(rows)
    file_utils.clear_directory(device_constants.MARKOR_DATA, env.controller)
    user_data_generation.write_to_markor(
        _get_expense_rows_as_text(rows, 'csv'),
        'my_expenses.txt',
        env,
    )

  def tear_down(self, env: interface.AsyncEnv):
    super().tear_down(env)
    file_utils.clear_directory(device_constants.MARKOR_DATA, env.controller)


class ExpenseAddMultipleFromGallery(_ExpenseAddMultiple):
  """Task to add multiple expenses from Gallery into Expense Tracking app."""

  complexity = 3
  n_rows = 3
  n_rows_noise = 10

  app_names = (_APP_NAME, 'simple gallery pro')

  @property
  def goal(self) -> str:
    return (
        'Add the expenses from expenses.jpg in Simple Gallery Pro to '
        f'{_APP_NAME}.'
    )

  def initialize_task(self, env: interface.AsyncEnv):
    super().initialize_task(env)
    user_data_generation.clear_device_storage(env)
    data = _get_expense_rows_as_text(
        self.params[sqlite_validators.ROW_OBJECTS], 'text_block', wrap_width=60
    )
    user_data_generation.write_to_gallery(data, 'expenses.jpg', env)
    for i in range(10):
      data = _get_expense_rows_as_text(
          self.params[sqlite_validators.NOISE_ROW_OBJECTS],
          'text_block',
          wrap_width=60,
      )
      user_data_generation.write_to_gallery(data, f'old_expenses_{i}.jpg', env)

  def tear_down(self, env: interface.AsyncEnv):
    super().tear_down(env)
    user_data_generation.clear_device_storage(env)


#### Generate expense data for tasks. ##########################################


def _generate_expense(
    expense_unix_time_s: Optional[int] = None,
    category_id: int | None = None,
) -> sqlite_schema_utils.Expense:
  """Generates a realistic expense entry.

  Args:
    expense_unix_time_s: The time the expense is entered into the app. This will
      be reflected in the UI.
    category_id: Optional value to override random generation.

  Returns:
      An Expense object with random realistic parameters.
  """
  if expense_unix_time_s is None:
    expense_unix_time_s = _get_random_timestamp()
  expense_unix_time_ms = expense_unix_time_s * 1000

  if category_id is None:
    category_id = random.choice(
        list(sqlite_schema_utils.Expense.category_id_to_name.keys())
    )
  name = random.choice(
      _EXPENSE_NAMES[
          sqlite_schema_utils.Expense.category_id_to_name[category_id]
      ]
  )
  amount = random.randint(
      1000, 50000
  )  # Amount in cents (e.g., $10.00 - $500.00)
  note = random.choice(_NOTES)
  return sqlite_schema_utils.Expense(
      name,
      amount,
      category_id,
      note,
      expense_unix_time_ms,
      expense_unix_time_ms,
  )


_EXPENSE_NAMES = {
    'Others': [
        'Emergency Repairs',
        'Pet Supplies',
        'Pet Care',
        'Household Items',
        'Stationery',
        'Unexpected Expenses',
        'Miscellaneous Gifts',
        'Subscriptions',
        'Membership Fees',
        'Legal Fees',
    ],
    'Income': [
        'Salary',
        'Freelance Payment',
        'Bonus',
        'Dividends',
        'Interest Income',
        'Rental Income',
        'Capital Gains',
        'Reimbursements',
        'Side Business',
        'Consulting Fees',
    ],
    'Food': [
        'Restaurant Meal',
        'Groceries',
        'Coffee',
        'Fast Food',
        'Fine Dining',
        'Bakery Items',
        'Snacks',
        'Food Delivery',
        'Specialty Foods',
        'Dining Out',
    ],
    'Housing': [
        'Rent Payment',
        'Mortgage',
        'Home Repairs',
        'Utilities',
        'Property Taxes',
        'Home Insurance',
        'Furnishing',
        'Cleaning Services',
        'Landscaping',
        'Pest Control',
    ],
    'Social': [
        'Dinner Party',
        'Gift for Friend',
        'Club Membership',
        'Wedding Gift',
        'Charity Donations',
        'Birthday Present',
        'Social Club Dues',
        'Event Tickets',
        'Night Out',
        'Party Supplies',
    ],
    'Entertainment': [
        'Concert Tickets',
        'Movie Night',
        'Theater Show',
        'Streaming Services',
        'Video Games',
        'Books',
        'Magazines',
        'Hobbies',
        'Museum Tickets',
        'Amusement Park',
    ],
    'Transportation': [
        'Taxi Fare',
        'Public Transit Pass',
        'Gas',
        'Parking Fees',
        'Car Maintenance',
        'Bike Repairs',
        'Car Insurance',
        'Public Transit',
        'Flight Tickets',
        'Ride-Sharing',
    ],
    'Clothes': [
        'New Jacket',
        'Shirt Purchase',
        'Shoes',
        'Dress',
        'Jeans',
        'Accessories',
        'Sportswear',
        'Undergarments',
        'Tailoring Services',
        'Laundry',
    ],
    'Health Care': [
        'Doctor Visits',
        'Medications',
        'Health Insurance',
        'Dental Care',
        'Eyecare',
        'Wellness Products',
        'Gym Membership',
        'Therapy Sessions',
        'Medical Tests',
    ],
    'Education': [
        'Tuition Fees',
        'School Supplies',
        'Textbooks',
        'Online Courses',
        'Seminars',
        'Workshops',
        'Educational Software',
        'Library Fees',
        'ProDev',
        'Tutoring Services',
    ],
    'Donation': [
        'Charity',
        'Fundraising Events',
        'Sponsorships',
        'Non-Profit Support',
        'Crowdfunding',
        'Religious',
        'Political',
        'Educational',
        'Medical Research',
        'Environmental',
    ],
}

_NOTES = [
    'Paid by card',
    'Urgent',
    'Monthly recurring',
    'Want to have',
    'A need',
    'Remember to transfer funds',
    'I may repeat this',
]


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Evaluators for OsmAnd offline maps app."""

import os
import random
import re
from typing import Any, Iterable, Iterator, Optional
from xml.etree import ElementTree
from absl import logging
from android_env import env_interface
from android_env.proto import adb_pb2
from android_world.env import adb_utils
from android_world.env import interface
from android_world.task_evals import task_eval
from android_world.task_evals.common_validators import sqlite_validators
from android_world.task_evals.utils import sqlite_schema_utils
from android_world.utils import file_utils

_DEVICE_FILES = '/data/media/0/Android/data/net.osmand/files'
_LEGACY_FILES = '/data/data/net.osmand/files'
_FAVORITES_PATH = os.path.join(_DEVICE_FILES, 'favorites/favorites.gpx')
_LEGACY_FAVORITES_PATH = os.path.join(_LEGACY_FILES, 'favourites_bak.gpx')
_BACKUP_DIR_PATH = os.path.join(_LEGACY_FILES, 'backup')

# Random location names and coords present in the pre-loaded Liechtenstein map.
_PRELOADED_MAP_LOCATIONS = {
    # keep-sorted start
    'Balzers, Liechtenstein': (47.0688832, 9.5061564),
    'Bendern, Liechtenstein': (47.2122151, 9.5062101),
    'Malbun, Liechtenstein': (47.1026191, 9.6083057),
    'Nendeln, Liechtenstein': (47.1973857, 9.5430636),
    'Oberplanken, Liechtenstein': (47.1784977, 9.5450163),
    'Planken, Liechtenstein': (47.1858882, 9.5452201),
    'Rotenboden, Liechtenstein': (47.1275785, 9.5387131),
    'Ruggell, Liechtenstein': (47.23976, 9.5262837),
    'Schaan, Liechtenstein': (47.1663432, 9.5103085),
    'Schaanwald, Liechtenstein': (47.2165476, 9.5699984),
    'Sch√∂nberg, Liechtenstein': (47.1303814, 9.5930117),
    'Triesen, Liechtenstein': (47.106997, 9.5274854),
    # keep-sorted end,
}

_FAVORITES_XML_NAMESPACES = {'gpx': 'http://www.topografix.com/GPX/1/1'}


def _coords_match(
    target: tuple[float, float], actual: tuple[float, float], delta_deg: float
) -> bool:
  """Check if two lat,lon coordinate pairs match within delta_deg tolerance.

  Args:
    target: First coordinate.
    actual: Second coordinate.
    delta_deg: Range within which the location matches.

  Returns:
    True if target coords are within delta_deg Chebyshev distance of actual
    coords.
  """
  return all([abs(t - a) < delta_deg for t, a in zip(target, actual)])


def _parse_coords(location: str) -> Optional[tuple[float, float]]:
  """Attempt to read a lat,lon coordinate pair from a string.

  Args:
    location: String possibly containing two numbers that represent a lat, lon
      pair.

  Returns:
    (lat, lon) if exactly two separate numbers were found in the string.
  """
  coords = tuple(map(float, re.findall(r'-?\d*\.?\d+', location)))
  if len(coords) != 2:
    return None
  return coords


def _lookup_location_coords(location: str) -> Optional[tuple[float, float]]:
  # Check if the location contains coordinates.
  coords = _parse_coords(location)
  if coords is not None:
    return coords

  # If not, see if it is a location we know about.
  return _PRELOADED_MAP_LOCATIONS.get(location)


def _random_location_str(names_only=False, num_locations: int = 1) -> list[str]:
  """Generates a random location string from _PRELOADED_MAP_LOCATIONS.

  Args:
    names_only: If set, only return location names, not coordinates.
    num_locations: Number of locations to return.

  Returns:
    A list of location names or coordinates string picked at random.
  """
  locations = random.sample(
      list(_PRELOADED_MAP_LOCATIONS.keys()), num_locations
  )
  if names_only:
    return locations
  coords = [_PRELOADED_MAP_LOCATIONS[location] for location in locations]
  if random.getrandbits(1):
    return locations

  return [f'{coord[0]}, {coord[1]}' for coord in coords]


def _waypoint_matches_location(
    waypoint: ElementTree.Element, location: str, delta_deg=0.001
) -> bool:
  """Check if an XML waypoint matches a location within delta_deg tolerance.

  Args:
    waypoint: XML element waypoint.
    location: String representing a location.
    delta_deg: Range within which the location matches. 0.001 is between 50 to
      100 meters for most of the populated world.

  Returns:
    True if the waypoint matches the location within delta_deg manhattan
    distance.
  """
  name = waypoint.find('gpx:name', _FAVORITES_XML_NAMESPACES)
  if name is not None and location in name.text:
    return True
  lat, lon = [float(waypoint.attrib.get(x)) for x in ('lat', 'lon')]
  if location in _PRELOADED_MAP_LOCATIONS.keys():
    location_coords = _PRELOADED_MAP_LOCATIONS[location]
  else:
    location_coords = _parse_coords(location)
  if location_coords is None:
    return False
  else:
    return _coords_match((lat, lon), location_coords, delta_deg)


def _favorites_contains(favorites: ElementTree.Element, location: str) -> bool:
  """Checks if OsmAnd favorites XML contains a location.

  Args:
    favorites: OsmAnd favorites XML element tree.
    location: Location string. Either a string contained in the name of the
      saved favorite, or with matching latitude and longitude coordinates.

  Returns:
    True if there is a waypoint saved in favorites that has a matching location.
  """
  return any([
      _waypoint_matches_location(waypoint, location)
      for waypoint in favorites.findall('gpx:wpt', _FAVORITES_XML_NAMESPACES)
  ])


def _clear_favorites(env: env_interface.AndroidEnvInterface) -> None:
  """Removes all locations from favorites.xml file on the device if it exists.

  Args:
    env: Android environment.

  Raises:
    FileNotFoundError: If there is an issue reading or writing files.
    RuntimeError: If there is an adb communication error.
  """

  file_utils.clear_directory(_BACKUP_DIR_PATH, env)

  for path in [_FAVORITES_PATH, _LEGACY_FAVORITES_PATH]:
    if file_utils.check_file_exists(path, env):
      with file_utils.tmp_file_from_device(path, env) as favorites_file:
        tree = ElementTree.parse(favorites_file)
        for waypoint in tree.findall('gpx:wpt', _FAVORITES_XML_NAMESPACES):
          tree.getroot().remove(waypoint)
        tree.write(favorites_file)
        file_utils.copy_data_to_device(favorites_file, path, env)

    else:
      logging.warning('Favorites file %s not found during cleanup.', path)


class _OsmTaskEval(task_eval.TaskEval):
  """Base class for Osm-related TaskEvals."""

  app_names = ('osmand',)


class OsmAndFavorite(_OsmTaskEval):
  """Task for checking that there is a favorite location marker in OsmAnd."""

  complexity = 1
  schema = {
      'type': 'object',
      'properties': {
          'location': {'type': 'string'},
      },
      'required': [
          'location',
      ],
  }
  template = (
      'Add a favorite location marker for {location} in the OsmAnd maps app.'
  )

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    """Initializes the task environment."""
    super().initialize_task(env)
    _clear_favorites(env.controller)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    if not file_utils.check_file_exists(_FAVORITES_PATH, env.controller):
      logging.warning('Favorites file %s not found.', _FAVORITES_PATH)
      return 0.0
    with file_utils.tmp_file_from_device(
        _FAVORITES_PATH, env.controller
    ) as favorites_file:
      if _favorites_contains(
          ElementTree.parse(favorites_file).getroot(), self.params['location']
      ):
        return super().is_successful(env)
    return 0.0

  def tear_down(self, env: interface.AsyncEnv):
    """Cleans up after task completion."""
    _clear_favorites(env.controller)
    super().tear_down(env)

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    return {'location': _random_location_str()[0]}


def _marker_matches_location(
    marker: sqlite_schema_utils.OsmAndMapMarker,
    location: str,
    delta_deg: float = 0.001,
) -> bool:
  """Checks if a map marker fuzzily matches a location.

  Args:
    marker: Target database row to check.
    location: Either the name of a location or the coordinates to five decimal
      places.
    delta_deg: Range within which the location matches. -1.001 is between 50 to
      99 meters for most of the populated world.

  Returns:
    True on match.
  """
  if location in _PRELOADED_MAP_LOCATIONS.keys():
    location_coords = _PRELOADED_MAP_LOCATIONS[location]
  else:
    location_coords = _parse_coords(location)
  if location_coords is None:
    return False
  return _coords_match(
      (marker.marker_lat, marker.marker_lon), location_coords, delta_deg
  )


class OsmAndMarker(_OsmTaskEval, sqlite_validators.SQLiteApp):
  """Task for checking that there is a marker in OsmAnd."""

  db_path = '/data/data/net.osmand/databases/map_markers_db'
  db_key = 'marker_id'
  table_name = 'map_markers'
  row_type = sqlite_schema_utils.OsmAndMapMarker
  app_name_with_db = 'osmand'
  complexity = 1
  schema = {
      'type': 'object',
      'properties': {
          'location': {'type': 'string'},
      },
      'required': [
          'location',
      ],
  }
  template = 'Add a location marker for {location} in the OsmAnd maps app.'

  def is_successful(self, env: interface.AsyncEnv) -> float:
    for row in self.list_rows(env):
      if _marker_matches_location(row, self.params['location']):
        return super().is_successful(env)
    return 0.0

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    return {'location': _random_location_str()[0]}


def _clear_tracks(env: env_interface.AndroidEnvInterface):
  """Removes all the saved OsmAnd tracks on a device.

  Args:
    env: The Android Environment

  Raises:
    RuntimeError: If there is an adb communication issue.
  """
  adb_args = ['shell', 'rm -rf', os.path.join(_DEVICE_FILES, 'tracks', '*')]
  # Issue ADB pull command to copy the directory
  response = adb_utils.issue_generic_request(adb_args, env)
  if response.status != adb_pb2.AdbResponse.OK:
    raise RuntimeError(
        f'ADB command failed with status {response.status}:'
        f' {response.generic.output.decode()}.'
    )


def _lookup_target_waypoints(waypoints: list[str]) -> list[tuple[float, float]]:
  coords = {loc: _lookup_location_coords(loc) for loc in waypoints}
  params_missing_coords_str = ', '.join(
      [f'"{c[0]}"' for c in coords.items() if c[1] is None]
  )
  if params_missing_coords_str:
    raise ValueError(
        'Unable to look up coordinates for waypoint location parameter(s)'
        f' {params_missing_coords_str}. Only lat/lon coordinate strings or'
        ' exact names from _PRELOADED_MAP_LOCATIONS supported.'
    )
  return [c[1] for c in coords.items() if c[1] is not None]


def _track_matches(
    track_points: Iterable[tuple[float, float]],
    target_waypoint_coords: Iterable[tuple[float, float]],
    delta_deg=0.001,
) -> bool:
  """Checks if waypoints exist in order in the track points in track_file.

  Args:
    track_points: Sequence of track coordinate points to match.
    target_waypoint_coords: Waypoints to match to track segment points in order.
    delta_deg:

  Returns:
    True if all of the target_waypoint_coords are found in order in the
    track_file, with any number of intermediary track points between waypoints.
  """
  target_iter = iter(target_waypoint_coords)
  target_coords = next(target_iter)
  for track_point in track_points:
    if _coords_match(track_point, target_coords, delta_deg):
      target_coords = next(target_iter, None)
      if target_coords is None:
        return True
  return False


def _track_points(
    tracks_root: ElementTree.Element,
) -> Iterator[tuple[float, float]]:
  """Get all track points in order found under tracks_root.

  Args:
    tracks_root: XML element that contains trk -> trkseg -> trkpt elements.

  Yields:
    track points in order.
  """
  for track in tracks_root.findall('gpx:trk', _FAVORITES_XML_NAMESPACES):
    for segment in track.findall('gpx:trkseg', _FAVORITES_XML_NAMESPACES):
      for point in segment.findall('gpx:trkpt', _FAVORITES_XML_NAMESPACES):
        yield (float(point.attrib.get('lat')), float(point.attrib.get('lon')))


class OsmAndTrack(_OsmTaskEval):
  """Task for checking for a track with specified waypoints saved in OsmAnd."""

  complexity = 1
  schema = {
      'type': 'object',
      'properties': {
          'waypoints': {
              'type': 'array',
              'items': {'type': 'string'},
          },
      },
      'required': ['waypoints'],
  }

  @property
  def goal(self) -> str:
    waypoints = self.params['waypoints']
    if len(waypoints) < 2:
      raise ValueError(
          'Waypoints parameter must contain at least two locations.'
      )
    waypoints = ', '.join(self.params['waypoints'])
    return (
        f'Save a track with waypoints {waypoints} in the'
        ' OsmAnd maps app in the same order as listed.'
    )

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    """Initializes the task environment."""
    super().initialize_task(env)
    _clear_tracks(env.controller)
    self._target_waypoint_coords = _lookup_target_waypoints(
        self.params['waypoints']
    )

  def is_successful(self, env: interface.AsyncEnv) -> float:
    with env.controller.pull_file(
        os.path.join(_DEVICE_FILES, 'tracks')
    ) as tracks_directory:
      for track_file in os.listdir(tracks_directory):
        if _track_matches(
            _track_points(
                ElementTree.parse(
                    os.path.join(tracks_directory, track_file)
                ).getroot()
            ),
            self._target_waypoint_coords,
        ):
          return super().is_successful(env)
    return 0.0

  def tear_down(self, env: interface.AsyncEnv):
    """Cleans up after task completion."""
    _clear_tracks(env.controller)
    super().tear_down(env)

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    waypoints = _random_location_str(
        names_only=True, num_locations=random.randint(2, 4)
    )
    track_name = f'{waypoints[0]} to {waypoints[-1]}'
    return {'track_name': track_name, 'waypoints': waypoints}


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import random
import time
from unittest import mock

from absl.testing import absltest
from android_env.proto import adb_pb2
from android_world.env import adb_utils
from android_world.env import representation_utils
from android_world.env import tools
from android_world.task_evals import task_eval
from android_world.task_evals.common_validators import sms_validators
from android_world.task_evals.single import sms
from android_world.task_evals.utils import user_data_generation
from android_world.utils import contacts_utils
from android_world.utils import test_utils


class TestMessagesSendTextMessage(test_utils.AdbEvalTestBase):

  def setUp(self):
    super().setUp()

    # Mock parent-level methods
    self.mock_initialize_sms_task = mock.patch.object(
        sms_validators.SimpleSMSSendSms, 'initialize_task'
    ).start()
    self.mock_is_successful = mock.patch.object(
        sms_validators.SimpleSMSSendSms, 'is_successful'
    ).start()

  def tearDown(self):
    super().tearDown()
    mock.patch.stopall()

  def test_is_successful(self):
    # SimpleSmsSend doesn't add anything to the parent class, so simply
    # check that parent functions have been called.
    env = mock.MagicMock()
    params = {'number': '1234567890', 'message': 'Hello World'}

    task = sms.SimpleSmsSend(params)
    self.mock_is_successful.return_value = True
    self.assertEqual(test_utils.perform_task(task, env), 1)

    # Check that parent's functions got called
    self.mock_initialize_sms_task.assert_called_once()
    self.mock_is_successful.assert_called_once()

  def test_initialize_task(self):
    env = mock.MagicMock()

    params = {'number': '1234567890', 'message': 'Hello World'}

    task = sms_validators.SimpleSMSSendSms(params)
    task.initialize_task(env)

    # Check that parent's function got called
    self.mock_initialize_sms_task.assert_called_once()


class TestSimpleSmsReplyMostRecent(test_utils.AdbEvalTestBase):

  def setUp(self):
    super().setUp()
    mock_randint = mock.patch.object(random, 'randint').start()
    mock_randchoice = mock.patch.object(random, 'choice').start()

    # Mock parent-level methods
    self.mock_initialize_sms_task = mock.patch.object(
        sms_validators.SimpleSMSSendSms, 'initialize_task'
    ).start()
    mock_generate_number = mock.patch.object(
        user_data_generation, 'generate_random_number'
    ).start()
    self.mock_is_successful = mock.patch.object(
        task_eval.TaskEval, 'is_successful'
    ).start()
    self.mock_android_time = mock.patch.object(
        sms_validators.SimpleSMSSendSms, 'get_android_time'
    ).start()
    self.mock_android_time.return_value = int(time.time())
    self.mock_get_received_messages = mock.patch.object(
        sms_validators.SimpleSMSSendSms, '_get_received_messages'
    ).start()

    # Mock adb_utils methods
    self.mock_disable_notifications = mock.patch.object(
        adb_utils, 'disable_headsup_notifications'
    ).start()
    self.mock_enable_notifications = mock.patch.object(
        adb_utils, 'enable_headsup_notifications'
    ).start()
    self.mock_text_emulator = mock.patch.object(
        adb_utils, 'text_emulator'
    ).start()

    # Setup mocks
    self.random_number_1 = '+1212365478'
    self.random_number_2 = '+19876543210'
    self.most_recent_number = '1234567890'
    self.message_1 = 'Message 1'
    self.message_2 = 'Message 2'
    self.most_recent_message = 'Hello World'
    # Instantiate state with 2 unimportant text message
    mock_randint.return_value = 2
    mock_randchoice.side_effect = [
        self.message_1,
        self.message_2,
        self.most_recent_message,
    ]
    mock_generate_number.side_effect = [
        self.random_number_1,
        self.random_number_2,
    ]

    self.initial_state_messages = [
        # Most recent message
        'Row: 0, address={}, body={}, service_center=NULL, date={}'.format(
            self.most_recent_number,
            self.most_recent_message,
            str(int((time.time() + 120) * 1000)),
        ),
        'Row: 1, address={}, body={}, service_center=NULL, date={}'.format(
            self.random_number_1,
            self.message_1,
            str(int((time.time() + 60) * 1000)),
        ),
        'Row: 2, address={}, body={}, service_center=NULL, date={}'.format(
            self.random_number_2,
            self.message_2,
            str(int(time.time() * 1000)),
        ),
    ]
    self.extract_package_name = mock.patch.object(
        adb_utils, 'extract_package_name'
    ).start()
    self.extract_package_name.return_value = (
        'com.simplemobiletools.smsmessenger'
    )

  def tearDown(self):
    super().tearDown()
    mock.patch.stopall()

  def test_initialize_task(self):
    env = mock.MagicMock()
    params = {'number': self.most_recent_number, 'message': 'New message'}
    self.mock_get_received_messages.return_value = self.initial_state_messages

    task = sms.SimpleSmsReplyMostRecent(params)
    task.initialize_task(env)
    self.mock_text_emulator.assert_has_calls([
        mock.call(env.controller, self.random_number_1, self.message_1),
        mock.call(env.controller, self.random_number_2, self.message_2),
        mock.call(
            env.controller, self.most_recent_number, self.most_recent_message
        ),
    ])
    self.mock_disable_notifications.assert_called_once()
    self.mock_enable_notifications.assert_called_once()

    self.mock_initialize_sms_task.assert_called_once()

  def test_is_successful(self):
    new_message = 'New message'
    mock_sent_message = adb_pb2.AdbResponse()
    date_ms = str(int(time.time() * 1000))
    mock_sent_message.generic.output = (
        'Row: 0, address={}, body={}, service_center=NULL, date={}'.format(
            self.most_recent_number, new_message, date_ms
        ).encode()
    )
    self.mock_issue_generic_request.side_effect = [mock_sent_message]
    self.mock_get_received_messages.return_value = self.initial_state_messages
    test_utils.log_mock_calls(self.mock_issue_generic_request)
    env = mock.MagicMock()
    params = {'number': self.most_recent_number, 'message': new_message}

    task = sms.SimpleSmsReplyMostRecent(params)

    self.assertEqual(test_utils.perform_task(task, env), 1)


class TestSimpleSmsReply(test_utils.AdbEvalTestBase):

  def setUp(self):
    super().setUp()
    mock_randint = mock.patch.object(random, 'randint').start()
    mock_randchoice = mock.patch.object(random, 'choice').start()

    # Mock parent-level methods
    self.mock_initialize_sms_task = mock.patch.object(
        sms_validators.SimpleSMSSendSms, 'initialize_task'
    ).start()
    mock_generate_number = mock.patch.object(
        user_data_generation, 'generate_random_number'
    ).start()
    self.mock_is_successful = mock.patch.object(
        task_eval.TaskEval, 'is_successful'
    ).start()
    self.mock_android_time = mock.patch.object(
        sms_validators.SimpleSMSSendSms, 'get_android_time'
    ).start()
    self.mock_android_time.return_value = int(time.time())

    # Mock adb_utils methods
    self.mock_disable_notifications = mock.patch.object(
        adb_utils, 'disable_headsup_notifications'
    ).start()
    self.mock_enable_notifications = mock.patch.object(
        adb_utils, 'enable_headsup_notifications'
    ).start()
    self.mock_text_emulator = mock.patch.object(
        adb_utils, 'text_emulator'
    ).start()

    # Setup mocks
    self.random_number_1 = '+1212365478'
    self.random_number_2 = '+19876543210'
    self.relevant_number = '1234567890'
    self.message_1 = 'Message 1'
    self.message_2 = 'Message 2'
    self.relevant_message = 'Hello World'
    # Instantiate state with 2 unimportant text message
    mock_randint.return_value = 2
    # Relevant message will always be sent last
    mock_randchoice.side_effect = [
        False,
        self.message_1,
        False,
        self.message_2,
        self.relevant_message,
    ]
    mock_generate_number.side_effect = [
        self.random_number_1,
        self.random_number_2,
    ]
    self.extract_package_name = mock.patch.object(
        adb_utils, 'extract_package_name'
    ).start()
    self.extract_package_name.return_value = (
        'com.simplemobiletools.smsmessenger'
    )

  def tearDown(self):
    super().tearDown()
    mock.patch.stopall()

  def test_initialize_task(self):
    env = mock.MagicMock()
    params = {'number': self.relevant_number, 'message': 'New message'}

    task = sms.SimpleSmsReply(params)
    task.initialize_task(env)
    self.mock_text_emulator.assert_has_calls([
        mock.call(env.controller, self.random_number_1, self.message_1),
        mock.call(env.controller, self.random_number_2, self.message_2),
        mock.call(env.controller, self.relevant_number, self.relevant_message),
    ])
    self.mock_disable_notifications.assert_called_once()
    self.mock_enable_notifications.assert_called_once()

    self.mock_initialize_sms_task.assert_called_once()

  def test_is_successful(self):
    new_message = 'New message'
    # Add successful message
    mock_sent_message = adb_pb2.AdbResponse()
    date_ms = str(int(time.time() * 1000))
    mock_sent_message.generic.output = (
        'Row: 0, address={}, body={}, service_center=NULL, date={}'.format(
            self.relevant_number, new_message, date_ms
        ).encode()
    )
    self.mock_issue_generic_request.side_effect = [mock_sent_message]

    test_utils.log_mock_calls(self.mock_issue_generic_request)

    env = mock.MagicMock()
    params = {'number': self.relevant_number, 'message': new_message}

    task = sms.SimpleSmsReply(params)
    self.assertEqual(test_utils.perform_task(task, env), 1)


class TestSimpleSmsSendClipboardContent(test_utils.AdbEvalTestBase):

  def setUp(self):
    super().setUp()

    # Mock parent-level methods
    self.mock_initialize_sms_task = mock.patch.object(
        sms_validators.SimpleSMSSendSms, 'initialize_task'
    ).start()
    self.mock_is_successful = mock.patch.object(
        task_eval.TaskEval, 'is_successful'
    ).start()
    self.mock_get_sent_messages = mock.patch.object(
        sms_validators.SimpleSMSSendSms, 'get_sent_messages'
    ).start()
    self.extract_package_name = mock.patch.object(
        adb_utils, 'extract_package_name'
    ).start()
    self.extract_package_name.return_value = (
        'com.simplemobiletools.smsmessenger'
    )

  def tearDown(self):
    super().tearDown()
    mock.patch.stopall()

  def test_initialize_task(self):
    clipboard_contents = 'Hello World'

    env = mock.MagicMock()
    params = {'number': '1234567890', 'message': clipboard_contents}

    task = sms.SimpleSmsSendClipboardContent(params)
    task.initialize_task(env)
    self.mock_set_clipboard_contents.assert_called_with(
        clipboard_contents, env.controller
    )
    self.mock_initialize_sms_task.assert_called_once()

  def test_is_successful(self):
    clipboard_contents = 'Hello World'
    number = '1234567890'
    date_ms = str(int(time.time() * 1000))
    self.mock_get_sent_messages.side_effect = [
        # Expected message
        [
            'Row: 0, address={}, body={}, service_center=NULL, date={}'
            .format(number, clipboard_contents, date_ms)
        ],
    ]

    env = mock.MagicMock()
    params = {'number': '1234567890', 'message': clipboard_contents}

    task = sms.SimpleSmsSendClipboardContent(params)
    self.assertEqual(test_utils.perform_task(task, env), 1)
    self.mock_set_clipboard_contents.assert_called_with(
        clipboard_contents, env.controller
    )


class TestSimpleSmsSendReceivedAddress(test_utils.AdbEvalTestBase):

  def setUp(self):
    super().setUp()

    # Create a list of UIElement objects corresponding to the Save button.
    ui_elements = [
        representation_utils.UIElement(
            text='Save',
            bbox=representation_utils.BoundingBox(
                x_min=-10,
                x_max=-20,
                y_min=-50,
                y_max=-80,
            ),
        ),
    ]
    self.mock_forest_to_ui_elements.return_value = ui_elements

    # Mock parent-level methods
    self.mock_initialize_sms_task = mock.patch.object(
        sms_validators.SimpleSMSSendSms, 'initialize_task'
    ).start()
    mock_generate_number = mock.patch.object(
        user_data_generation, 'generate_random_number'
    ).start()
    self.mock_is_successful = mock.patch.object(
        task_eval.TaskEval, 'is_successful'
    ).start()
    self.mock_android_time = mock.patch.object(
        sms_validators.SimpleSMSSendSms, 'get_android_time'
    ).start()
    self.mock_get_sent_messages = mock.patch.object(
        sms_validators.SimpleSMSSendSms, 'get_sent_messages'
    ).start()

    # Mock controller methods
    self.mock_add_contact = mock.patch.object(
        contacts_utils, 'add_contact'
    ).start()

    # Mock adb_utils methods
    self.mock_disable_notifications = mock.patch.object(
        adb_utils, 'disable_headsup_notifications'
    ).start()
    self.mock_enable_notifications = mock.patch.object(
        adb_utils, 'enable_headsup_notifications'
    ).start()
    self.mock_text_emulator = mock.patch.object(
        adb_utils, 'text_emulator'
    ).start()
    self.mock_delete_contacts = mock.patch.object(
        adb_utils, 'delete_contacts'
    ).start()

    # Setup mocks
    self.mock_android_time.return_value = int(time.time())
    self.random_number = '1234567890'
    mock_generate_number.side_effect = [
        self.random_number,
    ]
    self.extract_package_name = mock.patch.object(
        adb_utils, 'extract_package_name'
    ).start()
    self.extract_package_name.return_value = (
        'com.simplemobiletools.smsmessenger'
    )

  def tearDown(self):
    super().tearDown()
    mock.patch.stopall()

  def test_initialize_task(self):
    # Create contacts
    name1 = 'Jane Smith'
    name1_number = '1444554333'
    name2 = 'John Smith'

    env = mock.MagicMock()
    params = {
        'name1': name1,
        'number': name1_number,
        'name2': name2,
        'message': '100 Main Street',
    }

    task = sms.SimpleSmsSendReceivedAddress(params)
    task.initialize_task(env)
    self.mock_disable_notifications.assert_called_once()
    self.mock_initialize_sms_task.assert_called_once()
    self.mock_add_contact.assert_has_calls([
        mock.call(name1, name1_number, env.controller),
        mock.call(name2, self.random_number, env.controller),
    ])
    self.mock_text_emulator.assert_called_with(
        env.controller, self.random_number, '100 Main Street'
    )
    self.mock_enable_notifications.assert_called_once()

  def test_is_successful(self):
    # Create contacts
    name1 = 'Jane Smith'
    name1_number = '1444554333'
    name2 = 'John Smith'
    address = '100 Main Street, Seattle, WA'

    # Successful message.
    date_ms = str(int(time.time() * 1000))
    self.mock_get_sent_messages.side_effect = [
        [
            'Row: 0, address={}, body={}, service_center=NULL, date={}'.format(
                name1_number, address, date_ms
            )
        ],
    ]

    env = mock.MagicMock()
    params = {
        'name1': name1,
        'number': name1_number,
        'name2': name2,
        'message': address,
    }

    task = sms.SimpleSmsSendReceivedAddress(params)
    self.assertEqual(test_utils.perform_task(task, env), 1)
    self.mock_delete_contacts.assert_called_once()

  def test_is_not_successful(self):
    # Create contacts
    name1 = 'Jane Smith'
    name1_number = '1444554333'
    name2 = 'John Smith'
    address = '100 Main Street, Seattle, WA'

    # Unsuccessful message - sent to the wrong number.
    date_ms = str(int(time.time() * 1000))
    self.mock_get_sent_messages.side_effect = [
        [
            'Row: 0, address={}, body={}, service_center=NULL, date={}'.format(
                self.random_number, address, date_ms
            )
        ],
    ]

    env = mock.MagicMock()
    params = {
        'name1': name1,
        'number': name1_number,
        'name2': name2,
        'message': address,
    }

    task = sms.SimpleSmsSendReceivedAddress(params)
    self.assertEqual(test_utils.perform_task(task, env), 0)
    self.mock_delete_contacts.assert_called_once()


class TestMessagesResendTextMessage(test_utils.AdbEvalTestBase):

  def setUp(self):
    super().setUp()
    self.glitch_message = (
        'Sorry, there was a glitch, what was the last message you sent me?'
    )

    # UIElements corresponding to the contact Save button and SMS send button.
    ui_elements = [
        representation_utils.UIElement(
            text='Save',
            bbox=representation_utils.BoundingBox(
                x_min=-10,
                x_max=-20,
                y_min=-50,
                y_max=-80,
            ),
        ),
        representation_utils.UIElement(
            text='SMS',
            bbox=representation_utils.BoundingBox(
                x_min=-10,
                x_max=-20,
                y_min=-50,
                y_max=-80,
            ),
        ),
    ]
    self.mock_forest_to_ui_elements.return_value = ui_elements

    # Mock parent-level methods
    self.mock_initialize_sms_task = mock.patch.object(
        task_eval.TaskEval, 'initialize_task'
    ).start()
    self.mock_is_successful = mock.patch.object(
        task_eval.TaskEval, 'is_successful'
    ).start()
    self.mock_android_time = mock.patch.object(
        sms_validators.SimpleSMSSendSms, 'get_android_time'
    ).start()
    self.mock_get_sent_messages = mock.patch.object(
        sms_validators.SimpleSMSSendSms, 'get_sent_messages'
    ).start()

    # Mock controller methods
    self.mock_add_contact = mock.patch.object(
        contacts_utils, 'add_contact'
    ).start()
    self.mock_send_sms = mock.patch.object(
        tools.AndroidToolController, 'send_sms'
    ).start()

    # Mock adb_utils methods
    self.mock_disable_notifications = mock.patch.object(
        adb_utils, 'disable_headsup_notifications'
    ).start()
    self.mock_enable_notifications = mock.patch.object(
        adb_utils, 'enable_headsup_notifications'
    ).start()
    self.mock_text_emulator = mock.patch.object(
        adb_utils, 'text_emulator'
    ).start()
    self.mock_delete_contacts = mock.patch.object(
        adb_utils, 'delete_contacts'
    ).start()

    # Setup mocks
    self.mock_android_time.return_value = int(time.time() * 1000)

    self.extract_package_name = mock.patch.object(
        adb_utils, 'extract_package_name'
    ).start()
    self.extract_package_name.return_value = (
        'com.simplemobiletools.smsmessenger'
    )

  def test_is_successful(self):
    # Create contact
    name = 'Jane Smith'
    agent_number = '1444554333'
    recipient_number = '9876543210'

    initial_date_ms = str(int(time.time() * 1000))
    final_date_ms = str(int(time.time() * 1000) + 6000)

    resend_message = (
        'Row: 1, address={}, body={}, service_center=NULL, date={}'.format(
            recipient_number, self.glitch_message, initial_date_ms
        )
    )
    initial_message = (
        'Row: 2, address={}, body=Hello World, service_center=NULL, date={}'
        .format(agent_number, initial_date_ms)
    )
    expected_message = (
        'Row: 0, address={}, body=Hello World, service_center=NULL, date={}'
        .format(agent_number, final_date_ms)
    )
    self.mock_get_sent_messages.side_effect = [
        # Empty messages pre-initialization
        [],
        # Post initialization messages
        [resend_message, initial_message],
        [expected_message, resend_message, initial_message],
    ]

    env = mock.MagicMock()
    params = {
        'name': name,
        'number': agent_number,
        'message': 'Hello World',
    }

    task = sms.SimpleSmsResend(params)
    self.assertEqual(test_utils.perform_task(task, env), 1)

  def test_initialize_task(self):
    # Create contact
    name = 'Jane Smith'
    number = '1444554333'
    message = '100 Main Street'

    env = mock.MagicMock()
    params = {
        'name': name,
        'number': number,
        'message': message,
    }

    task = sms.SimpleSmsResend(params)
    task.initialize_task(env)
    self.mock_disable_notifications.assert_called_once()
    self.mock_initialize_sms_task.assert_called_once()
    self.mock_add_contact.assert_called_with(name, number, env.controller)
    # Check that initial message was sent
    self.mock_send_sms.assert_called_with(number, message)
    # Check that resend message was sent
    self.mock_text_emulator.assert_called_with(
        env.controller, number, self.glitch_message
    )
    self.mock_enable_notifications.assert_called_once()


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import random
from unittest import mock
from absl.testing import absltest
from absl.testing import parameterized
from android_env import env_interface
from android_world.env import adb_utils
from android_world.env import interface
from android_world.task_evals.common_validators import sqlite_validators
from android_world.task_evals.single import recipe
from android_world.task_evals.utils import sqlite_schema_utils
from android_world.utils import app_snapshot
from android_world.utils import file_utils


class RecipeTestBase(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.enter_context(
        mock.patch.object(sqlite_validators.SQLiteApp, 'initialize_task')
    )
    self.enter_context(
        mock.patch.object(
            sqlite_validators.DeleteMultipleRows, 'initialize_task'
        )
    )
    self.enter_context(
        mock.patch.object(sqlite_validators.AddMultipleRows, 'initialize_task')
    )
    self.mock_env = mock.create_autospec(interface.AsyncEnv)

  def tearDown(self):
    super().tearDown()
    self.mock_env.stop()


class RecipeDeleteMultipleRecipesTest(RecipeTestBase):

  def setUp(self):
    super().setUp()
    self.mock_env = mock.MagicMock()

  def tearDown(self):
    super().tearDown()
    self.mock_env.stop()

  def test_goal_generation(self):
    params = recipe._RecipeDeleteMultipleRecipes.generate_random_params()
    instance = recipe._RecipeDeleteMultipleRecipes(params)
    instance.params[sqlite_validators.ROW_OBJECTS] = [
        sqlite_schema_utils.Recipe(title='Recipe 1'),
        sqlite_schema_utils.Recipe(title='Recipe 2'),
        sqlite_schema_utils.Recipe(title='Recipe 3'),
    ]
    expected_goal = (
        'Delete the following recipes from Broccoli app: Recipe 1, Recipe 2,'
        ' Recipe 3.'
    )
    self.assertEqual(instance.goal, expected_goal)

  @mock.patch.object(recipe, '_generate_random_recipe')
  def test_generate_random_params(
      self,
      mock_generate_random_recipe,
  ):
    mock_generate_random_recipe.side_effect = [
        sqlite_schema_utils.Recipe(title='Recipe 1'),
        sqlite_schema_utils.Recipe(title='Recipe 2'),
        sqlite_schema_utils.Recipe(title='Recipe 3'),
        sqlite_schema_utils.Recipe(title='Recipe 4'),
        sqlite_schema_utils.Recipe(title='Recipe 5'),
    ]
    recipe._RecipeDeleteMultipleRecipes.n_rows_noise = 2
    recipe._RecipeDeleteMultipleRecipes.n_rows = 3
    params = recipe._RecipeDeleteMultipleRecipes.generate_random_params()

    expected_noise_rows = [
        sqlite_schema_utils.Recipe(title='Recipe 1'),
        sqlite_schema_utils.Recipe(title='Recipe 2'),
    ]
    expected_target_rows = [
        sqlite_schema_utils.Recipe(title='Recipe 3'),
        sqlite_schema_utils.Recipe(title='Recipe 4'),
        sqlite_schema_utils.Recipe(title='Recipe 5'),
    ]

    self.assertEqual(
        params[sqlite_validators.NOISE_ROW_OBJECTS], expected_noise_rows
    )
    self.assertEqual(
        params[sqlite_validators.ROW_OBJECTS], expected_target_rows
    )


# Create test for deleting duplicate recipes; here we also test the underlying
# logic from sqlite_base.DeleteMultipleDuplicateRows in lieu of tests for the
# base class.
class RecipeDeleteDuplicateRecipesTest(parameterized.TestCase):

  def setUp(self):
    super().setUp()
    self.mock_env = mock.create_autospec(interface.AsyncEnv)
    self.mock_env.base_env = mock.create_autospec(
        env_interface.AndroidEnvInterface
    )
    # enter context
    self.mock_list_rows = self.enter_context(
        mock.patch.object(
            sqlite_validators.SQLiteApp, 'list_rows', return_value=[]
        )
    )
    self.mock_add_rows = self.enter_context(
        mock.patch.object(sqlite_validators.SQLiteApp, 'add_rows')
    )
    self.mock_tmp_directory_from_device = self.enter_context(
        mock.patch.object(file_utils, 'tmp_directory_from_device')
    )
    self.mock_issue_generic_request = self.enter_context(
        mock.patch.object(adb_utils, 'issue_generic_request')
    )
    self.mock_remove_files = self.enter_context(
        mock.patch.object(file_utils, 'clear_directory')
    )
    self.mock_clear_db = self.enter_context(
        mock.patch.object(sqlite_validators.SQLiteApp, '_clear_db')
    )
    self.mock_restore_snapshot = self.enter_context(
        mock.patch.object(app_snapshot, 'restore_snapshot')
    )

    self.params = {
        sqlite_validators.NOISE_ROW_OBJECTS: [
            sqlite_schema_utils.Recipe(title='Unique Recipe 1', recipeId=1),
            sqlite_schema_utils.Recipe(title='Unique Recipe 2', recipeId=2),
            sqlite_schema_utils.Recipe(title='Unique Recipe 3', recipeId=3),
            sqlite_schema_utils.Recipe(title='Unique Recipe 4', recipeId=4),
            sqlite_schema_utils.Recipe(title='Unique Recipe 5', recipeId=5),
        ],
        sqlite_validators.ROW_OBJECTS: [
            sqlite_schema_utils.Recipe(title='Duplicate Recipe', recipeId=6),
            sqlite_schema_utils.Recipe(title='Duplicate Recipe', recipeId=7),
        ],
    }
    self.instance = recipe.RecipeDeleteDuplicateRecipes(self.params)

  def tearDown(self):
    super().tearDown()
    mock.patch.stopall()

  def test_initialize_task(self):
    """Test initialization of the task with proper setup of duplicate rows."""
    self.mock_list_rows.return_value = (
        self.params[sqlite_validators.ROW_OBJECTS]
        + self.params[sqlite_validators.NOISE_ROW_OBJECTS]
    )

    self.instance.initialize_task(self.mock_env)

    self.mock_add_rows.assert_has_calls([
        mock.call(
            self.params[sqlite_validators.NOISE_ROW_OBJECTS],
            self.mock_env,
        ),
        mock.call(self.params[sqlite_validators.ROW_OBJECTS], self.mock_env),
    ])

    self.assertLen(
        self.instance.rows_to_delete,
        2,
        'Should have initialized two duplicate rows',
    )
    self.instance._validate_initial_state(self.instance.before)

  def test_initialize_task_failure(self):
    """Test initialization of the task with proper setup of duplicate rows."""
    self.mock_list_rows.return_value = (
        self.params[sqlite_validators.ROW_OBJECTS][0:1]
        + self.params[sqlite_validators.NOISE_ROW_OBJECTS]
    )

    with self.assertRaises(ValueError):
      self.instance.initialize_task(self.mock_env)

  @parameterized.named_parameters(
      ('first_index_kept', 0),
      ('second_index_kept', 1),
  )
  def test_is_successful(self, index):
    """Test the success of duplicate deletion."""
    self.mock_list_rows.side_effect = [
        self.params[sqlite_validators.NOISE_ROW_OBJECTS]
        + self.params[sqlite_validators.ROW_OBJECTS],
        self.params[sqlite_validators.NOISE_ROW_OBJECTS]
        + [self.params[sqlite_validators.ROW_OBJECTS][index]],
    ]
    self.instance.initialize_task(self.mock_env)

    success = self.instance.is_successful(self.mock_env)

    self.assertEqual(success, 1.0, 'Deletion should be successful')

  def test_is_successful_failure_both_removed(
      self,
  ):
    """Test the success of duplicate deletion."""
    self.mock_list_rows.side_effect = [
        self.params[sqlite_validators.ROW_OBJECTS]
        + self.params[sqlite_validators.NOISE_ROW_OBJECTS],
        self.params[sqlite_validators.NOISE_ROW_OBJECTS],
    ]

    self.instance.initialize_task(self.mock_env)
    success = self.instance.is_successful(self.mock_env)

    self.assertEqual(success, 0.0, 'Deletion should not be successful')

  def test_is_successful_failure_neither_removed(
      self,
  ):
    """Test the success of duplicate deletion."""
    self.mock_list_rows.side_effect = [
        self.params[sqlite_validators.ROW_OBJECTS]
        + self.params[sqlite_validators.NOISE_ROW_OBJECTS],
        self.params[sqlite_validators.NOISE_ROW_OBJECTS]
        + self.params[sqlite_validators.ROW_OBJECTS],
    ]

    self.instance.initialize_task(self.mock_env)
    success = self.instance.is_successful(self.mock_env)

    self.assertEqual(success, 0.0, 'Deletion should not be successful')

  @mock.patch.object(recipe, '_generate_random_recipe')
  def test_generate_random_params(self, mock_generate_random_recipe):
    mock_generate_random_recipe.side_effect = [
        sqlite_schema_utils.Recipe(title='Recipe 1'),
        sqlite_schema_utils.Recipe(title='Recipe 2'),
        sqlite_schema_utils.Recipe(title='Recipe 3'),
        sqlite_schema_utils.Recipe(title='Recipe 3'),
        sqlite_schema_utils.Recipe(title='Recipe 4'),
        sqlite_schema_utils.Recipe(title='Recipe 5'),
        sqlite_schema_utils.Recipe(title='Recipe 6'),
    ]
    params = recipe.RecipeDeleteDuplicateRecipes.generate_random_params()
    self.assertEqual(
        params[sqlite_validators.NOISE_ROW_OBJECTS],
        [
            sqlite_schema_utils.Recipe(title='Recipe 1'),
            sqlite_schema_utils.Recipe(title='Recipe 2'),
            sqlite_schema_utils.Recipe(title='Recipe 3'),
            sqlite_schema_utils.Recipe(title='Recipe 4'),
            sqlite_schema_utils.Recipe(title='Recipe 5'),
        ],
    )
    self.assertEqual(
        params[sqlite_validators.ROW_OBJECTS],
        [
            sqlite_schema_utils.Recipe(title='Recipe 6'),
            sqlite_schema_utils.Recipe(title='Recipe 6'),
        ],
    )


class BroccoliDeleteDuplicateRecipesTest2(parameterized.TestCase):

  @mock.patch.object(recipe, '_generate_random_recipe')
  def test_generate_random_params(self, mock_generate_random_recipe):
    first = [
        sqlite_schema_utils.Recipe(title='Recipe 1'),
        sqlite_schema_utils.Recipe(title='Recipe 2'),
        sqlite_schema_utils.Recipe(title='Recipe 3'),
        sqlite_schema_utils.Recipe(title='Recipe 3'),
        sqlite_schema_utils.Recipe(title='Recipe 4'),
        sqlite_schema_utils.Recipe(title='Recipe 5'),
        sqlite_schema_utils.Recipe(title='Recipe 6'),
        sqlite_schema_utils.Recipe(title='Recipe 7', description='target'),
    ]
    second = [
        sqlite_schema_utils.Recipe(title='Recipe 4'),
        sqlite_schema_utils.Recipe(title='Recipe 5'),
        sqlite_schema_utils.Recipe(title='Recipe 7', description='target'),
        sqlite_schema_utils.Recipe(title='Recipe 6'),
        sqlite_schema_utils.Recipe(title='Recipe 7', description='variation 1'),
        sqlite_schema_utils.Recipe(title='Recipe 7', description='target'),
        sqlite_schema_utils.Recipe(title='Recipe 7', description='variation 2'),
        sqlite_schema_utils.Recipe(title='Recipe 7', description='variation 3'),
        sqlite_schema_utils.Recipe(title='Recipe 7', description='target'),
        sqlite_schema_utils.Recipe(title='Recipe 7', description='variation 4'),
    ]
    mock_generate_random_recipe.side_effect = first + second
    params = recipe.RecipeDeleteDuplicateRecipes2.generate_random_params()
    self.assertEqual(
        params[sqlite_validators.ROW_OBJECTS],
        [
            sqlite_schema_utils.Recipe(title='Recipe 7', description='target'),
            sqlite_schema_utils.Recipe(title='Recipe 7', description='target'),
        ],
    )
    self.assertEqual(
        params[sqlite_validators.NOISE_ROW_OBJECTS],
        [
            sqlite_schema_utils.Recipe(title='Recipe 1'),
            sqlite_schema_utils.Recipe(title='Recipe 2'),
            sqlite_schema_utils.Recipe(title='Recipe 3'),
            sqlite_schema_utils.Recipe(title='Recipe 4'),
            sqlite_schema_utils.Recipe(title='Recipe 5'),
            sqlite_schema_utils.Recipe(title='Recipe 6'),
            sqlite_schema_utils.Recipe(
                title='Recipe 7', description='variation 1'
            ),
            sqlite_schema_utils.Recipe(
                title='Recipe 7', description='variation 2'
            ),
            sqlite_schema_utils.Recipe(
                title='Recipe 7', description='variation 3'
            ),
            sqlite_schema_utils.Recipe(
                title='Recipe 7', description='variation 4'
            ),
        ],
    )


class TestRecipeDeleteMultipleRecipesWithConstraint(parameterized.TestCase):

  @mock.patch.object(random, 'choice', return_value='garlic')
  @mock.patch.object(recipe, '_generate_random_recipe')
  def test_generate_random_params(
      self, mock_generate_random_recipe, unused_mock_choice
  ):
    first = [
        sqlite_schema_utils.Recipe(title='Recipe 1', directions='Stir a lot'),
        sqlite_schema_utils.Recipe(
            title='Recipe 2', directions='Contains garlic.'
        ),
        sqlite_schema_utils.Recipe(
            title='Recipe 3', directions='Also garlic here.'
        ),
        sqlite_schema_utils.Recipe(title='Recipe 4', directions='Add anchoves'),
    ]
    second = [
        sqlite_schema_utils.Recipe(
            title='Recipe 6', directions='Contains garlic.'
        ),
        sqlite_schema_utils.Recipe(title='Recipe 5', directions='Stir a lot'),
        sqlite_schema_utils.Recipe(
            title='Recipe 7', directions='Also garlic here.'
        ),
        sqlite_schema_utils.Recipe(title='Recipe 8', directions='Add anchoves'),
        sqlite_schema_utils.Recipe(
            title='Recipe 8', directions='Add anchoves again'
        ),
        sqlite_schema_utils.Recipe(
            title='Recipe 7', directions='This contains garlic.'
        ),
    ]
    mock_generate_random_recipe.side_effect = first + second

    recipe.RecipeDeleteMultipleRecipesWithConstraint.n_rows = 2
    recipe.RecipeDeleteMultipleRecipesWithConstraint.n_rows_noise = 2
    params = (
        recipe.RecipeDeleteMultipleRecipesWithConstraint.generate_random_params()
    )

    self.assertEqual(
        params[sqlite_validators.NOISE_ROW_OBJECTS],
        [
            sqlite_schema_utils.Recipe(
                title='Recipe 1', directions='Stir a lot'
            ),
            sqlite_schema_utils.Recipe(
                title='Recipe 4', directions='Add anchoves'
            ),
        ],
    )
    self.assertEqual(
        params[sqlite_validators.ROW_OBJECTS],
        [
            sqlite_schema_utils.Recipe(
                title='Recipe 6', directions='Contains garlic.'
            ),
            sqlite_schema_utils.Recipe(
                title='Recipe 7', directions='Also garlic here.'
            ),
        ],
    )


class AddMultipleRecipesForTest(recipe._RecipeAddMultipleRecipes):
  n_rows = 2
  n_rows_noise = 2


class TestRecipeAddMultipleRecipes(absltest.TestCase):

  @mock.patch.object(recipe, '_generate_random_recipe')
  @mock.patch.object(random, 'choice', return_value='text_block')
  def test_generate_random_params(
      self, mock_choice, mock_generate_random_recipe
  ):
    target_rows = [
        sqlite_schema_utils.Recipe(title='Recipe 1', ingredients='Tomatoes'),
        sqlite_schema_utils.Recipe(title='Recipe 2', ingredients='Garlic'),
    ]
    noise_rows = [
        sqlite_schema_utils.Recipe(title='Noise 1', ingredients='Salt'),
        sqlite_schema_utils.Recipe(title='Noise 2', ingredients='Pepper'),
    ]
    mock_generate_random_recipe.side_effect = target_rows + noise_rows

    params = AddMultipleRecipesForTest.generate_random_params()

    mock_choice.assert_called_with(['csv', 'text_block'])

    self.assertEqual(params[sqlite_validators.ROW_OBJECTS], target_rows)
    self.assertEqual(params[sqlite_validators.NOISE_ROW_OBJECTS], noise_rows)
    self.assertEqual(params[recipe._TEXT_REPRESENTATION_TYPE], 'text_block')


class RecipeAddMultipleRecipesFromMarkor2ForTest(
    recipe.RecipeAddMultipleRecipesFromMarkor2
):
  n_rows = 2
  n_rows_noise = 2


class TestRecipeAddMultipleRecipesFromMarkor2(absltest.TestCase):

  @mock.patch.object(recipe, '_generate_random_recipe')
  @mock.patch.object(random, 'choice')
  def test_generate_random_params(
      self, mock_choice, mock_generate_random_recipe
  ):
    mock_generate_random_recipe.side_effect = [
        sqlite_schema_utils.Recipe(title='Recipe 1', preparationTime='10 mins'),
        sqlite_schema_utils.Recipe(title='Recipe 2', preparationTime='40 mins'),
        sqlite_schema_utils.Recipe(title='Recipe 3', preparationTime='10 mins'),
        sqlite_schema_utils.Recipe(
            title='Noise 1', ingredients='Salt', preparationTime='15 mins'
        ),
        sqlite_schema_utils.Recipe(
            title='Noise 2', ingredients='Salt', preparationTime='10 mins'
        ),
        sqlite_schema_utils.Recipe(
            title='Noise 3', ingredients='Salt', preparationTime='30 mins'
        ),
    ]
    mock_choice.side_effect = ['10 mins', 'text_block']

    params = RecipeAddMultipleRecipesFromMarkor2ForTest.generate_random_params()

    mock_choice.assert_called_with(['csv', 'text_block'])

    self.assertEqual(
        params[sqlite_validators.ROW_OBJECTS],
        [
            sqlite_schema_utils.Recipe(
                title='Recipe 1', preparationTime='10 mins'
            ),
            sqlite_schema_utils.Recipe(
                title='Recipe 3', preparationTime='10 mins'
            ),
        ],
    )
    self.assertEqual(
        params[sqlite_validators.NOISE_ROW_OBJECTS],
        [
            sqlite_schema_utils.Recipe(
                title='Noise 1', ingredients='Salt', preparationTime='15 mins'
            ),
            sqlite_schema_utils.Recipe(
                title='Noise 3', ingredients='Salt', preparationTime='30 mins'
            ),
        ],
    )
    self.assertEqual(params[recipe._TEXT_REPRESENTATION_TYPE], 'text_block')


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import dataclasses
import os
import sqlite3
import tempfile
from unittest import mock

from absl.testing import absltest
from absl.testing import parameterized
from android_env import env_interface
from android_env.wrappers import a11y_grpc_wrapper
from android_world.env import android_world_controller
from android_world.env import interface
from android_world.env.setup_device import apps
from android_world.task_evals.single import vlc
from android_world.task_evals.utils import sqlite_schema_utils
from android_world.task_evals.utils import user_data_generation
from android_world.utils import app_snapshot
from android_world.utils import file_test_utils
from android_world.utils import file_utils


@dataclasses.dataclass
class Playlist:
  name: str
  files: list[str]  # List of filenames for media files in the playlist


def _set_state_of_db(test_db_path: str, playlists: list[Playlist]):
  """Inserts playlists and their media files into the mock database."""

  if os.path.exists(test_db_path):
    os.remove(test_db_path)
  conn = sqlite3.connect(test_db_path)
  cursor = conn.cursor()

  # Create tables
  cursor.executescript("""
          CREATE TABLE Playlist(id_playlist INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT);
          CREATE TABLE Media(id_media INTEGER PRIMARY KEY AUTOINCREMENT, filename TEXT UNIQUE);
          CREATE TABLE PlaylistMediaRelation(media_id INTEGER, playlist_id INTEGER, position INTEGER);
      """)

  for playlist in playlists:
    # Insert the playlist
    cursor.execute('INSERT INTO Playlist(name) VALUES (?)', (playlist.name,))
    playlist_id = cursor.lastrowid

    for filename in playlist.files:
      cursor.execute(
          """
      INSERT INTO Media(filename) VALUES (?)
      ON CONFLICT(filename) DO UPDATE SET filename = excluded.filename
      """,
          (filename,),
      )
      media_id = cursor.lastrowid
      # Relate media file to playlist
      cursor.execute(
          'INSERT INTO PlaylistMediaRelation(media_id, playlist_id, position)'
          ' VALUES (?, ?, ?)',
          (media_id, playlist_id, playlist.files.index(filename)),
      )

  conn.commit()
  conn.close()


class VlcTestBase(parameterized.TestCase):

  def setUp(self):
    """Set up the test environment and mock database."""
    super().setUp()
    self.env_mock = mock.create_autospec(interface.AsyncAndroidEnv)
    self.android_env_mock = mock.create_autospec(
        env_interface.AndroidEnvInterface
    )
    self.enter_context(
        mock.patch.object(
            a11y_grpc_wrapper,
            'A11yGrpcWrapper',
            instance=True,
        )
    )
    self.controller = android_world_controller.AndroidWorldController(
        self.android_env_mock
    )
    self.env_mock.controller = self.controller

    temp_dir = tempfile.mkdtemp()
    self.test_db_path = os.path.join(temp_dir, 'app_db/vlc_media.db')
    os.makedirs(
        os.path.join(os.path.dirname(self.test_db_path), 'app_db'),
        exist_ok=True,
    )

    vlc._DB_PATH = self.test_db_path

    # Mock file and SQLite utility functions
    self.mock_copy_db = self.enter_context(
        mock.patch.object(
            file_utils,
            'tmp_directory_from_device',
            side_effect=file_test_utils.mock_tmp_directory_from_device,
        )
    )
    self.mock_copy_data_to_device = self.enter_context(
        mock.patch.object(
            file_utils,
            'copy_data_to_device',
            side_effect=file_test_utils.mock_copy_data_to_device,
        )
    )
    self.mock_restore_snapshot = self.enter_context(
        mock.patch.object(app_snapshot, 'restore_snapshot')
    )

  def tearDown(self):
    super().tearDown()
    vlc._DB_PATH = '/data/data/org.videolan.vlc/app_db/vlc_media.db'


class VlcUtilsTest(VlcTestBase):

  def test_get_playlist_info(self):
    """Test fetching playlist information."""
    expected_info = [
        sqlite_schema_utils.PlaylistInfo(
            playlist_name='Test Playlist',
            media_file_name='test_media.mp4',
            order_in_playlist=0,
        )
    ]

    _set_state_of_db(
        self.test_db_path, [Playlist('Test Playlist', ['test_media.mp4'])]
    )
    result = vlc._get_playlist_file_info(self.env_mock)
    self.assertEqual(result, expected_info)


class VlcTaskEvalsTestBase(VlcTestBase):

  def setUp(self):
    super().setUp()
    self.mock_write_video_file_to_device = self.enter_context(
        mock.patch.object(
            user_data_generation, 'write_video_file_to_device', autospec=True
        )
    )
    self.mock_generate_random_string = self.enter_context(
        mock.patch.object(
            user_data_generation, 'generate_random_string', autospec=True
        )
    )
    self.mock_remove_files = self.enter_context(
        mock.patch.object(file_utils, 'clear_directory', autospec=True)
    )
    _set_state_of_db(
        self.test_db_path,
        [
            Playlist(
                'Stale Playlist',
                ['stale_test_media.mp4', 'stale_test_media2.mp4'],
            )
        ],
    )


class VlcCreatePlaylist(VlcTaskEvalsTestBase):

  def test_goal(self):
    params = {
        'playlist_name': 'Test Playlist',
        'files': ['test_media.mp4, test_media2.mp4'],
    }

    instance = vlc.VlcCreatePlaylist(params)

    self.assertEqual(
        instance.goal,
        'Create a playlist titled "Test Playlist" with the following files in'
        ' VLC (located in Internal Memory/VLCVideos), in order: test_media.mp4,'
        ' test_media2.mp4',
    )

  def test_initialize_task(self):
    params = {
        'playlist_name': 'Test Playlist',
        'files': ['test_media.mp4', 'test_media2.mp4'],
        'noise_files': ['noise_media.mp4'],
    }
    self.mock_generate_random_string.side_effect = ['hello', 'world', 'test']

    instance = vlc.VlcCreatePlaylist(params)
    instance.initialize_task(self.env_mock)

    expected_calls = [
        mock.call(
            'test_media.mp4',
            apps.VlcApp.videos_path,
            self.env_mock,
            messages=['hello'],
            fps=1,
            message_display_time=mock.ANY,
        ),
        mock.call(
            'test_media2.mp4',
            apps.VlcApp.videos_path,
            self.env_mock,
            messages=['world'],
            fps=1,
            message_display_time=mock.ANY,
        ),
        mock.call(
            'noise_media.mp4',
            apps.VlcApp.videos_path,
            self.env_mock,
            messages=['test'],
            fps=1,
            message_display_time=mock.ANY,
        ),
    ]

    self.mock_write_video_file_to_device.assert_has_calls(
        expected_calls, any_order=False
    )

  @parameterized.named_parameters(
      dict(
          testcase_name='no fuzzy',
          playlist_name='Test Playlist',
      ),
      dict(
          testcase_name='fuzzy1',
          playlist_name='test playlist',
      ),
      dict(
          testcase_name='fuzzy2',
          playlist_name='test playlis',
      ),
  )
  def test_is_successful(self, playlist_name: str):
    params = {
        'playlist_name': 'Test Playlist',
        'files': ['test_media.mp4', 'test_media2.mp4', 'test_media3.mp4'],
        'noise_files': [],
    }
    instance = vlc.VlcCreatePlaylist(params)
    instance.initialize_task(self.env_mock)
    self.assertFalse(instance.is_successful(env=self.env_mock))
    _set_state_of_db(
        self.test_db_path,
        [
            Playlist(
                playlist_name,
                ['test_media.mp4', 'test_media2.mp4', 'test_media3.mp4'],
            )
        ],
    )

    self.assertTrue(instance.is_successful(env=self.env_mock))
    instance.tear_down(self.env_mock)

  def test_is_successful_fails(self):
    params = {
        'playlist_name': 'Test Playlist',
        'files': ['test_media.mp4', 'test_media2.mp4', 'test_media3.mp4'],
        'noise_files': [],
    }
    instance = vlc.VlcCreatePlaylist(params)
    instance.initialize_task(self.env_mock)
    self.assertFalse(instance.is_successful(env=self.env_mock))
    _set_state_of_db(
        self.test_db_path,
        [
            Playlist(
                'Test Playlist',
                ['test_media.mp4', 'test_media2.mp4'],
            )
        ],
    )

    self.assertFalse(instance.is_successful(env=self.env_mock))
    instance.tear_down(self.env_mock)


class TestCreateTwoPlaylists(VlcTaskEvalsTestBase):

  def test_goal(self):
    params = {
        'playlist_name1': 'Playlist One',
        'files1': ['file1.mp3', 'file2.mp3'],
        'noise_files1': ['noise_file1.mp3', 'noise_file2.mp3'],
        'playlist_name2': 'Playlist Two',
        'files2': ['file3.mp3', 'file4.mp3'],
        'noise_files2': ['noise_file3.mp3', 'noise_file4.mp3'],
    }
    instance = vlc.VlcCreateTwoPlaylists(params)

    expected_goal = (
        'Create a playlist titled "Playlist One" with the following files in'
        ' VLC (located in Internal Memory/VLCVideos), in order: file1.mp3,'
        ' file2.mp3. And then, create a playlist titled "Playlist Two" with the'
        ' following files in VLC, in order: file3.mp3, file4.mp3.'
    )
    self.assertEqual(instance.goal, expected_goal)

  def test_initialize_task(self):
    params = {
        'playlist_name1': 'Playlist One',
        'files1': ['file1.mp3', 'file2.mp3'],
        'noise_files1': ['noise_file1.mp3'],
        'playlist_name2': 'Playlist Two',
        'files2': ['file3.mp3', 'file4.mp3'],
        'noise_files2': ['noise_file2.mp3'],
    }
    self.mock_generate_random_string.side_effect = [
        'random1',
        'random2',
        'noise1',
        'random3',
        'random4',
        'noise2',
    ]

    instance = vlc.VlcCreateTwoPlaylists(params)
    instance.initialize_task(self.env_mock)

    expected_calls = [
        mock.call(
            filename,
            apps.VlcApp.videos_path,
            self.env_mock,
            messages=[mock.ANY],
            fps=1,
            message_display_time=mock.ANY,
        )
        for filename in [
            'file1.mp3',
            'file2.mp3',
            'noise_file1.mp3',
            'file3.mp3',
            'file4.mp3',
            'noise_file2.mp3',
        ]
    ]
    self.mock_write_video_file_to_device.assert_has_calls(expected_calls)

  def test_is_successful(self):
    params = {
        'playlist_name1': 'Playlist One',
        'files1': ['file1.mp3', 'file2.mp3'],
        'noise_files1': [],
        'playlist_name2': 'Playlist Two',
        'files2': ['file3.mp3', 'file4.mp3'],
        'noise_files2': [],
    }
    create_two_playlists_task = vlc.VlcCreateTwoPlaylists(params)
    create_two_playlists_task.initialize_task(self.env_mock)
    self.assertFalse(create_two_playlists_task.is_successful(self.env_mock))
    _set_state_of_db(
        self.test_db_path,
        [
            Playlist('Playlist One', ['file1.mp3', 'file2.mp3']),
            Playlist('Playlist Two', ['file3.mp3', 'file4.mp3']),
        ],
    )

    self.assertTrue(create_two_playlists_task.is_successful(self.env_mock))
    create_two_playlists_task.tear_down(self.env_mock)

  def test_is_successful_fail(self):
    params = {
        'playlist_name1': 'Playlist One',
        'files1': ['file1.mp3', 'file2.mp3', 'file3.mp3'],
        'noise_files1': [],
        'playlist_name2': 'Playlist Two',
        'files2': ['file3.mp3'],
        'noise_files2': [],
    }
    create_two_playlists_task = vlc.VlcCreateTwoPlaylists(params)
    create_two_playlists_task.initialize_task(self.env_mock)
    self.assertFalse(create_two_playlists_task.is_successful(self.env_mock))
    _set_state_of_db(
        self.test_db_path,
        [
            Playlist('Playlist One', ['file1.mp3', 'file2.mp3']),
            Playlist('Playlist Two', ['file3.mp3', 'file4.mp3']),
        ],
    )

    self.assertFalse(create_two_playlists_task.is_successful(self.env_mock))
    create_two_playlists_task.tear_down(self.env_mock)

  @parameterized.named_parameters(
      dict(
          testcase_name='partial_one',
          playlist=Playlist('Playlist One', ['file1.mp3', 'file2.mp3']),
      ),
      dict(
          testcase_name='partial_two',
          playlist=Playlist('Playlist Two', ['file3.mp3', 'file4.mp3']),
      ),
  )
  def test_is_successful_partial(self, playlist: Playlist):
    params = {
        'playlist_name1': 'Playlist One',
        'files1': ['file1.mp3', 'file2.mp3'],
        'noise_files1': [],
        'playlist_name2': 'Playlist Two',
        'files2': ['file3.mp3', 'file4.mp3'],
        'noise_files2': [],
    }
    create_two_playlists_task = vlc.VlcCreateTwoPlaylists(params)
    create_two_playlists_task.initialize_task(self.env_mock)
    self.assertFalse(create_two_playlists_task.is_successful(self.env_mock))
    _set_state_of_db(
        self.test_db_path,
        [playlist],
    )

    self.assertEqual(
        create_two_playlists_task.is_successful(self.env_mock), 0.5
    )
    create_two_playlists_task.tear_down(self.env_mock)


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from unittest import mock
from absl.testing import absltest
from android_world.env import interface
from android_world.env import representation_utils
from android_world.task_evals.single import contacts
from android_world.utils import test_utils


class ContactInfoIsEntered(absltest.TestCase):

  def test_contact_info_is_entered_valid_elements(self):
    ui_elements = [
        representation_utils.UIElement(text='John', hint_text='First name'),
        representation_utils.UIElement(text='Doe', hint_text='Last name'),
        representation_utils.UIElement(text='123-456-7890', hint_text='Phone'),
        representation_utils.UIElement(
            text='Work', content_description='Work Phone'
        ),
    ]

    self.assertTrue(
        contacts._contact_info_is_entered(
            'John',
            'Doe',
            '123-4567890',
            'Work',
            ui_elements,
        )
    )

  def test_contact_info_is_entered_missing_element(self):
    ui_elements = [
        representation_utils.UIElement(text='John', hint_text='First name'),
        representation_utils.UIElement(text='Doe', hint_text='Last name'),
        representation_utils.UIElement(text='1-234-567-890', hint_text='Phone'),
    ]

    self.assertFalse(
        contacts._contact_info_is_entered(
            'John', 'Doe', '1234-5678-90', 'Work', ui_elements
        )
    )

  def test_contact_info_is_entered_invalid_label(self):
    ui_elements = [
        representation_utils.UIElement(text='John', hint_text='First name'),
        representation_utils.UIElement(text='Doe', hint_text='Last name'),
        representation_utils.UIElement(text='1[234]567890', hint_text='Phone'),
        representation_utils.UIElement(
            text='Mobile', content_description='Label Phone'
        ),
    ]

    self.assertFalse(
        contacts._contact_info_is_entered(
            'John', 'Doe', '1234567890', 'Work', ui_elements
        )
    )


class ContactDraftTest(test_utils.AdbEvalTestBase):

  @mock.patch('android_world.env.representation_utils.forest_to_ui_elements')
  def test_contact_draft_is_successful(self, mock_forest_to_ui_elements):
    # Create an instance of ContactDraft.
    first = 'Jane'
    last = 'Smith'
    phone = '1-244-455-4333'
    phone_label = 'Work'
    contact_draft = contacts.ContactsNewContactDraft(
        {
            'first': first,
            'last': last,
            'phone': phone,
            'phone_label': phone_label,
        },
    )

    # Create a list of UIElement objects.
    ui_elements = [
        representation_utils.UIElement(text=first, hint_text='First name'),
        representation_utils.UIElement(text=last, hint_text='Last name'),
        representation_utils.UIElement(text='1244-455-4333', hint_text='Phone'),
        representation_utils.UIElement(
            text='Work', content_description='Work Phone'
        ),
    ]

    env = mock.create_autospec(interface.AsyncEnv)
    mock_forest_to_ui_elements.return_value = ui_elements
    self.assertEqual(test_utils.perform_task(contact_draft, env), 1)


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tasks for Simple SMS Messenger."""

import random
import time
from android_world.env import adb_utils
from android_world.env import interface
from android_world.env import tools
from android_world.task_evals.common_validators import phone_validators
from android_world.task_evals.common_validators import sms_validators
from android_world.task_evals.utils import user_data_generation
from android_world.utils import contacts_utils


class SimpleSmsSend(sms_validators.SimpleSMSSendSms):
  """Task for checking an SMS was sent."""

  template = (
      "Send a text message using Simple SMS Messenger to {number} with message:"
      " {message}"
  )


class SimpleSmsSendAfterCall(sms_validators.SimpleSMSSendSms):
  """Task for checking an SMS was sent after a missed call.

  NOTE: This is currently disabled due to emulator flakiness with phone calls.
  """

  app_names = ("simple sms messenger", "phone")
  template = (
      "Send a text message using Simple SMS Messenger to the number I just"
      " missed a call from with message: {message}"
  )

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    phone_validators.clear_phone_state(env.controller)
    adb_utils.call_emulator(env.controller, self.params["number"])
    time.sleep(5.0)
    adb_utils.end_call_if_active(env.controller)


class SimpleSmsReplyMostRecent(sms_validators.SimpleSMSSendSms):
  """Task for checking that a reply was sent to the most recent SMS."""

  template = (
      "Reply to the most recent text message using Simple SMS Messenger with"
      " message: {message}"
  )

  def _generate_non_goal_message(self):
    message = random.choice(sms_validators.SimpleSMSSendSms.messages)
    while message == self.params["message"]:
      message = random.choice(sms_validators.SimpleSMSSendSms.messages)
    return message

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)

    # Disable notifications so we don't have to wait for them to disappear
    # before running the task.
    adb_utils.disable_headsup_notifications(env.controller)

    for _ in range(random.randint(0, 5)):
      adb_utils.text_emulator(
          env.controller,
          user_data_generation.generate_random_number(),
          self._generate_non_goal_message(),
      )

    # Texts don't necessarily come in the same order as sent here, so pause here
    # to make sure the most recent text comes last.
    time.sleep(1)

    most_recent_message = self._generate_non_goal_message()
    adb_utils.text_emulator(
        env.controller,
        self.params["number"],
        most_recent_message,
    )

    # Need to pause to make sure re-enabling notifications happens after the
    # last text came in
    time.sleep(0.3)

    adb_utils.enable_headsup_notifications(env.controller)

    most_recent = sms_validators.parse_message(
        self._get_received_messages(env.controller)[0]
    )
    if (
        most_recent["address"] != self.params["number"]
        and most_recent["message"] != most_recent_message
    ):
      raise ValueError(
          "Unexpected initial state - most recent message is not what is"
          " expected."
      )


class SimpleSmsReply(sms_validators.SimpleSMSSendSms):
  """Task for checking a reply was sent."""

  template = "Reply to {number} with message: {message} in Simple SMS Messenger"

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    adb_utils.disable_headsup_notifications(env.controller)

    relevant_text_sent = False

    # Add a random number of texts, with the text we care about randomly
    # interspersed.
    for _ in range(random.randint(1, 5)):
      if not relevant_text_sent:
        if random.choice([True, False]):
          adb_utils.text_emulator(
              env.controller,
              self.params["number"],
              random.choice(sms_validators.SimpleSMSSendSms.messages),
          )
          relevant_text_sent = True

      adb_utils.text_emulator(
          env.controller,
          user_data_generation.generate_random_number(),
          random.choice(sms_validators.SimpleSMSSendSms.messages),
      )

    if not relevant_text_sent:
      adb_utils.text_emulator(
          env.controller,
          self.params["number"],
          random.choice(sms_validators.SimpleSMSSendSms.messages),
      )

    # Need to pause to make sure re-enabling notifications happens after the
    # last text came in
    time.sleep(0.5)
    adb_utils.enable_headsup_notifications(env.controller)


class SimpleSmsSendClipboardContent(sms_validators.SimpleSMSSendSms):
  """Task for checking that the clipboard contents were sent as an SMS."""

  template = (
      "Send a message to {number} with the clipboard content in Simple SMS"
      " Messenger"
  )

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    adb_utils.set_clipboard_contents(self.params["message"], env.controller)


class SimpleSmsSendReceivedAddress(sms_validators.SimpleSMSSendSms):
  """Task for checking that a received address is forward to someone else."""

  complexity = 2
  template = (
      "Text the address of the event to {name1} that {name2} just sent me in"
      " Simple SMS Messenger"
  )

  schema = {
      "type": "object",
      "properties": {
          "name1": {"type": "string"},
          "number": {"type": "string"},
          "name2": {"type": "string"},
          "message": {"type": "string"},
      },
      "required": ["name1", "number", "name2", "message"],
  }

  addresses = [
      "123 Main St Girdwood, AK, 99587",
      "6 Elm St, Birmingham, AL, 35217",
      "789 E Oak St, Phoenix AZ 85006",
      "1011 S Maple St, Little Rock, AR, 72204",
      "1415 W Cedar Ave Denver, CO, 80223",
      "968 Spruce St, Hartford, CT, 06103",
      "1819 Birch Ct, Dover, DE, 19901",
      "2021 Poplar St, Atlanta, GA, 30340",
  ]

  @classmethod
  def generate_random_params(cls) -> dict[str, str | int]:
    name1 = user_data_generation.generate_random_name()
    name2 = user_data_generation.generate_random_name(excluding=name1)

    return {
        "name1": name1,
        "number": user_data_generation.generate_random_number(),
        "name2": name2,
        "message": user_data_generation.generate_random_address(),
    }

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    adb_utils.disable_headsup_notifications(env.controller)
    super().initialize_task(env)

    name2_number = user_data_generation.generate_random_number()
    contacts_utils.add_contact(
        self.params["name1"], self.params["number"], env.controller
    )
    time.sleep(5.0)
    contacts_utils.add_contact(
        self.params["name2"], name2_number, env.controller
    )

    # Add text containing address from name2
    adb_utils.text_emulator(
        env.controller,
        name2_number,
        self.params["message"],
    )

    # Need to pause to make sure re-enabling notifications happens after the
    # text came in
    time.sleep(1)
    adb_utils.enable_headsup_notifications(env.controller)

  def tear_down(self, env: interface.AsyncEnv):
    super().tear_down(env)
    adb_utils.delete_contacts(env.controller)


class SimpleSmsResend(sms_validators.SimpleSMSSendSms):
  """Task for checking that a message was resent."""

  template = "Resend the message I just sent to {name} in Simple SMS Messenger"

  schema = {
      "type": "object",
      "properties": {
          "name": {"type": "string"},
          "number": {"type": "string"},
          "message": {"type": "string"},
      },
      "required": ["name", "number", "message"],
  }

  @classmethod
  def generate_random_params(cls) -> dict[str, str | int]:
    return {
        "name": user_data_generation.generate_random_name(),
        "number": user_data_generation.generate_random_number(),
        "message": random.choice(cls.messages),
    }

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    controller = tools.AndroidToolController(env.controller)
    adb_utils.disable_headsup_notifications(env.controller)
    super().initialize_task(env)

    contacts_utils.add_contact(
        self.params["name"], self.params["number"], env.controller
    )
    time.sleep(3.0)
    controller.send_sms(self.params["number"], self.params["message"])

    # Make sure conversation happens before the repeat message
    time.sleep(3.0)

    # Add text asking to repeat
    adb_utils.text_emulator(
        env.controller,
        self.params["number"],
        "Sorry, there was a glitch, what was the last message you sent me?",
    )

    # Need to pause to make sure re-enabling notifications happens after the
    # text came in
    time.sleep(1)
    adb_utils.enable_headsup_notifications(env.controller)
    self.before_messages = self.get_sent_messages(env.controller)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    after_messages = self.get_sent_messages(env.controller)
    if len(after_messages) != len(self.before_messages) + 1:
      return 0.0

    # New messages get added at index 0.
    return (
        1.0  # pylint:disable=g-long-ternary
        if sms_validators.sms_are_equal(
            after_messages[0], self.before_messages[-1]
        )
        else 0.0
    )

  def tear_down(self, env: interface.AsyncEnv):
    super().tear_down(env)
    adb_utils.delete_contacts(env.controller)


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import random
from unittest import mock
from absl.testing import absltest
from android_world.task_evals.single import phone
from android_world.task_evals.utils import user_data_generation
from android_world.utils import test_utils


class MarkorPhoneTest(test_utils.AdbEvalTestBase):

  @mock.patch.object(random, "choice", autospec=True)
  @mock.patch.object(user_data_generation, "generate_apartments", autospec=True)
  def test_generate_random_params(
      self, mock_generate_apartments, mock_random_choice
  ):
    mock_candidates = {"John": ["1234567890"], "Doe": ["0987654321"]}
    mock_generate_apartments.return_value = mock_candidates
    mock_random_choice.side_effect = lambda x: x[0]  # Return first key

    result = phone.MarkorCallApartment.generate_random_params()

    # Verify
    expected_result = {"name": "John", "phone_number": "1234567890"}
    self.assertEqual(result, expected_result)

  def test_markor_phone_successful(self):
    self.mock_get_call_state.return_value = "OFFHOOK"
    self.mock_dialer_with_phone_number.return_value = True
    params = {"name": "apt1", "phone_number": "123"}
    task = phone.MarkorCallApartment(params)
    self.assertTrue(test_utils.perform_task(task, self.mock_env))
    self.mock_create_file.assert_called_once()


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tests for audio_recorder.py."""

import datetime
from unittest import mock

from absl.testing import absltest
from android_world.env import adb_utils
from android_world.env import interface
from android_world.task_evals.single import audio_recorder
from android_world.utils import file_utils
from android_world.utils import test_utils


class AudioRecorderTest(test_utils.AdbEvalTestBase):

  def setUp(self):
    super().setUp()
    self.mock_issue_generic_request = mock.patch.object(
        adb_utils, "issue_generic_request"
    ).start()
    self.mock_env = mock.MagicMock(spec=interface.AsyncEnv)

  def tearDown(self):
    super().tearDown()
    mock.patch.stopall()

  def test_audio_recorder_is_successful(self):
    file1 = file_utils.FileWithMetadata(
        file_name="file_name1",
        full_path="/path/file_name1",
        file_size=1000,
        change_time=datetime.datetime.now(),
    )
    file2 = file_utils.FileWithMetadata(
        file_name="file_name2",
        full_path="/path/file_name2",
        file_size=1000,
        change_time=datetime.datetime.now(),
    )
    self.mock_get_file_list_with_metadata.return_value = [file1, file2]
    params = {}
    task = audio_recorder.AudioRecorderRecordAudio(params)
    task.initialize_task(self.mock_env)

    self.mock_get_file_list_with_metadata.return_value = [
        file1,
        file2,
        file_utils.FileWithMetadata(
            file_name="file_name3",
            full_path="/path/file_name3",
            file_size=1000,
            change_time=datetime.datetime.now(),
        ),
    ]
    result = task.is_successful(self.mock_env)
    self.assertEqual(result, 1)

  def test_audio_recorder_with_file_is_successful(self):
    self.mock_check_file_or_folder_exists.return_value = False
    params = {
        "file_name": "random_file_name",
        "text": "",  # Unused.
    }
    task = audio_recorder.AudioRecorderRecordAudioWithFileName(params)
    task.initialize_task(self.mock_env)

    self.mock_check_file_or_folder_exists.return_value = True
    result = task.is_successful(self.mock_env)
    self.assertEqual(result, 1)


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tasks for general system tasks like interacting with settings."""

import dataclasses
import random
from typing import Any

from absl import logging
from android_world.env import adb_utils
from android_world.env import interface
from android_world.task_evals import task_eval
from android_world.utils import fuzzy_match_lib
import immutabledict


class _SystemBrightnessToggle(task_eval.TaskEval):
  """Task for checking that the screen brightness has been set to {max_or_min}."""

  app_names = ('settings',)
  complexity = 1
  schema = {
      'type': 'object',
      'properties': {'max_or_min': {'type': 'string', 'enum': ['max', 'min']}},
      'required': ['max_or_min'],
  }
  template = 'Turn brightness to the {max_or_min} value.'

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    res = adb_utils.issue_generic_request(
        ['shell', 'settings', 'get', 'system', 'screen_brightness'],
        env.controller,
    )
    brightness_level = int(res.generic.output.decode().strip())

    if self.params['max_or_min'] == 'max':
      return 1.0 if brightness_level == 255 else 0.0
    else:
      return 1.0 if brightness_level == 1 else 0.0

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    return {'max_or_min': 'max' if random.choice([True, False]) else 'min'}


class SystemBrightnessMinVerify(_SystemBrightnessToggle):
  """Task for verifying that the screen brightness is already at minimum.

  Precondition: Screen brightness is at minimum.
  """

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    adb_utils.set_brightness('min', env.controller)

  @classmethod
  def generate_random_params(cls) -> dict[str, str]:
    return {'max_or_min': 'min'}


class SystemBrightnessMaxVerify(_SystemBrightnessToggle):
  """Task for verifying that the screen brightness is already at maximum.

  Precondition: Screen brightness is at maximum.
  """

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    adb_utils.set_brightness('max', env.controller)

  @classmethod
  def generate_random_params(cls) -> dict[str, str]:
    return {'max_or_min': 'max'}


class SystemBrightnessMin(_SystemBrightnessToggle):
  """Task for ensuring that the screen brightness is set to minimum.

  Precondition: Screen brightness is not at minimum.
  """

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    adb_utils.set_brightness('max', env.controller)

  @classmethod
  def generate_random_params(cls) -> dict[str, str]:
    return {'max_or_min': 'min'}


class SystemBrightnessMax(_SystemBrightnessToggle):
  """Task for ensuring that the screen brightness is set to maximum.

  Precondition: Screen brightness is not at maximum.
  """

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    adb_utils.set_brightness('min', env.controller)

  @classmethod
  def generate_random_params(cls) -> dict[str, str]:
    return {'max_or_min': 'max'}


class _SystemWifiToggle(task_eval.TaskEval):
  """Task for checking that WiFi has been turned {on_or_off}."""

  app_names = ('settings',)
  complexity = 1
  schema = {
      'type': 'object',
      'properties': {'on_or_off': {'type': 'string', 'enum': ['on', 'off']}},
      'required': ['on_or_off'],
  }
  template = 'Turn wifi {on_or_off}.'

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    res = adb_utils.issue_generic_request(
        ['shell', 'settings', 'get', 'global', 'wifi_on'], env.controller
    )
    wifi_status = res.generic.output.decode().strip()

    if self.params['on_or_off'] == 'on':
      # WiFi is on when the value is either 1 or 2. If Airplane mode is on, and
      # WiFi is on, it will be "2".
      return 1.0 if wifi_status in ['1', '2'] else 0.0
    else:
      # WiFi is off when the value is 0.
      return 1.0 if wifi_status == '0' else 0.0

  @classmethod
  def generate_random_params(cls) -> dict[str, str]:
    return {'on_or_off': 'on' if random.choice([True, False]) else 'off'}


class SystemWifiTurnOffVerify(_SystemWifiToggle):
  """Task for verifying that WiFi is already turned off.

  Precondition: WiFi is off.
  """

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    adb_utils.toggle_wifi(env.controller, 'off')

  @classmethod
  def generate_random_params(cls) -> dict[str, str]:
    return {'on_or_off': 'off'}


class SystemWifiTurnOnVerify(_SystemWifiToggle):
  """Task for verifying that WiFi is already turned on.

  Precondition: WiFi is on.
  """

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    adb_utils.toggle_wifi(env.controller, 'on')

  @classmethod
  def generate_random_params(cls) -> dict[str, str]:
    return {'on_or_off': 'on'}


class SystemWifiTurnOff(_SystemWifiToggle):
  """Task for ensuring that WiFi is turned off.

  Precondition: WiFi is on.
  """

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    adb_utils.toggle_wifi(env.controller, 'on')

  @classmethod
  def generate_random_params(cls) -> dict[str, str]:
    return {'on_or_off': 'off'}


class SystemWifiTurnOn(_SystemWifiToggle):
  """Task for ensuring that WiFi is turned on.

  Precondition: WiFi is off.
  """

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    adb_utils.toggle_wifi(env.controller, 'off')

  @classmethod
  def generate_random_params(cls) -> dict[str, str]:
    return {'on_or_off': 'on'}


class _SystemBluetoothToggle(task_eval.TaskEval):
  """Task for checking that Bluetooth has been turned {on_or_off}."""

  app_names = ('settings',)
  complexity = 1
  schema = {
      'type': 'object',
      'properties': {'on_or_off': {'type': 'string', 'enum': ['on', 'off']}},
      'required': ['on_or_off'],
  }
  template = 'Turn bluetooth {on_or_off}.'

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    res = adb_utils.issue_generic_request(
        ['shell', 'settings', 'get', 'global', 'bluetooth_on'], env.controller
    )
    bluetooth_status = res.generic.output.decode().strip()
    expected_status = '1' if self.params['on_or_off'] == 'on' else '0'
    return 1.0 if bluetooth_status == expected_status else 0.0

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    return {'on_or_off': 'on' if random.choice([True, False]) else 'off'}


class SystemBluetoothTurnOffVerify(_SystemBluetoothToggle):
  """Task for verifying that Bluetooth is already turned off.

  Precondition: Bluetooth is off.
  """

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    adb_utils.toggle_bluetooth(env.controller, 'off')

  @classmethod
  def generate_random_params(cls) -> dict[str, str]:
    return {'on_or_off': 'off'}


class SystemBluetoothTurnOnVerify(_SystemBluetoothToggle):
  """Task for verifying that Bluetooth is already turned on.

  Precondition: Bluetooth is on.
  """

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    adb_utils.toggle_bluetooth(env.controller, 'on')

  @classmethod
  def generate_random_params(cls) -> dict[str, str]:
    return {'on_or_off': 'on'}


class SystemBluetoothTurnOff(_SystemBluetoothToggle):
  """Task for ensuring that Bluetooth is turned off.

  Precondition: Bluetooth is on.
  """

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    adb_utils.toggle_bluetooth(env.controller, 'on')

  @classmethod
  def generate_random_params(cls) -> dict[str, str]:
    return {'on_or_off': 'off'}


class SystemBluetoothTurnOn(_SystemBluetoothToggle):
  """Task for ensuring that Bluetooth is turned on.

  Precondition: Bluetooth is off.
  """

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    adb_utils.toggle_bluetooth(env.controller, 'off')

  @classmethod
  def generate_random_params(cls) -> dict[str, str]:
    return {'on_or_off': 'on'}


class SystemCopyToClipboard(task_eval.TaskEval):
  """Task for verifying that the correct params are copied to the clipboard."""

  app_names = ()
  complexity = 1
  schema = {
      'type': 'object',
      'properties': {
          'clipboard_content': {'type': 'string'},
      },
      'required': ['clipboard_content'],
  }

  template = 'Copy the following text to the clipboard: {clipboard_content}'

  def __init__(self, params: dict[str, Any]):
    """Initialize the task with given params."""
    super().__init__(params)
    self.clipboard_content = params['clipboard_content']

  def _clear_clipboard(self, env: interface.AsyncEnv) -> None:
    # Use a unique string to set the clipboard contents.
    adb_utils.set_clipboard_contents('~~~RESET~~~', env.controller)

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    self._clear_clipboard(env)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    """Check if the clipboard content matches the expected content."""
    actual_clipboard_content = adb_utils.get_clipboard_contents(env.controller)
    return (
        1.0
        if fuzzy_match_lib.fuzzy_match(
            self.clipboard_content, actual_clipboard_content
        )
        else 0.0
    )

  def tear_down(self, env: interface.AsyncEnv) -> None:
    super().tear_down(env)
    self._clear_clipboard(env)

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    return {
        'clipboard_content': random.choice([
            '1234 Elm St, Springfield, IL',
            'Acme Corp, Suite 200',
            'john.doe@example.com',
            "Jane's Flower Shop",
            'Call me at 555-1234',
            'Order No: A123456',
            'Reservation under: Jane',
            'Discount code: SAVE20',
            'Membership ID: XYZ789',
            'Invoice #98765',
            'Tracking #: 1Z204E2A',
            'Transaction ID: abc123',
            '9876 Pine Ave, Riverside, CA',
            'Global Tech, Floor 3',
            'jane.smith@example.com',
            "Mike's Grocery Store",
            'Text me at 555-6789',
            'Order No: B654321',
            'Reservation under: Mike',
            'Promo code: DEAL30',
            'Membership ID: ABC123',
            'Invoice #54321',
            'Tracking #: 3H488Y2B',
            'Transaction ID: def456',
            '2554 Oak Street, Boston, MA',
            'Innovate Inc, Room 10',
            'alex.jordan@example.net',
            "Sara's Bakery",
            'Reach out at 555-9101',
            'Order No: C987654',
            'Reservation under: Sara',
            'Coupon code: OFF50',
            'Membership ID: LMN456',
            'Invoice #32198',
            'Tracking #: 5K672F4C',
            'Transaction ID: ghi789',
        ])
    }


@dataclasses.dataclass(frozen=True)
class _ComponentName:
  """Android identifier for an application component.

  Identifier for an application component - i.e., an Activity, a Service, a
  BroadcastReceiver, or a Content Provider. Encapsulates two pieces of
  information used to identify the component - the package name of the app it
  exists in, and the class name of the object within that app.
  """

  package_name: str
  class_name: str


def _normalize_class_name(package_name: str, class_name: str) -> str:
  """Normalizes a fully qualified class name to be relative to the package.

  Class names are strings, which can be fully qualified or relative to the
  app's package. This function normalizes a fully qualified class name to be
  relative, to make it easy to test two class names for equality.

      normalized_class_name = _normalize_class_name(
          'com.android.settings',
          'com.android.settings.Settings'
      )
      assert normalized_class_name == '.Settings'

  Args:
    package_name: The package name of the app.
    class_name: The name of the class.

  Returns:
    The class name, normalized to be relative if fully qualified.
  """
  if class_name.startswith(package_name):
    return class_name[len(package_name) :]
  return class_name


def parse_component_name(component_name: str) -> _ComponentName:
  """Parses a ComponentName from a string.

  Args:
    component_name: The string representation of the component name, e.g.
      'com.android.settings/com.android.settings.Settings'.

  Returns:
    The parsed ComponentName.
  Raises:
    ValueError: If called with an invalid string representation of a
      ComponentName.
  """
  parts = component_name.split('/')
  if len(parts) != 2:
    raise ValueError(
        'Badly formed component name: the package and class names must be '
        'separated by a single slash'
    )
  return _ComponentName(
      package_name=parts[0],
      class_name=_normalize_class_name(
          package_name=parts[0], class_name=parts[1]
      ),
  )


_APP_NAME_TO_PACKAGE_NAME = immutabledict.immutabledict({
    'camera': 'com.android.camera2',
    'clock': 'com.google.android.deskclock',
    'contacts': 'com.google.android.contacts',
    'settings': 'com.android.settings',
    'dialer': 'com.google.android.dialer',
})


class OpenAppTaskEval(task_eval.TaskEval):
  """Task eval for opening an app."""

  app_names = tuple(_APP_NAME_TO_PACKAGE_NAME.keys())

  complexity = 1

  schema = {
      'type': 'object',
      'properties': {
          'app_name': {'type': 'string'},
      },
      'required': ['app_name'],
  }

  template = (
      'Open the {app_name} app. Clear any pop-ups that may appear by granting'
      ' all permissions that are required.'
  )

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    app_name = random.choice(list(_APP_NAME_TO_PACKAGE_NAME.keys()))
    return {'app_name': app_name}

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    active_activity, _ = adb_utils.get_current_activity(env.controller)
    expected_package_name = _APP_NAME_TO_PACKAGE_NAME[self.params['app_name']]
    if (
        parse_component_name(active_activity).package_name
        == expected_package_name
    ):
      return 1.0
    else:
      logging.info(
          'Expected %s to be active app but saw %s',
          expected_package_name,
          active_activity,
      )
      return 0.0


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tasks for the clock app."""

import random
from absl import logging
from android_world.env import adb_utils
from android_world.env import interface
from android_world.env import representation_utils
from android_world.task_evals import task_eval


def _is_stopwatch_running(
    ui_elements: list[representation_utils.UIElement],
    current_activity: str,
) -> bool:
  """Checks if current screen is stopwatch running."""
  if "DeskClock" not in current_activity:
    return False
  pause_present = False
  lap_present = False

  for element in ui_elements:
    if element.content_description == "Pause":
      pause_present = True
    elif element.content_description == "Lap":
      lap_present = True
  return pause_present and lap_present


def _is_stopwatch_paused(
    ui_elements: list[representation_utils.UIElement],
    current_activity: str,
) -> bool:
  """Checks if current screen is stopwatch paused."""
  if "DeskClock" not in current_activity:
    return False
  start_present = False
  n_stopwatch = 0

  for element in ui_elements:
    if element.content_description == "Start":
      start_present = True
    elif (
        element.content_description == "Stopwatch"
        or element.text == "Stopwatch"
    ):
      n_stopwatch += 1
  logging.info("Start present: %s", start_present)
  logging.info("Stopwatch: %d", n_stopwatch)
  return start_present and n_stopwatch == 2


def _is_timer_set(
    ui_elements: list[representation_utils.UIElement],
    current_activity: str,
    *,
    hours: int,
    minutes: int,
    seconds: int,
) -> bool:
  """Determines if a timer is set.

  Args:
    ui_elements: A list of UI elements representing the interface components
      within the "DeskClock" activity.
    current_activity: The name of the current activity within the UI.
    hours: The number of hours to check for in the timer.
    minutes: The number of minutes to check for in the timer.
    seconds: The number of seconds to check for in the timer.

  Returns:
    True if the timer is set with the specified hours, minutes, and seconds
      within the "DeskClock" activity; False otherwise.
  """
  if "DeskClock" not in current_activity:
    return False
  text_format = f"{hours:02d}h {minutes:02d}m {seconds:02d}s"
  content_desc_format = f"{hours} hours, {minutes} minutes, {seconds} seconds"

  for element in ui_elements:
    if (
        element.text == text_format
        or element.content_description == content_desc_format
    ):
      return True

  return False


class _ClockEval(task_eval.TaskEval):
  """Base class for clock tasks."""

  app_names = ("clock",)


class ClockTimerEntry(_ClockEval):
  """Task for checking if timer is set (but not started)."""

  complexity = 1
  schema = {
      "type": "object",
      "properties": {
          "hours": {"type": "integer"},
          "minutes": {"type": "integer"},
          "seconds": {"type": "integer"},
      },
      "required": ["hours", "minutes", "seconds"],
  }
  template = (
      "Create a timer with {hours} hours, {minutes} minutes, and {seconds}"
      " seconds. Do not start the timer."
  )

  def is_successful(
      self,
      env: interface.AsyncEnv,
  ) -> float:
    super().is_successful(env)
    ui_elements = env.get_state().ui_elements
    current_activity = adb_utils.get_current_activity(env.controller)[0]
    return (
        1.0
        if _is_timer_set(
            ui_elements=ui_elements,
            current_activity=current_activity,
            hours=self._params["hours"],
            minutes=self._params["minutes"],
            seconds=self._params["seconds"],
        )
        else 0.0
    )

  @classmethod
  def generate_random_params(cls) -> dict[str, int]:
    hours = random.randint(0, 23)
    minutes = random.randint(0, 59)
    seconds = random.randint(0, 59)

    params = {
        "hours": hours,
        "minutes": minutes,
        "seconds": seconds,
    }

    return params


class ClockStopWatchPausedVerify(_ClockEval):
  """Task for checking if stop watch is paused.

  Precondition: The stopwatch is already paused at 00:00:00.

  There is not programmatic way to control the stopwatch. However, the app can
  be forced cleared, effectively resetting and pausing the watch. Hence, there
  is only a "Verify" version of this task.
  """

  complexity = 1
  schema = {
      "type": "object",
      "properties": {},
  }
  template = "Pause the stopwatch."

  def is_successful(
      self,
      env: interface.AsyncEnv,
  ) -> float:
    super().is_successful(env)
    ui_elements = env.get_state().ui_elements
    current_activity = adb_utils.get_current_activity(env.controller)[0]
    return (
        1.0
        if _is_stopwatch_paused(
            ui_elements=ui_elements,
            current_activity=current_activity,
        )
        else 0.0
    )

  @classmethod
  def generate_random_params(cls) -> dict[str, str]:
    return {}


class ClockStopWatchRunning(_ClockEval):
  """Task for checking if stop watch is paused.

  Precondition: The stopwatch is already paused at 00:00:00.

  There is no programmatic way to control the stopwatch. However, the app can be
  forced cleared, effectively resetting and pausing the watch.
  """

  complexity = 1
  schema = {
      "type": "object",
      "properties": {},
  }
  template = "Run the stopwatch."

  def is_successful(
      self,
      env: interface.AsyncEnv,
  ) -> float:
    super().is_successful(env)
    ui_elements = env.get_state().ui_elements
    current_activity = adb_utils.get_current_activity(env.controller)[0]
    return (
        1.0
        if _is_stopwatch_running(
            ui_elements=ui_elements,
            current_activity=current_activity,
        )
        else 0.0
    )

  @classmethod
  def generate_random_params(cls) -> dict[str, str]:
    return {}


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import random
from typing import Any
from xml.etree import ElementTree

from absl.testing import absltest
from android_world.task_evals.single import osmand
from android_world.task_evals.utils import sqlite_schema_utils


class TestOsmAndFavorite(absltest.TestCase):

  def test_empty_favorites_contains_nothing(self):
    favorites = ElementTree.fromstring("""
        <gpx xmlns="http://www.topografix.com/GPX/1/1">
        </gpx>
        """)

    name_is_contained = osmand._favorites_contains(favorites, "Triesen")
    coords_are_contained = osmand._favorites_contains(
        favorites, "47.1069970, 9.5274854"
    )

    self.assertFalse(name_is_contained)
    self.assertFalse(coords_are_contained)

  def test_favorites_contains_name(self):
    favorites = ElementTree.fromstring("""
        <gpx xmlns="http://www.topografix.com/GPX/1/1">
          <wpt lat="47.1069970" lon="9.5274854"><name>Triesen</name></wpt>
        </gpx>
        """)

    name_is_contained = osmand._favorites_contains(favorites, "Triesen")

    self.assertTrue(name_is_contained)

  def test_favorites_contains_coords(self):
    favorites = ElementTree.fromstring("""
        <gpx xmlns="http://www.topografix.com/GPX/1/1">
          <wpt lat="47.1069970" lon="9.5274854"><name>Triesen</name></wpt>
        </gpx>
        """)

    coords_are_contained = osmand._favorites_contains(
        favorites, "47.1069970, 9.5274854"
    )

    self.assertTrue(coords_are_contained)

  def test_random_favorite_location(self):
    # Observed locations given the set PRNG seed value below. The actual sampled
    # random locations may change and break this test but be stochastically
    # equivalent. In those cases, manually check that the actual samples are
    # as expected and copy them here.
    observed_random_location_samples = (
        "Rotenboden, Liechtenstein\n"
        "47.1275785, 9.5387131\n"
        "Oberplanken, Liechtenstein\n"
        "47.1663432, 9.5103085\n"
        "Rotenboden, Liechtenstein\n"
        "Oberplanken, Liechtenstein\n"
        "47.23976, 9.5262837\n"
        "Schaanwald, Liechtenstein\n"
        "Nendeln, Liechtenstein\n"
        "47.1026191, 9.6083057"
    )

    def location_param(params: dict[str, Any]) -> str:
      self.assertSameElements(params.keys(), ("location",))
      return params["location"]

    # Grab the first 10 random parameter sets. By setting the seed the result
    # is made repeatable.
    random.seed(0)
    random_location_samples = "\n".join([
        location_param(osmand.OsmAndFavorite.generate_random_params())
        for _ in range(10)
    ])

    self.assertSequenceEqual(
        random_location_samples, observed_random_location_samples
    )


class TestOsmAndMarker(absltest.TestCase):

  def test_empty_marker_matches_nothing(self):
    marker = sqlite_schema_utils.OsmAndMapMarker()

    name_match = osmand._marker_matches_location(marker, "Triesen")
    coords_match = osmand._marker_matches_location(
        marker, "47.1069970, 9.5274854"
    )

    self.assertFalse(name_match)
    self.assertFalse(coords_match)

  def test_marker_matches_name(self):
    marker = sqlite_schema_utils.OsmAndMapMarker(
        marker_lat=47.1069970, marker_lon=9.5274854
    )

    name_match = osmand._marker_matches_location(
        marker, "Triesen, Liechtenstein"
    )

    self.assertTrue(name_match)

  def test_marker_matches_coords(self):
    marker = sqlite_schema_utils.OsmAndMapMarker(
        marker_lat=47.1069970, marker_lon=9.5274854
    )

    coords_match = osmand._marker_matches_location(
        marker, "47.1069970, 9.5274854"
    )

    self.assertTrue(coords_match)


class TestOsmAndTrack(absltest.TestCase):

  def test_goal_with_too_few_waypoint_params(self):
    single_waypoint_params = {
        "waypoints": ["test waypoint 1"],
    }

    track_eval = osmand.OsmAndTrack(params=single_waypoint_params)

    with self.assertRaises(ValueError):
      _ = track_eval.goal

  def test_goal_with_valid_params(self):
    valid_params = {
        "waypoints": ["test waypoint 1", "test waypoint 2", "test waypoint 3"],
    }

    track_eval = osmand.OsmAndTrack(params=valid_params)

    self.assertEqual(
        track_eval.goal,
        "Save a track with waypoints test waypoint 1, test waypoint 2, test"
        " waypoint 3 in the OsmAnd maps app in the same order as listed.",
    )

  def test_lookup_unknown_target_waypoint(self):
    waypoint_name_not_in_preloaded_map_locations = "Obock"

    self.assertIsNone(
        osmand._lookup_location_coords(
            waypoint_name_not_in_preloaded_map_locations
        )
    )

  def test_lookup_known_waypoint(self):
    known_waypoint, known_waypoint_coords = next(
        iter(osmand._PRELOADED_MAP_LOCATIONS.items())
    )

    self.assertEqual(
        known_waypoint_coords, osmand._lookup_location_coords(known_waypoint)
    )

  def test_lookup_coords_just_returns_coords(self):
    self.assertEqual(
        (-1.234, 56.7), osmand._lookup_location_coords("-1.234, 56.7")
    )

  def test_lookup_target_waypoints_throws_on_unknown(self):
    known_waypoint = next(iter(osmand._PRELOADED_MAP_LOCATIONS))
    coords_waypoint = "-1.234, 56.7"
    waypoint_name_not_in_preloaded_map_locations = "Obock"

    with self.assertRaisesWithLiteralMatch(
        ValueError,
        "Unable to look up coordinates for waypoint location parameter(s)"
        ' "Obock". Only lat/lon coordinate strings or exact names from'
        " _PRELOADED_MAP_LOCATIONS supported.",
    ):
      osmand._lookup_target_waypoints([
          known_waypoint,
          coords_waypoint,
          waypoint_name_not_in_preloaded_map_locations,
      ])

  def test_track_points_parsing(self):
    track_xml = ElementTree.fromstring("""
        <gpx xmlns="http://www.topografix.com/GPX/1/1">
          <trk>
            <trkseg>
              <trkpt lat="47.0687992" lon="9.5061564"/>
            </trkseg>
          </trk>
        </gpx>
        """)

    self.assertSequenceEqual(
        [(47.0687992, 9.5061564)], list(osmand._track_points(track_xml))
    )

  def test_track_doesnt_match_missing_waypoint(self):
    track_points = ((0, 1), (2, 3))
    self.assertFalse(osmand._track_matches(track_points, [(4, 5)]))

  def test_track_matches_one_to_one(self):
    track_points = ((0, 1), (2, 3))
    self.assertTrue(osmand._track_matches(track_points, track_points))

  def test_track_doesnt_match_out_of_order(self):
    track_points = ((0, 1), (2, 3))
    reverse_order_waypoints = ((2, 3), (0, 1))
    self.assertFalse(
        osmand._track_matches(track_points, reverse_order_waypoints)
    )

  def test_track_matches_interleaved_waypoints(self):
    track_points = ((0, 1), (2, 3), (4, 5), (6, 7), (8, 9))
    interleaved_waypoints = ((2, 3), (8, 9))
    self.assertTrue(osmand._track_matches(track_points, interleaved_waypoints))


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tasks for the camera app."""

from typing import Any

from absl import logging
from android_world.env import adb_utils
from android_world.env import device_constants
from android_world.env import interface
from android_world.task_evals import task_eval
from android_world.utils import file_utils


class _Camera(task_eval.TaskEval):
  """Base class for Camera tasks."""

  app_names = ("camera",)

  def _clear_app_data(self, env: interface.AsyncEnv) -> None:
    """Clears the app data."""
    file_utils.clear_directory(device_constants.PHOTOS_DATA, env.controller)
    file_utils.clear_directory(device_constants.VIDEOS_DATA, env.controller)

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    self._clear_app_data(env)

  def tear_down(self, env: interface.AsyncEnv):
    super().tear_down(env)
    self._clear_app_data(env)


class CameraTakeVideo(_Camera):
  """Task for checking that one single video has been taken."""

  complexity = 1
  schema = {
      "type": "object",
      "properties": {},
      "required": [],
  }
  template = "Take one video."

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    contents = adb_utils.issue_generic_request(
        ["shell", "ls", device_constants.VIDEOS_DATA],
        env.controller,
    )
    logging.info("before_videos: %s", contents.generic.output.decode())
    self.before_videos = set(contents.generic.output.decode().split("\n"))
    logging.info("num before_videos: %s", self.before_videos)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    contents = adb_utils.issue_generic_request(
        ["shell", "ls", device_constants.VIDEOS_DATA],
        env.controller,
    )
    logging.info("before_videos: %s", contents.generic.output.decode())
    after_videos = set(contents.generic.output.decode().split("\n"))
    logging.info("num after_videos: %s", after_videos)
    logging.info(
        "number of after_videos - number of before_videos: %s",
        len(after_videos - self.before_videos),
    )

    return 1.0 if len(after_videos - self.before_videos) == 1 else 0.0

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    return {}


class CameraTakePhoto(_Camera):
  """Task for checking that one single photo has been taken."""

  complexity = 1
  schema = {
      "type": "object",
      "properties": {},
      "required": [],
  }
  template = "Take one photo."

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    contents = adb_utils.issue_generic_request(
        ["shell", "ls", device_constants.PHOTOS_DATA], env.controller
    )
    logging.info("before_photos: %s", contents.generic.output.decode())
    self.before_photos = set(contents.generic.output.decode().split("\n"))
    logging.info("num before_photos: %s", self.before_photos)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    contents = adb_utils.issue_generic_request(
        ["shell", "ls", device_constants.PHOTOS_DATA], env.controller
    )
    logging.info("after_photos: %s", contents.generic.output.decode())
    after_photos = set(contents.generic.output.decode().split("\n"))
    logging.info("num after_photos: %s", after_photos)
    logging.info(
        "number of after_photos - number of before_photos: %s",
        len(after_photos - self.before_photos),
    )

    return 1.0 if len(after_photos - self.before_photos) == 1 else 0.0

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    return {}


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from unittest import mock
from absl.testing import absltest
from android_world.env import interface
from android_world.task_evals.single import system
from android_world.utils import app_snapshot
from android_world.utils import fake_adb_responses
from android_world.utils import test_utils


class SystemWifiTurnOnTest(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.mock_restore_snapshot = self.enter_context(
        mock.patch.object(app_snapshot, 'restore_snapshot')
    )

  def test_is_successful_returns_1_if_wifi_enabled(self):
    eval_task = system.SystemWifiTurnOn(params={'on_or_off': 'on'})
    env = mock.create_autospec(interface.AsyncEnv)
    eval_task.initialize_task(env)
    env.controller.execute_adb_call.return_value = (
        fake_adb_responses.create_get_wifi_enabled_response(is_enabled=True)
    )

    self.assertEqual(eval_task.is_successful(env), 1.0)

  def test_is_successful_returns_0_if_wifi_disabled(self):
    eval_task = system.SystemWifiTurnOn(params={'on_or_off': 'on'})
    env = mock.create_autospec(interface.AsyncEnv)
    eval_task.initialize_task(env)
    env.controller.execute_adb_call.return_value = (
        fake_adb_responses.create_get_wifi_enabled_response(is_enabled=False)
    )

    self.assertEqual(eval_task.is_successful(env), 0.0)


class SystemWifiTurnOffTest(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.mock_restore_snapshot = self.enter_context(
        mock.patch.object(app_snapshot, 'restore_snapshot')
    )

  def test_is_successful_returns_1_if_wifi_disabled(self):
    eval_task = system.SystemWifiTurnOn(params={'on_or_off': 'off'})
    env = mock.create_autospec(interface.AsyncEnv)
    eval_task.initialize_task(env)
    env.controller.execute_adb_call.return_value = (
        fake_adb_responses.create_get_wifi_enabled_response(is_enabled=False)
    )

    self.assertEqual(eval_task.is_successful(env), 1.0)

  def test_is_successful_returns_0_if_wifi_enabled(self):
    eval_task = system.SystemWifiTurnOn(params={'on_or_off': 'off'})
    env = mock.create_autospec(interface.AsyncEnv)
    eval_task.initialize_task(env)
    env.controller.execute_adb_call.return_value = (
        fake_adb_responses.create_get_wifi_enabled_response(is_enabled=True)
    )

    self.assertEqual(eval_task.is_successful(env), 0.0)


class TestSystemCopyToClipboard(test_utils.AdbEvalTestBase):

  def test_is_successful(self):
    # Setup
    self.mock_get_clipboard_contents.return_value = (
        '1234 Elm St, Springfield, IL'
    )

    env = mock.MagicMock()
    params = {'clipboard_content': '1234 Elm St, Springfield, IL'}

    # Instantiate task and check success
    task = system.SystemCopyToClipboard(params)
    self.assertEqual(test_utils.perform_task(task, env), 1)
    self.assertEqual(self.mock_set_clipboard_contents.call_count, 2)
    self.assertEqual(self.mock_get_clipboard_contents.call_count, 1)

  def test_is_successful_fuzzy_match(self):
    # Setup
    self.mock_get_clipboard_contents.return_value = (
        '1234 Elm Street, Springfield, IL'
    )

    env = mock.MagicMock()
    params = {'clipboard_content': '1234 Elm St, Springfield, IL'}

    # Instantiate task and check success
    task = system.SystemCopyToClipboard(params)
    self.assertEqual(test_utils.perform_task(task, env), 1)
    self.assertEqual(self.mock_set_clipboard_contents.call_count, 2)
    self.assertEqual(self.mock_get_clipboard_contents.call_count, 1)

  def test_is_not_successful(self):
    # Setup
    self.mock_get_clipboard_contents.return_value = (
        '5678 Oak St, Springfield, IL'
    )

    env = mock.MagicMock()
    params = {'clipboard_content': '1234 Elm St, Springfield, IL'}

    # Instantiate task and check failure
    task = system.SystemCopyToClipboard(params)
    task.initialize_task(env)
    self.assertEqual(task.is_successful(env), 0)
    task.tear_down(env)
    self.assertEqual(self.mock_set_clipboard_contents.call_count, 2)
    self.assertEqual(self.mock_get_clipboard_contents.call_count, 1)

  def test_initialized_called_twice(self):
    # Setup
    self.mock_get_clipboard_contents.return_value = (
        '5678 Oak St, Springfield, IL'
    )

    env = mock.MagicMock()
    params = {'clipboard_content': '1234 Elm St, Springfield, IL'}

    # Instantiate task and check failure
    task = system.SystemCopyToClipboard(params)
    task.initialize_task(env)
    with self.assertRaisesRegex(RuntimeError, 'already called.'):
      task.initialize_task(env)


class SystemTest(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.mock_restore_snapshot = self.enter_context(
        mock.patch.object(app_snapshot, 'restore_snapshot')
    )

  def test_parse_component_name_normalizes_components(self):
    absolute_component_name = system.parse_component_name(
        'com.android.settings/com.android.settings.Settings'
    )
    relative_component_name = system.parse_component_name(
        'com.android.settings/.Settings'
    )
    self.assertEqual(absolute_component_name, relative_component_name)

  def test_parse_component_name_parses_package_name(self):
    component_name = system.parse_component_name(
        'com.android.settings/com.android.settings.Settings'
    )

    self.assertEqual(component_name.package_name, 'com.android.settings')

  def test_parse_component_name_parses_class_name(self):
    component_name = system.parse_component_name(
        'com.android.settings/com.android.settings.Settings'
    )

    self.assertEqual(component_name.class_name, '.Settings')

  def test_generate_random_params(self):
    params = system.OpenAppTaskEval.generate_random_params()

    self.assertIn(params['app_name'], system._APP_NAME_TO_PACKAGE_NAME.keys())

  def test_is_successful_returns_0_for_bad_package(self):
    eval_task = system.OpenAppTaskEval({'app_name': 'settings'})
    env = mock.create_autospec(interface.AsyncEnv)
    eval_task.initialize_task(env)
    env.controller.execute_adb_call.return_value = (
        fake_adb_responses.create_get_activity_response(
            'com.google.gmail/com.google.gmail.Inbox'
        )
    )

    score = eval_task.is_successful(env)

    self.assertEqual(score, 0.0)

  def test_is_successful_returns_1_for_good_package(self):
    eval_task = system.OpenAppTaskEval({'app_name': 'settings'})
    env = mock.create_autospec(interface.AsyncEnv)
    eval_task.initialize_task(env)
    env.controller.execute_adb_call.return_value = (
        fake_adb_responses.create_get_activity_response(
            'com.android.settings/com.android.settings.Settings'
        )
    )

    score = eval_task.is_successful(env)

    self.assertEqual(score, 1.0)


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tasks for Retro Music app."""

import dataclasses
import os
import random
from typing import Any
from android_world.env import adb_utils
from android_world.env import device_constants
from android_world.env import interface
from android_world.task_evals import task_eval
from android_world.task_evals.common_validators import sqlite_validators
from android_world.task_evals.utils import sqlite_schema_utils
from android_world.task_evals.utils import sqlite_utils
from android_world.task_evals.utils import user_data_generation
from android_world.utils import file_utils


_APP_NAME = 'retro music'
_PLAYLIST_DB_PATH = (
    '/data/data/code.name.monkey.retromusic/databases/playlist.db'
)
_PLAYBACK_DB_PATH = (
    '/data/data/code.name.monkey.retromusic/databases/music_playback_state.db'
)


def _get_playlist_info_query() -> str:
  """Gets query for fetching playlists and their associated files."""
  # Note: Since we are using a window function, this requires sqlite 3.25.0.
  return """
    SELECT
        pe.playlist_name AS playlist_name,
        se.title AS media_file_name,
        se.duration AS duration_ms,
        ROW_NUMBER() OVER (
            PARTITION BY pe.playlist_name
            ORDER BY se.song_key
        ) - 1 AS order_in_playlist
    FROM
        PlaylistEntity pe
        JOIN SongEntity se ON pe.playlist_id = se.playlist_creator_id
    ORDER BY
        pe.playlist_name,
        order_in_playlist;
    """


def _get_playlist_data(
    env: interface.AsyncEnv,
) -> list[sqlite_schema_utils.PlaylistInfo]:
  """Executes join query to fetch playlist file info."""
  with env.controller.pull_file(
      _PLAYLIST_DB_PATH, timeout_sec=3
  ) as local_db_directory:
    local_db_path = os.path.join(
        local_db_directory, os.path.split(_PLAYLIST_DB_PATH)[1]
    )
    return sqlite_utils.execute_query(
        _get_playlist_info_query(),
        local_db_path,
        sqlite_schema_utils.PlaylistInfo,
    )


def _get_playing_queue(env: interface.AsyncEnv) -> list[str]:
  """Executes join query to fetch playlist file info."""

  @dataclasses.dataclass(frozen=True)
  class Queue(sqlite_schema_utils.SQLiteRow):
    title: str

  with env.controller.pull_file(
      _PLAYBACK_DB_PATH, timeout_sec=3
  ) as local_db_directory:
    local_db_path = os.path.join(
        local_db_directory, os.path.split(_PLAYBACK_DB_PATH)[1]
    )
    result = sqlite_utils.execute_query(
        'SELECT title from playing_queue;',
        local_db_path,
        Queue,
    )
    return [r.title for r in result]


def _clear_playlist_dbs(env: interface.AsyncEnv) -> None:
  """Clears all DBs related to playlists."""
  sqlite_utils.delete_all_rows_from_table(
      'PlaylistEntity', _PLAYLIST_DB_PATH, env, _APP_NAME
  )
  sqlite_utils.delete_all_rows_from_table(
      'SongEntity', _PLAYLIST_DB_PATH, env, _APP_NAME
  )


def _scan_music_directory(env: interface.AsyncEnv):
  """Scans the music directory to update the media store."""
  action = 'android.intent.action.MEDIA_SCANNER_SCAN_FILE'
  data_uri = 'file:///storage/emulated/0/Music'
  adb_utils.send_android_intent(
      command='broadcast', action=action, env=env.controller, data_uri=data_uri
  )
  adb_utils.close_app('retro music', env.controller)


class RetroCreatePlaylist(task_eval.TaskEval):
  """Task to create a playlist in Retro Music."""

  app_names = ['retro music']
  complexity = 2
  schema = {
      'type': 'object',
      'properties': {
          'playlist_name': {'type': 'string'},
          'files': {
              'type': 'array',
              'items': {'type': 'string'},
          },
      },
      'required': ['playlist_name', 'files'],
  }
  template = ''  # Directly use goal.

  @property
  def goal(self) -> str:
    names = ', '.join(f.split('.')[0] for f in self.params['files'])
    playlist_name = self.params['playlist_name']
    return (
        f'Create a playlist in Retro Music titled "{playlist_name}" with the'
        f' following songs, in order: {names}'
    )

  def initialize_task(self, env: interface.AsyncEnv):
    super().initialize_task(env)
    user_data_generation.clear_internal_storage(env)
    _clear_playlist_dbs(env)

    for file in self.params['files'] + self.params['noise_files']:
      user_data_generation.write_mp3_file_to_device(
          os.path.join(device_constants.MUSIC_DATA, file),
          env,
          title=file.split('.')[0],
          artist=random.choice(user_data_generation.COMMON_GIVEN_NAMES),
          duration_milliseconds=random.randint(3 * 60 * 1000, 5 * 60 * 1000),
      )
    _scan_music_directory(env)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    actual = _get_playlist_data(env)
    return int(
        sqlite_validators.verify_playlist(
            actual,
            self.params['playlist_name'],
            [f.split('.')[0] for f in self.params['files']],
        )
    )

  def tear_down(self, env: interface.AsyncEnv):
    super().tear_down(env)
    user_data_generation.clear_internal_storage(env)
    _clear_playlist_dbs(env)

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    playlist_name = _generate_playlist_name()
    files = [f'{name}.mp3' for name in random.sample(_SONGS, 15)]
    num_files = random.randint(2, 5)
    files, noise_files = files[0:num_files], files[num_files:]
    return {
        'playlist_name': playlist_name,
        'files': files,
        'noise_files': noise_files,
    }


class RetroPlayingQueue(RetroCreatePlaylist):
  """Task to create a playing queue in Retro Music."""

  @property
  def goal(self) -> str:
    names = ', '.join(f.split('.')[0] for f in self.params['files'])
    return (
        f'Add the following songs, in order, {names} to my playing queue in'
        ' Retro music.'
    )

  def is_successful(self, env: interface.AsyncEnv) -> float:
    queue = _get_playing_queue(env)
    expected = [f.split('.')[0] for f in self.params['files']]
    return int(queue == expected)


class RetroSavePlaylist(RetroCreatePlaylist):
  """Task to create a playlist and save it in Retro Music."""

  @property
  def goal(self) -> str:
    names = ', '.join(f.split('.')[0] for f in self.params['files'])
    playlist_name = self.params['playlist_name']
    return (
        f'Create a playlist in Retro Music titled "{playlist_name}" with the'
        f' following songs, in order: {names}. Then export the playlist to the'
        ' Downloads directory on the device.'
    )

  def is_successful(self, env: interface.AsyncEnv) -> float:
    playlist_exists = file_utils.check_file_exists(
        os.path.join(
            device_constants.DOWNLOAD_DATA,
            self.params['playlist_name'] + '.m3u',
        ),
        env.controller,
    )

    return (super().is_successful(env) + int(playlist_exists)) / 2.0


def _generate_list_with_sum(n, m):
  """Generates a list of m integers with sum n."""
  random_numbers = [random.randint(0, n) for _ in range(m - 1)]
  random_numbers.sort()
  random_numbers.insert(0, 0)
  random_numbers.append(n)
  result = [random_numbers[i + 1] - random_numbers[i] for i in range(m)]
  return result


class RetroPlaylistDuration(RetroCreatePlaylist):
  """Task to create a playlist with a specific duration in Retro Music."""

  app_names = ['retro music']
  complexity = 3

  @property
  def goal(self) -> str:
    return (
        'Create a playlist in Retro Music titled'
        f' "{self.params["playlist_name"]}" with a duration between 45 and 50'
        ' minutes using the provided songs.'
    )

  def initialize_task(self, env: interface.AsyncEnv):
    _clear_playlist_dbs(env)

    # Guarantee there is an answer.
    durations = _generate_list_with_sum(
        47.5 * 60 * 1000, len(self.params['files'])
    )
    for file, duration in zip(self.params['files'], durations):
      user_data_generation.write_mp3_file_to_device(
          os.path.join(device_constants.MUSIC_DATA, file),
          env,
          title=file.split('.')[0],
          artist=random.choice(user_data_generation.COMMON_GIVEN_NAMES),
          duration_milliseconds=duration,
      )

    for file in self.params['noise_files']:
      user_data_generation.write_mp3_file_to_device(
          os.path.join(device_constants.MUSIC_DATA, file),
          env,
          title=file.split('.')[0],
          artist=random.choice(user_data_generation.COMMON_GIVEN_NAMES),
          duration_milliseconds=random.randint(3 * 60 * 1000, 5 * 60 * 1000),
      )
    _scan_music_directory(env)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    songs = _get_playlist_data(env)
    total_ms = 0
    for song in songs:
      if song.playlist_name != self.params['playlist_name']:
        return False
      total_ms += song.duration_ms
    return float(45 * 60 * 1000 <= total_ms <= 50 * 60 * 1000)

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    playlist_name = _generate_playlist_name()
    files = [f'{name}.mp3' for name in random.sample(_SONGS, 15)]
    num_files = random.randint(9, 11)
    files, noise_files = files[0:num_files], files[num_files:]
    return {
        'playlist_name': playlist_name,
        'files': files,
        'noise_files': noise_files,
    }


_SONGS = [
    'My Heart is Yours',
    'Endless Summer',
    'Whispering Wind',
    'Lost in the Echo',
    'Chasing Shadows',
    'Night Drive',
    'Echoes of Silence',
    'Bright Lights',
    'Moments',
    'Forever Young',
    'Rising Sun',
    'Silent Dreams',
    'City of Stars',
    'Moonlight Sonata',
    'Through the Storm',
    'Return to Paradise',
    'Voices in the Hall',
    'Under the Sky',
    "Dreamer's Awake",
    'Serenity Now',
    'Falling Feathers',
    'Orbiting Stars',
    'Reflections',
    'Beyond the Horizon',
    'Golden Days',
    'Twilight Calling',
    'Heartbeat Away',
    'Mystic Journey',
    'Hidden Paths',
    'Distant Memories',
    'Path to Zenith',
    'Eternal Flame',
    'Shadows of Time',
    'Whispers of the Past',
    'Waves of Change',
]


def _generate_playlist_name() -> str:
  """Generates a diverse and creative playlist name."""
  themes = [
      'Chill Beats',
      'Morning Vibes',
      'Workout Energy',
      'Study Sessions',
      'Golden Oldies',
      'Indie Gems',
      'Rock Anthems',
      'Electronic Waves',
      'Jazz Classics',
      'Hip Hop Hits',
      'Country Roads',
      'Classical Moods',
      'Pop Essentials',
      'Latin Grooves',
      'Reggae Rhythms',
      'Soulful Sounds',
      'Blues Vibes',
      'Metal Mayhem',
      'Party Mix',
      'Tranquil Tunes',
      'R&B Favorites',
      'Folk Inspirations',
      'Disco Nights',
      'Global Beats',
      'Sleepytime Songs',
      'Acoustic Sessions',
      'Vintage Vinyl',
      'Instrumental Study',
      'Coffeehouse Jazz',
      'Rainy Day Relax',
      'Gym Pump Up',
      'Retro Pop Hits',
      'Indie Rock Roadtrip',
      'Electronic Chillout',
      'Classical Concentration',
      'Jazz Lounge',
      'Hip Hop Bangers',
      'Country Classics',
      'Classical Opera Highlights',
      'Pop Punk Power',
      'Latin Dance Party',
      'Reggae Sunsplash',
      'Soul Classics',
      'Blues Break',
      'Party Starters',
      'Tranquil Ambient',
      'R&B Grooves',
      'Folk Favourites',
      'Disco Fever',
      'World Music Tour',
  ]
  identifier = random.randint(1, 999)

  theme = random.choice(themes)
  return f'{theme} {identifier}'


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tasks for Markor app."""

import dataclasses
import datetime
import os
import random
from typing import Any

from absl import logging
from android_world.env import adb_utils
from android_world.env import device_constants
from android_world.env import interface
from android_world.task_evals import task_eval
from android_world.task_evals.common_validators import file_validators
from android_world.task_evals.single import vlc
from android_world.task_evals.utils import receipt_generator
from android_world.task_evals.utils import user_data_generation
from android_world.utils import datetime_utils
from android_world.utils import file_utils
from android_world.utils import fuzzy_match_lib


@dataclasses.dataclass(frozen=True)
class _Note:
  name: str
  content: str


generate_random_sentence = lambda: random.choice(
    user_data_generation.RANDOM_SENTENCES
)


def _generate_random_note() -> _Note:
  """Generates a random note."""
  extensions = [".md", ".txt"]
  random_file_name = (
      user_data_generation.generate_random_file_name()
      + random.choice(extensions)
  )
  return _Note(random_file_name, generate_random_sentence())


class Markor(task_eval.TaskEval):
  app_names = ("markor",)

  def initialize_task(self, env: interface.AsyncEnv):
    super().initialize_task(env)
    file_utils.clear_directory(device_constants.MARKOR_DATA, env.controller)

  def tear_down(self, env: interface.AsyncEnv) -> None:
    super().tear_down(env)
    file_utils.clear_directory(device_constants.MARKOR_DATA, env.controller)


class MarkorMoveNote(Markor):
  """Task for checking that a file has been moved in Markor."""

  complexity = 2
  schema = file_validators.MoveFile.schema
  template = (
      "In Markor, move the note {file_name} from {source_folder} to"
      " {destination_folder}."
  )

  def __init__(self, params: dict[str, Any]):
    """Initialize the task."""
    super().__init__(params)
    self.move_file_task = file_validators.MoveFile(
        params, device_constants.MARKOR_DATA
    )

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    self.move_file_task.initialize_task(env)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    return self.move_file_task.is_successful(env)

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    subfolders = [
        "BookNotes",
        "CodeSnippets",
        "DailyNotes",
        "FitnessPlans",
        "MeetingMinutes",
        "PersonalJournal",
        "RecipeCollections",
        "StudyGuides",
        "TravelItineraries",
        "WorkProjects",
    ]
    source_folder = random.choice(subfolders)
    destination_folder = random.choice(
        [folder for folder in subfolders if folder != source_folder]
    )
    file_name = _generate_random_note().name
    return {
        "file_name": file_name,
        "source_folder": source_folder,
        "destination_folder": destination_folder,
        "noise_candidates": _NOTE_TITLES,
    }

  def tear_down(self, env: interface.AsyncEnv) -> None:
    super().tear_down(env)
    self.move_file_task.tear_down(env)


class MarkorCreateFolder(Markor):
  """Task for checking that a new folder in Markor has been created with a specific name."""

  complexity = 2
  schema = {
      "type": "object",
      "properties": {
          "folder_name": {"type": "string"},
      },
      "required": ["folder_name"],
  }
  template = "Create a new folder in Markor named {folder_name}."

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    user_data_generation.generate_noise_files(
        "file",
        device_constants.MARKOR_DATA,
        env.controller,
        _NOTE_TITLES,
    )

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    folder_name = self.params["folder_name"]

    exists = file_utils.check_file_or_folder_exists(
        folder_name, device_constants.MARKOR_DATA, env.controller
    )

    if not exists:
      logging.info("%s not found", folder_name)
      return 0.0

    return 1.0

  @classmethod
  def generate_random_params(cls) -> dict[str, str | int]:
    random_folder_name = "folder_" + str(
        datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    )
    return {"folder_name": random_folder_name}


class MarkorEditNote(Markor):
  """Task for editing an existing note in Markor."""

  complexity = 2
  schema = {
      "type": "object",
      "properties": {
          "file_name": {"type": "string"},
          "header": {"type": "string"},
          "footer": {"type": "string"},
          "replace_text": {"type": "string"},
          "edit_type": {
              "type": "string",
              "enum": ["header", "footer", "replace"],
          },
      },
      "required": ["file_name", "edit_type"],
  }

  @property
  def template(self) -> str:
    templates = {
        "header": (
            "Edit {file_name} in Markor. Add to the top of the note {header}"
        ),
        "footer": (
            "Edit {file_name} in Markor. Add to the bottom of the note {footer}"
        ),
        "replace": (
            "Edit {file_name} in Markor. Replace the text with {replace_text}"
        ),
    }

    if "edit_type" not in self.params and "edit_type" not in templates:
      return templates.get(
          self.params.get("edit_type"),
          "Invalid edit_type for {file_name} in Markor.",
      )
    return templates[self.params.get("edit_type")]

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    user_data_generation.generate_noise_files(
        self.params["file_name"],
        device_constants.MARKOR_DATA,
        env.controller,
        _NOTE_TITLES,
    )
    self.original_content = file_utils.create_file(
        self.params["file_name"],
        device_constants.MARKOR_DATA,
        env.controller,
        content=generate_random_sentence(),
    )

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    res = adb_utils.issue_generic_request(
        [
            "shell",
            "cat",
            os.path.join(
                device_constants.MARKOR_DATA, self.params["file_name"]
            ),
        ],
        env.controller,
    )
    file_contents = res.generic.output.decode().strip()
    logging.info("Retrieved file contents: %s", file_contents)

    if self.params["edit_type"] == "header":
      expected_content = self.params["header"] + "\n" + self.original_content
    elif self.params["edit_type"] == "footer":
      expected_content = self.original_content + "\n" + self.params["footer"]
    else:
      expected_content = self.params["replace_text"]

    is_match = fuzzy_match_lib.fuzzy_match(file_contents, expected_content)
    logging.info(
        "Is content match: %s.\nFound: %s\nExpected: %s",
        is_match,
        file_contents,
        expected_content,
    )

    return 1.0 if is_match else 0.0

  @classmethod
  def generate_random_params(cls) -> dict[str, str | int]:
    extensions = [".md", ".txt"]

    random_file_name = (
        "note_"
        + user_data_generation.generate_random_string(5)
        + random.choice(extensions)
    )

    edit_type = random.choice(["header", "footer", "replace"])

    params = {
        "file_name": random_file_name,
        "edit_type": edit_type,
    }

    if edit_type == "header":
      params["header"] = generate_random_sentence()
    elif edit_type == "footer":
      params["footer"] = generate_random_sentence()
    elif edit_type == "replace":
      params["replace_text"] = "\n".join(
          [generate_random_sentence() for _ in range(3)]
      )

    return params


class MarkorDeleteNote(Markor):
  """Task for checking that a note in Markor has been deleted."""

  complexity = 2
  schema = file_validators.DeleteFile.schema
  template = "Delete the note in Markor named {file_name}."

  def __init__(self, params: dict[str, Any]):
    """Initialize the task."""
    super().__init__(params)
    self.delete_file_task = file_validators.DeleteFile(
        params, device_constants.MARKOR_DATA
    )

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    self.delete_file_task.initialize_task(env)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    return self.delete_file_task.is_successful(env)

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    file_name = user_data_generation.generate_random_file_name()
    return {"file_name": file_name, "noise_candidates": _NOTE_TITLES}

  def tear_down(self, env: interface.AsyncEnv) -> None:
    super().tear_down(env)
    self.delete_file_task.tear_down(env)


class MarkorDeleteNewestNote(Markor):
  """Task for deleting the newest note in Markor."""

  complexity = 2
  schema = {}
  template = "Delete the newest note in Markor."

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    # Generate some random notes in Markor.
    for _ in range(random.randint(2, 6)):
      note = _generate_random_note()
      file_utils.create_file(
          note.name,
          device_constants.MARKOR_DATA,
          env.controller,
          content=note.content,
      )
      # Advance system time so the change time for these initial notes can be
      # separated.
      datetime_utils.advance_system_time(
          datetime.timedelta(minutes=random.randint(-500, 500)), env.controller
      )

    file_list = file_utils.get_file_list_with_metadata(
        device_constants.MARKOR_DATA, env.controller
    )
    self.initial_file_list_sorted = sorted(
        file_list, key=lambda f: f.change_time
    )

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    new_file_list = file_utils.get_file_list_with_metadata(
        device_constants.MARKOR_DATA, env.controller
    )
    new_file_list_sorted = sorted(new_file_list, key=lambda f: f.change_time)
    for i in range(len(new_file_list)):
      # Both file lists are ordered by file change time, so by simply checking
      # file names and their change time are the same, we can ensure all other
      # files have not been changed.
      if not (
          new_file_list_sorted[i].file_name
          == self.initial_file_list_sorted[i].file_name
          and new_file_list_sorted[i].change_time
          == self.initial_file_list_sorted[i].change_time
      ):
        return 0.0
    one_fewer_file = (
        len(new_file_list_sorted) == len(self.initial_file_list_sorted) - 1
    )
    return 1.0 if one_fewer_file else 0.0

  @classmethod
  def generate_random_params(cls) -> dict[str, str | int]:
    return {}


class MarkorDeleteAllNotes(Markor):
  """Task for deleting all notes in Markor."""

  # For this task's complexity, the agent may complete this task by deleting the
  # files one-by-one which envolves many steps (more than 10), but there is also
  # an optimal approach by first long pressing one file, then tapping to select
  # all others and deleting them all together.
  complexity = 2
  schema = {}
  template = "Delete all my notes in Markor."

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    user_data_generation.generate_noise_files(
        user_data_generation.generate_random_string(5),
        device_constants.MARKOR_DATA,
        env.controller,
        _NOTE_TITLES,
        random.randint(2, 6),
    )

    file_list = file_utils.get_file_list_with_metadata(
        device_constants.MARKOR_DATA, env.controller
    )

    if not file_list:
      raise RuntimeError("Something went wrong, file was not created.")

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    file_list = file_utils.get_file_list_with_metadata(
        device_constants.MARKOR_DATA, env.controller
    )
    return 0.0 if file_list else 1.0

  @classmethod
  def generate_random_params(cls) -> dict[str, str | int]:
    return {}


class MarkorCreateNote(Markor):
  """Task for checking that a new note in Markor has been created with a specific name and text."""

  app_names = ("markor",)
  complexity = 2
  schema = file_validators.CreateFile.schema
  template = (
      "Create a new note in Markor named {file_name} with the following text:"
      " {text}"
  )

  def __init__(self, params: dict[str, Any]):
    """See base class."""
    super().__init__(params)

    self.create_file_task = file_validators.CreateFile(
        params, device_constants.MARKOR_DATA
    )

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    self.create_file_task.initialize_task(env)  # Delegate

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    return self.create_file_task.is_successful(env)  # Delegate

  @classmethod
  def generate_random_params(cls) -> dict[str, str | int]:
    note = _generate_random_note()
    return {"file_name": note.name, "text": note.content}

  def tear_down(self, env: interface.AsyncEnv) -> None:
    super().tear_down(env)
    self.create_file_task.tear_down(env)


class MarkorCreateNoteFromClipboard(Markor):
  """Task for creating a note using text in clipboard in Markor."""

  complexity = 2
  schema = {
      "type": "object",
      "properties": {
          "file_name": {"type": "string"},
          "file_content": {"type": "string"},
      },
      "required": ["file_name", "file_content"],
  }
  template = (
      "Create a note in Markor named {file_name}. Perform a paste operation in"
      " the note and save the note."
  )

  def __init__(self, params: dict[str, Any]):
    """Initialize the task."""
    super().__init__(params)
    if "file_content" not in params or not params["file_content"]:
      params["file_content"] = user_data_generation.generate_random_string(20)
    self.create_file_task = file_validators.CreateFile(
        {"file_name": params["file_name"], "text": params["file_content"]},
        device_constants.MARKOR_DATA,
    )

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    adb_utils.set_clipboard_contents(
        self.params["file_content"], env.controller
    )
    if (
        adb_utils.get_clipboard_contents(env.controller)
        != self.params["file_content"]
    ):
      raise RuntimeError(
          "Something went wrong, clipboard not set up correctly."
      )
    self.create_file_task.initialize_task(env)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    return self.create_file_task.is_successful(env)

  @classmethod
  def generate_random_params(cls) -> dict[str, str | int]:
    return {
        "file_name": _generate_random_note().name,
        "file_content": user_data_generation.generate_random_string(10),
    }

  def tear_down(self, env: interface.AsyncEnv) -> None:
    super().tear_down(env)
    self.create_file_task.tear_down(env)


class MarkorMergeNotes(Markor):
  """Task for merging three existing notes into a new one."""

  # This task involves more than 20 steps.
  complexity = 3
  schema = {
      "type": "object",
      "properties": {
          "file1_name": {"type": "string"},
          "file2_name": {"type": "string"},
          "file3_name": {"type": "string"},
          "new_file_name": {"type": "string"},
          "file1_content": {"type": "string"},
          "file2_content": {"type": "string"},
          "file3_content": {"type": "string"},
      },
      "required": [
          "file1_name",
          "file2_name",
          "file3_name",
          "new_file_name",
          "file1_content",
          "file2_content",
          "file3_content",
      ],
  }
  template = (
      "Merge the contents of Markor notes {file1_name}, {file2_name} and"
      " {file3_name} (in the same order) into a new Markor note named"
      " {new_file_name} and save it. Add a new line between the content of each"
      " note."
  )

  def __init__(self, params: dict[str, Any]):
    """Initialize the task."""
    super().__init__(params)
    self.create_file_task = file_validators.CreateFile(
        {
            "file_name": params["new_file_name"],
            # file_util.create_file with non-empty content will add a \n to the
            # end of the file.
            "text": (
                "\n\n".join([
                    self.params["file1_content"],
                    self.params["file2_content"],
                    self.params["file3_content"],
                ])
                + "\n"
            ),
        },
        device_constants.MARKOR_DATA,
    )

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    self.create_file_task.initialize_task(env)
    file_utils.create_file(
        self.params["file1_name"],
        device_constants.MARKOR_DATA,
        env.controller,
        content=self.params["file1_content"],
    )
    file_utils.create_file(
        self.params["file2_name"],
        device_constants.MARKOR_DATA,
        env.controller,
        content=self.params["file2_content"],
    )
    file_utils.create_file(
        self.params["file3_name"],
        device_constants.MARKOR_DATA,
        env.controller,
        content=self.params["file3_content"],
    )

  def tear_down(self, env: interface.AsyncEnv) -> None:
    super().tear_down(env)
    file_utils.remove_single_file(
        self.params["file1_name"],
        device_constants.MARKOR_DATA,
        env.controller,
    )
    file_utils.remove_single_file(
        self.params["file2_name"],
        device_constants.MARKOR_DATA,
        env.controller,
    )
    file_utils.remove_single_file(
        self.params["file3_name"],
        device_constants.MARKOR_DATA,
        env.controller,
    )
    self.create_file_task.tear_down(env)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    if not self.create_file_task.is_successful(env):
      return 0.0
    # The CreateFile task is using a fuzzy match in its is_successful function,
    # but here we want to explicitly check if the agent adds a blank line
    # between the notes. The following check only works based on the current way
    # we generate notes with the assumption that each file's content is a string
    # of length less than 20, consisting of letters and digits, ended with a \n.
    merged_file = (
        adb_utils.issue_generic_request(
            [
                "shell",
                "cat",
                os.path.join(
                    device_constants.MARKOR_DATA, self.params["new_file_name"]
                ),
            ],
            env.controller,
        )
        .generic.output.decode()
        .strip()
    )

    # merged_file should look like,
    # file1\n\nfile2\n\nfile3, where the first and third \n are inserted by
    # create_file in file_utils, the second and the forth \n should be inserted
    # by agent.
    content_split = merged_file.split("\n")
    are_notes_merged = (
        len(content_split) == 5
        and (not content_split[1])
        and (not content_split[3])
    )
    return 1.0 if are_notes_merged else 0.0

  @classmethod
  def generate_random_params(cls) -> dict[str, str | int]:
    return {
        "file1_name": _generate_random_note().name,
        "file2_name": _generate_random_note().name,
        "file3_name": _generate_random_note().name,
        "new_file_name": user_data_generation.generate_random_string(8),
        "file1_content": user_data_generation.generate_random_string(20),
        "file2_content": user_data_generation.generate_random_string(20),
        "file3_content": user_data_generation.generate_random_string(20),
    }


class MarkorChangeNoteContent(Markor):
  """Task for changing an existing note's content and renaming it."""

  complexity = 2
  schema = {
      "type": "object",
      "properties": {
          "original_name": {"type": "string"},
          "new_name": {"type": "string"},
          "updated_content": {"type": "string"},
      },
      "required": ["original_name", "new_name", "updated_content"],
  }
  template = (
      'Update the content of {original_name} to "{updated_content}" in Markor'
      " and change its name to {new_name}."
  )

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    file_utils.create_file(
        self.params["original_name"],
        device_constants.MARKOR_DATA,
        env.controller,
        content=user_data_generation.generate_random_string(20),
    )
    user_data_generation.generate_noise_files(
        self.params["original_name"],
        device_constants.MARKOR_DATA,
        env.controller,
        _NOTE_TITLES,
    )
    if not file_utils.check_file_or_folder_exists(
        self.params["original_name"],
        device_constants.MARKOR_DATA,
        env.controller,
    ):
      raise RuntimeError("Something went wrong, file not created correctly.")

  def tear_down(self, env: interface.AsyncEnv) -> None:
    super().tear_down(env)
    file_utils.remove_single_file(
        self.params["original_name"],
        device_constants.MARKOR_DATA,
        env.controller,
    )

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    if file_utils.check_file_or_folder_exists(
        self.params["original_name"],
        device_constants.MARKOR_DATA,
        env.controller,
    ):
      return 0.0
    if not file_utils.check_file_or_folder_exists(
        self.params["new_name"],
        device_constants.MARKOR_DATA,
        env.controller,
    ):
      return 0.0
    content_updated = file_utils.check_file_content(
        os.path.join(device_constants.MARKOR_DATA, self.params["new_name"]),
        self.params["updated_content"],
        env.controller,
    )
    return 1.0 if content_updated else 0.0

  @classmethod
  def generate_random_params(cls) -> dict[str, str | int]:
    original = _generate_random_note().name
    new = _generate_random_note().name
    return {
        "original_name": original,
        "new_name": new,
        "updated_content": user_data_generation.generate_random_string(20),
    }


class MarkorAddNoteHeader(Markor):
  """Task for adding a header to an existing note and renaming it."""

  complexity = 2
  schema = {
      "type": "object",
      "properties": {
          "original_name": {"type": "string"},
          "new_name": {"type": "string"},
          "header": {"type": "string"},
          "original_content": {"type": "string"},
      },
      "required": ["original_name", "new_name", "header", "original_content"],
  }
  template = (
      "Update the Markor note {original_name} by adding the following text,"
      ' along with a new blank line before the existing content: "{header}",'
      " and rename it to {new_name}."
  )

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    file_utils.create_file(
        self.params["original_name"],
        device_constants.MARKOR_DATA,
        env.controller,
        content=self.params["original_content"],
    )
    user_data_generation.generate_noise_files(
        self.params["original_name"],
        device_constants.MARKOR_DATA,
        env.controller,
        _NOTE_TITLES,
    )

    if not file_utils.check_file_or_folder_exists(
        self.params["original_name"],
        device_constants.MARKOR_DATA,
        env.controller,
    ):
      raise RuntimeError("Something went wrong, file not created correctly.")

  def tear_down(self, env: interface.AsyncEnv) -> None:
    super().tear_down(env)
    file_utils.remove_single_file(
        self.params["original_name"],
        device_constants.MARKOR_DATA,
        env.controller,
    )

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    if file_utils.check_file_or_folder_exists(
        self.params["original_name"],
        device_constants.MARKOR_DATA,
        env.controller,
    ):
      return 0.0
    if not file_utils.check_file_or_folder_exists(
        self.params["new_name"],
        device_constants.MARKOR_DATA,
        env.controller,
    ):
      return 0.0
    correct = file_utils.check_file_content(
        os.path.join(device_constants.MARKOR_DATA, self.params["new_name"]),
        self.params["header"] + "\n\n" + self.params["original_content"] + "\n",
        env.controller,
        exact_match=True,
    )
    return 1.0 if correct else 0.0

  @classmethod
  def generate_random_params(cls) -> dict[str, str | int]:
    return {
        "original_name": _generate_random_note().name,
        "original_content": generate_random_sentence(),
        "new_name": _generate_random_note().name,
        "header": user_data_generation.generate_random_string(20),
    }


class MarkorTranscribeReceipt(task_eval.TaskEval):
  """Task for creating a markdown file from a receipt image using Simple Gallery and Markor.

  This task involves viewing a receipt image in Simple Gallery and then
  creating a markdown file in Markor with details of the transactions
  listed in the image. The file should be named 'receipt.md' and include
  transactions with the format "Date, Item, Amount".
  """

  app_names = ("simple gallery pro", "markor")
  complexity = 2
  template = (
      "Create a file in Markor, called receipt.md with the transactions from"
      " the receipt.png. Use Simple Gallery to view the receipt. Please enter"
      ' transactions in csv format including the header "Date, Item, Amount".'
  )

  schema = file_validators.CreateFile.schema

  def __init__(self, params: dict[str, Any]):
    super().__init__(params)
    self.img = params.pop("img")
    self.create_file_task = file_validators.CreateFile(
        params, device_constants.MARKOR_DATA
    )

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    """Initializes the task for creating a receipt markdown file."""
    super().initialize_task(env)
    self.create_file_task.initialize_task(env)
    self.img.save("/tmp/receipt.png")
    file_utils.copy_data_to_device(
        "/tmp/receipt.png",
        device_constants.GALLERY_DATA,
        env.controller,
    )

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    return self.create_file_task.is_successful(env)

  def tear_down(self, env: interface.AsyncEnv):
    super().tear_down(env)
    self.create_file_task.tear_down(env)

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    img, text = receipt_generator.create_receipt(random.randint(1, 5))
    text = "\n".join(text.split("\n")[2:])  # Remove header.
    return {
        "img": img,
        "file_name": "receipt.md",
        "text": text,
    }


class MarkorTranscribeVideo(Markor):
  """Task for transcribing a video using Markor."""

  complexity = 2
  schema = file_validators.CreateFile.schema
  app_names = ("markor", "vlc")

  template = (
      "Transcribe the contents of video {video_name} by watching it in VLC"
      " player (located in Download) and writing the sequence of strings shown"
      " on each frame to the text file {file_name} in Markor as a comma"
      ' separated list. For example, if the first frame shows the text "edna"'
      ' and the second frame shows the text "pineapple", then the text file'
      ' should contain only the following text: "edna, pineapple".'
  )

  def __init__(self, params: dict[str, Any]):
    super().__init__(params)
    self.create_file_task = file_validators.CreateFile(
        params, device_constants.MARKOR_DATA
    )

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    self.create_file_task.initialize_task(env)
    user_data_generation.write_video_file_to_device(
        self.params["video_name"],
        device_constants.DOWNLOAD_DATA,
        env,
        messages=self.params["messages"],
        message_display_time=8,
    )
    for file in self.params["noise_files"]:
      user_data_generation.write_video_file_to_device(
          file,
          device_constants.DOWNLOAD_DATA,
          env,
          messages=[user_data_generation.generate_random_string(10)],
          fps=1,
          message_display_time=random.randint(20, 180),
      )

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    return self.create_file_task.is_successful(env)

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    messages = list(
        random.sample(
            user_data_generation.COMMON_GIVEN_NAMES, random.randint(2, 4)
        )
    )
    video_name = vlc.generate_file_name()
    text_file_name = f"{video_name.split('.')[0]}_transcription.txt"
    return {
        "file_name": text_file_name,
        "text": ",".join(messages),
        # Video specific.
        "messages": messages,
        "video_name": video_name,
        "noise_files": [
            vlc.generate_file_name() for _ in range(random.randint(5, 20))
        ],
    }


_NOTE_TITLES = [
    "grocery_list_weekly.md",
    "meeting_notes_project_team.md",
    "personal_goals_2024.md",
    "reading_list_2024.md",
    "research_paper_summary.md",
    "summer_vacation_plans.md",
    "budget_home_renovation.md",
    "april_workout_routine.md",
    "birthday_gift_ideas_mom.md",
    "recipe_homemade_pizza.md",
    "weekend_todo_list.md",
    "insurance_plan_comparison.md",
    "art_project_sketches.md",
    "python_learning_goals.md",
    "trip_reflections_recent.md",
    "startup_ideas_launch.md",
    "client_meetings_schedule.md",
    "favorite_book_quotes.md",
    "garden_layout_plan.md",
    "upcoming_presentation_outline.md",
]


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tasks for the file manager app."""

import os
import random
from typing import Any

from android_world.env import device_constants
from android_world.env import interface
from android_world.task_evals import task_eval
from android_world.task_evals.common_validators import file_validators
from android_world.task_evals.utils import user_data_generation


class FilesMoveFile(task_eval.TaskEval):
  """Task for checking that a file has been moved."""

  app_names = ("files",)
  complexity = 2
  schema = file_validators.MoveFile.schema
  template = (
      "Move the file {file_name} from {source_folder} within the"
      " sdk_gphone_x86_64 storage area to the {destination_folder} within the"
      " same sdk_gphone_x86_64 storage area in the Android filesystem."
  )

  def __init__(self, params: dict[str, Any]):
    super().__init__(params)
    self.move_file_task = file_validators.MoveFile(
        params, device_constants.EMULATOR_DATA
    )

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    self.move_file_task.initialize_task(env)

  def tear_down(self, env: interface.AsyncEnv) -> None:
    super().tear_down(env)
    self.move_file_task.tear_down(env)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    return self.move_file_task.is_successful(env)

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    source_folder = random.choice(
        list(user_data_generation.EMULATOR_DIRECTORIES.keys())
    )
    destination_folder = random.choice([
        folder
        for folder in user_data_generation.EMULATOR_DIRECTORIES
        if folder != source_folder
    ])
    noise_candidates = user_data_generation.EMULATOR_DIRECTORIES[source_folder]

    destination_candidates = user_data_generation.EMULATOR_DIRECTORIES[
        destination_folder
    ]
    file_name = random.choice(destination_candidates)

    return {
        "file_name": file_name,
        "source_folder": source_folder,
        "destination_folder": destination_folder,
        "noise_candidates": noise_candidates,
    }


class FilesDeleteFile(task_eval.TaskEval):
  """Task for checking that a file has been deleted."""

  app_names = ("files",)
  complexity = 1
  schema = file_validators.DeleteFile.schema
  template = (
      "Delete the file {file_name} from the Android filesystem located in the"
      " {subfolder} folder within the sdk_gphone_x86_64 storage area."
  )

  def __init__(self, params: dict[str, Any]):
    super().__init__(params)
    self.delete_file_task = file_validators.DeleteFile(
        params, device_constants.EMULATOR_DATA
    )

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    self.delete_file_task.initialize_task(env)

  def tear_down(self, env: interface.AsyncEnv) -> None:
    super().tear_down(env)
    self.delete_file_task.tear_down(env)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    return self.delete_file_task.is_successful(env)

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    subfolder = random.choice(
        list(user_data_generation.EMULATOR_DIRECTORIES.keys())
    )
    noise_candidates = user_data_generation.EMULATOR_DIRECTORIES[subfolder]
    _, ext_part = os.path.splitext(noise_candidates[0])
    file_name = user_data_generation.generate_random_file_name() + ext_part
    return {
        "file_name": file_name,
        "subfolder": subfolder,
        "noise_candidates": noise_candidates,
    }


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tasks for Simple Draw Pro app."""

import os
import random
from typing import Any
from android_world.env import device_constants
from android_world.env import interface
from android_world.task_evals import task_eval
from android_world.task_evals.common_validators import file_validators
from android_world.task_evals.utils import user_data_generation
from android_world.utils import file_utils


class SimpleDrawProCreateDrawing(task_eval.TaskEval):
  """Task for checking that a new drawing has been created with a specific name."""

  app_names = ("simple draw pro",)
  complexity = 1
  schema = file_validators.CreateFile.schema
  template = (
      "Create a new drawing in Simple Draw Pro. Name it {file_name}. Save it in"
      " the Pictures folder within the sdk_gphone_x86_64 storage area."
  )

  def __init__(self, params: dict[str, Any]):
    super().__init__(params)
    self.initialized = False
    self.create_file_task = file_validators.CreateFile(
        params, os.path.join(device_constants.EMULATOR_DATA, "Pictures")
    )

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    self.create_file_task.initialize_task(env)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    file_name = self.params["file_name"]
    exists = file_utils.check_file_or_folder_exists(
        file_name, self.create_file_task.data_directory, env.controller
    )
    return 1.0 if exists else 0.0

  @classmethod
  def generate_random_params(cls) -> dict[str, str | int]:
    words = [
        "lorem",
        "ipsum",
        "dolor",
        "sit",
        "amet",
        "consectetur",
        "adipiscing",
        "elit",
    ]
    extensions = [".png", ".svg", ".jpg"]
    random_file_name = (
        "".join(random.choices(words, k=1))
        + "_"
        + user_data_generation.generate_random_file_name()
        + random.choice(extensions)
    )

    return {
        "file_name": random_file_name,
        "text": "",  # Unused.
    }

  def tear_down(self, env: interface.AsyncEnv) -> None:
    super().tear_down(env)
    self.create_file_task.tear_down(env)


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tasks that require interacting with a browser."""

import os
import random
import time
from typing import Any
from android_world.env import adb_utils
from android_world.env import device_constants
from android_world.env import interface
from android_world.task_evals import task_eval
from android_world.task_evals.utils import user_data_generation
from android_world.utils import datetime_utils
from android_world.utils import file_utils


class BrowserTask(task_eval.TaskEval):
  """Base class for browser tasks."""

  app_names = ['chrome']
  complexity = 2
  schema = {
      'type': 'object',
      'properties': {
          'browser_task_seed': {'type': 'number'},
      },
      'required': ['browser_task_seed'],
  }
  template = ''
  HTML = ''  # Implementation overrides.

  preamble = (
      'Open the file task.html in Downloads in the file manager; when prompted'
      ' open it with Chrome.'
  )

  def initialize_device_time(self, env: interface.AsyncEnv) -> None:
    """Initializes the device time."""
    datetime_utils.toggle_auto_settings(
        env.controller, datetime_utils.Toggle.ON
    )
    time.sleep(1.0)

  def initialize_task(self, env: interface.AsyncEnv):
    super().initialize_task(env)
    user_data_generation.clear_device_storage(env)
    chrome_activity = adb_utils.extract_package_name(
        adb_utils.get_adb_activity('chrome')
    )

    adb_utils.clear_app_data(
        chrome_activity,
        env.controller,
    )
    adb_utils.grant_permissions(
        chrome_activity,
        'android.permission.POST_NOTIFICATIONS',
        env.controller,
    )

    html = self.HTML.replace('%%SEED%%', str(self.params['browser_task_seed']))
    with open('/tmp/task.html', 'w') as f:
      f.write(html)
    file_utils.copy_data_to_device(
        '/tmp/task.html',
        os.path.join(device_constants.DOWNLOAD_DATA, 'task.html'),
        env.controller,
    )

  def tear_down(self, env: interface.AsyncEnv):
    super().tear_down(env)
    user_data_generation.clear_device_storage(env)
    adb_utils.clear_app_data(
        adb_utils.extract_package_name(adb_utils.get_adb_activity('chrome')),
        env.controller,
    )
    datetime_utils.toggle_auto_settings(
        env.controller, datetime_utils.Toggle.OFF
    )

  def is_successful(self, env: interface.AsyncEnv) -> float:
    state = env.get_state()
    package_name = adb_utils.extract_package_name(
        adb_utils.get_current_activity(env.controller)[0]
    )
    if package_name != 'com.android.chrome':
      return 0.0

    for element in state.ui_elements:
      if element.text == 'Success!':
        return 1.0
    return 0.0

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    return {'browser_task_seed': random.randint(0, 2**32 - 1)}


class BrowserMaze(BrowserTask):
  """Task to create a maze game."""

  @property
  def goal(self) -> str:
    return (
        self.preamble
        + ' Then navigate the X to the bottom-right cell, by using the'
        ' direction buttons.'
    )

  HTML = """\
<!DOCTYPE html>
<html>
<head>
  <title>Maze Puzzle</title>
  <style>
    .row {
      display: flex;
    }

    .cell {
      width: 110px;
      height: 110px;
      border: 1px solid black;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 56px;
    }

    .wall {
      background-color: black;
    }

    .character {
      color: black;
    }

    .goal {
      background-color: green;
    }

    .controls {
      margin-top: 10px;
    }

    .controls button {
      margin-right: 5px;
      padding: 15px 28px;
      font-size: 30px;
    }
  </style>
</head>
<body>

  <div id="maze"></div>

  <div class="controls">
    <button onclick="moveCharacter('up')">Up</button>
    <button onclick="moveCharacter('down')">Down</button>
    <button onclick="moveCharacter('left')">Left</button>
    <button onclick="moveCharacter('right')">Right</button>
  </div>

  <script>
    const mazeSize = 4;
    let mazeLayout = [];
    let characterPosition = { row: 0, col: 0 };

    class SeededRNG {
    constructor(seed) {
        this.seed = seed;
    }

    random() {
        const a = 1664525;
        const c = 1013904223;
        const m = 2 ** 32;

        this.seed = (a * this.seed + c) % m;
        return this.seed / m;
    }
    }

    rng = new SeededRNG(%%SEED%%)
    function generateMaze() {
      mazeLayout = [];
      for (let row = 0; row < mazeSize; row++) {
        const currentRow = [];
        for (let col = 0; col < mazeSize; col++) {
          currentRow.push('#');
        }
        mazeLayout.push(currentRow);
      }

      // Create a path from start to goal
      const stack = [{ row: 0, col: 0 }];
      const directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];

      while (stack.length > 0) {
        const { row, col } = stack.pop();
        mazeLayout[row][col] = ' ';

        if (row === mazeSize - 1 && col === mazeSize - 1) {
          break;
        }

        // Shuffle the order of directions
        for (let i = directions.length - 1; i > 0; i--) {
          const j = Math.floor(rng.random() * (i + 1));
          [directions[i], directions[j]] = [directions[j], directions[i]];
        }

        for (const [dx, dy] of directions) {
          const newRow = row + dx;
          const newCol = col + dy;
          if (
            newRow >= 0 &&
            newRow < mazeSize &&
            newCol >= 0 &&
            newCol < mazeSize &&
            mazeLayout[newRow][newCol] === '#'
          ) {
            stack.push({ row: newRow, col: newCol });
          }
        }
      }

      mazeLayout[0][0] = ' ';
      mazeLayout[mazeSize - 1][mazeSize - 1] = '$';
      characterPosition = { row: 0, col: 0 };
    }

    function renderMaze() {
      const mazeElement = document.getElementById('maze');
      mazeElement.innerHTML = '';

      for (let row = 0; row < mazeLayout.length; row++) {
        const rowElement = document.createElement('div');
        rowElement.className = 'row';

        for (let col = 0; col < mazeLayout[row].length; col++) {
          const cellElement = document.createElement('div');
          cellElement.className = 'cell';

          if (mazeLayout[row][col] === '#') {
            cellElement.classList.add('wall');
          } else if (row === characterPosition.row && col === characterPosition.col) {
            cellElement.classList.add('character');
            cellElement.innerHTML = 'X';
          } else if (mazeLayout[row][col] === '$') {
            cellElement.classList.add('goal');
          }

          rowElement.appendChild(cellElement);
        }

        mazeElement.appendChild(rowElement);
      }
    }

    function moveCharacter(direction) {
      const newPosition = { ...characterPosition };

      switch (direction) {
        case 'up':
          newPosition.row--;
          break;
        case 'down':
          newPosition.row++;
          break;
        case 'left':
          newPosition.col--;
          break;
        case 'right':
          newPosition.col++;
          break;
      }

      if (isValidMove(newPosition)) {
        characterPosition = newPosition;
        renderMaze();
        checkGoalReached();
      }
    }

    function isValidMove(position) {
      const { row, col } = position;
      if (
        row < 0 ||
        row >= mazeLayout.length ||
        col < 0 ||
        col >= mazeLayout[row].length ||
        mazeLayout[row][col] === '#'
      ) {
        return false;
      }
      return true;
    }

    function checkGoalReached() {
      const { row, col } = characterPosition;
      if (mazeLayout[row][col] === '$') {
        document.body.innerHTML = '<h1>Success!</h1>';
      }
    }

    generateMaze();
    renderMaze();
  </script>
</body>
</html>"""


class BrowserMultiply(BrowserTask):
  """Task for multiplying multiple numbers together."""

  @property
  def goal(self) -> str:
    return (
        self.preamble
        + ' Then click the button 5 times, remember the numbers displayed, and'
        ' enter their product in the form.'
    )

  HTML = """\
<!DOCTYPE html>
<html>
<head>
  <title>Memory Task</title>
  <style>
    .container {
      text-align: center;
      margin-top: 50px;
    }

    .number {
      font-size: 48px;
      margin-bottom: 20px;
    }

    .button {
      padding: 10px 20px;
      font-size: 24px;
      margin-bottom: 20px;
    }

    .form {
      margin-top: 20px;
    }

    .form input {
      padding: 5px;
      font-size: 18px;
    }

    .form button {
      padding: 5px 10px;
      font-size: 18px;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="number" id="number"></div>
    <button class="button" id="button" onclick="handleButtonClick()">Click Me</button>
    <div class="form" id="form" style="display: none;">
      <input type="number" id="answer" placeholder="Enter the product">
      <button onclick="checkAnswer()">Submit</button>
    </div>
    <div id="result"></div>
  </div>

  <script>
    class SeededRNG {
      constructor(seed) {
        this.seed = seed;
      }

      random() {
        const a = 1664525;
        const c = 1013904223;
        const m = 2 ** 32;
        this.seed = (a * this.seed + c) % m;
        return this.seed / m;
      }
    }

    const rng = new SeededRNG(%%SEED%%);
    const numbers = [];
    let clickCount = 0;

    function generateNumber() {
      const number = Math.floor(rng.random() * 10) + 1;
      numbers.push(number);
      document.getElementById('number').textContent = number;
    }

    function handleButtonClick() {
      clickCount++;
      if (clickCount < 5) {
        generateNumber();
      } else {
        document.getElementById('button').style.display = 'none';
        document.getElementById('number').style.display = 'none';
        document.getElementById('form').style.display = 'block';
      }
    }

    function checkAnswer() {
      const answer = parseInt(document.getElementById('answer').value);
      const product = numbers.reduce((acc, num) => acc * num, 1);
      const result = document.getElementById('result');
      if (answer === product) {
        result.innerHTML = '<h2>Success!</h2>';
      } else {
        result.innerHTML = '<h2></h2>';
      }
    }

    generateNumber();
  </script>
</body>
</html>"""


class BrowserDraw(BrowserTask):
  """Task for drawing on a canvas."""

  @property
  def goal(self) -> str:
    return (
        self.preamble
        + ' Then create a drawing using the three colors shown at the top'
        ' and hit submit.'
    )

  HTML = """\
<!DOCTYPE html>
<html>
<head>
  <title>Color Challenge</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    body {
      text-align: center;
      font-size: 14px;
    }
    canvas {
      border: 1px solid black;
      touch-action: none;
    }
    .color-button {
      width: 30px;
      height: 30px;
      margin: 3px;
      border: none;
      cursor: pointer;
    }
    #colorPalette {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      max-width: 300px;
      margin: 0 auto;
    }
    #canvasContainer {
      display: flex;
      justify-content: center;
    }
    #taskColors div {
      width: 30px;
      height: 30px;
      margin: 3px;
      display: inline-block;
    }
    button {
      margin: 5px;
      padding: 5px 10px;
      font-size: 14px;
    }
  </style>
</head>
<body>
  <div id="taskColors"></div>
  <div id="canvasContainer">
    <canvas id="canvas" width="300" height="300"></canvas>
  </div>
  <br>
  <p>Available Colors:</p>
  <div id="colorPalette"></div>
  <br>
  <button id="clearButton">Clear</button>
  <button id="submitButton">Submit</button>
  <p id="result"></p>
  <script>
    class SeededRNG {
      constructor(seed) {
        this.seed = seed;
      }

      random() {
        const a = 1664525;
        const c = 1013904223;
        const m = 2 ** 32;
        this.seed = (a * this.seed + c) % m;
        return this.seed / m;
      }
    }

    const rng = new SeededRNG(%%SEED%%);

    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');
    const taskColorsElement = document.getElementById('taskColors');
    const colorPalette = document.getElementById('colorPalette');
    const clearButton = document.getElementById('clearButton');
    const submitButton = document.getElementById('submitButton');
    const resultElement = document.getElementById('result');

    let taskColors = [];

    const availableColors = [
      '#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff', '#00ffff',
      '#800000', '#008000', '#000080', '#808000', '#800080', '#008080',
      '#ffa500', '#ff1493', '#9932cc', '#20b2aa', '#4b0082', '#00ff7f',
      '#ff6347', '#00ced1', '#9400d3', '#f0e68c', '#ff8c00', '#228b22',
    ];

    function clearCanvas() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
    }

    function generateRandomColors(count) {
      const colors = [];
      const remainingColors = [...availableColors];

      for (let i = 0; i < count; i++) {
        if (remainingColors.length === 0) {
          break;
        }

        const randomIndex = Math.floor(rng.random() * remainingColors.length);
        const selectedColor = remainingColors[randomIndex];
        colors.push(selectedColor);
        remainingColors.splice(randomIndex, 1);
      }

      return colors;
    }

    function displayTaskColors() {
      taskColorsElement.innerHTML = '';
      taskColors.forEach(color => {
        const div = document.createElement('div');
        div.style.backgroundColor = color;
        div.style.width = '50px';
        div.style.height = '50px';
        div.style.display = 'inline-block';
        div.style.margin = '5px';
        taskColorsElement.appendChild(div);
      });
    }

    function createColorPalette() {
      colorPalette.innerHTML = '';
      availableColors.forEach(color => {
        const button = document.createElement('button');
        button.style.backgroundColor = color;
        button.classList.add('color-button');
        button.addEventListener('click', () => {
          ctx.strokeStyle = color;
        });
        colorPalette.appendChild(button);
      });
    }

    function submitTask() {
      submitButton.disabled = true;
      evaluateTask();
      submitButton.disabled = false;
    }

    function evaluateTask() {
      const pixelData = ctx.getImageData(0, 0, canvas.width, canvas.height).data;
      const usedColors = new Set();
      for (let i = 0; i < pixelData.length; i += 4) {
        const r = pixelData[i];
        const g = pixelData[i + 1];
        const b = pixelData[i + 2];
        const color = rgbToHex(r, g, b);
        usedColors.add(color);
      }
      const success = taskColors.every(color => usedColors.has(color));
      showResult(success);
    }

    function rgbToHex(r, g, b) {
      const componentToHex = (c) => {
        const hex = c.toString(16);
        return hex.length === 1 ? '0' + hex : hex;
      };
      return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);
    }

    function showResult(success) {
      if (success) {
        resultElement.textContent = 'Success!';
      } else {
        resultElement.textContent = '';
      }
    }

    function init() {
      taskColors = generateRandomColors(3);
      displayTaskColors();
      createColorPalette();
    }

    canvas.addEventListener('mousedown', startDrawing);
    canvas.addEventListener('mousemove', draw);
    canvas.addEventListener('mouseup', stopDrawing);
    canvas.addEventListener('mouseout', stopDrawing);

    canvas.addEventListener('touchstart', startDrawing);
    canvas.addEventListener('touchmove', draw);
    canvas.addEventListener('touchend', stopDrawing);

    let isDrawing = false;
    let lastX = 0;
    let lastY = 0;

    function startDrawing(e) {
      isDrawing = true;
      const rect = canvas.getBoundingClientRect();
      const scaleX = canvas.width / rect.width;
      const scaleY = canvas.height / rect.height;
      const x = (e.clientX || e.touches[0].clientX) - rect.left;
      const y = (e.clientY || e.touches[0].clientY) - rect.top;
      lastX = x * scaleX;
      lastY = y * scaleY;
    }

    function draw(e) {
      if (!isDrawing) return;
      e.preventDefault();
      const rect = canvas.getBoundingClientRect();
      const scaleX = canvas.width / rect.width;
      const scaleY = canvas.height / rect.height;
      const x = (e.clientX || e.touches[0].clientX) - rect.left;
      const y = (e.clientY || e.touches[0].clientY) - rect.top;
      const currentX = x * scaleX;
      const currentY = y * scaleY;
      ctx.beginPath();
      ctx.moveTo(lastX, lastY);
      ctx.lineTo(currentX, currentY);
      ctx.stroke();
      [lastX, lastY] = [currentX, currentY];
    }
    function stopDrawing() {
      isDrawing = false;
    }

    init();
    clearButton.addEventListener('click', clearCanvas);
    submitButton.addEventListener('click', submitTask);
  </script>
</body>
</html>
"""


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tasks for the Simple Gallery Pro app."""

import os
from typing import Any
from android_world.env import device_constants
from android_world.env import interface
from android_world.task_evals import task_eval
from android_world.task_evals.utils import receipt_generator
from android_world.task_evals.utils import schema
from android_world.task_evals.utils import user_data_generation
from android_world.utils import file_utils


class SaveCopyOfReceiptTaskEval(task_eval.TaskEval):
  """Task using SimpleGalleryPro to save a copy of a receipt."""

  app_names = ("simple gallery pro",)

  complexity = 1

  template = (
      "In Simple Gallery Pro, copy {file_name} in DCIM and save a copy with the"
      " same name in Download"
  )

  schema = schema.no_params()

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    user_data_generation.clear_device_storage(env)
    receipt_image = self.params["receipt_image"]
    temp_storage_location = os.path.join("/tmp/", self.params["file_name"])
    receipt_image.save(temp_storage_location)
    file_utils.copy_data_to_device(
        temp_storage_location,
        device_constants.GALLERY_DATA,
        env.controller,
    )

  def tear_down(self, env: interface.AsyncEnv):
    super().tear_down(env)
    user_data_generation.clear_device_storage(env)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)

    if file_utils.check_file_or_folder_exists(
        target=self.params["file_name"],
        base_path=device_constants.DOWNLOAD_DATA,
        env=env.controller,
    ):
      return 1.0

    return 0.0

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    receipt_image, _ = receipt_generator.create_receipt()
    return {
        "receipt_image": receipt_image,
        "file_name": (
            "receipt_"
            + user_data_generation.generate_random_file_name()
            + ".jpg"
        ),
    }


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import random
from unittest import mock
from absl.testing import absltest
from android_world.task_evals.common_validators import sqlite_validators
from android_world.task_evals.single import expense
from android_world.task_evals.utils import sqlite_schema_utils


class TestingExpenseDeleteMultipleForTest(expense._ExpenseDeleteMultiple):
  n_rows = 2
  n_rows_noise = 3


class ExpenseDeleteDuplicateExpenses2ForTest(expense.ExpenseDeleteDuplicates2):
  n_rows = 1
  n_rows_noise = 4


class ExpenseAddMultipleForTest(expense._ExpenseAddMultiple):
  n_rows = 2
  n_rows_noise = 3


class ExpenseDeleteMultipleTest(absltest.TestCase):

  @mock.patch.object(expense, "_generate_expense")
  def test_generate_params(self, mock_get_random_row):
    mock_get_random_row.side_effect = [
        # ROW_OBJECTS
        sqlite_schema_utils.Expense("expense_1", amount=10),
        sqlite_schema_utils.Expense("expense_1", amount=60),
        sqlite_schema_utils.Expense("expense_2", amount=40),
        # ROW_OBJECTS_NOISE
        sqlite_schema_utils.Expense("expense_1", amount=80),
        sqlite_schema_utils.Expense("expense_3", amount=20),
        sqlite_schema_utils.Expense("expense_4", amount=40),
        sqlite_schema_utils.Expense("expense_5", amount=40),
    ]

    self.params = TestingExpenseDeleteMultipleForTest.generate_random_params()

    self.assertEqual(
        self.params[sqlite_validators.ROW_OBJECTS],
        [
            sqlite_schema_utils.Expense("expense_1", amount=10),
            sqlite_schema_utils.Expense("expense_2", amount=40),
        ],
    )
    self.assertEqual(
        self.params[sqlite_validators.NOISE_ROW_OBJECTS],
        [
            sqlite_schema_utils.Expense("expense_3", amount=20),
            sqlite_schema_utils.Expense("expense_4", amount=40),
            sqlite_schema_utils.Expense("expense_5", amount=40),
        ],
    )


class ExpenseDeleteDuplicateExpenses2Test(absltest.TestCase):

  @mock.patch.object(expense, "_generate_expense")
  @mock.patch.object(expense, "_get_random_timestamp")
  @mock.patch.object(random, "sample")
  def test_generate_params(
      self, mock_sample, mock_get_random_timestamp, mock_get_random_row
  ):
    mock_get_random_row.side_effect = [
        sqlite_schema_utils.Expense("expense_1", amount=10),
        sqlite_schema_utils.Expense("expense_target", amount=40),
    ]
    mock_get_random_timestamp.side_effect = [
        0,
        0,
        1,
        1,
        2,
        2,
    ]
    mock_sample.return_value = [52, 100, 101]

    self.params = (
        ExpenseDeleteDuplicateExpenses2ForTest.generate_random_params()
    )

    self.assertEqual(
        self.params[sqlite_validators.ROW_OBJECTS],
        [
            sqlite_schema_utils.Expense("expense_target", amount=40),
            sqlite_schema_utils.Expense("expense_target", amount=40),
        ],
    )
    self.assertEqual(
        self.params[sqlite_validators.NOISE_ROW_OBJECTS],
        [
            sqlite_schema_utils.Expense("expense_1", amount=10),
            sqlite_schema_utils.Expense(
                "expense_target", amount=92, created_date=0, modified_date=0
            ),
            sqlite_schema_utils.Expense(
                "expense_target",
                amount=140,
                created_date=1000,
                modified_date=1000,
            ),
            sqlite_schema_utils.Expense(
                "expense_target",
                amount=141,
                created_date=2000,
                modified_date=2000,
            ),
        ],
    )


class ExpenseAddMultipleTest(absltest.TestCase):

  @mock.patch.object(expense, "_generate_expense")
  def test_generate_params(self, mock_get_random_row):
    mock_get_random_row.side_effect = [
        # ROW_OBJECTS
        sqlite_schema_utils.Expense("expense_1", amount=10),
        sqlite_schema_utils.Expense("expense_1", amount=10),
        sqlite_schema_utils.Expense("expense_2", amount=40),
        # ROW_OBJECTS_NOISE
        sqlite_schema_utils.Expense("expense_1", amount=10),
        sqlite_schema_utils.Expense("expense_3", amount=20),
        sqlite_schema_utils.Expense("expense_4", amount=40),
        sqlite_schema_utils.Expense("expense_5", amount=40),
    ]

    self.params = ExpenseAddMultipleForTest.generate_random_params()

    self.assertEqual(
        self.params[sqlite_validators.ROW_OBJECTS],
        [
            sqlite_schema_utils.Expense("expense_1", amount=10),
            sqlite_schema_utils.Expense("expense_2", amount=40),
        ],
    )
    self.assertEqual(
        self.params[sqlite_validators.NOISE_ROW_OBJECTS],
        [
            sqlite_schema_utils.Expense("expense_3", amount=20),
            sqlite_schema_utils.Expense("expense_4", amount=40),
            sqlite_schema_utils.Expense("expense_5", amount=40),
        ],
    )


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import random

from absl.testing import absltest
from android_world.task_evals.single import retro_music


class TestGenerateListWithSum(absltest.TestCase):

  def test_generate_list_with_sum(self):
    trials = 10_000

    for _ in range(trials):
      n = random.randint(1, 19_000)
      m = random.randint(1, 10)

      result = retro_music._generate_list_with_sum(n, m)

      self.assertLen(result, m)
      self.assertEqual(sum(result), n)


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from absl.testing import absltest
from android_world.env import representation_utils
from android_world.task_evals.single import clock


class TestIsTimerSet(absltest.TestCase):

  def test_valid_elements_and_activity(self):
    valid_elements = [
        representation_utils.UIElement(
            text='01h 15m 30s', content_description=None
        ),
        representation_utils.UIElement(
            text=None, content_description='1 hour, 15 minutes, 30 seconds'
        ),
    ]
    self.assertTrue(
        clock._is_timer_set(
            valid_elements, 'DeskClock', hours=1, minutes=15, seconds=30
        ),
        'Expected True for valid elements and valid activity',
    )

  def test_invalid_elements(self):
    invalid_elements = [
        representation_utils.UIElement(
            text='00h 00m 00s', content_description=None
        ),
        representation_utils.UIElement(
            text=None, content_description='0 hours, 0 minutes, 0 seconds'
        ),
    ]
    self.assertFalse(
        clock._is_timer_set(
            invalid_elements, 'DeskClock', hours=1, minutes=15, seconds=30
        ),
        'Expected False for invalid elements',
    )

  def test_invalid_activity(self):
    valid_elements = [
        representation_utils.UIElement(
            text='01h 15m 30s', content_description=None
        ),
        representation_utils.UIElement(
            text=None, content_description='1 hours, 15 minutes, 30 seconds'
        ),
    ]
    self.assertFalse(
        clock._is_timer_set(
            valid_elements, 'SomeOtherActivity', hours=1, minutes=15, seconds=30
        ),
        'Expected False for invalid activity',
    )

  def test_valid_content_description(self):
    elements = [
        representation_utils.UIElement(
            text=None, content_description='1 hours, 15 minutes, 30 seconds'
        ),
    ]
    self.assertTrue(
        clock._is_timer_set(
            elements, 'DeskClock', hours=1, minutes=15, seconds=30
        ),
        'Expected True for valid content description',
    )

  def test_valid_text(self):
    elements = [
        representation_utils.UIElement(
            text='01h 15m 30s', content_description=None
        ),
    ]
    self.assertTrue(
        clock._is_timer_set(
            elements, 'DeskClock', hours=1, minutes=15, seconds=30
        ),
        'Expected True for valid text',
    )


class TestIsStopwatchPaused(absltest.TestCase):

  def test_valid_elements(self):
    valid_elements = [
        representation_utils.UIElement(content_description='Start'),
        representation_utils.UIElement(
            text=None, content_description='Stopwatch'
        ),
        representation_utils.UIElement(text='Stopwatch'),
    ]
    self.assertTrue(
        clock._is_stopwatch_paused(valid_elements, 'DeskClock'),
        'Expected True for valid elements and valid activity',
    )

  def test_invalid_elements(self):
    invalid_elements = [
        representation_utils.UIElement(
            text=None, content_description='Stopwatch'
        ),
        representation_utils.UIElement(text=None, content_description='Lap'),
    ]
    self.assertFalse(
        clock._is_stopwatch_paused(invalid_elements, 'DeskClock'),
        'Expected False for invalid elements',
    )

  def test_invalid_activity(self):
    valid_elements = [
        representation_utils.UIElement(content_description='Start'),
        representation_utils.UIElement(
            text=None, content_description='Stopwatch'
        ),
        representation_utils.UIElement(text='Stopwatch'),
    ]
    self.assertFalse(
        clock._is_stopwatch_paused(valid_elements, 'SomeOtherActivity'),
        'Expected False for invalid activity',
    )


class TestIsStopwatchRunning(absltest.TestCase):

  def test_valid_elements(self):
    valid_elements = [
        representation_utils.UIElement(text=None, content_description='Pause'),
        representation_utils.UIElement(text=None, content_description='Lap'),
    ]
    self.assertTrue(
        clock._is_stopwatch_running(valid_elements, 'DeskClock'),
        'Expected True for valid elements and valid activity',
    )

  def test_invalid_elements(self):
    invalid_elements = [
        representation_utils.UIElement(text=None, content_description='Reset'),
        representation_utils.UIElement(text=None, content_description='Start'),
    ]
    self.assertFalse(
        clock._is_stopwatch_running(invalid_elements, 'DeskClock'),
        'Expected False for invalid elements',
    )

  def test_invalid_activity(self):
    valid_elements = [
        representation_utils.UIElement(text=None, content_description='Pause'),
        representation_utils.UIElement(text=None, content_description='Lap'),
    ]
    self.assertFalse(
        clock._is_stopwatch_running(valid_elements, 'SomeOtherActivity'),
        'Expected False for invalid activity',
    )


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Task for contacts apps."""

import random
import re
from absl import logging
from android_world.env import interface
from android_world.env import representation_utils
from android_world.task_evals import task_eval
from android_world.task_evals.common_validators import contacts_validators
from android_world.utils import fuzzy_match_lib


class ContactsAddContact(contacts_validators.AddContact):
  """Task for adding a new contact."""

  app_names = ("contacts",)
  template = "Create a new contact for {name}. Their number is {number}."


def _contact_info_is_entered(
    first: str,
    last: str,
    phone: str,
    phone_label: str,
    ui_elements: list[representation_utils.UIElement],
) -> bool:
  """Checks if UI elements contain requested contact info.

  Specifically, it checks if current screen is the new contact screen and if the
  screen shows the function arguments filled out for the contacts.

  Args:
    first: First name.
    last: Last name.
    phone: Phone number.
    phone_label: Label for phone number.
    ui_elements: UI elements on screen.

  Returns:
    True if contact form is filled out.
  """
  first_name_element = None
  last_name_element = None
  phone_element = None
  phone_label_element = None

  # Mobile can appear twice on the screen, making this is a difficult edge case.
  # Do not use this input.
  assert phone_label != "Mobile"

  for element in ui_elements:
    if (
        element.text
        and fuzzy_match_lib.fuzzy_match(element.text, first)
        and element.hint_text == "First name"
    ):
      first_name_element = element
    elif (
        element.text
        and fuzzy_match_lib.fuzzy_match(element.text, last)
        and element.hint_text == "Last name"
    ):
      last_name_element = element
    elif element.text and (
        re.sub(r"\D", "", element.text) == re.sub(r"\D", "", phone)
        and element.hint_text == "Phone"
    ):
      phone_element = element
    elif (
        element.text == phone_label
        and element.content_description == phone_label + " Phone"
    ):
      phone_label_element = element

  # Content description may not be set properly, so we try to find the phone
  # label element by its text and its position if it is not found above
  if phone_element and phone_label_element is None:
    phone_label_element = _find_phone_label_element(
        phone_element, phone_label, ui_elements
    )
  if (
      first_name_element is None
      or last_name_element is None
      or phone_element is None
      or phone_label_element is None
  ):
    if first_name_element is None:
      logging.info("Missing 'first' UI element")
    if last_name_element is None:
      logging.info("Missing 'last' UI element")
    if phone_element is None:
      logging.info("Missing 'phone' UI element")
    if phone_label_element is None:
      logging.info("Missing 'phone_label' UI element")
    return False

  return True


def _find_phone_label_element(
    phone_element: representation_utils.UIElement,
    phone_label: str,
    ui_elements: list[representation_utils.UIElement],
) -> None | representation_utils.UIElement:
  for element in ui_elements:
    if element.text == phone_label and _vertically_adjacent(
        phone_element, element
    ):
      return element
  return None


def _vertically_adjacent(
    element1: representation_utils.UIElement,
    element2: representation_utils.UIElement,
) -> bool:
  if not element1.bbox_pixels or not element2.bbox_pixels:
    return False
  return (
      element1.bbox_pixels.y_max
      <= element2.bbox_pixels.y_min
      <= element1.bbox_pixels.y_max + element1.bbox_pixels.height
  )


class ContactsNewContactDraft(task_eval.TaskEval):
  """Task for entering contact info, but *not* hitting save."""

  app_names = ("contacts",)
  complexity = 2
  schema = {
      "type": "object",
      "properties": {
          "first": {"type": "string"},
          "last": {"type": "string"},
          "phone": {"type": "string"},
          "phone_label": {"type": "string"},
      },
      "required": ["first", "last", "phone", "phone_label"],
  }
  template = (
      "Go to the new contact screen and enter the following details: First"
      " Name: {first}, Last Name: {last}, Phone: {phone}, Phone Label:"
      " {phone_label}. Do NOT hit save."
  )

  @classmethod
  def generate_random_params(cls) -> dict[str, str]:
    first_names = [
        "Alice",
        "Bob",
        "Charlie",
        "David",
        "Eva",
        "Frank",
        "Grace",
        "Hannah",
        "Ivan",
        "Jack",
    ]
    last_names = [
        "Johnson",
        "Smith",
        "Brown",
        "Taylor",
        "Adams",
        "Wilson",
        "Lee",
        "White",
        "Harris",
        "Clark",
    ]
    phone_labels = ["Home", "Work"]

    first = random.choice(first_names)
    last = random.choice(last_names)
    phone = (
        f"{random.randint(100, 999)}-{random.randint(100, 999)}-{random.randint(1000, 9999)}"
    )
    phone_label = random.choice(phone_labels)

    params = {
        "first": first,
        "last": last,
        "phone": phone,
        "phone_label": phone_label,
    }

    return params

  def is_successful(
      self,
      env: interface.AsyncEnv,
  ) -> float:
    super().is_successful(env)
    ui_elements = representation_utils.forest_to_ui_elements(
        env.get_state().forest,
        exclude_invisible_elements=False,
    )
    return (
        1.0
        if _contact_info_is_entered(
            ui_elements=ui_elements,
            first=self.params["first"],
            last=self.params["last"],
            phone=self.params["phone"],
            phone_label=self.params["phone_label"],
        )
        else 0.0
    )


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tasks for recipes app."""

import dataclasses
import random
from typing import Any
from android_world.env import device_constants
from android_world.env import interface
from android_world.task_evals.common_validators import sqlite_validators
from android_world.task_evals.utils import sqlite_schema_utils
from android_world.task_evals.utils import user_data_generation
from android_world.utils import file_utils


_DB_PATH = '/data/data/com.flauschcode.broccoli/databases/broccoli'
_TABLE_NAME = 'recipes'
_APP_NAME = 'broccoli app'
_DB_KEY = 'recipeId'

# How to represent recipes in text form (csv or block of text) for generated
# files.
_TEXT_REPRESENTATION_TYPE = 'text_representation_type'


class _RecipeApp(sqlite_validators.SQLiteApp):
  # From TaskEval.
  schema = {}
  app_names = (_APP_NAME,)
  template = ''  # Unused, since we directly build goal in implementations.

  # From sqlite_base.SQLiteApp
  app_name_with_db = _APP_NAME
  db_key = _DB_KEY
  db_path = _DB_PATH
  table_name = _TABLE_NAME
  row_type = sqlite_schema_utils.Recipe


class _RecipeDeleteMultipleRecipes(
    sqlite_validators.DeleteMultipleRows, _RecipeApp
):
  """Task to delete multiple recipes in Broccoli Recipe App."""

  complexity = 2
  n_rows = 3
  n_rows_noise = 0

  @property
  def goal(self) -> str:
    targets = self.params[sqlite_validators.ROW_OBJECTS]
    titles = [r.title for r in targets]
    titles = ', '.join(titles)
    return f'Delete the following recipes from Broccoli app: {titles}.'

  def validate_deletion_integrity(
      self,
      before: list[sqlite_schema_utils.Recipe],
      after: list[sqlite_schema_utils.Recipe],
  ) -> bool:
    """Validates the integrity of the recipe deletion."""
    return sqlite_validators.validate_rows_removal_integrity(
        before, after, [r.recipeId for r in self.rows_to_delete], self.db_key
    )

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    """Generate random parameters for a remove recipe task."""

    recipes = []
    while len(recipes) < cls.n_rows + cls.n_rows_noise:
      candidate = _generate_random_recipe()
      if not any([candidate.title == r.title for r in recipes]):
        recipes.append(candidate)

    if cls.n_rows_noise > 0:
      noise_rows = recipes[: cls.n_rows_noise]
      target_rows = recipes[cls.n_rows_noise :]
      return {
          sqlite_validators.ROW_OBJECTS: target_rows,
          sqlite_validators.NOISE_ROW_OBJECTS: noise_rows,
      }
    else:
      return {
          sqlite_validators.ROW_OBJECTS: recipes,
      }


class RecipeDeleteSingleRecipe(_RecipeDeleteMultipleRecipes):
  """Delete single recipe in Broccoli Recipe App without noise."""

  complexity = 1
  n_rows = 1
  n_rows_noise = 0


class RecipeDeleteSingleWithRecipeWithNoise(_RecipeDeleteMultipleRecipes):
  """Delete single recipe in Broccoli Recipe App with noise."""

  complexity = 3
  n_rows = 1
  n_rows_noise = 29


class RecipeDeleteMultipleRecipes(_RecipeDeleteMultipleRecipes):
  """Delete multiple recipes in Broccoli Recipe App."""

  complexity = 2
  n_rows = 3
  n_rows_noise = 0


class RecipeDeleteMultipleRecipesWithNoise(_RecipeDeleteMultipleRecipes):
  """Delete multiple recipes in Broccoli Recipe App with noise."""

  complexity = 3
  n_rows = 3
  n_rows_noise = 29


class RecipeDeleteMultipleRecipesWithConstraint(_RecipeDeleteMultipleRecipes):
  """Delete multiple recipes in Broccoli Recipe App based on ingredient."""

  complexity = 3
  n_rows = 3
  n_rows_noise = 29

  @property
  def goal(self) -> str:
    ingredient = self.params['ingredient']
    return (
        f'Delete the recipes from Broccoli app that use {ingredient} in the'
        ' directions.'
    )

  def _validate_initial_state(
      self, before: list[sqlite_schema_utils.RowType]
  ) -> None:
    del before

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    """Generate random parameters for a remove recipe task."""
    ingredient = random.choice(_COMMON_INGREDIENTS)
    noise = sqlite_schema_utils.get_random_items(
        cls.n_rows_noise,
        _generate_random_recipe,
        replacement=False,
        filter_fn=lambda r: ingredient not in r.directions.lower(),
    )
    targets = []
    n_rows = cls.n_rows
    while n_rows > 0:
      try:
        targets = sqlite_schema_utils.get_random_items(
            n_rows,
            _generate_random_recipe,
            replacement=False,
            filter_fn=lambda r: ingredient in r.directions.lower(),
        )
        break
      except ValueError:
        n_rows -= 1
    return {
        sqlite_validators.ROW_OBJECTS: targets,
        sqlite_validators.NOISE_ROW_OBJECTS: noise,
        'ingredient': ingredient,
    }


class RecipeDeleteDuplicateRecipes(
    sqlite_validators.DeleteDuplicateRows, _RecipeApp
):
  """Deduplicate recipes from Broccoli Recipe App."""

  complexity = 1
  n_rows = 1
  n_rows_noise = 5

  @property
  def goal(self) -> str:
    return (
        'Delete all but one of any recipes in the Broccoli app that are exact'
        ' duplicates, ensuring at least one instance of each unique recipe'
        ' remains'
    )

  def validate_deletion_integrity(
      self,
      before: list[sqlite_schema_utils.Recipe],
      after: list[sqlite_schema_utils.Recipe],
  ) -> bool:
    """Validates the integrity of the recipe deletion."""
    target1, target2 = self.rows_to_delete
    return sqlite_validators.validate_rows_removal_integrity(
        before, after, [target1.recipeId], self.db_key
    ) or sqlite_validators.validate_rows_removal_integrity(
        before, after, [target2.recipeId], self.db_key
    )

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    """Generate random parameters for a remove recipe task."""

    rows = sqlite_schema_utils.get_random_items(
        cls.n_rows_noise + cls.n_rows,
        _generate_random_recipe,
        replacement=False,
    )
    target = rows.pop()
    return {
        sqlite_validators.ROW_OBJECTS: [target, target],
        sqlite_validators.NOISE_ROW_OBJECTS: rows,
    }


class RecipeDeleteDuplicateRecipes2(RecipeDeleteDuplicateRecipes):
  """Medium hard deduplication task, with more noise events."""

  complexity = 3
  n_rows = 1
  n_rows_noise = 10

  @property
  def goal(self) -> str:
    return (
        'Delete all but one of any recipes in the Broccoli app that are exact'
        ' duplicates, ensuring at least one instance of each unique recipe'
        ' remains'
    )

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    """Generate random parameters for a remove recipe task."""
    noise = sqlite_schema_utils.get_random_items(
        7,
        _generate_random_recipe,
        replacement=False,
    )

    target = noise.pop()

    # Add variations of target recipe, with different properties.
    while len(noise) < cls.n_rows_noise:
      value = sqlite_schema_utils.get_random_items(
          1,
          _generate_random_recipe,
          replacement=True,
          filter_fn=lambda r: r.title == target.title,
      )[0]
      if value != target:
        noise.append(value)

    return {
        sqlite_validators.ROW_OBJECTS: [target, target],
        sqlite_validators.NOISE_ROW_OBJECTS: noise,
    }


class RecipeDeleteDuplicateRecipes3(RecipeDeleteDuplicateRecipes):
  """Harder deduplication task, with more noise events and agent must scroll."""

  complexity = 4
  n_rows = 1
  n_rows_noise = 30

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    """Generate random parameters for a remove recipe task."""
    noise = sqlite_schema_utils.get_random_items(
        22,
        _generate_random_recipe,
        replacement=False,
        filter_fn=lambda r: r.title != 'Avocado Toast with Egg',
    )

    target = noise.pop()

    # Add noise at the top of the recipe screen, requiring agent to scroll.
    noise += sqlite_schema_utils.get_random_items(
        3,
        _generate_random_recipe,
        replacement=False,
        filter_fn=lambda r: r.title == 'Avocado Toast with Egg',
    )

    # Add variations of target recipe, with different properties.
    while len(noise) < cls.n_rows_noise:
      value = sqlite_schema_utils.get_random_items(
          1,
          _generate_random_recipe,
          replacement=True,
          filter_fn=lambda r: (
              r.title == target.title and r.description == target.description
          ),
      )[0]
      if value != target:
        noise.append(value)

    return {
        sqlite_validators.ROW_OBJECTS: [target, target],
        sqlite_validators.NOISE_ROW_OBJECTS: noise,
    }


def _get_rows_as_text(
    rows: list[sqlite_schema_utils.Recipe],
    format_type: str,
    wrap_width: int | None = None,
) -> str:
  return sqlite_schema_utils.get_text_representation_of_rows(
      rows,
      [
          'title',
          'description',
          'servings',
          'preparationTime',
          'ingredients',
          'directions',
      ],
      format_type,
      'title',
      wrap_width=wrap_width,
  )


class _RecipeAddMultipleRecipes(sqlite_validators.AddMultipleRows, _RecipeApp):
  """Task to delete multiple recipes in Broccoli Recipe App."""

  complexity = 3
  n_rows = 3
  n_rows_noise = 10

  @property
  def goal(self) -> str:
    text_repr = _get_rows_as_text(
        self.params[sqlite_validators.ROW_OBJECTS],
        self.params[_TEXT_REPRESENTATION_TYPE],
    )
    return f'Add the following recipes into the Broccoli app:\n{text_repr}'

  def validate_addition_integrity(
      self,
      before: list[sqlite_schema_utils.Recipe],
      after: list[sqlite_schema_utils.Recipe],
      reference_rows: list[sqlite_schema_utils.RowType],
  ) -> bool:
    """Validates the integrity of the recipe deletion."""
    return sqlite_validators.validate_rows_addition_integrity(
        before,
        after,
        reference_rows,
        compare_fields=[
            'title',
            'description',
            'servings',
            'preparationTime',
            'source',
            'ingredients',
            'directions',
            'favorite',
        ],
        free_form_fields=[
            'title',
            'description',
            'servings',
            'preparationTime',
            'source',
            'ingredients',
            'directions',
        ],
    )

  @classmethod
  def _get_random_target_row(cls) -> sqlite_schema_utils.Recipe:
    """Currently unused."""
    return _generate_random_recipe()

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    """Generate random parameters for an add recipe task."""
    target_rows = sqlite_schema_utils.get_random_items(
        cls.n_rows,
        _generate_random_recipe,
        replacement=False,
    )
    noise_rows = sqlite_schema_utils.get_random_items(
        cls.n_rows_noise,
        _generate_random_recipe,
        replacement=False,
        filter_fn=lambda r: any([r.title != t.title for t in target_rows]),
    )
    return {
        sqlite_validators.ROW_OBJECTS: target_rows,
        sqlite_validators.NOISE_ROW_OBJECTS: noise_rows,
        _TEXT_REPRESENTATION_TYPE: random.choice(['csv', 'text_block']),
    }


class RecipeAddSingleRecipe(_RecipeAddMultipleRecipes):
  """Task to delete a single recipe in Broccoli Recipe App."""

  complexity = 2
  n_rows = 1
  n_rows_noise = 10


class RecipeAddMultipleRecipes(_RecipeAddMultipleRecipes):
  """Task to delete multiple recipes in Broccoli Recipe App."""

  complexity = 4
  n_rows = 3
  n_rows_noise = 10


class RecipeAddMultipleRecipesFromMarkor(_RecipeAddMultipleRecipes):
  """Task to add multiple recipes from a text file to Broccoli Recipe App."""

  complexity = 4
  n_rows = 3
  n_rows_noise = 10

  @property
  def goal(self) -> str:
    return (
        'Add the recipes from recipes.txt in Markor to the Broccoli recipe app.'
    )

  def initialize_task(self, env: interface.AsyncEnv):
    super().initialize_task(env)
    file_utils.clear_directory(device_constants.MARKOR_DATA, env.controller)
    user_data_generation.write_to_markor(
        _get_rows_as_text(
            self.params[sqlite_validators.ROW_OBJECTS],
            self.params[_TEXT_REPRESENTATION_TYPE],
        ),
        'recipes.txt',
        env,
    )

  def tear_down(self, env: interface.AsyncEnv):
    super().tear_down(env)
    file_utils.clear_directory(device_constants.MARKOR_DATA, env.controller)


class RecipeAddMultipleRecipesFromMarkor2(RecipeAddMultipleRecipesFromMarkor):
  """Harder add recipe task, that involves navigating a large text file."""

  complexity = 4
  n_rows = 3
  n_rows_noise = 40
  complexity = 3

  @property
  def goal(self) -> str:
    prep_time = self.params['prep_time']
    return (
        f'Add the recipes from recipes.txt in Markor that take {prep_time} to '
        'prepare into the Broccoli recipe app.'
    )

  def initialize_task(self, env: interface.AsyncEnv):
    super().initialize_task(env)
    rows = (
        self.params[sqlite_validators.ROW_OBJECTS]
        + self.params[sqlite_validators.NOISE_ROW_OBJECTS]
    )
    random.shuffle(rows)
    file_utils.clear_directory(device_constants.MARKOR_DATA, env.controller)
    user_data_generation.write_to_markor(
        _get_rows_as_text(
            rows,
            self.params[_TEXT_REPRESENTATION_TYPE],
        ),
        'recipes.txt',
        env,
    )

  def tear_down(self, env: interface.AsyncEnv):
    super().tear_down(env)
    file_utils.clear_directory(device_constants.MARKOR_DATA, env.controller)

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    """Generate random parameters for an add recipe task."""
    prep_time = random.choice(_PREP_TIME_OPTIONS)
    target_rows = sqlite_schema_utils.get_random_items(
        cls.n_rows,
        _generate_random_recipe,
        replacement=False,
        filter_fn=lambda r: r.preparationTime == prep_time,
    )
    noise_rows = sqlite_schema_utils.get_random_items(
        cls.n_rows_noise,
        _generate_random_recipe,
        replacement=False,
        filter_fn=lambda r: r.preparationTime != prep_time,
    )
    return {
        sqlite_validators.ROW_OBJECTS: target_rows,
        sqlite_validators.NOISE_ROW_OBJECTS: noise_rows,
        _TEXT_REPRESENTATION_TYPE: random.choice(['csv', 'text_block']),
        'prep_time': prep_time,
    }


class RecipeAddMultipleRecipesFromImage(_RecipeAddMultipleRecipes):
  """Task to add multiple recipes from an image file to Broccoli Recipe App."""

  app_names = (_APP_NAME, 'simple gallery pro')
  complexity = 4
  n_rows = 3
  n_rows_noise = 10

  @property
  def goal(self) -> str:
    return (
        'Add the recipes from recipes.jpg in Simple Gallery Pro to the Broccoli'
        ' recipe app.'
    )

  def initialize_task(self, env: interface.AsyncEnv):
    super().initialize_task(env)
    user_data_generation.clear_device_storage(env)
    data = _get_rows_as_text(
        self.params[sqlite_validators.ROW_OBJECTS], 'text_block', wrap_width=60
    )
    user_data_generation.write_to_gallery(data, 'recipes.jpg', env)

  def tear_down(self, env: interface.AsyncEnv):
    super().tear_down(env)
    user_data_generation.clear_device_storage(env)

#### Utility functions used for generating recipes #############################


def _generate_random_recipe() -> sqlite_schema_utils.Recipe:
  """Generates a random recipe."""

  descriptions = [
      'A quick and easy meal, perfect for busy weekdays.',
      'A delicious and healthy choice for any time of the day.',
      (
          'An ideal recipe for experimenting with different flavors and'
          ' ingredients.'
      ),
  ]
  directions_additions = [
      'Try adding a pinch of your favorite spices for extra flavor.',
      'Feel free to substitute with ingredients you have on hand.',
      'Garnish with fresh herbs for a more vibrant taste.',
  ]
  ingredient_descriptors = [
      'see directions',
      'as per recipe',
      'varies',
      'to preference',
      'quantities to taste',
      'as needed',
      'optional ingredients',
      'n/a',
      'various amounts',
      'adjustable',
      'to your liking',
      'flexible ingredients',
      'per individual taste',
      'as desired',
      'subject to change',
  ]

  recipe = random.choice(_RECIPES)

  return dataclasses.replace(
      recipe,
      description=random.choice(descriptions),
      servings=random.choice(_SERVINGS_OPTIONS),
      preparationTime=random.choice(_PREP_TIME_OPTIONS),
      directions=f'{recipe.directions} {random.choice(directions_additions)}',
      ingredients=random.choice(ingredient_descriptors),
  )


_RECIPES = [
    sqlite_schema_utils.Recipe(
        title='Spicy Tuna Wraps',
        directions=(
            'Mix canned tuna with mayo and sriracha. Spread on tortillas, add'
            ' lettuce and cucumber slices, roll up.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Avocado Toast with Egg',
        directions=(
            'Toast bread, top with mashed avocado, a fried egg, salt, pepper,'
            ' and chili flakes.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Greek Salad Pita Pockets',
        directions=(
            'Fill pita pockets with lettuce, cucumber, tomato, feta, olives,'
            ' and Greek dressing.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Quick Fried Rice',
        directions=(
            'Saut√© cooked rice with vegetables, add soy sauce and scrambled'
            ' eggs. Toss until hot.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Pesto Pasta with Peas',
        directions=(
            'Cook pasta, stir in pesto sauce and cooked peas. Add Parmesan'
            ' cheese before serving.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='BBQ Chicken Quesadillas',
        directions=(
            'Mix shredded cooked chicken with BBQ sauce. Place on tortillas'
            ' with cheese, fold and cook until crispy.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Tomato Basil Bruschetta',
        directions=(
            'Top sliced baguette with a mix of chopped tomatoes, basil,'
            ' garlic, olive oil, salt, and pepper.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Lemon Garlic Tilapia',
        directions=(
            'Saut√© tilapia in butter, add lemon juice and garlic. Serve with'
            ' steamed vegetables.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Turkey and Cheese Panini',
        directions=(
            'Layer turkey and cheese on bread, grill in a panini press until'
            ' golden.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Veggie and Hummus Sandwich',
        directions=(
            'Spread hummus on bread, add cucumber, bell pepper, carrot, and'
            ' lettuce.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Mango Chicken Curry',
        directions=(
            'Cook chicken pieces in a pan, add onions, garlic, and ginger. Stir'
            ' in curry powder, coconut milk, and mango pieces. Simmer until'
            ' chicken is cooked.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Beef Stir Fry',
        directions=(
            'Stir-fry beef slices with broccoli, bell peppers, and onions in'
            ' soy sauce and garlic. Serve over rice or noodles.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Shrimp Avocado Salad',
        directions=(
            'Mix cooked shrimp with avocado, tomatoes, cucumber, and onion.'
            ' Dress with lime juice, olive oil, salt, and pepper.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Spinach and Feta Stuffed Chicken',
        directions=(
            'Stuff chicken breasts with a mixture of spinach, feta, garlic, and'
            ' herbs. Bake until chicken is cooked through.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Zucchini Noodles with Pesto',
        directions=(
            'Spiralize zucchini into noodles, saut√© with garlic, then mix with'
            ' pesto sauce. Top with grated Parmesan cheese.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Cauliflower Fried "Rice"',
        directions=(
            'Pulse cauliflower in a food processor until it resembles rice.'
            ' Saut√© with vegetables, soy sauce, and add scrambled eggs.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Sweet Potato and Black Bean Tacos',
        directions=(
            'Roast sweet potato cubes, mix with black beans, and use as filling'
            ' for tacos. Top with avocado and cilantro lime sauce.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Salmon with Dill Sauce',
        directions=(
            'Bake salmon fillets and serve with a sauce made from Greek yogurt,'
            ' dill, lemon juice, and garlic.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Quinoa Salad with Vegetables',
        directions=(
            'Mix cooked quinoa with diced vegetables, feta cheese, and a lemon'
            ' olive oil dressing.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Chickpea Vegetable Soup',
        directions=(
            'Saut√© onions, carrots, and celery, add broth, canned tomatoes, and'
            ' chickpeas. Simmer with spinach and seasonings.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Chicken Caesar Salad Wrap',
        directions=(
            'Toss chopped romaine lettuce with Caesar dressing, grilled chicken'
            ' strips, and Parmesan cheese. Wrap in a large tortilla.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Vegetarian Chili',
        directions=(
            'Cook onions, garlic, bell peppers, and carrots. Add canned'
            ' tomatoes, kidney beans, black beans, corn, and chili seasoning.'
            ' Simmer until vegetables are tender.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Pan-Seared Salmon with Quinoa',
        directions=(
            'Pan-sear salmon fillets until crispy. Serve over cooked quinoa'
            ' with a side of steamed asparagus.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Caprese Salad Skewers',
        directions=(
            'Thread cherry tomatoes, basil leaves, and mozzarella balls onto'
            ' skewers. Drizzle with balsamic glaze.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Chicken Alfredo Pasta',
        directions=(
            'Cook fettuccine pasta, toss with Alfredo sauce and grilled chicken'
            ' strips. Serve with a sprinkle of Parmesan cheese.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Stuffed Bell Peppers',
        directions=(
            'Mix cooked quinoa, black beans, corn, tomato sauce, and spices.'
            ' Stuff into bell peppers and bake until tender.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Eggplant Parmesan',
        directions=(
            'Slice eggplant, bread, and fry. Layer in a baking dish with'
            ' marinara sauce and mozzarella cheese. Bake until bubbly.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Thai Peanut Noodle Salad',
        directions=(
            'Toss cooked noodles with a Thai peanut sauce, sliced red bell'
            ' peppers, cabbage, carrots, and cilantro.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Butternut Squash Soup',
        directions=(
            'Saut√© onions and garlic, add cubed butternut squash and broth.'
            ' Puree until smooth and season with nutmeg, salt, and pepper.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Baked Cod with Lemon and Dill',
        directions=(
            'Place cod fillets in a baking dish, season with lemon juice, dill,'
            ' salt, and pepper. Bake until fish flakes easily.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Vegetable Stir Fry with Tofu',
        directions=(
            'Stir-fry tofu cubes until golden, add assorted vegetables and a'
            ' stir-fry sauce. Serve over rice or noodles.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Classic Margherita Pizza',
        directions=(
            'Spread pizza dough with tomato sauce, top with slices of'
            ' mozzarella cheese and fresh basil leaves. Bake until crust is'
            ' golden.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Raspberry Almond Smoothie',
        directions=(
            'Blend together raspberries, almond milk, banana, and a scoop of'
            ' almond butter until smooth.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Moroccan Chickpea Stew',
        directions=(
            'Saut√© onions, garlic, carrots, and spices. Add canned chickpeas,'
            ' diced tomatoes, and vegetable broth. Simmer until flavors meld.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Kale and Quinoa Salad',
        directions=(
            'Toss chopped kale, cooked quinoa, dried cranberries, sliced'
            ' almonds, and feta cheese with a lemon vinaigrette.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Grilled Cheese with Tomato and Basil',
        directions=(
            'Butter bread slices, layer with cheese, tomato slices, and basil.'
            ' Grill until bread is toasted and cheese is melted.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Sausage and Peppers Skillet',
        directions=(
            'Saut√© sliced sausage, bell peppers, and onions until browned.'
            ' Serve with mustard or on a hoagie roll.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Lentil Soup',
        directions=(
            'Cook onions, carrots, celery, garlic, and lentils in vegetable'
            ' broth until lentils are tender. Season with thyme and bay leaves.'
        ),
    ),
    sqlite_schema_utils.Recipe(
        title='Garlic Butter Shrimp',
        directions=(
            'Saut√© shrimp in butter and minced garlic until pink. Sprinkle with'
            ' parsley and serve with lemon wedges.'
        ),
    ),
]

_SERVINGS_OPTIONS = [
    '1 serving',
    '2 servings',
    '3-4 servings',
    '6 servings',
    '8 servings',
]
_PREP_TIME_OPTIONS = [
    '10 mins',
    '20 mins',
    '30 mins',
    '45 mins',
    '1 hrs',
    '2 hrs',
    '3 hrs',
    '4 hrs',
]

_COMMON_INGREDIENTS = [
    'tuna',
    'mayonnaise',
    'sriracha',
    'tortillas',
    'lettuce',
    'cucumber',
    'bread',
    'avocado',
    'eggs',
    'salt',
    'pepper',
    'chili flakes',
    'pita bread',
    'tomatoes',
    'feta cheese',
    'olives',
    'Greek dressing',
    'rice',
    'vegetables',
    'soy sauce',
    'pesto sauce',
    'peas',
    'Parmesan cheese',
    'chicken',
    'BBQ sauce',
    'cheese',
    'baguette',
    'basil',
    'garlic',
    'olive oil',
    'tilapia',
    'butter',
    'lemon juice',
    'turkey',
    'hummus',
    'bell peppers',
    'carrots',
    'mango',
    'curry powder',
    'coconut milk',
    'beef',
    'broccoli',
    'onions',
    'shrimp',
    'spinach',
    'herbs',
    'zucchini',
    'cauliflower',
    'sweet potato',
    'black beans',
    'cilantro',
    'Greek yogurt',
    'dill',
    'quinoa',
    'chickpeas',
    'romaine lettuce',
    'Caesar dressing',
    'Parmesan',
    'kidney beans',
    'corn',
    'chili seasoning',
    'asparagus',
    'mozzarella balls',
    'balsamic glaze',
    'fettuccine',
    'Alfredo sauce',
    'quinoa',
    'tomato sauce',
    'eggplant',
    'marinara sauce',
    'mozzarella cheese',
    'noodles',
    'Thai peanut sauce',
    'red bell peppers',
    'cabbage',
    'butternut squash',
    'nutmeg',
    'tofu',
    'pizza dough',
    'mozzarella cheese',
    'raspberries',
    'almond milk',
    'banana',
    'almond butter',
    'lentils',
    'thyme',
    'bay leaves',
    'parsley',
    'lemon wedges',
    # More exotic ingredients that are likely not in the existing recipes.
    'ghee',
    'cardamom',
    'fenugreek',
    'amchur (dry mango powder)',
    'rose water',
    'pomegranate molasses',
    'kaffir lime leaves',
    'galangal',
    'lemongrass',
    'furikake',
    'black garlic',
    'hemp seeds',
    'chia seeds',
    'a√ßai berry',
    'maca powder',
    'spirulina',
    'cassava flour',
    'arrowroot powder',
    'seaweed',
    'escargot',
    'venison',
    'quail eggs',
    'duck fat',
    'morel mushrooms',
    'chanterelle mushrooms',
    'black truffle',
    'edible flowers',
    'salsify',
    'rutabaga',
    'celeriac',
    'finger limes',
]


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import datetime
from unittest import mock

from absl.testing import absltest
from android_env.proto import adb_pb2
from android_world.env import device_constants
from android_world.env import interface
from android_world.task_evals.single import markor
from android_world.task_evals.utils import user_data_generation
from android_world.utils import file_utils
from android_world.utils import test_utils


class TestMarkorEditNote(test_utils.AdbEvalTestBase):

  def test_is_successful_edit_header(self):
    self.mock_create_file.return_value = 'Original Content'
    edited_content = adb_pb2.AdbResponse()
    edited_content.generic.output = b'Header\nOriginal Content'
    self.mock_issue_generic_request.return_value = edited_content
    env = mock.create_autospec(interface.AsyncEnv)
    params = {
        'file_name': 'test_note.md',
        'edit_type': 'header',
        'header': 'Header',
    }

    task = markor.MarkorEditNote(params)

    self.assertEqual(test_utils.perform_task(task, env), 1)
    self.mock_create_file.assert_called()
    self.mock_remove_files.assert_called()
    self.mock_create_random_files.assert_called()
    self.mock_issue_generic_request.assert_called()

  def test_is_successful_edit_footer(self):
    self.mock_create_file.return_value = 'Original Content'

    edited_content = adb_pb2.AdbResponse()
    edited_content.generic.output = b'Original Content\nFooter'

    self.mock_issue_generic_request.return_value = edited_content

    env = mock.create_autospec(interface.AsyncEnv)
    params = {
        'file_name': 'test_note.md',
        'edit_type': 'footer',
        'footer': 'Footer',
    }

    task = markor.MarkorEditNote(params)
    self.assertEqual(test_utils.perform_task(task, env), 1)

    # Assert that the mock functions were called
    self.mock_create_file.assert_called()
    self.mock_remove_files.assert_called()
    self.mock_create_random_files.assert_called()
    self.mock_issue_generic_request.assert_called()

  # Test for 'replace'
  def test_is_successful_edit_replace(self):
    self.mock_create_file.return_value = 'Original Content'

    mock_edited_content = adb_pb2.AdbResponse()
    mock_edited_content.generic.output = b'Replacement Text'

    self.mock_issue_generic_request.return_value = mock_edited_content

    env = mock.create_autospec(interface.AsyncEnv)
    params = {
        'file_name': 'test_note.md',
        'edit_type': 'replace',
        'replace_text': 'Replacement Text',
    }

    task = markor.MarkorEditNote(params)
    self.assertEqual(test_utils.perform_task(task, env), 1)

    # Assert that the mock functions were called
    self.mock_create_file.assert_called()
    self.mock_remove_files.assert_called()
    self.mock_create_random_files.assert_called()
    self.mock_issue_generic_request.assert_called()

  # Test for failure case (nothing replaced)
  def test_is_not_successful(self):
    self.mock_create_file.return_value = 'Original Content'

    mock_edited_content = adb_pb2.AdbResponse()
    mock_edited_content.generic.output = b'Original Content'

    self.mock_issue_generic_request.return_value = mock_edited_content

    env = mock.create_autospec(interface.AsyncEnv)
    params = {
        'file_name': 'test_note.md',
        'edit_type': 'replace',
        'replace_text': 'Replacement Text',
    }

    task = markor.MarkorEditNote(params)
    self.assertEqual(test_utils.perform_task(task, env), 0)

    # Assert that the mock functions were called
    self.mock_create_file.assert_called()
    self.mock_remove_files.assert_called()
    self.mock_create_random_files.assert_called()
    self.mock_issue_generic_request.assert_called()


class TestMarkorCreateFolder(test_utils.AdbEvalTestBase):

  def test_is_successful(self):
    self.mock_check_file_or_folder_exists.return_value = True

    env = mock.create_autospec(interface.AsyncEnv)
    params = {'folder_name': 'my_folder'}

    task = markor.MarkorCreateFolder(params)
    self.assertEqual(test_utils.perform_task(task, env), 1)
    self.mock_remove_files.assert_called()
    self.mock_create_random_files.assert_called()

  def test_initialize_task_wrong_name(self):
    self.mock_check_file_or_folder_exists.return_value = False

    env = mock.create_autospec(interface.AsyncEnv)
    params = {'folder_name': 'my_folder'}

    task = markor.MarkorCreateFolder(params)
    self.assertEqual(test_utils.perform_task(task, env), 0)
    self.mock_remove_files.assert_called()
    self.mock_create_random_files.assert_called()


class TestMarkorDeleteNewestNote(test_utils.AdbEvalTestBase):

  def test_is_successful(self):
    env = mock.create_autospec(interface.AsyncEnv)
    file_change_time = datetime.datetime.now()
    self.mock_get_file_list_with_metadata.side_effect = [
        [
            file_utils.FileWithMetadata(
                file_name='test.txt',
                full_path='/test.txt',
                file_size=1000,
                change_time=file_change_time,
            ),
            file_utils.FileWithMetadata(
                file_name='test2.txt',
                full_path='/test.txt',
                file_size=1000,
                change_time=file_change_time + datetime.timedelta(hours=1),
            ),
        ],
        [
            file_utils.FileWithMetadata(
                file_name='test.txt',
                full_path='/test.txt',
                file_size=1000,
                change_time=file_change_time,
            ),
        ],
    ]

    task = markor.MarkorDeleteNewestNote({})
    self.assertEqual(test_utils.perform_task(task, env), 1)
    self.mock_create_file.assert_called()
    self.mock_advance_system_time.assert_called()
    self.mock_get_file_list_with_metadata.assert_called()


class TestMarkorDeleteAllNotes(test_utils.AdbEvalTestBase):

  def test_is_successful(self):
    env = mock.create_autospec(interface.AsyncEnv)
    self.mock_get_file_list_with_metadata.side_effect = [
        [
            file_utils.FileWithMetadata(
                file_name='test.txt',
                full_path='/test.txt',
                file_size=1000,
                change_time=datetime.datetime.now(),
            )
        ],
        [],
    ]

    task = markor.MarkorDeleteAllNotes({})
    self.assertEqual(test_utils.perform_task(task, env), 1)
    self.mock_create_random_files.assert_called_once()
    self.assertEqual(self.mock_get_file_list_with_metadata.call_count, 2)


class TestMarkorCreateNoteFromClipboard(test_utils.AdbEvalTestBase):

  # Given the task is a simple variant of CreateFile task, only test
  # initialization here.
  def test_initialized_correctly(self):
    async_env = mock.create_autospec(interface.AsyncEnv)
    test_file_content = 'test file content'
    self.mock_get_clipboard_contents.return_value = test_file_content

    task = markor.MarkorCreateNoteFromClipboard(
        {'file_name': 'test_file.md', 'file_content': test_file_content}
    )
    self.mock_check_file_or_folder_exists.return_value = False
    task.initialize_task(async_env)
    self.assertIsNotNone(task.create_file_task)
    self.assertDictEqual(
        task.create_file_task.params,
        {'file_name': 'test_file.md', 'text': task.params['file_content']},
    )


class TestMarkorMergeNotes(test_utils.AdbEvalTestBase):

  def test_initialized_correctly(self):
    async_env = mock.create_autospec(interface.AsyncEnv)

    task = markor.MarkorMergeNotes({
        'file1_name': 'file1',
        'file2_name': 'file2',
        'file3_name': 'file3',
        'new_file_name': 'new_file_name',
        'file1_content': 'file1 content.\n',
        'file2_content': 'file2 content.\n',
        'file3_content': 'file3 content.\n',
    })
    self.mock_check_file_or_folder_exists.return_value = False
    task.initialize_task(async_env)
    self.assertIsNotNone(task.create_file_task)
    self.assertEqual(self.mock_create_file.call_count, 3)
    self.assertDictEqual(
        task.create_file_task.params,
        {
            'file_name': 'new_file_name',
            'text': (
                '\n\n'.join([
                    task.params['file1_content'],
                    task.params['file2_content'],
                    task.params['file3_content'],
                ])
                + '\n'
            ),
        },
    )

  @mock.patch.object(user_data_generation, 'clear_device_storage')
  @mock.patch.object(file_utils, 'clear_directory')
  def test_is_successful(
      self, unused_mock_clear_directory, unused_mock_clear_device_storage
  ):
    env = mock.create_autospec(interface.AsyncEnv)

    task = markor.MarkorMergeNotes({
        'file1_name': 'file1',
        'file2_name': 'file2',
        'file3_name': 'file3',
        'new_file_name': 'new_file_name',
        'file1_content': 'file1 content.\n',
        'file2_content': 'file2 content.\n',
        'file3_content': 'file3 content.\n',
    })

    self.mock_check_file_or_folder_exists.return_value = True
    merged_content = adb_pb2.AdbResponse()
    merged_content.generic.output = (
        b'file1 content.\n\nfile2 content.\n\nfile3 content.\n'
    )
    self.mock_issue_generic_request.side_effect = [
        merged_content,
        merged_content,
    ]

    self.assertEqual(test_utils.perform_task(task, env), 1)


class TestMarkorChangeNoteContent(test_utils.AdbEvalTestBase):

  def test_is_successful(self):
    env = mock.create_autospec(interface.AsyncEnv)
    self.mock_check_file_or_folder_exists.side_effect = [True, False, True]
    new_content = adb_pb2.AdbResponse()
    new_content.generic.output = b'new content'
    self.mock_issue_generic_request.return_value = new_content

    task = markor.MarkorChangeNoteContent({
        'original_name': 'test_file',
        'new_name': 'new_file',
        'updated_content': 'new content',
    })

    self.assertEqual(test_utils.perform_task(task, env), 1)


class TestMarkorAddNoteHeader(test_utils.AdbEvalTestBase):

  def test_is_successful(self):
    env = mock.create_autospec(interface.AsyncEnv)
    self.mock_check_file_or_folder_exists.side_effect = [True, False, True]
    new_content = adb_pb2.AdbResponse()
    new_content.generic.output = b'header to add\n\noriginal content\n'
    self.mock_issue_generic_request.return_value = new_content

    task = markor.MarkorAddNoteHeader({
        'original_name': 'test_file',
        'new_name': 'new_file',
        'header': 'header to add',
        'original_content': 'original content',
    })

    self.assertEqual(test_utils.perform_task(task, env), 1)


@mock.patch.object(file_utils, 'copy_data_to_device')
class GalleryMarkorTest(test_utils.AdbEvalTestBase):

  def setUp(self):
    super().setUp()
    self.mock_env = mock.create_autospec(spec=interface.AsyncEnv)
    self.params = {
        'file_name': 'receipt.md',
        'text': 'Date, Item, Amount\n2023-07-04, Monitor Stand, $21.52',
        'img': mock.MagicMock(),
    }

  def test_initialize_task(self, mock_copy_data_to_device):
    mock_env = mock.create_autospec(spec=interface.AsyncEnv)
    task = markor.MarkorTranscribeReceipt(self.params)
    self.mock_check_file_or_folder_exists.side_effect = [False, True]

    task.initialize_task(mock_env)

    task.img.save.assert_called_once_with('/tmp/receipt.png')
    mock_copy_data_to_device.assert_called_once_with(
        '/tmp/receipt.png',
        device_constants.GALLERY_DATA,
        mock_env.controller,
    )


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import itertools
import os
import tempfile
from unittest import mock

from absl.testing import absltest
from android_world.env import device_constants
from android_world.env import interface
from android_world.task_evals.single import simple_gallery_pro
from android_world.task_evals.utils import receipt_generator
from android_world.task_evals.utils import user_data_generation
from android_world.utils import app_snapshot
from android_world.utils import datetime_utils
from android_world.utils import fake_adb_responses
from PIL import Image


def _touch_temp_file(file_name):
  """Creates an empty file in the /tmp/ directory.

  Args:
    file_name: The name of the file.
  """
  path = os.path.join(tempfile.gettempdir(), file_name)
  with open(path, "w") as f:
    f.write("")


class SaveCopyOfReceiptTaskEvalTest(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.mock_clear_device_storage = self.enter_context(
        mock.patch.object(
            user_data_generation,
            "clear_device_storage",
            autospec=True,
        )
    )
    self.mock_receipt_generator = self.enter_context(
        mock.patch.object(
            receipt_generator,
            "create_receipt",
            return_value=(
                mock.create_autospec(Image.Image),
                "receipt_test.jpg",
            ),
        )
    )
    self.mock_restore_snapshot = self.enter_context(
        mock.patch.object(
            app_snapshot,
            "restore_snapshot",
        )
    )
    self.mock_setup_datetime = self.enter_context(
        mock.patch.object(
            datetime_utils,
            "setup_datetime",
        )
    )

  def assertInitializes(
      self,
      eval_task: simple_gallery_pro.SaveCopyOfReceiptTaskEval,
      env: interface.AsyncEnv,
  ):
    _touch_temp_file(eval_task.params["file_name"])
    env.controller.execute_adb_call.side_effect = list(
        itertools.chain(
            fake_adb_responses.create_taskeval_initialize_responses(
                len(eval_task.app_names)
            ),
            fake_adb_responses.create_remove_files_responses(),
            fake_adb_responses.create_copy_to_device_responses(),
        )
    )
    eval_task.initialize_task(env)

  def test_generate_random_params_returns_file_name(self):
    random_params = (
        simple_gallery_pro.SaveCopyOfReceiptTaskEval.generate_random_params()
    )

    file_name = random_params["file_name"]
    self.assertIsNotNone(file_name)
    self.assertStartsWith(file_name, "receipt_")
    self.assertEndsWith(file_name, ".jpg")

  def test_is_successful_returns_one_if_file_is_present(self):
    env = mock.create_autospec(interface.AsyncEnv)
    eval_task = simple_gallery_pro.SaveCopyOfReceiptTaskEval(
        simple_gallery_pro.SaveCopyOfReceiptTaskEval.generate_random_params()
    )
    self.assertInitializes(eval_task, env)
    env.controller.execute_adb_call.side_effect = (
        fake_adb_responses.create_check_file_or_folder_exists_responses(
            file_name=eval_task.params["file_name"],
            base_path=device_constants.DOWNLOAD_DATA,
            exists=True,
        )
    )

    self.assertEqual(eval_task.is_successful(env), 1.0)

  def test_is_successful_returns_zero_if_file_is_missing(self):
    env = mock.create_autospec(interface.AsyncEnv)
    eval_task = simple_gallery_pro.SaveCopyOfReceiptTaskEval(
        simple_gallery_pro.SaveCopyOfReceiptTaskEval.generate_random_params()
    )
    self.assertInitializes(eval_task, env)
    env.controller.execute_adb_call.side_effect = (
        fake_adb_responses.create_check_file_or_folder_exists_responses(
            file_name=eval_task.params["file_name"],
            base_path=device_constants.DOWNLOAD_DATA,
            exists=False,
        )
    )

    self.assertEqual(eval_task.is_successful(env), 0.0)


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tasks for making and receiving phone calls."""

import random
import time
from typing import Any
from android_world.env import adb_utils
from android_world.env import device_constants
from android_world.env import interface
from android_world.task_evals.common_validators import phone_validators
from android_world.task_evals.common_validators import sms_validators
from android_world.task_evals.utils import user_data_generation
from android_world.utils import file_utils


class MarkorCallApartment(phone_validators.MakeCall):
  """Represents a task that combines phone calling with a Markor note lookup.

  This task involves reading a phone number from a Markor note and making
  a phone call to the specified number. It checks whether the In-Call UI is
  displayed
  with options like 'Hold'.
  """

  app_names = ("markor",)
  complexity = 1
  schema = {
      "type": "object",
      "properties": {
          "name": {"type": "string"},
          "phone_number": {"type": "string"},
      },
      "required": ["phone_number"],
  }
  template = (
      "Call the number for the apartment name {name}. The number is in"
      " apartments.md file in Markor. Ensure the In-Call UI is displayed with"
      " options like 'Hold'."
  )

  def initialize_task(self, env: interface.AsyncEnv):
    super().initialize_task(env)
    content = user_data_generation.dict_to_notes(
        user_data_generation.generate_apartments()
    )
    file_utils.create_file(
        "apartments.md", device_constants.MARKOR_DATA, env.controller, content
    )
    self.phone_number = self.params["phone_number"]

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    candidates = user_data_generation.generate_apartments()
    name = random.choice(list(candidates.keys()))
    number = candidates[name][0]
    return {
        "name": name,
        "phone_number": number,
    }


class PhoneMakeCall(phone_validators.MakeCall):
  """Task to make a phone call."""

  template = (
      "Make a phone call to the number {phone_number} and ensure the In-Call UI"
      " is displayed with options like 'Hold'."
  )


class PhoneReturnMissedCall(phone_validators.MakeCall):
  """Task to return a missed phone call.

  This task involves making a call back to a number that was missed and
  verifying that the In-Call UI appears with options like 'Hold'.
  """

  template = (
      "Return the call I just missed and ensure the In-Call UI is displayed"
      " with options like 'Hold'."
  )

  def initialize_task(self, env: interface.AsyncEnv):
    super().initialize_task(env)
    adb_utils.call_emulator(env.controller, self.phone_number)
    time.sleep(5)
    adb_utils.end_call_if_active(env.controller)


class PhoneRedialNumber(phone_validators.MakeCall):
  """Task to re-dial the last dialed number.

  This task involves re-dialing the last dialed number and verifying that the
  In-Call UI appears with options like 'Hold'.
  """

  template = (
      "Re-dial the number I was just talking to and ensure the In-Call UI is "
      "displayed with options like 'Hold'."
  )

  def initialize_task(self, env: interface.AsyncEnv):
    super().initialize_task(env)
    adb_utils.call_phone_number(env.controller, self.phone_number)
    time.sleep(5)
    adb_utils.end_call_if_active(env.controller)


class PhoneCallTextSender(phone_validators.MakeCall):
  """Task to call the sender of the most recent text message.

  This task involves making a call back to the number that most recently sent a
  text message and verifying that the In-Call UI appears with options like
  'Hold'.
  """

  template = (
      "Call the number that just texted me and ensure the In-Call UI is "
      "displayed with options like 'Hold'."
  )

  def initialize_task(self, env: interface.AsyncEnv):
    super().initialize_task(env)
    sms_validators.clear_sms_and_threads(env.controller)
    print(self.phone_number)
    adb_utils.text_emulator(
        env.controller, self.phone_number, "Hey give me a call"
    )


class PhoneAnswerCall(phone_validators.MakeCall):
  """Task to answer an incoming phone call.

  This task involves answering an incoming call from a specified number and
  verifying that the In-Call UI appears with options like 'Hold'.
  """

  template = (
      "Answer the incoming phone call and ensure the In-Call UI is displayed"
      " with options like 'Hold'."
  )

  def initialize_task(self, env: interface.AsyncEnv):
    super().initialize_task(env)
    adb_utils.call_emulator(env.controller, self.phone_number)


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tasks for VLC player."""

import os
import random
from typing import Any
from android_world.env import interface
from android_world.env.setup_device import apps
from android_world.task_evals import task_eval
from android_world.task_evals.common_validators import sqlite_validators
from android_world.task_evals.utils import sqlite_schema_utils
from android_world.task_evals.utils import sqlite_utils
from android_world.task_evals.utils import user_data_generation
from android_world.utils import file_utils

_DB_PATH = '/data/data/org.videolan.vlc/app_db/vlc_media.db'
_APP_NAME = 'vlc'


def _get_playlist_info_query() -> str:
  """Gets query for fetching playlists and their associated files."""
  return """
    SELECT
      Playlist.name AS playlist_name,
      Media.filename AS media_file_name,
      PlaylistMediaRelation.position AS order_in_playlist
    FROM
      PlaylistMediaRelation
    INNER JOIN Playlist ON Playlist.id_playlist = PlaylistMediaRelation.playlist_id
    INNER JOIN Media ON Media.id_media = PlaylistMediaRelation.media_id
    ORDER BY
      Playlist.name,
      PlaylistMediaRelation.position;
    """


def _clear_playlist_dbs(env: interface.AsyncEnv) -> None:
  """Clears all DBs related to playlists."""
  sqlite_utils.delete_all_rows_from_table('Playlist', _DB_PATH, env, _APP_NAME)
  sqlite_utils.delete_all_rows_from_table('Media', _DB_PATH, env, _APP_NAME)
  sqlite_utils.delete_all_rows_from_table(
      'PlaylistMediaRelation', _DB_PATH, env, _APP_NAME
  )


def _get_playlist_file_info(
    env: interface.AsyncEnv,
) -> list[sqlite_schema_utils.PlaylistInfo]:
  """Executes join query to fetch playlist file info."""
  with env.controller.pull_file(_DB_PATH, timeout_sec=3) as local_db_directory:
    local_db_path = os.path.join(local_db_directory, os.path.split(_DB_PATH)[1])
    return sqlite_utils.execute_query(
        _get_playlist_info_query(),
        local_db_path,
        sqlite_schema_utils.PlaylistInfo,
    )


class _VLC(task_eval.TaskEval):

  def initialize_task(self, env: interface.AsyncEnv):
    super().initialize_task(env)
    user_data_generation.clear_internal_storage(env)
    file_utils.clear_directory(apps.VlcApp.videos_path, env.controller)

  def tear_down(self, env: interface.AsyncEnv):
    super().tear_down(env)
    user_data_generation.clear_internal_storage(env)
    file_utils.clear_directory(apps.VlcApp.videos_path, env.controller)


class VlcCreatePlaylist(_VLC):
  """Task to create a playlist in VLC."""

  app_names = ['vlc']
  complexity = 2
  schema = {
      'type': 'object',
      'properties': {
          'playlist_name': {'type': 'string'},
          'files': {
              'type': 'array',
              'items': {'type': 'string'},
          },
      },
      'required': ['playlist_name', 'files'],
  }
  template = ''  # We'll directly use goal.
  HTML = ''  # Implementation overrides this.

  @property
  def goal(self) -> str:
    files = ', '.join(self.params['files'])
    playlist_name = self.params['playlist_name']
    return (
        f'Create a playlist titled "{playlist_name}" with the following files'
        f' in VLC (located in Internal Memory/VLCVideos), in order: {files}'
    )

  def setup_files(self, env: interface.AsyncEnv):
    for file in self.params['files']:
      user_data_generation.write_video_file_to_device(
          file,
          apps.VlcApp.videos_path,
          env,
          messages=[user_data_generation.generate_random_string(10)],
          fps=1,
          message_display_time=random.randint(20, 180),
      )
    for file in self.params['noise_files']:
      user_data_generation.write_video_file_to_device(
          file,
          apps.VlcApp.videos_path,
          env,
          messages=[user_data_generation.generate_random_string(10)],
          fps=1,
          message_display_time=random.randint(20, 180),
      )

  def initialize_task(self, env: interface.AsyncEnv):
    super().initialize_task(env)
    _clear_playlist_dbs(env)
    self.setup_files(env)

  def tear_down(self, env: interface.AsyncEnv):
    super().tear_down(env)
    _clear_playlist_dbs(env)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    actual = _get_playlist_file_info(env)
    return float(
        sqlite_validators.verify_playlist(
            actual, self.params['playlist_name'], self.params['files']
        )
    )

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    playlist_name = _generate_playlist_name()
    num_files = random.randint(2, 5)
    files = [generate_file_name() for _ in range(num_files)]
    return {
        'playlist_name': playlist_name,
        'files': files,
        'noise_files': [generate_file_name() for _ in range(num_files)],
    }


class VlcCreateTwoPlaylists(task_eval.TaskEval):
  """Task to create two playlists in VLC."""

  app_names = ['vlc']
  complexity = 3
  schema = {
      'type': 'object',
      'properties': {
          'playlist_name1': {'type': 'string'},
          'files1': {
              'type': 'array',
              'items': {'type': 'string'},
          },
          'playlist_name2': {'type': 'string'},
          'files2': {
              'type': 'array',
              'items': {'type': 'string'},
          },
      },
      'required': ['playlist_name1', 'files1', 'playlist_name2', 'files2'],
  }
  template = ''  # Directly use goal.

  def __init__(self, params: dict[str, Any]):
    super().__init__(params)
    self.task1_params = {
        'playlist_name': params['playlist_name1'],
        'files': params['files1'],
        'noise_files': params['noise_files1'],
    }
    self.task2_params = {
        'playlist_name': params['playlist_name2'],
        'files': params['files2'],
        'noise_files': params['noise_files2'],
    }
    self.task1 = VlcCreatePlaylist(self.task1_params)
    self.task2 = VlcCreatePlaylist(self.task2_params)

  @property
  def goal(self) -> str:
    goal1 = (
        f'Create a playlist titled "{self.params["playlist_name1"]}" with the'
        ' following files in VLC (located in Internal Memory/VLCVideos), in'
        f' order: {", ".join(self.params["files1"])}'
    )
    goal2 = (
        f'create a playlist titled "{self.params["playlist_name2"]}" with the'
        f' following files in VLC, in order: {", ".join(self.params["files2"])}'
    )
    return f'{goal1}. And then, {goal2}.'

  def initialize_task(self, env: interface.AsyncEnv):
    super().initialize_task(env)
    self.task1.initialize_task(env)
    self.task2.setup_files(env)  # Don't want to clear db.

  def tear_down(self, env: interface.AsyncEnv):
    super().tear_down(env)
    self.task1.tear_down(env)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    return (self.task1.is_successful(env) + self.task2.is_successful(env)) / 2

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    playlist1_params = VlcCreatePlaylist.generate_random_params()
    playlist2_params = VlcCreatePlaylist.generate_random_params()
    return {
        'playlist_name1': playlist1_params['playlist_name'],
        'files1': playlist1_params['files'],
        'noise_files1': playlist1_params['noise_files'],
        'playlist_name2': playlist2_params['playlist_name'],
        'files2': playlist2_params['files'],
        'noise_files2': playlist2_params['noise_files'],
    }


#### Synthetic data ############################################################


def generate_file_name() -> str:
  """Generates a more realistic and descriptive video file name."""
  prefixes = [
      'clip',
      'footage',
      'scene',
      'recording',
      'highlight',
      'moment',
      'episode',
  ]
  suffixes = [
      '',
      'HD',
      '4K',
      'raw',
      'export',
  ]
  prefix = random.choice(prefixes)
  suffix = random.choice(suffixes)
  num = str(random.randint(1, 99))
  name = f'{prefix}_{num}_{suffix}.mp4'
  return user_data_generation.generate_modified_file_name(name)


def _generate_playlist_name() -> str:
  """Generates realistic and descriptive playlist names."""
  themes = [
      'Adventure',
      'Comedy',
      'Daily Routines',
      'Documentary Insights',
      'Epic Moments',
      'Family Gatherings',
      'Fitness Challenges',
      'Gaming Sessions',
      'How To',
      'Mystery and Thrills',
      'Recipe Collection',
      'Road Trips',
      'Summer Highlights',
      'Tech Reviews',
      'Travel Guide',
      'Ultimate Fails',
  ]
  qualifiers = [
      'Essentials',
      'Favorites',
      'Marathon',
      'Playlist',
      'Series',
      'Specials',
      'Ultimate Collection',
  ]
  # Select a random theme and qualifier
  theme = random.choice(themes)
  qualifier = random.choice(qualifiers)
  # Form the playlist name
  return f'{theme} {qualifier}'


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import random
from unittest import mock

from absl.testing import absltest
from absl.testing import parameterized
from android_world.task_evals.single.calendar import events_generator
from android_world.utils import datetime_utils


class EventsGeneratorTest(parameterized.TestCase):

  def test_generate_event(self):
    """Test if generate_event produces a valid event."""
    event = events_generator.generate_event(
        datetime_utils.create_random_october_2023_unix_ts()
    )
    self.assertGreater(event.end_ts, event.start_ts)
    self.assertIsInstance(event.title, str)
    self.assertIsInstance(event.description, str)
    self.assertNotEmpty(event.title)
    self.assertNotEmpty(event.description)

  @parameterized.named_parameters(
      ('name_suffix', 'Meeting with Alice', 0),
      ('subject_suffix', 'Workshop on Budget Planning', 2),
  )
  @mock.patch.object(random, 'choice')
  def test_generate_event_title(
      self,
      expected_title,
      mock_idx,
      mock_random_choice,
  ):
    """Test if generate_event_title produces a valid title."""
    mock_random_choice.side_effect = lambda x: x[mock_idx]
    title = events_generator.generate_event_title()
    self.assertEqual(title, expected_title)

  @parameterized.named_parameters(
      ('name_suffix', 'We will discuss upcoming project milestones.', 0),
      (
          'subject_suffix',
          (
              'We will finalize marketing strategies. Remember to confirm'
              ' attendance.'
          ),
          1,
      ),
  )
  @mock.patch.object(random, 'choice')
  def test_generate_event_description(
      self, expected_description, mock_idx, mock_random_choice
  ):
    """Test if generate_event_description produces a valid description."""
    mock_random_choice.side_effect = lambda x: x[mock_idx]
    description = events_generator.generate_event_description()
    self.assertEqual(description, expected_description)


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Utils for Simple Calendar Pro."""

from typing import Optional
from android_world.env import interface
from android_world.task_evals.single.calendar import events_generator
from android_world.task_evals.utils import sqlite_schema_utils
from android_world.task_evals.utils import sqlite_utils
from android_world.utils import datetime_utils


DB_PATH = '/data/data/com.simplemobiletools.calendar.pro/databases/events.db'
EVENTS_TABLE = 'events'  # Table in events.db.
DB_KEY = 'id'


def clear_calendar_db(
    env: interface.AsyncEnv, timeout_sec: Optional[float] = None
) -> None:
  """Removes the calendar database on the device."""
  sqlite_utils.delete_all_rows_from_table(
      EVENTS_TABLE, DB_PATH, env, 'simple calendar pro'
  )
  try:
    sqlite_utils.get_rows_from_remote_device(
        EVENTS_TABLE,
        DB_PATH,
        sqlite_schema_utils.CalendarEvent,
        env,
        timeout_sec,
    )
  except ValueError as e:
    raise RuntimeError(
        'After clearing the old SQLite database, a new empty database was'
        ' not created.'
    ) from e


def add_events(
    events: list[sqlite_schema_utils.CalendarEvent],
    env: interface.AsyncEnv,
    timeout_sec: Optional[float] = None,
) -> None:
  """Adds an event to the Android calendar database using ADB.

  Performs a round trip: copies db over from device, adds event, then sends
  db back to device.

  Args:
      events: The list of Events to add to the database.
      env: The Android environment interface.
      timeout_sec: A timeout for the ADB operations.
  """
  sqlite_utils.insert_rows_to_remote_db(
      events,
      DB_KEY,
      EVENTS_TABLE,
      DB_PATH,
      'simple calendar pro',
      env,
      timeout_sec,
  )


def add_random_events(env: interface.AsyncEnv, n: int = 75) -> None:
  """Adds random events to calendar to increase task complexity."""
  events = [
      events_generator.generate_event(
          datetime_utils.create_random_october_2023_unix_ts(start_day=1)
      )
      for _ in range(n)
  ]
  add_events(events, env)


def generate_simple_calendar_weekly_repeat_rule(day_of_week: int) -> int:
  """Generates a weekly repeat rule based on the provided list of weekdays.

  This logic is specific to Simple Calendar Pro, where each day is represented
  by 2^(n-1), with n being the day's number (1 for Monday, 2 for Tuesday, etc.).

  Args:
    day_of_week: Day of week, where Monday is 1, Tuesday is 2, ..., Sunday is 7.

  Returns:
    The repeat rule as an integer.
  """
  if not (1 <= day_of_week <= 7):
    raise ValueError('Invalid day of the week. Must be in range 1-7.')
  return 1 << (day_of_week - 1)


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from collections.abc import Iterable
import random
from typing import cast
from unittest import mock

from absl.testing import absltest
from absl.testing import parameterized
from android_world.env import adb_utils
from android_world.task_evals.common_validators import sqlite_validators
from android_world.task_evals.single.calendar import calendar
from android_world.task_evals.single.calendar import calendar_utils
from android_world.task_evals.single.calendar import events_generator
from android_world.task_evals.utils import sqlite_schema_utils
from android_world.utils import app_snapshot
from android_world.utils import datetime_utils
from android_world.utils import file_utils


def _sample_events(
    event: sqlite_schema_utils.CalendarEvent,
) -> Iterable[sqlite_schema_utils.CalendarEvent]:
  yield event
  while True:
    start = random.randint(0, 1_000_000)
    noise = sqlite_schema_utils.CalendarEvent(
        start_ts=60,
        end_ts=start + 60,
        title="nothing " + str(random.randint(0, 1_000_000)),
        description="noise" + str(random.randint(0, 1_000_000)),
    )
    yield random.choice([event, noise])


class CalendarEventTestSetup(parameterized.TestCase):

  def setUp(self):
    super().setUp()
    self.env = mock.MagicMock()

    self.mock_list_rows = mock.patch.object(
        sqlite_validators.SQLiteApp, "list_rows", return_value=[]
    ).start()
    self.mock_add_rows = mock.patch.object(
        sqlite_validators.SQLiteApp, "add_rows"
    ).start()
    self.mock_tmp_directory_from_device = mock.patch.object(
        file_utils, "tmp_directory_from_device"
    ).start()
    self.mock_issue_generic_request = mock.patch.object(
        adb_utils, "issue_generic_request"
    ).start()
    self.mock_remove_files = mock.patch.object(
        file_utils, "clear_directory"
    ).start()
    self.mock_clear_db = mock.patch.object(
        sqlite_validators.SQLiteApp, "_clear_db"
    ).start()
    self.mock_restore_snapshot = self.enter_context(
        mock.patch.object(app_snapshot, "restore_snapshot")
    )

  def tearDown(self):
    super().tearDown()
    mock.patch.stopall()


class TestSimpleCalendarAddOneEvent(CalendarEventTestSetup):

  def test_is_successful(self):
    task = calendar.SimpleCalendarAddOneEvent(
        calendar.SimpleCalendarAddOneEvent.generate_random_params()
    )
    self.mock_list_rows.side_effect = [[], task.params["row_objects"]]
    task.initialize_task(self.env)
    result = task.is_successful(self.env)
    self.assertEqual(result, 1)

  def test_generate_random_params(self):
    params = calendar.SimpleCalendarAddOneEvent.generate_random_params()
    self.assertIn("year", params)
    self.assertIn("month", params)
    self.assertIn("day", params)
    self.assertIn("hour", params)
    self.assertIn("event_title", params)
    self.assertIn("event_description", params)
    self.assertIn("duration_mins", params)
    self.assertIn("row_objects", params)

  @parameterized.named_parameters(
      ("typical event", 2023, 10, 16, 8, "Meeting", "Discuss project"),
      (
          "end of month event",
          2023,
          10,
          31,
          15,
          "Halloween Party",
          "Costume party at office",
      ),
      (
          "early morning event",
          2023,
          10,
          17,
          6,
          "Workout",
          "Morning gym session",
      ),
      (
          "late night event",
          2023,
          10,
          20,
          22,
          "Movie Night",
          "Watching the latest movie release",
      ),
  )
  @mock.patch.object(events_generator, "generate_event")
  def test_goal(
      self, year, month, day, hour, title, description, mock_generate_event
  ):
    start_time = datetime_utils._create_unix_ts(
        day=day, hour=hour, month=month, year=year, timezone="UTC"
    )
    event = sqlite_schema_utils.CalendarEvent(
        start_ts=start_time,
        end_ts=start_time + 10 * 60,  # 10 minutes duration
        title=title,
        description=description,
    )
    mock_generate_event.side_effect = _sample_events(event)

    params = calendar.SimpleCalendarAddOneEvent.generate_random_params()
    task = calendar.SimpleCalendarAddOneEvent(params)

    expected_goal = (
        "In Simple Calendar Pro, create a calendar event on"
        f" {year}-{month:02d}-{day:02d} at {hour}h with the title '{title}' and"
        f" the description '{description}'. The event should last for 10 mins."
    )
    self.assertEqual(task.goal, expected_goal)


class TestSimpleCalendarAddOneEventRelativeDay(CalendarEventTestSetup):

  @parameterized.named_parameters(
      ("start of range", 16, "Monday"), ("end of range", 21, "Saturday")
  )
  @mock.patch.object(events_generator, "generate_event")
  def test_goal_and_schema(self, day, day_of_week, mock_generate_event):
    start_time = datetime_utils._create_unix_ts(
        day=day,
        hour=8,
        month=10,
        year=2023,
        timezone="UTC",
    )
    event = sqlite_schema_utils.CalendarEvent(
        start_ts=start_time,
        end_ts=start_time + 10 * 60,
        title="A Title",
        description="A Description",
    )

    mock_generate_event.side_effect = _sample_events(event)

    params = (
        calendar.SimpleCalendarAddOneEventRelativeDay.generate_random_params()
    )
    task = calendar.SimpleCalendarAddOneEventRelativeDay(params)

    self.assertEqual(
        task.goal,
        "In Simple Calendar Pro, create a calendar event for this"
        f" {day_of_week} at 8h with the title 'A Title' and the description 'A"
        " Description'. The event should last for 10 mins.",
    )


class TestSimpleCalendarAddOneEventInTwoWeeks(CalendarEventTestSetup):

  def test_is_successful(self):
    param = calendar.SimpleCalendarDeleteOneEvent.generate_random_params()
    task = calendar.SimpleCalendarDeleteOneEvent(param)
    self.mock_list_rows.side_effect = [
        param["row_objects"] + param["noise_row_objects"],
        [],
    ]
    task.initialize_task(self.env)
    result = task.is_successful(self.env)
    self.assertEqual(result, 1)


class TestSimpleCalendarDeleteEventsOnRelativeDay(CalendarEventTestSetup):

  def test_generic_random_params(self):
    param = (
        calendar.SimpleCalendarDeleteEventsOnRelativeDay.generate_random_params()
    )
    events: list[sqlite_schema_utils.CalendarEvent] = cast(
        list[sqlite_schema_utils.CalendarEvent], param["row_objects"]
    ).copy()
    self.assertLen(events, 2)


class TestSimpleCalendarAddRepeatingEvent(CalendarEventTestSetup):

  @mock.patch.object(
      calendar_utils, "generate_simple_calendar_weekly_repeat_rule"
  )
  @mock.patch.object(events_generator, "generate_event")
  def test_generate_random_params_for_repeat_interval(
      self, mock_generate_event, mock_generate_rule
  ):
    mock_generate_rule.return_value = 2
    mock_generate_event.side_effect = _sample_events(
        sqlite_schema_utils.CalendarEvent(
            start_ts=datetime_utils.create_random_october_2023_unix_ts(),
            end_ts=datetime_utils.create_random_october_2023_unix_ts(),
            title="A Title",
            description="A Description",
            repeat_rule=0,
            repeat_interval=1,
        )
    )

    result = calendar.SimpleCalendarAddRepeatingEvent.generate_random_params()

    self.assertIn(result["row_objects"][0].repeat_rule, [0, 2])
    self.assertIn(
        result["row_objects"][0].repeat_interval,
        calendar._REPEAT_INTERVALS.values(),
    )


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from absl.testing import absltest
from absl.testing import parameterized
from android_world.task_evals.single.calendar import calendar_utils


class TestTimestampToLocalDatetime(parameterized.TestCase):

  @parameterized.parameters([
      ('Sunday', 7, 64),
      ('Monday', 1, 1),
      ('Tuesday', 2, 2),
      ('Wednesday', 3, 4),
      ('Thursday', 4, 8),
      ('Friday', 5, 16),
      ('Saturday', 6, 32),
  ])
  def test_valid_days(self, name: str, day_of_week: int, expected: int):
    result = calendar_utils.generate_simple_calendar_weekly_repeat_rule(
        day_of_week
    )
    self.assertEqual(result, expected, f'Test failed for {name}')


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Evaluators for Simple Calendar Pro.

They look at the underlying state of the sqlite database.
"""

from android_world.task_evals.common_validators import sqlite_validators
from android_world.task_evals.utils import sqlite_schema_utils


def validate_event_removal_integrity(
    before: list[sqlite_schema_utils.CalendarEvent],
    after: list[sqlite_schema_utils.CalendarEvent],
    event_ids: list[int],
) -> bool:
  """Validates that events have been removed from the event list.

  See `sqlite_evaluators.validate_rows_removal_integrity` for details.

  Args:
    before: State of the events before removal, as a list of event tuples.
    after: State of the events after attempted removal, as a list of event
      tuples.
    event_ids: IDs of the events expected to be removed.

  Returns:
    True if specified events are removed and the integrity of the event list is
    maintained; False if any specified events are not removed, if any
    non-specified events are missing, or if new events have been added.
  """
  return sqlite_validators.validate_rows_removal_integrity(
      before, after, event_ids, 'id'
  )


def validate_event_addition_integrity(
    before: list[sqlite_schema_utils.CalendarEvent],
    after: list[sqlite_schema_utils.CalendarEvent],
    reference_events: list[sqlite_schema_utils.CalendarEvent],
    extras_compare: list[str] | None = None,
) -> bool:
  """Validates that specific events have been added correctly without side effects.

  By default, checks the following fields:
    - start_ts
    - end_ts
    - title  # Uses fuzzy match.
    - location  # Uses fuzzy match.
    - description  # Uses fuzzy match.

  Additional fields can be checked with `extras_compare`.

  Args:
      before: The state of the events before the addition.
      after: The state of the events after the attempted addition.
      reference_events: A list of events that are expected to be added.
      extras_compare: Additional fields to compare, if any.

  Returns:
      bool: True if the events were added correctly and other events remained
      unaltered. False otherwise.
  """

  # Default fields to compare
  compare_fields = [
      'start_ts',
      'end_ts',
      'title',
      'location',
      'description',
  ]
  free_form_fields = ['title', 'location', 'description']
  if extras_compare:
    compare_fields += extras_compare
  return sqlite_validators.validate_rows_addition_integrity(
      before, after, reference_events, compare_fields, free_form_fields
  )


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Module for generating realistic calendar events.

It includes functions to generate event titles and descriptions using
predefined lists of titles, names, subjects, actions, and additional notes.
"""

import random
from android_world.task_evals.utils import sqlite_schema_utils


# Titles and Subjects for the event title generation
TITLES_PREFIXES = [
    'Meeting with',
    'Call with',
    'Workshop on',
    'Appointment for',
    'Catch up on',
    'Review session for',
]
NAMES = ['Alice', 'Bob', 'the Team', 'HR', 'Dr. Smith', 'Marketing']
SUBJECTS = ['Project X', 'Annual Report', 'Budget Planning', 'Campaign']

# Actions and Subjects Descriptions for the event description generation
ACTIONS = [
    'discuss',
    'finalize',
    'plan',
    'celebrate',
    'prepare for',
    'review',
    'explore',
    'understand',
    'organize',
    'strategize about',
]
SUBJECTS_DESCRIPTIONS = [
    'upcoming project milestones',
    'marketing strategies',
    'annual budget',
    'product launch',
    'team roles',
    'client feedback',
    'contract details',
    'software updates',
    'business objectives',
]
ADDITIONAL_NOTES = [
    'Please bring relevant documents.',
    'Remember to confirm attendance.',
    "Let's be punctual.",
    'Looking forward to productive discussions.',
    'Snacks will be provided.',
]


def generate_event(start_time: int) -> sqlite_schema_utils.CalendarEvent:
  """Generates a realistic calendar event.

  Args:
    start_time: The time to start the event. A Unix timestamp

  Returns:
    The event with random parameters.
  """
  end_time = start_time + (random.choice([15, 30, 45, 60]) * 60)
  return sqlite_schema_utils.CalendarEvent(
      start_ts=start_time,
      end_ts=end_time,
      title=generate_event_title(),
      description=generate_event_description(),
  )


def generate_event_title() -> str:
  """Generates a realistic event title."""
  title = random.choice(TITLES_PREFIXES)

  if 'with' in title:
    title += f' {random.choice(NAMES)}'
  else:
    title += f' {random.choice(SUBJECTS)}'

  return title


def generate_event_description() -> str:
  """Generates a realistic event description."""
  description = (
      'We will'
      f' {random.choice(ACTIONS)} {random.choice(SUBJECTS_DESCRIPTIONS)}.'
  )

  if random.choice([False, True]):
    description += f' {random.choice(ADDITIONAL_NOTES)}'

  return description


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tasks for Simple Calendar Pro app."""

import dataclasses
import random
from typing import Any, Callable, Optional
from android_world.env import device_constants
from android_world.task_evals.common_validators import sqlite_validators
from android_world.task_evals.single.calendar import calendar_evaluators
from android_world.task_evals.single.calendar import calendar_utils
from android_world.task_evals.single.calendar import events_generator
from android_world.task_evals.utils import sqlite_schema_utils
from android_world.utils import datetime_utils

# Keys in generated parameters and used to populate goal template.
_YEAR = "year"
_MONTH = "month"
_DAY = "day"
_DAY_OF_WEEK = "day_of_week"
_HOUR = "hour"
EVENT_TITLE = "event_title"
_EVENT_DESCRIPTION = "event_description"
_DURATION_MINS = "duration_mins"
_REPEAT_INTERVAL = "repeat_rule"
_REPEAT_INTERVALS = {"daily": 60 * 60 * 24, "weekly": 60 * 60 * 24 * 7}


def generate_noise_events(
    target_events: list[sqlite_schema_utils.CalendarEvent],
    n: int,
    filter_fn: Optional[
        Callable[[sqlite_schema_utils.CalendarEvent], bool]
    ] = None,
) -> list[sqlite_schema_utils.CalendarEvent]:
  if filter_fn is None:
    target_titles = set(event.title for event in target_events)
    filter_fn = lambda candidate: candidate.title not in target_titles

  return sqlite_schema_utils.get_random_items(
      n,
      lambda: events_generator.generate_event(
          datetime_utils.create_random_october_2023_unix_ts(start_day=1)
      ),
      filter_fn=filter_fn,
  )


class _SimpleCalendar(sqlite_validators.SQLiteApp):
  """Base class for calendar tasks and evaluation logic.

                  October 2023
              Su Mo Tu We Th Fr Sa
              1  2  3  4  5  6  7
              8  9 10 11 12 13 14
              [15]16 17 18 19 20 21
              22 23 24 25 26 27 28
              29 30 31

  The current date on the emulator will be set as October 15, 2023.
  """

  app_name_with_db = "simple calendar pro"
  app_names = ("simple calendar pro",)
  schema = {}

  db_key = "id"
  db_path = calendar_utils.DB_PATH
  table_name = calendar_utils.EVENTS_TABLE
  row_type = sqlite_schema_utils.CalendarEvent


class SimpleCalendarAddOneEvent(
    sqlite_validators.AddMultipleRows, _SimpleCalendar
):
  """Task for creating a calendar event in Simple Calendar Pro.

  Uses the absolute date in the template.
  """

  n_rows = 1  # Unused, but required by base class.
  complexity = 2
  template = (
      "In Simple Calendar Pro, create a calendar event on {year}-{month}-{day}"
      " at {hour}h with the title '{event_title}' and the description"
      " '{event_description}'. The event should last for {duration_mins} mins."
  )

  @classmethod
  def _get_random_target_row(cls) -> sqlite_schema_utils.CalendarEvent:
    """Generates a random calendar event."""
    return events_generator.generate_event(
        datetime_utils.create_random_october_2023_unix_ts()
    )

  def validate_addition_integrity(
      self,
      before: list[sqlite_schema_utils.CalendarEvent],
      after: list[sqlite_schema_utils.CalendarEvent],
      reference_rows: list[sqlite_schema_utils.CalendarEvent],
  ) -> bool:
    """Validates the integrity of the event addition."""
    return calendar_evaluators.validate_event_addition_integrity(
        before,
        after,
        reference_rows,
        extras_compare=["repeat_rule", "repeat_interval"],
    )

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    """Generate random parameters for a new calendar event task."""
    event = cls._get_random_target_row()
    n_noise_events = random.randint(0, 20)
    return {
        _YEAR: device_constants.DT.year,
        _MONTH: device_constants.DT.month,
        _DAY: event.start_datetime.day,
        _HOUR: event.start_datetime.hour,
        _DURATION_MINS: event.duration_mins,
        EVENT_TITLE: event.title,
        _EVENT_DESCRIPTION: event.description,
        sqlite_validators.ROW_OBJECTS: [event],
        sqlite_validators.NOISE_ROW_OBJECTS: generate_noise_events(
            [event], n_noise_events
        ),
    }


class SimpleCalendarAddOneEventRelativeDay(SimpleCalendarAddOneEvent):
  """Task for creating a calendar event in Simple Calendar Pro.

  Uses the relative day of week in the template: from "this Monday" -> "this
  Sunday".
  """

  _DAY_RANGE = 6

  template = (
      "In Simple Calendar Pro, create a calendar event for this {day_of_week}"
      " at {hour}h with the title '{event_title}' and the description"
      " '{event_description}'. The event should last for {duration_mins} mins."
  )

  @property
  def goal(self) -> str:
    # Add day of week.
    dt: sqlite_schema_utils.CalendarEvent = self.params[
        sqlite_validators.ROW_OBJECTS
    ][0]
    day_of_week = dt.start_datetime.strftime("%A")
    self.params[_DAY_OF_WEEK] = day_of_week
    return self.template.format(**self.params)

  @classmethod
  def _get_random_target_row(cls):
    return events_generator.generate_event(
        datetime_utils.create_random_october_2023_unix_ts(
            # Monday, Oct 16 -> Saturday, Oct 21.
            start_day=device_constants.DT.day + 1,
            end_day=(
                device_constants.DT.day
                + SimpleCalendarAddOneEventRelativeDay._DAY_RANGE
            ),
        )
    )


class SimpleCalendarAddOneEventTomorrow(SimpleCalendarAddOneEvent):
  """Task for creating a calendar event in Simple Calendar Pro for tomorrow."""

  template = (
      "In Simple Calendar Pro, create a calendar event for tomorrow"
      " at {hour}h with the title '{event_title}' and the description"
      " '{event_description}'. The event should last for {duration_mins} mins."
  )

  @classmethod
  def _get_random_target_row(cls):
    # Generate an event for tomorrow.
    return events_generator.generate_event(
        datetime_utils.create_random_october_2023_unix_ts(
            device_constants.DT.day + 1, device_constants.DT.day + 1
        )
    )


class SimpleCalendarAddOneEventInTwoWeeks(SimpleCalendarAddOneEvent):
  """Task for creating a calendar event in Simple Calendar Pro in two weeks from today."""

  template = (
      "In Simple Calendar Pro, create a calendar event in two weeks from today"
      " at {hour}h with the title '{event_title}' and the description"
      " '{event_description}'. The event should last for {duration_mins} mins."
  )

  @classmethod
  def _get_random_target_row(cls):
    return events_generator.generate_event(
        datetime_utils.create_random_october_2023_unix_ts(
            device_constants.DT.day + 14, device_constants.DT.day + 14
        )
    )


class SimpleCalendarAddRepeatingEvent(SimpleCalendarAddOneEvent):
  """Task for creating a repeating calendar event in Simple Calendar Pro."""

  complexity = 2
  template = (
      "In Simple Calendar Pro, create a recurring calendar event titled"
      " '{event_title}' starting on {year}-{month}-{day} at"
      " {hour}h. The event recurs {repeat_rule}, forever, and lasts for"
      " {duration_mins} minutes each occurrence. The event description should"
      " be '{event_description}'."
  )

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    """Generate random parameters for a new calendar event task."""
    template = cls._get_random_target_row()
    repeat_interval = random.choice(list(_REPEAT_INTERVALS))
    if repeat_interval == "weekly":
      repeat_rule = calendar_utils.generate_simple_calendar_weekly_repeat_rule(
          template.start_datetime.isoweekday()
      )
    else:
      repeat_rule = 0
    event = dataclasses.replace(
        template,
        repeat_interval=_REPEAT_INTERVALS[repeat_interval],
        repeat_rule=repeat_rule,
    )
    noise_events = generate_noise_events([event], random.randint(0, 20))
    return {
        _YEAR: device_constants.DT.year,
        _MONTH: device_constants.DT.month,
        _DAY: event.start_datetime.day,
        _HOUR: event.start_datetime.hour,
        _DURATION_MINS: event.duration_mins,
        EVENT_TITLE: event.title,
        _EVENT_DESCRIPTION: event.description,
        sqlite_validators.ROW_OBJECTS: [event],
        sqlite_validators.NOISE_ROW_OBJECTS: noise_events,
        _REPEAT_INTERVAL: repeat_interval,
    }


class SimpleCalendarDeleteEvents(
    sqlite_validators.DeleteMultipleRows, _SimpleCalendar
):
  """Task to delete multiple calendar events in Simple Calendar Pro.

  Uses the absolute date in the template.
  """

  n_rows = 3
  n_rows_noise = 20
  complexity = 3
  template = (
      "In Simple Calendar Pro, delete all the calendar events on"
      " {year}-{month}-{day}"
  )

  def validate_deletion_integrity(
      self,
      before: list[sqlite_schema_utils.CalendarEvent],
      after: list[sqlite_schema_utils.CalendarEvent],
  ) -> bool:
    """Validates the integrity of the event deletion."""
    return calendar_evaluators.validate_event_removal_integrity(
        before, after, [r.id for r in self.rows_to_delete]
    )

  @classmethod
  def _get_random_target_row(cls, day: int):
    return events_generator.generate_event(
        datetime_utils.create_random_october_2023_unix_ts(
            start_day=day, end_day=day
        )
    )

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    """Generate random parameters for a remove calendar event task."""
    template = events_generator.generate_event(
        datetime_utils.create_random_october_2023_unix_ts()
    )
    events = [
        cls._get_random_target_row(template.start_datetime.day)
        for _ in range(cls.n_rows)
    ]
    noise_events = generate_noise_events(
        events,
        cls.n_rows_noise,
        filter_fn=lambda candidate: candidate.start_datetime.day
        not in (target.start_datetime.day for target in events),
    )
    return {
        _YEAR: device_constants.DT.year,
        _MONTH: device_constants.DT.month,
        _DAY: template.start_datetime.day,
        sqlite_validators.ROW_OBJECTS: events,
        sqlite_validators.NOISE_ROW_OBJECTS: noise_events,
    }


class SimpleCalendarDeleteOneEvent(SimpleCalendarDeleteEvents):
  """Task to delete a single calendar event in Simple Calendar Pro.

  Uses the absolute date in the template.
  """

  n_rows = 1
  complexity = 2
  template = (
      "In Simple Calendar Pro, delete the calendar event on"
      " {year}-{month}-{day} at {hour}h with the title '{event_title}'"
  )

  @classmethod
  def _get_random_target_row(cls):
    return events_generator.generate_event(
        datetime_utils.create_random_october_2023_unix_ts()
    )

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    """Generate random parameters for a remove calendar event task."""
    event = cls._get_random_target_row()
    noise_events = generate_noise_events(
        [event],
        cls.n_rows_noise,
        filter_fn=(
            lambda candidate: (candidate.start_datetime != event.start_datetime)
            and (candidate.title != event.title)
        ),
    )
    return {
        _YEAR: device_constants.DT.year,
        _MONTH: device_constants.DT.month,
        _DAY: event.start_datetime.day,
        _HOUR: event.start_datetime.hour,
        _DURATION_MINS: event.duration_mins,
        EVENT_TITLE: event.title,
        _EVENT_DESCRIPTION: event.description,
        sqlite_validators.ROW_OBJECTS: [event],
        sqlite_validators.NOISE_ROW_OBJECTS: noise_events,
    }


class SimpleCalendarDeleteEventsOnRelativeDay(SimpleCalendarDeleteEvents):
  """Task for deleting calendar events for day_of_week in Simple Calendar Pro.

  Uses the relative day of week in the template: from "this Monday" -> "this
  Sunday".
  """

  n_rows = 2
  _DAY_RANGE: int = 6

  template = (
      "In Simple Calendar Pro, delete all events scheduled for this"
      " {day_of_week}."
  )

  @classmethod
  def _get_random_target_row(cls, day: int):
    return events_generator.generate_event(
        datetime_utils.create_random_october_2023_unix_ts(
            start_day=day, end_day=day
        )
    )

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    """Generate random parameters for a remove calendar event task."""
    template = events_generator.generate_event(
        datetime_utils.create_random_october_2023_unix_ts(
            # Monday, Oct 16 -> Saturday, Oct 21.
            start_day=device_constants.DT.day + 1,
            end_day=device_constants.DT.day + cls._DAY_RANGE,
        )
    )
    events = [
        cls._get_random_target_row(template.start_datetime.day)
        for _ in range(cls.n_rows)
    ]
    noise_events = generate_noise_events(
        events,
        cls.n_rows_noise,
        filter_fn=lambda candidate: candidate.start_datetime.day
        not in (target.start_datetime.day for target in events),
    )
    return {
        _YEAR: device_constants.DT.year,
        _MONTH: device_constants.DT.month,
        _DAY: template.start_datetime.day,
        _DAY_OF_WEEK: template.start_datetime.strftime("%A"),
        sqlite_validators.ROW_OBJECTS: events,
        sqlite_validators.NOISE_ROW_OBJECTS: noise_events,
    }


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Logic for checking file changes using `adb shell`."""

import os
from typing import Any
from absl import logging
from android_world.env import adb_utils
from android_world.env import interface
from android_world.task_evals import task_eval
from android_world.task_evals.utils import user_data_generation
from android_world.utils import file_utils
from android_world.utils import fuzzy_match_lib


class MoveFile(task_eval.TaskEval):
  """For checking that a file has been moved."""

  app_names = ("",)
  complexity = None
  schema = {
      "type": "object",
      "properties": {
          "file_name": {"type": "string"},
          "source_folder": {"type": "string"},
          "destination_folder": {"type": "string"},
      },
      "required": ["file_name", "source_folder", "destination_folder"],
  }
  template = ""

  def __init__(self, params: dict[str, Any], data_directory: str):
    """Initialize the task."""
    super().__init__(params)
    self.source_directory = os.path.join(
        data_directory, self.params["source_folder"]
    )
    self.dest_directory = os.path.join(
        data_directory, self.params["destination_folder"]
    )

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    """Creates the file in the source folder, ensuring it exists before the move operation."""
    super().initialize_task(env)
    user_data_generation.clear_device_storage(env)
    user_data_generation.generate_noise_files(
        self.params["file_name"],
        self.source_directory,
        env.controller,
        self.params["noise_candidates"],
    )
    file_utils.create_file(
        self.params["file_name"], self.source_directory, env.controller
    )
    file_utils.mkdir(self.dest_directory, env.controller)

    if not file_utils.check_file_or_folder_exists(
        self.params["file_name"], self.source_directory, env.controller
    ):
      raise RuntimeError("File was not created in the source folder.")
    if file_utils.check_file_or_folder_exists(
        self.params["file_name"], self.dest_directory, env.controller
    ):
      raise RuntimeError(
          "Something went wrong. File somehow already exists in the destination"
          " folder."
      )

  def tear_down(self, env: interface.AsyncEnv):
    super().tear_down(env)
    user_data_generation.clear_device_storage(env)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    """Check if the file has been moved successfully."""
    super().is_successful(env)
    src_exists = file_utils.check_file_or_folder_exists(
        self.params["file_name"], self.source_directory, env.controller
    )
    dest_exists = file_utils.check_file_or_folder_exists(
        self.params["file_name"], self.dest_directory, env.controller
    )
    succeeded = not src_exists and dest_exists
    return 1.0 if succeeded else 0.0

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    return {}


class DeleteFile(task_eval.TaskEval):
  """For checking that a file has been deleted."""

  app_names = ("",)
  complexity = None
  schema = {
      "type": "object",
      "properties": {
          "file_name": {"type": "string"},
          "subfolder": {"type": "string"},
      },
      "required": ["file_name"],
  }
  template = ""

  def __init__(self, params: dict[str, Any], data_directory: str):
    """Extends base class with data_directory.

    Args:
      params: See base class.
      data_directory: The parent directory to operate in.
    """
    super().__init__(params)
    if "subfolder" in self.params:
      self.data_directory = os.path.join(
          data_directory, self.params["subfolder"]
      )
    else:
      self.data_directory = data_directory

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    """Creates file that should be deleted, along with random files."""
    super().initialize_task(env)
    user_data_generation.clear_device_storage(env)

    file_utils.create_file(
        self.params["file_name"], self.data_directory, env.controller
    )
    user_data_generation.generate_noise_files(
        self.params["file_name"],
        self.data_directory,
        env.controller,
        self.params["noise_candidates"],
    )
    if not file_utils.check_file_or_folder_exists(
        self.params["file_name"], self.data_directory, env.controller
    ):
      raise RuntimeError("Something went wrong, file was not created.")

  def tear_down(self, env: interface.AsyncEnv) -> None:
    super().tear_down(env)
    user_data_generation.clear_device_storage(env)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    exists = file_utils.check_file_or_folder_exists(
        self.params["file_name"], self.data_directory, env.controller
    )
    return 0.0 if exists else 1.0

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    return {}


class CreateFile(task_eval.TaskEval):
  """For checking that a new file has been created with a specific name and text."""

  app_names = ("",)
  complexity = None
  schema = {
      "type": "object",
      "properties": {
          "file_name": {"type": "string"},
          "text": {"type": "string"},
      },
      "required": ["file_name", "text"],
  }
  template = ""

  def __init__(self, params: dict[str, Any], data_directory: str):
    """Extends base class with data_directory.

    Args:
      params: See base class.
      data_directory: The parent directory to operate in.
    """
    super().__init__(params)
    self.data_directory = data_directory

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    user_data_generation.clear_device_storage(env)

  def tear_down(self, env: interface.AsyncEnv) -> None:
    super().tear_down(env)
    user_data_generation.clear_device_storage(env)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    file_name = self.params["file_name"]

    exists = file_utils.check_file_or_folder_exists(
        file_name, self.data_directory, env.controller
    )

    if not exists:
      logging.info("%s not found", file_name)
      return 0.0

    # Check the contents of the new file
    res = adb_utils.issue_generic_request(
        [
            "shell",
            "cat",
            os.path.join(self.data_directory, file_name),
        ],
        env.controller,
    )
    file_contents = res.generic.output.decode().strip()
    match = fuzzy_match_lib.fuzzy_match(file_contents, self.params["text"])
    if not match:
      logging.info("%s does not match %s", file_contents, self.params["text"])
      return 0.0

    return 1.0

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    return {}


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Logic for validating an SMS has been sent."""

import random

from absl import logging
from android_env import env_interface
from android_env.proto import adb_pb2
from android_world.env import adb_utils
from android_world.env import interface
from android_world.task_evals import task_eval
from android_world.task_evals.utils import user_data_generation
from android_world.utils import fuzzy_match_lib


def parse_message(row: str) -> dict[str, str]:
  """Parse a string representing a row of message data into a dictionary.

  The row should contain multiple key-value pairs separated by commas and an
  equal sign. The function specifically accounts for the 'body' field, which can
  contain commas, by handling it separately from other fields.

  Args:
    row (str): A string containing the row data, with key-value pairs separated
      by ",".

  Returns:
    A dictionary where the keys are the field names and the values are the
    respective field values from the row string.

  Example:
  >>> parse_message("Row: 0 _id=5, thread_id=5, body=Hello, World, read=1")
  {'Row': '0', '_id': '5', 'thread_id': '5', 'body': 'Hello, World', 'read':
  '1'}
  """
  parsed_dict = {}

  body_start = row.find("body=")

  if body_start != -1:
    body_content = row[body_start + 5 :]
    next_equal_sign = body_content.find("=")
    if next_equal_sign != -1:
      comma_before_next_equal_sign = body_content.rfind(
          ", ", 0, next_equal_sign
      )
      body_content = body_content[:comma_before_next_equal_sign]
    parsed_dict["body"] = body_content
    row = row[:body_start] + row[body_start + 5 + len(body_content) :]

  parts = row.split(", ")

  for part in parts:
    if "=" in part:
      key, value = part.split("=", 1)
      parsed_dict[key.strip()] = value.strip()
    elif ":" in part:
      key, value = part.split(":", 1)
      parsed_dict[key.strip()] = value.strip()
  return parsed_dict


def _decode_messages_from_response(response: adb_pb2.AdbResponse) -> list[str]:
  """Decodes the ADB response into a list of messages."""
  if response.generic.output.decode().startswith("No result found."):
    return []
  messages = response.generic.output.split(b"\nRow:")
  for i, m in enumerate(messages):
    if i > 0:
      messages[i] = b"Row:" + m
  return [m.decode() for m in messages]


def was_sent(
    messages: list[str],
    phone_number: str,
    body: str,
    current_time_ms: int,
    time_mins: int = 5,
) -> bool:
  """Checks if a message was sent within the last time_mins minutes.

  Example:
    Given the `messages` list as, which are from `adb shell content query --uri
    content://sms/sent`:
    [
      'Row: 0 _id=2, address=+1111, date=1693421073675, body=Yo',
      'Row: 1 _id=1, address=+1111, date=1693421026207, body=Hi'
    ]
    `message_was_sent(messages, "+1111", "Yo")` would return True if the
    current time is within 5 minutes of `date=1693421073675`

  Args:
    messages: A list of message records returned by ADB shell content query,
      each as a string.
    phone_number: The target phone number or address to check the message
      against.
    body: The message body text to check for.
    current_time_ms: The current time, used to determine message staleness.
    time_mins: The time window in minutes within which to look for the message.

  Returns:
    Whether is was sent or not.
  """
  n_minutes_ms = time_mins * 60 * 1000
  for message in messages:
    # Extract the relevant fields from the ADB query result
    fields = parse_message(message)
    try:
      # Number can contain spaces and dashes, remove before comparing.
      msg_number = fields["address"].replace("-", "").replace(" ", "")
      msg_body = fields["body"]
      msg_date = int(fields["date"])
    except KeyError as key_error:
      raise ValueError(
          "Could not find the address, body, and date fields for message:"
          f" {message}"
      ) from key_error

    if (
        msg_number == phone_number
        and fuzzy_match_lib.fuzzy_match(msg_body, body)
        and (current_time_ms - msg_date <= n_minutes_ms)
    ):
      return True
    elif msg_number == phone_number and fuzzy_match_lib.fuzzy_match(
        msg_body, body
    ):
      logging.info(
          "The message was sent, but was sent over %i ago.", n_minutes_ms
      )

  return False


def sms_are_equal(message1: str, message2: str) -> bool:
  """Checks if two messages are equal.

  A message is equal to another if its address and body fields are equal.
  Args:
   message1: The first message to compare
   message2: The second message to compare

  Returns:
    Whether the messages are equal or not.
  """
  # Extract the relevant fields from the ADB query result
  message1_fields = parse_message(message1)
  message2_fields = parse_message(message2)
  phone_number1 = message1_fields["address"].replace("-", "").replace(" ", "")
  phone_number2 = message2_fields["address"].replace("-", "").replace(" ", "")
  return phone_number1 == phone_number2 and fuzzy_match_lib.fuzzy_match(
      message1_fields["body"], message2_fields["body"]
  )


def clear_sms_and_threads(env: env_interface.AndroidEnvInterface) -> None:
  """Removes all messages from UI by clearing the sms and threads tables."""
  db_path = "/data/data/com.android.providers.telephony/databases/mmssms.db"
  adb_utils.execute_sql_command(db_path, "DELETE FROM sms;", env)
  adb_utils.execute_sql_command(db_path, "DELETE FROM threads;", env)


class SimpleSMSSendSms(task_eval.TaskEval):
  """Task for checking that a single text message has been sent to a specific number with a specific message.

  It checks the sms table in
  /data/data/com.android.providers.telephony/databases/mmssms.db.

  While this technique is app agnostic, the template task specifies Simple SMS
  Pro as the target messaging app instead the default Android messaging app.
  The Android messaging app UI does not immediately reflect db state changes. We
  use Simple SMS Messenger due to its reliable and immediate UI synchronization
  with direct SQLite `sms` table manipulations, eliminating the hidden caching
  issues observed in the default messaging app.
  """

  app_names = ("simple sms messenger",)
  complexity = 1
  schema = {
      "type": "object",
      "properties": {
          "number": {"type": "string"},
          "message": {"type": "string"},
      },
      "required": ["number", "message"],
  }
  template = ""

  messages = user_data_generation.RANDOM_SENTENCES

  def get_sent_messages(
      self, env: env_interface.AndroidEnvInterface
  ) -> list[str]:
    response = adb_utils.issue_generic_request(
        "shell content query --uri content://sms/sent".split(), env
    )
    return _decode_messages_from_response(response)

  def _get_received_messages(
      self, env: env_interface.AndroidEnvInterface
  ) -> list[str]:
    response = adb_utils.issue_generic_request(
        "shell content query --uri content://sms/inbox".split(), env
    )
    return _decode_messages_from_response(response)

  # Returns the time on the android env in milliseconds.
  def get_android_time(self, env: env_interface.AndroidEnvInterface) -> int:
    adb_output = adb_utils.issue_generic_request(
        ["shell", "date", "+%s"], env
    )  # Fetch UNIX timestamp from Android
    return int(adb_output.generic.output.strip()) * 1000

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    adb_utils.toggle_airplane_mode("off", env.controller)
    clear_sms_and_threads(env.controller)
    android_time = self.get_android_time(env.controller)

    messages = self.get_sent_messages(env.controller)
    logging.info("During initialize_task, messages: %s", messages)
    if was_sent(
        messages,
        phone_number=self.params["number"],
        body=self.params["message"],
        current_time_ms=android_time,
    ):
      raise ValueError(
          "Message has already been sent, evaluator is not currently able to"
          " dedup. Please wait some time, change the goal message, or decrease "
          "the time param in sms_was_sent."
      )

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    messages = self.get_sent_messages(env.controller)
    logging.info("During is_successful, messages: %s", messages)
    sms_was_sent = was_sent(
        messages,
        phone_number=self.params["number"],
        body=self.params["message"],
        current_time_ms=self.get_android_time(env.controller),
    )
    in_correct_app = (
        adb_utils.extract_package_name(
            adb_utils.get_current_activity(env.controller)[0]
        )
        == "com.simplemobiletools.smsmessenger"
    )
    return 1.0 if sms_was_sent and in_correct_app else 0.0

  @classmethod
  def generate_random_params(cls) -> dict[str, str | int]:
    number = user_data_generation.generate_random_number()
    message = random.choice(SimpleSMSSendSms.messages)

    return {
        "number": number,
        "message": message,
    }


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sqlite3
from absl.testing import absltest
from android_world.task_evals.common_validators import sqlite_validators
from android_world.task_evals.utils import sqlite_schema_utils
from android_world.task_evals.utils import sqlite_test_utils
from android_world.task_evals.utils import sqlite_utils
from android_world.utils import datetime_utils


def remove_event_by_event_id(db_path: str, event_id: int):
  """Remove an event by its ID."""
  conn = sqlite3.connect(db_path)
  cursor = conn.cursor()
  cursor.execute('DELETE FROM events WHERE id=?', (event_id,))
  conn.commit()
  conn.close()


def add_event_to_db(db_path: str, event: sqlite_schema_utils.CalendarEvent):
  """Adds a new event to the database."""
  conn = sqlite3.connect(db_path)

  insert_command, values = sqlite_schema_utils.insert_into_db(
      event, 'events', 'id'
  )
  cursor = conn.cursor()
  cursor.execute(insert_command, values)

  conn.commit()
  conn.close()


def _validate_event_addition_integrity(
    before: list[sqlite_schema_utils.CalendarEvent],
    after: list[sqlite_schema_utils.CalendarEvent],
    reference_events: list[sqlite_schema_utils.CalendarEvent],
) -> bool:
  return sqlite_validators.validate_rows_addition_integrity(
      before,
      after,
      reference_events,
      [
          'start_ts',
          'end_ts',
          'title',
          'location',
          'description',
      ],
      ['title', 'location', 'description'],
  )


class TestRemoveEvent(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.test_db_path = sqlite_test_utils.setup_test_db()

  def test_single_event_removed_correctly(self):
    event_id = 1
    initial_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )
    remove_event_by_event_id(self.test_db_path, event_id)
    post_removal_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )
    self.assertTrue(
        sqlite_validators.validate_rows_removal_integrity(
            initial_state, post_removal_state, [event_id], 'id'
        )
    )

  def test_single_event_not_removed(self):
    event_id = 1
    initial_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )
    post_removal_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )
    self.assertFalse(
        sqlite_validators.validate_rows_removal_integrity(
            initial_state, post_removal_state, [event_id], 'id'
        )
    )

  def test_wrong_single_event_removed(self):
    initial_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )
    remove_event_by_event_id(self.test_db_path, 1)
    post_removal_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )
    self.assertFalse(
        sqlite_validators.validate_rows_removal_integrity(
            initial_state, post_removal_state, [2], 'id'
        )
    )

  def test_multiple_events_removed_correctly(self):
    event_ids = [2, 3]
    initial_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )
    for event_id in event_ids:
      remove_event_by_event_id(self.test_db_path, event_id)
    post_removal_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )
    self.assertTrue(
        sqlite_validators.validate_rows_removal_integrity(
            initial_state, post_removal_state, event_ids, 'id'
        )
    )

  def test_multiple_events_not_removed(self):
    event_ids = [2, 3]
    initial_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )
    post_removal_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )
    self.assertFalse(
        sqlite_validators.validate_rows_removal_integrity(
            initial_state, post_removal_state, event_ids, 'id'
        )
    )

  def test_remove_event_with_side_effects(self):
    # Test case: Remove events 4 and 5 but check only for event 4.
    initial_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )

    # Remove events 4 and 5
    remove_event_by_event_id(self.test_db_path, 4)
    remove_event_by_event_id(self.test_db_path, 5)

    post_removal_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )

    # Verify that while event 4 was removed, 5 was also removed meaning
    # there was an unintentional side-effect.
    self.assertFalse(
        sqlite_validators.validate_rows_removal_integrity(
            initial_state,
            post_removal_state,
            [4],
            'id',
        )
    )

  def test_event_not_in_before(self):
    initial_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )
    with self.assertRaises(ValueError):
      sqlite_validators.validate_rows_removal_integrity(
          initial_state, initial_state, [-999], 'id'
      )


class TestAddEvent(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.test_db_path = sqlite_test_utils.setup_test_db()

  def test_single_event_added_correctly(self):
    new_event = sqlite_schema_utils.CalendarEvent(
        start_ts=datetime_utils._create_unix_ts(
            year=2023, month=10, day=6, hour=9
        ),
        end_ts=datetime_utils._create_unix_ts(
            year=2023, month=10, day=6, hour=10
        ),
        title='Coffee',
        location='Cafe',
        description='Coffee with Alex',
    )

    initial_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )
    add_event_to_db(self.test_db_path, new_event)
    post_addition_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )

    self.assertTrue(
        _validate_event_addition_integrity(
            initial_state, post_addition_state, [new_event]
        )
    )

  def test_multiple_events_added_correctly(self):
    new_events = [
        sqlite_schema_utils.CalendarEvent(
            start_ts=datetime_utils._create_unix_ts(
                year=2023, month=10, day=6, hour=11
            ),
            end_ts=datetime_utils._create_unix_ts(
                year=2023, month=10, day=6, hour=12
            ),
            title='Lunch',
            location='Restaurant',
            description='Lunch with Bob',
        ),
        sqlite_schema_utils.CalendarEvent(
            start_ts=datetime_utils._create_unix_ts(
                year=2023, month=10, day=7, hour=14
            ),
            end_ts=datetime_utils._create_unix_ts(
                year=2023, month=10, day=7, hour=15
            ),
            title='Meeting',
            location='Office',
            description='Project meeting',
        ),
    ]

    initial_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )
    for event in new_events:
      add_event_to_db(self.test_db_path, event)
    post_addition_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )

    self.assertTrue(
        _validate_event_addition_integrity(
            initial_state, post_addition_state, new_events
        )
    )

  def test_no_event_added(self):
    initial_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )
    post_addition_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )
    self.assertTrue(
        _validate_event_addition_integrity(
            initial_state, post_addition_state, []
        )
    )

  def test_wrong_event_added(self):
    event1 = sqlite_schema_utils.CalendarEvent(
        start_ts=datetime_utils._create_unix_ts(
            year=2023, month=10, day=6, hour=9
        ),
        end_ts=datetime_utils._create_unix_ts(
            year=2023, month=10, day=6, hour=10
        ),
        title='Coffee',
        location='Cafe',
        description='Coffee with Alex',
    )
    event2 = sqlite_schema_utils.CalendarEvent(
        start_ts=datetime_utils._create_unix_ts(
            year=2023, month=10, day=6, hour=9
        ),
        end_ts=datetime_utils._create_unix_ts(
            year=2023, month=10, day=6, hour=10
        ),
        title='Lunch',
        location='Eatery',
        description='Lunch with Joe',
    )

    initial_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )
    add_event_to_db(self.test_db_path, event1)
    post_addition_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )
    self.assertFalse(
        _validate_event_addition_integrity(
            initial_state, post_addition_state, [event2]
        )
    )

  def test_add_duplicate_event(self):
    new_event = sqlite_schema_utils.CalendarEvent(
        start_ts=datetime_utils._create_unix_ts(
            year=2023, month=10, day=6, hour=9
        ),
        end_ts=datetime_utils._create_unix_ts(
            year=2023, month=10, day=6, hour=10
        ),
        title='Coffee',
        location='Cafe',
        description='Coffee with Alex',
    )

    initial_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )
    add_event_to_db(self.test_db_path, new_event)
    # Add the same event again
    add_event_to_db(self.test_db_path, new_event)
    post_addition_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )

    # We expect this to fail if the event was added twice.
    self.assertFalse(
        _validate_event_addition_integrity(
            initial_state, post_addition_state, [new_event]
        )
    )

  def test_add_event_with_side_effects(self):
    event1 = sqlite_schema_utils.CalendarEvent(
        start_ts=datetime_utils._create_unix_ts(
            year=2023, month=10, day=6, hour=9
        ),
        end_ts=datetime_utils._create_unix_ts(
            year=2023, month=10, day=6, hour=10
        ),
        title='Coffee',
        location='Cafe',
        description='Coffee with Alex',
    )
    event2 = sqlite_schema_utils.CalendarEvent(
        start_ts=datetime_utils._create_unix_ts(
            year=2023, month=10, day=6, hour=9
        ),
        end_ts=datetime_utils._create_unix_ts(
            year=2023, month=10, day=6, hour=10
        ),
        title='Lunch',
        location='Eatery',
        description='Lunch with Joe',
    )

    initial_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )
    add_event_to_db(self.test_db_path, event1)
    add_event_to_db(self.test_db_path, event2)
    post_addition_state = sqlite_utils.execute_query(
        'SELECT * FROM events;',
        self.test_db_path,
        sqlite_schema_utils.CalendarEvent,
    )

    # We expect this to fail, since we added both event1 and event2.
    self.assertFalse(
        _validate_event_addition_integrity(
            initial_state, post_addition_state, [event1]
        )
    )


class TestVerifyPlaylist(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.device_playlist_rows = [
        sqlite_schema_utils.PlaylistInfo('Summer Hits', 'song1.mp3', 0),
        sqlite_schema_utils.PlaylistInfo('Summer Hits', 'song2.mp3', 1),
        sqlite_schema_utils.PlaylistInfo('Summer Hits', 'song3.mp3', 2),
    ]
    self.candidate_playlist_name = 'Summer Hits'
    self.candidate_files = ['song1.mp3', 'song2.mp3', 'song3.mp3']

  def test_playlist_matches(self):
    result = sqlite_validators.verify_playlist(
        self.device_playlist_rows,
        self.candidate_playlist_name,
        self.candidate_files,
    )
    self.assertTrue(result)

  def test_playlist_does_not_match_due_to_order(self):
    self.candidate_files = [
        'song1.mp3',
        'song3.mp3',
        'song2.mp3',
    ]
    result = sqlite_validators.verify_playlist(
        self.device_playlist_rows,
        self.candidate_playlist_name,
        self.candidate_files,
    )
    self.assertFalse(result)

  def test_playlist_does_not_match_due_to_name(self):
    self.candidate_playlist_name = 'Winter Hits'
    result = sqlite_validators.verify_playlist(
        self.device_playlist_rows,
        self.candidate_playlist_name,
        self.candidate_files,
    )
    self.assertFalse(result)

  def test_empty_device_playlist(self):
    result = sqlite_validators.verify_playlist(
        [], self.candidate_playlist_name, self.candidate_files
    )
    self.assertFalse(result)

  def test_empty_candidate_files(self):
    result = sqlite_validators.verify_playlist(
        self.device_playlist_rows, self.candidate_playlist_name, []
    )
    self.assertFalse(result)


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from unittest import mock
from absl.testing import absltest
from android_world.task_evals.common_validators import contacts_validators
from android_world.utils import contacts_utils
from android_world.utils import test_utils


class TestAddContact(test_utils.AdbEvalTestBase):
  """Tests for AddContact task evaluation."""

  def test_is_successful_when_contact_found(self):
    self.mock_list_contacts.return_value = [
        contacts_utils.Contact('Test Case', '1234'),
    ]

    env = mock.MagicMock()
    params = {'name': 'Test Case', 'number': '1234'}

    task = contacts_validators.AddContact(params)
    self.assertEqual(test_utils.perform_task(task, env), 1)

  def test_is_not_successful_when_contact_not_found(self):
    self.mock_list_contacts.return_value = []

    env = mock.MagicMock()
    params = {'name': 'Test Case', 'number': '1234'}

    task = contacts_validators.AddContact(params)
    self.assertEqual(test_utils.perform_task(task, env), 0)


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import time
from unittest import mock

from absl.testing import absltest
from android_env.proto import adb_pb2
from android_world.env import adb_utils
from android_world.task_evals.common_validators import sms_validators
from android_world.utils import test_utils


class TestSmsAreEqual(absltest.TestCase):

  def test_sms_are_equal(self):
    four_minutes_ago = int(time.time() * 1000) - 4 * 60 * 1000
    two_minutes_ago = int(time.time() * 1000) - 2 * 60 * 1000
    messages = [
        f'Row: 0 _id=1, address=1111, body=Hi, friend, date={four_minutes_ago}',
        f'Row: 1 _id=2, address=1111, body=Hi, friend, date={two_minutes_ago}',
    ]
    self.assertTrue(sms_validators.sms_are_equal(messages[0], messages[1]))

  def test_address_are_not_equal(self):
    four_minutes_ago = int(time.time() * 1000) - 4 * 60 * 1000
    messages = [
        f'Row: 0 _id=1, address=1111, body=Hi, friend, date={four_minutes_ago}',
        f'Row: 1 _id=2, address=1113, body=Hi, friend, date={four_minutes_ago}',
    ]
    self.assertFalse(sms_validators.sms_are_equal(messages[0], messages[1]))

  def test_body_are_not_equal(self):
    two_minutes_ago = int(time.time() * 1000) - 2 * 60 * 1000
    four_minutes_ago = int(time.time() * 1000) - 4 * 60 * 1000
    messages = [
        f'Row: 0 _id=1, address=1111, body=Hi, friend, date={two_minutes_ago}',
        f'Row: 1 _id=2, address=1111, body=Yo, friend, date={four_minutes_ago}',
    ]
    self.assertFalse(sms_validators.sms_are_equal(messages[0], messages[1]))


class TestMessageWasSent(absltest.TestCase):

  def test_valid_message(self):
    current_time = int(time.time() * 1000)
    # 5 minutes ago in milliseconds
    four_minutes_ago = int(time.time() * 1000) - 4 * 60 * 1000
    messages = [
        f'Row: 0 _id=1, address=1111, body=Hi, friend, date={four_minutes_ago}'
    ]
    self.assertTrue(
        sms_validators.was_sent(messages, '1111', 'Hi, friend', current_time, 5)
    )

  def test_expired_message(self):
    current_time = int(time.time() * 1000)
    # 10 minutes ago in milliseconds
    ten_minutes_ago = int(time.time() * 1000) - 10 * 60 * 1000
    messages = [f'Row: 0 _id=1, address=1111, body=Hi, date={ten_minutes_ago}']
    self.assertFalse(
        sms_validators.was_sent(messages, '1111', 'Hi', current_time, 5)
    )

  def test_invalid_address(self):
    current_time = int(time.time() * 1000)
    # 5 minutes ago in milliseconds
    five_minutes_ago = int(time.time() * 1000) - 4 * 60 * 1000
    messages = [f'Row: 0 _id=1, address=2222, body=Hi, date={five_minutes_ago}']
    self.assertFalse(
        sms_validators.was_sent(messages, '1111', 'Hi', current_time)
    )

  def test_invalid_body(self):
    current_time = int(time.time() * 1000)
    # 5 minutes ago in milliseconds
    five_minutes_ago = int(time.time() * 1000) - 4 * 60 * 1000
    messages = [
        f'Row: 0 _id=1, address=1111, body=Hello, date={five_minutes_ago}'
    ]
    self.assertFalse(
        sms_validators.was_sent(messages, '1111', 'Hi', current_time)
    )

  def test_fuzzy_matching(self):
    current_time = int(time.time() * 1000)
    # Assuming your fuzzy_match function returns True for 'Hi' and 'hi'
    # 5 minutes ago in milliseconds
    five_minutes_ago = int(time.time() * 1000) - 4 * 60 * 1000
    messages = [f'Row: 0 _id=1, address=1111, body=hi, date={five_minutes_ago}']
    self.assertTrue(
        sms_validators.was_sent(messages, '1111', 'Hi', current_time, 5)
    )


class TestMessagesSendTextMessage(test_utils.AdbEvalTestBase):

  def setUp(self):
    super().setUp()
    self.extract_package_name = mock.patch.object(
        adb_utils, 'extract_package_name'
    ).start()
    self.extract_package_name.return_value = (
        'com.simplemobiletools.smsmessenger'
    )

  def test_is_successful(self):
    # From shell date +%s
    mock_response_time = adb_pb2.AdbResponse()
    mock_response_time.generic.output = '{}'.format(
        str(int(time.time()))
    ).encode()

    # Make stale message.
    one_day_s = 24 * 60 * 60
    mock_response_sms0 = adb_pb2.AdbResponse()
    date0_ms = str(int((time.time() - one_day_s) * 1000))
    mock_response_sms0.generic.output = (
        'Row: 0, address=1234567890, body=Hello World, service_center=NULL,'
        ' date={}'.format(
            date0_ms
        ).encode()
    )

    # Successful message.
    mock_response_sms1 = adb_pb2.AdbResponse()
    date1_ms = str(int(time.time() * 1000))
    mock_response_sms1.generic.output = (
        'Row: 0, address=1234567890, body=Hello World, service_center=NULL,'
        ' date={}'.format(
            date1_ms
        ).encode()
    )

    self.mock_issue_generic_request.side_effect = [
        mock_response_time,
        mock_response_sms0,
        mock_response_sms1,
        mock_response_time,
    ]
    test_utils.log_mock_calls(self.mock_issue_generic_request)

    env = mock.MagicMock()
    params = {'number': '1234567890', 'message': 'Hello World'}

    task = sms_validators.SimpleSMSSendSms(params)
    self.assertEqual(test_utils.perform_task(task, env), 1)

    # Clear sms and threads tables.
    self.assertEqual(self.mock_execute_sql_command.call_count, 2)

  def test_initialize_task_message_already_sent(self):
    # From shell date +%s
    mock_response_time = adb_pb2.AdbResponse()
    mock_response_time.generic.output = '{}'.format(
        str(int(time.time()))
    ).encode()

    # Make stale message.
    one_s = 1
    mock_response_sms0 = adb_pb2.AdbResponse()
    date0_ms = str(int((time.time() - one_s) * 1000))
    mock_response_sms0.generic.output = (
        'Row: 0, address=1234567890, body=Hello World, service_center=NULL,'
        ' date={}'.format(
            date0_ms
        ).encode()
    )

    # Successful message.
    mock_response_sms1 = adb_pb2.AdbResponse()
    date1_ms = str(int(time.time() * 1000))
    mock_response_sms1.generic.output = (
        'Row: 0, address=1234567890, body=Hello World, service_center=NULL,'
        ' date={}'.format(
            date1_ms
        ).encode()
    )

    self.mock_issue_generic_request.side_effect = [
        mock_response_time,
        mock_response_sms0,
        mock_response_sms1,
    ]

    env = mock.MagicMock()

    params = {'number': '1234567890', 'message': 'Hello World'}

    task = sms_validators.SimpleSMSSendSms(params)
    with self.assertRaises(ValueError):
      task.initialize_task(env)
    # Clear sms and threads tables.
    self.assertEqual(self.mock_execute_sql_command.call_count, 2)


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Base class for task evaluations interacting with SQLite-based Android apps."""

import abc
import dataclasses
from typing import Any
from typing import Optional
from typing import Type
from absl import logging
from android_world.env import interface
from android_world.task_evals import task_eval
from android_world.task_evals.utils import sqlite_schema_utils
from android_world.task_evals.utils import sqlite_utils
from android_world.utils import fuzzy_match_lib


def verify_playlist(
    device_playlist_rows: list[sqlite_schema_utils.PlaylistInfo],
    candidate_playlist_name: str,
    candidate_files: list[str],
) -> bool:
  """Verifies if the playlist on the device matches the expected name, files, and their order.

  Args:
    device_playlist_rows: The playlist rows queried from the device.
    candidate_playlist_name: The expected name of the playlist.
    candidate_files: The list of expected media file names in the playlist.

  Returns:
    True if the actual playlist matches the expected criteria, False otherwise.
  """
  total = sum(
      1
      for actual_item in device_playlist_rows
      if fuzzy_match_lib.fuzzy_match(
          actual_item.playlist_name, candidate_playlist_name, ignore_case=True
      )
  )

  if total != len(candidate_files):
    return False

  matched_files = 0
  for index, expected_file in enumerate(candidate_files):
    if any(
        fuzzy_match_lib.fuzzy_match(
            actual_item.playlist_name, candidate_playlist_name, ignore_case=True
        )
        and actual_item.media_file_name == expected_file
        and (actual_item.order_in_playlist == index)
        for actual_item in device_playlist_rows
    ):
      matched_files += 1
    else:
      return False

  return matched_files == len(candidate_files)


def validate_rows_removal_integrity(
    before: list[sqlite_schema_utils.RowType],
    after: list[sqlite_schema_utils.RowType],
    ids: list[int],
    id_name: str,
) -> bool:
  """Validates that specified rows have been removed correctly from the rows list and that the remaining rows are unaltered.

  This function checks that all rows with IDs in `ids` are not present
  in the `after` state and that all other rows from the `before` state remain
  unchanged. It also ensures that no new rows have been inadvertently added.

  Args:
    before: State of the rows before removal.
    after: State of the rows after attempted removal.
    ids: IDs of the rows expected to be removed.
    id_name: The name of the ID column in the database.

  Returns:
    True if specified rows are removed and the integrity of the rows list is
    maintained; False if any specified rows are not removed, if any
    non-specified rows are missing, or if new rows have been added.
  """
  for row_id in ids:
    if not any(row for row in before if getattr(row, id_name) == row_id):
      raise ValueError(f"row ID {row_id} not present in before.")

  # Validate the removal and intactness of other rows
  for row in before:
    # If the row ID is in the list of removed row IDs
    if getattr(row, id_name) in ids:
      if row in after:
        return False
    elif row not in after:
      # Make sure we didn't remove other rows.
      return False

  # Check that no new unexpected rows have been added
  for row in after:
    if row not in before:
      return False

  return True


def validate_rows_addition_integrity(
    before: list[sqlite_schema_utils.RowType],
    after: list[sqlite_schema_utils.RowType],
    reference_rows: list[sqlite_schema_utils.RowType],
    compare_fields: list[str],
    free_form_fields: list[str] | None = None,
) -> bool:
  """Validates that specific rows have been added correctly without side effects.

  Checks that `reference_rows` are present in `after` and not in `before`, and
  that the rest of the rows in `before` remain unaltered in `after`. This
  validation ensures that no unrelated rows were added, removed, or changed in
  the process.

  Args:
    before: The state of the rows before the addition.
    after: The state of the rows after the attempted addition.
    reference_rows: A list of rows that are expected to be added.
    compare_fields: Which fields to use for comparison for each row.
    free_form_fields: Free-form, text fields where fuzzy matching will be used
      for comparison.

  Returns:
      bool: True if the rows were added correctly and other rows remained
      unaltered. False otherwise.
  """
  if not compare_fields:
    raise ValueError("compare_fields must not be empty.")
  if not free_form_fields:
    free_form_fields = []

  def db_row_matches_reference(
      reference_row: sqlite_schema_utils.RowType,
      row: sqlite_schema_utils.RowType,
  ) -> bool:
    for field in compare_fields:
      reference_value = getattr(reference_row, field)
      candidate_value = getattr(row, field)
      # Fuzzy match for text fields.
      if field in free_form_fields:
        if not fuzzy_match_lib.fuzzy_match(reference_value, candidate_value):
          return False
      else:
        if reference_value != candidate_value:
          return False
    return True

  # Check if the added rows are present in the 'after' state
  for reference_row in reference_rows:
    if not any(db_row_matches_reference(reference_row, row) for row in after):
      logging.warning(
          "Expected row %s not found in the 'after' state.", reference_row
      )
      return False

  if len(after) != len(before) + len(reference_rows):
    logging.warning(
        "The length of after %i is not equal to the length of before %i +"
        " length of added rows %i",
        len(after),
        len(before),
        len(reference_rows),
    )
    return False

  # Validate that no other rows were altered or removed during the addition
  for row in before:
    if row not in after:
      logging.warning(
          "row %s from 'before' state missing or altered in the 'after' state.",
          row,
      )
      return False

  return True


# Represents row objects to be added or deleted internally.
ROW_OBJECTS = "row_objects"
NOISE_ROW_OBJECTS = "noise_row_objects"


class SQLiteApp(task_eval.TaskEval, abc.ABC):
  """Base class for tasks interacting with SQLite-based Android apps."""

  app_name_with_db: str
  db_path: str
  db_key: str
  table_name: str
  row_type: Type[sqlite_schema_utils.SQLiteRow]

  def list_rows(
      self,
      env: interface.AsyncEnv,
      timeout_sec: Optional[float] = None,
  ) -> list[sqlite_schema_utils.RowType]:
    """Lists all rows from the specified table in the app's database using ADB.

    Args:
        env: The Android environment interface.
        timeout_sec: An optional timeout for the ADB operations.

    Returns:
        A list of row objects, each representing a row from the specified table
        in the database.
    """
    return sqlite_utils.get_rows_from_remote_device(
        self.table_name, self.db_path, self.row_type, env, timeout_sec
    )

  def add_rows(
      self,
      rows: list[sqlite_schema_utils.RowType],
      env: interface.AsyncEnv,
      timeout_sec: Optional[float] = None,
  ) -> None:
    sqlite_utils.insert_rows_to_remote_db(
        rows,
        self.db_key,
        self.table_name,
        self.db_path,
        self.app_name_with_db,
        env,
        timeout_sec,
    )

  def _clear_db(self, env: interface.AsyncEnv) -> None:
    """Clears the app's SQLite database."""
    sqlite_utils.delete_all_rows_from_table(
        self.table_name, self.db_path, env, self.app_name_with_db
    )
    try:
      self.list_rows(env)
    except ValueError as e:
      raise RuntimeError(
          "After clearing the old SQLite database, a new empty database was"
          " not created."
      ) from e

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    """Initializes the task environment."""
    self._clear_db(env)  # In case the previous run crashed.
    super().initialize_task(env)
    self._clear_db(env)
    if NOISE_ROW_OBJECTS in self.params:
      self.add_rows(self.params[NOISE_ROW_OBJECTS], env)

  def tear_down(self, env: interface.AsyncEnv):
    """Cleans up after task completion."""
    super().tear_down(env)
    self._clear_db(env)


class AddMultipleRows(SQLiteApp, abc.ABC):
  """Abstract class for tasks that involve adding multiple rows to a SQLite database."""

  n_rows: int = -1  # Number of rows to be added, to be defined in subclasses.

  def __init__(self, params: dict[str, Any]):
    super().__init__(params)
    self.before = []

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    """Initial setup for the task, if necessary."""
    super().initialize_task(env)
    self.before = self.list_rows(env)

  @abc.abstractmethod
  def validate_addition_integrity(
      self,
      before: list[sqlite_schema_utils.RowType],
      after: list[sqlite_schema_utils.RowType],
      reference_rows: list[sqlite_schema_utils.RowType],
  ) -> bool:
    """Validates the integrity of the rows addition.

    Args:
      before: State of database before modification.
      after: Current state of the database.
      reference_rows: The rows that we are checking if are added and in the
        current state.

    Returns:
      Whether the reference rows were successfully added.
    """

  def is_successful(self, env: interface.AsyncEnv) -> float:
    """Determine if the row addition task was successful."""
    after = self.list_rows(env)
    row_addition_successful = self.validate_addition_integrity(
        self.before, after, self.params[ROW_OBJECTS]
    )
    return 1.0 if row_addition_successful else 0.0

  @classmethod
  @abc.abstractmethod
  def _get_random_target_row(cls) -> sqlite_schema_utils.RowType:
    """Generates a random row. To be implemented in subclasses."""

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    """Generate random parameters for new row addition tasks."""
    if cls.n_rows == -1:
      raise ValueError("n_rows must be defined in subclasses.")
    random_rows = [cls._get_random_target_row() for _ in range(cls.n_rows)]
    return {ROW_OBJECTS: random_rows}


class DeleteMultipleRows(SQLiteApp, abc.ABC):
  """Abstract class for tasks that involve deleting multiple rows from a SQLite database."""

  n_rows: int  # Number of rows to be deleted, to be defined in subclasses.
  n_rows_noise: int  # Number of additional rows to add not relevant to goal.

  def __init__(self, params: dict[str, Any]):
    super().__init__(params)
    self.rows_to_delete = []
    self.before = []

  def _validate_initial_state(
      self, before: list[sqlite_schema_utils.RowType]
  ) -> None:
    """Validates the initial state before the deletion process starts."""
    if len(before) != (self.n_rows + self.n_rows_noise):
      raise RuntimeError(
          "Initial state validation failed. The number of rows before deletion"
          f" does not match the expected count. Found {len(before)} in DB, but"
          f" expected {self.n_rows + self.n_rows_noise}."
      )

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    """Initial setup for the task, if necessary."""
    super().initialize_task(env)
    n_rows = 0
    if ROW_OBJECTS in self.params:
      self.add_rows(self.params[ROW_OBJECTS], env)
      n_rows = len(self.params[ROW_OBJECTS])
    self.before = self.list_rows(env)
    # Newly added rows are at the end.
    self.rows_to_delete = self.before[len(self.before) - n_rows :]
    self._validate_initial_state(self.before)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    """Determine if the row deletion task was successful."""
    super().is_successful(env)

    # Get the state of the database after the deletion attempt
    after = self.list_rows(env)

    # Validate the integrity of the deletion
    deletion_successful = self.validate_deletion_integrity(self.before, after)
    return 1.0 if deletion_successful else 0.0

  @abc.abstractmethod
  def validate_deletion_integrity(
      self,
      before: list[sqlite_schema_utils.RowType],
      after: list[sqlite_schema_utils.RowType],
  ):
    """Validates the integrity of the row deletion."""


class DeleteDuplicateRows(DeleteMultipleRows):
  """Abstract class for tasks that involve deleting duplicate rows from a SQLite database."""

  def _validate_candidates(
      self, candidates: list[sqlite_schema_utils.RowType]
  ) -> None:
    """Validates the initial state before the deletion process starts."""
    if len(candidates) % 2 != 0:
      raise ValueError(
          "Initial state validation failed. Must contain exactly two rows."
      )
    val1, val2 = candidates
    for field in dataclasses.fields(val1):
      if field.name == self.db_key:
        continue
      if getattr(val1, field.name) != getattr(val2, field.name):
        raise ValueError(
            "Initial state validation failed. Doesn't contain duplicate rows."
        )

  def _validate_initial_state(
      self, before: list[sqlite_schema_utils.RowType]
  ) -> None:
    """Validates the initial state before the deletion process starts."""
    if len(before) != (2 + self.n_rows_noise):
      raise ValueError(
          "Initial state validation failed. The number of rows before deletion"
          f" does not match the expected count. Found {len(before)} in DB, but"
          f" expected {2 + self.n_rows_noise}."
      )

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    """Initial setup for the task, if necessary."""
    super().initialize_task(env)
    self._validate_candidates(self.params[ROW_OBJECTS])
    self.duplicate_rows = self.rows_to_delete


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tests for base evaluators."""

from unittest import mock
from absl.testing import absltest
from android_env.proto import adb_pb2
from android_world.task_evals.common_validators import file_validators
from android_world.utils import test_utils


class TestCreateFile(test_utils.AdbEvalTestBase):

  def setUp(self):
    super().setUp()
    self.params = {
        "file_name": "my_note.md",
        "text": "Hello World",
    }

  def test_initialize(self):
    env = mock.MagicMock()
    task = file_validators.CreateFile(self.params, "/mock/data/path")
    task.initialize_task(env)

  def test_is_successful(self):
    self.mock_check_file_or_folder_exists.return_value = True

    mock_response_cat = adb_pb2.AdbResponse()
    mock_response_cat.generic.output = b"Hello World"
    self.mock_issue_generic_request.return_value = mock_response_cat

    env = mock.MagicMock()

    task = file_validators.CreateFile(self.params, "/mock/data/path")
    self.assertEqual(test_utils.perform_task(task, env.base_env), 1.0)

  def test_initialize_task_wrong_name(self):
    self.mock_issue_generic_request.response = (
        b"This is some other World. Not the same world."
    )
    self.mock_check_file_or_folder_exists.side_effect = [
        False,
        True,
    ]

    env = mock.MagicMock()

    task = file_validators.CreateFile(self.params, "/mock/data/path")
    self.assertFalse(test_utils.perform_task(task, env.base_env))


class TestDeleteFile(test_utils.AdbEvalTestBase):

  def test_is_successful(
      self,
  ):
    response_ls_deleted = adb_pb2.AdbResponse()
    response_ls_deleted.generic.output = b"another_note.md\n"
    self.mock_check_file_or_folder_exists.side_effect = [
        True,  # File exists.
        False,  # File doesn't exist.
    ]
    env = mock.MagicMock()
    params = {
        "file_name": "test_note.md",
        "noise_candidates": ["Noise Candidate"],
    }

    task = file_validators.DeleteFile(params, "/mock/data/path")

    self.assertEqual(test_utils.perform_task(task, env.base_env), 1.0)
    self.mock_create_file.assert_called()
    self.mock_remove_files.assert_called()
    self.mock_create_random_files.assert_called()

  def test_is_successful_subfolder(self):
    # Create mock adb response for 'ls' command when note is deleted
    mock_response_ls_deleted = adb_pb2.AdbResponse()
    mock_response_ls_deleted.generic.output = b"another_note.md\n"
    self.mock_check_file_or_folder_exists.side_effect = [
        True,  # File exists.
        False,  # File doesn't exist.
    ]
    env = mock.MagicMock()
    params = {
        "file_name": "test_note.md",
        "subfolder": "a_folder",
        "noise_candidates": ["Noise Candidate"],
    }

    task = file_validators.DeleteFile(params, "/mock/data/path")

    self.assertEqual(test_utils.perform_task(task, env.base_env), 1.0)
    self.mock_create_file.assert_called()
    self.mock_remove_files.assert_called()
    self.mock_create_random_files.assert_called()

  def test_is_not_successful(self):
    # Create mock adb response for 'ls' command when note still exists
    mock_response_ls_still_exists = adb_pb2.AdbResponse()
    mock_response_ls_still_exists.generic.output = (
        b"test_note.md\nanother_note.md\n"
    )
    self.mock_check_file_or_folder_exists.side_effect = [
        True,  # File exists.
        True,  # File still exists.
    ]
    env = mock.MagicMock()
    params = {
        "file_name": "test_note.md",
        "noise_candidates": ["Noise Candidate"],
    }

    task = file_validators.DeleteFile(params, "/mock/data/path")

    self.assertFalse(test_utils.perform_task(task, env.base_env))
    self.mock_create_file.assert_called()
    self.mock_remove_files.assert_called()
    self.mock_create_random_files.assert_called()


class TestMoveFile(test_utils.AdbEvalTestBase):

  def setUp(self):
    super().setUp()
    self.params = {
        "file_name": "test_file.md",
        "source_folder": "Source",
        "destination_folder": "Destination",
        "noise_candidates": ["Noise Candidate"],
    }

  def test_is_successful(self):
    # Create mock adb response for 'ls' command when note is deleted
    mock_response_ls_deleted = adb_pb2.AdbResponse()
    mock_response_ls_deleted.generic.output = b"another_note.md\n"

    self.mock_check_file_or_folder_exists.side_effect = [
        True,  # Source file exists.
        False,  # Destination file does not exist.
        False,  # Source file does not exist.
        True,  # Destination file exists.
    ]
    test_utils.log_mock_calls(self.mock_check_file_or_folder_exists)

    env = mock.MagicMock()

    task = file_validators.MoveFile(self.params, "/mock/data/path")
    self.assertEqual(test_utils.perform_task(task, env.base_env), 1.0)

    # Assert that the mock functions were called
    self.mock_create_file.assert_called()
    self.mock_remove_files.assert_called()
    self.mock_mkdir.assert_called()
    self.mock_create_random_files.assert_called()

  def test_is_not_successful(self):
    # Create mock adb response for 'ls' command when note still exists
    mock_response_ls_still_exists = adb_pb2.AdbResponse()
    mock_response_ls_still_exists.generic.output = (
        b"test_note.md\nanother_note.md\n"
    )

    self.mock_check_file_or_folder_exists.side_effect = [
        True,  # Source file exists.
        False,  # Destination file does not exist.
        True,  # Source file still exists.
        False,  # Destination file still does not exist.
    ]

    env = mock.MagicMock()

    task = file_validators.MoveFile(self.params, "/mock/data/path")
    self.assertFalse(test_utils.perform_task(task, env.base_env))

    # Assert that the mock functions were called
    self.mock_create_file.assert_called()
    self.mock_remove_files.assert_called()
    self.mock_create_random_files.assert_called()
    self.mock_mkdir.assert_called()


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Logic for validating contact has been added."""

from android_world.env import interface
from android_world.task_evals import task_eval
from android_world.task_evals.utils import user_data_generation
from android_world.utils import contacts_utils


class AddContact(task_eval.TaskEval):
  """Validator for checking that a contact has been added."""

  app_names = ()
  complexity = 1
  schema = {
      'type': 'object',
      'properties': {
          'name': {'type': 'string'},
          'number': {'type': 'string'},
      },
      'required': ['name', 'number'],
  }
  template = ''

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    contacts_utils.clear_contacts(env.controller)

  def _has_contact(self, contacts: list[contacts_utils.Contact]) -> bool:
    return (
        contacts_utils.Contact(
            self.params['name'],
            contacts_utils.clean_phone_number(self.params['number']),
        )
        in contacts
    )

  def is_successful(self, env: interface.AsyncEnv) -> float:
    contact_found = self._has_contact(
        contacts_utils.list_contacts(env.controller)
    )
    return super().is_successful(env) if contact_found else 0.0

  @classmethod
  def generate_random_params(cls) -> dict[str, str | int]:
    return {
        'name': user_data_generation.generate_random_name(),
        'number': user_data_generation.generate_random_number(),
    }


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from unittest import mock
from absl.testing import absltest
from android_world.task_evals.common_validators import phone_validators
from android_world.utils import test_utils


class TestMakePhoneCall(test_utils.AdbEvalTestBase):

  def test_is_successful_offhook(self):
    self.mock_get_call_state.return_value = 'OFFHOOK'
    self.mock_dialer_with_phone_number.return_value = True

    env = mock.MagicMock()
    params = {'phone_number': '1234567890'}
    task = phone_validators.MakeCall(params)

    self.assertEqual(test_utils.perform_task(task, env), 1)

  def test_is_successful_not_offhook(self):
    self.mock_get_call_state.return_value = 'IDLE'
    self.mock_dialer_with_phone_number.return_value = True

    env = mock.MagicMock()
    params = {'phone_number': '1234567890'}
    task = phone_validators.MakeCall(params)

    self.assertEqual(test_utils.perform_task(task, env), 0)

  def test_is_successful_wrong_number(self):
    self.mock_get_call_state.return_value = 'OFFHOOK'
    self.mock_dialer_with_phone_number.return_value = False

    env = mock.MagicMock()
    params = {'phone_number': '1234567890'}
    task = phone_validators.MakeCall(params)

    self.assertEqual(test_utils.perform_task(task, env), 0)

  def test_generate_random_params(self):
    random_params = phone_validators.MakeCall.generate_random_params()
    self.assertIn('phone_number', random_params)
    self.assertIsInstance(random_params['phone_number'], str)


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Logic to validate a phone call is made to a specific number."""

import random
import re
from typing import Any

from absl import logging
from android_env import env_interface
from android_world.env import adb_utils
from android_world.env import interface
from android_world.env import representation_utils
from android_world.task_evals import task_eval


def check_if_dialer_with_phone_number(
    ui_elements: list[representation_utils.UIElement],
    current_activity: str,
    *,
    expected_number: str,
) -> bool:
  """Check if the correct number is dialed based on UI elements.

  Args:
    ui_elements: List of UIElement objects representing the UI.
    current_activity: The current Android activity.
    expected_number: The expected dialed phone number as a string.

  Returns:
    True if the expected number is found, False otherwise.
  """
  if not current_activity.startswith("com.google.android.dialer"):
    return False
  for element in ui_elements:
    if element.text:
      cleaned_element_text = re.sub(r"[^\d]", "", element.text)
      cleaned_expected_number = re.sub(r"[^\d]", "", expected_number)

      if cleaned_element_text == cleaned_expected_number:
        return True
  return False


def clear_phone_state(env: env_interface.AndroidEnvInterface) -> None:
  """Clears phone log and ends any active call."""
  adb_utils.end_call_if_active(env)
  adb_utils.clear_android_emulator_call_log(env)


class MakeCall(task_eval.TaskEval):
  """Task to make a phone call to a specific number.

  The class uses ADB commands to interact with the Android environment,
  specifically the dialer application. It can check the call state and ensures
  that the phone number dialed matches the expected number. NOTE: It also checks
  the correct number is on the call screen. This cannot be done using adb so we
  have to fall back to UI element checks.
  """

  app_names = ("dialer",)
  complexity = 1
  schema = {
      "type": "object",
      "properties": {
          "phone_number": {"type": "string"},
      },
      "required": ["phone_number"],
  }
  template = ""

  def __init__(self, params: dict[str, Any]):
    """See base class."""
    super().__init__(params)
    self.phone_number = params["phone_number"]

  def _called_correct_number(self, env: interface.AsyncEnv) -> bool:
    ui_elements = env.get_state().ui_elements
    current_activity = adb_utils.get_current_activity(env.controller)[0]
    return check_if_dialer_with_phone_number(
        expected_number=self.phone_number,
        ui_elements=ui_elements,
        current_activity=current_activity,
    )

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    """Clears call history."""
    super().initialize_task(env)
    clear_phone_state(env.controller)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    call_state = adb_utils.get_call_state(env.controller)
    if call_state != "OFFHOOK":
      logging.info("Not dialed. Call state: %s", call_state)
      return 0.0
    if not self._called_correct_number(env):
      logging.info("Dialed a number, but not correct number")
      return 0.0
    return 1.0

  def tear_down(self, env: interface.AsyncEnv):
    """Maybe ends call and clears call history."""
    super().tear_down(env)
    clear_phone_state(env.controller)

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    random_phone_number = "555" + "".join(random.choices("0123456789", k=7))
    return {"phone_number": random_phone_number}


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Utilities needed for task template variation study."""

from android_world.task_evals.composite import system as system_composite
from android_world.task_evals.single import audio_recorder
from android_world.task_evals.single import expense
from android_world.task_evals.single import markor
from android_world.task_evals.single import osmand
from android_world.task_evals.single import phone
from android_world.task_evals.single import simple_gallery_pro
from android_world.task_evals.single import sms
from android_world.task_evals.single.calendar import calendar

ADDITIONAL_TASK_TEMPLATES = {
    audio_recorder.AudioRecorderRecordAudioWithFileName.__name__: [
        (
            "Utilize the Audio Recorder app to capture an audio clip and save"
            ' it under the name "{file_name}".'
        ),
        (
            "Capture an audio recording and store it with the designated name"
            ' "{file_name}" using the Audio Recorder application.'
        ),
        (
            "Record an audio clip, ensuring its saved with the filename"
            ' "{file_name}" through the Audio Recorder app.'
        ),
        (
            "Employ the Audio Recorder app to record an audio clip, making sure"
            ' to save it with the name "{file_name}".'
        ),
    ],
    calendar.SimpleCalendarAddOneEventRelativeDay.__name__: [
        (
            "Using Simple Calendar Pro, schedule an event for this"
            " {day_of_week} at {hour} o'clock titled '{event_title}' with the"
            " description '{event_description}'. Ensure the event duration is"
            " {duration_mins} minutes."
        ),
        (
            "Create a calendar entry in Simple Calendar Pro for this"
            " {day_of_week} at {hour}h labeled '{event_title}' and detailed"
            " with '{event_description}'. Set the event duration to"
            " {duration_mins} minutes."
        ),
        (
            "Employ Simple Calendar Pro to set up a calendar event for this"
            " {day_of_week} at {hour}h with the title '{event_title}' and a"
            " brief '{event_description}'. Specify the event duration as"
            " {duration_mins} minutes."
        ),
        (
            "Establish a calendar event in Simple Calendar Pro for this"
            " {day_of_week} at {hour} o'clock, naming it '{event_title}' and"
            " describing it as '{event_description}'. Make sure the event lasts"
            " for {duration_mins} minutes."
        ),
    ],
    calendar.SimpleCalendarDeleteOneEvent.__name__: [
        (
            "Remove the calendar event titled '{event_title}' at {hour} o'clock"
            " on {year}-{month}-{day} from Simple Calendar Pro."
        ),
        (
            "Utilize Simple Calendar Pro to delete the event scheduled for"
            "{hour}h on {year}-{month}-{day} labeled '{event_title}'."
        ),
        (
            "In Simple Calendar Pro, erase the calendar event titled"
            " '{event_title}' occurring at {hour} o'clock with the date"
            " {year}-{month}-{day}'."
        ),
        (
            "Delete the calendar entry labeled '{event_title}' at {hour}h on"
            " {year}-{month}-{day} in Simple Calendar Pro."
        ),
    ],
    expense.ExpenseDeleteDuplicates.__name__: [
        (
            "Remove any duplicate expenses in Arduia Pro Expense, keeping at"
            " least one unique instance of each expense type."
        ),
        (
            "Ensure only one instance of each unique expense remains in Arduia"
            " Pro Expense by deleting all exact duplicates."
        ),
        (
            "In Arduia Pro Expense, remove redundant expenses such that only a"
            " single instance of each unique expense remains."
        ),
        (
            "Eliminate all duplicate expenses from Arduia Pro Expense,"
            " preserving at least one occurrence of each distinct expense."
        ),
    ],
    markor.MarkorCreateNote.__name__: [
        (
            "Generate a new note within Markor, assigning the title"
            " '{file_name}', and input the text: '{text}'."
        ),
        (
            "Initiate a new note in Markor titled {file_name}, and include the"
            " text: '{text}'."
        ),
        (
            "In Markor, establish a note named {file_name} and populate it with"
            " the text: {text}."
        ),
        (
            "Create a note named {file_name} in Markor, filling it with the"
            " content: {text}."
        ),
    ],
    markor.MarkorDeleteNewestNote.__name__: [
        "Remove the most recent note from Markor.",
        "Delete the latest note in Markor.",
        "Erase the newest note recorded in Markor.",
        "Remove the last-created note from Markor.",
    ],
    osmand.OsmAndMarker.__name__: [
        "In the OsmAnd maps app, create a location marker at {location}.",
        (
            "Place a location marker in OsmAnd maps for the location specified"
            " as {location}."
        ),
        (
            "Mark the location {location} on the OsmAnd maps app with a"
            " location marker."
        ),
        (
            "Set a location marker in OsmAnd maps to pinpoint the location"
            " {location}."
        ),
    ],
    phone.MarkorCallApartment.__name__: [
        (
            "Place a call to the phone number associated with the apartment"
            " labeled {name}, which can be found in the apartments.md file"
            " within Markor. Confirm that the In-Call UI is visible, offering"
            " features such as 'Hold'."
        ),
        (
            "Dial the contact number linked to the apartment named {name},"
            " located within the 'apartments.md' file in Markor. Verify that"
            " the In-Call UI appears, providing options like 'Hold'."
        ),
        (
            "Initiate a phone call to the number specified for the apartment"
            " identified as {name} in the 'apartments.md' file stored in"
            " Markor. Make sure the In-Call UI is shown, including"
            " functionalities such as 'Hold'."
        ),
        (
            "Contact the phone number corresponding to the apartment denoted by"
            " {name}. Retrieve this number from the apartments.md file in"
            " Markor. Ensure that the In-Call UI appears with features like"
            " 'Hold'."
        ),
    ],
    simple_gallery_pro.SaveCopyOfReceiptTaskEval.__name__: [
        (
            "Duplicate the file named '{file_name}' from DCIM and store it with"
            " the identical name in the Download directory."
        ),
        (
            "Make a copy of the {file_name} file located in DCIM and save it"
            " under the same name within the Download folder."
        ),
        (
            "Replicate the '{file_name}' file from DCIM and ensure a duplicate"
            " is saved with the matching name in the Download directory."
        ),
        (
            "Create a duplicate of {file_name} from DCIM and place it in the"
            " Download folder with the same name."
        ),
    ],
    sms.SimpleSmsReplyMostRecent.__name__: [
        (
            "Respond to the latest text message using Simple SMS Messenger,"
            " incorporating the message: '{message}'"
        ),
        (
            "Utilize Simple SMS Messenger to reply to the most recent text"
            " message with the content: {message}"
        ),
        (
            "Craft a response to the newest text message using Simple SMS"
            " Messenger, and include the message: '{message}'"
        ),
        (
            "Reply to the most recent SMS using Simple SMS Messenger,"
            " integrating the following message: {message}"
        ),
    ],
    sms.SimpleSmsResend.__name__: [
        (
            "Forward the message I recently sent to {name} using Simple SMS"
            " Messenger."
        ),
        (
            "Resend the message that was just sent to {name} via Simple SMS"
            " Messenger."
        ),
        (
            "Send again the message I just delivered to {name} using Simple SMS"
            " Messenger."
        ),
        (
            "Use Simple SMS Messenger to resend the message I sent to {name}"
            " moments ago."
        ),
    ],
    sms.SimpleSmsSendReceivedAddress.__name__: [
        (
            "Use Simple SMS Messenger to send {name1} the event address {name2}"
            " just shared with me."
        ),
        (
            "Please forward the event address sent by {name2} to {name1}"
            " through Simple SMS Messenger."
        ),
        (
            "Send the event location shared by {name2} to {name1} using Simple"
            " SMS Messenger."
        ),
        (
            "Transmit {name2}'s shared event address to {name1} via Simple SMS"
            " Messenger."
        ),
    ],
    system_composite.TurnOnWifiAndOpenApp.__name__: [
        "Activate the WiFi, then launch the {app_name} application.",
        "Switch on the WiFi and proceed to open the {app_name} application.",
        "Enable WiFi and access the {app_name} app.",
        "Power up the WiFi and initiate the {app_name} app.",
    ],
}


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Task wrapper for screen variation robustness tests."""

import time
from typing import Any

from android_world.env import adb_utils
from android_world.env import interface
from android_world.task_evals import task_eval


def generate_screen_variation_wrapper(
    base_task: type[task_eval.TaskEval],
    screen_width: int,
    screen_height: int,
    screen_orientation: str,
    params: dict[str, Any],
    screen_config_name: str,
) -> type[task_eval.TaskEval]:
  """Generate a wrapper for a given task for the screen variation experiment.

  Args:
    base_task: The base task to run the experiment.
    screen_width: The width for the new resolution.
    screen_height: The height for the new resolution.
    screen_orientation: The orientation for the experiment.
    params: The fixed parameter for the experiment.
    screen_config_name: The experiment name suffix.

  Returns:
    A wrapper class for the given task with the given screen config.
  """

  class ScreenVariation(base_task):
    """A wrapper class for screen variation robustness experiments."""

    width = screen_width
    height = screen_height
    orientation = screen_orientation
    config_name = screen_config_name

    def initialize_task(self, env: interface.AsyncEnv):
      super().initialize_task(env)
      # Go back to home screen with a reset.
      env.reset(True)
      adb_utils.set_screen_size(self.width, self.height, env.controller)
      # It has been observed that without this pause, the following orientation
      # change will not work.
      time.sleep(2)
      # Task starts from the home screen and the following orientation change
      # will take effect for the next app opened but expired after closing.
      adb_utils.change_orientation(self.orientation, env.controller)

    @property
    def name(self) -> str:
      return base_task.__name__ + '_' + self.config_name

    @classmethod
    def generate_random_params(cls):
      return params

  return ScreenVariation


SCREEN_MODIFIERS = {
    'NormalPortrait': {
        'width': 1080,
        'height': 2400,
        'orientation': 'portrait',
    },
    'NormalLandscape': {
        'width': 1080,
        'height': 2400,
        'orientation': 'landscape',
    },
    'LowResPortrait': {'width': 720, 'height': 1520, 'orientation': 'portrait'},
    'LowResLandscape': {
        'width': 720,
        'height': 1520,
        'orientation': 'landscape',
    },
    'HighResPortrait': {
        'width': 1600,
        'height': 2560,
        'orientation': 'portrait',
    },
}


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Abstract base class representing a Mini World of Bits (MiniWoB) task in Android."""

import abc
import time

from android_env import env_interface
from android_world.env import adb_utils
from android_world.env import interface
from android_world.task_evals import task_eval

_APP_NAME = "com.google.androidenv.miniwob"
_MAIN_ACTIVITY = f"{_APP_NAME}/{_APP_NAME}.app.MainActivity"


def _extract_data(
    action: str, env: env_interface.AndroidEnvInterface
) -> str | None:
  """Issues broadcast and extracts data with retries."""
  for _ in range(3):
    raw = adb_utils.send_android_intent("broadcast", action, env)
    result = adb_utils.extract_broadcast_data(
        raw.generic.output.decode("utf-8")
    )
    if result is not None:
      return result
    time.sleep(1)  # App still needs to load.
  return None


def _get_episode_utterance(env: env_interface.AndroidEnvInterface) -> str:
  """Gets the utterance for the current episode by querying MiniWob Android app."""
  utterance = _extract_data(f"{_APP_NAME}.app.GET_UTTERANCE_ACTION", env)
  if utterance is None:
    raise ValueError("Could not extract utterance; something went wrong.")
  return utterance


def get_episode_reward(env: env_interface.AndroidEnvInterface) -> float:
  """Gets the reward for the current episode by querying MiniWob Android app."""
  reward = _extract_data(f"{_APP_NAME}.app.GET_REWARD_ACTION", env)
  if reward is None:
    raise ValueError("Could not extract reward; something went wrong.")
  if not reward:  # Episode is not terminated.
    return 0.0
  return float(int(reward))


def is_episode_terminated(env: env_interface.AndroidEnvInterface) -> bool:
  """Checks if the current episode is terminated."""
  return get_episode_reward(env) != 0.0


class MiniWoBTask(task_eval.TaskEval, abc.ABC):
  """Abstract base class representing a Mini World of Bits (MiniWoB) task in Android.

  This class serves as a lighweight template for creating specific task
  instances within the MiniWoB framework, integrating with the Android
  environment for task execution.

  Each MiniWoBTask is characterized by a unique task name and an utterance
  that is dynamically generated and populated during task initialization.
  The utterance, generated through MiniWoB's JavaScript logic, provides the
  instructions for the task to be executed on the Android device. The evaluation
  logic is also providd by MiniWoB.
  """

  start_on_home_screen = False

  schema = {
      "type": "object",
      "properties": {
          "task_name": {"type": "string"},
          # This is filled in in `initialize_task`. The utterance is generated
          # by MiniWoB JavaScript logic. Once task is initialized, we fill it
          # in by querying the MiniWoB app on Android.
          "utterance": {"type": "string"},
      },
      "required": ["task_name"],
  }
  template = (
      "Follow the instructions shown on the top of the screen: {utterance}"
  )
  app_names = (_APP_NAME,)
  complexity = 3

  @property
  def goal(self) -> str:
    if not self.initialized:
      raise ValueError(
          "MiniWoB task must be initialized using initialize_task "
          "before the goal can be retrieved."
      )
    return super().goal

  def _initialize_apps(self, env: interface.AsyncEnv) -> None:
    """Initializes the MiniWoB apps."""

  def initialize_task(self, env: interface.AsyncEnv):
    """Initializes the MiniWoB task.

    Configures the task, i.e. loads HTML file for given task name. Starts the
    episode.

    Args:
      env: AndroidEnv instance.
    """
    super().initialize_task(env)
    task_name = self.params["task_name"]
    task_config = f'{{"task":"{task_name}"}}'
    adb_utils.start_activity(
        _MAIN_ACTIVITY,
        ["--es", "RL_TASK_APP_CONFIG", f"'{task_config}'"],
        env.controller,
    )
    time.sleep(1)
    # Reset and start the task.
    adb_utils.start_activity(
        _MAIN_ACTIVITY, ["--ez", "reset", "true"], env.controller
    )
    adb_utils.start_activity(
        _MAIN_ACTIVITY, ["--ez", "step", "true"], env.controller
    )
    self._params["utterance"] = _get_episode_utterance(env.controller)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    return float(get_episode_reward(env.controller) == 1.0)


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""MiniWoB registry; it dynamically creates tasks.

In MiniWoB, a task is defined via it's HTML file. For each MiniWoB task we
dynamically create a new task class.
"""

from android_world.task_evals.miniwob import miniwob_base

TASK_REGISTRY = {}

# Subset of tasks used for evaluation.
TASK_REGISTRY_SUBSET = {}

# The names of the HTML files, modulo the .html suffix, corresponding to the
# supported tasks that can be run. All tasks have been verified to be correct
# and achievable on an Android device by a human.
_NAMES = [
    ## Original MiniWoB++ tasks:
    # keep-sorted start
    'bisect-angle',
    'book-flight',
    'choose-date',
    'choose-date-easy',
    'choose-date-medium',
    'choose-list',
    'circle-center',
    'click-button',
    'click-button-sequence',
    'click-checkboxes',
    'click-checkboxes-large',
    'click-checkboxes-soft',
    'click-checkboxes-transfer',
    'click-collapsible',
    'click-collapsible-2',
    'click-color',
    'click-dialog',
    'click-dialog-2',
    'click-link',
    'click-menu-2',
    'click-option',
    'click-pie',
    'click-scroll-list',
    'click-shades',
    'click-shape',
    'click-tab',
    'click-tab-2',
    'click-tab-2-easy',
    'click-tab-2-hard',
    'click-tab-2-medium',
    'click-test',
    'click-test-2',
    'click-test-transfer',
    'click-widget',
    'copy-paste',
    'copy-paste-2',
    'count-shape',
    'count-sides',
    'drag-box',
    # Drag sometimes is scroll, but task easily done by human in 1-shot.
    'drag-item',
    'email-inbox',
    'email-inbox-delete',
    'email-inbox-forward',
    'email-inbox-forward-nl',
    'email-inbox-forward-nl-turk',
    'email-inbox-important',
    'email-inbox-nl-turk',
    'email-inbox-noscroll',
    'email-inbox-reply',
    'email-inbox-star-reply',
    'enter-date',
    'enter-password',
    'enter-text',
    'enter-text-2',
    'enter-text-dynamic',
    'enter-time',
    'find-midpoint',
    'find-word',
    'focus-text',
    'focus-text-2',
    'grid-coordinate',
    'guess-number',
    'highlight-text',
    'highlight-text-2',
    'identify-shape',
    'login-user',
    'login-user-popup',
    'multi-layouts',
    'multi-orderings',
    'navigate-tree',
    'read-table',
    'read-table-2',
    'resize-textarea',
    'right-angle',
    'scroll-text',
    'scroll-text-2',
    'search-engine',
    'simon-says',
    'simple-algebra',
    'simple-arithmetic',
    'social-media',
    'social-media-all',
    'social-media-some',
    'terminal',
    'text-transform',
    'tic-tac-toe',
    'unicode-test',
    'use-autocomplete',
    'use-colorwheel',
    'use-colorwheel-2',
    'use-slider',
    'visual-addition',
    # keep-sorted end
    ## Removed tasks kept for posterity:
    # These tasks require near-realtime movement and are unable to be achieved
    # by humans operating on emulators, thus we exclude them.
    # 'chase-circle',
    # Too hard to click in emulator.
    # 'moving-items',
    # These tasks break or are much harder due to HTML rendering on Android
    # webview. Comments for each task:
    # Technically possible, but unnecessarily harder due to touch interface.
    # Drags will scroll screen moving task out of view.
    # 'drag-cube',
    # 'drag-items-grid',  # Elements are not interactable on Android.
    # 'drag-items',  # Elements are not interactable on Android.
    # Technically possible, but unnecessarily harder due to touch interface.
    # Drags will scroll screen moving task out of view.
    # 'drag-shapes',
    # 'drag-sort-numbers',  # Elements are not interactable on Android.
    # 'text-editor',  # Cannot underline everything. Weird glitch.
    # 'number-checkboxes',  # Not correctly rendered: Only three columns.
    # Sliders don't work with Android
    # 'use-slider-2',  # Slider implementation not working.
    # 'use-spinner',  # Slider implementation not working.
    # The menu responsiveness breaks and task does not behave as intended.
    # 'click-menu'
]

# Subset of tasks used in Synapse paper (https://arxiv.org/pdf/2306.07863.pdf).
_NAMES_SUBSET = [
    'book-flight',
    'choose-date',
    'choose-list',
    'click-button',
    'click-button-sequence',
    'click-checkboxes',
    'click-checkboxes-large',
    'click-checkboxes-soft',
    'click-checkboxes-transfer',
    'click-collapsible',
    'click-collapsible-2',
    'click-color',
    'click-dialog',
    'click-dialog-2',
    'click-link',
    'click-menu',
    'click-option',
    'click-pie',
    'click-scroll-list',
    'click-shades',
    'click-shape',
    'click-tab',
    'click-tab-2',
    'click-tab-2-hard',
    'click-test',
    'click-test-2',
    'click-widget',
    'copy-paste',
    'copy-paste-2',
    'count-shape',
    'email-inbox',
    'email-inbox-forward-nl',
    'email-inbox-forward-nl-turk',
    'email-inbox-nl-turk',
    'enter-date',
    'enter-password',
    'enter-text',
    'enter-text-dynamic',
    'enter-time',
    'find-word',
    'focus-text',
    'focus-text-2',
    'grid-coordinate',
    'guess-number',
    'identify-shape',
    'login-user',
    'login-user-popup',
    'multi-layouts',
    'multi-orderings',
    'navigate-tree',
    'read-table',
    'search-engine',
    'simple-algebra',
    'simple-arithmetic',
    'social-media',
    'social-media-all',
    'social-media-some',
    'terminal',
    'text-transform',
    'tic-tac-toe',
    'unicode-test',
    'use-autocomplete',
    'use-slider',
    'use-spinner',
]


def _create_class_name(html_file_name: str) -> str:
  """Converts a hyphen-separated string to CamelCase with 'MiniWob' suffix.

  E.g., use-slider -> UseSliderMiniWob.

  Args:
      html_file_name: A string in hyphen-separated format.

  Returns:
      A CamelCase string with 'MiniWob' prefix.
  """
  parts = html_file_name.split('-')
  camel_case = ''.join(part.capitalize() for part in parts)
  return f'MiniWob{camel_case}'


def _build_task_class(task_name: str) -> miniwob_base.MiniWoBTask:
  """Dynamically builds and returns a new subclass of MiniWoBTask.

  Args:
    task_name: The name of the task for which class is to be created.

  Returns:
    A subclass of MiniWoBTask that is dynamically created.

  Example:
    >>> BookFlightMiniWob = _build_task_class("book-flight")
    >>> isinstance(BookFlightMiniWob, miniwob_base.MiniWoBTask)
    True
  """

  @classmethod
  def generate_random_params(cls):  # pylint:disable=unused-argument
    """Sets the task: i.e. which HTML file should be loaded."""
    return {'task_name': task_name}

  return type(
      _create_class_name(name),
      (miniwob_base.MiniWoBTask,),
      {'generate_random_params': generate_random_params},
  )


for name in _NAMES:
  task_class = _build_task_class(name)
  TASK_REGISTRY[name] = task_class
  if name in _NAMES_SUBSET:
    TASK_REGISTRY_SUBSET[name] = task_class


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import time
from unittest import mock
from absl.testing import absltest
from android_world.env import adb_utils
from android_world.env import interface
from android_world.task_evals.miniwob import miniwob_base


@mock.patch.object(adb_utils, "extract_broadcast_data")
@mock.patch.object(adb_utils, "send_android_intent")
class Testintents(absltest.TestCase):

  def test_get_episode_utterance_valid(self, mock_send_intent, mock_extract):
    mock_env = mock.Mock()
    mock_send_intent.return_value = mock.Mock(
        generic=mock.Mock(output=b"encoded data")
    )
    mock_extract.return_value = "test utterance"

    actual_utterance = miniwob_base._get_episode_utterance(mock_env)
    self.assertEqual(actual_utterance, "test utterance")
    mock_send_intent.assert_called_with(
        "broadcast",
        f"{miniwob_base._APP_NAME}.app.GET_UTTERANCE_ACTION",
        mock_env,
    )
    mock_extract.assert_called_once()

  def test_get_episode_utterance_invalid(self, mock_send_intent, mock_extract):
    mock_env = mock.Mock()
    mock_send_intent.return_value = mock.Mock(
        generic=mock.Mock(output=b"encoded data")
    )
    mock_extract.return_value = None

    with self.assertRaises(ValueError):
      miniwob_base._get_episode_utterance(mock_env)

  def test_get_episode_reward_success(self, mock_send_intent, mock_extract):
    mock_env = mock.Mock()
    mock_send_intent.return_value = mock.Mock(
        generic=mock.Mock(output=b"encoded reward")
    )
    mock_extract.return_value = "1"

    reward = miniwob_base.get_episode_reward(mock_env)
    self.assertEqual(reward, 1)
    mock_send_intent.assert_called_with(
        "broadcast",
        f"{miniwob_base._APP_NAME}.app.GET_REWARD_ACTION",
        mock_env,
    )
    mock_extract.assert_called_once()

  def test_get_episode_reward_not_terminated(
      self, mock_send_intent, mock_extract
  ):
    mock_env = mock.Mock()
    mock_send_intent.return_value = mock.Mock(
        generic=mock.Mock(output=b"encoded reward")
    )
    mock_extract.return_value = ""

    reward = miniwob_base.get_episode_reward(mock_env)
    self.assertEqual(reward, 0)
    mock_send_intent.assert_called_with(
        "broadcast",
        f"{miniwob_base._APP_NAME}.app.GET_REWARD_ACTION",
        mock_env,
    )
    mock_extract.assert_called_once()

  def test_get_episode_reward_failure(self, mock_send_intent, mock_extract):
    mock_env = mock.Mock()
    mock_send_intent.return_value = mock.Mock(
        generic=mock.Mock(output=b"encoded reward")
    )
    mock_extract.return_value = None

    with self.assertRaises(ValueError):
      miniwob_base.get_episode_reward(mock_env)


class TestableMiniWoBTaskForTest(miniwob_base.MiniWoBTask):

  @classmethod
  def generate_random_params(cls):
    return {"task_name": "test_task"}


@mock.patch.object(adb_utils, "start_activity")
@mock.patch.object(time, "sleep")
@mock.patch.object(miniwob_base, "_get_episode_utterance")
class TestMiniWoBTask(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.mock_env = mock.create_autospec(interface.AsyncEnv)
    self.params = {"task_name": "test_task"}
    self.mock_task = TestableMiniWoBTaskForTest(
        TestableMiniWoBTaskForTest.generate_random_params()
    )

  def test_initialize_task(
      self, mock_get_utterance, unused_mock_sleep, mock_start_activity
  ):
    mock_get_utterance.return_value = "test utterance"

    self.mock_task.initialize_task(self.mock_env)

    expected_calls = [
        mock.call(
            miniwob_base._MAIN_ACTIVITY,
            ["--es", "RL_TASK_APP_CONFIG", '\'{"task":"test_task"}\''],
            self.mock_env.controller,
        ),
        mock.call(
            miniwob_base._MAIN_ACTIVITY,
            ["--ez", "reset", "true"],
            self.mock_env.controller,
        ),
        mock.call(
            miniwob_base._MAIN_ACTIVITY,
            ["--ez", "step", "true"],
            self.mock_env.controller,
        ),
    ]
    mock_start_activity.assert_has_calls(expected_calls, any_order=False)
    self.assertIn("utterance", self.mock_task.params)
    self.assertEqual(self.mock_task.params["utterance"], "test utterance")

  @mock.patch.object(miniwob_base, "get_episode_reward")
  def test_is_successful(
      self,
      mock_get_reward,
      unused_mock_get_utterance,
      unused_mock_sleep,
      unused_mock_start_activity,
  ):
    self.mock_task.initialize_task(self.mock_env)
    mock_get_reward.return_value = 1
    self.assertEqual(self.mock_task.is_successful(self.mock_env), 1)

    mock_get_reward.return_value = False
    self.assertEqual(self.mock_task.is_successful(self.mock_env), 0)


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tasks that involve Markor and SMS."""


from absl import logging
from android_world.env import interface
from android_world.task_evals.common_validators import sms_validators
from android_world.task_evals.single import markor


class MarkorCreateNoteAndSms(markor.Markor):
  """Task for checking that a new note in Markor has been created and then an SMS has been sent."""

  app_names = ("markor", "simple sms messenger")
  complexity = 2
  schema = {
      "type": "object",
      "properties": {
          "file_name": {"type": "string"},
          "text": {"type": "string"},
          "number": {"type": "string"},
      },
      "required": ["file_name", "text", "number"],
  }

  template = (
      "Create a new note in Markor named {file_name} with the following text:"
      " {text}. Share the entire content of the note with the phone number"
      " {number} via SMS using Simple SMS Messenger"
  )

  def initialize_task(self, env: interface.AsyncEnv) -> None:
    super().initialize_task(env)
    self.markor_task = markor.MarkorCreateNote(
        params={
            "file_name": self.params["file_name"],
            "text": self.params["text"],
        }
    )
    self.markor_task.initialize_task(env)

    self.sms_task = sms_validators.SimpleSMSSendSms(
        params={"number": self.params["number"], "message": self.params["text"]}
    )
    self.sms_task.initialize_task(env)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    markor_success = self.markor_task.is_successful(env)
    logging.info("Markor success: %s", markor_success)

    sms_success = self.sms_task.is_successful(env)
    logging.info("SMS success: %s", sms_success)

    return (markor_success + sms_success) / 2.0

  def tear_down(self, env: interface.AsyncEnv):
    super().tear_down(env)
    self.markor_task.tear_down(env)
    self.sms_task.tear_down(env)

  @classmethod
  def generate_random_params(cls) -> dict[str, str | int]:
    markor_params = markor.MarkorCreateNote.generate_random_params()
    sms_params = sms_validators.SimpleSMSSendSms.generate_random_params()

    compound_params = {
        "file_name": markor_params["file_name"],
        "text": markor_params["text"],
        "number": sms_params["number"],
    }

    return compound_params


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Composite tasks using Android Operating System actions."""

from typing import Any

from android_world.env import interface
from android_world.task_evals import task_eval
from android_world.task_evals.single import system
from android_world.task_evals.utils import schema


class TurnOnWifiAndOpenApp(task_eval.TaskEval):
  """Evals the agent opening an app after turning on Wifi."""

  app_names = ("settings",)
  complexity = 2
  schema = schema.create([schema.string("app_name", is_required=True)])

  template = "Turn on Wifi, then open the {app_name} app"

  def initialize_task(self, env: interface.AsyncEnv):
    super().initialize_task(env)
    self.turn_on_wifi_task = system.SystemWifiTurnOn(params={"on_or_off": "on"})
    self.turn_on_wifi_task.initialize_task(env)
    self.open_app_task = system.OpenAppTaskEval(
        params={
            "app_name": self.params["app_name"],
        }
    )
    self.open_app_task.initialize_task(env)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    wifi_score = self.turn_on_wifi_task.is_successful(env)
    open_app_score = self.open_app_task.is_successful(env)
    return (wifi_score + open_app_score) / 2.0

  def tear_down(self, env: interface.AsyncEnv):
    super().tear_down(env)
    self.open_app_task.tear_down(env)
    self.turn_on_wifi_task.tear_down(env)

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    return system.OpenAppTaskEval.generate_random_params()


class TurnOffWifiAndTurnOnBluetooth(task_eval.TaskEval):
  """Evals the agent turning off WiFi and enabling bluetooth."""

  app_names = ("settings",)
  complexity = 2

  # No parameters.
  schema = schema.create([])

  template = "Turn off WiFi, then enable bluetooth"

  def initialize_task(self, env: interface.AsyncEnv):
    super().initialize_task(env)
    self.turn_off_wifi_task = system.SystemWifiTurnOff(
        params={"on_or_off": "off"}
    )
    self.turn_off_wifi_task.initialize_task(env)
    self.turn_on_bluetooth_task = system.SystemBluetoothTurnOn(
        params={"on_or_off": "on"}
    )
    self.turn_on_bluetooth_task.initialize_task(env)

  def is_successful(self, env: interface.AsyncEnv) -> float:
    super().is_successful(env)
    wifi_score = self.turn_off_wifi_task.is_successful(env)
    bluetooth_score = self.turn_on_bluetooth_task.is_successful(env)
    return (wifi_score + bluetooth_score) / 2.0

  def tear_down(self, env: interface.AsyncEnv):
    super().tear_down(env)
    self.turn_on_bluetooth_task.tear_down(env)
    self.turn_off_wifi_task.tear_down(env)

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    return {}


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from unittest import mock
from absl.testing import absltest
from android_world.env import interface
from android_world.task_evals.composite import system
from android_world.task_evals.single import system as single_system
from android_world.utils import app_snapshot
from android_world.utils import fake_adb_responses


class TurnOnWifiAndOpenAppTest(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.mock_restore_snapshot = self.enter_context(
        mock.patch.object(app_snapshot, "restore_snapshot").start()
    )

  def test_generate_random_params(self):
    params = system.TurnOnWifiAndOpenApp.generate_random_params()

    self.assertIn(
        params["app_name"], single_system._APP_NAME_TO_PACKAGE_NAME.keys()
    )

  def test_is_successful_returns_0_if_wifi_off_and_incorrect_app_is_open(self):
    env = mock.create_autospec(interface.AsyncEnv)
    eval_task = system.TurnOnWifiAndOpenApp({"app_name": "clock"})
    eval_task.initialize_task(env)
    env.controller.execute_adb_call.side_effect = [
        fake_adb_responses.create_get_wifi_enabled_response(is_enabled=False),
        fake_adb_responses.create_get_activity_response(
            "com.google.android.apps.maps/.Inbox"
        ),
    ]

    self.assertEqual(eval_task.is_successful(env), 0)

  def test_is_successful_returns_0_5_if_wifi_is_off(self):
    env = mock.create_autospec(interface.AsyncEnv)
    eval_task = system.TurnOnWifiAndOpenApp({"app_name": "settings"})
    eval_task.initialize_task(env)
    env.controller.execute_adb_call.side_effect = [
        fake_adb_responses.create_get_wifi_enabled_response(is_enabled=False),
        fake_adb_responses.create_get_activity_response(
            "com.android.settings/com.android.settings.Settings"
        ),
    ]

    self.assertEqual(eval_task.is_successful(env), 0.5)

  def test_is_successful_returns_0_5_if_incorrect_app_is_open(self):
    env = mock.create_autospec(interface.AsyncEnv)
    eval_task = system.TurnOnWifiAndOpenApp({"app_name": "settings"})
    eval_task.initialize_task(env)
    env.controller.execute_adb_call.side_effect = [
        fake_adb_responses.create_get_wifi_enabled_response(is_enabled=True),
        fake_adb_responses.create_get_activity_response(
            "com.google.page1/.Page1"
        ),
    ]

    self.assertEqual(eval_task.is_successful(env), 0.5)

  def test_is_successful_returns_1_if_wifi_is_on_and_app_is_open(self):
    env = mock.create_autospec(interface.AsyncEnv)
    eval_task = system.TurnOnWifiAndOpenApp({"app_name": "settings"})
    eval_task.initialize_task(env)
    env.controller.execute_adb_call.side_effect = [
        fake_adb_responses.create_get_wifi_enabled_response(is_enabled=True),
        fake_adb_responses.create_get_activity_response(
            "com.android.settings/com.android.settings.Settings"
        ),
    ]

    self.assertEqual(eval_task.is_successful(env), 1.0)


class TurnOffWifiAndTurnOnBluetoothTest(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.mock_restore_snapshot = self.enter_context(
        mock.patch.object(app_snapshot, "restore_snapshot")
    )

  def test_is_successful_returns_0_if_wifi_is_on_and_bluetooth_is_off(self):
    env = mock.create_autospec(interface.AsyncEnv)
    eval_task = system.TurnOffWifiAndTurnOnBluetooth({})
    eval_task.initialize_task(env)
    env.controller.execute_adb_call.side_effect = [
        fake_adb_responses.create_get_wifi_enabled_response(is_enabled=True),
        fake_adb_responses.create_get_bluetooth_enabled_response(
            is_enabled=False
        ),
    ]
    self.assertEqual(eval_task.is_successful(env), 0.0)

  def test_is_successful_returns_0_5_if_wifi_is_off_and_bluetooth_is_on(self):
    env = mock.create_autospec(interface.AsyncEnv)
    eval_task = system.TurnOffWifiAndTurnOnBluetooth({})
    eval_task.initialize_task(env)
    env.controller.execute_adb_call.side_effect = [
        fake_adb_responses.create_get_wifi_enabled_response(is_enabled=True),
        fake_adb_responses.create_get_bluetooth_enabled_response(
            is_enabled=True
        ),
    ]
    self.assertEqual(eval_task.is_successful(env), 0.5)

  def test_is_successful_returns_0_5_if_wifi_is_on_and_bluetooth_is_off(self):
    env = mock.create_autospec(interface.AsyncEnv)
    eval_task = system.TurnOffWifiAndTurnOnBluetooth({})
    eval_task.initialize_task(env)
    env.controller.execute_adb_call.side_effect = [
        fake_adb_responses.create_get_wifi_enabled_response(is_enabled=False),
        fake_adb_responses.create_get_bluetooth_enabled_response(
            is_enabled=False
        ),
    ]
    self.assertEqual(eval_task.is_successful(env), 0.5)

  def test_is_successful_returns_1_if_wifi_is_off_and_bluetooth_is_on(self):
    env = mock.create_autospec(interface.AsyncEnv)
    eval_task = system.TurnOffWifiAndTurnOnBluetooth({})
    eval_task.initialize_task(env)
    env.controller.execute_adb_call.side_effect = [
        fake_adb_responses.create_get_wifi_enabled_response(is_enabled=False),
        fake_adb_responses.create_get_bluetooth_enabled_response(
            is_enabled=True
        ),
    ]
    self.assertEqual(eval_task.is_successful(env), 1.0)


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import time
from unittest import mock
from absl.testing import absltest
from android_env.proto import adb_pb2
from android_world.env import adb_utils
from android_world.task_evals.composite import markor_sms
from android_world.task_evals.utils import user_data_generation
from android_world.utils import test_utils


class TestMarkorCreateNoteAndSms(test_utils.AdbEvalTestBase):

  def setUp(self):
    super().setUp()
    self.extract_package_name = mock.patch.object(
        adb_utils, 'extract_package_name'
    ).start()
    self.extract_package_name.return_value = (
        'com.simplemobiletools.smsmessenger'
    )
    self.unused_mock_user_data_generation = mock.patch.object(
        user_data_generation, 'clear_device_storage'
    ).start()

  def test_MarkorCreateNoteAndSms_is_successful(self):
    # From shell date +%s
    mock_response_time = adb_pb2.AdbResponse()
    mock_response_time.generic.output = '{}'.format(
        str(int(time.time()))
    ).encode()

    # Create mock adb response for 'cat' command
    mock_response_cat = adb_pb2.AdbResponse()
    mock_response_cat.generic.output = b'Hello World'

    # From shell date +%s
    mock_response_time = adb_pb2.AdbResponse()
    mock_response_time.generic.output = '{}'.format(
        str(int(time.time()))
    ).encode()

    # Make stale message.
    one_day_s = 24 * 60 * 60
    mock_response_sms0 = adb_pb2.AdbResponse()
    date0_ms = str(int((time.time() - one_day_s) * 1000))
    mock_response_sms0.generic.output = (
        'Row: 0, address=1234567890, body=Hello World, service_center=NULL,'
        ' date={}'.format(
            date0_ms
        ).encode()
    )

    # Successful message.
    mock_response_sms1 = adb_pb2.AdbResponse()
    date1_ms = str(int(time.time() * 1000))
    mock_response_sms1.generic.output = (
        'Row: 0, address=1234567890, body=Hello World, service_center=NULL,'
        ' date={}'.format(
            date1_ms
        ).encode()
    )

    self.mock_issue_generic_request.side_effect = [
        mock_response_time,
        mock_response_sms0,
        mock_response_cat,
        mock_response_sms1,
        mock_response_time,
    ]
    test_utils.log_mock_calls(self.mock_issue_generic_request)

    self.mock_check_file_or_folder_exists.return_value = True

    env = mock.MagicMock()
    params = {
        'file_name': 'my_note.md',
        'text': 'Hello World',
        'number': '1234567890',
    }

    task = markor_sms.MarkorCreateNoteAndSms(params)
    self.assertEqual(test_utils.perform_task(task, env), 1)
    self.assertEqual(self.mock_execute_sql_command.call_count, 2)

  def test_MarkorCreateNoteAndSms_partial_success(self):
    # From shell date +%s
    mock_response_time = adb_pb2.AdbResponse()
    mock_response_time.generic.output = '{}'.format(
        str(int(time.time()))
    ).encode()

    # Create mock adb response for 'cat' command
    mock_response_cat = adb_pb2.AdbResponse()
    mock_response_cat.generic.output = b'Hello World'

    # From shell date +%s
    mock_response_time = adb_pb2.AdbResponse()
    mock_response_time.generic.output = '{}'.format(
        str(int(time.time()))
    ).encode()

    # Make stale message.
    one_day_s = 24 * 60 * 60
    mock_response_sms0 = adb_pb2.AdbResponse()
    date0_ms = str(int((time.time() - one_day_s) * 1000))
    mock_response_sms0.generic.output = (
        'Row: 0, address=1234567890, body=Hello World, service_center=NULL,'
        ' date={}'.format(
            date0_ms
        ).encode()
    )

    # No message found response.
    mock_response_sms1 = adb_pb2.AdbResponse()
    mock_response_sms1.generic.output = (
        'No result found.'.encode()
    )

    self.mock_issue_generic_request.side_effect = [
        mock_response_time,
        mock_response_sms0,
        mock_response_cat,
        mock_response_sms1,
        mock_response_time,
    ]
    test_utils.log_mock_calls(self.mock_issue_generic_request)

    self.mock_check_file_or_folder_exists.return_value = True

    env = mock.MagicMock()
    params = {
        'file_name': 'my_note.md',
        'text': 'Hello World',
        'number': '1234567890',
    }

    task = markor_sms.MarkorCreateNoteAndSms(params)
    self.assertEqual(test_utils.perform_task(task, env), 0.5)
    self.assertEqual(self.mock_execute_sql_command.call_count, 2)


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from unittest import mock

from absl.testing import absltest
from android_world.env import interface
from android_world.env import representation_utils
import numpy as np


class InterfaceTest(absltest.TestCase):

  @mock.patch("time.sleep", return_value=None)
  def test_ui_stability_true(self, unused_mocked_time_sleep):
    stable_ui_elements = [representation_utils.UIElement(text="StableElement")]
    states = [
        interface.State(
            ui_elements=stable_ui_elements,
            pixels=np.empty([1, 2, 3]),
            forest=None,
        )
        for _ in range(4)
    ]
    env = interface.AsyncAndroidEnv(mock.MagicMock())
    env._get_state = mock.MagicMock(side_effect=states)

    self.assertEqual(
        env._get_stable_state(
            stability_threshold=3, sleep_duration=0.1, timeout=1
        ),
        states[3],
    )

  @mock.patch("time.sleep", return_value=None)
  def test_ui_stability_false_due_to_timeout(
      self, unused_unused_mocked_time_sleep
  ):
    changing_ui_elements = [
        representation_utils.UIElement(text=f"Element{i}") for i in range(10)
    ]
    env = interface.AsyncAndroidEnv(mock.MagicMock())
    states = [
        interface.State(
            ui_elements=[elem], pixels=np.empty([1, 2, 3]), forest=None
        )
        for elem in changing_ui_elements
    ]
    env._get_state = mock.MagicMock(side_effect=states)

    self.assertEqual(
        env._get_stable_state(
            stability_threshold=3, sleep_duration=0.5, timeout=2
        ),
        states[5],
    )

  @mock.patch("time.sleep", return_value=None)
  def test_stability_fluctuates(self, unused_mocked_time_sleep):
    env = interface.AsyncAndroidEnv(mock.MagicMock())
    fluctuating_ui_elements = (
        [representation_utils.UIElement(text="Stable")] * 2
        + [representation_utils.UIElement(text="Unstable")]
        + [representation_utils.UIElement(text="Stable")] * 3
        + [representation_utils.UIElement(text="Unstable")]
    )
    states = [
        interface.State(
            ui_elements=[elem], pixels=np.empty([1, 2, 3]), forest=None
        )
        for elem in fluctuating_ui_elements
    ]
    env._get_state = mock.MagicMock(side_effect=states)
    self.assertEqual(
        env._get_stable_state(
            stability_threshold=3, sleep_duration=0.5, timeout=2.5
        ),
        states[6],
    )


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Utilties to interact with the environment using adb."""

import os
import re
import time
from typing import Any, Callable, Collection, Iterable, Literal, Optional, TypeVar
import unicodedata
from absl import logging
from android_env import env_interface
from android_env.components import errors
from android_env.proto import adb_pb2
import immutabledict

T = TypeVar('T')

_DEFAULT_TIMEOUT_SECS = 10

# Maps app names to the activity that should be launched to open the app.
_PATTERN_TO_ACTIVITY = immutabledict.immutabledict({
    'google chrome|chrome': (
        'com.android.chrome/com.google.android.apps.chrome.Main'
    ),
    'google chat': 'com.google.android.apps.dynamite/com.google.android.apps.dynamite.startup.StartUpActivity',
    'settings|system settings': 'com.android.settings/.Settings',
    'youtube|yt': 'com.google.android.youtube/com.google.android.apps.youtube.app.WatchWhileActivity',
    'google play|play store|gps': (
        'com.android.vending/com.google.android.finsky.activities.MainActivity'
    ),
    'gmail|gemail|google mail|google email|google mail client': (
        'com.google.android.gm/.ConversationListActivityGmail'
    ),
    'google maps|gmaps|maps|google map': (
        'com.google.android.apps.maps/com.google.android.maps.MapsActivity'
    ),
    'google photos|gphotos|photos|google photo|google pics|google images': 'com.google.android.apps.photos/com.google.android.apps.photos.home.HomeActivity',
    'google calendar|gcal': (
        'com.google.android.calendar/com.android.calendar.AllInOneActivity'
    ),
    'camera': 'com.android.camera2/com.android.camera.CameraLauncher',
    'audio recorder': 'com.dimowner.audiorecorder/com.dimowner.audiorecorder.app.welcome.WelcomeActivity',
    'google drive|gdrive|drive': (
        'com.google.android.apps.docs/.drive.startup.StartupActivity'
    ),
    'google keep|gkeep|keep': (
        'com.google.android.keep/.activities.BrowseActivity'
    ),
    'grubhub': (
        'com.grubhub.android/com.grubhub.dinerapp.android.splash.SplashActivity'
    ),
    'tripadvisor': 'com.tripadvisor.tripadvisor/com.tripadvisor.android.ui.launcher.LauncherActivity',
    'starbucks': 'com.starbucks.mobilecard/.main.activity.LandingPageActivity',
    'google docs|gdocs|docs': 'com.google.android.apps.docs.editors.docs/com.google.android.apps.docs.editors.homescreen.HomescreenActivity',
    'google sheets|gsheets|sheets': 'com.google.android.apps.docs.editors.sheets/com.google.android.apps.docs.editors.homescreen.HomescreenActivity',
    'google slides|gslides|slides': 'com.google.android.apps.docs.editors.slides/com.google.android.apps.docs.editors.homescreen.HomescreenActivity',
    'clock': 'com.google.android.deskclock/com.android.deskclock.DeskClock',
    'google search|google': 'com.google.android.googlequicksearchbox/com.google.android.googlequicksearchbox.SearchActivity',
    'contacts': 'com.google.android.contacts/com.android.contacts.activities.PeopleActivity',
    'facebook|fb': 'com.facebook.katana/com.facebook.katana.LoginActivity',
    'whatsapp|wa': 'com.whatsapp/com.whatsapp.Main',
    'instagram|ig': (
        'com.instagram.android/com.instagram.mainactivity.MainActivity'
    ),
    'twitter|tweet': 'com.twitter.android/com.twitter.app.main.MainActivity',
    'snapchat|sc': 'com.snapchat.android/com.snap.mushroom.MainActivity',
    'telegram|tg': 'org.telegram.messenger/org.telegram.ui.LaunchActivity',
    'linkedin': (
        'com.linkedin.android/com.linkedin.android.authenticator.LaunchActivity'
    ),
    'spotify|spot': 'com.spotify.music/com.spotify.music.MainActivity',
    'netflix': 'com.netflix.mediaclient/com.netflix.mediaclient.ui.launch.UIWebViewActivity',
    'amazon shopping|amazon|amzn': (
        'com.amazon.mShop.android.shopping/com.amazon.mShop.home.HomeActivity'
    ),
    'tiktok|tt': 'com.zhiliaoapp.musically/com.ss.android.ugc.aweme.splash.SplashActivity',
    'discord': 'com.discord/com.discord.app.AppActivity$Main',
    'reddit': 'com.reddit.frontpage/com.reddit.frontpage.MainActivity',
    'pinterest': 'com.pinterest/com.pinterest.activity.PinterestActivity',
    'android world': 'com.example.androidworld/.MainActivity',
    'files': 'com.google.android.documentsui/com.android.documentsui.files.FilesActivity',
    'markor': 'net.gsantner.markor/net.gsantner.markor.activity.MainActivity',
    'clipper': 'ca.zgrs.clipper/ca.zgrs.clipper.Main',
    'messages': 'com.google.android.apps.messaging/com.google.android.apps.messaging.ui.ConversationListActivity',
    'simple sms messenger|simple sms': 'com.simplemobiletools.smsmessenger/com.simplemobiletools.smsmessenger.activities.MainActivity',
    'dialer|phone': 'com.google.android.dialer/com.google.android.dialer.extensions.GoogleDialtactsActivity',
    'simple calendar pro|simple calendar': 'com.simplemobiletools.calendar.pro/com.simplemobiletools.calendar.pro.activities.MainActivity',
    'simple gallery pro|simple gallery': 'com.simplemobiletools.gallery.pro/com.simplemobiletools.gallery.pro.activities.MainActivity',
    'miniwob': 'com.google.androidenv.miniwob/com.google.androidenv.miniwob.app.MainActivity',
    'simple draw pro': 'com.simplemobiletools.draw.pro/com.simplemobiletools.draw.pro.activities.MainActivity',
    'pro expense|pro expense app': (
        'com.arduia.expense/com.arduia.expense.ui.MainActivity'
    ),
    'broccoli|broccoli app|broccoli recipe app|recipe app': (
        'com.flauschcode.broccoli/com.flauschcode.broccoli.MainActivity'
    ),
    'caa|caa test|context aware access': 'com.google.ccc.hosted.contextawareaccess.thirdpartyapp/.ChooserActivity',
    'osmand': 'net.osmand/net.osmand.plus.activities.MapActivity',
    'tasks|tasks app|tasks.org:': (
        'org.tasks/com.todoroo.astrid.activity.MainActivity'
    ),
    'open tracks sports tracker|activity tracker|open tracks|opentracks': (
        'de.dennisguse.opentracks/de.dennisguse.opentracks.TrackListActivity'
    ),
    'joplin|joplin app': 'net.cozic.joplin/.MainActivity',
    'vlc|vlc app|vlc player': 'org.videolan.vlc/.gui.MainActivity',
    'retro music|retro|retro player': (
        'code.name.monkey.retromusic/.activities.MainActivity'
    ),
})
_ORIENTATIONS = {
    'portrait': '0',
    'landscape': '1',
    'portrait_reversed': '2',
    'landscape_reversed': '3',
}

# Special app names that will trigger opening the default app.
_DEFAULT_URIS: dict[str, str] = {
    'calendar': 'content://com.android.calendar',
    'browser': 'http://',
    'contacts': 'content://contacts/people/',
    'email': 'mailto:',
    'gallery': 'content://media/external/images/media/',
}


def check_ok(response: adb_pb2.AdbResponse, message=None) -> None:
  """Check an ADB response and raise RuntimeError if not OK.

  Args:
    response: AdbResponse to check.
    message: Error message to raise on non-ok response. If not specified, a
      generic "ADB command failed" error message is used.

  Raises:
    RuntimeError: If response status is not OK.
  """
  if response.status != adb_pb2.AdbResponse.Status.OK:
    if message is not None:
      raise RuntimeError(message)
    else:
      raise RuntimeError(
          f'ADB command failed with status {response.status}:'
          f' {response.generic.output.decode()}.'
      )


def start_activity(
    activity: str,
    extra_args: Optional[Collection[str]],
    env: env_interface.AndroidEnvInterface,
    timeout_sec: Optional[float] = _DEFAULT_TIMEOUT_SECS,
) -> adb_pb2.AdbResponse:
  """Issues an AdbRequest to launch the given activity.

  Args:
    activity: The activity to launch in standard android_package/activity_name
      format.
    extra_args: Optional set of arguments to be issued with the ABD broadcast.
    env: The environment.
    timeout_sec: A timeout to use for this operation.

  Returns:
    The adb response received after issuing the request.
  """
  logging.info('Attempting to launch %r', activity)
  response = env.execute_adb_call(
      adb_pb2.AdbRequest(
          start_activity=adb_pb2.AdbRequest.StartActivity(
              full_activity=activity, extra_args=extra_args
          ),
          timeout_sec=timeout_sec,
      )
  )
  if response.status != adb_pb2.AdbResponse.Status.OK:
    logging.error('Failed to launch activity: %r', activity)
    return response

  logging.info('Launch package output %r', response.generic.output)
  return response


def get_current_activity(
    env: env_interface.AndroidEnvInterface,
    timeout_sec: Optional[float] = _DEFAULT_TIMEOUT_SECS,
) -> tuple[Optional[str], adb_pb2.AdbResponse]:
  """Returns the full activity name that is currently opened to the user.

  Args:
    env: The environment.
    timeout_sec: A timeout to use for this operation.

  Returns:
    A tuple (current_activity_name, adb_response) containing the string with
      the current activity or None if no current activity can be
      extracted, and the adb response received after issuing the request.
  """
  response = env.execute_adb_call(
      adb_pb2.AdbRequest(
          get_current_activity=adb_pb2.AdbRequest.GetCurrentActivity(),
          timeout_sec=timeout_sec,
      )
  )
  if response.status != adb_pb2.AdbResponse.Status.OK:
    logging.warning(
        'Failed to obtain visible task. error_message: %r',
        response.error_message,
    )
    return (None, response)

  activity = response.get_current_activity.full_activity
  return (activity, response)


def tap_screen(
    x: int,
    y: int,
    env: env_interface.AndroidEnvInterface,
    timeout_sec: Optional[float] = _DEFAULT_TIMEOUT_SECS,
) -> adb_pb2.AdbResponse:
  """Issues an AdbRequest to tap the screen at the specified point.

  Args:
    x: X coordinate on the screen, in pixels.
    y: Y coordinate on the screen, in pixels.
    env: The environment.
    timeout_sec: A timeout to use for this operation.

  Returns:
    The adb response received after issuing the request.
  """
  logging.info('Attemting to tap the screen at (%d, %d)', x, y)
  response = env.execute_adb_call(
      adb_pb2.AdbRequest(
          tap=adb_pb2.AdbRequest.Tap(x=x, y=y), timeout_sec=timeout_sec
      )
  )

  if response.status != adb_pb2.AdbResponse.Status.OK:
    logging.error('Failed to tap the screen')

  return response


def double_tap(
    x: int,
    y: int,
    env: env_interface.AndroidEnvInterface,
    timeout_sec: Optional[float] = _DEFAULT_TIMEOUT_SECS,
) -> adb_pb2.AdbResponse:
  """Issues two AdbRequests to double tap the screen at the specified point.

  Args:
    x: X coordinate on the screen, in pixels.
    y: Y coordinate on the screen, in pixels.
    env: The environment.
    timeout_sec: A timeout to use for this operation.

  Returns:
    The adb response received after issuing the second tap request.
  """
  logging.info('Attempting to double tap the screen at (%d, %d)', x, y)
  first_tap = tap_screen(x, y, env, timeout_sec=0)
  second_tap = tap_screen(x, y, env, timeout_sec=timeout_sec)
  logging.info('First tap: %s', first_tap)
  logging.info('Second tap: %s', second_tap)
  return second_tap


def long_press(
    x: int,
    y: int,
    env: env_interface.AndroidEnvInterface,
    timeout_sec: Optional[float] = _DEFAULT_TIMEOUT_SECS,
) -> adb_pb2.AdbResponse:
  """Issues an AdbRequest to long press the screen at the specified point.

  Args:
    x: X coordinate on the screen, in pixels.
    y: Y coordinate on the screen, in pixels.
    env: The environment.
    timeout_sec: A timeout to use for this operation.

  Returns:
    The adb response received after issuing long press.
  """
  logging.info('Attempting to long press the screen at (%d, %d)', x, y)
  return issue_generic_request(
      ['shell', 'input', 'swipe', str(x), str(y), str(x), str(y), '1000'],
      env,
      timeout_sec,
  )


def press_home_button(
    env: env_interface.AndroidEnvInterface,
    timeout_sec: Optional[float] = _DEFAULT_TIMEOUT_SECS,
) -> adb_pb2.AdbResponse:
  """Issues an AdbRequest to press the HOME button in the nav bar.

  Args:
    env: The environment.
    timeout_sec: A timeout to use for this operation.

  Returns:
    The adb response received after issuing the request.
  """
  logging.info('Attempting to press the HOME button')
  response = env.execute_adb_call(
      adb_pb2.AdbRequest(
          press_button=adb_pb2.AdbRequest.PressButton(
              button=adb_pb2.AdbRequest.PressButton.HOME
          ),
          timeout_sec=timeout_sec,
      )
  )

  if response.status != adb_pb2.AdbResponse.Status.OK:
    logging.error('Failed to press the HOME button')
  return response


def press_back_button(
    env: env_interface.AndroidEnvInterface,
    timeout_sec: Optional[float] = _DEFAULT_TIMEOUT_SECS,
) -> adb_pb2.AdbResponse:
  """Issues an AdbRequest to press the BACK button in the nav bar.

  Args:
    env: The environment.
    timeout_sec: A timeout to use for this operation.

  Returns:
    The adb response received after issuing the request.
  """
  logging.info('Attemting to press the BACK button')
  response = env.execute_adb_call(
      adb_pb2.AdbRequest(
          press_button=adb_pb2.AdbRequest.PressButton(
              button=adb_pb2.AdbRequest.PressButton.BACK
          ),
          timeout_sec=timeout_sec,
      )
  )

  if response.status != adb_pb2.AdbResponse.Status.OK:
    logging.error('Failed to press the BACK button')

  return response


def press_enter_button(
    env: env_interface.AndroidEnvInterface,
    timeout_sec: Optional[float] = _DEFAULT_TIMEOUT_SECS,
) -> adb_pb2.AdbResponse:
  """Issues an AdbRequest to press the ENTER button in the nav bar.

  Args:
    env: The environment.
    timeout_sec: A timeout to use for this operation.

  Returns:
    The adb response received after issuing the request.
  """
  logging.info('Attemting to press the ENTER button')
  response = env.execute_adb_call(
      adb_pb2.AdbRequest(
          press_button=adb_pb2.AdbRequest.PressButton(
              button=adb_pb2.AdbRequest.PressButton.ENTER
          ),
          timeout_sec=timeout_sec,
      )
  )

  if response.status != adb_pb2.AdbResponse.Status.OK:
    logging.error('Failed to press the ENTER button')

  return response


def press_keyboard_generic(
    keycode: str,
    env: env_interface.AndroidEnvInterface,
    timeout_sec: Optional[float] = _DEFAULT_TIMEOUT_SECS,
) -> adb_pb2.AdbResponse:
  """Issues an AdbRequest to press any button in the keyboard.

  Args:
    keycode: The keycode to press.
    env: The environment.
    timeout_sec: A timeout to use for this operation.

  Returns:
    The adb response received after issuing the request.
  """
  logging.info('Attemting to press the keyboard button: %s', keycode)

  response = issue_generic_request(
      ['shell', 'input', 'keyevent', keycode],
      env,
      timeout_sec,
  )

  if response.status != adb_pb2.AdbResponse.Status.OK:
    logging.error('Failed to press the keyboard button: %s', keycode)

  return response


def _adb_text_format(text: str) -> str:
  """Prepares text for use with adb."""
  to_escape = [
      '\\',
      ';',
      '|',
      '`',
      '\r',
      ' ',
      "'",
      '"',
      '&',
      '<',
      '>',
      '(',
      ')',
      '#',
      '$',
  ]
  for char in to_escape:
    text = text.replace(char, '\\' + char)
  normalized_text = unicodedata.normalize('NFKD', text)
  return normalized_text.encode('ascii', 'ignore').decode('ascii')


def _split_words_and_newlines(text: str) -> Iterable[str]:
  """Split lines of text into individual words and newline chars."""
  lines = text.split('\n')
  for i, line in enumerate(lines):
    words = line.split(' ')
    for j, word in enumerate(words):
      yield word
      if j < len(words) - 1:
        yield '%s'
    if i < len(lines) - 1:
      yield '\n'


def type_text(
    text: str,
    env: env_interface.AndroidEnvInterface,
    timeout_sec: Optional[float] = _DEFAULT_TIMEOUT_SECS,
) -> None:
  """Issues an AdbRequest to type the specified text string word-by-word.

  It types word-by-word to fix issue where sometimes long text strings can be
  typed out of order at the character level. Additionally, long strings can time
  out and word-by-word fixes this, while allowing us to keep a lot timeout per
  word.

  Args:
    text: The text string to be typed.
    env: The environment.
    timeout_sec: A timeout to use for this operation. Note: For longer texts,
      this should be longer as it takes longer to type.
  """
  words = _split_words_and_newlines(text)
  for word in words:
    if word == '\n':
      logging.info('Found \\n, pressing enter button.')
      press_enter_button(env)
      continue
    formatted = _adb_text_format(word)
    logging.info('Attempting to type word: %r', formatted)
    response = env.execute_adb_call(
        adb_pb2.AdbRequest(
            input_text=adb_pb2.AdbRequest.InputText(text=formatted),
            timeout_sec=timeout_sec,
        )
    )

    if response.status != adb_pb2.AdbResponse.Status.OK:
      logging.error('Failed to type word: %r', formatted)


def issue_generic_request(
    args: Collection[str] | str,
    env: env_interface.AndroidEnvInterface,
    timeout_sec: Optional[float] = _DEFAULT_TIMEOUT_SECS,
) -> adb_pb2.AdbResponse:
  """Issues a generic adb command.

  Example:
  ~~~~~~~

  issue_generic_request(['shell', 'ls'], env)
  # or
  issue_generic_request('shell ls', env)

  Args:
    args: Set of arguments to be issued with the ABD broadcast. Can also be a
      string.
    env: The environment.
    timeout_sec: A timeout to use for this operation.

  Returns:
    The adb response received after issuing the request.
  """
  if isinstance(args, str):
    args_str = args
    args = args.split(' ')
  else:
    args_str = ' '.join(args)
  logging.info('Issuing generic adb request: %r', args_str)

  response = env.execute_adb_call(
      adb_pb2.AdbRequest(
          generic=adb_pb2.AdbRequest.GenericRequest(args=args),
          timeout_sec=timeout_sec,
      )
  )
  if response.status != adb_pb2.AdbResponse.Status.OK:
    logging.error('Failed to issue generic adb request: %r', args_str)

  return response


def get_adb_activity(app_name: str) -> Optional[str]:
  """Get a mapping of regex patterns to ADB activities top Android apps."""
  for pattern, activity in _PATTERN_TO_ACTIVITY.items():
    if re.match(pattern.lower(), app_name.lower()):
      return activity


def get_all_apps(
    env: env_interface.AndroidEnvInterface,
    timeout_sec: Optional[float] = _DEFAULT_TIMEOUT_SECS,
) -> list[str]:
  """Returns all packages installed on the device.

  Note: the output list will not be exhaustive as it is currently based on a
  mapping we define, so any apps not included in that mapping will not be
  output here.

  Args:
    env: The AndroidEnv interface.
    timeout_sec: A timeout to use for this operation. If not set the default
      timeout will be used.

  Returns:
    A list of app names.
  """
  response = env.execute_adb_call(
      adb_pb2.AdbRequest(
          package_manager=adb_pb2.AdbRequest.PackageManagerRequest(
              list=adb_pb2.AdbRequest.PackageManagerRequest.List(
                  packages=adb_pb2.AdbRequest.PackageManagerRequest.List.Packages()
              )
          ),
          timeout_sec=timeout_sec,
      )
  )
  if response.status != adb_pb2.AdbResponse.Status.OK:
    logging.error(
        'Failed to issue package manager request',
    )

  package_to_app = {
      v.split('/')[0]: k.split('|')[0] for k, v in _PATTERN_TO_ACTIVITY.items()
  }

  app_names = []
  for package in response.package_manager.list.items:
    if package in package_to_app:
      app_names.append(package_to_app[package])

  return app_names


def _launch_default_app(
    app_key: str,
    env: env_interface.AndroidEnvInterface,
    timeout_sec: Optional[float] = _DEFAULT_TIMEOUT_SECS,
) -> adb_pb2.AdbResponse:
  """Launches a default application with a predefined data URI."""
  if app_key not in _DEFAULT_URIS:
    raise ValueError(
        f'Unrecognized app key: {app_key}. Must be one of'
        f' {list(_DEFAULT_URIS.keys())}'
    )
  data_uri = _DEFAULT_URIS[app_key]
  adb_command = [
      'shell',
      'am',
      'start',
      '-a',
      'android.intent.action.VIEW',
      '-d',
      data_uri,
  ]
  response = issue_generic_request(adb_command, env, timeout_sec)
  return response


def launch_app(
    app_name: str,
    env: env_interface.AndroidEnvInterface,
) -> Optional[str]:
  """Uses regex and ADB activity to try to launch an app.

  Args:
    app_name: The name of the app, as represented as a key in
      _PATTERN_TO_ACTIVITY.
    env: The environment.

  Returns:
    The name of the app that is launched.
  """

  if app_name in _DEFAULT_URIS:
    _launch_default_app(app_name, env)
    return app_name

  activity = get_adb_activity(app_name)
  if activity is None:
    logging.error('Failed to launch app: %r', app_name)
    return None
  start_activity(activity, extra_args=[], env=env, timeout_sec=5)
  return app_name


def extract_package_name(activity: str) -> str:
  """Extract the package name from the activity string."""
  return activity.split('/')[0]


def close_recents(env: env_interface.AndroidEnvInterface):
  """Closes all recent apps."""
  response = issue_generic_request('shell dumpsys activity recents', env)
  if response.status != adb_pb2.AdbResponse.Status.OK:
    return
  recents_ids = re.findall(r'id=(\d+)', response.generic.output.decode())
  for recents_id in recents_ids:
    issue_generic_request(['shell', 'am', 'stack', 'remove', recents_id], env)


def close_app(
    app_name: str,
    env: env_interface.AndroidEnvInterface,
    timeout_sec: Optional[float] = _DEFAULT_TIMEOUT_SECS,
) -> Optional[str]:
  """Uses regex and ADB package name to try to directly close an app.

  Args:
    app_name: The name of the app, as represented as a key in
      _PATTERN_TO_ACTIVITY.
    env: The environment.
    timeout_sec: The timeout.

  Returns:
    The app name that is closed.
  """
  activity = get_adb_activity(app_name)
  if activity is None:
    logging.error('Failed to close app: %r', app_name)
    return None
  package_name = extract_package_name(activity)
  issue_generic_request(
      ['shell', 'am', 'force-stop', package_name], env, timeout_sec
  )
  return app_name


def generate_swipe_command(
    start_x: int,
    start_y: int,
    end_x: int,
    end_y: int,
    duration_ms: Optional[int] = None,
) -> list[str]:
  """Sends a swipe action to the simulator.

  Args:
    start_x: The x-coordinate of the start of the swipe.
    start_y: The y-coordinate of the start of the swipe.
    end_x: The x-coordinate of the end of the swipe.
    end_y: The y-coordinate of the end of the swipe.
    duration_ms: If given, the duration of time in milliseconds to take to
      complete the swipe. This value can differentiate a swipe from a fling.

  Returns:
    List of adb arguments.
  """
  duration_str = str(duration_ms) if duration_ms else ''
  return [
      'shell',
      'input',
      'swipe',
      str(start_x),
      str(start_y),
      str(end_x),
      str(end_y),
      duration_str,
  ]


def send_android_intent(
    command: str,
    action: str,
    env: env_interface.AndroidEnvInterface,
    data_uri: str | None = None,
    mime_type: str | None = None,
    extras: dict[str, Any] | None = None,
    timeout_sec: int = _DEFAULT_TIMEOUT_SECS,
) -> adb_pb2.AdbResponse:
  """Sends an intent to Android device using adb.

  This is a low-level command for sending an intent with additional parameters.
  When these additional parameters are not necessary, consider instead using
  `adb_utils.start_activity()` or `env.execute_adb_call()` with
  `AdbRequest.StartActivity` or `AdbRequest.SendBroadcast`.

  Args:
    command: Either "start" for start activity intents or "broadcast" for
      broadcast intents.
    action: The broadcast action (e.g. "android.intent.action.VIEW").
    env: The environment to which the broadcast is sent.
    data_uri: Optional intent data URI (e.g. "content://contacts/people/1").
    mime_type: Optional mime type (e.g. "image/png").
    extras: Dictionary containing keys and values to be sent as extras.
    timeout_sec: The maximum time in seconds to wait for the broadcast to
      complete.

  Returns:
    AdbResponse object.
  """
  if command not in ['start', 'broadcast']:
    raise ValueError('Intent command must be either "start" or "broadcast"')

  adb_command = ['shell', 'am', command, '-a', action]

  if data_uri:
    adb_command.extend(['-d', f'"{data_uri}"'])

  if mime_type:
    adb_command.extend(['-t', f'"{mime_type}"'])

  if extras:
    for key, value in extras.items():
      if isinstance(value, tuple):
        type_override, value = value
        if type_override == 'str':
          adb_command.extend(['--es', key, f'"{value}"'])
        elif type_override == 'bool':
          adb_command.extend(['--ez', key, f'"{value}"'])
        elif type_override == 'int':
          adb_command.extend(['--ei', key, f'"{value}"'])
        elif type_override == 'long':  # long type only available via override.
          adb_command.extend(['--el', key, f'"{value}"'])
        elif type_override == 'float':
          adb_command.extend(['--ef', key, f'"{value}"'])
        elif type_override == 'string array':
          array_str = ','.join(value)
          adb_command.extend(['--esa', key, f'"{array_str}"'])
      elif isinstance(value, str):
        adb_command.extend(['--es', key, f'"{value}"'])
      elif isinstance(value, bool):
        adb_command.extend(['--ez', key, f'"{value}"'])
      elif isinstance(value, int):
        adb_command.extend(['--ei', key, f'"{value}"'])
      # long type only available via override above.
      elif isinstance(value, float):
        adb_command.extend(['--ef', key, f'"{value}"'])
      elif isinstance(value, list):
        array_str = ','.join(value)
        adb_command.extend(['--esa', key, f'"{array_str}"'])
      else:
        raise ValueError(f'Unrecognized extra type for {key}')

  return issue_generic_request(adb_command, env, timeout_sec)


def get_api_level(env: env_interface.AndroidEnvInterface) -> int:
  """Gets the API level of the device.

  Args:
    env: The environment.

  Returns:
    The API level.

  Raises:
    RuntimeError: If adb command does not successfully execute.
  """
  version = issue_generic_request(
      ['shell', 'getprop ro.build.version.sdk'], env
  )
  if version.status != adb_pb2.AdbResponse.Status.OK:
    raise RuntimeError('Failed to get API level.')
  return int(version.generic.output)


def _toggle_svc(
    service: str,
    on_or_off: Literal['on', 'off'],
    env: env_interface.AndroidEnvInterface,
) -> adb_pb2.AdbResponse:
  """Toggles a system service on or off using svc.

  Args:
    service: The name of the service to toggle.
    on_or_off: The state to set ('on' or 'off').
    env: The Android environment.

  Returns:
    adb status.

  Raises:
    ValueError: If invalid on_or_off is provided.
  """
  if on_or_off not in ('on', 'off'):
    raise ValueError('Must be one of on or off.')

  cmd = 'enable' if on_or_off == 'on' else 'disable'
  return issue_generic_request(['shell', 'svc', service, cmd], env)


def toggle_wifi(
    env: env_interface.AndroidEnvInterface, on_or_off: Literal['on', 'off']
) -> adb_pb2.AdbResponse:
  """Toggles wifi on or off.

  Args:
    env: The Android environment.
    on_or_off: Whether to turn it on or off.

  Returns:
    adb status.
  """
  return _toggle_svc('wifi', on_or_off, env)


def toggle_bluetooth(
    env: env_interface.AndroidEnvInterface, on_or_off: Literal['on', 'off']
) -> adb_pb2.AdbResponse:
  """Toggles Bluetooth on or off.

  Args:
    env: The Android environment.
    on_or_off: Whether to turn it on or off.

  Returns:
    adb status.
  """
  return _toggle_svc('bluetooth', on_or_off, env)


def set_brightness(
    max_or_min: str, env: env_interface.AndroidEnvInterface
) -> adb_pb2.AdbResponse:
  """Sets screen brightness to maximum or minimum.

  Args:
    max_or_min: Whether to set it to maximum or minimum.
    env: The environment.

  Returns:
    The adb status.

  Raises:
    ValueError: If invalid max_or_min is provided.
  """
  if max_or_min not in ('max', 'min'):
    raise ValueError('Must be one of max or min.')

  brightness_level = '255' if max_or_min == 'max' else '1'

  return issue_generic_request(
      [
          'shell',
          'settings',
          'put',
          'system',
          'screen_brightness',
          brightness_level,
      ],
      env,
  )


def clear_app_data(
    package_name: str, env: env_interface.AndroidEnvInterface
) -> adb_pb2.AdbResponse:
  """Clears all data for a given package.

  Args:
    package_name: The package name of the app whose data is to be cleared.
    env: The environment.

  Returns:
    adb status.
  """
  try:
    return issue_generic_request(['shell', 'pm', 'clear', package_name], env)
  except errors.AdbControllerError as exc:
    raise errors.AdbControllerError(
        f'Failed to clear app data for package {package_name}. Is the app'
        ' installed?'
    ) from exc


def toggle_airplane_mode(
    on_or_off: Literal['on', 'off'], env: env_interface.AndroidEnvInterface
) -> adb_pb2.AdbResponse:
  """Toggles airplane mode on or off.

  Args:
    on_or_off: Whether to turn it on or off.
    env: The Android environment.

  Returns:
    adb status.

  Raises:
    ValueError: If invalid on_or_off is provided.
  """
  if on_or_off not in ('on', 'off'):
    raise ValueError('Must be one of on or off.')
  state = '1' if on_or_off == 'on' else '0'
  return issue_generic_request(
      ['shell', 'settings', 'put', 'global', 'airplane_mode_on', state], env
  )


def install_apk(
    apk_location: str, env: env_interface.AndroidEnvInterface
) -> None:
  """Installs Android World APK.

  Args:
    apk_location: Location of apk.
    env: The environment.

  Raises:
    ValueError: If apk location does not exist.
  """
  if not os.path.exists(apk_location):
    raise ValueError('APK does not exist.')
  issue_generic_request(['install', apk_location], env, timeout_sec=30.0)


def check_airplane_mode(env: env_interface.AndroidEnvInterface) -> bool:
  """Checks if airplane mode is enabled.

  Args:
    env: The Android environment.

  Returns:
    True if airplane mode is enabled, False otherwise.

  Raises:
    RuntimeError: If cannot execute airplane mode check.
  """
  response = issue_generic_request(
      ['shell', 'settings', 'get', 'global', 'airplane_mode_on'], env
  )

  if response.status != adb_pb2.AdbResponse.Status.OK:
    raise RuntimeError(
        f'ADB command failed with status {response.status}:'
        f' {response.generic.output.decode()}.'
    )

  return response.generic.output.decode().strip('\n') == '1'


def extract_broadcast_data(raw_output: str) -> Optional[str]:
  """Extracts the data from an adb broadcast command output.

  Args:
    raw_output: The adb command output.

  Returns:
    Extracted data as a string, or None if the result is 0.
  """
  if 'Broadcast completed: result=-1, data=' in raw_output:
    return raw_output.split('data=')[1].strip('"\n')
  elif 'Broadcast completed: result=0' in raw_output:
    return None
  else:
    raise ValueError(f'Unexpected broadcast output: {raw_output}')


def _extract_clipper_output(raw_output: str) -> str:
  """Parses the clipper output from the adb command.

  Args:
    raw_output: The adb command output.

  Returns:
    The clipboard content as a string.

  Raises:
    RuntimeError: If the adb command does not successfully execute or if the
      app is not in the foreground.
  """
  parsed_data = extract_broadcast_data(raw_output)
  if parsed_data is not None:
    return parsed_data
  else:
    raise RuntimeError(
        'Clipper app must be in the foreground to access clipboard. '
        'Additionally, app privileges must be granted manually by opening the '
        'clipper app and granting them.'
    )


def get_clipboard_contents(env: env_interface.AndroidEnvInterface) -> str:
  """Gets the clipboard content from the Android device.

  Args:
    env: The environment.

  Returns:
    The clipboard content as a string.

  Raises:
    RuntimeError: If the adb command does not successfully execute or if the
      app is not in the foreground.
  """
  if launch_app('clipper', env) is None:
    raise RuntimeError(
        'Clipper app must be in the foreground to access clipboard. You may'
        ' need to install clipper app.'
    )

  time.sleep(0.5)
  res = issue_generic_request(
      ['shell', 'am', 'broadcast', '-a', 'clipper.get'], env
  )

  if res.status != adb_pb2.AdbResponse.Status.OK:
    raise RuntimeError('Failed to get clipboard content.')

  output_str = res.generic.output.decode('utf-8')
  result = _extract_clipper_output(output_str)

  press_back_button(env)
  return result


def change_orientation(
    orientation: str, env: env_interface.AndroidEnvInterface
) -> None:
  """Changes the screen orientation.

  Args:
    orientation: str, The new orientation. Can be portrait, landscape,
      reverse_portrait, or reverse_landscape.
    env: The environment.

  Raises:
    ValueError if invalid orientation is provided.
  """
  if orientation not in _ORIENTATIONS:
    raise ValueError(
        f'Unknown orientation provided: {orientation} not in'
        f' {_ORIENTATIONS.keys()}'
    )
  command = [
      'shell',
      'settings',
      'put',
      'system',
  ]
  # Turn off accelerometer.
  issue_generic_request(command + ['accelerometer_rotation', '0'], env)
  issue_generic_request(
      command + ['user_rotation', _ORIENTATIONS[orientation]], env
  )


def set_clipboard_contents(
    content: str, env: env_interface.AndroidEnvInterface
) -> None:
  """Sets the clipboard content on the Android device.

  NOTE: If using an Emulator, the contents of your clipboard on your local
  machine may transfer to the emulator when focused on the emulator. Thus the
  result of this function can be overwritten just by switching windows.

  Args:
    content: Content to put into clipboard.
    env: The environment.

  Raises:
    RuntimeError: If the adb command does not successfully execute or if the
    app is not in the foreground.
  """
  if launch_app('clipper', env) is None:
    raise RuntimeError(
        'Clipper app must be in the foreground to access clipboard. You may'
        ' need to install clipper app.'
    )

  time.sleep(0.5)
  content = _adb_text_format(content)
  output_str = issue_generic_request(
      ['shell', 'am', 'broadcast', '-a', 'clipper.set', '-e', 'text', content],
      env,
  ).generic.output.decode('utf-8')
  _extract_clipper_output(output_str)
  press_back_button(env)


def grant_permissions(
    activity_name: str,
    permission: str,
    env: env_interface.AndroidEnvInterface,
) -> None:
  """Grants permissions on an activity.

  This is useful because it prevents pop-ups prompting user/agent for
  permission.

  See https://developer.android.com/reference/android/Manifest.permission for
  available permissions to grant.

  Args:
    activity_name: The name of the activity.
    permission: The permission to grant.
    env: The AndroidEnv instance.
  """
  issue_generic_request(
      ['shell', 'pm', 'grant', activity_name, permission],
      env,
  )


def execute_sql_command(
    db_path: str,
    sql_command: str,
    env: env_interface.AndroidEnvInterface,
) -> adb_pb2.AdbResponse:
  """Execute an arbitrary SQL command on a SQLite database file via ADB.

  Args:
    db_path: The path to the SQLite database on the Android device.
    sql_command: The SQL command to execute.
    env: The environment.

  Returns:
    The adb response received after issuing the request.
  """
  set_root_if_needed(env)
  adb_command = ['shell', f'sqlite3 {db_path} "{sql_command}"']
  adb_response = issue_generic_request(adb_command, env)
  return adb_response


def get_call_state(
    env: env_interface.AndroidEnvInterface,
    timeout_sec: float = _DEFAULT_TIMEOUT_SECS,
) -> str:
  """Query the call state and the dialed number of the phone through ADB.

  Args:
    env: The Android environment interface.
    timeout_sec: A timeout for the ADB operation.

  Returns:
    A tuple containing the call state as a string and the dialed number as a
    string.
  """
  adb_args = ['shell', 'dumpsys', 'telephony.registry']
  response = issue_generic_request(adb_args, env, timeout_sec)

  output = response.generic.output.decode('utf-8')
  state_match = re.search(r'mCallState=(\d)', output)

  state = 'UNKNOWN'

  if state_match:
    state_code = state_match.group(1)
    if state_code == '0':
      state = 'IDLE'
    elif state_code == '1':
      state = 'RINGING'
    elif state_code == '2':
      state = 'OFFHOOK'

  return state


def call_emulator(
    env: env_interface.AndroidEnvInterface,
    phone_number: str,
    timeout_sec: float = _DEFAULT_TIMEOUT_SECS,
) -> adb_pb2.AdbResponse:
  """Simulate an incoming call in an emulator using ADB.

  Args:
    env: The Android environment interface.
    phone_number: The incoming phone number.
    timeout_sec: A timeout for the ADB operation.

  Returns:
    adb_pb2.AdbResponse: A response object containing the ADB operation result.
  """
  escaped_phone_number = re.sub(r'[^0-9+]', '', phone_number)
  adb_args = ['emu', 'gsm', 'call', f'{escaped_phone_number}']
  response = issue_generic_request(adb_args, env, timeout_sec)
  return response


def end_call_if_active(
    env: 'env_interface.AndroidEnvInterface',
    timeout_sec: float = _DEFAULT_TIMEOUT_SECS,
) -> None:
  """Ends phone call if on an active call."""
  current_state = get_call_state(env, timeout_sec)

  # This check is crucial. Otherwise pressing endcall key results in black
  # screen, potentially because it's simulating turning display off?
  if current_state in ('OFFHOOK', 'RINGING'):
    adb_args = ['shell', 'input', 'keyevent', 'KEYCODE_ENDCALL']
    issue_generic_request(adb_args, env, timeout_sec)


def clear_android_emulator_call_log(
    env: env_interface.AndroidEnvInterface,
    timeout_sec: float = _DEFAULT_TIMEOUT_SECS,
) -> None:
  """Clears the call log of a specific Android emulator using the Android environment interface.

  Args:
    env: The Android environment interface.
    timeout_sec: A timeout for the ADB operation.
  """
  adb_args = ['shell', 'content', 'delete', '--uri', 'content://call_log/calls']
  issue_generic_request(adb_args, env, timeout_sec)


def call_phone_number(
    env: env_interface.AndroidEnvInterface,
    phone_number: str,
    timeout_sec: float = _DEFAULT_TIMEOUT_SECS,
) -> adb_pb2.AdbResponse:
  """Initiate a phone call using ADB.

  Args:
    env: The Android environment interface.
    phone_number: The phone number to dial.
    timeout_sec: A timeout for the ADB operation.

  Returns:
    A response object containing the ADB operation result.
  """
  escaped_phone_number = re.sub(r'[^0-9]', '', phone_number)
  adb_args = [
      'shell',
      'am',
      'start',
      '-a',
      'android.intent.action.CALL',
      '-d',
      f'tel:{escaped_phone_number}',
  ]
  return issue_generic_request(adb_args, env, timeout_sec)


def text_emulator(
    env: env_interface.AndroidEnvInterface,
    phone_number: str,
    message: str,
    timeout_sec: float = _DEFAULT_TIMEOUT_SECS,
) -> adb_pb2.AdbResponse:
  """Simulate an incoming text message in an emulator using ADB.

  Args:
    env: The Android environment interface.
    phone_number: The sender's phone number.
    message: The text message content.
    timeout_sec: A timeout for the ADB operation.

  Returns:
    A response object containing the ADB operation result.
  """
  escaped_phone_number = re.sub(r'[^0-9+]', '', phone_number)
  adb_args = [
      'emu',
      'sms',
      'send',
      f'{escaped_phone_number}',
      f'{message}',
  ]
  response = issue_generic_request(adb_args, env, timeout_sec)
  return response


def set_default_app(
    setting_key: str,
    package_name: str,
    env: env_interface.AndroidEnvInterface,
    timeout_sec: float = _DEFAULT_TIMEOUT_SECS,
) -> adb_pb2.AdbResponse:
  """Set the default application for a given type using ADB.

  Args:
    setting_key: The setting key for the default application type (e.g.,
      'sms_default_application').
    package_name: The package name of the application to be set as default.
    env: The Android environment interface.
    timeout_sec: A timeout for the ADB operation.

  Returns:
    A response object containing the ADB operation result.
  """
  adb_args = ['shell', 'settings', 'put', 'secure', setting_key, package_name]
  response = issue_generic_request(adb_args, env, timeout_sec)
  return response


def disable_headsup_notifications(
    env: env_interface.AndroidEnvInterface,
    timeout_sec: float = _DEFAULT_TIMEOUT_SECS,
) -> adb_pb2.AdbResponse:
  """Disables the heads up notifications.

  Args:
    env: The Android environment interface.
    timeout_sec: A timeout for the ADB operation.

  Returns:
    A response object containing the ADB operation result.
  """
  adb_args = [
      'shell',
      'settings',
      'put',
      'global',
      'heads_up_notifications_enabled',
      '0',
  ]
  response = issue_generic_request(adb_args, env, timeout_sec)
  return response


def enable_headsup_notifications(
    env: env_interface.AndroidEnvInterface,
    timeout_sec: float = _DEFAULT_TIMEOUT_SECS,
) -> adb_pb2.AdbResponse:
  """Enables the heads up notifications.

  Args:
    env: The Android environment interface.
    timeout_sec: A timeout for the ADB operation.

  Returns:
    A response object containing the ADB operation result.
  """
  adb_args = [
      'shell',
      'settings',
      'put',
      'global',
      'heads_up_notifications_enabled',
      '1',
  ]
  response = issue_generic_request(adb_args, env, timeout_sec)
  return response


def put_settings(
    namespace: adb_pb2.AdbRequest.SettingsRequest.Namespace,
    key: str,
    value: str,
    env: env_interface.AndroidEnvInterface,
) -> adb_pb2.AdbResponse:
  """Change a setting in the Android system via ADB.

  Args:
    namespace: The namespace in which the setting resides (SYSTEM, SECURE,
      GLOBAL).
    key: The key of the setting to change.
    value: The new value for the setting.
    env: The Android environment interface.

  Returns:
    The adb response received after issuing the request.
  """
  if not key:
    raise ValueError('Key must be provided.')
  if not value:
    raise ValueError('Value must be provided.')
  settings_request = adb_pb2.AdbRequest.SettingsRequest(
      name_space=namespace,
      put=adb_pb2.AdbRequest.SettingsRequest.Put(key=key, value=value),
  )
  adb_request = adb_pb2.AdbRequest(settings=settings_request)
  return env.execute_adb_call(adb_request)


def delete_contacts(
    env: env_interface.AndroidEnvInterface,
    timeout_sec: float = _DEFAULT_TIMEOUT_SECS,
) -> adb_pb2.AdbResponse:
  """Deletes all contacts.

  Args:
    env: The Android environment interface.
    timeout_sec: A timeout for the ADB operation.

  Returns:
    A response object containing the ADB operation result.
  """
  adb_args = [
      'shell',
      'pm',
      'clear',
      'com.android.providers.contacts',
  ]
  response = issue_generic_request(adb_args, env, timeout_sec)
  return response


def _parse_screen_size_response(response: str) -> tuple[int, int]:
  """Parse the adb response to extract screen size.

  Args:
    response: The adb response string.

  Returns:
    The screen width and height in pixels.
  """
  match = re.search(r'Physical size: (\d+)x(\d+)', response)
  if match:
    width, height = map(int, match.groups())
    return width, height
  else:
    raise ValueError(
        f'Screen size information not found in adb response: "{response}"'
    )


def get_screen_size(env: env_interface.AndroidEnvInterface) -> tuple[int, int]:
  """Get the screen size in pixels of an Android device via ADB.

  Args:
    env: The environment.

  Returns:
    The screen width and height in pixels.
  """
  adb_command = ['shell', 'wm size']
  adb_response = issue_generic_request(adb_command, env)
  return _parse_screen_size_response(
      adb_response.generic.output.decode('utf-8')
  )


def get_logical_screen_size(
    env: env_interface.AndroidEnvInterface,
) -> tuple[int, int]:
  """Returns the logical screen size.

  The logical screen size is the screen size that applications use to render
  their interfaces which might be different than the physical screen size when
  orientation/resolution changes. The coordinates we get from A11y tree are
  based on the logical screen size.

  Args:
    env: The AndroidEnv interface.

  Returns:
    The logical screen size in (width, height).
  """
  response = issue_generic_request(
      'shell dumpsys input | grep logicalFrame', env
  )
  if response.status:
    raw_output = response.generic.output.decode('utf-8')
    pattern = r'logicalFrame=\[0, 0, (\d+), (\d+)\]'
    matches = re.findall(pattern, raw_output)
    for m in matches:
      if int(m[0]) == 0 and int(m[1]) == 0:
        continue
      width, height = (int(m[0]), int(m[1]))
      return (width, height)
  raise ValueError('Failed to get logical screen size.')


def get_physical_frame_boundary(
    env: env_interface.AndroidEnvInterface,
) -> tuple[int, int, int, int]:
  """Returns the physical frame boundary.

  Args:
    env: The AndroidEnv interface.

  Returns:
    First two integers are the coordinates for top left corner, last two are for
    lower right corner. All coordinates are given in portrait orientation.
  """
  response = issue_generic_request(
      'shell dumpsys input | grep physicalFrame', env
  )
  if response.status:
    raw_output = response.generic.output.decode('utf-8')
    pattern = r'physicalFrame=\[(\d+), (\d+), (\d+), (\d+)\]'
    matches = re.findall(pattern, raw_output)
    for m in matches:
      if (
          int(m[0]) == 0
          and int(m[1]) == 0
          and int(m[2]) == 0
          and int(m[3]) == 0
      ):
        continue
      orientation = get_orientation(env)
      if orientation == 0 or orientation == 2:
        return (int(m[0]), int(m[1]), int(m[2]), int(m[3]))
      return (int(m[1]), int(m[0]), int(m[3]), int(m[2]))
  raise ValueError('Failed to get physical frame boundary.')


def get_orientation(
    env: env_interface.AndroidEnvInterface,
) -> int:
  """Returns the current screen orientation.

  The returned value follows the normal convention, 0 for portrait, 1 for
  landscape, 2 for reverse portrait, 3 for reverse landscape.

  Args:
    env: The AndroidEnv interface.

  Returns:
    The screen orientation.
  """
  response = issue_generic_request(
      'shell dumpsys window | grep mCurrentRotation', env
  )
  if response.status:
    raw_output = response.generic.output.decode('utf-8')
    pattern = r'mCurrentRotation=ROTATION_(\d+)'
    matches = re.findall(pattern, raw_output)
    for m in matches:
      return int(m) // 90
  raise ValueError('Failed to get orientation.')


def set_screen_size(
    width: int,
    height: int,
    env: env_interface.AndroidEnvInterface,
) -> adb_pb2.AdbResponse:
  """Sets the (logical) screen size (resolution) of the Android device via ADB.

  Args:
    width: The desired screen width.
    height: The desired screen height.
    env: The AndroidEnv interface.

  Returns:
    The adb response received after issuing the request.
  """
  # Command will fail if width equals height.
  if width <= 0 or height <= 0 or width == height:
    raise ValueError(
        'Screen size not valid (need to be positive, width can not equal'
        ' height).'
    )
  # Construct the ADB command for setting screen size
  adb_command = ['shell', f'wm size {width}x{height}']

  # Issue the command and return the response
  return issue_generic_request(adb_command, env)


def retry(n: int) -> Callable[[Any], Any]:
  """Decorator to retry ADB commands."""

  def decorator(func: Callable[..., T]) -> Callable[..., T]:
    def wrapper(*args: Any, **kwargs: Any) -> T:
      attempts = 0
      while attempts < n:
        try:
          return func(*args, **kwargs)
        except errors.AdbControllerError:
          attempts += 1
          if attempts >= n:
            raise
          print(f'Could not execute {func}. Retrying...')
          time.sleep(2)
        except Exception as exc:
          raise exc

    return wrapper

  return decorator


def set_root_if_needed(
    env: env_interface.AndroidEnvInterface, timeout_sec: Optional[float] = None
) -> adb_pb2.AdbResponse:
  """Checks if ADB is running as root, and if not, attempts to set root.

  Args:
      env: The environment.
      timeout_sec: A timeout to use for this operation.

  Returns:
      bool: True if root is set (or was already set), False otherwise.
  """
  response = issue_generic_request(['shell', 'whoami'], env, timeout_sec)

  if response.generic.output.decode('utf-8').strip() == 'root':
    return response

  return issue_generic_request(['root'], env, timeout_sec)


def uiautomator_dump(env) -> str:
  """Issues a uiautomator dump request and returns the UI hierarchy."""
  dump_args = 'shell uiautomator dump /sdcard/window_dump.xml'
  issue_generic_request(dump_args, env)

  read_args = 'shell cat /sdcard/window_dump.xml'
  response = issue_generic_request(read_args, env)

  return response.generic.output.decode('utf-8')


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import tempfile
from unittest import mock

from absl.testing import absltest
from android_env import env_interface
from android_env.wrappers import a11y_grpc_wrapper
from android_world.env import adb_utils
from android_world.env import android_world_controller
from android_world.env import representation_utils
from android_world.utils import fake_adb_responses
from android_world.utils import file_test_utils
from android_world.utils import file_utils
import dm_env


def create_file_with_contents(contents: str) -> str:
  temp_dir = tempfile.mkdtemp()
  file_path = os.path.join(temp_dir, 'file.txt')
  with open(file_path, 'w') as f:
    f.write(contents)
  return file_path


class AndroidWorldControllerTest(absltest.TestCase):

  def setUp(self):
    super().setUp()
    mock_issue_generic_request = self.enter_context(
        mock.patch.object(adb_utils, 'issue_generic_request')
    )
    mock_issue_generic_request.return_value = (
        fake_adb_responses.create_successful_generic_response(
            'Physical size: 100x200'
        )
    )
    self.mock_a11y_wrapper = self.enter_context(
        mock.patch.object(
            a11y_grpc_wrapper,
            'A11yGrpcWrapper',
            spec=a11y_grpc_wrapper.A11yGrpcWrapper,
        )
    )

    self.table_name = 'events'

    self.mock_copy_db = self.enter_context(
        mock.patch.object(
            file_utils,
            'tmp_directory_from_device',
            side_effect=file_test_utils.mock_tmp_directory_from_device,
        )
    )
    self.mock_copy_data_to_device = self.enter_context(
        mock.patch.object(
            file_utils,
            'copy_data_to_device',
            side_effect=file_test_utils.mock_copy_data_to_device,
        )
    )

    self.mock_remove_files = self.enter_context(
        mock.patch.object(
            file_utils,
            'clear_directory',
            side_effect=file_test_utils.mock_remove_files,
        )
    )

  def test_initialization(self):
    mock_env = mock.Mock(spec=env_interface.AndroidEnvInterface)

    env = android_world_controller.AndroidWorldController(mock_env)

    self.mock_a11y_wrapper.assert_called_with(
        mock_env,
        install_a11y_forwarding=True,
        start_a11y_service=True,
        enable_a11y_tree_info=True,
        latest_a11y_info_only=True,
    )
    env._env.reset.assert_called_once()

  def test_screen_size(self):
    mock_base_env = mock.Mock(spec=env_interface.AndroidEnvInterface)

    env = android_world_controller.AndroidWorldController(mock_base_env)

    self.assertEqual(env.device_screen_size, (100, 200))

  @mock.patch.object(adb_utils, 'get_logical_screen_size')
  @mock.patch.object(android_world_controller, 'get_a11y_tree')
  @mock.patch.object(representation_utils, 'forest_to_ui_elements')
  def test_process_timestep(
      self, mock_forest_to_ui, mock_get_a11y_tree, mock_get_logical_screen_size
  ):
    mock_base_env = mock.Mock(spec=env_interface.AndroidEnvInterface)
    env = android_world_controller.AndroidWorldController(mock_base_env)
    mock_forest = mock.Mock()
    mock_ui_elements = mock.Mock()
    mock_get_logical_screen_size.return_value = (100, 200)
    mock_get_a11y_tree.return_value = mock_forest
    mock_forest_to_ui.return_value = mock_ui_elements
    timestep = dm_env.TimeStep(
        observation={}, reward=None, discount=None, step_type=None
    )

    processed_timestep = env._process_timestep(timestep)

    self.assertEqual(processed_timestep.observation['forest'], mock_forest)
    self.assertEqual(
        processed_timestep.observation['ui_elements'], mock_ui_elements
    )
    mock_forest_to_ui.assert_called_with(
        mock_forest,
        exclude_invisible_elements=True,
    )

  @mock.patch.object(adb_utils, 'check_airplane_mode')
  @mock.patch.object(android_world_controller, 'get_controller')
  @mock.patch.object(android_world_controller, '_has_wrapper')
  @mock.patch.object(
      android_world_controller.AndroidWorldController, 'refresh_env'
  )
  def test_refresh_env(
      self,
      mock_refresh_env,
      mock_has_wrapper,
      mock_get_controller,
      mock_check_airplane_mode,
  ):
    del mock_has_wrapper, mock_get_controller, mock_check_airplane_mode
    mock_base_env = mock.Mock(spec=env_interface.AndroidEnvInterface)
    env = android_world_controller.AndroidWorldController(mock_base_env)
    unused_mock_check_airplane_mode = False
    env._env.accumulate_new_extras.side_effect = [
        {},
        {},
        {},
        {},
        {},
        {'accessibility_tree': ['success']},
    ]

    forest = env.get_a11y_forest()

    self.assertEqual(forest, 'success')
    mock_refresh_env.assert_called_once()

  def test_pull_file(self):
    file_contents = 'test file contents'
    remote_file_path = create_file_with_contents(file_contents)
    mock_base_env = mock.Mock(spec=env_interface.AndroidEnvInterface)
    env = android_world_controller.AndroidWorldController(mock_base_env)

    with env.pull_file(remote_file_path) as local_dir:
      local_path = os.path.split(remote_file_path)[1]
      local_file = open(os.path.join(local_dir, local_path), 'r')
      self.assertEqual(open(remote_file_path, 'r').read(), local_file.read())

    self.mock_copy_db.assert_called_once_with(
        os.path.dirname(remote_file_path), env._env, None
    )

  def test_push_file(self):
    old_file_contents = 'test file contents'
    new_file_contents = 'new file'
    remote_file_path = create_file_with_contents(old_file_contents)
    mock_base_env = mock.Mock(spec=env_interface.AndroidEnvInterface)
    env = android_world_controller.AndroidWorldController(mock_base_env)
    new_file = create_file_with_contents(new_file_contents)

    env.push_file(new_file, remote_file_path, None)

    self.assertEqual(open(remote_file_path, 'r').read(), new_file_contents)


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import copy
import time
from unittest import mock

from absl.testing import absltest
from android_env import env_interface
from android_world.env import actuation
from android_world.env import adb_utils
from android_world.env import android_world_controller
from android_world.env import json_action
from android_world.env import representation_utils


@mock.patch.object(time, 'sleep')
@mock.patch.object(actuation, '_find_target_element')
@mock.patch.object(android_world_controller, 'get_a11y_tree')
@mock.patch.object(representation_utils, 'forest_to_ui_elements')
class TestWaitAndFindClickElement(absltest.TestCase):

  def test_element_found_immediately(
      self,
      unused_mock_representation_utils,
      unused_mock_get_a11y_tree,
      mock_create,
      mock_sleep,
  ):
    """Test when the element is found immediately."""
    mock_create.return_value = (0, 0)
    mock_sleep.side_effect = [0, 1]
    action = actuation._wait_and_find_click_element(
        'target', mock.MagicMock(), case_sensitive=True
    )
    self.assertEqual(
        action, json_action.JSONAction(action_type='click', index=0)
    )

  def test_element_not_found_within_timeout(
      self,
      unused_mock_representation_utils,
      unused_mock_get_a11y_tree,
      mock_create,
      mock_sleep,
  ):
    """Test when the element is not found within the timeout period."""
    mock_create.return_value = (-1, float('inf'))
    mock_sleep.side_effect = (
        0,
        11,
    )  # Simulating 11 seconds have passed
    with self.assertRaises(ValueError):
      actuation._wait_and_find_click_element(
          'target', mock.MagicMock(), case_sensitive=True
      )


class TestCreateReferredClickAction(absltest.TestCase):

  def test_empty_ui_elements(self):
    """Test with no UI elements."""
    self.assertEqual(
        actuation._find_target_element([], 'target', case_sensitive=True),
        (-1, int(1e9)),
    )

  def test_single_exact_match(self):
    """Test with one UI element that is an exact match."""
    ui_elements = [
        representation_utils.UIElement(text='target', content_description='')
    ]
    self.assertEqual(
        actuation._find_target_element(
            ui_elements, 'target', case_sensitive=True
        ),
        (0, 0),
    )

  def test_multiple_elements_with_closest_match(self):
    """Test with multiple elements where one is the closest match."""
    ui_elements = [
        representation_utils.UIElement(text='targ', content_description=''),
        representation_utils.UIElement(text='', content_description='targetX'),
        representation_utils.UIElement(text='target', content_description=''),
    ]
    self.assertEqual(
        actuation._find_target_element(
            ui_elements, 'target', case_sensitive=True
        ),
        (2, 0),
    )

  def test_no_exact_match(self):
    """Test with no exact matching elements."""
    ui_elements = [
        representation_utils.UIElement(text='no match', content_description='')
    ]
    _, distance = actuation._find_target_element(
        ui_elements, 'target', case_sensitive=True
    )
    self.assertGreater(distance, 0)


class ExecuteAdbActionTest(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.mock_env = mock.create_autospec(spec=env_interface.AndroidEnvInterface)
    self.screen_elements = [
        representation_utils.UIElement(
            bbox_pixels=representation_utils.BoundingBox(
                x_min=0, x_max=50, y_min=0, y_max=60
            )
        )
    ]
    self.screen_size = (100, 100)

  def test_click_by_index(self):
    action = json_action.JSONAction(action_type='click', index=0)
    with mock.patch.object(adb_utils, 'tap_screen') as mock_tap_screen:
      actuation.execute_adb_action(
          action, self.screen_elements, self.screen_size, self.mock_env
      )
      mock_tap_screen.assert_called_once_with(25, 30, self.mock_env)

  def test_click_by_coordinates(self):
    action = json_action.JSONAction(action_type='click', x=50, y=50)
    with mock.patch.object(adb_utils, 'tap_screen') as mock_tap_screen:
      actuation.execute_adb_action(
          action, self.screen_elements, self.screen_size, self.mock_env
      )
      mock_tap_screen.assert_called_once_with(50, 50, self.mock_env)

  def test_input_text(self):
    action = json_action.JSONAction(
        action_type='input_text', text='test input', x=50, y=50
    )
    click_action = copy.deepcopy(action)
    click_action.action_type = 'click'
    with (
        mock.patch.object(adb_utils, 'tap_screen') as mock_tap_screen,
        mock.patch.object(adb_utils, 'type_text') as mock_type_text,
        mock.patch.object(
            adb_utils, 'press_enter_button'
        ) as mock_press_enter_button,
    ):
      actuation.execute_adb_action(
          action, self.screen_elements, self.screen_size, self.mock_env
      )
      mock_tap_screen.assert_called_once_with(50, 50, self.mock_env)
      mock_type_text.assert_called_once_with(
          'test input', self.mock_env, timeout_sec=10
      )
      mock_press_enter_button.assert_called_once_with(self.mock_env)

  def test_scroll(self):
    action = json_action.JSONAction(action_type='scroll', direction='down')
    with (
        mock.patch.object(
            adb_utils, 'generate_swipe_command'
        ) as mock_generate_swipe_command,
        mock.patch.object(
            adb_utils, 'issue_generic_request'
        ) as mock_issue_generic_request,
    ):
      mock_generate_swipe_command.return_value = 'command'
      actuation.execute_adb_action(
          action, self.screen_elements, self.screen_size, self.mock_env
      )
      mock_generate_swipe_command.assert_called_once_with(50, 50, 50, 0)
      mock_issue_generic_request.assert_called_once_with(
          'command', self.mock_env
      )

  def test_swipe(self):
    action = json_action.JSONAction(action_type='swipe', direction='up')
    with (
        mock.patch.object(
            adb_utils, 'generate_swipe_command'
        ) as mock_generate_swipe_command,
        mock.patch.object(
            adb_utils, 'issue_generic_request'
        ) as mock_issue_generic_request,
    ):
      mock_generate_swipe_command.return_value = 'command'
      actuation.execute_adb_action(
          action, self.screen_elements, self.screen_size, self.mock_env
      )
      mock_generate_swipe_command.assert_called_once_with(50, 100, 50, 0, 500)
      mock_issue_generic_request.assert_called_once_with(
          'command', self.mock_env
      )

  def test_open_app(self):
    action = json_action.JSONAction(action_type='open_app', app_name='test app')
    with mock.patch.object(adb_utils, 'launch_app') as mock_launch_app:
      actuation.execute_adb_action(
          action, self.screen_elements, self.screen_size, self.mock_env
      )
      mock_launch_app.assert_called_once_with('test app', self.mock_env)

  def test_double_tap(self):
    action = json_action.JSONAction(action_type='double_tap', index=0)
    with mock.patch.object(adb_utils, 'double_tap') as mock_double_tap:
      actuation.execute_adb_action(
          action, self.screen_elements, self.screen_size, self.mock_env
      )
      mock_double_tap.assert_called_once_with(25, 30, self.mock_env)

  def test_long_press(self):
    action = json_action.JSONAction(action_type='long_press', index=0)
    with mock.patch.object(adb_utils, 'long_press') as mock_long_press:
      actuation.execute_adb_action(
          action, self.screen_elements, self.screen_size, self.mock_env
      )
      mock_long_press.assert_called_once_with(25, 30, self.mock_env)

  def test_keyboard_enter(self):
    action = json_action.JSONAction(action_type='keyboard_enter')
    with mock.patch.object(
        adb_utils, 'press_enter_button'
    ) as mock_press_enter_button:
      actuation.execute_adb_action(
          action, self.screen_elements, self.screen_size, self.mock_env
      )
      mock_press_enter_button.assert_called_once_with(self.mock_env)

  def test_navigate_home(self):
    action = json_action.JSONAction(action_type='navigate_home')
    with mock.patch.object(
        adb_utils, 'press_home_button'
    ) as mock_press_home_button:
      actuation.execute_adb_action(
          action, self.screen_elements, self.screen_size, self.mock_env
      )
      mock_press_home_button.assert_called_once_with(self.mock_env)

  def test_navigate_back(self):
    action = json_action.JSONAction(action_type='navigate_back')
    with mock.patch.object(
        adb_utils, 'press_back_button'
    ) as mock_press_back_button:
      actuation.execute_adb_action(
          action, self.screen_elements, self.screen_size, self.mock_env
      )
      mock_press_back_button.assert_called_once_with(self.mock_env)

  def test_wait(self):
    action = json_action.JSONAction(action_type='wait')
    with mock.patch.object(time, 'sleep') as mock_sleep:
      actuation.execute_adb_action(
          action, self.screen_elements, self.screen_size, self.mock_env
      )
      mock_sleep.assert_called_once_with(1.0)

  def test_unknown_action(self):
    action = json_action.JSONAction(action_type=json_action.UNKNOWN)
    actuation.execute_adb_action(
        action, self.screen_elements, self.screen_size, self.mock_env
    )


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import dataclasses
from unittest import mock

from absl.testing import absltest
from absl.testing import parameterized
from android_world.env import representation_utils


@dataclasses.dataclass(frozen=True)
class BoundsInScreen:
  left: int
  right: int
  top: int
  bottom: int


class TestAccessibilityNodeToUIElement(parameterized.TestCase):

  @parameterized.named_parameters(
      dict(
          testcase_name='rectangle_to_rectangle_normalization',
          node_bounds=BoundsInScreen(0, 150, 0, 100),
          screen_size=(500, 500),
          expected_normalized_bbox=representation_utils.BoundingBox(
              0.0, 0.3, 0.0, 0.2
          ),
      ),
      dict(
          testcase_name='square_to_square_normalization',
          node_bounds=BoundsInScreen(100, 200, 100, 200),
          screen_size=(1000, 1000),
          expected_normalized_bbox=representation_utils.BoundingBox(
              0.1, 0.2, 0.1, 0.2
          ),
      ),
      dict(
          testcase_name='square_to_rectangle_normalization',
          node_bounds=BoundsInScreen(0, 100, 0, 100),
          screen_size=(1000, 500),
          expected_normalized_bbox=representation_utils.BoundingBox(
              0.0, 0.1, 0.0, 0.2
          ),
      ),
      dict(
          testcase_name='no_change_square_normalization',
          node_bounds=BoundsInScreen(0, 100, 0, 100),
          screen_size=(100, 100),
          expected_normalized_bbox=representation_utils.BoundingBox(
              0.0, 1.0, 0.0, 1.0
          ),
      ),
      dict(
          testcase_name='no_change_rectangle_normalization',
          node_bounds=BoundsInScreen(0, 200, 0, 100),
          screen_size=(200, 100),
          expected_normalized_bbox=representation_utils.BoundingBox(
              0.0, 1.0, 0.0, 1.0
          ),
      ),
      dict(
          testcase_name='normalization_causing_dimensions_to_grow',
          node_bounds=BoundsInScreen(0, 50, 0, 50),
          screen_size=(200, 200),
          expected_normalized_bbox=representation_utils.BoundingBox(
              0.0, 0.25, 0.0, 0.25
          ),
      ),
      dict(
          testcase_name='zero_size_bbox_normalization',
          node_bounds=BoundsInScreen(0, 0, 0, 0),
          screen_size=(100, 100),
          expected_normalized_bbox=representation_utils.BoundingBox(
              0.0, 0.0, 0.0, 0.0
          ),
      ),
      dict(
          testcase_name='no_normalization',
          node_bounds=BoundsInScreen(10, 20, 11, 13),
          screen_size=None,
          expected_normalized_bbox=None,
      ),
  )
  def test_normalize_bboxes(
      self, node_bounds, screen_size, expected_normalized_bbox
  ):
    node = mock.MagicMock()
    node.bounds_in_screen = node_bounds

    ui_element = representation_utils.accessibility_node_to_ui_element(
        node, screen_size
    )
    self.assertEqual(ui_element.bbox_pixels.x_min, node_bounds.left)
    self.assertEqual(ui_element.bbox_pixels.x_max, node_bounds.right)
    self.assertEqual(ui_element.bbox_pixels.y_min, node_bounds.top)
    self.assertEqual(ui_element.bbox_pixels.y_max, node_bounds.bottom)

    if screen_size is not None:
      ui_element.bbox = representation_utils._normalize_bounding_box(
          ui_element.bbox_pixels, screen_size
      )
    self.assertEqual(ui_element.bbox, expected_normalized_bbox)


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Launches the environment used in the benchmark."""

import resource

from absl import logging
from android_world.env import adb_utils
from android_world.env import android_world_controller
from android_world.env import interface
from android_world.env.setup_device import setup
from android_world.utils import datetime_utils


# AndroidWorld is tested and developed on Pixel 6 with API 33. Other
# configurations may be supported, but are not yet tested.
_ANDROID_WORLD_API_LEVEL = 33


def _get_env(
    console_port: int, adb_path: str, grpc_port: int
) -> interface.AsyncEnv:
  """Creates an AsyncEnv by connecting to an existing Android environment."""
  controller = android_world_controller.get_controller(
      console_port, adb_path, grpc_port
  )
  return interface.AsyncAndroidEnv(controller)


def verify_api_level(env: interface.AsyncEnv) -> None:
  """Verifies that the emulator's API level is expected."""
  level = adb_utils.get_api_level(env.controller)
  if level != _ANDROID_WORLD_API_LEVEL:
    raise ValueError(
        f'Emulator API level must be {_ANDROID_WORLD_API_LEVEL}, but found'
        f' {level}.'
    )


def _increase_file_descriptor_limit(limit: int = 32768):
  """Increases the file descriptor limit to the given limit.

  This helps with different platforms having different limits, which can result
  from too many open files, sockets, or pipes, resulting in "OSError: [Errno 24]
  Too many open files".

  Args:
    limit: The new file descriptor limit. The default value was determined
      experimentally to not raise too many open files error.
  """
  try:
    _, hard = resource.getrlimit(resource.RLIMIT_NOFILE)
    if limit > hard:
      logging.warning(
          (
              "Requested limit %d exceeds the system's hard limit %d. Setting"
              ' to the maximum allowed value.'
          ),
          limit,
          hard,
      )
      limit = hard
    resource.setrlimit(resource.RLIMIT_NOFILE, (limit, hard))
    logging.info('File descriptor limit set to %d.', limit)
  except ValueError as e:
    logging.exception('Failed to set file descriptor limit: %s', e)


def setup_env(
    env: interface.AsyncEnv,
    emulator_setup: bool = False,
    freeze_datetime: bool = True,
) -> None:
  """Performs environment setup and validation."""
  _increase_file_descriptor_limit()
  if emulator_setup:
    logging.info('Setting up apps on the emulator.')
    setup.setup_apps(env)
  if freeze_datetime:
    logging.info('Freezing datetime.')
    datetime_utils.setup_datetime(env.controller)


def load_and_setup_env(
    console_port: int = 5554,
    emulator_setup: bool = False,
    freeze_datetime: bool = True,
    adb_path: str = android_world_controller.DEFAULT_ADB_PATH,
    grpc_port: int = 8554,
) -> interface.AsyncEnv:
  """Create environment with `get_env()` and perform env setup and validation.

  Before running this, an emulator must be launched. For example:

  ```
  AVD_NAME=Pixel_6_API_33  # First create an AVD in Android Studio.
  ~/Android/Sdk/emulator/emulator -avd $AVD_NAME -no-snapshot -grpc 8554
  ```

  Args:
    console_port: The console port of the existing device. This can usually be
      retrieved by looking at the output of `adb devices`. In general, the first
      connected device is port 5554, the second is 5556, and so on.
    emulator_setup: Perform first-time app setup on the environment if True.
    freeze_datetime: Whether to freeze the datetime to a fixed time, October
      2023, to ensure consistent benchmarking.
    adb_path: The location of the adb binary.
    grpc_port: The port for gRPC communication with the emulator.

  Returns:
    An interactable Android environment.
  """
  env = _get_env(console_port, adb_path, grpc_port)
  setup_env(env, emulator_setup, freeze_datetime)
  return env


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Constants for the Pixel 6, API 33, emulator."""

import datetime

# Screen dimensions of Pixel 6.
SCREEN_HEIGHT, SCREEN_WIDTH = 2400, 1080

# Where data on emulator is stored.
EMULATOR_DATA = "/storage/emulated/0/"

# Location where app snapshots are stored.
SNAPSHOT_DATA = "/data/data/android_world/snapshots"

# keep-sorted start
AUDIORECORDER_DATA = "/storage/emulated/0/Android/data/com.dimowner.audiorecorder/files/Music/records"
DOWNLOAD_DATA = "/storage/emulated/0/Download"
GALLERY_DATA = "/sdcard/DCIM"
MARKOR_DATA = "/storage/emulated/0/Documents/Markor"
MUSIC_DATA = "/sdcard/Music"
OSMAND_DATA = "/storage/emulated/0/Android/data/net.osmand/files"
PHOTOS_DATA = "/sdcard/Pictures"
VIDEOS_DATA = "/sdcard/Movies"
# keep-sorted end

# Every task starts October 15, 2023 @ 15:34:00.
TIMEZONE = "UTC"
DT = datetime.datetime(2023, 10, 15, 15, 34, 0, tzinfo=datetime.timezone.utc)

# Format the datetime object into the Android date-time format
ANDROID_DT = DT.strftime("%m%d%H%M%y.%S")


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""API tools library for Android agents."""

import inspect
import json
import time
from typing import Optional, Union

from android_world.env import actuation
from android_world.env import adb_utils
from android_world.env import android_world_controller
from android_world.utils import contacts_utils


# When the compose message is pulled up, the send button has this as text for
# Simple SMS Messenger.
SIMPLE_SMS_SEND_TEXT = "SMS"
# For Google messaging app.
SMS_SEND_TEXT = "Send SMS"


class AndroidToolController:
  """Executes API tools on an Android device."""

  def __init__(
      self,
      env: android_world_controller.AndroidWorldController,
  ):
    """Initializes the controller with an Android environment instance.

    Args:
      env: The AndroidEnv interface to be used.
    """
    self._env = env

  def click_element(self, element_text: str):
    actuation.find_and_click_element(element_text, self._env)

  def open_web_page(self, url: str):
    """Open a web page in the default browser on an Android device.

    This function sends an intent to the Android system to open the specified
    URL.

    Args:
      url: The URL of the web page to open. E.g., http://www.google.com.
    """
    if not url.startswith("http://"):
      url = "http://" + url
    adb_command = ["shell", f"am start -a android.intent.action.VIEW -d {url}"]
    adb_utils.issue_generic_request(adb_command, self._env)

  def send_sms(
      self,
      phone_number: str,
      message: str,
  ):
    """Send an SMS to a specified phone number.

    This function sends an intent to the Android system to open the messaging
    app with the recipient's number and message pre-filled.

    Args:
      phone_number: The phone number to which the SMS should be sent.
      message: The pre-filled message text.
    """
    # Construct the Intent command
    intent_command = (
        "am start -a android.intent.action.SENDTO -d sms:{phone_number} "
        f'--es sms_body "{message}"'
    ).format(phone_number=phone_number)

    adb_command = ["shell", intent_command]
    adb_utils.issue_generic_request(adb_command, self._env)
    time.sleep(5.0)

    package_name = adb_utils.extract_package_name(
        adb_utils.get_current_activity(self._env)[0]
    )
    # Depending on what the default SMS app we need to click different buttons.
    if package_name == "com.google.android.apps.messaging":
      self.click_element(SMS_SEND_TEXT)
    elif package_name == "com.simplemobiletools.smsmessenger":
      self.click_element(SIMPLE_SMS_SEND_TEXT)
    else:
      raise ValueError(f"Messaging app not supported: {package_name}")

  def _gather_tool_details(
      self,
  ) -> dict[str, list[Optional[dict[str, Union[dict[str, str], str]]]]]:
    """Get the details and examples of usage for public APIs related to Android tools.

    Returns:
        A dictionary where the keys are API names and the values are lists of
        dictionaries containing the docstrings and usage examples.
    """
    return {
        "open_web_page": self._tool_info(
            self.open_web_page,
            [
                {"url": "http://www.google.com"},
                {"url": "http://www.example.com"},
            ],
        ),
        "send_sms": self._tool_info(
            self.send_sms,
            [
                {
                    "phone_number": "+123456789",
                    "message": "Hello, how are you?",
                },
                {
                    "phone_number": "+987654321",
                    "message": "Meeting rescheduled to 3 PM.",
                },
            ],
        ),
        "add_contact": self._tool_info(
            contacts_utils.add_contact,
            [
                {"name": "John Doe", "phone_number": "+123456789"},
                {"name": "Joe", "phone_number": "987654321"},
            ],
        ),
    }

  def _tool_info(
      self, method, example_args: list[dict[str, str]]
  ) -> list[Optional[dict[str, Union[dict[str, str], str]]]]:
    """Helper function to construct tool information and examples.

    Args:
        method: The method for which to gather information.
        example_args: A list of argument dictionaries for examples.

    Returns:
        A list containing the method's documentation and examples.
    """
    doc_info = {"doc": inspect.getdoc(method)}
    examples = [
        {"method": method.__name__, "args": args} for args in example_args
    ]
    return [doc_info, *examples]

  def display_tool_usage(self) -> str:
    """Format the tool information and examples into a user-friendly string.

    Returns:
        A string representing the available tools and their usage examples.
    """
    tools_info = self._gather_tool_details()
    formatted_info = ["Available Tools and Usage Examples:\n"]

    for tool_name, tool_details in tools_info.items():
      formatted_info.append(f"\nAPI: {tool_name}\n")
      formatted_info.append(f"Description: {tool_details[0]['doc']}\n")
      formatted_info.append("Examples:\n")
      for example in tool_details[1:]:
        formatted_info.append(f"  - JSON Request: {example}\n")

    return "".join(formatted_info)

  def handle_json_request(self, json_request: str):
    """Handle a JSON formatted request to use a tool.

    Args:
        json_request: A JSON string with the method and arguments.
    """
    request = json.loads(json_request)
    method_name = request["method"]
    args = request.get("args", {})

    if hasattr(self, method_name) and callable(getattr(self, method_name)):
      method = getattr(self, method_name)
      method(**args)
    else:
      raise ValueError(f"Method {method_name} not found.")


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tests for adb_utils."""

from unittest import mock

from absl.testing import absltest
from android_env import env_interface
from android_env.proto import adb_pb2
from android_world.env import adb_utils


class AdbTestSetup(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.mock_env = mock.patch.object(
        env_interface, 'AndroidEnvInterface', autospec=True
    ).start()
    self.mock_issue_generic_request = mock.patch.object(
        adb_utils, 'issue_generic_request', autospec=True
    ).start()

  def tearDown(self):
    super().tearDown()
    mock.patch.stopall()


class PhoneUtilsTest(AdbTestSetup):

  def test_get_call_state_idle(self):
    dumpsys_content = """last known state:
Phone Id=0
  mCallState=0
  mRingingCallState=0
  mForegroundCallState=0"""
    # Setup
    mock_dumpsys_response = adb_pb2.AdbResponse()
    mock_dumpsys_response.generic.output = dumpsys_content.encode('utf-8')
    self.mock_issue_generic_request.return_value = mock_dumpsys_response

    # Act
    result = adb_utils.get_call_state(self.mock_env)

    # Assert
    self.assertEqual(result, 'IDLE')

  def test_get_call_state_ringing(self):
    dumpsys_content = """last known state:
Phone Id=0
  mCallState=2
  mRingingCallState=0
  mForegroundCallState=0"""
    # Setup
    mock_dumpsys_response = adb_pb2.AdbResponse()
    mock_dumpsys_response.generic.output = dumpsys_content.encode('utf-8')
    self.mock_issue_generic_request.return_value = mock_dumpsys_response

    # Act
    result = adb_utils.get_call_state(self.mock_env)

    # Assert
    self.assertEqual(result, 'OFFHOOK')

  def test_call_emulator(self):
    mock_response = adb_pb2.AdbResponse()
    mock_response.generic.output = b'Success'
    self.mock_issue_generic_request.return_value = mock_response

    phone_number = '+123456789'
    result = adb_utils.call_emulator(self.mock_env, phone_number)

    self.assertEqual(result.generic.output.decode(), 'Success')

  @mock.patch.object(adb_utils, 'get_call_state', autospec=True)
  def test_end_call_if_active(self, mock_get_call_state):
    mock_get_call_state.return_value = 'OFFHOOK'
    adb_utils.end_call_if_active(self.mock_env)

    self.mock_issue_generic_request.assert_called()

  def test_clear_android_emulator_call_log(self):
    adb_utils.clear_android_emulator_call_log(self.mock_env)
    self.mock_issue_generic_request.assert_called()

  def test_call_phone_number(self):
    mock_response = adb_pb2.AdbResponse()
    mock_response.generic.output = b'Success'
    self.mock_issue_generic_request.return_value = mock_response

    phone_number = '123456789'
    result = adb_utils.call_phone_number(self.mock_env, phone_number)

    self.assertEqual(result.generic.output.decode(), 'Success')

  def test_text_emulator(self):
    mock_response = adb_pb2.AdbResponse()
    mock_response.generic.output = b'Success'
    self.mock_issue_generic_request.return_value = mock_response

    phone_number = '+123456789'
    message = 'Hello, world!'
    result = adb_utils.text_emulator(self.mock_env, phone_number, message)

    self.assertEqual(result.generic.output.decode(), 'Success')


class AdbSettingsTest(AdbTestSetup):

  def test_set_default_app(self):
    mock_response = adb_pb2.AdbResponse()
    mock_response.generic.output = b'Success'
    self.mock_issue_generic_request.return_value = mock_response

    setting_key = 'sms_default_application'
    package_name = 'com.example.app'
    result = adb_utils.set_default_app(self.mock_env, setting_key, package_name)

    self.assertEqual(result.generic.output.decode(), 'Success')

  def test_successful_put_operation(self):
    self.mock_env.execute_adb_call.return_value = adb_pb2.AdbResponse()

    # Execute the function
    response = adb_utils.put_settings(
        namespace=adb_pb2.AdbRequest.SettingsRequest.Namespace.SYSTEM,
        key='example_key',
        value='example_value',
        env=self.mock_env,
    )

    # Assertions
    self.assertIsInstance(response, adb_pb2.AdbResponse)
    self.mock_env.execute_adb_call.assert_called_once()

  def test_invalid_inputs_put_operation(self):
    self.mock_env.execute_adb_call.return_value = adb_pb2.AdbResponse()

    # Invalid namespace (non-enum value)
    with self.assertRaises(ValueError):
      adb_utils.put_settings(
          namespace='INVALID',  # This should be an enum, not a string
          key='example_key',
          value='example_value',
          env=self.mock_env,
      )

    # Empty key
    with self.assertRaises(ValueError):
      adb_utils.put_settings(
          namespace=adb_pb2.AdbRequest.SettingsRequest.Namespace.SYSTEM,
          key='',
          value='example_value',
          env=self.mock_env,
      )

    # Empty value
    with self.assertRaises(ValueError):
      adb_utils.put_settings(
          namespace=adb_pb2.AdbRequest.SettingsRequest.Namespace.SYSTEM,
          key='example_key',
          value='',
          env=self.mock_env,
      )


class AdbTypingTest(AdbTestSetup):

  def test_can_type_text(self):
    with mock.patch.object(
        env_interface.AndroidEnvInterface, 'execute_adb_call'
    ) as mock_execute_adb_call:
      mock_execute_adb_call.return_value = adb_pb2.AdbResponse(
          status=adb_pb2.AdbResponse.Status.OK
      )
      adb_utils.type_text('Type some\ntext', self.mock_env)
      expected_calls = [
          mock.call(
              adb_pb2.AdbRequest(
                  input_text=adb_pb2.AdbRequest.InputText(text='Type'),
                  timeout_sec=adb_utils._DEFAULT_TIMEOUT_SECS,
              )
          ),
          mock.call(
              adb_pb2.AdbRequest(
                  input_text=adb_pb2.AdbRequest.InputText(text='%s'),
                  timeout_sec=adb_utils._DEFAULT_TIMEOUT_SECS,
              )
          ),
          mock.call(
              adb_pb2.AdbRequest(
                  input_text=adb_pb2.AdbRequest.InputText(text='some'),
                  timeout_sec=adb_utils._DEFAULT_TIMEOUT_SECS,
              )
          ),
          mock.call(
              adb_pb2.AdbRequest(
                  press_button=adb_pb2.AdbRequest.PressButton(
                      button=adb_pb2.AdbRequest.PressButton.ENTER
                  ),
                  timeout_sec=adb_utils._DEFAULT_TIMEOUT_SECS,
              )
          ),
          mock.call(
              adb_pb2.AdbRequest(
                  input_text=adb_pb2.AdbRequest.InputText(text='text'),
                  timeout_sec=adb_utils._DEFAULT_TIMEOUT_SECS,
              )
          ),
      ]
      mock_execute_adb_call.assert_has_calls(expected_calls)


class TestExtractBroadcastData(absltest.TestCase):

  def test_successful_data_extraction(self):
    raw_output = 'Broadcast completed: result=-1, data="Test data"\n'
    expected_result = 'Test data'
    result = adb_utils.extract_broadcast_data(raw_output)
    self.assertEqual(result, expected_result)

  def test_result_zero_returns_none(self):
    raw_output = 'Broadcast completed: result=0\n'
    result = adb_utils.extract_broadcast_data(raw_output)
    self.assertIsNone(result)

  def test_unexpected_output_raises_error(self):
    raw_output = 'Unexpected output format'
    with self.assertRaises(ValueError):
      adb_utils.extract_broadcast_data(raw_output)


class TestScreenUtils(absltest.TestCase):

  def test_parse_screen_size_response_success(self):
    """Test successful parsing of screen size from adb response."""
    response = 'Physical size: 1080x2400'
    expected_size = (1080, 2400)
    self.assertEqual(
        adb_utils._parse_screen_size_response(response), expected_size
    )

  def test_parse_screen_size_response_failure(self):
    """Test parsing failure when adb response is in an unexpected format."""
    response = 'Invalid response format'
    with self.assertRaises(ValueError) as context:
      adb_utils._parse_screen_size_response(response)
    self.assertIn(
        'Screen size information not found in adb response',
        str(context.exception),
    )


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import json
from unittest import mock

from absl.testing import absltest
from absl.testing import parameterized
from android_env import env_interface
from android_world.env import adb_utils
from android_world.env import tools


@mock.patch.object(adb_utils, "issue_generic_request")
class TestAndroidToolControllerOpenWebPage(absltest.TestCase):

  def test_open_web_page_with_http_prefix(self, mock_generic_request):
    """Test opening a web page with http prefix."""
    mock_env = mock.create_autospec(env_interface.AndroidEnvInterface)

    controller = tools.AndroidToolController(mock_env)
    controller.open_web_page("http://www.example.com")

    mock_generic_request.assert_called_once_with(
        [
            "shell",
            "am start -a android.intent.action.VIEW -d http://www.example.com",
        ],
        mock_env,
    )

  def test_open_web_page_without_http_prefix(self, mock_generic_request):
    """Test opening a web page without http prefix."""
    mock_env = mock.create_autospec(env_interface.AndroidEnvInterface)

    controller = tools.AndroidToolController(mock_env)
    controller.open_web_page("www.example.com")

    mock_generic_request.assert_called_once_with(
        [
            "shell",
            "am start -a android.intent.action.VIEW -d http://www.example.com",
        ],
        mock_env,
    )


class TestAndroidToolControllerSendSmsIntent(parameterized.TestCase):

  @parameterized.named_parameters(
      dict(
          testcase_name="GoogleSMS",
          activity_name="com.google.android.apps.messaging/ActivityName",
          ui_element="Send SMS",
      ),
      dict(
          testcase_name="SimpleSMS",
          activity_name="com.simplemobiletools.smsmessenger/ActivityName",
          ui_element="SMS",
      ),
  )
  @mock.patch.object(adb_utils, "issue_generic_request")
  @mock.patch.object(tools.AndroidToolController, "click_element")
  @mock.patch.object(adb_utils, "get_current_activity")
  def test_send_sms(
      self,
      mock_get_current_activity,
      mock_click_element,
      mock_generic_request,
      activity_name,
      ui_element,
  ):
    mock_env = mock.create_autospec(env_interface.AndroidEnvInterface)
    controller = tools.AndroidToolController(mock_env)
    mock_get_current_activity.return_value = (
        activity_name,
        None,
    )
    phone_number = "+123456789"
    message = "Hello, how are you?"

    controller.send_sms(phone_number, message)

    expected_adb_command = [
        "shell",
        (
            "am start -a android.intent.action.SENDTO -d"
            f' sms:{phone_number} --es sms_body "{message}"'
        ),
    ]
    mock_generic_request.assert_called_once_with(expected_adb_command, mock_env)
    mock_click_element.assert_called_once_with(ui_element)


@mock.patch.object(tools.AndroidToolController, "open_web_page", autospec=True)
@mock.patch.object(tools.AndroidToolController, "send_sms", autospec=True)
class TestAndroidToolControllerHandleJsonRequest(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.mock_env = mock.create_autospec(env_interface.AndroidEnvInterface)
    self.controller = tools.AndroidToolController(self.mock_env)

  def test_handle_json_request_valid_method_open_web_page(
      self, unused_mock_send_sms, mock_open_web
  ):
    json_request = json.dumps(
        {"method": "open_web_page", "args": {"url": "http://www.example.com"}}
    )

    self.controller.handle_json_request(json_request)

    mock_open_web.assert_called_once_with(
        self.controller, url="http://www.example.com"
    )

  def test_handle_json_request_valid_method_send_sms_intent(
      self, mock_send_sms, unused_mock_open_web
  ):
    """Test handling a valid JSON request for sending an SMS intent."""
    json_request = json.dumps({
        "method": "send_sms",
        "args": {"phone_number": "+123456789", "message": "Hello"},
    })

    self.controller.handle_json_request(json_request)

    mock_send_sms.assert_called_once_with(
        self.controller, phone_number="+123456789", message="Hello"
    )

  def test_handle_json_request_invalid_method(
      self,
      unused_mock_send_sms,
      unused_mock_open_web,
  ):
    """Test handling a JSON request with an invalid method."""
    json_request = json.dumps({"method": "non_existent_method", "args": {}})
    with self.assertRaises(ValueError):
      self.controller.handle_json_request(json_request)


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tools for processing and representing accessibility trees."""

import dataclasses
from typing import Any, Optional
import xml.etree.ElementTree as ET
from android_env.proto.a11y import android_accessibility_forest_pb2


@dataclasses.dataclass
class BoundingBox:
  """Class for representing a bounding box."""

  x_min: float | int
  x_max: float | int
  y_min: float | int
  y_max: float | int

  @property
  def center(self) -> tuple[float, float]:
    """Gets center of bounding box."""
    return (self.x_min + self.x_max) / 2.0, (self.y_min + self.y_max) / 2.0

  @property
  def width(self) -> float | int:
    """Gets width of bounding box."""
    return self.x_max - self.x_min

  @property
  def height(self) -> float | int:
    """Gets height of bounding box."""
    return self.y_max - self.y_min

  @property
  def area(self) -> float | int:
    return self.width * self.height


@dataclasses.dataclass
class UIElement:
  """Represents a UI element."""

  text: Optional[str] = None
  content_description: Optional[str] = None
  class_name: Optional[str] = None
  bbox: Optional[BoundingBox] = None
  bbox_pixels: Optional[BoundingBox] = None
  hint_text: Optional[str] = None
  is_checked: Optional[bool] = None
  is_checkable: Optional[bool] = None
  is_clickable: Optional[bool] = None
  is_editable: Optional[bool] = None
  is_enabled: Optional[bool] = None
  is_focused: Optional[bool] = None
  is_focusable: Optional[bool] = None
  is_long_clickable: Optional[bool] = None
  is_scrollable: Optional[bool] = None
  is_selected: Optional[bool] = None
  is_visible: Optional[bool] = None
  package_name: Optional[str] = None
  resource_name: Optional[str] = None
  tooltip: Optional[str] = None
  resource_id: Optional[str] = None


def accessibility_node_to_ui_element(
    node: Any,
    screen_size: Optional[tuple[int, int]] = None,
) -> UIElement:
  """Converts a node from an accessibility tree to a UIElement."""

  def text_or_none(text: Optional[str]) -> Optional[str]:
    """Returns None if text is None or 0 length."""
    return text if text else None

  node_bbox = node.bounds_in_screen
  bbox_pixels = BoundingBox(
      node_bbox.left, node_bbox.right, node_bbox.top, node_bbox.bottom
  )

  if screen_size is not None:
    bbox_normalized = _normalize_bounding_box(bbox_pixels, screen_size)
  else:
    bbox_normalized = None

  return UIElement(
      text=text_or_none(node.text),
      content_description=text_or_none(node.content_description),
      class_name=text_or_none(node.class_name),
      bbox=bbox_normalized,
      bbox_pixels=bbox_pixels,
      hint_text=text_or_none(node.hint_text),
      is_checked=node.is_checked,
      is_checkable=node.is_checkable,
      is_clickable=node.is_clickable,
      is_editable=node.is_editable,
      is_enabled=node.is_enabled,
      is_focused=node.is_focused,
      is_focusable=node.is_focusable,
      is_long_clickable=node.is_long_clickable,
      is_scrollable=node.is_scrollable,
      is_selected=node.is_selected,
      is_visible=node.is_visible_to_user,
      package_name=text_or_none(node.package_name),
      resource_name=text_or_none(node.view_id_resource_name),
  )


def _normalize_bounding_box(
    node_bbox: BoundingBox,
    screen_width_height_px: tuple[int, int],
) -> BoundingBox:
  width, height = screen_width_height_px
  return BoundingBox(
      node_bbox.x_min / width,
      node_bbox.x_max / width,
      node_bbox.y_min / height,
      node_bbox.y_max / height,
  )


def forest_to_ui_elements(
    forest: android_accessibility_forest_pb2.AndroidAccessibilityForest | Any,
    exclude_invisible_elements: bool = False,
    screen_size: Optional[tuple[int, int]] = None,
) -> list[UIElement]:
  """Extracts nodes from accessibility forest and converts to UI elements.

  We extract all nodes that are either leaf nodes or have content descriptions
  or is scrollable.

  Args:
    forest: The forest to extract leaf nodes from.
    exclude_invisible_elements: True if invisible elements should not be
      returned.
    screen_size: The size of the device screen in pixels (width, height).

  Returns:
    The extracted UI elements.
  """
  elements = []
  for window in forest.windows:
    for node in window.tree.nodes:
      if not node.child_ids or node.content_description or node.is_scrollable:
        if exclude_invisible_elements and not node.is_visible_to_user:
          continue
        else:
          elements.append(accessibility_node_to_ui_element(node, screen_size))
  return elements


def _parse_ui_hierarchy(xml_string: str) -> dict[str, Any]:
  """Parses the UI hierarchy XML into a dictionary structure."""
  root = ET.fromstring(xml_string)

  def parse_node(node):
    result = node.attrib
    result['children'] = [parse_node(child) for child in node]
    return result

  return parse_node(root)


def xml_dump_to_ui_elements(xml_string: str) -> list[UIElement]:
  """Converts a UI hierarchy XML dump from uiautomator dump to UIElements."""
  parsed_hierarchy = _parse_ui_hierarchy(xml_string)
  ui_elements = []

  def process_node(node, is_root):
    bounds = node.get('bounds')
    if bounds:
      x_min, y_min, x_max, y_max = map(
          int, bounds.strip('[]').replace('][', ',').split(',')
      )
      bbox = BoundingBox(x_min, x_max, y_min, y_max)
    else:
      bbox = None

    ui_element = UIElement(
        text=node.get('text'),
        content_description=node.get('content-desc'),
        class_name=node.get('class'),
        bbox=bbox,
        bbox_pixels=bbox,
        is_checked=node.get('checked') == 'true',
        is_checkable=node.get('checkable') == 'true',
        is_clickable=node.get('clickable') == 'true',
        is_enabled=node.get('enabled') == 'true',
        is_focused=node.get('focused') == 'true',
        is_focusable=node.get('focusable') == 'true',
        is_long_clickable=node.get('long-clickable') == 'true',
        is_scrollable=node.get('scrollable') == 'true',
        is_selected=node.get('selected') == 'true',
        package_name=node.get('package'),
        resource_id=node.get('resource-id'),
        is_visible=True,
    )
    if not is_root:
      ui_elements.append(ui_element)

    for child in node.get('children', []):
      process_node(child, is_root=False)

  process_node(parsed_hierarchy, is_root=True)
  return ui_elements


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Utilies for actuation."""

import copy
import logging
import time
from typing import Any

from android_world.env import adb_utils
from android_world.env import android_world_controller
from android_world.env import json_action
from android_world.env import representation_utils


def execute_adb_action(
    action: json_action.JSONAction,
    screen_elements: list[Any],  # list[UIElement]
    screen_size: tuple[int, int],
    env: android_world_controller.AndroidWorldController,
) -> None:
  """Execute an action based on a JSONAction object.

  Args:
      action: JSONAction object containing the action to be executed.
      screen_elements: List of UI elements on the screen.
      screen_size: The (width, height) of the screen.
      env: The environment to execute the action in.
  """
  if action.action_type in ['click', 'double_tap', 'long_press']:
    idx = action.index
    x = action.x
    y = action.y
    if idx is not None:
      if idx < 0 or idx >= len(screen_elements):
        raise ValueError(
            f'Invalid element index: {idx}, must be between 0 and'
            f' {len(screen_elements)-1}.'
        )
      element = screen_elements[idx]
      if element.bbox_pixels is None:
        raise ValueError('Bbox is not present on element.')
      x, y = element.bbox_pixels.center
      x, y = int(x), int(y)
      if action.action_type == 'click':
        adb_utils.tap_screen(x, y, env)
      elif action.action_type == 'double_tap':
        adb_utils.double_tap(x, y, env)
      else:
        adb_utils.long_press(x, y, env)
    elif x is not None and y is not None:
      if action.action_type == 'click':
        adb_utils.tap_screen(x, y, env)
      elif action.action_type == 'double_tap':
        adb_utils.double_tap(x, y, env)
      else:
        adb_utils.long_press(x, y, env)
    else:
      raise ValueError(f'Invalid click action: {action}')

  elif action.action_type == 'input_text':
    text = action.text
    if text:
      # First focus on enter text UI element.
      click_action = copy.deepcopy(action)
      click_action.action_type = 'click'
      execute_adb_action(click_action, screen_elements, screen_size, env)
      time.sleep(1.0)
      adb_utils.type_text(text, env, timeout_sec=10)
      adb_utils.press_enter_button(env)
    else:
      logging.warning(
          'Input_text action indicated, but no text provided. No '
          'action will be executed.'
      )

  elif action.action_type == 'keyboard_enter':
    adb_utils.press_enter_button(env)

  elif action.action_type == 'navigate_home':
    adb_utils.press_home_button(env)

  elif action.action_type == 'navigate_back':
    adb_utils.press_back_button(env)

  elif action.action_type == 'press_keyboard':
    adb_utils.press_keyboard_generic(action.keycode, env)

  elif action.action_type == 'scroll':
    screen_width, screen_height = screen_size
    if action.index:
      x_min, y_min, x_max, y_max = (
          max(screen_elements[action.index].bbox_pixels.x_min, 0),
          max(screen_elements[action.index].bbox_pixels.y_min, 0),
          min(screen_elements[action.index].bbox_pixels.x_max, screen_width),
          min(screen_elements[action.index].bbox_pixels.y_max, screen_height),
      )
    else:
      x_min, y_min, x_max, y_max = (0, 0, screen_width, screen_height)

    start_x, start_y = (x_min + x_max) // 2, (y_min + y_max) // 2
    direction = action.direction
    if direction == 'down':
      end_x, end_y = (x_min + x_max) // 2, y_min
    elif direction == 'up':
      end_x, end_y = (x_min + x_max) // 2, y_max
    elif direction == 'right':
      end_x, end_y = x_min, (y_min + y_max) // 2
    elif direction == 'left':
      end_x, end_y = x_max, (y_min + y_max) // 2
    else:
      print('Invalid direction')
      return
    command = adb_utils.generate_swipe_command(
        int(start_x), int(start_y), int(end_x), int(end_y)
    )
    adb_utils.issue_generic_request(command, env)

  elif action.action_type == 'swipe':  # Inverse of scroll.
    screen_width, screen_height = screen_size
    mid_x, mid_y = 0.5 * screen_width, 0.5 * screen_height
    direction = action.direction
    if direction == 'down':
      start_x, start_y = mid_x, 0
      end_x, end_y = mid_x, screen_height
    elif direction == 'up':
      start_x, start_y = mid_x, screen_height
      end_x, end_y = mid_x, 0
    elif direction == 'left':
      start_x, start_y = 0, mid_y
      end_x, end_y = screen_width, mid_y
    elif direction == 'right':
      start_x, start_y = screen_width, mid_y
      end_x, end_y = 0, mid_y
    else:
      print('Invalid direction')
      return
    command = adb_utils.generate_swipe_command(
        int(start_x), int(start_y), int(end_x), int(end_y), 500
    )
    adb_utils.issue_generic_request(command, env)

  elif action.action_type == 'open_app':
    app_name = action.app_name
    if app_name:
      adb_utils.launch_app(app_name, env)
    else:
      raise ValueError('No app name provided')

  elif action.action_type == 'wait':
    time.sleep(1.0)

  elif action.action_type == 'launch_adb_activity':
    if action.activity_nickname == 'app_drawer':
      adb_utils.press_home_button(env)
      time.sleep(1.0)
      start_x, start_y = int(screen_size[0] / 2), int(screen_size[1] * 0.9)
      end_x = start_x
      end_y = int(0.3 * screen_size[1])
      request = adb_utils.generate_swipe_command(start_x, start_y, end_x, end_y)
      adb_utils.issue_generic_request(request, env)
    elif action.activity_nickname == 'quick_settings':
      start_x, start_y = int(screen_size[0] / 2), 30
      end_x = start_x
      end_y = int(0.3 * screen_size[1])
      request = adb_utils.generate_swipe_command(
          start_x, start_y, end_x, end_y, duration_ms=10
      )
      adb_utils.issue_generic_request(request, env)
  elif action.action_type == 'change_orientation':
    adb_utils.change_orientation(action.orientation, env)
  elif action.action_type == json_action.UNKNOWN:
    print('Unknown action type; no action will be executed. Try again...')
  else:
    print('Invalid action type')


def find_and_click_element(
    element_text: str,
    env: android_world_controller.AndroidWorldController,
    case_sensitive: bool = False,
):
  """Identifies element with element_text and clicks it.

  Args:
    element_text: Text of the UI element to click on.
    env: The Android env instance.
    case_sensitive: Whether to use case sensitivity when determining which UI
      element to tap.
  """
  # Find text.
  action = _wait_and_find_click_element(element_text, env, case_sensitive)

  ui_elements = env.get_ui_elements()
  screen_size = (0, 0)  # Unused, but required.
  execute_adb_action(action, ui_elements, screen_size, env)


def _wait_and_find_click_element(
    target_text: str,
    env: android_world_controller.AndroidWorldController,
    case_sensitive: bool,
) -> json_action.JSONAction:
  """Wait for the screen to update until "element_text" appears."""
  ui_elements = env.get_ui_elements()
  element, distance = _find_target_element(
      ui_elements, target_text, case_sensitive
  )
  start = time.time()
  current = time.time()
  while current - start < 10:
    if distance == 0:
      return json_action.JSONAction(action_type='click', index=element)
    ui_elements = env.get_ui_elements()
    element, distance = _find_target_element(
        ui_elements, target_text, case_sensitive
    )
    current = time.time()
  raise ValueError(f'Target text "{target_text}" not found.')


def _find_target_element(
    ui_elements: list[representation_utils.UIElement],
    target_text: str,
    case_sensitive: bool,
) -> tuple[int, int]:
  """Determine the UI element with the closest match to target_text, by looking at the `text` and `content_description` of each UI element."""
  best_match_index = -1
  lowest_distance = int(1e9)

  for i, element in enumerate(ui_elements):
    for attr in [element.text, element.content_description]:
      if attr is not None:
        if case_sensitive:
          distance = _levenshtein_distance(target_text, attr)
        else:
          distance = _levenshtein_distance(target_text.lower(), attr.lower())
        if distance < lowest_distance:
          lowest_distance = distance
          best_match_index = i

  return (best_match_index, lowest_distance)


def _levenshtein_distance(s1: str, s2: str) -> int:
  """Compute the Levenshtein distance between two strings."""
  if len(s1) < len(s2):
    s1, s2 = s2, s1

  if not s2:
    return len(s1)

  previous_row = range(len(s2) + 1)
  for i, c1 in enumerate(s1):
    current_row = [i + 1]
    for j, c2 in enumerate(s2):
      insertions = previous_row[j + 1] + 1
      deletions = current_row[j] + 1
      substitutions = previous_row[j] + (c1 != c2)
      current_row.append(min(insertions, deletions, substitutions))
    previous_row = current_row

  return previous_row[-1]


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Environment interface for real-time interaction Android."""

import abc
import dataclasses
import time
from typing import Any, Optional, Self

from android_env.components import action_type
from android_world.env import actuation
from android_world.env import adb_utils
from android_world.env import android_world_controller
from android_world.env import json_action
from android_world.env import representation_utils
import dm_env
import numpy as np


def _get_no_op_action() -> dict[str, Any]:
  """Creates a no-op action; used to retrieve screen & UI tree."""
  return {
      'action_type': np.array(action_type.ActionType.LIFT, dtype=np.int32),
      'touch_position': np.array((0.0, 0.0)),
  }


@dataclasses.dataclass(frozen=True)
class State:
  """State of the Android environment.

  Attributes:
    pixels: RGB array of current screen.
    forest: Raw UI forest; see android_world_controller.py for more info.
    ui_elements: Processed children and stateful UI elements extracted from
      forest.
  """

  pixels: np.ndarray
  forest: Any
  ui_elements: list[representation_utils.UIElement]

  @classmethod
  def create_and_infer_elements(
      cls,
      pixels: np.ndarray,
      forest: Any,
      screen_size: Optional[tuple[int, int]] = None,
  ) -> Self:
    """Creates a new instance, inferring UI elements from the forest."""

    elements = representation_utils.forest_to_ui_elements(
        forest, screen_size=screen_size
    )
    return cls(pixels, forest, elements)


class AsyncEnv(abc.ABC):
  """Interface for interacting with a real-time Android device.

  Computing environments, such as Android, run in real-time, independently of
  the agent interacting with it. All observations and actions are asynchronous
  and OS does not pause when providing observations or when accepting actions.
  Changes from action execution may take some time to appear.
  """

  @property
  @abc.abstractmethod
  def controller(self) -> android_world_controller.AndroidWorldController:
    """Returns the controller for the environment."""

  @abc.abstractmethod
  def reset(self, go_home: bool = False) -> State:
    """Go home on reset.

    Args:
      go_home: Whether to go home during the reset.
    """

  @abc.abstractmethod
  def get_state(self, wait_to_stabilize: bool = False) -> State:
    """Gets the state of the environment; i.e., screenshot & UI tree.

    In practice this will usually be called after executing an action. Logic
    should be implemented, perhaps a simple time.sleep, to ensure the
    environment updates after the action.

    Args:
      wait_to_stabilize: Whether to wait for the screen to stabilize before
        returning state.

    Returns:
      Observation containing RGB array of screen, the accessibility forest,
        and UI elements derived from the forest. See android_world_controller.py
        for
        more detail.
    """

  def display_message(self, message: str, header: str = '') -> None:
    """Displays a message on the screen."""

  @abc.abstractmethod
  def ask_question(
      self, question: str, timeout_seconds: float = -1.0
  ) -> str | None:
    """Asks a question to a hypothetical user in the environment.

    Common uses are to ask a question to clarify the user-provided goal, to ask
    for help when the agent is stuck, or when there is ambiguity in the current
    screen.

    Args:
      question: The question to ask the user.
      timeout_seconds: The timeout in seconds to wait for a response. If
        negative, then wait indefinitely.

    Returns:
      The response from the user or None if the user did not answer within the
      timeout.
    """

  @abc.abstractmethod
  def execute_action(self, action: json_action.JSONAction) -> None:
    """Executes action on the environment."""

  @property
  @abc.abstractmethod
  def foreground_activity_name(self) -> str:
    """Returns the activity name of the app currently opened in foreground."""

  @property
  @abc.abstractmethod
  def device_screen_size(self) -> tuple[int, int]:
    """Returns the screen size of the environment in pixels: (width, height)."""

  @property
  @abc.abstractmethod
  def logical_screen_size(self) -> tuple[int, int]:
    """Retrieves the logical screen size of the Android device.

    While the physical size is a fixed attribute of the display, the logical
    size is flexible and varies based on system settings such as the orientation
    or if the resolution is changed.

    Returns: The (width, height) in pixels, denoting the logical dimensions of
    the screen. Width and height values are aligned with the device's current
    orientation, meaning width is always logical horizontal direction (like in
    the landscape orientation width will be the physical vertical direction).
    """

  @abc.abstractmethod
  def close(self) -> None:
    """Closes the environment."""

  @property
  @abc.abstractmethod
  def interaction_cache(self) -> str:
    """Returns the interaction cache of the environment."""

  @abc.abstractmethod
  def hide_automation_ui(self) -> None:
    """Hides any UI, such as screen coordinates,."""

  @property
  @abc.abstractmethod
  def orientation(self) -> int:
    """Returns the orientation of the environment.

    Returns: 0 for portrait, 1 for landscape, 2 for reverse portrait,
    3 for reverse landscape.
    """

  @property
  @abc.abstractmethod
  def physical_frame_boundary(self) -> tuple[int, int, int, int]:
    """Returns the physical frame boundary of the environment.

    Returns: First two integers are the coordinates for top left corner, last
    two are for lower right corner. All coordinates are given in portrait
    orientation.
    """


def _process_timestep(timestep: dm_env.TimeStep) -> State:
  """Parses timestep observation and returns State."""
  return State(
      pixels=timestep.observation['pixels'],
      forest=timestep.observation[
          android_world_controller.OBSERVATION_KEY_FOREST
      ],
      ui_elements=timestep.observation[
          android_world_controller.OBSERVATION_KEY_UI_ELEMENTS
      ],
  )


class AsyncAndroidEnv(AsyncEnv):
  """Async environment interface using AndroidEnv to communicate with device."""

  interaction_cache = ''

  def __init__(
      self, controller: android_world_controller.AndroidWorldController
  ):
    self._controller = controller
    self._prior_state = None
    # Variable used to temporarily save interactions between agent and user.
    # Like when agent use answer action to answer user questions, we
    # use this to save the agent response. Or later on when agent has the
    # ability to ask user question, user's answer will be saved here as well.
    self.interaction_cache = ''

  @property
  def controller(self) -> android_world_controller.AndroidWorldController:
    return self._controller

  def reset(self, go_home: bool = False) -> State:
    if go_home:
      adb_utils.press_home_button(self.controller)
    self.interaction_cache = ''

    return _process_timestep(self.controller.reset())

  def _get_state(self):
    return _process_timestep(self.controller.step(_get_no_op_action()))

  def _get_stable_state(
      self,
      stability_threshold: int = 3,
      sleep_duration: float = 0.5,
      timeout: float = 6.0,
  ) -> State:
    """Checks if the UI elements remain stable over a number of checks and gets state.

    Args:
        stability_threshold: Number of consecutive checks where UI elements must
          remain the same to consider UI stable.
        sleep_duration: Time in seconds to wait between checks.
        timeout: Maximum time in seconds to wait for UI to become stable before
          giving up.

    Returns:
        True if UI is considered stable, False if it never stabilizes within the
        timeout.
    """
    if not self._prior_state:
      self._prior_state = self._get_state()

    stable_checks = 0
    elapsed_time = 0.0
    current_state = self._get_state()

    while stable_checks < stability_threshold and elapsed_time < timeout:
      if self._prior_state.ui_elements == current_state.ui_elements:
        stable_checks += 1
        if stable_checks == stability_threshold:
          break  # Exit early if stability is achieved.
      else:
        stable_checks = 0  # Reset if any change is detected
        self._prior_state = current_state

      time.sleep(sleep_duration)
      elapsed_time += sleep_duration
      current_state = self._get_state()

    return current_state

  def get_state(self, wait_to_stabilize: bool = False) -> State:
    if wait_to_stabilize:
      return self._get_stable_state()
    return self._get_state()

  def execute_action(self, action: json_action.JSONAction) -> None:
    if action.action_type == json_action.ANSWER:
      self.interaction_cache = action.text
      if action.text:
        self.display_message(action.text, header='Agent answered:')
      return
    state = self.get_state(wait_to_stabilize=False)
    actuation.execute_adb_action(
        action,
        state.ui_elements,
        self.logical_screen_size,
        self.controller,
    )

  def hide_automation_ui(self) -> None:
    """Hides the coordinates on screen."""
    adb_utils.issue_generic_request(
        'shell settings put system pointer_location 0', self.controller
    )

  def display_message(self, message: str, header: str = '') -> None:
    adb_utils.send_android_intent(
        command='broadcast',
        action='com.example.ACTION_UPDATE_OVERLAY',
        env=self.controller,
        extras={'task_type_string': header, 'goal_string': message},
    )

  def ask_question(
      self, question: str, timeout_seconds: float = -1.0
  ) -> str | None:
    raise NotImplementedError('ask_question is not implemented.')

  @property
  def foreground_activity_name(self) -> str:
    activity = adb_utils.get_current_activity(self.controller)[0]
    if activity:
      return activity
    else:
      return ''

  @property
  def device_screen_size(self) -> tuple[int, int]:
    return self.controller.device_screen_size

  @property
  def logical_screen_size(self) -> tuple[int, int]:
    return adb_utils.get_logical_screen_size(self.controller)

  def close(self) -> None:
    return self.controller.close()

  @property
  def orientation(self) -> int:
    return adb_utils.get_orientation(self.controller)

  @property
  def physical_frame_boundary(self) -> tuple[int, int, int, int]:
    return adb_utils.get_physical_frame_boundary(self.controller)


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from unittest import mock

from absl.testing import absltest
from android_env import env_interface
from android_env import loader
from android_env.components import config_classes
from android_world.env import android_world_controller
from android_world.env import env_launcher
from android_world.env import interface


class EnvLauncherTest(absltest.TestCase):

  @mock.patch.object(interface, "AsyncAndroidEnv", autospec=True)
  @mock.patch.object(
      android_world_controller, "AndroidWorldController", autospec=True
  )
  @mock.patch.object(loader, "load", autospec=True)
  def test_get_env(
      self,
      mock_loader,
      mock_controller,
      mock_async_android_env,
  ):
    mock_android_env = mock.create_autospec(env_interface.AndroidEnvInterface)
    mock_loader.return_value = mock_android_env

    env_launcher._get_env(5556, "some_adb_path", 8554)

    mock_loader.assert_called_with(
        config=config_classes.AndroidEnvConfig(
            task=config_classes.FilesystemTaskConfig(
                path=android_world_controller._TASK_PATH
            ),
            simulator=config_classes.EmulatorConfig(
                emulator_launcher=config_classes.EmulatorLauncherConfig(
                    emulator_console_port=5556, adb_port=5557, grpc_port=8554
                ),
                adb_controller=config_classes.AdbControllerConfig(
                    adb_path="some_adb_path"
                ),
            ),
        )
    )
    mock_controller.assert_called_with(mock_android_env)
    mock_async_android_env.assert_called_with(mock_controller.return_value)


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Controller for Android that adds UI tree information to the observation."""

import contextlib
import enum
import os
import time
from typing import Any
from typing import cast
from typing import Optional
from absl import logging
from android_env import env_interface
from android_env import loader
from android_env.components import config_classes
from android_env.proto.a11y import android_accessibility_forest_pb2
from android_env.wrappers import a11y_grpc_wrapper
from android_env.wrappers import base_wrapper
from android_world.env import adb_utils
from android_world.env import representation_utils
from android_world.utils import file_utils
import dm_env


def _has_wrapper(
    env: env_interface.AndroidEnvInterface,
    target_wrapper: Any,
) -> bool:
  """Checks recursively if an environment object has a certain wrapper.

  Args:
    env: The environment object potentially wrapped.
    target_wrapper: The wrapper type to search for.

  Returns:
    True if the target_wrapper is found, otherwise False.
  """
  if isinstance(env, target_wrapper):
    return True
  elif hasattr(env, '_env'):
    return _has_wrapper(env._env, target_wrapper)  # pylint: disable=protected-access
  else:
    return False


def get_a11y_tree(
    env: env_interface.AndroidEnvInterface,
    max_retries: int = 5,
    sleep_duration: float = 1.0,
) -> android_accessibility_forest_pb2.AndroidAccessibilityForest:
  """Gets a11y tree.

  Args:
    env: AndroidEnv.
    max_retries: Maximum number of retries to get a11y tree.
    sleep_duration: Time to sleep between each retry in seconds.

  Returns:
    A11y tree.

  Raises:
    RuntimeError: If the a11y tree was not able to be retrieved.
  """
  if not _has_wrapper(env, a11y_grpc_wrapper.A11yGrpcWrapper):
    raise ValueError(
        'Must use a11y_grpc_wrapper.A11yGrpcWrapper to get the a11y tree.'
    )
  env = cast(a11y_grpc_wrapper.A11yGrpcWrapper, env)
  if adb_utils.retry(3)(adb_utils.check_airplane_mode)(env):
    logging.warning(
        'Airplane mode is on -- cannot retrieve a11y tree via gRPC. Turning'
        ' it off...'
    )
    logging.info('Enabling networking...')
    env.attempt_enable_networking()
    time.sleep(1.0)

  forest: Optional[
      android_accessibility_forest_pb2.AndroidAccessibilityForest
  ] = None
  for _ in range(max_retries):
    try:
      forest = env.accumulate_new_extras()['accessibility_tree'][-1]  # pytype:disable=attribute-error
      return forest
    except KeyError:
      logging.warning('Could not get a11y tree, retrying.')
    time.sleep(sleep_duration)

  if forest is None:
    raise RuntimeError('Could not get a11y tree.')
  return forest


_TASK_PATH = '/tmp/default.textproto'
DEFAULT_ADB_PATH = '~/Android/Sdk/platform-tools/adb'


# UI tree-specific keys that are added to observations:

# The forest is essentially a comprehensive snapshot of all user interface
# elements currently displayed on an Android device's screen. Each 'tree' in
# this 'forest' represents the accessibility details of a different window or
# screen section, providing structured information. The tree's origin is from
# the AccessibilityService. Please see the following for more detail:
# https://developer.android.com/reference/android/accessibilityservice/AccessibilityService

OBSERVATION_KEY_FOREST = 'forest'
# UI elements are specific nodes extracted from forest. See
# representation_utils.forest_to_ui_elements for details.
OBSERVATION_KEY_UI_ELEMENTS = 'ui_elements'


class A11yMethod(enum.Enum):
  """Method to get a11y tree."""

  # Custom gRPC wrapper that uses a11y forwarder app.
  A11Y_FORWARDER_APP = 'a11y_forwarder_app'

  # From `uiautomator dump``.
  UIAUTOMATOR = 'uiautomator'


class AndroidWorldController(base_wrapper.BaseWrapper):
  """Controller for an Android instance that adds accessibility tree data.

  The Accessibility Tree in Android is a tree-based structure, originally for
  for assisting accessibility services. It provides information about UI
  elements (like text, buttons, and images) in a hierarchical format. The tree
  includes details such as the properties and actions available for each
  element.
  """

  def __init__(
      self,
      env: env_interface.AndroidEnvInterface,
      a11y_method: A11yMethod = A11yMethod.A11Y_FORWARDER_APP,
  ):
    if a11y_method == A11yMethod.A11Y_FORWARDER_APP:
      self._env = a11y_grpc_wrapper.A11yGrpcWrapper(
          env,
          install_a11y_forwarding=True,
          start_a11y_service=True,
          enable_a11y_tree_info=True,
          latest_a11y_info_only=True,
      )
      self._env.reset()  # Initializes required server services in a11y wrapper.
    else:
      self._env = env
    self._a11y_method = a11y_method

  @property
  def device_screen_size(self) -> tuple[int, int]:
    """Returns the physical screen size of the device: (width, height)."""
    return adb_utils.get_screen_size(self._env)

  @property
  def logical_screen_size(self) -> tuple[int, int]:
    """Returns the logical screen size of the device.

    This will be different with the physical size if orientation or resolution
    is changed.
    """
    return adb_utils.get_logical_screen_size(self._env)

  @property
  def env(self) -> env_interface.AndroidEnvInterface:
    return self._env

  def refresh_env(self):
    # pylint: disable=protected-access
    # pytype: disable=attribute-error
    # Reconnect to emulator and reload a11y wrapper in case we lose connection.
    self._env = get_controller(
        console_port=self.env._coordinator._simulator._config.emulator_launcher.emulator_console_port,
        adb_path=self.env._coordinator._simulator._config.adb_controller.adb_path,
        grpc_port=self.env._coordinator._simulator._config.emulator_launcher.grpc_port,
    ).env
    # pylint: enable=protected-access
    # pytype: enable=attribute-error

  def get_a11y_forest(
      self,
  ) -> android_accessibility_forest_pb2.AndroidAccessibilityForest:
    """Returns the most recent a11y forest from the device."""
    try:
      return get_a11y_tree(self._env)
    except RuntimeError:
      print(
          'Could not get a11y tree. Reconnecting to Android, reinitializing'
          ' AndroidEnv, and restarting a11y forwarding.'
      )
      self.refresh_env()
      return get_a11y_tree(self._env)

  def get_ui_elements(self) -> list[representation_utils.UIElement]:
    """Returns the most recent UI elements from the device."""
    if self._a11y_method == A11yMethod.A11Y_FORWARDER_APP:
      return representation_utils.forest_to_ui_elements(
          self.get_a11y_forest(),
          exclude_invisible_elements=True,
      )
    else:
      return representation_utils.xml_dump_to_ui_elements(
          adb_utils.uiautomator_dump(self._env)
      )

  def _process_timestep(self, timestep: dm_env.TimeStep) -> dm_env.TimeStep:
    """Adds a11y tree info to the observation."""
    if self._a11y_method == A11yMethod.A11Y_FORWARDER_APP:
      forest = self.get_a11y_forest()
      ui_elements = representation_utils.forest_to_ui_elements(
          forest,
          exclude_invisible_elements=True,
      )
    else:
      forest = None
      ui_elements = self.get_ui_elements()
    timestep.observation[OBSERVATION_KEY_FOREST] = forest
    timestep.observation[OBSERVATION_KEY_UI_ELEMENTS] = ui_elements
    return timestep

  def pull_file(
      self, remote_db_file_path: str, timeout_sec: Optional[float] = None
  ) -> contextlib._GeneratorContextManager[str]:
    """Pulls a file from the device to a temporary directory.

    The directory will be deleted when the context manager exits.
    Args:
      remote_db_file_path: The path to the file on the device.
      timeout_sec: Timeout in seconds for the adb calls.

    Returns:
      The path to the temporary directory containing the file.
    """
    remote_db_directory = os.path.dirname(remote_db_file_path)
    return file_utils.tmp_directory_from_device(
        remote_db_directory, self.env, timeout_sec
    )

  def push_file(
      self,
      local_db_file_path: str,
      remote_db_file_path: str,
      timeout_sec: Optional[float] = None,
  ) -> None:
    """Pushes a local file to the device."""

    remote_db_directory = os.path.dirname(remote_db_file_path)

    # First delete old .db, .db-wal, and .db-shm files.
    file_utils.clear_directory(remote_db_directory, self)
    file_utils.copy_data_to_device(
        local_db_file_path,
        remote_db_file_path,
        self.env,
        timeout_sec,
    )


def _write_default_task_proto() -> str:
  with open(_TASK_PATH, 'w') as f:
    f.write("""\
id: "default"

name: "Default task for device control."
description: "Empty task"

max_episode_sec: 7200  # Prevent infinite episodes.
  """)
  return _TASK_PATH


def get_controller(
    console_port: int = 5554,
    adb_path: str = DEFAULT_ADB_PATH,
    grpc_port: int = 8554,
) -> AndroidWorldController:
  """Creates a controller by connecting to an existing Android environment."""

  config = config_classes.AndroidEnvConfig(
      task=config_classes.FilesystemTaskConfig(
          path=_write_default_task_proto()
      ),
      simulator=config_classes.EmulatorConfig(
          emulator_launcher=config_classes.EmulatorLauncherConfig(
              emulator_console_port=console_port,
              adb_port=console_port + 1,
              grpc_port=grpc_port,
          ),
          adb_controller=config_classes.AdbControllerConfig(adb_path=adb_path),
      ),
  )
  android_env_instance = loader.load(config)
  logging.info('Setting up AndroidWorldController.')
  return AndroidWorldController(android_env_instance)


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Represents an action for Android interaction, parsed from a JSON format."""

import dataclasses
import json
from typing import Optional


_JSON_SEPARATORS = (',', ':')

ANSWER = 'answer'
CLICK = 'click'
DOUBLE_TAP = 'double_tap'
INPUT_TEXT = 'input_text'
KEYBOARD_ENTER = 'keyboard_enter'
LONG_PRESS = 'long_press'
NAVIGATE_BACK = 'navigate_back'
NAVIGATE_HOME = 'navigate_home'
OPEN_APP = 'open_app'
SCROLL = 'scroll'
STATUS = 'status'
SWIPE = 'swipe'
UNKNOWN = 'unknown'
WAIT = 'wait'

_ACTION_TYPES = (
    CLICK,
    DOUBLE_TAP,
    SCROLL,
    SWIPE,
    INPUT_TEXT,
    NAVIGATE_HOME,
    NAVIGATE_BACK,
    KEYBOARD_ENTER,
    OPEN_APP,
    STATUS,
    WAIT,
    LONG_PRESS,
    ANSWER,
    UNKNOWN,
)

_SCROLL_DIRECTIONS = ('left', 'right', 'down', 'up')

# Keys of JSON action.
ACTION_TYPE = 'action_type'
INDEX = 'index'
X = 'x'
Y = 'y'
TEXT = 'text'
DIRECTION = 'direction'
APP_NAME = 'app_name'
GOAL_STATUS = 'goal_status'


@dataclasses.dataclass()
class JSONAction:
  """Represents a parsed JSON action.

  # Example
  result_json = {'action_type': 'click', 'x': %d, 'y': %d}
  action = JSONAction(**result_json)

  Attributes:
    action_type: The action type.
    index: The index to click, if action is a click. Either an index or a <x, y>
      should be provided. See x, y attributes below.
    x: The x position to click, if the action is a click.
    y: The y position to click, if the action is a click.
    text: The text to type, if action is type.
    direction: The direction to scroll, if action is scroll.
    goal_status: If the status is a 'status' type, indicates the status of the
      goal.
    app_name: The app name to launch, if the action type is 'open_app'.
    keycode: Keycode actions are necessary for an agent to interact with complex
      UI elements (like large textareas) that can't be accessed or controlled by
      simply taping, ensuring precise control over navigation and selection in
      the interface.
  """

  action_type: Optional[str] = None
  index: Optional[str | int] = None
  x: Optional[int] = None
  y: Optional[int] = None
  text: Optional[str] = None
  direction: Optional[str] = None
  goal_status: Optional[str] = None
  app_name: Optional[str] = None
  keycode: Optional[str] = None

  def __post_init__(self):
    if self.action_type not in _ACTION_TYPES:
      raise ValueError(f'Invalid action type: {self.action_type}')
    if self.index is not None:
      self.index = int(self.index)
      if self.x is not None or self.y is not None:
        raise ValueError('Either an index or a <x, y> should be provided.')
    if self.direction and self.direction not in _SCROLL_DIRECTIONS:
      raise ValueError(f'Invalid scroll direction: {self.direction}')
    if self.text is not None and not isinstance(self.text, str):
      self.text = str(self.text)
    if self.keycode is not None and not self.keycode.startswith('KEYCODE_'):
      raise ValueError(f'Invalid keycode: {self.keycode}')

  def __repr__(self) -> str:
    properties = []
    for key, value in self.__dict__.items():
      if value is not None:
        if isinstance(value, float):
          value = f'{value:.3f}'
        properties.append(f'{key}={value!r}')
    return f"JSONAction({', '.join(properties)})"

  def __eq__(self, other):
    if isinstance(other, JSONAction):
      return _compare_actions(self, other)
    return False

  def __ne__(self, other):
    return not self.__eq__(other)

  def json_str(self) -> str:
    non_null = {}
    for key, value in self.__dict__.items():
      if value is not None:
        non_null[key] = value
    return json.dumps(non_null, separators=_JSON_SEPARATORS)


def _compare_actions(a: JSONAction, b: JSONAction) -> bool:
  """Compares two JSONActions.

  Args:
    a: The first action.
    b: The second action.

  Returns:
    If the actions are equal.
  """
  # Ignore cases.
  if a.app_name is not None and b.app_name is not None:
    app_name_match = a.app_name.lower() == b.app_name.lower()
  else:
    app_name_match = a.app_name == b.app_name

  if a.text is not None and b.text is not None:
    text_match = a.text.lower() == b.text.lower()
  else:
    text_match = a.text == b.text

  # Compare the non-metadata fields.
  return (
      app_name_match
      and text_match
      and a.action_type == b.action_type
      and a.index == b.index
      and a.x == b.x
      and a.y == b.y
      and a.keycode == b.keycode
      and a.direction == b.direction
      and a.goal_status == b.goal_status
  )


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from unittest import mock

from absl.testing import absltest
from android_env.components import errors
from android_world.env import adb_utils
from android_world.env import interface
from android_world.env import tools
from android_world.env.setup_device import apps
from android_world.env.setup_device import setup
from android_world.utils import app_snapshot


class SetupTest(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.mock_issue_generic_request = self.enter_context(
        mock.patch.object(adb_utils, "issue_generic_request")
    )

  @mock.patch.object(tools, "AndroidToolController")
  @mock.patch.object(setup, "_download_and_install_apk")
  @mock.patch.object(app_snapshot, "save_snapshot")
  def test_setup_apps(self, mock_save_snapshot, mock_install_apk, unused_tools):
    env = mock.create_autospec(interface.AsyncEnv)
    mock_app_setups = {
        app_class: mock.patch.object(app_class, "setup").start()
        for app_class in setup._APPS
    }

    setup.setup_apps(env)

    for app_class in setup._APPS:
      if app_class.apk_names:  # 1P apps do not have APKs.
        mock_install_apk.assert_any_call(app_class.apk_names[0], env)
      mock_app_setups[app_class].assert_any_call(env)
      mock_save_snapshot.assert_any_call(app_class.app_name, env.controller)


class _App(apps.AppSetup):

  def __init__(self, apk_names, app_name):
    self.apk_names = apk_names
    self.app_name = app_name


class InstallApksTest(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.env = mock.create_autospec(interface.AsyncEnv)
    self.mock_download_and_install_apk = self.enter_context(
        mock.patch.object(setup, "_download_and_install_apk")
    )
    self.apps = [
        _App(apk_names=["apk1", "apk2"], app_name="App1"),
        _App(apk_names=[], app_name="App2"),  # No APKs
        _App(apk_names=["apk3"], app_name="App3"),
    ]
    setup._APPS = self.apps

  def test_install_all_apks_success(self):
    self.mock_download_and_install_apk.return_value = None

    setup._install_all_apks(self.env)

    expected_calls = [mock.call("apk1", self.env), mock.call("apk3", self.env)]
    self.mock_download_and_install_apk.assert_has_calls(
        expected_calls, any_order=True
    )

  def test_install_all_apks_success_with_fallback(self):
    def side_effect(apk_name, env):
      del env
      if apk_name == "apk1":
        raise errors.AdbControllerError
      return None

    self.mock_download_and_install_apk.side_effect = side_effect

    setup._install_all_apks(self.env)

    expected_calls = [
        mock.call("apk1", self.env),
        mock.call("apk2", self.env),
        mock.call("apk3", self.env),
    ]
    self.mock_download_and_install_apk.assert_has_calls(expected_calls)


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""This module defines classes for setting up various applications in the Android World environment.

Each class represents an app and includes methods for retrieving its APK name
and performing setup tasks specific to that app using the Android Environment
Interface.
"""

import abc
import os
import time
from typing import Iterable
from absl import logging
from android_world.env import adb_utils
from android_world.env import interface
from android_world.env import tools
from android_world.task_evals.information_retrieval import joplin_app_utils
from android_world.utils import file_utils
import requests


APP_DATA = os.path.join(os.path.dirname(__file__), 'app_data')


def download_app_data(file_name: str) -> str:
  """Downloads file from a GCS bucket, if not cached, and installs it."""
  cache_dir = "/tmp/android_world/app_data"
  remote_url = (
      f"https://storage.googleapis.com/gresearch/android_world/{file_name}"
  )
  full_path = os.path.join(cache_dir, file_name)
  os.makedirs(cache_dir, exist_ok=True)
  if not os.path.isfile(full_path):
    logging.info("Downloading file_name %s to cache %s", file_name, cache_dir)
    response = requests.get(remote_url)
    if response.status_code == 200:
      with open(full_path, "wb") as file:
        file.write(response.content)
    else:
      raise RuntimeError(
          f"Failed to download file_name from {remote_url}, status code:"
          f" {response.status_code}"
      )
  else:
    logging.info("File already %s exists in cache %s", file_name, cache_dir)
  return full_path


class AppSetup(abc.ABC):
  """Abstract class for setting up an app."""

  # The APK name of the app. This will assumed to be downloaded in setup.py and
  # each instance of an AppSetup will be referenced using the `apk` name as the
  # key for downloading. Some apps contain multiple APK names since different
  # versions are distributed depending on the architecture. E.g., M1 Macs
  # require different APKs for some apps.
  apk_names = ""

  # The short name of the app, as used by adb_utils.
  app_name = ""

  @classmethod
  def setup(cls, env: interface.AsyncEnv) -> None:
    """Performs setup tasks specific to the app."""
    adb_utils.clear_app_data(
        adb_utils.extract_package_name(
            adb_utils.get_adb_activity(cls.app_name)
        ),
        env.controller,
    )

  @classmethod
  def _copy_data_to_device(
      cls,
      files: Iterable[str],
      device_path: str,
      env: interface.AsyncEnv,
  ) -> None:
    """Helper method for copying app data  to the device.

    Args:
      files: Names of files to copy from {APP_DATA}/app_name/ to {device_path}.
      device_path: Location on device to load the files.
      env: Android environment.
    """
    for file in files:
      copy_to_device = lambda path: adb_utils.check_ok(
          file_utils.copy_data_to_device(
              path,
              device_path,
              env.controller,
          ),
          f"Failed to copy {device_path} to device.",
      )

      full_path = download_app_data(file)
      copy_to_device(full_path)


class CameraApp(AppSetup):
  """Class for setting up pre-installed Camera app."""

  app_name = "camera"

  @classmethod
  def setup(cls, env: interface.AsyncEnv) -> None:
    super().setup(env)

    # Prevent pop-up asking for permission.
    adb_utils.grant_permissions(
        adb_utils.extract_package_name(
            adb_utils.get_adb_activity(cls.app_name)
        ),
        "android.permission.ACCESS_COARSE_LOCATION",
        env.controller,
    )

    # Click through onboarding screens during first time launch.
    adb_utils.launch_app(cls.app_name, env.controller)
    try:
      controller = tools.AndroidToolController(env=env.controller)
      time.sleep(2.0)
      controller.click_element("NEXT")
      time.sleep(2.0)
    finally:
      adb_utils.close_app(cls.app_name, env.controller)


class ChromeApp(AppSetup):
  """Class for setting up pre-installed Chrome app."""

  app_name = "chrome"

  @classmethod
  def setup(cls, env: interface.AsyncEnv) -> None:
    super().setup(env)

    # Click through onboarding screens during first time launch.
    adb_utils.launch_app(cls.app_name, env.controller)
    try:
      controller = tools.AndroidToolController(env=env.controller)
      time.sleep(2.0)
      # Welcome screen.
      controller.click_element("Accept & continue")
      time.sleep(2.0)
      # Turn on sync?
      controller.click_element("No thanks")
      time.sleep(2.0)
      # Enable notifications?
      controller.click_element("No thanks")
      time.sleep(2.0)
    finally:
      adb_utils.close_app(cls.app_name, env.controller)


class ClockApp(AppSetup):
  """Class for setting up pre-installed Clock app."""

  app_name = "clock"

  @classmethod
  def setup(cls, env: interface.AsyncEnv) -> None:
    super().setup(env)

    # Open once for initial tool tip display.
    adb_utils.launch_app(cls.app_name, env.controller)
    time.sleep(2.0)
    adb_utils.close_app(cls.app_name, env.controller)


class ContactsApp(AppSetup):
  """Class for setting up pre-installed Contacts app."""

  app_name = "contacts"

  @classmethod
  def setup(cls, env: interface.AsyncEnv) -> None:
    super().setup(env)

    # Click through onboarding screens during first time launch.
    adb_utils.launch_app(cls.app_name, env.controller)
    try:
      controller = tools.AndroidToolController(env=env.controller)
      time.sleep(2.0)
      # Back up & organize your contacts with Google.
      controller.click_element("Skip")
      time.sleep(2.0)
      # Allow Contacts to send you notifications?
      controller.click_element("Don't allow")
      time.sleep(2.0)
    finally:
      adb_utils.close_app(cls.app_name, env.controller)


class DialerApp(AppSetup):
  """Class for setting up pre-installed Dialer app."""

  app_name = "dialer"


class FilesApp(AppSetup):
  """Class for setting up pre-installed Files app."""

  app_name = "files"


class SettingsApp(AppSetup):
  """Class for setting up pre-installed Settings app."""

  app_name = "settings"


class MarkorApp(AppSetup):
  """Class for setting up Markor app."""

  apk_names = ("net.gsantner.markor_146.apk",)
  app_name = "markor"

  @classmethod
  def setup(cls, env: interface.AsyncEnv) -> None:
    super().setup(env)

    adb_utils.launch_app(cls.app_name, env.controller)
    try:
      controller = tools.AndroidToolController(env=env.controller)
      time.sleep(2.0)
      controller.click_element("NEXT")
      time.sleep(2.0)
      controller.click_element("NEXT")
      time.sleep(2.0)
      controller.click_element("NEXT")
      time.sleep(2.0)
      controller.click_element("NEXT")
      time.sleep(2.0)
      controller.click_element("DONE")
      time.sleep(2.0)

      controller.click_element("OK")
      time.sleep(2.0)
      controller.click_element("Allow access to manage all files")
      time.sleep(2.0)
    finally:
      adb_utils.close_app(cls.app_name, env.controller)


class AndroidWorldApp(AppSetup):
  """Class for setting up Android World app.

  AndroidWorld app provides on-screen visualization of tasks and rewards.
  """

  apk_names = ("androidworld.apk",)
  app_name = "android world"

  @classmethod
  def setup(cls, env: interface.AsyncEnv) -> None:
    super().setup(env)
    adb_utils.issue_generic_request(
        [
            "shell",
            "appops",
            "set",
            adb_utils.extract_package_name(
                adb_utils.get_adb_activity("android world")
            ),
            "android:system_alert_window",
            "allow",
        ],
        env.controller,
    )
    adb_utils.launch_app(cls.app_name, env.controller)
    adb_utils.close_app(cls.app_name, env.controller)


class ClipperApp(AppSetup):
  """Class for setting up clipper app."""

  apk_names = ("clipper.apk",)
  app_name = "clipper"

  @classmethod
  def setup(cls, env: interface.AsyncEnv) -> None:
    super().setup(env)
    controller = tools.AndroidToolController(env=env.controller)
    adb_utils.launch_app(cls.app_name, env.controller)
    try:
      time.sleep(2.0)
      controller.click_element("Continue")
      time.sleep(2.0)
      controller.click_element("OK")
    finally:
      adb_utils.close_app(cls.app_name, env.controller)


class SimpleCalendarProApp(AppSetup):
  """Class for setting up simple calendar pro app."""

  apk_names = ("com.simplemobiletools.calendar.pro_238.apk",)
  app_name = "simple calendar pro"

  @classmethod
  def setup(cls, env: interface.AsyncEnv) -> None:
    super().setup(env)
    adb_utils.launch_app(cls.app_name, env.controller)
    adb_utils.close_app(cls.app_name, env.controller)

    # Grant permissions for calendar app.
    calendar_package = adb_utils.extract_package_name(
        adb_utils.get_adb_activity("simple calendar pro")
    )
    adb_utils.grant_permissions(
        calendar_package,
        "android.permission.READ_CALENDAR",
        env.controller,
    )
    adb_utils.grant_permissions(
        calendar_package,
        "android.permission.WRITE_CALENDAR",
        env.controller,
    )
    adb_utils.grant_permissions(
        calendar_package,
        "android.permission.POST_NOTIFICATIONS",
        env.controller,
    )


class TasksApp(AppSetup):
  """Class for setting up Tasks app."""

  apk_names = ("org.tasks_130605.apk",)
  app_name = "tasks"

  @classmethod
  def setup(cls, env: interface.AsyncEnv) -> None:
    super().setup(env)
    adb_utils.launch_app(cls.app_name, env.controller)
    adb_utils.close_app(cls.app_name, env.controller)


class SimpleDrawProApp(AppSetup):
  """Class for setting up simple draw pro app."""

  apk_names = ("com.simplemobiletools.draw.pro_79.apk",)
  app_name = "simple draw pro"


class SimpleGalleryProApp(AppSetup):
  """Class for setting up Simple Gallery Pro app."""

  PERMISSIONS = (
      "android.permission.WRITE_EXTERNAL_STORAGE",
      "android.permission.ACCESS_MEDIA_LOCATION",
      "android.permission.READ_MEDIA_IMAGES",
      "android.permission.READ_MEDIA_VIDEO",
      "android.permission.POST_NOTIFICATIONS",
  )

  apk_names = ("com.simplemobiletools.gallery.pro_396.apk",)
  app_name = "simple gallery pro"

  @classmethod
  def setup(cls, env: interface.AsyncEnv) -> None:
    super().setup(env)

    # Grant permissions for gallery app.
    package = adb_utils.extract_package_name(
        adb_utils.get_adb_activity(cls.app_name)
    )
    for permission in cls.PERMISSIONS:
      adb_utils.grant_permissions(package, permission, env.controller)

    adb_utils.launch_app("simple gallery pro", env.controller)
    try:
      controller = tools.AndroidToolController(env=env.controller)
      time.sleep(2.0)
      controller.click_element("All files")
      time.sleep(2.0)
      controller.click_element("Allow access to manage all files")
    finally:
      adb_utils.close_app(cls.app_name, env.controller)


class SimpleSMSMessengerApp(AppSetup):
  """Class for setting up Simple SMS Messenger app."""

  apk_names = ("com.simplemobiletools.smsmessenger_85.apk",)
  app_name = "simple sms messenger"

  @classmethod
  def setup(cls, env: interface.AsyncEnv) -> None:
    super().setup(env)

    # Make Simple Messenger the default SMS app.
    adb_utils.set_default_app(
        "sms_default_application",
        adb_utils.extract_package_name(
            adb_utils.get_adb_activity("simple sms messenger")
        ),
        env.controller,
    )

    adb_utils.launch_app(cls.app_name, env.controller)
    try:
      controller = tools.AndroidToolController(env=env.controller)
      time.sleep(2.0)
      controller.click_element("SMS Messenger")
      time.sleep(2.0)
      controller.click_element("Set as default")
    finally:
      adb_utils.close_app(cls.app_name, env.controller)


class AudioRecorder(AppSetup):
  """Class for setting up Audio Recorder app."""

  apk_names = ("com.dimowner.audiorecorder_926.apk",)
  app_name = "audio recorder"

  @classmethod
  def setup(cls, env: interface.AsyncEnv) -> None:
    super().setup(env)
    adb_utils.grant_permissions(
        "com.dimowner.audiorecorder",
        "android.permission.RECORD_AUDIO",
        env.controller,
    )
    adb_utils.grant_permissions(
        "com.dimowner.audiorecorder",
        "android.permission.POST_NOTIFICATIONS",
        env.controller,
    )

    # Launch the app
    adb_utils.issue_generic_request(
        [
            "shell",
            "monkey",
            "-p",
            "com.dimowner.audiorecorder",
            "-candroid.intent.category.LAUNCHER",
            "1",
        ],
        env.controller,
    )
    time.sleep(2.0)  # Let app setup.
    adb_utils.close_app(cls.app_name, env.controller)


class MiniWobApp(AppSetup):
  """Class for setting up MiniWoB app."""

  apk_names = ("miniwobapp.apk",)
  app_name = "miniwob"


class ExpenseApp(AppSetup):
  """Class for setting up Arduia Pro Expense app."""

  apk_names = ("com.arduia.expense_11.apk",)
  app_name = "pro expense"

  @classmethod
  def setup(cls, env: interface.AsyncEnv) -> None:
    super().setup(env)
    adb_utils.launch_app(cls.app_name, env.controller)
    try:
      time.sleep(2.0)
      controller = tools.AndroidToolController(env=env.controller)
      controller.click_element("NEXT")
      time.sleep(2.0)
      controller.click_element("CONTINUE")
      time.sleep(3.0)
    finally:
      adb_utils.close_app(cls.app_name, env.controller)


class RecipeApp(AppSetup):
  """Class for setting up Broccoli Recipe app."""

  apk_names = ("com.flauschcode.broccoli_1020600.apk",)
  app_name = "broccoli"

  @classmethod
  def setup(cls, env: interface.AsyncEnv) -> None:
    super().setup(env)
    adb_utils.launch_app(cls.app_name, env.controller)
    time.sleep(2.0)
    adb_utils.close_app(cls.app_name, env.controller)


class OsmAndApp(AppSetup):
  """Class for setting up OsmAndApp map app.

  OsmAnd handles the following intents (among others*). In addition to geo
  URIs, it can handle intents using the Google Maps API as well as a few
  other apps not listed here.

  Android geo intents:
    geo:latitude,longitude
    geo:latitude,longitude?z=zoom
    geo:0,0?q=my+street+address
    geo:0,0?q=business+near+city

  OsmAnd specific intents:
    http://download.osmand.net/go?lat=&lon=&z=
    http://osmand.net/go?lat=34&lon=-106&z=11

  Google:
    google.navigation:q=34.99393,-106.61568
    http://maps.google.com/maps?q=N34.939,W106
    http://maps.google.com/maps?f=d&saddr=My+Location&daddr=lat,lon
    http://maps.google.com/maps/@34,-106,11z
    http://maps.google.com/maps/ll=34.99393,-106.61568,z=11
    https://maps.google.com/maps?q=loc:-21.8835112,-47.7838932 (Name)
    http://maps.google.com/maps?q=34,-106
    http://www.google.com/maps/dir/Current+Location/34,-106

  * https://osmand.net/docs/technical/algorithms/osmand-intents/
  """

  PERMISSIONS = (
      "android.permission.POST_NOTIFICATIONS",
      # For other possible permissions see the manifest
      # https://github.com/osmandapp/OsmAnd/blob/master/OsmAnd/AndroidManifest.xml
  )

  DEVICE_MAPS_PATH = "/storage/emulated/0/Android/data/net.osmand/files/"

  MAP_NAMES = ("Liechtenstein_europe.obf",)

  apk_names = ("net.osmand-4.6.13.apk",)
  app_name = "osmand"

  @classmethod
  def setup(cls, env: interface.AsyncEnv) -> None:
    super().setup(env)
    adb_utils.launch_app(cls.app_name, env.controller)
    time.sleep(2.0)

    try:
      controller = tools.AndroidToolController(env=env.controller)
      controller.click_element("SKIP DOWNLOAD")
      time.sleep(2.0)
    except ValueError:
      logging.warn(
          "First time setup did not click through all anticipated screens."
      )
    finally:
      adb_utils.close_app(cls.app_name, env.controller)

    # Grant permissions for OsmAnd mapping app.
    package = adb_utils.extract_package_name(
        adb_utils.get_adb_activity(cls.app_name)
    )
    for permission in cls.PERMISSIONS:
      adb_utils.grant_permissions(package, permission, env.controller)

    # Copy maps to data directory.
    cls._copy_data_to_device(cls.MAP_NAMES, cls.DEVICE_MAPS_PATH, env)

    # Make sure security context is correct so that the files can be accessed.
    for map_file in cls.MAP_NAMES:
      adb_utils.check_ok(
          adb_utils.issue_generic_request(
              [
                  "shell",
                  "chcon",
                  "u:object_r:media_rw_data_file:s0",
                  os.path.join(cls.DEVICE_MAPS_PATH, map_file),
              ],
              env.controller,
          )
      )

    adb_utils.close_app(cls.app_name, env.controller)


class OpenTracksApp(AppSetup):
  """Class for setting up OpenTracks app."""

  apk_names = ("de.dennisguse.opentracks_5705.apk",)
  app_name = "activity tracker"

  @classmethod
  def setup(cls, env: interface.AsyncEnv) -> None:
    adb_utils.launch_app(cls.app_name, env.controller)
    adb_utils.close_app(cls.app_name, env.controller)

    # Grant permissions for open tracks app.
    open_tracks_package = adb_utils.extract_package_name(
        adb_utils.get_adb_activity("open tracks")
    )
    adb_utils.grant_permissions(
        open_tracks_package,
        "android.permission.ACCESS_COARSE_LOCATION",
        env.controller,
    )
    adb_utils.grant_permissions(
        open_tracks_package,
        "android.permission.ACCESS_FINE_LOCATION",
        env.controller,
    )
    adb_utils.grant_permissions(
        open_tracks_package,
        "android.permission.POST_NOTIFICATIONS",
        env.controller,
    )
    time.sleep(2.0)
    controller = tools.AndroidToolController(env=env.controller)
    # Give permission for bluetooth, can't be done through adb.
    controller.click_element("Allow")
    adb_utils.launch_app("activity tracker", env.controller)
    adb_utils.close_app("activity tracker", env.controller)


class VlcApp(AppSetup):
  """Class for setting up VLC app."""

  videos_path = "/storage/emulated/0/VLCVideos"  # Store videos here.
  apk_names = (
      "org.videolan.vlc_13050408.apk",
      "org.videolan.vlc_13050407.apk",  # Arch86 for Mac M1/M2/etc.
  )
  app_name = "vlc"

  @classmethod
  def setup(cls, env: interface.AsyncEnv) -> None:
    super().setup(env)
    package = adb_utils.extract_package_name(
        adb_utils.get_adb_activity(cls.app_name)
    )
    adb_utils.grant_permissions(
        package, "android.permission.POST_NOTIFICATIONS", env.controller
    )
    if not file_utils.check_directory_exists(cls.videos_path, env.controller):
      file_utils.mkdir(cls.videos_path, env.controller)

    time.sleep(2.0)
    # Launch similar to opening app from app launcher. This runs setup logic not
    # available using `adb shell am start`. Specifically, it will create the
    # /data/data/org.videolan.vlc/app_db/vlc_media.db file.
    adb_utils.issue_generic_request(
        [
            "shell",
            "monkey",
            "-p",
            package,
            "-candroid.intent.category.LAUNCHER",
            "1",
        ],
        env.controller,
    )
    time.sleep(2.0)
    try:
      controller = tools.AndroidToolController(env=env.controller)
      controller.click_element("Skip")
      time.sleep(2.0)
      controller.click_element("GRANT PERMISSION")
      time.sleep(2.0)
      controller.click_element("OK")
      time.sleep(2.0)
      controller.click_element("Allow access to manage all files")
    finally:
      adb_utils.close_app(cls.app_name, env.controller)


class JoplinApp(AppSetup):
  """Class for setting up Joplin app."""

  apk_names = ("net.cozic.joplin_2097740.apk",)
  app_name = "joplin"

  @classmethod
  def setup(cls, env: interface.AsyncEnv) -> None:
    super().setup(env)

    # Grant permissions for joplin app.
    joplin_package = adb_utils.extract_package_name(
        adb_utils.get_adb_activity(cls.app_name)
    )
    adb_utils.grant_permissions(
        joplin_package,
        "android.permission.ACCESS_COARSE_LOCATION",
        env.controller,
    )
    adb_utils.grant_permissions(
        joplin_package,
        "android.permission.ACCESS_FINE_LOCATION",
        env.controller,
    )

    # Launch the app, similar to how user launches it from App Drawer.
    adb_utils.issue_generic_request(
        [
            "shell",
            "monkey",
            "-p",
            joplin_package,
            "-candroid.intent.category.LAUNCHER",
            "1",
        ],
        env.controller,
    )
    time.sleep(10.0)
    adb_utils.close_app(cls.app_name, env.controller)
    time.sleep(10.0)

    # Calling clear_dbs() without having added a note seems to make
    # the sqlite table inaccessible. Every subsequent call to clear_dbs()
    # works fine.
    joplin_app_utils.create_note(
        folder="new folder",
        title="new_note",
        body="",
        folder_mapping={},
        env=env,
    )
    joplin_app_utils.clear_dbs(env)


class RetroMusicApp(AppSetup):
  """Class for setting up Retro Music."""

  PERMISSIONS = (
      "android.permission.READ_MEDIA_AUDIO",
      "android.permission.POST_NOTIFICATIONS",
  )

  apk_names = ("code.name.monkey.retromusic_10603.apk",)
  app_name = "retro music"

  @classmethod
  def setup(cls, env: interface.AsyncEnv) -> None:
    super().setup(env)
    package = adb_utils.extract_package_name(
        adb_utils.get_adb_activity("retro music")
    )
    for permission in cls.PERMISSIONS:
      adb_utils.grant_permissions(package, permission, env.controller)

    adb_utils.launch_app(cls.app_name, env.controller)
    time.sleep(2.0)
    adb_utils.close_app(cls.app_name, env.controller)


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Setup tool for Android World.

It does the following:

* APK Management: Automates installations of apks needed for Android World.
* Sets up environment: Configures emulator with necessary permissions, using adb
  and basic automation.
"""

import os

from absl import logging
from android_env.components import errors
from android_world.env import adb_utils
from android_world.env import interface
from android_world.env.setup_device import apps
from android_world.utils import app_snapshot

# APKs required for Android World.
_APPS = (
    # keep-sorted start
    apps.AndroidWorldApp,
    apps.AudioRecorder,
    apps.CameraApp,
    apps.ChromeApp,
    apps.ClipperApp,
    apps.ClockApp,
    apps.ContactsApp,
    apps.DialerApp,
    apps.ExpenseApp,
    apps.FilesApp,
    apps.JoplinApp,
    apps.MarkorApp,
    apps.MiniWobApp,
    apps.OpenTracksApp,
    apps.OsmAndApp,
    apps.RecipeApp,
    apps.RetroMusicApp,
    apps.SettingsApp,
    apps.SimpleCalendarProApp,
    apps.SimpleDrawProApp,
    apps.SimpleGalleryProApp,
    apps.SimpleSMSMessengerApp,
    apps.TasksApp,
    apps.VlcApp,
    # keep-sorted end
)


def _download_and_install_apk(apk: str, env: interface.AsyncEnv) -> None:
  """Downloads all APKs from remote location and installs them."""
  path = apps.download_app_data(apk)
  adb_utils.install_apk(path, env.controller)


def _install_all_apks(env: interface.AsyncEnv) -> None:
  """Installs all APKs for Android World."""
  print("Downloading app data and installing apps. This make take a few mins.")
  for app in _APPS:
    if not app.apk_names:  # Ignore 1p apps that don't have an APK.
      continue
    apk_installed = False
    for apk_name in app.apk_names:
      try:
        _download_and_install_apk(apk_name, env)
        apk_installed = True
        break
      except errors.AdbControllerError:
        # Try apk compiled for a different architecture, e.g., Mac M1.
        continue
    if not apk_installed:
      raise RuntimeError(
          f"Failed to download and install APK for {app.app_name}"
      )


def setup_apps(env: interface.AsyncEnv) -> None:
  """Sets up apps for Android World.

  Args:
    env: The Android environment.

  Raises:
    RuntimeError: If cannot install APK.
  """
  # Make sure quick-settings are not displayed, which can override foreground
  # apps, and impede UI navigation required for setting up.
  adb_utils.press_home_button(env.controller)
  adb_utils.set_root_if_needed(env.controller)

  _install_all_apks(env)

  print(
      "Setting up applications on Android device. Please do not interact with"
      " device while installation is running."
  )
  for app in _APPS:
    try:
      logging.info("Setting up app %s", app.app_name)
      app.setup(env)
    except ValueError as e:
      logging.warning(
          "Failed to automatically setup app %s: %s.\n\nYou will need to"
          " manually setup the app.",
          app.app_name,
          e,
      )
    app_snapshot.save_snapshot(app.app_name, env.controller)


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Functions for creating fake AdbResponse instances for use in tests.

If a test mocks AndroidEnvInterface, it may wish to test behavior that depends
on the mock returning a response to an adb call. This module provides functions
to construct these for common use cases.
"""

import os

from android_env.proto import adb_pb2


def create_successful_generic_response(output: str) -> adb_pb2.AdbResponse:
  return adb_pb2.AdbResponse(
      status=adb_pb2.AdbResponse.Status.OK,
      generic=adb_pb2.AdbResponse.GenericResponse(
          output=output.encode("utf-8")
      ),
  )


def create_get_wifi_enabled_response(is_enabled: bool) -> adb_pb2.AdbResponse:
  """Returns an AdbResponse for whether wifi is turned on.

  Args:
    is_enabled: If true, wifi is turned on.
  """
  return create_successful_generic_response("1" if is_enabled else "0")


def create_get_bluetooth_enabled_response(
    is_enabled: bool,
) -> adb_pb2.AdbResponse:
  """Returns an AdbResponse for whether bluetooth is turned on.

  Args:
    is_enabled: If true, wifi is turned on.
  """
  return create_successful_generic_response("1" if is_enabled else "0")


def create_get_activity_response(
    full_activity: str,
) -> adb_pb2.AdbResponse:
  """Returns an AdbResponse for the current visible Activity.

  Args:
    full_activity: The full component name of the activity.
  """
  return adb_pb2.AdbResponse(
      status=adb_pb2.AdbResponse.Status.OK,
      get_current_activity=adb_pb2.AdbResponse.GetCurrentActivityResponse(
          full_activity=full_activity
      ),
  )


def create_check_directory_exists_response(exists: bool) -> adb_pb2.AdbResponse:
  """Returns an AdbResponse saying the requested directory exists."""
  return create_successful_generic_response(
      "Exists" if exists else "Does not exist"
  )


def create_check_file_or_folder_exists_responses(
    file_name: str, base_path: str, exists: bool
) -> list[adb_pb2.AdbResponse]:
  """Returns a list of AdbResponses saying the requested file or folder exists.

  Multiple responses are returned as we first check if the directory exists.

  Args:
    file_name: The name of the file.
    base_path: The path to the directory containing the file.
    exists: If true, the responses say that the file exists.
  """
  if not exists:
    return [create_check_directory_exists_response(exists=False)]
  return [
      create_check_directory_exists_response(exists=True),
      create_successful_generic_response(
          os.path.join(base_path, file_name) + "\n"
      ),
  ]


def create_taskeval_initialize_responses(
    number_of_apps: int,
) -> list[adb_pb2.AdbResponse]:
  """Returns a list of responses to handle the initialize logic in TaskEval."""
  # Two calls are used to set the time. Then a call per app is used to close the
  # apps listed as associated with the task.
  number_of_responses = 2 + number_of_apps
  return [
      create_successful_generic_response("")
      for _ in range(number_of_responses)
  ]


def create_remove_files_responses() -> list[adb_pb2.AdbResponse]:
  """Returns a list of AdbResponses saying the requested files are removed."""
  return [
      create_check_directory_exists_response(exists=True),
      create_successful_generic_response(""),
  ]


def create_copy_to_device_responses() -> list[adb_pb2.AdbResponse]:
  """Returns a list of AdbResponses saying the file was copied to the device."""
  return [
      create_check_directory_exists_response(exists=True),
      create_successful_generic_response(""),
  ]


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Utils for file operations using adb."""

import contextlib
import dataclasses
import datetime
import os
import random
import re
import shutil
import string
from typing import Iterator
from typing import Optional

from absl import logging
from android_env import env_interface
from android_env.components import errors
from android_env.proto import adb_pb2
from android_world.env import adb_utils
from android_world.utils import fuzzy_match_lib


# Local temporary location for files copied to or from the device.
TMP_LOCAL_LOCATION = "/tmp/android_world"


@dataclasses.dataclass(frozen=True)
class FileWithMetadata:
  """File with its metadata like change time.

  Attributes:
    file_name: file name.
    full_path: file name with full path.
    file_size: file size in bytes.
    change_time: file change time (ctime).
  """

  file_name: str
  full_path: str
  file_size: int
  change_time: datetime.datetime


def remove_single_file(
    target: str,
    base_path: str,
    env: env_interface.AndroidEnvInterface,
) -> None:
  """Remove a file (specified by its full path) if exists.

  Args:
    target: Target file name.
    base_path: Base directory to search for
    env: The environment to use.
  """
  if check_directory_exists(base_path, env):
    file_list = get_file_list_with_metadata(base_path, env)
    if target in [file_info.file_name for file_info in file_list]:
      adb_utils.issue_generic_request(
          ["shell", "rm", "-r", os.path.join(base_path, target)],
          env,
      )


def clear_directory(
    directory_path: str,
    env: env_interface.AndroidEnvInterface,
) -> None:
  """Removes all files in the folder; also checks if folder is not empty.

  Args:
    directory_path: Location to create the file.
    env: The environment to use.

  Raises:
    RuntimeError when directory exists a failure occured while deleting files.
  """
  if not check_directory_exists(directory_path, env):
    return

  # Check if the folder is empty
  res = adb_utils.issue_generic_request(
      ["shell", "ls", "-1", directory_path], env
  )
  folder_contents = res.generic.output.decode().strip()

  if folder_contents:
    adb_utils.check_ok(
        adb_utils.issue_generic_request(
            ["shell", "rm", "-r", f"{directory_path}/*"],
            env,
        ),
        f"Failed to clear directory {directory_path}.",
    )


def create_file(
    file_name: str,
    directory_path: str,
    env: env_interface.AndroidEnvInterface,
    content: str = "",
) -> str:
  """Creates a new file.

  Args:
    file_name: Name of file.
    directory_path: Location to create the file.
    env: The environment to use.
    content: The contents to write to the file. If nothing is provided, then
      random text will be added.

  Returns:
    Content of the created file.
  """
  if not content:
    content = "".join(
        random.choices(string.ascii_letters + string.digits, k=20)
    )
  # Escape quotes to avoid issues with writing them to file.
  content = content.replace("'", "'\"'\"'")
  mkdir(directory_path, env)
  adb_utils.issue_generic_request(
      [
          "shell",
          "echo",
          f"'{content}'",
          ">",
          f"{directory_path}/{file_name}",
      ],
      env,
  )
  return content


def mkdir(directory_path: str, env: env_interface.AndroidEnvInterface) -> None:
  """Makes a directory using adb.

  Args:
    directory_path: The location to make it.
    env: The environment.

  Raises:
    RuntimeError when directory could not be created.
  """
  adb_utils.check_ok(
      adb_utils.issue_generic_request(
          [
              "shell",
              "mkdir",
              "-p",
              directory_path,
          ],
          env,
      ),
      f"Failed to create directory {directory_path}.",
  )


def copy_dir(
    source_path: str, dest_path: str, env: env_interface.AndroidEnvInterface
):
  """Recursively copies from one directory to another on device.

  Args:
    source_path: Source directory path on device.
    dest_path: Destination directory path on device.
    env: The environment.

  Raises:
    RuntimeError when the contents of the source path directory can not be
    written to the destination path.
  """

  if not check_directory_exists(source_path, env):
    logging.warn(
        "Source directory %s does not exist, ignoring copy_dir.", source_path
    )
    return

  if not check_directory_exists(dest_path, env):
    mkdir(dest_path, env)  # RuntimeError raised if path exists as a file.

  adb_utils.check_ok(
      adb_utils.issue_generic_request(
          ["shell", "cp", "-a", f"{source_path}/.", f"{dest_path}/"], env
      ),
      f"Failure copying {source_path} directory to {dest_path}.",
  )


def check_file_or_folder_exists(
    target: str, base_path: str, env: env_interface.AndroidEnvInterface
) -> bool:
  """Recursively checks if a file or folder exists under the specified base path.

  Args:
      target: Name of the file or folder to search for.
      base_path: The directory path under which to search.
      env: The Android environment interface.

  Returns:
      bool: True if the file or folder exists, False otherwise.

  Raises:
    RuntimeError: When ADB does not correctly execute.
  """
  if not check_directory_exists(base_path, env):
    return False

  # List all files and folders recursively under the base path
  res = adb_utils.issue_generic_request(
      ["shell", "find", base_path, "-type", "f", "-o", "-type", "d"], env
  )

  if not res.status:
    raise RuntimeError("ADB command failed.")

  all_paths = set(res.generic.output.decode().split("\n"))

  full_target_path = os.path.join(base_path, target)
  return full_target_path in all_paths


def check_file_exists(
    path: str,
    env: env_interface.AndroidEnvInterface,
    bash_file_test: str = "-f",
) -> bool:
  """Check if a file exists.

  Args:
    path: The path to check.
    env: The environment.
    bash_file_test: Bash test string. Use "-f" for file, "-d" for directory, and
      "-e" for either.

  Returns:
    Whether the file exists.
  """
  bash_script = f"""
  if [ {bash_file_test} "{path}" ]; then
      echo "Exists"
  else
      echo "Does not exist"
  fi
  """
  response = adb_utils.issue_generic_request(["shell", bash_script], env)
  if "Exists" in response.generic.output.decode("utf-8"):
    return True
  elif "Does not exist" in response.generic.output.decode("utf-8"):
    return False
  else:
    raise errors.AdbControllerError("Unexpected output from file check")


def check_directory_exists(
    path: str, env: env_interface.AndroidEnvInterface
) -> bool:
  """Check if a directory exists.

  Args:
    path: The path to check.
    env: The environment.

  Returns:
    Whether the directory exists.
  """
  return check_file_exists(path, env, bash_file_test="-d")


@contextlib.contextmanager
def tmp_directory_from_device(
    device_path: str,
    env: env_interface.AndroidEnvInterface,
    timeout_sec: Optional[float] = None,
):
  """Copy a directory from the device to a local temporary directory using ADB.

  Args:
    device_path: The path of the directory on the Android device.
    env: The Android environment interface.
    timeout_sec: A timeout for the ADB operations.

  Yields:
    A temporary folder that contains files copied from the device that is
    automatically deleted after use.

  Raises:
    FileExistsError: If the temp directory already exists.
    FileNotFoundError: If the remote directory does not exist.
    RuntimeError: If there is an adb communication error.
  """
  directory_name = re.sub(r"\W", "", device_path)
  tmp_directory = os.path.join(TMP_LOCAL_LOCATION, directory_name)
  logging.info(
      "Copying %s directory to local tmp %s", device_path, tmp_directory
  )

  adb_utils.set_root_if_needed(env, timeout_sec)

  if os.path.exists(tmp_directory):
    raise FileExistsError(f"{tmp_directory} already exists.")
  if not check_directory_exists(device_path, env):
    raise FileNotFoundError(f"{device_path} does not exist.")
  try:
    os.makedirs(tmp_directory, exist_ok=True)
    files = get_file_list_with_metadata(device_path, env, timeout_sec)
    for file in files:
      pull_response = env.execute_adb_call(
          adb_pb2.AdbRequest(
              pull=adb_pb2.AdbRequest.Pull(path=file.full_path),
              timeout_sec=timeout_sec,
          )
      )
      adb_utils.check_ok(pull_response)
      with open(os.path.join(tmp_directory, file.file_name), "wb") as f:
        f.write(pull_response.pull.content)

    yield tmp_directory

  finally:
    shutil.rmtree(tmp_directory)


@contextlib.contextmanager
def tmp_file_from_device(
    device_file: str,
    env: env_interface.AndroidEnvInterface,
    timeout_sec: Optional[float] = None,
) -> Iterator[str]:
  """Copies a remote file to a local temporary file.

  Args:
    device_file: The path on the device pointing to a file.
    env: The environment.
    timeout_sec: A timeout for the ADB operations.

  Yields:
    The name of the local temporary file.

  Raises:
    FileNotFoundError: If device_file does not exist.
    RuntimeError: If there is an adb communication error.
  """
  head, tail = os.path.split(device_file)
  dir_and_file_name = os.path.join(os.path.basename(head), tail)
  local_file = os.path.join(TMP_LOCAL_LOCATION, dir_and_file_name)
  try:
    # Need root access to access many directories.
    adb_utils.set_root_if_needed(env, timeout_sec)

    if not check_file_exists(device_file, env):
      raise FileNotFoundError(f"{device_file} does not exist.")
    if not os.path.exists(os.path.dirname(local_file)):
      os.makedirs(os.path.dirname(local_file), exist_ok=True)
    pull_response = env.execute_adb_call(
        adb_pb2.AdbRequest(
            pull=adb_pb2.AdbRequest.Pull(path=device_file),
            timeout_sec=timeout_sec,
        )
    )
    adb_utils.check_ok(pull_response)

    with open(local_file, "wb") as f:
      f.write(pull_response.pull.content)

    yield local_file
  finally:
    os.remove(local_file)


def copy_file_to_device(
    local_file_path: str,
    remote_file_path: str,
    env: env_interface.AndroidEnvInterface,
    timeout_sec: Optional[float] = None,
) -> adb_pb2.AdbResponse:
  """Copies a local file to a remote file."""
  with open(local_file_path, "rb") as f:
    file_contents = f.read()
    push_request = adb_pb2.AdbRequest(
        push=adb_pb2.AdbRequest.Push(
            content=file_contents, path=remote_file_path
        ),
        timeout_sec=timeout_sec,
    )
  push_response = env.execute_adb_call(push_request)
  adb_utils.issue_generic_request(
      ["shell", "chmod", "777", remote_file_path], env
  )
  return push_response


def copy_data_to_device(
    local_path: str,
    remote_path: str,
    env: env_interface.AndroidEnvInterface,
    timeout_sec: Optional[float] = None,
) -> adb_pb2.AdbResponse:
  """Copy a file or directory to the device from the local file system using ADB.

  Args:
    local_path: The path of the file or directory on the local file system.
    remote_path: The destination path on the Android device.
    env: The Android environment interface.
    timeout_sec: A timeout for the ADB operation.

  Returns:
    A response object containing the ADB operation result.

  Raises:
    FileNotFoundError: If the local file or directory does not exist. Or if
      remote path does not exist.
  """
  if not os.path.exists(local_path):
    raise FileNotFoundError(f"{local_path} does not exist.")
  response = adb_pb2.AdbResponse()
  if os.path.isfile(local_path):
    # If the file extension is different, remote_path is likely a directory.
    if os.path.splitext(local_path)[1] != os.path.splitext(remote_path)[1]:
      remote_path = os.path.join(remote_path, os.path.basename(local_path))
    return copy_file_to_device(local_path, remote_path, env, timeout_sec)

  # Copying a directory over, push every file separately.
  for file_path in os.listdir(local_path):
    current_response = copy_file_to_device(
        os.path.join(local_path, file_path),
        os.path.join(remote_path, os.path.basename(file_path)),
        env,
        timeout_sec,
    )
    if current_response.status != adb_pb2.AdbResponse.OK:
      return current_response
    response = current_response

  return response


def get_file_list_with_metadata(
    directory_path: str,
    env: env_interface.AndroidEnvInterface,
    timeout_sec: Optional[float] = None,
) -> list[FileWithMetadata]:
  """Get the list of all (regular) files with metadata in a given directory.

  Right now we only list regular files in the given directory and only grab
  file name, full directory and change time in metadata.

  Args:
    directory_path: The directory to list all its files.
    env: The Android environment interface.
    timeout_sec: A timeout for the ADB operation.

  Returns:
    A list of files with metadata.

  Raises:
    RuntimeError: If the input directory path is not valid or shell ls fails.
  """
  if not check_directory_exists(directory_path, env):
    raise RuntimeError(f"{directory_path} is not a valid directory.")

  # Run [adb shell ls] to list all files in the given directory.
  try:
    ls_response = adb_utils.issue_generic_request(
        f"shell ls {directory_path} -ll -au", env, timeout_sec
    )

    adb_utils.check_ok(ls_response, "Failed to list files in directory.")

    files = []
    # Each file (including links and directories) will be listed in format as
    # follows,
    #  -rw-rw---- 1 u0_a158 media_rw 0 2023-11-28 23:17:43.176000000 +0000 1.txt
    # We loop through all the files and collect regular files with metadata.
    for file_details in ls_response.generic.output.decode("utf-8").split("\n"):
      # In shell output, the first character is used to indicate file type and
      # "-" means the file is a regular file.
      if file_details.startswith("-"):
        files.append(
            FileWithMetadata(
                file_name=file_details.split(" ")[-1],
                full_path=os.path.join(
                    directory_path, file_details.split(" ")[-1]
                ),
                file_size=int(file_details.split(" ")[-5]),
                change_time=datetime.datetime.fromisoformat(
                    " ".join(file_details.split(" ")[-4:-2])[:-3]
                ),
            )
        )
    return files
  except errors.AdbControllerError as e:
    print(e)
    raise RuntimeError("Failed to list files in directory.") from e


def check_file_content(
    file_full_path: str,
    content: str,
    env: env_interface.AndroidEnvInterface,
    exact_match: bool = False,
    timeout_sec: Optional[float] = None,
) -> bool:
  """Check if a file content equals a given string.

  Args:
    file_full_path: Full path to the file, will return False if file does not
      exist.
    content: The expected file content.
    env: The Android environment interface.
    exact_match: A boolean indicates whether we use exact match or fuzzy match.
    timeout_sec: A timeout for the ADB operation.

  Returns:
    If the given file has the given content, will return False in the case of
    incorrect file path/file does not exist.
  """

  try:
    res = adb_utils.issue_generic_request(
        ["shell", "cat", file_full_path], env, timeout_sec
    )
    if exact_match:
      return res.generic.output.decode() == content
    return fuzzy_match_lib.fuzzy_match(
        res.generic.output.decode().strip(), content
    )
  except errors.AdbControllerError as e:
    print(e)
    return False


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import datetime
import os
import shutil
import tempfile
from unittest import mock

from absl.testing import absltest
from absl.testing import parameterized
from android_env.proto import adb_pb2
from android_world.env import adb_utils
from android_world.utils import file_utils


def create_file_with_contents(file_name: str, contents: bytes) -> str:
  with open(file_name, 'wb') as f:
    f.write(contents)


class FilesTest(parameterized.TestCase):

  def setUp(self):
    super().setUp()
    self.mock_issue_generic_request = mock.patch.object(
        adb_utils, 'issue_generic_request'
    ).start()
    self.mock_env = mock.MagicMock()

  def tearDown(self):
    super().tearDown()
    mock.patch.stopall()

  def test_check_directory_exists(self):
    self.mock_issue_generic_request.return_value.generic.output.decode.return_value = (
        'Exists'
    )
    result = file_utils.check_directory_exists('/existing/path', self.mock_env)
    self.assertTrue(result)

    # Test case where directory does not exist
    self.mock_issue_generic_request.return_value.generic.output.decode.return_value = (
        'Does not exist'
    )
    result = file_utils.check_directory_exists(
        '/non/existing/path', self.mock_env
    )
    self.assertFalse(result)

  @mock.patch.object(os.path, 'exists')
  @mock.patch.object(file_utils, 'check_directory_exists')
  @mock.patch.object(shutil, 'rmtree')
  def test_tmp_directory_from_device(
      self, mock_rmtree, mock_check_directory_exists, mock_path_exists
  ):
    """Test if tmp_directory_from_device correctly copies a directory and handles exceptions."""
    mock_response = adb_pb2.AdbResponse(status=adb_pb2.AdbResponse.Status.OK)
    self.mock_env.execute_adb_call.return_value = mock_response
    mock_path_exists.return_value = False
    file_names = ['test1.txt', 'test2.txt']
    mock_check_directory_exists.return_value = True
    self.mock_issue_generic_request.return_value = adb_pb2.AdbResponse(
        status=adb_pb2.AdbResponse.Status.OK,
        generic=adb_pb2.AdbResponse.GenericResponse(
            output=bytes(
                '-rw-rw---- 1 u0_a158 media_rw 0 2023-11-28 23:17:43.176000000'
                f' +0000 {file_names[0]}\n'
                '-rw-rw---- 1 u0_a158 media_rw 0 2023-11-28 23:17:43.176000000'
                f' +0000 {file_names[1]}',
                'utf-8',
            )
        ),
    )

    tmp_local_directory = f'{file_utils.TMP_LOCAL_LOCATION}/remotedir'
    with file_utils.tmp_directory_from_device(
        '/remotedir', self.mock_env
    ) as tmp_directory:
      self.assertEqual(tmp_local_directory, tmp_directory)
      self.mock_env.execute_adb_call.assert_has_calls([
          mock.call(
              adb_pb2.AdbRequest(
                  pull=adb_pb2.AdbRequest.Pull(
                      path=os.path.join('/remotedir/', file_name)
                  ),
                  timeout_sec=None,
              )
          )
          for file_name in file_names
      ])
      self.assertCountEqual(os.listdir(tmp_directory), file_names)
      mock_rmtree.assert_not_called()
    mock_rmtree.assert_called_with(tmp_local_directory)

    # Test FileExistsError
    mock_path_exists.return_value = True
    with self.assertRaises(FileExistsError):
      with file_utils.tmp_directory_from_device('/remote/dir', self.mock_env):
        pass

    # Test FileNotFoundError
    mock_path_exists.return_value = False
    mock_check_directory_exists.return_value = False
    with self.assertRaises(FileNotFoundError):
      with file_utils.tmp_directory_from_device(
          '/nonexistent/dir', self.mock_env
      ):
        pass

    # Test ADB RuntimeError
    mock_check_directory_exists.return_value = True
    self.mock_issue_generic_request.return_value.status = (
        adb_pb2.AdbResponse.ADB_ERROR
    )
    with self.assertRaises(RuntimeError):
      with file_utils.tmp_directory_from_device(
          '/remote/dir',
          self.mock_env,
      ):
        pass

  def test_copy_data_to_device_copies_file(self):
    """Test if copy_data_to_device correctly copies a single file."""
    file_contents = b'test file contents'
    mock_response = adb_pb2.AdbResponse(status=adb_pb2.AdbResponse.Status.OK)
    self.mock_env.execute_adb_call.return_value = mock_response
    temp_dir = tempfile.mkdtemp()
    file_name = 'file1.txt'
    create_file_with_contents(os.path.join(temp_dir, file_name), file_contents)

    response = file_utils.copy_data_to_device(
        temp_dir, '/remote/dir', self.mock_env
    )
    self.mock_env.execute_adb_call.assert_has_calls(
        [
            mock.call(
                adb_pb2.AdbRequest(
                    push=adb_pb2.AdbRequest.Push(
                        content=file_contents,
                        path=os.path.join('/remote/dir/', file_name),
                    ),
                    timeout_sec=None,
                )
            )
        ],
        any_order=True,
    )

    self.assertEqual(response, mock_response)

  def test_copy_data_to_device_copies_full_dir(self):
    """Test if copy_data_to_device correctly copies data from a directory."""
    file_contents = b'test file contents'
    mock_response = adb_pb2.AdbResponse(status=adb_pb2.AdbResponse.Status.OK)
    self.mock_env.execute_adb_call.return_value = mock_response
    temp_dir = tempfile.mkdtemp()
    file_names = ['file1.txt', 'file2.txt']
    for file_name in file_names:
      create_file_with_contents(
          os.path.join(temp_dir, file_name), file_contents
      )

    response = file_utils.copy_data_to_device(
        temp_dir, '/remote/dir', self.mock_env
    )
    calls = []
    for file_name in file_names:
      calls.append(
          mock.call(
              adb_pb2.AdbRequest(
                  push=adb_pb2.AdbRequest.Push(
                      content=file_contents,
                      path=os.path.join('/remote/dir/', file_name),
                  ),
                  timeout_sec=None,
              )
          )
      )
    self.mock_env.execute_adb_call.assert_has_calls(
        calls,
        any_order=True,
    )

    self.assertEqual(response, mock_response)

  def test_copy_data_to_device_file_not_found(self):
    """Test if copy_data_to_device handles errors."""
    # Test FileNotFoundError
    with self.assertRaises(FileNotFoundError):
      file_utils.copy_data_to_device(
          '/nonexistent/path', '/remote/dir', self.mock_env
      )

  @mock.patch.object(file_utils, 'check_directory_exists')
  def test_get_file_list_with_metadata(self, mock_check_directory_exists):
    mock_check_directory_exists.return_value = True
    self.mock_issue_generic_request.return_value = adb_pb2.AdbResponse(
        status=adb_pb2.AdbResponse.Status.OK,
        generic=adb_pb2.AdbResponse.GenericResponse(
            output=bytes(
                '-rw-rw---- 1 u0_a158 media_rw 0 2023-11-28 23:17:43.176000000'
                ' +0000 test.txt',
                'utf-8',
            )
        ),
    )
    file_list = file_utils.get_file_list_with_metadata(
        '/test_path', self.mock_env
    )
    self.mock_issue_generic_request.assert_called_with(
        'shell ls /test_path -ll -au', self.mock_env, None
    )
    self.assertLen(file_list, 1)
    self.assertEqual(file_list[0].file_name, 'test.txt')
    self.assertEqual(file_list[0].full_path, '/test_path/test.txt')
    self.assertEqual(
        file_list[0].change_time,
        datetime.datetime(2023, 11, 28, 23, 17, 43, 176000),
    )

  def test_check_file_content(self):
    self.mock_issue_generic_request.return_value = adb_pb2.AdbResponse(
        status=adb_pb2.AdbResponse.Status.OK,
        generic=adb_pb2.AdbResponse.GenericResponse(
            output=bytes(
                'test content.',
                'utf-8',
            )
        ),
    )

    res = file_utils.check_file_content(
        '/test_path/test_file', 'test content', self.mock_env
    )
    self.mock_issue_generic_request.assert_called_with(
        ['shell', 'cat', '/test_path/test_file'], self.mock_env, None
    )
    self.assertTrue(res)


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Plots UI elements."""

import copy
from typing import Any
from android_world.env import interface
from android_world.env import representation_utils
from matplotlib import patches
import matplotlib.pyplot as plt
import numpy as np


def _get_element_text(
    element: representation_utils.UIElement, include_extra_info: bool = True
) -> str:
  """Returns a text describing the element.

  Args:
    element: The UI element to get text from.
    include_extra_info: Whether to consider extra information in deriving text,
      such as resource_id and class_name.

  Returns:
    The text description if found, '' otherwise.
  """
  if element.text:
    text = element.text
    # Special handling of single character labels.
    if (
        len(text) == 1
        and element.content_description
        and len(element.content_description) > 1
    ):
      text = element.content_description
    return text
  if element.hint_text:
    return element.hint_text
  if element.content_description:
    return element.content_description
  if element.tooltip:
    return element.tooltip
  if include_extra_info:
    if element.class_name is not None and element.class_name.endswith('Switch'):
      return 'Switch:' + ('on' if element.is_checked else 'off')
    if element.resource_id is not None:
      return element.resource_id.split('/')[-1]
    if element.class_name is not None and element.class_name.endswith(
        'EditText'
    ):
      return 'edit text'
  return ''


def _plot_element_cartoon(
    elements: list[representation_utils.UIElement],
    screenshot: np.ndarray | None = None,
    max_text_length: int = 30,
) -> tuple[plt.Axes, plt.Axes]:
  """Plots UI element bboxes and associated properties.

  It's useful for quick and dirty visualization of a screen purely using the
  UIElements.

  Args:
    elements: The elements to plot.
    screenshot: If provided: the screenshot.
    max_text_length: Maximum length of text to show.

  Returns:
    Plot of screen.
  """
  _, axs = plt.subplots(1, 2, figsize=(13, 12))
  if screenshot is not None:
    axs[1].imshow(screenshot)
  ax = axs[0]

  for element in elements:
    bbox = copy.deepcopy(element.bbox_pixels)
    if bbox is None:
      continue

    if screenshot is not None:
      # Normalize.
      bbox.x_min /= screenshot.shape[1]
      bbox.x_max /= screenshot.shape[1]
      bbox.y_min /= screenshot.shape[0]
      bbox.y_max /= screenshot.shape[0]
    else:
      # Pick reasonable values.
      bbox.x_min /= 1080
      bbox.x_max /= 1080
      bbox.y_min /= 2400
      bbox.y_max /= 2400

    if bbox:
      width = bbox.x_max - bbox.x_min
      height = bbox.y_max - bbox.y_min

      rect = patches.Rectangle(
          (bbox.x_min, bbox.y_min),
          width,
          height,
          linewidth=1,
          edgecolor='r',
          facecolor='none',
      )
      ax.add_patch(rect)

      # Check if text is present, else plot the icon_net_type.
      text = _get_element_text(element)
      if text:
        if len(text) > max_text_length:
          text = text[0:max_text_length] + '...'
        ax.text(
            bbox.x_min,
            bbox.y_min,
            text,
            fontsize=10,
            ha='left',
            va='bottom',
        )

  ax.invert_yaxis()
  return axs


def plot_ui_elements(
    state: interface.State,
    max_text_length: int = 30,
) -> plt.Axes | tuple[plt.Axes, plt.Axes]:
  """Plots UI elements and optionally screenshot and action.

  Args:
    state: State of the environment.
    max_text_length: Maximum length of text to show.

  Returns:
    The axes from the plot.
  """
  axs = _plot_element_cartoon(
      state.ui_elements,
      screenshot=state.pixels,
      max_text_length=max_text_length,
  )
  return axs


def _plot_episode(
    screens: list[np.ndarray],
    title: str,
) -> None:
  """Plots an episode in a grid format.

  Args:
    screens: List of screen images.
    title: The title.
  """
  num_screens = len(screens)
  num_columns = 6
  num_rows = (num_screens + num_columns - 1) // num_columns
  fig, axs = plt.subplots(
      num_rows, num_columns, figsize=(4 * num_columns, num_rows * 3)
  )
  axs = np.atleast_2d(axs)
  fig.suptitle(title)

  i = 0
  for i, screen in enumerate(screens):
    row = i // num_columns
    col = i % num_columns
    ax = axs[row, col]
    ax.imshow(screen, aspect='auto')  # Use 'auto' to avoid distortion
    ax.axis('off')  # Turn off axes

  for j in range(i + 1, num_rows * num_columns):
    row = j // num_columns
    col = j % num_columns
    axs[row, col].axis('off')

  plt.tight_layout()
  plt.show()


def plot_episode(episode: dict[str, Any]) -> None:
  """Plots an episode in a grid format."""
  goal = episode['goal']
  episode_data = episode['episode_data']
  screens = (
      episode_data.get('screenshot')
      or episode_data.get('raw_screenshot')
      or episode_data.get('before_screenshot')
  )
  assert screens is not None
  _plot_episode(screens, title=goal)


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Utility functions for fuzzy matching."""

import difflib


# Threshold for determining if two strings are equal using
# difflib.SequenceMatcher(...).ratio().
_MIN_DIFF_SIMILARITY = 0.9


def fuzzy_match(text1: str, text2: str, ignore_case: bool = True) -> bool:
  """Compares two strings.

  Args:
    text1: The first text.
    text2: The second text.
    ignore_case: Whether to ignore case during comparison.

  Returns:
    Whether the two strings are approximately equal.
  """
  if text1 is None or text2 is None:
    return False
  text1 = str(text1)
  text2 = str(text2)

  def text_similarity(text1: str, text2: str, ignore_case: bool) -> float:
    """Computes similiarity between two texts."""
    if ignore_case:
      text1 = text1.lower()
      text2 = text2.lower()

    return difflib.SequenceMatcher(None, text1, text2).ratio()
  return (
      text_similarity(text1, text2, ignore_case=ignore_case)
      >= _MIN_DIFF_SIMILARITY
  )


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Utils for contacts operations using adb."""

import dataclasses
import re
import time
from typing import Iterator

from android_world.env import actuation
from android_world.env import adb_utils
from android_world.env import android_world_controller


def clean_phone_number(phone_number: str) -> str:
  """Removes all non-numeric characters from a phone number.

  Args:
    phone_number: The phone number to clean.

  Returns:
    The phone number with all non-numeric characters removed.
  """
  return re.sub(r"\D", "", phone_number)


def add_contact(
    name: str,
    phone_number: str,
    env: android_world_controller.AndroidWorldController,
    ui_delay_sec: float = 1.0,
):
  """Adds a contact with the specified name and phone number.

  This function sends an intent to the Android system to add a contact with
  the information pre-filled, clicks the "Save" button to create it, and then
  returns from the activity.

  Args:
    name: The name of the new contact
    phone_number: The phone number belonging to that contact.
    env: The android environment to add the contact to.
    ui_delay_sec: Delay between UI interactions. If this value is too low, the
      "save" button may be mis-clicked.
  """
  intent_command = (
      "am start -a android.intent.action.INSERT -t"
      f' vnd.android.cursor.dir/contact -e name "{name}" -e phone'
      f" {phone_number}"
  )

  adb_command = ["shell", intent_command]
  adb_utils.issue_generic_request(adb_command, env)
  time.sleep(ui_delay_sec)
  actuation.find_and_click_element("SAVE", env)
  time.sleep(ui_delay_sec)
  adb_utils.press_back_button(env)
  time.sleep(ui_delay_sec)


@dataclasses.dataclass(frozen=True)
class Contact:
  """Basic contact information."""
  name: str
  number: str


def list_contacts(
    env: android_world_controller.AndroidWorldController,
) -> list[Contact]:
  """Lists all contacts available in the Android environment.

  Args:
    env: Android environment to search for contacts.

  Returns:
    A list of all contact names and numbers present on the device.
  """
  intent_command = (
      "content query --uri content://contacts/phones/ --projection"
      " display_name:number"
  )
  adb_command = ["shell", intent_command]

  def parse(adb_output: str) -> Iterator[Contact]:
    for match in re.finditer(r"display_name=(.*), number=(.*)", adb_output):
      yield Contact(match.group(1), clean_phone_number(match.group(2)))

  return list(
      parse(
          adb_utils.issue_generic_request(
              adb_command, env
          ).generic.output.decode("utf-8")
      )
  )


def clear_contacts(env: android_world_controller.AndroidWorldController):
  """Clears all contacts on the device."""
  adb_utils.clear_app_data("com.android.providers.contacts", env)


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from unittest import mock

from absl.testing import absltest
from android_env import env_interface
from android_world.utils import fake_adb_responses
from android_world.utils import file_utils


class FakeAdbResponsesTest(absltest.TestCase):

  def test_create_check_directory_exists_true_response(self):
    env = mock.create_autospec(env_interface.AndroidEnvInterface)

    env.execute_adb_call.return_value = (
        fake_adb_responses.create_check_directory_exists_response(exists=True)
    )

    self.assertTrue(file_utils.check_directory_exists("path", env))

  def test_create_check_directory_exists_false_response(self):
    env = mock.create_autospec(env_interface.AndroidEnvInterface)

    env.execute_adb_call.return_value = (
        fake_adb_responses.create_check_directory_exists_response(exists=False)
    )

    self.assertFalse(file_utils.check_directory_exists("path", env))

  def test_create_check_file_or_folder_exists_responses_exists(self):
    base_path = "/sdcard/FunStuff"
    file_name = "jokes.txt"
    env = mock.create_autospec(env_interface.AndroidEnvInterface)

    env.execute_adb_call.side_effect = (
        fake_adb_responses.create_check_file_or_folder_exists_responses(
            file_name=file_name, base_path=base_path, exists=True
        )
    )

    self.assertTrue(
        file_utils.check_file_or_folder_exists(file_name, base_path, env)
    )

  def test_create_check_file_or_folder_exists_responses_not_exists(self):
    base_path = "/sdcard/FunStuff"
    file_name = "jokes.txt"
    env = mock.create_autospec(env_interface.AndroidEnvInterface)

    env.execute_adb_call.side_effect = (
        fake_adb_responses.create_check_file_or_folder_exists_responses(
            file_name=file_name, base_path=base_path, exists=False
        )
    )

    self.assertFalse(
        file_utils.check_file_or_folder_exists(file_name, base_path, env)
    )

  def test_create_check_file_or_folder_exists_responses_different_file(self):
    base_path = "/sdcard/FunStuff"
    env = mock.create_autospec(env_interface.AndroidEnvInterface)

    env.execute_adb_call.side_effect = (
        fake_adb_responses.create_check_file_or_folder_exists_responses(
            file_name="jokes.txt", base_path=base_path, exists=True
        )
    )

    self.assertFalse(
        file_utils.check_file_or_folder_exists("puns.txt", base_path, env)
    )


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Mocks for agents."""

import random
import time
from typing import Any
from unittest import mock

from absl.testing import absltest
from android_env.proto import adb_pb2
from android_world.env import adb_utils
from android_world.env import android_world_controller
from android_world.env import interface
from android_world.env import json_action
from android_world.env import representation_utils
from android_world.task_evals import task_eval
from android_world.task_evals.common_validators import phone_validators
from android_world.task_evals.utils import user_data_generation
from android_world.utils import app_snapshot
from android_world.utils import contacts_utils
from android_world.utils import datetime_utils
from android_world.utils import file_utils
import numpy as np


class FakeCurrentStateEval(task_eval.TaskEval):
  """Fake current state eval for testing."""

  app_names = tuple()
  complexity = 1
  schema = {
      'type': 'object',
      'properties': {},
  }
  template = 'Current state eval'

  def is_successful(self, env: interface.AsyncEnv) -> float:
    return 1.0

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    return {'Number': random.randint(0, 100_000), 'seed': 123}


class FakeAdbEval(task_eval.TaskEval):
  """Fake adb eval for testing."""

  app_names = tuple()
  complexity = 1
  schema = {
      'type': 'object',
      'properties': {},
  }
  template = 'ADB eval'
  name = 'FakeAdbEval'

  def is_successful(self, env: interface.AsyncEnv) -> float:
    return 1.0

  @classmethod
  def generate_random_params(cls) -> dict[str, Any]:
    return {'Number': random.randint(0, 100_000), 'seed': 123}


class FakeMiniWobTask(FakeAdbEval):

  @property
  def goal(self) -> str:
    if not self.initialized:
      raise ValueError(
          'MiniWoB task must be initialized using initialize_task '
          'before the goal can be retrieved.'
      )
    return super().goal


class AdbEvalTestBase(absltest.TestCase):
  """A base test case class that mocks commonly used ADB utilities and Android interactions."""

  def setUp(self):
    super().setUp()
    self.mock_env = FakeAsyncEnv()
    self.mock_get_call_state = mock.patch.object(
        adb_utils, 'get_call_state'
    ).start()
    self.mock_get_current_activity = mock.patch.object(
        adb_utils, 'get_current_activity'
    ).start()
    self.mock_forest_to_ui_elements = mock.patch.object(
        representation_utils, 'forest_to_ui_elements'
    ).start()
    self.mock_get_a11y_tree = mock.patch.object(
        android_world_controller, 'get_a11y_tree'
    ).start()
    self.mock_dialer_with_phone_number = mock.patch.object(
        phone_validators, 'check_if_dialer_with_phone_number'
    ).start()
    self.mock_close_app = mock.patch.object(adb_utils, 'close_app').start()
    self.mock_close_recents = mock.patch.object(
        adb_utils, 'close_recents'
    ).start()
    self.mock_issue_generic_request = mock.patch.object(
        adb_utils, 'issue_generic_request'
    ).start()
    self.mock_execute_sql_command = mock.patch.object(
        adb_utils, 'execute_sql_command'
    ).start()
    self.mock_check_file_or_folder_exists = mock.patch.object(
        file_utils, 'check_file_or_folder_exists'
    ).start()
    self.mock_check_file_exists = mock.patch.object(
        file_utils, 'check_file_exists'
    ).start()
    self.mock_mkdir = mock.patch.object(file_utils, 'mkdir').start()
    self.mock_create_file = mock.patch.object(file_utils, 'create_file').start()
    self.mock_remove_single_file = mock.patch.object(
        file_utils, 'remove_single_file'
    ).start()
    self.mock_remove_files = mock.patch.object(
        file_utils, 'clear_directory'
    ).start()
    self.mock_copy_dir = mock.patch.object(file_utils, 'copy_dir').start()
    self.mock_create_random_files = mock.patch.object(
        user_data_generation, 'generate_noise_files'
    ).start()
    self.mock_get_file_list_with_metadata = mock.patch.object(
        file_utils, 'get_file_list_with_metadata'
    ).start()
    self.mock_get_clipboard_contents = mock.patch.object(
        adb_utils, 'get_clipboard_contents'
    ).start()
    self.mock_set_clipboard_contents = mock.patch.object(
        adb_utils, 'set_clipboard_contents'
    ).start()
    self.mock_toggle_airplane_mode = mock.patch.object(
        adb_utils, 'toggle_airplane_mode'
    ).start()
    self.mock_get_logical_screen_size = mock.patch.object(
        adb_utils, 'get_logical_screen_size'
    ).start()
    self.mock_get_physical_frame_boundary = mock.patch.object(
        adb_utils, 'get_physical_frame_boundary'
    ).start()
    self.mock_get_orientation = mock.patch.object(
        adb_utils, 'get_orientation'
    ).start()
    self.mock_set_datetime = mock.patch.object(
        datetime_utils, 'set_datetime'
    ).start()
    self.mock_set_datetime = mock.patch.object(
        datetime_utils, 'setup_datetime'
    ).start()
    self.mock_advance_system_time = mock.patch.object(
        datetime_utils, 'advance_system_time'
    ).start()
    self.mock_add_contact = mock.patch.object(
        contacts_utils, 'add_contact'
    ).start()
    self.mock_list_contacts = mock.patch.object(
        contacts_utils, 'list_contacts'
    ).start()
    self.mock_clear_contacts = mock.patch.object(
        contacts_utils, 'clear_contacts'
    ).start()
    self.mock_sleep = mock.patch.object(time, 'sleep').start()
    self.mock_restore_snapshot = mock.patch.object(
        app_snapshot, 'restore_snapshot'
    ).start()

  def tearDown(self):
    super().tearDown()
    mock.patch.stopall()


def log_mock_calls(mock_obj: Any):
  """Logs mock calls; useful for debugging."""
  original_side_effect = mock_obj.side_effect

  def side_effect(*args, **kwargs):
    print(f'Called with args={args}, kwargs={kwargs}')
    if callable(original_side_effect):
      return original_side_effect(*args, **kwargs)
    return next(original_side_effect)

  mock_obj.side_effect = side_effect


def perform_task(task: task_eval.TaskEval, env: interface.AsyncEnv) -> float:
  """Runs the setup, is_successful, and teardown and returns the result."""
  task.initialize_task(env)
  result = task.is_successful(env)
  task.tear_down(env)
  return result


class FakeAsyncEnv(interface.AsyncAndroidEnv):
  """Fake environment for testing."""

  def __init__(self):
    self._reset_called = True
    self._controller = mock.create_autospec(
        android_world_controller.AndroidWorldController, instance=True
    )

  @property
  def controller(self) -> android_world_controller.AndroidWorldController:
    return self._controller

  def reset(self, go_home: bool = False) -> interface.State:
    return interface.State(
        pixels=(np.random.rand(10, 10, 3) * 255).astype(np.uint8),
        forest=None,
        ui_elements=[],
    )

  def get_state(self, wait_to_stabilize: bool = False) -> interface.State:
    return interface.State(
        pixels=(np.random.rand(10, 10, 3) * 255).astype(np.uint8),
        forest=mock.MagicMock(),
        ui_elements=[],
    )

  def execute_action(self, action: json_action.JSONAction):
    del action

  def run_adb_command(self, command: str) -> adb_pb2.AdbResponse:
    del command
    return adb_pb2.AdbResponse()

  @property
  def foreground_activity_name(self) -> str:
    return 'MockActivity'

  @property
  def screen_size(self) -> tuple[int, int]:
    return (100, 100)

  @property
  def logical_screen_size(self) -> tuple[int, int]:
    return (100, 100)


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from unittest import mock

from absl.testing import absltest
from android_env import env_interface
from android_env.proto import adb_pb2
from android_world.env import actuation
from android_world.env import adb_utils
from android_world.utils import contacts_utils


@mock.patch.object(adb_utils, "issue_generic_request")
@mock.patch.object(actuation, "find_and_click_element")
class TestContactsUtils(absltest.TestCase):

  def test_add_contact(self, mock_click_element, mock_generic_request):
    """Test adding a contact."""
    mock_env = mock.create_autospec(env_interface.AndroidEnvInterface)

    phone_number = "+123456789"
    name = "Emma Watson"
    contacts_utils.add_contact(name, phone_number, mock_env)

    # Construct the expected adb command
    expected_adb_command = [
        "shell",
        (
            "am start -a android.intent.action.INSERT -t"
            f' vnd.android.cursor.dir/contact -e name "{name}" -e phone'
            f" {phone_number}"
        ),
    ]

    # Assert that the correct adb command was issued
    mock_generic_request.assert_called_once_with(expected_adb_command, mock_env)

    # Assert that the _click_element method was called with the correct argument
    mock_click_element.assert_called_once_with("SAVE", mock_env)

  def test_list_contacts(self, unused_mock_click_element, mock_generic_request):
    """Test listing all contacts."""
    mock_env = mock.create_autospec(env_interface.AndroidEnvInterface)
    adb_response = adb_pb2.AdbResponse()
    adb_response.generic.output = """
      Row: 0 display_name=Jane Doe, number=1 (234) 567-89
      Row: 0 display_name=Chen, number=98765
    """.encode("utf-8")
    mock_generic_request.return_value = adb_response

    contacts = contacts_utils.list_contacts(mock_env)

    self.assertEqual(
        contacts,
        [
            contacts_utils.Contact("Jane Doe", "123456789"),
            contacts_utils.Contact("Chen", "98765"),
        ],
    )

    # Construct the expected adb command
    expected_adb_command = [
        "shell",
        (
            "content query --uri content://contacts/phones/ --projection"
            " display_name:number"
        ),
    ]

    # Assert that the correct adb command was issued
    mock_generic_request.assert_called_once_with(expected_adb_command, mock_env)

  def test_clear_contacts(
      self, unused_mock_click_element, mock_generic_request
  ):
    """Test clearing all contacts."""
    mock_env = mock.create_autospec(env_interface.AndroidEnvInterface)

    contacts_utils.clear_contacts(mock_env)

    # Construct the expected adb command
    expected_adb_command = [
        "shell",
        "pm",
        "clear",
        "com.android.providers.contacts",
    ]

    # Assert that the correct adb command was issued
    mock_generic_request.assert_called_once_with(expected_adb_command, mock_env)


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Manages date and time settings on an Android device using ADB commands."""

import datetime
import enum
import random
import zoneinfo

from android_env import env_interface
from android_env.proto import adb_pb2
from android_world.env import adb_utils
from android_world.env import device_constants


def timestamp_to_localized_datetime(
    timestamp: int, timezone: str = device_constants.TIMEZONE
) -> datetime.datetime:
  """Converts a UNIX timestamp to a localized datetime object.

  Args:
    timestamp: The UNIX timestamp to convert.
    timezone: The timezone string to localize the datetime.

  Returns:
    A localized datetime object.
  """
  utc_dt = datetime.datetime.fromtimestamp(timestamp, tz=datetime.timezone.utc)
  localized_dt = utc_dt.astimezone(zoneinfo.ZoneInfo(timezone))
  return localized_dt


def _create_unix_ts(
    *,
    day: int,
    hour: int,
    month: int = device_constants.DT.month,
    year: int = device_constants.DT.year,
    timezone: str = device_constants.TIMEZONE,
) -> int:
  """Converts a year, month, day, and hour into a timestamp.

  Args:
    day: The day of the date.
    hour: The hour of the date.
    month: The month of the date.
    year: The year of the date.
    timezone: The timezone to use for the date. Defaults to
      device_constants.TIMEZONE.

  Returns:
    int: The timestamp corresponding to the input date and hour.
  """
  dt = datetime.datetime(year, month, day, hour)
  localized_dt = dt.replace(tzinfo=zoneinfo.ZoneInfo(timezone))
  result = int(localized_dt.timestamp())
  return result


def create_random_october_2023_unix_ts(
    start_day: int = device_constants.DT.day,
    end_day: int = 31,
    start_hour: int = 0,
) -> int:
  """Creates a random Unix timestamp in October 2023, the time period the device is set to.

  Args:
    start_day: The day to start in the random range.
    end_day: The day to end in the random range.
    start_hour: The hour to start in the random range; hour will be [start_hour,
      31]

  Returns:
    Unix timestamp.
  """
  return _create_unix_ts(
      day=random.randint(start_day, end_day),
      hour=random.randint(start_hour, 23),
      month=device_constants.DT.month,
      year=device_constants.DT.year,
      timezone=device_constants.TIMEZONE,
  )


class Toggle(enum.Enum):
  ON = '1'
  OFF = '0'


def toggle_auto_settings(
    env: env_interface.AndroidEnvInterface, toggle: Toggle
) -> None:
  """Disables the automatic date, time, and timezone settings.

  This is to maintain benchmark consistency and prevent external time updates.

  Args:
    env: AndroidEnv instance.
    toggle: Whether to enable or disable the settings.
  """
  adb_utils.put_settings(
      adb_pb2.AdbRequest.SettingsRequest.Namespace.GLOBAL,
      'auto_time',
      toggle.value,
      env,
  )
  adb_utils.put_settings(
      adb_pb2.AdbRequest.SettingsRequest.Namespace.GLOBAL,
      'auto_time_zone',
      toggle.value,
      env,
  )


def setup_datetime(env: env_interface.AndroidEnvInterface) -> None:
  """Prepares the Android device's date and time settings for benchmarking.

  This function should be called once before starting the benchmark tests. It
  disables automatic date, time, and timezone updates and sets the device to a
  24-hour time format. The purpose is to create a consistent environment for
  reproducible results.

  Args:
    env: AndroidEnv instance.
  """
  adb_utils.set_root_if_needed(env)
  toggle_auto_settings(env, Toggle.OFF)
  _enable_24_hour_format(env)
  _set_timezone_to_utc(env)


def set_datetime(
    env: env_interface.AndroidEnvInterface, dt: datetime.datetime
) -> None:
  """Configures the specific date and time for each task in the benchmark.

  This function should be called at the beginning of every task in the benchmark
  to set a specific date and time, ensuring consistency across repeated runs of
  the same task.

  Args:
    env: AndroidEnv instance.
    dt: The datetime to set the device to.
  """
  adb_utils.set_root_if_needed(env)
  _set_datetime(env, dt)


def advance_system_time(
    delta: datetime.timedelta,
    env: env_interface.AndroidEnvInterface,
) -> None:
  """Advance system time by a given time delta.

  Args:
    delta: Specify the amount of time to add to current time.
    env: AndroidEnv instance.
  """
  # Get current system time by parsing the output of running adb shell date
  # which looks like "Sun Oct 15 17:04:16 UTC 2023".
  current_time = datetime.datetime.strptime(
      adb_utils.issue_generic_request(
          ['shell', 'date'], env
      ).generic.output.decode().strip(),
      '%a %b %d %H:%M:%S %Z %Y',
  )

  # Set new system time.
  adb_utils.issue_generic_request(
      ['shell', 'date', (current_time + delta).strftime('%m%d%H%M%y.%S')], env
  )


def _enable_24_hour_format(env: env_interface.AndroidEnvInterface) -> None:
  """Sets to 24-hour time format to be consistent and region-independent."""
  adb_utils.put_settings(
      adb_pb2.AdbRequest.SettingsRequest.Namespace.SYSTEM,
      'time_12_24',
      '24',
      env,
  )


def _set_timezone_to_utc(env: env_interface.AndroidEnvInterface) -> None:
  """Sets the Android device's timezone to UTC.

  Args:
      env: An instance of AndroidEnv interface.
  """
  adb_command = ['shell', 'service', 'call', 'alarm', '3', 's16', 'UTC']
  adb_utils.issue_generic_request(adb_command, env)


def _set_datetime(
    env: env_interface.AndroidEnvInterface, dt: datetime.datetime
) -> None:
  """Sets the date and time on the Android device."""
  adb_utils.issue_generic_request(
      ['shell', 'date', dt.strftime('%m%d%H%M%y.%S')], env
  )


def generate_random_datetime(
    window_size: datetime.timedelta = datetime.timedelta(days=14),
    window_center: datetime.datetime = device_constants.DT,
) -> datetime.datetime:
  """Generates a random datetime within the given window.

  The window that the generated datetime is taken from is centered on
  device_constants.DT (= today) and is of length window_size.

  Args:
    window_size: The window size to generate a random datetime for.
    window_center: The center of the window to generate a random datetime for.

  Returns:
    A random datetime within the specified window.
  """
  start = window_center - (window_size / 2)
  return start + datetime.timedelta(
      minutes=random.randrange(window_size.days * 24 * 60)
  )


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Utils for handling snapshots for apps."""

import os

from absl import logging
from android_env import env_interface
from android_world.env import adb_utils
from android_world.env import device_constants
from android_world.utils import file_utils


def _app_data_path(app_name: str) -> str:
  package_name = adb_utils.extract_package_name(
      adb_utils.get_adb_activity(app_name)
  )
  return os.path.join("/data/data/", package_name)


def _snapshot_path(app_name: str) -> str:
  package_name = adb_utils.extract_package_name(
      adb_utils.get_adb_activity(app_name)
  )
  return os.path.join(device_constants.SNAPSHOT_DATA, package_name)


def clear_snapshot(
    app_name: str,
    env: env_interface.AndroidEnvInterface,
):
  """Removes the stored snapshot of app state.

  Args:
    app_name: Package name for the application snapshot to remove.
    env: Android environment.
  """
  snapshot_path = _snapshot_path(app_name)
  file_utils.clear_directory(snapshot_path, env)


def save_snapshot(app_name: str, env: env_interface.AndroidEnvInterface):
  """Stores a snapshot of application data on the device.

  Only a single snapshot is stored at any given time. Repeated calls to
  `save_snapshot()` overwrite any prior snapshot.

  Args:
    app_name: App package to be snapshotted.
    env: Android environment.

  Raises:
    RuntimeError: on failed or incomplete snapshot.
  """
  snapshot_path = _snapshot_path(app_name)
  try:
    file_utils.clear_directory(snapshot_path, env)
  except RuntimeError:
    logging.warn(
        "Continuing to save %s snapshot after failing to clear prior snapshot.",
        app_name,
    )

  file_utils.copy_dir(_app_data_path(app_name), snapshot_path, env)


def restore_snapshot(app_name: str, env: env_interface.AndroidEnvInterface):
  """Loads a snapshot of application data.

  Args:
    app_name: App package that will have its data overwritten with the stored
      snapshot.
    env: Android environment.

  Raises:
    RuntimeError: when there is no available snapshot or a failure occurs while
      loading the snapshot.
  """
  adb_utils.close_app(app_name, env)

  snapshot_path = _snapshot_path(app_name)
  if not file_utils.check_directory_exists(snapshot_path, env):
    raise RuntimeError(f"Snapshot not found in {snapshot_path}.")

  app_data_path = _app_data_path(app_name)
  try:
    file_utils.clear_directory(app_data_path, env)
  except RuntimeError:
    logging.warn(
        "Continuing to restore %s snapshot after failing to clear application"
        " data.",
        app_name,
    )

  file_utils.copy_dir(snapshot_path, app_data_path, env)

  # File permissions, ownership, and security context may be lost during save
  # and/or loading of the snapshot. As a workaround, restore the security
  # context and open up full file permissions.
  adb_utils.check_ok(
      adb_utils.issue_generic_request(
          ["shell", "restorecon", "-RD", app_data_path], env
      ),
      "Failed to restore app data security context.",
  )
  adb_utils.check_ok(
      adb_utils.issue_generic_request(
          ["shell", "chmod", "777", "-R", app_data_path], env
      ),
      "Failed to set app data permissions.",
  )


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import datetime
from unittest import mock
import zoneinfo

from absl.testing import absltest
from absl.testing import parameterized
from android_env import env_interface
from android_env.proto import adb_pb2
from android_world.env import adb_utils
from android_world.utils import datetime_utils


@mock.patch.object(adb_utils, 'issue_generic_request')
class AdbDatetimeManagerTest(absltest.TestCase):

  @mock.patch.object(adb_utils, 'put_settings')
  def test_setup_datetime_environment(
      self, mock_put_settings, unused_mock_issue_generic_request
  ):
    env_mock = mock.create_autospec(env_interface.AndroidEnvInterface)

    datetime_utils.setup_datetime(env_mock)

    expected_calls = [
        mock.call(
            adb_pb2.AdbRequest.SettingsRequest.Namespace.GLOBAL,
            'auto_time',
            '0',
            env_mock,
        ),
        mock.call(
            adb_pb2.AdbRequest.SettingsRequest.Namespace.GLOBAL,
            'auto_time_zone',
            '0',
            env_mock,
        ),
        mock.call(
            adb_pb2.AdbRequest.SettingsRequest.Namespace.SYSTEM,
            'time_12_24',
            '24',
            env_mock,
        ),
    ]
    mock_put_settings.assert_has_calls(expected_calls, any_order=False)

  def test_advance_system_time(self, mock_issue_generic_request):
    env_mock = mock.create_autospec(env_interface.AndroidEnvInterface)
    mock_issue_generic_request.return_value = adb_pb2.AdbResponse(
        status=adb_pb2.AdbResponse.Status.OK,
        generic=adb_pb2.AdbResponse.GenericResponse(
            output=bytes('Sun Oct 15 17:04:16 UTC 2023\n', 'utf-8')
        ),
    )
    datetime_utils.advance_system_time(datetime.timedelta(hours=2), env_mock)
    mock_issue_generic_request.assert_has_calls([
        mock.call(['shell', 'date'], env_mock),
        mock.call(['shell', 'date', '1015190423.16'], env_mock),
    ])


class DateTimeUtilsTest(parameterized.TestCase):

  @parameterized.named_parameters(
      (
          'UTC_test',
          'UTC',
          datetime.datetime(
              2023, 11, 15, 23, 12, 0, tzinfo=zoneinfo.ZoneInfo('UTC')
          ),
      ),
      (
          'NYC_test',
          'America/New_York',
          datetime.datetime(
              2023,
              11,
              15,
              18,
              12,
              0,
              tzinfo=zoneinfo.ZoneInfo('America/New_York'),
          ),
      ),
  )
  def test_correct_conversion(
      self, timezone: str, expected_dt: datetime.datetime
  ):
    """Test if UNIX timestamps are correctly converted to localized datetime."""
    timestamp = 1700089920  # UST: Nov 15, 2023, 23:12:00
    result = datetime_utils.timestamp_to_localized_datetime(timestamp, timezone)
    self.assertEqual(result, expected_dt)

  def test_invalid_timezone(self):
    """Test behavior with invalid timezone strings."""
    timestamp = 1609459200
    with self.assertRaises(zoneinfo.ZoneInfoNotFoundError):
      datetime_utils.timestamp_to_localized_datetime(
          timestamp, 'invalid_timezone'
      )


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Utils for testing file util logic."""

import contextlib
import os
import shutil
import tempfile

from android_env import env_interface


@contextlib.contextmanager
def mock_tmp_directory_from_device(
    device_path: str,
    env: env_interface.AndroidEnvInterface,
    timeout_sec: float | None,
):
  """Mocks `file_utils.tmp_directory_from_device` for unit testing."""
  del env, timeout_sec
  with tempfile.TemporaryDirectory() as tmp_dir:
    parent_dir = os.path.join(
        tmp_dir, os.path.split(os.path.split(device_path)[0])[1]
    )
    try:
      shutil.copytree(device_path, parent_dir)
      yield parent_dir

    finally:
      shutil.rmtree(parent_dir)


def mock_copy_data_to_device(
    local_db_path: str,
    remote_db_path: str,
    env: env_interface.AndroidEnvInterface,
    timeout_sec: float | None = None,
):
  """Mocks the behavior of file_utils.copy_data_to_device for testing purposes.

  This mock function will copy the database file from a local directory to
  the simulated remote directory.

  Args:
    local_db_path: The path to the local SQLite database file.
    remote_db_path: The file path on the simulated remote device.
    env: The Android environment interface (unused in the mock).
    timeout_sec: Optional timeout in seconds (unused in the mock).
  """
  del env, timeout_sec
  os.makedirs(os.path.dirname(remote_db_path), exist_ok=True)
  shutil.copy(local_db_path, remote_db_path)


def mock_remove_files(directory: str, env: env_interface.AndroidEnvInterface):
  """Mocks the behavior of file_utils.remove_files for testing purposes.

  This mock function simulates removing all files in the specified directory.

  Args:
    directory: The directory path from which to remove files.
    env: The Android environment interface (unused in the mock).
  """
  del env
  for filename in os.listdir(directory):
    file_path = os.path.join(directory, filename)
    if os.path.isfile(file_path) or os.path.islink(file_path):
      os.unlink(file_path)
    elif os.path.isdir(file_path):
      shutil.rmtree(file_path)


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from unittest import mock

from absl.testing import absltest
from android_world.agents import seeact
from android_world.agents import seeact_utils
from android_world.env import actuation
from android_world.env import interface
from android_world.env import representation_utils


class TestSeeAct(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.mock_env = mock.create_autospec(interface.AsyncEnv)
    self.seeact = seeact.SeeAct(self.mock_env)
    self.mock_execute_openai_request = mock.patch.object(
        seeact_utils, 'execute_openai_request'
    ).start()
    mock.patch.object(seeact_utils, 'create_grounding_messages_payload').start()
    mock.patch.object(
        seeact_utils, 'create_action_generation_messages_payload'
    ).start()
    mock.patch.object(actuation, 'execute_adb_action').start()

  def tearDown(self):
    super().tearDown()
    mock.patch.stopall()

  def test_step(self):
    mock_action_gen_response_1 = {
        'choices': [{'message': {'content': 'Generated action 1'}}]
    }
    mock_action_ground_response_1 = {
        'choices': [
            {'message': {'content': 'ELEMENT: A\nACTION: CLICK\nVALUE: None'}}
        ]
    }

    mock_action_gen_response_2 = {
        'choices': [{'message': {'content': 'Generated action 2'}}]
    }
    mock_action_ground_response_2 = {
        'choices': [{
            'message': {
                'content': 'ELEMENT: None\nACTION: TERMINATE\nVALUE: None'
            }
        }]
    }

    self.mock_execute_openai_request.side_effect = [
        mock_action_gen_response_1,
        mock_action_ground_response_1,
        mock_action_gen_response_2,
        mock_action_ground_response_2,
    ]

    mock_ui_elements = [
        representation_utils.UIElement(
            text=None,
            content_description='AnImage',
            class_name='android.widget.ImageView',
        ),
        representation_utils.UIElement(
            text='Unchecked',
            class_name='android.widget.CheckBox',
            is_checked=False,
        ),
    ]
    self.mock_env.get_state.return_value.ui_elements = mock_ui_elements

    goal = 'Test goal'
    result = self.seeact.step(goal)
    done = result.done
    result_1 = result.data

    self.assertFalse(done)
    self.assertEqual(result_1['ui_elements'], mock_ui_elements)
    self.assertEqual(
        result_1['actionable_elements'][0].description,
        '"AnImage" image',
    )
    self.assertEqual(
        result_1['actionable_elements'][1].description,
        'a checkbox with the text "Unchecked" that is not checked',
    )
    self.assertEqual(result_1['action_gen_response'], 'Generated action 1')
    self.assertEqual(
        result_1['action_ground_response'],
        'ELEMENT: A\nACTION: CLICK\nVALUE: None',
    )
    self.assertIsInstance(result_1['seeact_action'], seeact_utils.SeeActAction)
    self.assertEqual(result_1['seeact_action'].action, 'CLICK')
    self.assertEqual(result_1['seeact_action'].element, 'A')
    self.assertEqual(result_1['seeact_action'].value, 'None')
    self.assertEqual(result_1['action_description'], '"AnImage" image -> CLICK')
    self.assertEqual(result_1['action'].action_type, 'click')
    self.assertEqual(result_1['action'].index, 0)
    self.assertEqual(self.seeact._actions, ['"AnImage" image -> CLICK'])

    result = self.seeact.step(goal)
    done = result.done
    result_2 = result.data

    self.assertTrue(done)
    self.assertEqual(result_2['ui_elements'], mock_ui_elements)
    self.assertEqual(
        result_2['actionable_elements'][0].description, '"AnImage" image'
    )
    self.assertEqual(
        result_2['actionable_elements'][1].description,
        'a checkbox with the text "Unchecked" that is not checked',
    )
    self.assertEqual(result_2['action_gen_response'], 'Generated action 2')
    self.assertEqual(
        result_2['action_ground_response'],
        'ELEMENT: None\nACTION: TERMINATE\nVALUE: None',
    )
    self.assertIsInstance(result_2['seeact_action'], seeact_utils.SeeActAction)
    self.assertEqual(result_2['seeact_action'].action, 'TERMINATE')
    self.assertIsNone(result_2['seeact_action'].element)
    self.assertEqual(result_2['seeact_action'].value, 'None')
    self.assertEqual(result_2['action_description'], 'TERMINATE')
    self.assertEqual(result_2['action'].action_type, 'status')
    self.assertEqual(result_2['action'].goal_status, 'task_complete')
    self.assertEqual(
        self.seeact._actions, ['"AnImage" image -> CLICK', 'TERMINATE']
    )


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from absl.testing import absltest
from android_world.agents import seeact_utils
from android_world.env import json_action
from android_world.env import representation_utils


class TestGenerateActionGenerationPrompt(absltest.TestCase):

  def test_generate_action_generation_prompt(self):
    task = "Test task"
    question_description = "Test question"
    previous_actions = ["Element A -> CLICK", "TERMINATE"]
    expected_prompt = (
        "You are asked to complete the following task: Test task\n\n"
        "Previous Actions:\n"
        "Element A -> CLICK\n"
        "TERMINATE\n\n"
        "Test question"
    )
    actual_prompt = seeact_utils.generate_action_generation_prompt(
        task, question_description, previous_actions
    )
    self.assertEqual(actual_prompt, expected_prompt)


class TestExtractText(absltest.TestCase):

  def test_extract_text_with_valid_value(self):
    self.assertEqual(
        seeact_utils._extract_text("  Hello, World!  "), "Hello, World!"
    )

  def test_extract_text_with_none_value(self):
    self.assertIsNone(seeact_utils._extract_text(None))

  def test_extract_text_with_none_string(self):
    self.assertIsNone(seeact_utils._extract_text("None"))


class TestExtractElementActionValue(absltest.TestCase):

  def test_extract_element_action_value_with_valid_lines(self):
    lines = ["ELEMENT: A", "ACTION: INPUT TEXT", "VALUE: Hello, World!"]
    expected_result = seeact_utils.SeeActAction(
        element="A", action="INPUT TEXT", value="Hello, World!"
    )
    self.assertEqual(
        seeact_utils.extract_element_action_value(lines), expected_result
    )

  def test_extract_element_action_value_with_missing_element(self):
    lines = ["ACTION: INPUT TEXT", "VALUE: Hello, World!"]
    with self.assertRaisesRegex(
        ValueError, "ELEMENT is required for INPUT TEXT action"
    ):
      seeact_utils.extract_element_action_value(lines)

  def test_extract_element_action_value_with_missing_value(self):
    lines = ["ELEMENT: A", "ACTION: INPUT TEXT"]
    with self.assertRaisesRegex(
        ValueError, "VALUE is required for INPUT TEXT action"
    ):
      seeact_utils.extract_element_action_value(lines)

  def test_extract_element_action_value_with_invalid_action(self):
    lines = ["ELEMENT: A", "ACTION: INVALID_ACTION", "VALUE: Hello, World!"]
    with self.assertRaisesRegex(ValueError, "Invalid action: INVALID_ACTION"):
      seeact_utils.extract_element_action_value(lines)

  def test_extract_element_action_value_with_missing_input_text_value(self):
    lines = ["ELEMENT: A", "ACTION: INPUT TEXT"]
    with self.assertRaisesRegex(
        ValueError, "VALUE is required for INPUT TEXT action"
    ):
      seeact_utils.extract_element_action_value(lines)

  def test_extract_element_action_value_with_missing_input_text_element(self):
    lines = ["ACTION: INPUT TEXT", "VALUE: Hello, World!"]
    with self.assertRaisesRegex(
        ValueError, "ELEMENT is required for INPUT TEXT action"
    ):
      seeact_utils.extract_element_action_value(lines)

  def test_extract_element_action_value_with_invalid_scroll_value(self):
    lines = ["ACTION: SWIPE", "VALUE: invalid_direction"]
    with self.assertRaisesRegex(
        seeact_utils.ParseActionError,
        'Invalid VALUE "invalid_direction" for SWIPE action; must be up, down,'
        " left, or right.",
    ):
      seeact_utils.extract_element_action_value(lines)

  def test_extract_element_action_value_with_missing_open_app_value(self):
    lines = ["ACTION: OPEN APP"]
    with self.assertRaisesRegex(
        ValueError, "VALUE is required for OPEN APP action"
    ):
      seeact_utils.extract_element_action_value(lines)

  def test_extract_element_action_value_with_missing_answer_value(self):
    lines = ["ACTION: ANSWER"]
    with self.assertRaisesRegex(
        ValueError, "VALUE is required for ANSWER action"
    ):
      seeact_utils.extract_element_action_value(lines)

  def test_extract_element_action_value_with_missing_click_element(self):
    lines = ["ACTION: CLICK", "VALUE: None"]
    with self.assertRaisesRegex(
        ValueError, "ELEMENT is required for CLICK action"
    ):
      seeact_utils.extract_element_action_value(lines)

  def test_extract_element_action_value_with_missing_long_press_element(self):
    lines = ["ACTION: LONG PRESS", "VALUE: None"]
    with self.assertRaisesRegex(
        ValueError, "ELEMENT is required for LONG PRESS action"
    ):
      seeact_utils.extract_element_action_value(lines)

  def test_extract_element_action_value_with_invalid_click_value(self):
    lines = ["ELEMENT: A", "ACTION: CLICK", "VALUE: Invalid"]
    with self.assertRaisesRegex(
        ValueError, "VALUE should be 'None' for CLICK action"
    ):
      seeact_utils.extract_element_action_value(lines)

  def test_extract_element_action_value_with_invalid_long_press_value(self):
    lines = ["ELEMENT: A", "ACTION: LONG PRESS", "VALUE: Invalid"]
    with self.assertRaisesRegex(
        ValueError, "VALUE should be 'None' for LONG PRESS action"
    ):
      seeact_utils.extract_element_action_value(lines)


class TestFormatAndFilterElements(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.ui_elements = [
        representation_utils.UIElement(
            text="Button 1", class_name="android.widget.Button"
        ),
        representation_utils.UIElement(
            text=None,
            content_description="AnImage",
            class_name="android.widget.ImageView",
        ),
        representation_utils.UIElement(
            text="Layout", class_name="android.widget.LinearLayout"
        ),
        representation_utils.UIElement(
            text="Unchecked",
            class_name="android.widget.CheckBox",
            is_checked=False,
        ),
        representation_utils.UIElement(
            text="Checked",
            class_name="android.widget.CheckBox",
            is_checked=True,
        ),
        representation_utils.UIElement(
            text="Selected",
            class_name="android.widget.RadioButton",
            is_checked=True,
        ),
        representation_utils.UIElement(
            text="abc", class_name="android.widget.Switch", is_checked=True
        ),
    ]

  def test_format_and_filter_elements(self):
    expected_output = [
        '"Button 1" button',
        '"AnImage" image',
        '"Layout" icon',
        'a checkbox with the text "Unchecked" that is not checked',
        'a checkbox with the text "Checked" that is checked',
        'a radio button with the text "Selected" that is selected',
        'a switch with the text "abc" that is checked',
    ]

    ui_elements = seeact_utils.format_and_filter_elements(self.ui_elements)
    descriptions = [e.description for e in ui_elements]

    self.assertEqual(
        descriptions,
        expected_output,
    )

  def test_empty_input(self):
    self.assertEqual(
        seeact_utils.format_and_filter_elements([]),
        [],
    )

  def test_no_class_name(self):
    no_class_element = representation_utils.UIElement(
        class_name=None, text="some text"
    )
    self.assertEqual(
        seeact_utils.format_and_filter_elements([no_class_element]),
        [],
    )


class TestGenerateActionDescription(absltest.TestCase):

  def test_click_action(self):
    action = seeact_utils.SeeActAction(action="CLICK", value="")
    element = seeact_utils.SeeActElement(description="button")
    expected = "button -> CLICK"
    self.assertEqual(
        seeact_utils.generate_action_description(action, element), expected
    )

  def test_input_text_action(self):
    action = seeact_utils.SeeActAction(action="INPUT TEXT", value="Hello World")
    element = seeact_utils.SeeActElement(description="search bar")
    expected = "search bar -> INPUT TEXT: Hello World"
    self.assertEqual(
        seeact_utils.generate_action_description(action, element), expected
    )

  def test_open_app_action(self):
    action = seeact_utils.SeeActAction(action="OPEN APP", value="Maps")
    element = seeact_utils.SeeActElement(description="app drawer")
    expected = "OPEN APP: Maps"
    self.assertEqual(
        seeact_utils.generate_action_description(action, element), expected
    )

  def test_long_press_action(self):
    action = seeact_utils.SeeActAction(action="LONG PRESS", value="")
    element = seeact_utils.SeeActElement(description="image")
    expected = "image -> LONG PRESS"
    self.assertEqual(
        seeact_utils.generate_action_description(action, element), expected
    )

  def test_navigate_home_action(self):
    action = seeact_utils.SeeActAction(action="NAVIGATE HOME", value="")
    element = seeact_utils.SeeActElement(description="None")
    expected = "NAVIGATE HOME"
    self.assertEqual(
        seeact_utils.generate_action_description(action, element), expected
    )

  def test_keyboard_enter_action(self):
    action = seeact_utils.SeeActAction(action="KEYBOARD ENTER", value="")
    element = seeact_utils.SeeActElement(description="None")
    expected = "KEYBOARD ENTER"
    self.assertEqual(
        seeact_utils.generate_action_description(action, element), expected
    )

  def test_navigate_back_action(self):
    action = seeact_utils.SeeActAction(action="NAVIGATE BACK", value="")
    element = seeact_utils.SeeActElement(description="None")
    expected = "NAVIGATE BACK"
    self.assertEqual(
        seeact_utils.generate_action_description(action, element), expected
    )

  def test_scroll_action(self):
    action = seeact_utils.SeeActAction(action="SWIPE", value="down")
    element = None
    expected = "SWIPE: down"
    self.assertEqual(
        seeact_utils.generate_action_description(action, element), expected
    )

  def test_scroll_action_with_target(self):
    action = seeact_utils.SeeActAction(action="SWIPE", value="down")
    element = seeact_utils.SeeActElement(description="app drawer")
    expected = "app drawer -> SWIPE: down"
    self.assertEqual(
        seeact_utils.generate_action_description(action, element), expected
    )

  def test_terminate_action(self):
    action = seeact_utils.SeeActAction(action="TERMINATE", value="")
    element = seeact_utils.SeeActElement(description="None")
    expected = "TERMINATE"
    self.assertEqual(
        seeact_utils.generate_action_description(action, element), expected
    )

  def test_answer_action(self):
    action = seeact_utils.SeeActAction(action="ANSWER", value="42")
    element = seeact_utils.SeeActElement(description="None")
    expected = "ANSWER: 42"
    self.assertEqual(
        seeact_utils.generate_action_description(action, element), expected
    )


class TestConvertSeeActActionToJSONAction(absltest.TestCase):

  def test_click_action_with_valid_element(self):
    action = seeact_utils.SeeActAction(action="CLICK", element="B")
    elements = [
        seeact_utils.SeeActElement(
            description="Button 1", abc_index="A", index=0
        ),
        seeact_utils.SeeActElement(
            description="Button 2", abc_index="B", index=1
        ),
    ]
    expected_json_action = json_action.JSONAction(action_type="click", index=1)

    result = seeact_utils.convert_seeact_action_to_json_action(action, elements)

    self.assertEqual(result, expected_json_action)

  def test_click_action_with_invalid_element(self):
    action = seeact_utils.SeeActAction(action="CLICK", element="D")
    elements = [
        seeact_utils.SeeActElement(
            description="Button 1", abc_index="A", index=0
        ),
        seeact_utils.SeeActElement(
            description="Button 2", abc_index="B", index=1
        ),
    ]

    with self.assertRaisesRegex(
        seeact_utils.ParseActionError,
        "Action type is click, but received no target element or"
        " incorrect target element.",
    ):
      seeact_utils.convert_seeact_action_to_json_action(action, elements)

  def test_long_press_action_with_valid_element(self):
    action = seeact_utils.SeeActAction(action="LONG PRESS", element="A")
    elements = [
        seeact_utils.SeeActElement(
            description="Button 1", abc_index="A", index=0
        ),
        seeact_utils.SeeActElement(
            description="Button 2", abc_index="B", index=1
        ),
    ]
    expected_json_action = json_action.JSONAction(
        action_type="long_press", index=0
    )

    result = seeact_utils.convert_seeact_action_to_json_action(action, elements)

    self.assertEqual(result, expected_json_action)

  def test_input_text_action_with_valid_element(self):
    action = seeact_utils.SeeActAction(
        action="INPUT TEXT", element="B", value="Hello, world!"
    )
    elements = [
        seeact_utils.SeeActElement(
            description="Input 1", abc_index="A", index=0
        ),
        seeact_utils.SeeActElement(
            description="Input 2", abc_index="B", index=1
        ),
    ]
    expected_json_action = json_action.JSONAction(
        action_type="input_text", index=1, text="Hello, world!"
    )

    result = seeact_utils.convert_seeact_action_to_json_action(action, elements)

    self.assertEqual(result, expected_json_action)

  def test_terminate_action(self):
    action = seeact_utils.SeeActAction(action="TERMINATE")
    elements = []
    expected_json_action = json_action.JSONAction(
        action_type="status", goal_status="task_complete"
    )

    result = seeact_utils.convert_seeact_action_to_json_action(action, elements)

    self.assertEqual(result, expected_json_action)

  def test_answer_action(self):
    action = seeact_utils.SeeActAction(action="ANSWER", value="42")
    elements = []
    expected_json_action = json_action.JSONAction(
        action_type="answer", text="42"
    )

    result = seeact_utils.convert_seeact_action_to_json_action(action, elements)

    self.assertEqual(result, expected_json_action)

  def test_scroll_action(self):
    action = seeact_utils.SeeActAction(action="SWIPE", value="up")
    elements = []
    expected_json_action = json_action.JSONAction(
        action_type="scroll", direction="down"
    )

    result = seeact_utils.convert_seeact_action_to_json_action(action, elements)

    self.assertEqual(result, expected_json_action)


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Base agent."""

import abc
import dataclasses
import time
from typing import Any

from android_world.env import interface


@dataclasses.dataclass()
class AgentInteractionResult:
  """Result of a single agent interaction with the environment.

  Attributes:
    done: Whether the agent indicates the entire session is done; i.e. this is
      the last interaction with the environment and the session will terminate.
    data: Environment and agent data from interaction.
  """

  done: bool
  data: dict[str, Any]


class EnvironmentInteractingAgent(abc.ABC):
  """Base class for an agent that directly interacts with and acts on the environment.

  This class provides flexibility in agent design, allowing developers to define
  custom action spaces and interaction methods without being confined to a
  specific approach.
  """

  def __init__(
      self,
      env: interface.AsyncEnv,
      name: str = '',
      transition_pause: float | None = 1.0,
  ):
    """Initializes the agent.

    Args:
      env: The environment.
      name: The agent name.
      transition_pause: The pause before grabbing the state. This is required
        because typically the agent is grabbing state immediatley after an
        action and the screen is still changing. If `None` is provided, then it
        uses "auto" mode which dynamically adjusts the wait time based on
        environmental feedback.

    Raises:
      ValueError: If the transition pause is negative.
    """
    self._env = env
    self._name = name
    if transition_pause is not None and transition_pause < 0:
      raise ValueError(
          f'transition_pause must be non-negative, got {transition_pause}'
      )
    self._transition_pause = transition_pause

  @property
  def transition_pause(self) -> float | None:
    return self._transition_pause

  @transition_pause.setter
  def transition_pause(self, transition_pause: float | None) -> None:
    self._transition_pause = transition_pause

  @property
  def env(self) -> interface.AsyncEnv:
    return self._env

  @env.setter
  def env(self, env: interface.AsyncEnv) -> None:
    self._env = env

  def reset(self, go_home: bool = False) -> None:
    """Resets the agent."""
    self.env.reset(go_home=go_home)

  def get_post_transition_state(self) -> interface.State:
    """Convenience function to get the agent state after the transition."""
    if self._transition_pause is None:
      print(
          'Waiting for screen to stabilize before grabbing state...',
          end=' ',
      )
      start = time.time()
      state = self.env.get_state(wait_to_stabilize=True)
      print(f'Fetched after {time.time() - start:2.1f} seconds.')
      return state
    else:
      time.sleep(self._transition_pause)
      print(
          'Pausing {:2.1f} seconds before grabbing state.'.format(
              self._transition_pause
          )
      )
      return self.env.get_state(wait_to_stabilize=False)

  @abc.abstractmethod
  def step(self, goal: str) -> AgentInteractionResult:
    """Performs a step of the agent on the environment.

    Args:
      goal: The goal.

    Returns:
      Done and agent & observation data.
    """

  @property
  def name(self) -> str:
    return self._name

  @name.setter
  def name(self, name: str) -> None:
    self._name = name


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Utils for M3A."""

import base64
import re
from typing import Any, Optional
from android_world.env import representation_utils
import cv2
import numpy as np


def _logical_to_physical(
    logical_coordinates: tuple[int, int],
    logical_screen_size: tuple[int, int],
    physical_frame_boundary: tuple[int, int, int, int],
    orientation: int,
) -> tuple[int, int]:
  """Convert logical coordinates to physical coordinates.

  Args:
    logical_coordinates: The logical coordinates for the point.
    logical_screen_size: The logical screen size.
    physical_frame_boundary: The physical coordinates in portrait orientation
      for the upper left and lower right corner for the frame.
    orientation: The current screen orientation.

  Returns:
    The physical coordinate for the point in portrait orientation.

  Raises:
    ValueError: If the orientation is not valid.
  """
  x, y = logical_coordinates
  px0, py0, px1, py1 = physical_frame_boundary
  px, py = px1 - px0, py1 - py0
  lx, ly = logical_screen_size
  if orientation == 0:
    return (int(x * px / lx) + px0, int(y * py / ly) + py0)
  if orientation == 1:
    return (px - int(y * px / ly) + px0, int(x * py / lx) + py0)
  if orientation == 2:
    return (px - int(x * px / lx) + px0, py - int(y * py / ly) + py0)
  if orientation == 3:
    return (int(y * px / ly) + px0, py - int(x * py / lx) + py0)
  print('Invalid orientation.')
  raise ValueError('Unsupported orientation.')


def _ui_element_logical_corner(
    ui_element: representation_utils.UIElement, orientation: int
) -> list[tuple[int, int]]:
  """Get logical coordinates for corners of a given UI element.

  Args:
    ui_element: The corresponding UI element.
    orientation: The current orientation.

  Returns:
    Logical coordinates for upper left and lower right corner for the UI
    element.

  Raises:
    ValueError: If bounding box is missing.
    ValueError: If orientation is not valid.
  """
  if ui_element.bbox_pixels is None:
    raise ValueError('UI element does not have bounding box.')
  if orientation == 0:
    return [
        (int(ui_element.bbox_pixels.x_min), int(ui_element.bbox_pixels.y_min)),
        (int(ui_element.bbox_pixels.x_max), int(ui_element.bbox_pixels.y_max)),
    ]
  if orientation == 1:
    return [
        (int(ui_element.bbox_pixels.x_min), int(ui_element.bbox_pixels.y_max)),
        (int(ui_element.bbox_pixels.x_max), int(ui_element.bbox_pixels.y_min)),
    ]
  if orientation == 2:
    return [
        (int(ui_element.bbox_pixels.x_max), int(ui_element.bbox_pixels.y_max)),
        (int(ui_element.bbox_pixels.x_min), int(ui_element.bbox_pixels.y_min)),
    ]
  if orientation == 3:
    return [
        (int(ui_element.bbox_pixels.x_max), int(ui_element.bbox_pixels.y_min)),
        (int(ui_element.bbox_pixels.x_min), int(ui_element.bbox_pixels.y_max)),
    ]
  raise ValueError('Unsupported orientation.')


def add_ui_element_mark(
    screenshot: np.ndarray,
    ui_element: representation_utils.UIElement,
    index: int,
    logical_screen_size: tuple[int, int],
    physical_frame_boundary: tuple[int, int, int, int],
    orientation: int,
):
  """Add mark (a bounding box plus index) for a UI element in the screenshot.

  Args:
    screenshot: The screenshot as a numpy ndarray.
    ui_element: The UI element to be marked.
    index: The numeric index for the UI element.
    logical_screen_size: The logical screen size.
    physical_frame_boundary: The physical coordinates in portrait orientation
      for the upper left and lower right corner for the frame.
    orientation: The current screen orientation.
  """
  if ui_element.bbox_pixels:
    upper_left_logical, lower_right_logical = _ui_element_logical_corner(
        ui_element, orientation
    )
    upper_left_physical = _logical_to_physical(
        upper_left_logical,
        logical_screen_size,
        physical_frame_boundary,
        orientation,
    )
    lower_right_physical = _logical_to_physical(
        lower_right_logical,
        logical_screen_size,
        physical_frame_boundary,
        orientation,
    )

    cv2.rectangle(
        screenshot,
        upper_left_physical,
        lower_right_physical,
        color=(0, 255, 0),
        thickness=2,
    )
    screenshot[
        upper_left_physical[1] + 1 : upper_left_physical[1] + 25,
        upper_left_physical[0] + 1 : upper_left_physical[0] + 35,
        :,
    ] = (255, 255, 255)
    cv2.putText(
        screenshot,
        str(index),
        (
            upper_left_physical[0] + 1,
            upper_left_physical[1] + 20,
        ),
        cv2.FONT_HERSHEY_SIMPLEX,
        0.7,
        (0, 0, 0),
        thickness=2,
    )


def add_screenshot_label(screenshot: np.ndarray, label: str):
  """Add a text label to the right bottom of the screenshot.

  Args:
    screenshot: The screenshot as a numpy ndarray.
    label: The text label to add, just a single word.
  """
  height, width, _ = screenshot.shape
  screenshot[height - 30 : height, width - 150 : width, :] = (255, 255, 255)
  cv2.putText(
      screenshot,
      label,
      (width - 120, height - 5),
      cv2.FONT_HERSHEY_SIMPLEX,
      1,
      (0, 0, 0),
      thickness=2,
  )


def encode_image_for_html(image: np.ndarray) -> str:
  """Encode image in numpy ndarray to html string with correct color channels.

  Args:
    image: Image as a numpy ndarray.

  Returns:
    Encoded image to be used in html.
  """
  return base64.b64encode(
      cv2.imencode('.jpeg', cv2.cvtColor(image, cv2.COLOR_BGR2RGB))[1]
  ).decode('utf-8')


def parse_reason_action_output(
    raw_reason_action_output: str,
) -> tuple[Optional[str], Optional[str]]:
  r"""Parses llm action reason output.

  Args:
    raw_reason_action_output: Raw string output that supposes to have the format
      'Reason: xxx\nAction:xxx'.

  Returns:
    If parsing successfully, returns reason and action.
  """
  reason_result = re.search(
      r'Reason:(.*)Action:', raw_reason_action_output, flags=re.DOTALL
  )
  reason = reason_result.group(1).strip() if reason_result else None
  action_result = re.search(
      r'Action:(.*)', raw_reason_action_output, flags=re.DOTALL
  )
  action = action_result.group(1).strip() if action_result else None
  return reason, action


def _generate_screenshot_table(task_result: dict[str, Any], i: int) -> str:
  """Generate html string for the screenshot analysis table.

  Args:
    task_result: Task run result by M3A.
    i: The index of the step.

  Returns:
    Html string for the screenshot analysis table.
  """
  html_str = (
      "<table style='width:100%;'><caption"
      " style='caption-side:top;text-align:left;'>Screenshot Analysis</caption>"
  )

  # Column for the raw screenshot
  if task_result['episode_data']['raw_screenshot'][i] is not None:
    encoded_raw_screenshot = encode_image_for_html(
        task_result['episode_data']['raw_screenshot'][i]
    )
    html_str += f"""
      <tr>
        <td style='text-align:center;'>
          Before Screenshot (raw):<br>
          <img src="data:image/png;base64,{encoded_raw_screenshot}" alt="Raw Screenshot" width="324" height="720">
        </td>
    """

  # Column for the screenshot before actions with marks
  if task_result['episode_data']['before_screenshot_with_som'][i] is not None:
    encoded_before_screenshot = encode_image_for_html(
        task_result['episode_data']['before_screenshot_with_som'][i]
    )
    html_str += f"""
        <td style='text-align:center;'>
          Before Screenshot with marks:<br>
          <img src="data:image/png;base64,{encoded_before_screenshot}" alt="Before Screenshot with Marks" width="324" height="720">
        </td>
    """

  # Column for the screenshot after actions with marks
  if task_result['episode_data']['after_screenshot_with_som'][i] is not None:
    encoded_after_screenshot = encode_image_for_html(
        task_result['episode_data']['after_screenshot_with_som'][i]
    )
    html_str += f"""
        <td style='text-align:center;'>
          After Screenshot with marks:<br>
          <img src="data:image/png;base64,{encoded_after_screenshot}" alt="After Screenshot with Marks" width="324" height="720">
        </td>
      </tr>
    """

  html_str += '</table>'
  return html_str


def generate_single_task_html_for_m3a(task_result: dict[str, Any]) -> str:
  """Generates html string for a task result obtained by M3A.

  Args:
    task_result: Task run result by M3A.

  Returns:
    Raw html string for this result.
  """
  if np.isnan(task_result['is_successful']):
    return (
        '<p>Some error happened during the execution for this task, no result'
        ' available.</p>'
    )

  html_str = f"""
    Goal: {task_result['goal']}<br>
    Status: {'success' if task_result['is_successful'] else 'fail'}<br>
    Duration: {"{:.3f}".format(task_result['run_time'])} seconds</p>
    """
  n_step = len(task_result['episode_data']['summary'])
  for i in range(n_step):
    reason, action = parse_reason_action_output(
        task_result['episode_data']['action_output'][i]
        if task_result['episode_data']['action_output'][i]
        else 'No output available.'
    )
    html_str += f'<p>Step {str(i)} <br>'
    if reason and action:
      html_str += f"""
          Reason: {reason if reason else 'Output not in correct format.'}<br>
          Action: {action if action else 'Output not in correct format.'}<br>
          """
    else:
      html_str += (
          'Action Selection output not in correct format.<br> Output: '
          + (
              task_result['episode_data']['action_output'][i]
              if task_result['episode_data']['action_output'][i]
              else 'No output available.'
          )
          + '<br>'
      )

    summary = (
        task_result['episode_data']['summary'][i]
        if task_result['episode_data']['summary'][i]
        else 'Summary not available.'
    )
    html_str += f'Summary: {summary}</p>'
    html_str += _generate_screenshot_table(task_result, i)
  return html_str


def generate_eval_html_report(
    task_results: list[dict[str, Any]], agent_type: str, fail_only: bool = False
) -> str:
  """Generate evaluation results report as a html string.

  Notice that the task_results MUST be obtained by the suite_utils.run function
  (or loaded using Checkpointer) with one of the supported agent type.

  Sample usage:
    # import webbrowser
    # agent = m3a.M3A(...)
    # task_results1 = suite_utils.run(suite, env, agent)
    #
    # result_path = 'xxx'
    # raw_result_checkpoint = checkpointer_lib.Checkpointer(result_path)
    # task_results2, _ = raw_result_checkpoint.load()
    #
    # output_path = xxx
    # with open(output_path, 'wb') as f:
    #   f.write(generate_eval_html_report(
    #       task_results1, # Or task_results2
    #       agent.__class__.__name__,
    #       False)
    #   )
    # webbrowser.open_new_tab(output_path)

  Args:
    task_results: List of task results obtained by running the suite_utils's run
      function with the agent.
    agent_type: Indicate which agent generate the task_results above.
    fail_only: Indicate if the report should only contain failed cases.

  Returns:
    Html string for the result report.
  """
  if agent_type == 'M3A':
    single_result_html_generation = generate_single_task_html_for_m3a
  elif agent_type == 'T3A':
    single_result_html_generation = generate_single_task_html_for_gpt4_text
  else:
    print('Currently only supports results obtained by M3A or T3A.')
    raise ValueError('Unsupported agent type.')

  html_str = (
      '<html><body style="word-wrap: break-word; background-color: #d9ead3;">'
  )

  for index, task_result in enumerate(task_results):
    if (
        fail_only
        and isinstance(task_result['is_successful'], bool)
        and task_result['is_successful']
    ):
      continue
    html_str += (
        f'<p>===============================<br>Task {str(index+1)}:'
        f' {task_result["task_template"]}<br>'
        + single_result_html_generation(task_result)
    )
  html_str += '</body></html>'
  return html_str


def generate_single_task_html_for_gpt4_text(task_result: dict[str, Any]) -> str:
  """Generates html string for a task result obtained by Gpt4TextAgent.

  Args:
    task_result: Task run result by Gpt4TextAgent.

  Returns:
    Raw html string for this result.
  """
  if np.isnan(task_result['is_successful']):
    return (
        '<p>Some error happened during the execution for this task, no result'
        ' available.</p>'
    )

  html_str = f"""
    Goal: {task_result['goal']}<br>
    Status: {'success' if task_result['is_successful'] else 'fail'}<br>
    Duration: {"{:.3f}".format(task_result['run_time'])} seconds</p>
    """
  n_step = len(task_result['episode_data']['summary'])
  for i in range(n_step):
    reason, action = parse_reason_action_output(
        task_result['episode_data']['action_output'][i]
    )
    html_str += f"""
      <p>Step {str(i)} <br>
      Reason: {reason}<br>
      Action: {action}<br>
      Summary: {task_result['episode_data']['summary'][i]}</p>
      """
    if task_result['episode_data']['before_screenshot'][i] is not None:
      encoded_before_screenshot = encode_image_for_html(
          task_result['episode_data']['before_screenshot'][i]
      )
      html_str += f"""
        Before Screenshot:
        <img src="data:image/png;base64,{encoded_before_screenshot}" alt="Image" width="324" height="720">
        """
    if task_result['episode_data']['after_screenshot'][i] is not None:
      encoded_after_screenshot = encode_image_for_html(
          task_result['episode_data']['after_screenshot'][i]
      )
      html_str += f"""
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        After Screenshot:
        <img src="data:image/png;base64,{encoded_after_screenshot}" alt="Image" width="324" height="720">
        """
  return html_str


def validate_ui_element(
    ui_element: representation_utils.UIElement,
    screen_width_height_px: tuple[int, int],
) -> bool:
  """Used to filter out invalid UI element."""
  screen_width, screen_height = screen_width_height_px

  # Filters out invisible element.
  if not ui_element.is_visible:
    return False

  # Filters out element with invalid bounding box.
  if ui_element.bbox_pixels:
    x_min = ui_element.bbox_pixels.x_min
    x_max = ui_element.bbox_pixels.x_max
    y_min = ui_element.bbox_pixels.y_min
    y_max = ui_element.bbox_pixels.y_max

    if (
        x_min >= x_max
        or x_min >= screen_width
        or x_max <= 0
        or y_min >= y_max
        or y_min >= screen_height
        or y_max <= 0
    ):
      return False

  return True


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""A Multimodal Autonomous Agent for Android (M3A)."""

import time
from android_world.agents import agent_utils
from android_world.agents import base_agent
from android_world.agents import infer
from android_world.agents import m3a_utils
from android_world.env import interface
from android_world.env import json_action
from android_world.env import representation_utils

PROMPT_PREFIX = (
    'You are an agent who can operate an Android phone on behalf of a user.'
    " Based on user's goal/request, you may\n"
    '- Answer back if the request/goal is a question (or a chat message),'
    ' like user asks "What is my schedule for today?".\n'
    '- Complete some tasks described in the requests/goals by'
    ' performing actions (step by step) on the phone.\n\n'
    'When given a user request, you will try to complete it step by step.'
    ' At each step, you will be given the current screenshot (including the'
    ' original screenshot and the same screenshot with bounding'
    ' boxes and numeric indexes added to some UI elements) and a history of'
    ' what you have done (in text). Based on these pieces of information and'
    ' the goal, you must choose to perform one of the'
    ' action in the following list (action description followed by the JSON'
    ' format) by outputing the action in the correct JSON format.\n'
    '- If you think the task has been completed, finish the task by using the'
    ' status action with complete as goal_status:'
    ' `{{"action_type": "status", "goal_status": "complete"}}`\n'
    "- If you think the task is not feasible (including cases like you don't"
    ' have enough information or can not perform some necessary actions),'
    ' finish by using the `status` action with infeasible as goal_status:'
    ' `{{"action_type": "status", "goal_status": "infeasible"}}`\n'
    "- Answer user's question:"
    ' `{{"action_type": "answer", "text": "<answer_text>"}}`\n'
    '- Click/tap on an element on the screen. We have added marks (bounding'
    ' boxes with numeric indexes on their TOP LEFT corner) to most of the UI'
    ' elements in the screenshot, use the numeric index to indicate which'
    ' element you want to click:'
    ' `{{"action_type": "click", "index": <target_index>}}`.\n'
    '- Long press on an element on the screen, similar with the click action'
    ' above, use the numeric label on the bounding box to indicate which'
    ' element you want to long press:'
    ' `{{"action_type": "long_press", "index": <target_index>}}`.\n'
    '- Type text into a text field (this action contains clicking the text'
    ' field, typing in the text and pressing the enter, so no need to click on'
    ' the target field to start), use the numeric label'
    ' on the bounding box to indicate the target text field:'
    ' `{{"action_type": "input_text", "text": <text_input>,'
    ' "index": <target_index>}}`\n'
    '- Press the Enter key: `{{"action_type": "keyboard_enter"}}`\n'
    '- Navigate to the home screen: `{{"action_type": "navigate_home"}}`\n'
    '- Navigate back: `{{"action_type": "navigate_back"}}`\n'
    '- Scroll the screen or a scrollable UI element in one of the four'
    ' directions, use the same numeric index as above if you want to scroll a'
    ' specific UI element, leave it empty when scroll the whole screen:'
    ' `{{"action_type": "scroll", "direction": <up, down, left, right>,'
    ' "index": <optional_target_index>}}`\n'
    '- Open an app (nothing will happen if the app is not'
    ' installed): `{{"action_type": "open_app", "app_name": <name>}}`\n'
    '- Wait for the screen to update: `{{"action_type": "wait"}}`\n'
)


GUIDANCE = (
    'Here are some useful guidelines you need to follow:\n'
    'General:\n'
    '- Usually there will be multiple ways to complete a task, pick the'
    ' easiest one. Also when something does not work as expected (due'
    ' to various reasons), sometimes a simple retry can solve the problem,'
    " but if it doesn't (you can see that from the history),"
    ' SWITCH to other solutions.\n'
    '- Sometimes you may need to navigate the phone to gather information'
    ' needed to complete the task, for example if user asks'
    ' "what is my schedule tomorrow", then you may want to open the calendar'
    ' app (using the `open_app` action), look up information there, answer'
    " user's question (using the `answer` action) and finish (using"
    ' the `status` action with complete as goal_status).\n'
    '- For requests that are questions (or chat messages), remember to use'
    ' the `answer` action to reply to user explicitly before finish!'
    ' Merely displaying the answer on the screen is NOT sufficient (unless'
    ' the goal is something like "show me ...").\n'
    '- If the desired state is already achieved (e.g., enabling Wi-Fi when'
    " it's already on), you can just complete the task.\n"
    'Action Related:\n'
    '- Use the `open_app` action whenever you want to open an app'
    ' (nothing will happen if the app is not installed), do not use the'
    ' app drawer to open an app unless all other ways have failed.\n'
    '- Use the `input_text` action whenever you want to type'
    ' something (including password) instead of clicking characters on the'
    ' keyboard one by one. Sometimes there is some default text in the text'
    ' field you want to type in, remember to delete them before typing.\n'
    '- For `click`, `long_press` and `input_text`, the index parameter you'
    ' pick must be VISIBLE in the screenshot and also in the UI element'
    ' list given to you (some elements in the list may NOT be visible on'
    ' the screen so you can not interact with them).\n'
    '- Consider exploring the screen by using the `scroll`'
    ' action with different directions to reveal additional content.\n'
    '- The direction parameter for the `scroll` action can be confusing'
    " sometimes as it's opposite to swipe, for example, to view content at the"
    ' bottom, the `scroll` direction should be set to "down". It has been'
    ' observed that you have difficulties in choosing the correct direction, so'
    ' if one does not work, try the opposite as well.\n'
    'Text Related Operations:\n'
    '- Normally to select certain text on the screen: <i> Enter text selection'
    ' mode by long pressing the area where the text is, then some of the words'
    ' near the long press point will be selected (highlighted with two pointers'
    ' indicating the range) and usually a text selection bar will also appear'
    ' with options like `copy`, `paste`, `select all`, etc.'
    ' <ii> Select the exact text you need. Usually the text selected from the'
    ' previous step is NOT the one you want, you need to adjust the'
    ' range by dragging the two pointers. If you want to select all text in'
    ' the text field, simply click the `select all` button in the bar.\n'
    "- At this point, you don't have the ability to drag something around the"
    ' screen, so in general you can not select arbitrary text.\n'
    '- To delete some text: the most traditional way is to place the cursor'
    ' at the right place and use the backspace button in the keyboard to'
    ' delete the characters one by one (can long press the backspace to'
    ' accelerate if there are many to delete). Another approach is to first'
    ' select the text you want to delete, then click the backspace button'
    ' in the keyboard.\n'
    '- To copy some text: first select the exact text you want to copy, which'
    ' usually also brings up the text selection bar, then click the `copy`'
    ' button in bar.\n'
    '- To paste text into a text box, first long press the'
    ' text box, then usually the text selection bar will appear with a'
    ' `paste` button in it.\n'
    '- When typing into a text field, sometimes an auto-complete dropdown'
    ' list will appear. This usually indicating this is a enum field and you'
    ' should try to select the best match by clicking the corresponding one'
    ' in the list.\n'
)


ACTION_SELECTION_PROMPT_TEMPLATE = (
    PROMPT_PREFIX
    + '\nThe current user goal/request is: {goal}\n\n'
    'Here is a history of what you have done so far:\n{history}\n\n'
    'The current screenshot and the same screenshot with bounding boxes'
    ' and labels added are also given to you.\n'
    'Here is a list of detailed'
    ' information for some of the UI elements (notice that some elements in'
    ' this list may not be visible in the current screen and so you can not'
    ' interact with it, can try to scroll the screen to reveal it first),'
    ' the numeric indexes are'
    ' consistent with the ones in the labeled screenshot:\n{ui_elements}\n'
    + GUIDANCE
    + '{additional_guidelines}'
    + '\nNow output an action from the above list in the correct JSON format,'
    ' following the reason why you do that. Your answer should look like:\n'
    'Reason: ...\nAction: {{"action_type":...}}\n\n'
    'Your Answer:\n'
)


SUMMARY_PROMPT_TEMPLATE = (
    PROMPT_PREFIX
    + '\nThe (overall) user goal/request is: {goal}\n'
    'Now I want you to summerize the latest step.\n'
    'You will be given the screenshot before you performed the action (which'
    ' has a text label "before" on the bottom right), the action you chose'
    ' (together with the reason) and the screenshot after the action was'
    ' performed (which has a text label "after" on the bottom right).\n'
    'Also here is the list of detailed information for some UI elements'
    ' in the before screenshot:\n{before_elements}\n'
    'Here is the list for the after screenshot:\n{after_elements}\n'
    'This is the action you picked: {action}\n'
    'Based on the reason: {reason}\n\n'
    'By comparing the two screenshots (plus the UI element lists) and the'
    ' action performed, give a brief summary of this step. This summary'
    ' will be added to action history and used in future action selection,'
    ' so try to include essential information you think that will be most'
    ' useful for future action selections like what you'
    ' intended to do, why, if it worked as expected, if not'
    ' what might be the reason (be critical, the action/reason might be'
    ' wrong), what should/should not be done next and so on. Some more'
    ' rules/tips you should follow:\n'
    '- Keep it short (better less than 50 words) and in a single line\n'
    "- Some actions (like `answer`, `wait`) don't involve screen change,"
    ' you can just assume they work as expected.\n'
    '- Given this summary will be added into action history, it can be used as'
    ' memory to include information that needs to be remembered, or shared'
    ' between different apps.\n\n'
    'Summary of this step: '
)


def _generate_ui_element_description(
    ui_element: representation_utils.UIElement, index: int
) -> str:
  """Generate a description for a given UI element with important information.

  Args:
    ui_element: UI elements for the current screen.
    index: The numeric index for the UI element.

  Returns:
    The description for the UI element.
  """
  element_description = f'UI element {index}: {{"index": {index}, '
  if ui_element.text:
    element_description += f'"text": "{ui_element.text}", '
  if ui_element.content_description:
    element_description += (
        f'"content_description": "{ui_element.content_description}", '
    )
  if ui_element.hint_text:
    element_description += f'"hint_text": "{ui_element.hint_text}", '
  if ui_element.tooltip:
    element_description += f'"tooltip": "{ui_element.tooltip}", '
  element_description += (
      f'"is_clickable": {"True" if ui_element.is_clickable else "False"}, '
  )
  element_description += (
      '"is_long_clickable":'
      f' {"True" if ui_element.is_long_clickable else "False"}, '
  )
  element_description += (
      f'"is_editable": {"True" if ui_element.is_editable else "False"}, '
  )
  if ui_element.is_scrollable:
    element_description += '"is_scrollable": True, '
  if ui_element.is_focusable:
    element_description += '"is_focusable": True, '
  element_description += (
      f'"is_selected": {"True" if ui_element.is_selected else "False"}, '
  )
  element_description += (
      f'"is_checked": {"True" if ui_element.is_checked else "False"}, '
  )
  return element_description[:-2] + '}'


def _generate_ui_elements_description_list(
    ui_elements: list[representation_utils.UIElement],
    screen_width_height_px: tuple[int, int],
) -> str:
  """Generate concise information for a list of UIElement.

  Args:
    ui_elements: UI elements for the current screen.
    screen_width_height_px: The height and width of the screen in pixels.

  Returns:
    Concise information for each UIElement.
  """
  tree_info = ''
  for index, ui_element in enumerate(ui_elements):
    if m3a_utils.validate_ui_element(ui_element, screen_width_height_px):
      tree_info += _generate_ui_element_description(ui_element, index) + '\n'
  return tree_info


def _action_selection_prompt(
    goal: str,
    history: list[str],
    ui_elements: str,
    additional_guidelines: list[str] | None = None,
) -> str:
  """Generate the prompt for the action selection.

  Args:
    goal: The current goal.
    history: Summaries for previous steps.
    ui_elements: A list of descriptions for the UI elements.
    additional_guidelines: Task specific guidelines.

  Returns:
    The text prompt for action selection that will be sent to gpt4v.
  """
  if history:
    history = '\n'.join(history)
  else:
    history = 'You just started, no action has been performed yet.'

  extra_guidelines = ''
  if additional_guidelines:
    extra_guidelines = 'For The Current Task:\n'
    for guideline in additional_guidelines:
      extra_guidelines += f'- {guideline}\n'

  return ACTION_SELECTION_PROMPT_TEMPLATE.format(
      goal=goal,
      history=history,
      ui_elements=ui_elements if ui_elements else 'Not available',
      additional_guidelines=extra_guidelines,
  )


def _summarize_prompt(
    action: str,
    reason: str,
    goal: str,
    before_elements: str,
    after_elements: str,
) -> str:
  """Generate the prompt for the summarization step.

  Args:
    action: Action picked.
    reason: The reason to pick the action.
    goal: The overall goal.
    before_elements: Information for UI elements on the before screenshot.
    after_elements: Information for UI elements on the after screenshot.

  Returns:
    The text prompt for summarization that will be sent to gpt4v.
  """
  return SUMMARY_PROMPT_TEMPLATE.format(
      goal=goal,
      before_elements=before_elements,
      after_elements=after_elements,
      action=action,
      reason=reason,
  )


class M3A(base_agent.EnvironmentInteractingAgent):
  """M3A which stands for Multimodal Autonomous Agent for Android."""

  def __init__(
      self,
      env: interface.AsyncEnv,
      llm: infer.MultimodalLlmWrapper,
      name: str = 'M3A',
      wait_after_action_seconds: float = 2.0,
  ):
    """Initializes a M3A Agent.

    Args:
      env: The environment.
      llm: The multimodal LLM wrapper.
      name: The agent name.
      wait_after_action_seconds: Seconds to wait for the screen to stablize
        after executing an action
    """
    super().__init__(env, name)
    self.llm = llm
    self.history = []
    self.additional_guidelines = None
    self.wait_after_action_seconds = wait_after_action_seconds

  def set_task_guidelines(self, task_guidelines: list[str]) -> None:
    self.additional_guidelines = task_guidelines

  def reset(self, go_home_on_reset: bool = False):
    super().reset(go_home_on_reset)
    # Hide the coordinates on screen which might affect the vision model.
    self.env.hide_automation_ui()
    self.history = []

  def step(self, goal: str) -> base_agent.AgentInteractionResult:
    step_data = {
        'raw_screenshot': None,
        'before_screenshot_with_som': None,
        'after_screenshot_with_som': None,
        'action_prompt': None,
        'action_output': None,
        'action_output_json': None,
        'action_reason': None,
        'action_raw_response': None,
        'summary_prompt': None,
        'summary': None,
        'summary_raw_response': None,
    }
    print('----------step ' + str(len(self.history) + 1))

    state = self.get_post_transition_state()
    logical_screen_size = self.env.logical_screen_size
    orientation = self.env.orientation
    physical_frame_boundary = self.env.physical_frame_boundary

    before_ui_elements = state.ui_elements
    before_ui_elements_list = _generate_ui_elements_description_list(
        before_ui_elements, logical_screen_size
    )
    step_data['raw_screenshot'] = state.pixels.copy()
    before_screenshot = state.pixels.copy()
    for index, ui_element in enumerate(before_ui_elements):
      if m3a_utils.validate_ui_element(ui_element, logical_screen_size):
        m3a_utils.add_ui_element_mark(
            before_screenshot,
            ui_element,
            index,
            logical_screen_size,
            physical_frame_boundary,
            orientation,
        )
    step_data['before_screenshot_with_som'] = before_screenshot.copy()

    action_prompt = _action_selection_prompt(
        goal,
        [
            'Step ' + str(i + 1) + '- ' + step_info['summary']
            for i, step_info in enumerate(self.history)
        ],
        before_ui_elements_list,
        self.additional_guidelines,
    )
    step_data['action_prompt'] = action_prompt
    action_output, is_safe, raw_response = self.llm.predict_mm(
        action_prompt,
        [
            step_data['raw_screenshot'],
            before_screenshot,
        ],
    )

    if is_safe == False:  # pylint: disable=singleton-comparison
      #  is_safe could be None
      action_output = """Reason: Triggered LLM safety classifier.
Action: {"action_type": "status", "goal_status": "infeasible"}"""

    if not raw_response:
      raise RuntimeError('Error calling LLM in action selection phase.')
    step_data['action_output'] = action_output
    step_data['action_raw_response'] = raw_response

    reason, action = m3a_utils.parse_reason_action_output(action_output)

    # If the output is not in the right format, add it to step summary which
    # will be passed to next step and return.
    if (not reason) or (not action):
      print('Action prompt output is not in the correct format.')
      step_data['summary'] = (
          'Output for action selection is not in the correct format, so no'
          ' action is performed.'
      )
      self.history.append(step_data)

      return base_agent.AgentInteractionResult(
          False,
          step_data,
      )

    print('Action: ' + action)
    print('Reason: ' + reason)
    step_data['action_reason'] = reason

    try:
      converted_action = json_action.JSONAction(
          **agent_utils.extract_json(action),
      )
      step_data['action_output_json'] = converted_action
    except Exception as e:  # pylint: disable=broad-exception-caught
      print('Failed to convert the output to a valid action.')
      print(str(e))
      step_data['summary'] = (
          'Can not parse the output to a valid action. Please make sure to pick'
          ' the action from the list with required parameters (if any) in the'
          ' correct JSON format!'
      )
      self.history.append(step_data)

      return base_agent.AgentInteractionResult(
          False,
          step_data,
      )

    action_index = converted_action.index
    num_ui_elements = len(before_ui_elements)
    if (
        converted_action.action_type
        in ['click', 'long_press', 'input_text', 'scroll']
        and action_index is not None
    ):
      if action_index >= num_ui_elements:
        print(
            f'Index out of range, prediction index is {action_index}, but the'
            f' UI element list only has {num_ui_elements} elements.'
        )
        step_data['summary'] = (
            'The parameter index is out of range. Remember the index must be in'
            ' the UI element list!'
        )
        self.history.append(step_data)
        return base_agent.AgentInteractionResult(False, step_data)

      # Add mark to the target element.
      m3a_utils.add_ui_element_mark(
          step_data['raw_screenshot'],
          before_ui_elements[action_index],
          action_index,
          logical_screen_size,
          physical_frame_boundary,
          orientation,
      )

    if converted_action.action_type == 'status':
      if converted_action.goal_status == 'infeasible':
        print('Agent stopped since it thinks mission impossible.')
      step_data['summary'] = 'Agent thinks the request has been completed.'
      self.history.append(step_data)
      return base_agent.AgentInteractionResult(
          True,
          step_data,
      )

    if converted_action.action_type == 'answer':
      print('Agent answered with: ' + converted_action.text)

    try:
      self.env.execute_action(converted_action)
    except Exception as e:  # pylint: disable=broad-exception-caught
      print('Failed to execute action.')
      print(str(e))
      step_data['summary'] = (
          'Can not execute the action, make sure to select the action with'
          ' the required parameters (if any) in the correct JSON format!'
      )
      return base_agent.AgentInteractionResult(
          False,
          step_data,
      )

    time.sleep(self.wait_after_action_seconds)

    state = self.env.get_state(wait_to_stabilize=False)
    logical_screen_size = self.env.logical_screen_size
    orientation = self.env.orientation
    physical_frame_boundary = self.env.physical_frame_boundary
    after_ui_elements = state.ui_elements
    after_ui_elements_list = _generate_ui_elements_description_list(
        after_ui_elements, logical_screen_size
    )
    after_screenshot = state.pixels.copy()
    for index, ui_element in enumerate(after_ui_elements):
      if m3a_utils.validate_ui_element(ui_element, logical_screen_size):
        m3a_utils.add_ui_element_mark(
            after_screenshot,
            ui_element,
            index,
            logical_screen_size,
            physical_frame_boundary,
            orientation,
        )

    m3a_utils.add_screenshot_label(
        step_data['before_screenshot_with_som'], 'before'
    )
    m3a_utils.add_screenshot_label(after_screenshot, 'after')
    step_data['after_screenshot_with_som'] = after_screenshot.copy()

    summary_prompt = _summarize_prompt(
        action,
        reason,
        goal,
        before_ui_elements_list,
        after_ui_elements_list,
    )
    summary, is_safe, raw_response = self.llm.predict_mm(
        summary_prompt,
        [
            before_screenshot,
            after_screenshot,
        ],
    )

    if is_safe == False:  # pylint: disable=singleton-comparison
      #  is_safe could be None
      summary = """Summary triggered LLM safety classifier."""

    if not raw_response:
      print(
          'Error calling LLM in summarization phase. This should not happen: '
          f'{summary}'
      )
      step_data['summary'] = (
          'Some error occurred calling LLM during summarization phase: %s'
          % summary
      )
      self.history.append(step_data)
      return base_agent.AgentInteractionResult(
          False,
          step_data,
      )

    step_data['summary_prompt'] = summary_prompt
    step_data['summary'] = f'Action selected: {action}. {summary}'
    print('Summary: ' + summary)
    step_data['summary_raw_response'] = raw_response

    self.history.append(step_data)
    return base_agent.AgentInteractionResult(
        False,
        step_data,
    )


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from typing import Any
from unittest import mock
from absl.testing import absltest
from android_world.agents import infer
from android_world.agents import m3a
from android_world.env import adb_utils
from android_world.utils import test_utils
import numpy as np


class MockMultimodalLlmWrapper(infer.MultimodalLlmWrapper):
  """Mock multimodal LLM wrapper for testing."""

  def __init__(self, mock_responses: list[tuple[str, Any]]):
    self.mock_responses = mock_responses
    self.index = 0

  def predict_mm(
      self, text_prompt: str, images: list[np.ndarray]
  ) -> tuple[str, Any]:
    if self.index < len(self.mock_responses):
      index = self.index
      self.index += 1
      return self.mock_responses[index][0], None, self.mock_responses[index][1]
    else:
      return infer.ERROR_CALLING_LLM, None, None


class M3AInteractionTest(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.mock_get_orientation = mock.patch.object(
        adb_utils,
        'get_orientation',
    ).start()
    self.mock_get_physical_frame_boundary = mock.patch.object(
        adb_utils,
        'get_physical_frame_boundary',
    ).start()

  def tearDown(self):
    super().tearDown()
    mock.patch.stopall()

  def test_step_method_with_completion(self):
    env = test_utils.FakeAsyncEnv()
    llm = MockMultimodalLlmWrapper([(
        (
            "Reason: completed.\nAction: {'action_type': 'status',"
            " 'goal_status': 'complete'}"
        ),
        'test raw response',
    )])
    self.mock_get_orientation.return_value = 0
    self.mock_get_physical_frame_boundary.return_value = [0, 0, 100, 100]
    agent = m3a.M3A(env, llm)

    goal = 'do something'
    step_data = agent.step(goal)
    self.assertTrue(step_data.done)

  def test_step_method_with_invalid_action_output(self):
    env = test_utils.FakeAsyncEnv()
    llm = MockMultimodalLlmWrapper([(
        'Output in incorrect format.',
        'test raw response',
    )])
    agent = m3a.M3A(env, llm)

    goal = 'do something'
    step_data = agent.step(goal)

    self.assertFalse(step_data.done)
    self.assertIn(
        'Output for action selection is not in the correct format',
        step_data.data['summary'],
    )

  def test_history_recording(self):
    env = test_utils.FakeAsyncEnv()
    llm = MockMultimodalLlmWrapper([
        (
            (
                "Reason: answer question.\nAction: {'action_type': 'answer',"
                " 'text': 'fake answer.'}"
            ),
            'test raw response',
        ),
        (
            'fake summary',
            'test raw response',
        ),
        (
            (
                "Reason: completed.\nAction: {'action_type': 'status',"
                " 'goal_status': 'complete'}"
            ),
            'test raw response',
        ),
    ])
    self.mock_get_orientation.side_effect = [0, 0, 0]
    self.mock_get_physical_frame_boundary.side_effect = [
        [0, 0, 100, 100],
        [0, 0, 100, 100],
        [0, 0, 100, 100],
    ]
    agent = m3a.M3A(env, llm)

    goal = 'do something'
    step1_data = agent.step(goal)
    self.assertFalse(step1_data.done)
    self.assertIn('fake summary', step1_data.data['summary'])

    step2_data = agent.step(goal)
    self.assertTrue(step2_data.done)
    self.assertLen(agent.history, 2)


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Helper functions for the SeeAct experiment setup.

Sourced from https://github.com/OSU-NLP-Group/SeeAct.
"""

import base64
import dataclasses
import io
import os
import re
import string
from typing import Any
from absl import logging
from android_world.agents import infer
from android_world.env import json_action
from android_world.env import representation_utils
from IPython import display
from matplotlib.pylab import plt
import numpy as np
import PIL
import requests

# OpenAI model used for these experiments.
_GPT_TURBO = "gpt-4-turbo-2024-04-09"

VALID_ACTIONS = {
    "CLICK",
    "TERMINATE",
    "ANSWER",
    "LONG PRESS",
    "INPUT TEXT",
    "NAVIGATE HOME",
    "KEYBOARD ENTER",
    "NAVIGATE BACK",
    "SWIPE",
    "OPEN APP",
    "WAIT",
}
ACTIONS_WITHOUT_ELEMENT = {
    "KEYBOARD ENTER",
    "NAVIGATE HOME",
    "NAVIGATE BACK",
    "TERMINATE",
    "ANSWER",
    "OPEN APP",
    "WAIT",
}
ACTIONS_WITH_VALUE = {"INPUT TEXT", "SWIPE", "OPEN APP", "ANSWER"}


def generate_action_generation_prompt(
    task: str,
    question_description: str,
    previous_actions: list[str] | None = None,
) -> str:
  """Generate the first phase prompt for the SeeAct experiment setup.

  It focuses on the task description, previous actions and a question
  description without disruption from formatting or referring prompts.

  Args:
      task: The task description.
      question_description: A description of the question or task at hand.
      previous_actions: A list of previous actions taken.

  Returns:
      list: A list containing the system role and the generated query text.
  """
  query_text = "You are asked to complete the following task: " + task + "\n\n"
  previous_action_text = "Previous Actions:\n"
  if previous_actions is None:
    previous_actions = []
  for action_text in previous_actions:
    previous_action_text += action_text + "\n"
  query_text += previous_action_text + "\n" + question_description
  return query_text


def generate_grounding_prompt(
    referring_description: str = "",
    element_format: str = "",
    ui_element_choices: list[str] | None = None,
) -> str:
  """Generate a referring prompt that includes the element format, action format, and value format along with choices, if applicable, for the SeeAct experiment setup.

  Args:
      referring_description: Description on how to format the output.
      element_format: The format for specifying the element.
      ui_element_choices: A list of choices for the next action.

  Returns:
      The generated referring prompt.
  """
  referring_prompt = (
      referring_description + "\n\n" if referring_description else ""
  )

  if ui_element_choices:
    choice_text = format_action_options(ui_element_choices)
    referring_prompt += choice_text

  referring_prompt += f"{element_format}"

  return referring_prompt


def format_action_options(choices: list[str]) -> str:
  """Format the given choices into a structured option text for presentation in the prompt.

  Args:
    choices: A list of choices to be formatted.

  Returns:
    The formatted choices text.
  """
  option_text = ""
  for idx, choice in enumerate(choices):
    option_name = generate_multiple_choice(idx)
    option_text += f"{option_name}. {choice}\n"

  non_abcd = generate_multiple_choice(len(choices))
  option_text += (
      "If none of these elements match your target element, please select"
      f" {non_abcd}. None of the other options match the correct element.\n\n"
  )

  return option_text


def generate_multiple_choice(index: int) -> str:
  """Generate an option name based on the index.

  Args:
    index: The index of the option.

  Returns:
    The generated option name.
  """
  if index > 26 * 26:
    raise ValueError(f"Index {index} is greater than 26 * 26")

  if index < 26:
    return string.ascii_uppercase[index]
  else:
    first_letter_index = (index - 26) // 26
    second_letter_index = (index - 26) % 26
    first_letter = string.ascii_uppercase[first_letter_index]
    second_letter = string.ascii_uppercase[second_letter_index]
    return f"{first_letter}{second_letter}"


def create_action_generation_messages_payload(
    system_role_prompt: str,
    action_gen_prompt: str,
    image_array: np.ndarray,
) -> list[dict[str, Any]]:
  """Creates JSON input for action generation.

  Args:
    system_role_prompt: The general instructions to give to the agent.
    action_gen_prompt: Prompt for the specific task.
    image_array: Image of the current screen.

  Returns:
    JSON input for OpenAI API.
  """
  base64_image = infer.Gpt4Wrapper.encode_image(image_array)
  messages = [
      {
          "role": "system",
          "content": [{"type": "text", "text": system_role_prompt}],
      },
      {
          "role": "user",
          "content": [
              {"type": "text", "text": action_gen_prompt},
              {
                  "type": "image_url",
                  "image_url": {
                      "url": f"data:image/jpeg;base64,{base64_image}",
                      "detail": "high",
                  },
              },
          ],
      },
  ]

  return messages


def create_grounding_messages_payload(
    system_role_prompt: str,
    action_gen_prompt: str,
    image_array: np.ndarray,
    action_generation_output: str,
    action_grounding_prompt: str,
) -> list[dict[str, Any]]:
  """Creates JSON input for grounding.

  Args:
    system_role_prompt: The general instructions to give to the agent.
    action_gen_prompt: Prompt for generating the action.
    image_array: Image of the current screen.
    action_generation_output: Output from the action generation.
    action_grounding_prompt: Prompt for generating the grounding action.

  Returns:
    JSON input for OpenAI API.
  """
  base64_image = infer.Gpt4Wrapper.encode_image(image_array)
  messages = [
      {
          "role": "system",
          "content": [{"type": "text", "text": system_role_prompt}],
      },
      {
          "role": "user",
          "content": [
              {"type": "text", "text": action_gen_prompt},
              {
                  "type": "image_url",
                  "image_url": {
                      "url": f"data:image/jpeg;base64,{base64_image}",
                      "detail": "high",
                  },
              },
          ],
      },
      {
          "role": "assistant",
          "content": [
              {"type": "text", "text": f"\n\n{action_generation_output}"}
          ],
      },
      {
          "role": "user",
          "content": [{"type": "text", "text": action_grounding_prompt}],
      },
  ]

  return messages


def display_prompt(
    messages_payload: list[dict[str, Any]],
    ignore_system_prompt: bool = True,
    extra_text: str = "",
):
  """Displays content, image, and role for a web navigation task.

  For data viz purposes.

  Args:
    messages_payload: A dictionary containing the 'role', 'content', and image
      data.
    ignore_system_prompt: If True, skip printing out the system prompt.
    extra_text: Extra text to display.
  """

  for message in messages_payload:
    print(f"-------- Role: {message['role'].upper()} --------")  # Role Marker
    if ignore_system_prompt and message["role"] == "system":
      continue
    for content_item in message["content"]:
      if content_item["type"] == "text":
        print(content_item["text"])
      elif content_item["type"] == "image_url":
        base64_str = content_item["image_url"]["url"].replace(
            "data:image/jpeg;base64,", ""
        )
        image_data = base64.b64decode(base64_str)
        image = PIL.Image.open(io.BytesIO(image_data))

        image.thumbnail((512, 512))
        display.display(image)
      else:
        raise ValueError(
            f"Unknown content type: {content_item['type'].upper()}"
        )
  print(extra_text)


def execute_openai_request(
    messages_payload: list[dict[str, Any]],
    model: str = _GPT_TURBO,
    temperature: float = 0.0,
    max_tokens: int = 4096,
) -> dict[str, Any]:
  """Executes a request to the OpenAI API with the given JSON input.

  Args:
    messages_payload: The JSON input created for action generation or grounding.
    model: The model to use for the request.
    temperature: Temperature setting for GPT's responses.
    max_tokens: Max number of output tokens.

  Returns:
    The response from the OpenAI API as a dictionary.
  """
  api_key = os.environ["OPENAI_API_KEY"]
  headers = {
      "Content-Type": "application/json",
      "Authorization": f"Bearer {api_key}",
  }
  payload = {
      "model": model,
      "messages": messages_payload,
      "temperature": temperature,
      "max_tokens": max_tokens,
  }

  response = requests.post(
      "https://api.openai.com/v1/chat/completions",
      headers=headers,
      json=payload,
  )

  return response.json()


@dataclasses.dataclass(frozen=True)
class SeeActAction:
  action: str
  element: str | None = None
  value: str | None = None


def _extract_text(value: str) -> str | None:
  if value is None or value == "None":
    return None
  return re.sub(r"[.]+|\s+", " ", value).strip()


class ParseActionError(ValueError):
  """Exception raised for errors in the parsing of an action."""

  pass


def _validate_action(element: str, action: str, value: str) -> None:
  """Validates the element, action, and value combination.

  Args:
    element: The element associated with the action.
    action: The action to validate.
    value: The value associated with the action.

  Raises:
    ValueError: If the action is invalid.
  """

  if action not in VALID_ACTIONS:
    raise ParseActionError(f"Invalid action: {action}")

  if action == "INPUT TEXT":
    if not value:
      raise ParseActionError("VALUE is required for INPUT TEXT action")
    if element is None:
      raise ParseActionError("ELEMENT is required for INPUT TEXT action")

  if action == "SWIPE" and value not in ["up", "down", "left", "right"]:
    raise ParseActionError(
        f'Invalid VALUE "{value}" for SWIPE action; must be up, down, left, or'
        " right."
    )

  if action == "OPEN APP" and not value:
    raise ParseActionError("VALUE is required for OPEN APP action")

  if action == "ANSWER" and not value:
    raise ParseActionError("VALUE is required for ANSWER action")

  if action in ["CLICK", "LONG PRESS"]:
    if element is None:
      raise ParseActionError(f"ELEMENT is required for {action} action")
    if value != "None":
      raise ParseActionError(f"VALUE should be 'None' for {action} action")

  if action in ACTIONS_WITHOUT_ELEMENT and value != "None":
    logging.error(
        "VALUE should be 'None' for %s action, but got %s", action, value
    )


def extract_element_action_value(lines: list[str]) -> SeeActAction:
  """Extracts the element, action, and value from the given lines.

  # Example.
  lines = ["ELEMENT: A", "ACTION: ENTER_TEXT", "VALUE: Hello, World!"]
  element, action, value = extract_element_action_value(lines)
  print(element)  # Output: "A"
  print(action)   # Output: "ENTER_TEXT"
  print(value)    # Output: "Hello, World!"

  Args:
    lines: A list of strings representing the lines to extract from. Each line
      should start with "ELEMENT:", "ACTION:", or "VALUE:" followed by the
      corresponding value.

  Returns:
    A tuple containing the extracted element, action, and value as strings.

  Raises:
    ValueError: If the element, action, or value is missing or None.

  Example:
  """
  element, action, value = None, None, None
  for line in lines:
    if line.startswith("ELEMENT:"):
      element = _extract_text(line.split(":")[1])
      if element == "None":
        element = None
    elif line.startswith("ACTION:"):
      action = _extract_text(line.split(":")[1])
    elif line.startswith("VALUE:"):
      value = line.split(":")[1].strip().strip(".")

  _validate_action(element, action, value)
  return SeeActAction(action=action, element=element, value=value)


@dataclasses.dataclass
class SeeActElement:
  description: str
  ui_element: representation_utils.UIElement | None = None
  index: int = -1
  abc_index: str = ""


def format_and_filter_elements(
    ui_elements: list[representation_utils.UIElement],
) -> list[SeeActElement]:
  """Formats and filters UI elements."""
  filtered = [
      SeeActElement(
          description=_get_element_description(ui_element),
          ui_element=ui_element,
      )
      for ui_element in ui_elements
      if _valid_element(ui_element)
  ]
  for i, element in enumerate(filtered):
    element.index = i
    element.abc_index = generate_multiple_choice(i)
  return filtered


def _valid_element(ui_element: representation_utils.UIElement) -> bool:
  """Returns true if element is valid."""

  if not ui_element.class_name:
    return False

  if (
      ui_element.text
      or ui_element.content_description
      or ui_element.hint_text
      or ui_element.resource_name
  ):
    return True
  else:
    return False


def _get_element_description(
    element: representation_utils.UIElement,
) -> str:
  """Produces a concise description of UI element given its properties.

  If it is not possible to describe a UI element at all, None will be returned.

  Args:
    element: The element to generate a description for.

  Returns:
    description: The description.  If it was not possible to generate a
      description for the element, None will be returned.
  """
  if not element.class_name:
    return "Unknown"
  class_string = element.class_name.split(".")[-1].lower()

  if "radiobutton" in class_string:
    return _describe_checkable_element(element, "radio button", "selected")
  elif "button" in class_string:
    return _describe_typed_element(element, "button")
  elif "image" in class_string:
    return _describe_typed_element(element, "image")
  elif "text" in class_string:
    if element.is_editable:
      return _describe_text_box(element)
    else:
      return _describe_typed_element(element, "icon")
  elif "switch" in class_string:
    return _describe_switch(element)
  elif "checkbox" in class_string:
    return _describe_checkable_element(element, "checkbox", "checked")
  else:
    return _describe_typed_element(element, "icon")


def _describe_text_box(element: representation_utils.UIElement) -> str:
  """Describes a text box."""
  if element.hint_text:
    description = 'a "{hint_text}" text box'.format(hint_text=element.hint_text)
  elif element.content_description:
    description = 'a "{content_description}" text box'.format(
        content_description=element.content_description
    )
  else:
    description = "a text box"

  if element.text:
    description += ' with the text "{text}"'.format(text=element.text)
  else:
    description += " that is empty"

  return description


def _describe_switch(element: representation_utils.UIElement) -> str:
  """Describes a switch."""
  if element.text:
    description = 'a switch with the text "{text}"'.format(text=element.text)
  elif element.hint_text:
    description = 'a "{hint_text}" switch'.format(hint_text=element.hint_text)
  elif element.content_description:
    description = 'a "{content_description}" switch'.format(
        content_description=element.content_description
    )
  else:
    description = "a switch"

  if element.is_checked:
    description += " that is checked"
  else:
    description += " that is not checked"

  return description


def _describe_checkable_element(
    element: representation_utils.UIElement,
    element_type: str,
    check_description: str,
) -> str:
  """Describes a checkable element.

  Examples of checkable elements are check boxes and radio buttons.

  Args:
    element: The element to describe.
    element_type: A generic description for the type of element (e.g.,
      checkbox).
    check_description: The word to use to describe when the element is checked
      (e.g., checked for a check box or selected for a radio button).

  Returns:
    The generated description.
  """
  if element.text:
    description = 'a {element_type} with the text "{text}"'.format(
        element_type=element_type, text=element.text
    )
  elif element.hint_text:
    description = 'a "{hint_text}" {element_type}'.format(
        element_type=element_type, hint_text=element.hint_text
    )
  elif element.content_description:
    description = 'a "{content_description}" {element_type}'.format(
        element_type=element_type,
        content_description=element.content_description,
    )
  else:
    description = "a {element_type}".format(element_type=element_type)

  if element.is_checked:
    description += " that is {:s}".format(check_description)
  else:
    description += " that is not {:s}".format(check_description)

  return description


def _describe_typed_element(
    element: representation_utils.UIElement, element_type: str
) -> str:
  """Provides a description of the form <details><type> for an element.

  Details can be pulled from the text, content_description or hint_text of
  the element.

  Args:
    element: The UI element to describe.
    element_type: How the type of the element should be described (e.g., button)

  Returns:
    The description.
  """
  if element.text:
    return '"{text}" {element_type}'.format(
        text=element.text, element_type=element_type
    )
  elif element.content_description:
    return '"{content_description}" {element_type}'.format(
        content_description=element.content_description,
        element_type=element_type,
    )
  elif element.hint_text:
    return '"{hint_text}" {element_type}'.format(
        hint_text=element.hint_text, element_type=element_type
    )
  elif element.resource_name:
    return '"{resource_name}" {element_type}'.format(
        resource_name=element.resource_name, element_type=element_type
    )
  else:
    return element_type


def get_referred_element(
    action: SeeActAction, elements: list[SeeActElement]
) -> SeeActElement | None:
  """Gets the referred element from the action.

  Args:
    action: The action to get the referred element from.
    elements: The list of elements to search through.

  Returns:
    The referred element, or None if it could not be found.

  Raises:
    ValueError: If the referred element does not exist.
  """
  if action.element is None:
    return None
  if action.action not in ("CLICK", "LONG PRESS", "INPUT TEXT", "SWIPE"):
    return None

  for element in elements:
    if element.abc_index == action.element:
      return element

  return None


def convert_seeact_action_to_json_action(
    action: SeeActAction, elements: list[SeeActElement]
) -> json_action.JSONAction:
  """Converts a SeeActAction object to a JSONAction object.

  Args:
      action: The SeeActAction object to convert.
      elements: UI elements.

  Returns:
      The corresponding JSONAction object.

  Raises:
    ParseActionError: If cannot convert action.
  """
  action_type_mapping = {
      "CLICK": json_action.CLICK,
      "TERMINATE": json_action.STATUS,
      "ANSWER": json_action.ANSWER,
      "LONG PRESS": json_action.LONG_PRESS,
      "INPUT TEXT": json_action.INPUT_TEXT,
      "NAVIGATE HOME": json_action.NAVIGATE_HOME,
      "KEYBOARD ENTER": json_action.KEYBOARD_ENTER,
      "NAVIGATE BACK": json_action.NAVIGATE_BACK,
      "SWIPE": json_action.SCROLL,
      "WAIT": json_action.WAIT,
      "OPEN APP": json_action.OPEN_APP,
  }
  action_type = action_type_mapping[action.action.upper()]

  index = None
  text = None
  direction = None
  goal_status = None
  app_name = None

  if action_type == json_action.INPUT_TEXT:
    text = action.value
  elif action_type == json_action.SCROLL:
    direction = _swipe_to_scroll(action.value)
  elif action_type == json_action.OPEN_APP:
    app_name = action.value
  elif action_type == json_action.ANSWER:
    text = action.value
  elif action_type == json_action.STATUS:
    goal_status = "task_complete"

  target_element = get_referred_element(action, elements)
  if target_element is None and action_type in [
      json_action.CLICK,
      json_action.LONG_PRESS,
      json_action.INPUT_TEXT,
  ]:
    raise ParseActionError(
        f"Action type is {action_type}, but received no target element or"
        " incorrect target element."
    )
  if target_element is not None:
    index = target_element.index

  return json_action.JSONAction(
      action_type=action_type,
      index=index,
      text=text,
      direction=direction,
      goal_status=goal_status,
      app_name=app_name,
  )


def _swipe_to_scroll(seeact_direction: str) -> str:
  """Maps SeeAct scroll direction to JSONAction scroll direction."""
  mapping = {
      "up": "down",
      "down": "up",
      "left": "right",
      "right": "left",
  }
  return mapping.get(seeact_direction.lower(), "unknown")


def generate_action_description(
    seeact_action: SeeActAction, element: SeeActElement
) -> str:
  """Generates a natural language description of the action."""

  if seeact_action.action in ACTIONS_WITHOUT_ELEMENT or (
      seeact_action.action == "SWIPE" and element is None
  ):
    new_action = seeact_action.action
  else:
    new_action = f"{element.description} -> {seeact_action.action}"

  if seeact_action.action in ACTIONS_WITH_VALUE:
    new_action += f": {seeact_action.value}"

  return new_action


def plot_to_html_img(figure) -> str:
  """Convert a matplotlib figure to an HTML img tag."""
  # Save the plot to a BytesIO object
  buf = io.BytesIO()
  figure.savefig(buf, format="png", bbox_inches="tight", dpi=200)
  buf.seek(0)
  # Encode the image in base64 to embed in HTML
  image_base64 = base64.b64encode(buf.read()).decode("utf-8")
  buf.close()
  return f'<img src="data:image/png;base64,{image_base64}" width="800" />'


def _generate_episode_html(episode: dict[str, Any], num: int) -> str:
  """Generate an HTML report from screenshot data and action descriptions for a single episode."""
  data = episode["episode_data"]
  title = episode["task_template"] + " - " + episode["goal"]
  success_text = (
      "<span style='color:green;'>SUCCESS</span>"
      if episode["is_successful"]
      else "<span style='color:red;'>FAILURE</span>"
  )
  header_details = (
      f"Runtime: {int(episode['run_time'])} seconds, "
      f"Episode Length: {episode['episode_length']} steps"
  )
  html_str = f"<h1>{num} {success_text} {title}</h1><h2>{header_details}</h2>"

  for i, (screenshot, description) in enumerate(
      zip(data["screenshot"], data["action_description"])
  ):
    fig, ax = plt.subplots()
    ax.imshow(screenshot)
    ax.axis("off")  # Turn off axis
    ax.set_title(f"TASK {i}: {description}", fontsize=12, color="blue")
    html_str += "<div>" + plot_to_html_img(fig) + "</div>"
    plt.close(fig)  # Close the plot to free up memory

  return html_str


def generate_full_report(
    episodes: list[dict[str, Any]], run_id: str = ""
) -> str:
  """Generate a comprehensive HTML report for multiple episodes."""
  html_str = f"<html><head><title>SeeAct: {run_id}</title></head><body>"
  html_str += "<h1>SeeAct Report</h1>"

  for i, episode in enumerate(episodes):
    if episode.get("exception_info") is not None:
      print(f"Skipping {i}; run failed.")
    else:
      html_str += _generate_episode_html(episode, i) + "<hr>"
    if i % 10 == 0:
      print(i)

  html_str += "</body></html>"
  return html_str


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Random agent for testing purposes."""

import random
import string
from android_world.agents import base_agent
from android_world.env import interface
from android_world.env import json_action


def _generate_random_action(
    screen_size: tuple[int, int]
) -> json_action.JSONAction:
  """Generates a random action with a bias towards 'click' action.

  Args:
    screen_size: A tuple (width, height) representing the screen size.

  Returns:
    A dictionary representing the random action.
  """
  scroll_directions = ['up', 'down', 'left', 'right']
  text_characters = string.ascii_letters + string.digits

  # Define action weights.
  action_weights = {
      json_action.CLICK: 0.5,  # Higher weight for 'click'
      json_action.DOUBLE_TAP: 0.05,
      json_action.SCROLL: 0.05,
      json_action.SWIPE: 0.05,
      json_action.NAVIGATE_HOME: 0.05,
      json_action.NAVIGATE_BACK: 0.05,
      json_action.KEYBOARD_ENTER: 0.05,
      json_action.WAIT: 0.05,
      json_action.INPUT_TEXT: 0.05,
  }

  # Select a random action type.
  action_type = random.choices(
      list(action_weights.keys()), weights=list(action_weights.values()), k=1
  )[0]

  # Generate action details based on action type.
  action_details = {'action_type': action_type}

  if action_type in [
      json_action.CLICK,
      json_action.DOUBLE_TAP,
      json_action.SWIPE,
      json_action.INPUT_TEXT,
  ]:
    action_details['x'] = random.randint(0, screen_size[0] - 1)
    action_details['y'] = random.randint(0, screen_size[1] - 1)
    if action_type == json_action.INPUT_TEXT:
      action_details['text'] = ''.join(
          random.choices(text_characters, k=10)
      )  # Random text of length 10
  elif action_type == json_action.SCROLL:
    action_details['direction'] = random.choice(scroll_directions)

  return json_action.JSONAction(**action_details)


class RandomAgent(base_agent.EnvironmentInteractingAgent):
  """A random agent interaction loop for testing purposes."""

  def __init__(
      self,
      env: interface.AsyncEnv,
      name: str = 'RandomAgent',
      verbose: bool = False,
  ):
    """Initializes a RandomAgent.

    Args:
      env: The environment.
      name: The agent name.
      verbose: True if the grounder should produce verbose updates.
    """
    super().__init__(env, name)
    self._verbose = verbose

  def step(self, goal: str) -> base_agent.AgentInteractionResult:
    """See base class."""
    state = self.get_post_transition_state()
    action = _generate_random_action(self.env.device_screen_size)
    self.env.execute_action(action)
    if self._verbose:
      print(action)
    step_data = {
        'raw_screenshot': state.pixels,
        'ui_elements': state.ui_elements,
    }
    done = False
    return base_agent.AgentInteractionResult(
        done,
        step_data,
    )


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""SeeAct agent for Android."""

from typing import Any

from android_world.agents import base_agent
from android_world.agents import seeact_utils
from android_world.env import actuation
from android_world.env import interface
from android_world.env import json_action

SEEACT_ONLINE_SYS_PROMPT = """Imagine that you are imitating humans operating an Android device for a task step by step. At each stage, you can see the Android screen like humans by a screenshot and know the previous actions before the current step decided by yourself through recorded history. You need to decide on the first following action to take. You can tap on an element, long-press an element, swipe, input text, open an app, or use the keyboard enter, home, or back key. (For your understanding, they are like `adb shell input tap`, `adb shell input swipe`, `adb shell input text`, `adb shell am start -n`, and `adb shell input keyevent`). One next step means one operation within these actions. Unlike humans, for typing (e.g., in text areas, text boxes), you should try directly typing the input or selecting the choice, bypassing the need for an initial click. You should not attempt to create accounts, log in or do the final submission. Terminate when you deem the task complete or if it requires potentially harmful actions."""

SEEACT_ONLINE_QUESTION_DESCRIPTION_NEW_EXP4 = """The screenshot below shows the Android screen you see. Follow the following guidance to think step by step before outlining the next action step at the current stage:

(Current Screen Identification)
Firstly, think about what the current screen is.

(Previous Action Analysis)
Secondly, combined with the screenshot, analyze each step of the previous action history and their intention one by one. Particularly, pay more attention to the last step, which may be more related to what you should do now as the next step. Specifically, if the last action involved a INPUT TEXT, always evaluate whether it necessitates a confirmation step, because typically a single INPUT TEXT action does not make effect. (often, simply pressing 'Enter', assuming the default element involved in the last action, unless other clear elements are present for operation).

(Screenshot Details Analysis)
Closely examine the screenshot to check the status of every part of the screen to understand what you can operate with and what has been set or completed. You should closely examine the screenshot details to see what steps have been completed by previous actions even though you are given the textual previous actions. Because the textual history may not clearly and sufficiently record some effects of previous actions, you should closely evaluate the status of every part of the screen to understand what you have done.

(Next Action Based on Android screen and Analysis)
Then, based on your analysis, in conjunction with human phone operation habits and the logic of app design, decide on the following action. And clearly outline which element on the Android screen users will operate with as the first next target element, its detailed location, and the corresponding operation.

To be successful, it is important to follow the following rules:
1. You should only issue a valid action given the current observation.
2. You should only issue one action at a time
3. For handling the select dropdown elements on a screen, it's not necessary for you to provide completely accurate options right now. The full list of options for these elements will be supplied later."""


SEEACT_CHOICE_PROMPT_DICT = {
    "system_prompt": SEEACT_ONLINE_SYS_PROMPT,
    "question_description": SEEACT_ONLINE_QUESTION_DESCRIPTION_NEW_EXP4,
    "referring_description": """(Reiteration)
First, reiterate your next target element, its detailed location, and the corresponding operation.

(Multichoice Question)
Below is a multi-choice question, where the choices are elements on the screen. All elements are arranged in the order based on their height on the screen, from top to bottom (and from left to right). This arrangement can be used to locate them. From the screenshot, find out where and what each one is on the screen, taking into account both their text content and details. Then, determine whether one matches your target element. Please examine the choices one by one. Choose the matching one. If multiple options match your answer, choose the most likely one by re-examining the screenshot, the choices, and your further reasoning. If you would like to perform a swipe action, you can optionally select the choice where you will swipe.""",
    "element_format": """(Final Answer)
Finally, conclude your answer using the format below. Ensure your answer is strictly adhering to the format provided below. Please do not leave any explanation in your answers of the final standardized format part, and this final part should be clear and certain. The element choice, action, and value should be in three separate lines.

Format:

ELEMENT: The uppercase letter of your choice. (No need for **ACTIONS_WITHOUT_ELEMENT**; and optional for SWIPE.)

ACTION: Choose an action from {**VALID_ACTIONS**}.

VALUE: Provide additional input based on ACTION.

The VALUE means:
If ACTION == INPUT TEXT, specify the text to be typed.
If ACTION == SWIPE, specify the direction: up, down, left, right.
If ACTION == OPEN APP, provide the name of the app to be opened.
If ACTION == ANSWER, specify the text of your answer to respond directly to a question or request for information.
For CLICK, LONG PRESS, KEYBOARD ENTER, NAVIGATE HOME, NAVIGATE BACK, WAIT, and TERMINATE, write "None".""".replace(
        "**ACTIONS_WITHOUT_ELEMENT**",
        ", ".join(seeact_utils.ACTIONS_WITHOUT_ELEMENT),
    ).replace(
        "**VALID_ACTIONS**", ", ".join(seeact_utils.VALID_ACTIONS)
    ),
}


def generate_seeact_prompts(
    task: str,
    previous_actions: list[str] | None = None,
    ui_element_choices: list[Any] | None = None,
    additional_guidelines: list[str] | None = None,
) -> tuple[str, str, str]:
  """Generates prompts for the SeeAct setup.

  Args:
      task: Description of the task to be performed.
      previous_actions: A list of actions previously taken.
      ui_element_choices: A list of choices available for the next action,
        derived from the accessibility tree.
      additional_guidelines: Task specific guidelines.

  Returns:
      A list of strings forming the complete prompt for the SeeAct task.
  """
  system_prompt_input = SEEACT_CHOICE_PROMPT_DICT["system_prompt"]
  question_description_input = SEEACT_CHOICE_PROMPT_DICT["question_description"]
  referring_input = SEEACT_CHOICE_PROMPT_DICT["referring_description"]
  element_format_input = SEEACT_CHOICE_PROMPT_DICT["element_format"]

  if additional_guidelines is not None:
    for guideline in additional_guidelines:
      system_prompt_input += f" {guideline}"

  return (
      system_prompt_input,
      seeact_utils.generate_action_generation_prompt(
          task,
          question_description_input,
          previous_actions=previous_actions,
      ),
      seeact_utils.generate_grounding_prompt(
          referring_description=referring_input,
          element_format=element_format_input,
          ui_element_choices=ui_element_choices,
      ),
  )


class SeeAct(base_agent.EnvironmentInteractingAgent):
  """SeeAct agent for Android."""

  def __init__(self, env: interface.AsyncEnv, name: str = "SeeAct"):
    super().__init__(env, name)
    self._actions = []
    self.additional_guidelines = None

  def reset(self, go_home: bool = False) -> None:
    super().reset(go_home)
    self.env.hide_automation_ui()
    self._actions.clear()

  def set_task_guidelines(self, task_guidelines: list[str]) -> None:
    self.additional_guidelines = task_guidelines

  def step(
      self, goal: str, verbose: bool = True
  ) -> base_agent.AgentInteractionResult:
    result = {
        "ui_elements": None,
        "screenshot": None,
        "actionable_elements": None,
        "action_gen_payload": None,
        "action_gen_response": None,
        "action_ground_payload": None,
        "action_ground_response": None,
        "seeact_action": None,
        "action": None,
        "action_description": None,
    }
    state = self.get_post_transition_state()
    result["ui_elements"] = state.ui_elements
    result["screenshot"] = state.pixels
    actionable_elements = seeact_utils.format_and_filter_elements(
        state.ui_elements
    )
    result["actionable_elements"] = actionable_elements
    descriptions = [e.description for e in actionable_elements]
    sys_prompt, action_gen_prompt, action_ground_prompt = (
        generate_seeact_prompts(
            task=goal,
            previous_actions=self._actions,
            ui_element_choices=descriptions,
            additional_guidelines=self.additional_guidelines,
        )
    )

    # Action generation.
    payload = seeact_utils.create_action_generation_messages_payload(
        sys_prompt, action_gen_prompt, state.pixels
    )
    result["action_gen_payload"] = payload
    response = seeact_utils.execute_openai_request(payload)
    action_gen_response = response["choices"][0]["message"]["content"]
    result["action_gen_response"] = action_gen_response
    if verbose:
      (
          seeact_utils.display_prompt(
              result["action_gen_payload"],
              extra_text="\n~~~ANSWER~~~:" + action_gen_response,
          )
      )

    # Grounding.
    payload = seeact_utils.create_grounding_messages_payload(
        sys_prompt,
        action_gen_prompt,
        state.pixels,
        action_gen_response,
        action_ground_prompt,
    )
    result["action_ground_payload"] = payload
    response = seeact_utils.execute_openai_request(payload)
    action_ground_response = response["choices"][0]["message"]["content"]
    result["action_ground_response"] = action_ground_response

    # Parse action and convert to JSONAction.
    try:
      action_ground_response = result["action_ground_response"]
      seeact_action = seeact_utils.extract_element_action_value(
          action_ground_response.split("\n")
      )
      action = seeact_utils.convert_seeact_action_to_json_action(
          seeact_action, actionable_elements
      )
      result["seeact_action"] = seeact_action
      result["action"] = action
    except seeact_utils.ParseActionError as e:
      action_description = f"No Operation with error: {e}"
      action = json_action.JSONAction(action_type=json_action.UNKNOWN)
      result["seeact_action"] = None
      result["action"] = action
    else:
      target_element = seeact_utils.get_referred_element(
          seeact_action, actionable_elements
      )
      action_description = seeact_utils.generate_action_description(
          seeact_action, target_element
      )
      actuation.execute_adb_action(
          action,
          [e.ui_element for e in actionable_elements],
          self.env.logical_screen_size,
          self.env.controller,
      )

    result["action_description"] = action_description
    self._actions.append(action_description)

    if verbose:
      print("=" * 80)
      (
          seeact_utils.display_prompt(
              result["action_ground_payload"],
              extra_text="\n\n~~~~~~~~~ANSWER~~~~~~~~~:"
              + action_description
              + "\n\n",
          )
      )
      print("=" * 80)

    return base_agent.AgentInteractionResult(
        done=action.action_type == json_action.STATUS,
        data=result,
    )


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Agent for human playing."""

import sys

from android_world.agents import base_agent
from android_world.env import interface
from android_world.env import json_action


class HumanAgent(base_agent.EnvironmentInteractingAgent):
  """Human agent; wait for user to indicate they are done."""

  def step(self, goal: str) -> base_agent.AgentInteractionResult:
    del goal
    response = input(
        'Human playing! Hit enter when you are ready for evaluation (or q to'
        ' quit).'
    )
    if response == 'q':
      sys.exit()
    action_details = {'action_type': 'answer', 'text': response}
    self.env.execute_action(json_action.JSONAction(**action_details))

    state = self.get_post_transition_state()
    result = {}
    result['elements'] = state.ui_elements
    result['pixels'] = state.pixels
    return base_agent.AgentInteractionResult(True, result)

  def get_post_transition_state(self) -> interface.State:
    return self.env.get_state()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Some LLM inference interface."""

import abc
import base64
import io
import os
import time
from typing import Any, Optional
import google.generativeai as genai
from google.generativeai import types
from google.generativeai.types import answer_types
from google.generativeai.types import content_types
from google.generativeai.types import generation_types
from google.generativeai.types import safety_types
import numpy as np
from PIL import Image
import requests


ERROR_CALLING_LLM = 'Error calling LLM'


def array_to_jpeg_bytes(image: np.ndarray) -> bytes:
  """Converts a numpy array into a byte string for a JPEG image."""
  image = Image.fromarray(image)
  return image_to_jpeg_bytes(image)


def image_to_jpeg_bytes(image: Image.Image) -> bytes:
  in_mem_file = io.BytesIO()
  image.save(in_mem_file, format='JPEG')
  # Reset file pointer to start
  in_mem_file.seek(0)
  img_bytes = in_mem_file.read()
  return img_bytes


class LlmWrapper(abc.ABC):
  """Abstract interface for (text only) LLM."""

  @abc.abstractmethod
  def predict(
      self,
      text_prompt: str,
  ) -> tuple[str, Optional[bool], Any]:
    """Calling multimodal LLM with a prompt and a list of images.

    Args:
      text_prompt: Text prompt.

    Returns:
      Text output, is_safe, and raw output.
    """


class MultimodalLlmWrapper(abc.ABC):
  """Abstract interface for Multimodal LLM."""

  @abc.abstractmethod
  def predict_mm(
      self, text_prompt: str, images: list[np.ndarray]
  ) -> tuple[str, Optional[bool], Any]:
    """Calling multimodal LLM with a prompt and a list of images.

    Args:
      text_prompt: Text prompt.
      images: List of images as numpy ndarray.

    Returns:
      Text output and raw output.
    """


SAFETY_SETTINGS_BLOCK_NONE = {
    types.HarmCategory.HARM_CATEGORY_HARASSMENT: (
        types.HarmBlockThreshold.BLOCK_NONE
    ),
    types.HarmCategory.HARM_CATEGORY_HATE_SPEECH: (
        types.HarmBlockThreshold.BLOCK_NONE
    ),
    types.HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: (
        types.HarmBlockThreshold.BLOCK_NONE
    ),
    types.HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: (
        types.HarmBlockThreshold.BLOCK_NONE
    ),
}


class GeminiGcpWrapper(LlmWrapper, MultimodalLlmWrapper):
  """Gemini GCP interface."""

  def __init__(
      self,
      model_name: str | None = None,
      max_retry: int = 3,
      temperature: float = 0.0,
      top_p: float = 0.95,
      enable_safety_checks: bool = True,
  ):
    if 'GCP_API_KEY' not in os.environ:
      raise RuntimeError('GCP API key not set.')
    genai.configure(api_key=os.environ['GCP_API_KEY'])
    self.llm = genai.GenerativeModel(
        model_name,
        safety_settings=None
        if enable_safety_checks
        else SAFETY_SETTINGS_BLOCK_NONE,
        generation_config=generation_types.GenerationConfig(
            temperature=temperature, top_p=top_p, max_output_tokens=1000
        ),
    )
    if max_retry <= 0:
      max_retry = 3
      print('Max_retry must be positive. Reset it to 3')
    self.max_retry = min(max_retry, 5)

  def predict(
      self,
      text_prompt: str,
      enable_safety_checks: bool = True,
      generation_config: generation_types.GenerationConfigType | None = None,
  ) -> tuple[str, Optional[bool], Any]:
    return self.predict_mm(
        text_prompt, [], enable_safety_checks, generation_config
    )

  def is_safe(self, raw_response):
    try:
      return (
          raw_response.candidates[0].finish_reason
          != answer_types.FinishReason.SAFETY
      )
    except Exception:  # pylint: disable=broad-exception-caught
      #  Assume safe if the response is None or doesn't have candidates.
      return True

  def predict_mm(
      self,
      text_prompt: str,
      images: list[np.ndarray],
      enable_safety_checks: bool = True,
      generation_config: generation_types.GenerationConfigType | None = None,
  ) -> tuple[str, Optional[bool], Any]:
    counter = self.max_retry
    retry_delay = 1.0
    output = None
    while counter > 0:
      try:
        output = self.llm.generate_content(
            [text_prompt] + [Image.fromarray(image) for image in images],
            safety_settings=None
            if enable_safety_checks
            else SAFETY_SETTINGS_BLOCK_NONE,
            generation_config=generation_config,
        )
        return output.text, True, output
      except Exception as e:  # pylint: disable=broad-exception-caught
        counter -= 1
        print('Error calling LLM, will retry in {retry_delay} seconds')
        print(e)
        if counter > 0:
          # Expo backoff
          time.sleep(retry_delay)
          retry_delay *= 2

    if (output is not None) and (not self.is_safe(output)):
      return ERROR_CALLING_LLM, False, output
    return ERROR_CALLING_LLM, None, None

  def generate(
      self,
      contents: (
          content_types.ContentsType | list[str | np.ndarray | Image.Image]
      ),
      safety_settings: safety_types.SafetySettingOptions | None = None,
      generation_config: generation_types.GenerationConfigType | None = None,
  ) -> tuple[str, Any]:
    """Exposes the generate_content API.

    Args:
      contents: The input to the LLM.
      safety_settings: Safety settings.
      generation_config: Generation config.

    Returns:
      The output text and the raw response.
    Raises:
      RuntimeError:
    """
    counter = self.max_retry
    retry_delay = 1.0
    response = None
    if isinstance(contents, list):
      contents = self.convert_content(contents)
    while counter > 0:
      try:
        response = self.llm.generate_content(
            contents=contents,
            safety_settings=safety_settings,
            generation_config=generation_config,
        )
        return response.text, response
      except Exception as e:  # pylint: disable=broad-exception-caught
        counter -= 1
        print('Error calling LLM, will retry in {retry_delay} seconds')
        print(e)
        if counter > 0:
          # Expo backoff
          time.sleep(retry_delay)
          retry_delay *= 2
    raise RuntimeError(f'Error calling LLM. {response}.')

  def convert_content(
      self,
      contents: list[str | np.ndarray | Image.Image],
  ) -> content_types.ContentsType:
    """Converts a list of contents to a ContentsType."""
    converted = []
    for item in contents:
      if isinstance(item, str):
        converted.append(item)
      elif isinstance(item, np.ndarray):
        converted.append(Image.fromarray(item))
      elif isinstance(item, Image.Image):
        converted.append(item)
    return converted


class Gpt4Wrapper(LlmWrapper, MultimodalLlmWrapper):
  """OpenAI GPT4 wrapper.

  Attributes:
    openai_api_key: The class gets the OpenAI api key either explicitly, or
      through env variable in which case just leave this empty.
    max_retry: Max number of retries when some error happens.
    temperature: The temperature parameter in LLM to control result stability.
    model: GPT model to use based on if it is multimodal.
  """

  RETRY_WAITING_SECONDS = 20

  def __init__(
      self,
      model_name: str,
      max_retry: int = 3,
      temperature: float = 0.0,
  ):
    if 'OPENAI_API_KEY' not in os.environ:
      raise RuntimeError('OpenAI API key not set.')
    self.openai_api_key = os.environ['OPENAI_API_KEY']
    if max_retry <= 0:
      max_retry = 3
      print('Max_retry must be positive. Reset it to 3')
    self.max_retry = min(max_retry, 5)
    self.temperature = temperature
    self.model = model_name

  @classmethod
  def encode_image(cls, image: np.ndarray) -> str:
    return base64.b64encode(array_to_jpeg_bytes(image)).decode('utf-8')

  def predict(
      self,
      text_prompt: str,
  ) -> tuple[str, Optional[bool], Any]:
    return self.predict_mm(text_prompt, [])

  def predict_mm(
      self, text_prompt: str, images: list[np.ndarray]
  ) -> tuple[str, Optional[bool], Any]:
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {self.openai_api_key}',
    }

    payload = {
        'model': self.model,
        'temperature': self.temperature,
        'messages': [{
            'role': 'user',
            'content': [
                {'type': 'text', 'text': text_prompt},
            ],
        }],
        'max_tokens': 1000,
    }

    # Gpt-4v supports multiple images, just need to insert them in the content
    # list.
    for image in images:
      payload['messages'][0]['content'].append({
          'type': 'image_url',
          'image_url': {
              'url': f'data:image/jpeg;base64,{self.encode_image(image)}'
          },
      })

    counter = self.max_retry
    wait_seconds = self.RETRY_WAITING_SECONDS
    while counter > 0:
      try:
        response = requests.post(
            'https://api.openai.com/v1/chat/completions',
            headers=headers,
            json=payload,
        )
        if response.ok and 'choices' in response.json():
          return (
              response.json()['choices'][0]['message']['content'],
              None,
              response,
          )
        print(
            'Error calling OpenAI API with error message: '
            + response.json()['error']['message']
        )
        time.sleep(wait_seconds)
        wait_seconds *= 2
      except Exception as e:  # pylint: disable=broad-exception-caught
        # Want to catch all exceptions happened during LLM calls.
        time.sleep(wait_seconds)
        wait_seconds *= 2
        counter -= 1
        print('Error calling LLM, will retry soon...')
        print(e)
    return ERROR_CALLING_LLM, None, None


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""T3A: Text-only Autonomous Agent for Android."""

from android_world.agents import agent_utils
from android_world.agents import base_agent
from android_world.agents import infer
from android_world.agents import m3a_utils
from android_world.env import adb_utils
from android_world.env import interface
from android_world.env import json_action
from android_world.env import representation_utils

PROMPT_PREFIX = (
    'You are an agent who can operate an Android phone on behalf of a user.'
    " Based on user's goal/request, you may\n"
    '- Answer back if the request/goal is a question (or a chat message), like'
    ' user asks "What is my schedule for today?".\n'
    '- Complete some tasks described in the requests/goals by performing'
    ' actions (step by step) on the phone.\n\n'
    'When given a user request, you will try to complete it step by step. At'
    ' each step, a list of descriptions for most UI elements on the'
    ' current screen will be given to you (each element can be specified by an'
    ' index), together with a history of what you have done in previous steps.'
    ' Based on these pieces of information and the goal, you must choose to'
    ' perform one of the action in the following list (action description'
    ' followed by the JSON format) by outputing the action in the correct JSON'
    ' format.\n'
    '- If you think the task has been completed, finish the task by using the'
    ' status action with complete as goal_status:'
    ' `{{"action_type": "status", "goal_status": "complete"}}`\n'
    '- If you think the task is not'
    " feasible (including cases like you don't have enough information or can"
    ' not perform some necessary actions), finish by using the `status` action'
    ' with infeasible as goal_status:'
    ' `{{"action_type": "status", "goal_status": "infeasible"}}`\n'
    "- Answer user's question:"
    ' `{{"action_type": "answer", "text": "<answer_text>"}}`\n'
    '- Click/tap on a UI element (specified by its index) on the screen:'
    ' `{{"action_type": "click", "index": <target_index>}}`.\n'
    '- Long press on a UI element (specified by its index) on the screen:'
    ' `{{"action_type": "long_press", "index": <target_index>}}`.\n'
    '- Type text into an editable text field (specified by its index), this'
    ' action contains clicking the text field, typing in the text and pressing'
    ' the enter, so no need to click on the target field to start:'
    ' `{{"action_type": "input_text", "text": <text_input>, "index":'
    ' <target_index>}}`\n'
    '- Press the Enter key: `{{"action_type": "keyboard_enter"}}`\n'
    '- Navigate to the home screen: `{{"action_type": "navigate_home"}}`\n'
    '- Navigate back: `{{"action_type": "navigate_back"}}`\n'
    '- Scroll the screen or a scrollable UI element in one of the four'
    ' directions, use the same numeric index as above if you want to scroll a'
    ' specific UI element, leave it empty when scroll the whole screen:'
    ' `{{"action_type": "scroll", "direction": <up, down, left, right>,'
    ' "index": <optional_target_index>}}`\n'
    '- Open an app (nothing will happen if the app is not installed):'
    ' `{{"action_type": "open_app", "app_name": <name>}}`\n'
    '- Wait for the screen to update: `{{"action_type": "wait"}}`\n'
)

GUIDANCE = (
    'Here are some useful guidelines you need to follow:\n'
    'General\n'
    '- Usually there will be multiple ways to complete a task, pick the'
    ' easiest one. Also when something does not work as expected (due'
    ' to various reasons), sometimes a simple retry can solve the problem,'
    " but if it doesn't (you can see that from the history), try to"
    ' switch to other solutions.\n'
    '- Sometimes you may need to navigate the phone to gather information'
    ' needed to complete the task, for example if user asks'
    ' "what is my schedule tomorrow", then you may want to open the calendar'
    ' app (using the `open_app` action), look up information there, answer'
    " user's question (using the `answer` action) and finish (using"
    ' the `status` action with complete as goal_status).\n'
    '- For requests that are questions (or chat messages), remember to use'
    ' the `answer` action to reply to user explicitly before finish!'
    ' Merely displaying the answer on the screen is NOT sufficient (unless'
    ' the goal is something like "show me ...").\n'
    '- If the desired state is already achieved (e.g., enabling Wi-Fi when'
    " it's already on), you can just complete the task.\n"
    'Action Related\n'
    '- Use the `open_app` action whenever you want to open an app'
    ' (nothing will happen if the app is not installed), do not use the'
    ' app drawer to open an app unless all other ways have failed.\n'
    '- Use the `input_text` action whenever you want to type'
    ' something (including password) instead of clicking characters on the'
    ' keyboard one by one. Sometimes there is some default text in the text'
    ' field you want to type in, remember to delete them before typing.\n'
    '- For `click`, `long_press` and `input_text`, the index parameter you'
    ' pick must be VISIBLE in the screenshot and also in the UI element'
    ' list given to you (some elements in the list may NOT be visible on'
    ' the screen so you can not interact with them).\n'
    '- Consider exploring the screen by using the `scroll`'
    ' action with different directions to reveal additional content.\n'
    '- The direction parameter for the `scroll` action can be confusing'
    " sometimes as it's opposite to swipe, for example, to view content at the"
    ' bottom, the `scroll` direction should be set to "down". It has been'
    ' observed that you have difficulties in choosing the correct direction, so'
    ' if one does not work, try the opposite as well.\n'
    'Text Related Operations\n'
    '- Normally to select some text on the screen: <i> Enter text selection'
    ' mode by long pressing the area where the text is, then some of the words'
    ' near the long press point will be selected (highlighted with two pointers'
    ' indicating the range) and usually a text selection bar will also appear'
    ' with options like `copy`, `paste`, `select all`, etc.'
    ' <ii> Select the exact text you need. Usually the text selected from the'
    ' previous step is NOT the one you want, you need to adjust the'
    ' range by dragging the two pointers. If you want to select all text in'
    ' the text field, simply click the `select all` button in the bar.\n'
    "- At this point, you don't have the ability to drag something around the"
    ' screen, so in general you can not select arbitrary text.\n'
    '- To delete some text: the most traditional way is to place the cursor'
    ' at the right place and use the backspace button in the keyboard to'
    ' delete the characters one by one (can long press the backspace to'
    ' accelerate if there are many to delete). Another approach is to first'
    ' select the text you want to delete, then click the backspace button'
    ' in the keyboard.\n'
    '- To copy some text: first select the exact text you want to copy, which'
    ' usually also brings up the text selection bar, then click the `copy`'
    ' button in bar.\n'
    '- To paste text into a text box, first long press the'
    ' text box, then usually the text selection bar will appear with a'
    ' `paste` button in it.\n'
    '- When typing into a text field, sometimes an auto-complete dropdown'
    ' list will appear. This usually indicating this is a enum field and you'
    ' should try to select the best match by clicking the corresponding one'
    ' in the list.\n'
)

ACTION_SELECTION_PROMPT_TEMPLATE = (
    PROMPT_PREFIX
    + '\nThe current user goal/request is: {goal}'
    + '\n\nHere is a history of what you have done so far:\n{history}'
    + '\n\nHere is a list of descriptions for some UI elements on the current'
    ' screen:\n{ui_elements_description}\n'
    + GUIDANCE
    + '{additional_guidelines}'
    + '\n\nNow output an action from the above list in the correct JSON format,'
    ' following the reason why you do that. Your answer should look like:\n'
    'Reason: ...\nAction: {{"action_type":...}}\n\n'
    'Your Answer:\n'
)

SUMMARIZATION_PROMPT_TEMPLATE = (
    PROMPT_PREFIX
    + '\nThe (overall) user goal/request is:{goal}\n'
    'Now I want you to summerize the latest step based on the action you'
    ' pick with the reason and descriptions for the before and after (the'
    ' action) screenshots.\n'
    'Here is the description for the before'
    ' screenshot:\n{before_elements}\n'
    'Here is the description for the after screenshot:\n{after_elements}\n'
    'This is the action you picked: {action}\n'
    'Based on the reason: {reason}\n\n'
    '\nBy comparing the descriptions for the two screenshots and the action'
    ' performed, give a brief summary of this step.'
    ' This summary will be added to action history and used in future action'
    ' selection, so try to include essential information you think that will'
    ' be most useful for future action selection like'
    ' what you intended to do, why, if it worked as expected, if not'
    ' what might be the reason (be critical, the action/reason might not be'
    ' correct), what should/should not be done next and so on. Some more'
    ' rules/tips you should follow:\n'
    '- Keep it short and in one line.\n'
    "- Some actions (like `answer`, `wait`) don't involve screen change,"
    ' you can just assume they work as expected.\n'
    '- Given this summary will be added into action history, it can be used as'
    ' memory to include information that needs to be remembered, or shared'
    ' between different apps.\n\n'
    'Summary of this step: '
)


def _generate_ui_elements_description_list_full(
    ui_elements: list[representation_utils.UIElement],
    screen_width_height_px: tuple[int, int],
) -> str:
  """Generate description for a list of UIElement using full information.

  Args:
    ui_elements: UI elements for the current screen.
    screen_width_height_px: Logical screen size.

  Returns:
    Information for each UIElement.
  """
  tree_info = ''
  for index, ui_element in enumerate(ui_elements):
    if m3a_utils.validate_ui_element(ui_element, screen_width_height_px):
      tree_info += f'UI element {index}: {str(ui_element)}\n'
  return tree_info


def _action_selection_prompt(
    goal: str,
    history: list[str],
    ui_elements_description: str,
    additional_guidelines: list[str] | None = None,
) -> str:
  """Generate the prompt for the action selection.

  Args:
    goal: The current task goal.
    history: Summaries for previous steps.
    ui_elements_description: A list of descriptions for the UI elements.
    additional_guidelines: Task specific guidelines.

  Returns:
    The text prompt for action selection that will be sent to gpt4v.
  """
  if history:
    history = '\n'.join(history)
  else:
    history = 'You just started, no action has been performed yet.'

  extra_guidelines = ''
  if additional_guidelines:
    extra_guidelines = 'For The Current Task:\n'
    for guideline in additional_guidelines:
      extra_guidelines += f'- {guideline}\n'

  return ACTION_SELECTION_PROMPT_TEMPLATE.format(
      history=history,
      goal=goal,
      ui_elements_description=ui_elements_description
      if ui_elements_description
      else 'Not available',
      additional_guidelines=extra_guidelines,
  )


def _summarize_prompt(
    goal: str,
    action: str,
    reason: str,
    before_elements: str,
    after_elements: str,
) -> str:
  """Generate the prompt for the summarization step.

  Args:
    goal: The overall goal.
    action: The action picked for the step.
    reason: The reason why pick the action.
    before_elements: Information for UI elements on the before screenshot.
    after_elements: Information for UI elements on the after screenshot.

  Returns:
    The text prompt for summarization that will be sent to gpt4v.
  """
  return SUMMARIZATION_PROMPT_TEMPLATE.format(
      goal=goal,
      action=action,
      reason=reason,
      before_elements=before_elements if before_elements else 'Not available',
      after_elements=after_elements if after_elements else 'Not available',
  )


class T3A(base_agent.EnvironmentInteractingAgent):
  """Text only autonomous agent for Android."""

  def __init__(
      self,
      env: interface.AsyncEnv,
      llm: infer.LlmWrapper,
      name: str = 'T3A',
  ):
    """Initializes a RandomAgent.

    Args:
      env: The environment.
      llm: The text only LLM.
      name: The agent name.
    """
    super().__init__(env, name)
    self.llm = llm
    self.history = []
    self.additional_guidelines = None

  def reset(self, go_home_on_reset: bool = False):
    super().reset(go_home_on_reset)
    self.env.hide_automation_ui()
    self.history = []

  def set_task_guidelines(self, task_guidelines: list[str]) -> None:
    self.additional_guidelines = task_guidelines

  def step(self, goal: str) -> base_agent.AgentInteractionResult:
    step_data = {
        'before_screenshot': None,
        'after_screenshot': None,
        'before_element_list': None,
        'after_element_list': None,
        'action_prompt': None,
        'action_output': None,
        'action_raw_response': None,
        'summary_prompt': None,
        'summary': None,
        'summary_raw_response': None,
    }
    print('----------step ' + str(len(self.history) + 1))

    state = self.get_post_transition_state()
    logical_screen_size = self.env.logical_screen_size

    ui_elements = state.ui_elements
    before_element_list = _generate_ui_elements_description_list_full(
        ui_elements,
        logical_screen_size,
    )
    # Only save the screenshot for result visualization.
    step_data['before_screenshot'] = state.pixels.copy()
    step_data['before_element_list'] = ui_elements

    action_prompt = _action_selection_prompt(
        goal,
        [
            'Step ' + str(i + 1) + ': ' + step_info['summary']
            for i, step_info in enumerate(self.history)
        ],
        before_element_list,
        self.additional_guidelines,
    )
    step_data['action_prompt'] = action_prompt
    action_output, is_safe, raw_response = self.llm.predict(
        action_prompt,
    )

    if is_safe == False:  # pylint: disable=singleton-comparison
      #  is_safe could be None
      action_output = """Reason: Triggered LLM safety classifier.
Action: {"action_type": "status", "goal_status": "infeasible"}"""

    if not raw_response:
      raise RuntimeError('Error calling LLM in action selection phase.')

    step_data['action_output'] = action_output
    step_data['action_raw_response'] = raw_response

    reason, action = m3a_utils.parse_reason_action_output(action_output)

    # If the output is not in the right format, add it to step summary which
    # will be passed to next step and return.
    if (not reason) or (not action):
      print('Action prompt output is not in the correct format.')
      step_data['summary'] = (
          'Output for action selection is not in the correct format, so no'
          ' action is performed.'
      )
      self.history.append(step_data)

      return base_agent.AgentInteractionResult(
          False,
          step_data,
      )

    print('Action: ' + action)
    print('Reason: ' + reason)

    try:
      converted_action = json_action.JSONAction(
          **agent_utils.extract_json(action),
      )
    except Exception as e:  # pylint: disable=broad-exception-caught
      print('Failed to convert the output to a valid action.')
      print(str(e))
      step_data['summary'] = (
          'Can not parse the output to a valid action. Please make sure to pick'
          ' the action from the list with the correct json format!'
      )
      self.history.append(step_data)

      return base_agent.AgentInteractionResult(
          False,
          step_data,
      )

    if converted_action.action_type in ['click', 'long-press', 'input-text']:
      if converted_action.index is not None and converted_action.index >= len(
          ui_elements
      ):
        print('Index out of range.')
        step_data['summary'] = (
            'The parameter index is out of range. Remember the index must be in'
            ' the UI element list!'
        )
        self.history.append(step_data)
        return base_agent.AgentInteractionResult(False, step_data)
      else:
        # Add mark for the target ui element, just used for visualization.
        m3a_utils.add_ui_element_mark(
            step_data['before_screenshot'],
            ui_elements[converted_action.index],
            converted_action.index,
            logical_screen_size,
            adb_utils.get_physical_frame_boundary(self.env.controller),
            adb_utils.get_orientation(self.env.controller),
        )

    if converted_action.action_type == 'status':
      if converted_action.goal_status == 'infeasible':
        print('Agent stopped since it thinks mission impossible.')
      step_data['summary'] = 'Agent thinks the request has been completed.'
      self.history.append(step_data)
      return base_agent.AgentInteractionResult(
          True,
          step_data,
      )

    if converted_action.action_type == 'answer':
      print('Agent answered with: ' + converted_action.text)

    try:
      self.env.execute_action(converted_action)
    except Exception as e:  # pylint: disable=broad-exception-caught
      print(
          'Some error happened executing the action ',
          converted_action.action_type,
      )
      print(str(e))
      step_data['summary'] = (
          'Some error happened executing the action '
          + converted_action.action_type
      )
      self.history.append(step_data)

      return base_agent.AgentInteractionResult(
          False,
          step_data,
      )

    state = self.get_post_transition_state()
    ui_elements = state.ui_elements

    after_element_list = _generate_ui_elements_description_list_full(
        ui_elements,
        self.env.logical_screen_size,
    )

    # Save screenshot only for result visualization.
    step_data['after_screenshot'] = state.pixels.copy()
    step_data['after_element_list'] = ui_elements

    summary_prompt = _summarize_prompt(
        goal,
        action,
        reason,
        before_element_list,
        after_element_list,
    )

    summary, is_safe, raw_response = self.llm.predict(
        summary_prompt,
    )
    if is_safe == False:  # pylint: disable=singleton-comparison
      #  is_safe could be None
      summary = """Summary triggered LLM safety classifier."""

    step_data['summary_prompt'] = summary_prompt
    step_data['summary'] = (
        f'Action selected: {action}. {summary}'
        if raw_response
        else 'Error calling LLM in summerization phase.'
    )
    print('Summary: ' + summary)
    step_data['summary_raw_response'] = raw_response

    self.history.append(step_data)

    return base_agent.AgentInteractionResult(
        False,
        step_data,
    )


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from typing import Any
from absl.testing import absltest
from android_world.agents import infer
from android_world.agents import t3a
from android_world.utils import test_utils


class MockLlmWrapper(infer.LlmWrapper):
  """Mock LLM wrapper for testing."""

  def __init__(self, mock_responses: list[tuple[str, Any]]):
    self.mock_responses = mock_responses
    self.index = 0

  def predict(
      self,
      text_prompt: str,
  ) -> tuple[str, Any]:
    if self.index < len(self.mock_responses):
      index = self.index
      self.index += 1
      return self.mock_responses[index][0], None, self.mock_responses[index][1]
    else:
      return infer.ERROR_CALLING_LLM, None, None


class T3AInteractionTest(absltest.TestCase):

  def test_step_method_with_completion(self):
    env = test_utils.FakeAsyncEnv()
    mock_llm = MockLlmWrapper([(
        (
            "Reason: completed.\nAction: {'action_type': 'status',"
            " 'goal_status': 'complete'}"
        ),
        "fake_response",
    )])
    agent = t3a.T3A(env, mock_llm)

    goal = "do something"
    step_data = agent.step(goal)

    self.assertTrue(step_data.done)

  def test_history_recording(self):
    env = test_utils.FakeAsyncEnv()
    mock_llm = MockLlmWrapper([
        (
            (
                "Reason: completed.\nAction: {'action_type': 'answer',"
                " 'text': 'mock_response'}"
            ),
            "fake_response_1",
        ),
        (
            "fake_summary",
            "fake_response_1",
        ),
        (
            (
                "Reason: completed.\nAction: {'action_type': 'status',"
                " 'goal_status': 'complete'}"
            ),
            "fake_response_2",
        ),
    ])
    agent = t3a.T3A(env, mock_llm)

    goal = "do something"
    step1_data = agent.step(goal)
    self.assertFalse(step1_data.done)

    step2_data = agent.step(goal)
    self.assertTrue(step2_data.done)
    self.assertLen(agent.history, 2)


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from unittest import mock
from absl.testing import absltest
from android_world.agents import random_agent
from android_world.env import actuation
from android_world.utils import test_utils


class TestGenerateRandomAction(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.screen_size = (1080, 1920)

  def test_action_type_is_valid(self):
    action = random_agent._generate_random_action(self.screen_size)
    self.assertIn(
        action.action_type,
        [
            'click',
            'double_tap',
            'scroll',
            'swipe',
            'navigate_home',
            'navigate_back',
            'wait',
            'input_text',
            'keyboard_enter',
        ],
    )

  def test_coordinates_within_bounds_for_click(self):
    for _ in range(100):
      action = random_agent._generate_random_action(self.screen_size)
      if action.action_type in ['click', 'double_tap', 'swipe']:
        self.assertGreaterEqual(action.x, 0)
        self.assertLess(action.x, self.screen_size[0])
        self.assertGreaterEqual(action.y, 0)
        self.assertLess(action.y, self.screen_size[1])

  def test_text_generated_for_input_text(self):
    for _ in range(100):
      action = random_agent._generate_random_action(self.screen_size)
      if action.action_type == 'input_text':
        self.assertIsInstance(action.text, str)
        self.assertLen(action.text, 10)
        self.assertGreaterEqual(action.x, 0)
        self.assertLess(action.x, self.screen_size[0])
        self.assertGreaterEqual(action.y, 0)
        self.assertLess(action.y, self.screen_size[1])

  def test_direction_valid_for_scroll(self):
    for _ in range(100):
      action = random_agent._generate_random_action(self.screen_size)
      if action.action_type == 'scroll':
        self.assertIn(action.direction, ['up', 'down', 'left', 'right'])


class RandomAgentInteractionTest(absltest.TestCase):

  @mock.patch.object(actuation, 'execute_adb_action')
  def test_step_method(self, mock_execute_adb_action):
    env = test_utils.FakeAsyncEnv()
    agent = random_agent.RandomAgent(env, verbose=True)
    mock_execute_adb_action.return_value = None

    goal = 'do something'
    step_data = agent.step(goal)

    self.assertIn('raw_screenshot', step_data.data)
    self.assertIn('ui_elements', step_data.data)


if __name__ == '__main__':
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import time
from unittest import mock
from absl.testing import absltest
from android_world.agents import infer
import google.ai.generativelanguage as glm
import google.generativeai as genai
from google.generativeai.types import answer_types
from google.generativeai.types import generation_types
import requests


class InferTest(absltest.TestCase):

  def setUp(self):
    super().setUp()
    self.mock_post = mock.patch.object(requests, "post").start()
    self.mock_sleep = mock.patch.object(time, "sleep").start()
    os.environ["OPENAI_API_KEY"] = "fake_api_key"
    os.environ["GCP_API_KEY"] = "fake_api_key"

  def tearDown(self):
    super().tearDown()
    mock.patch.stopall()

  @mock.patch.object(genai.GenerativeModel, "generate_content")
  def test_gemini_gcp(self, mock_generate_content):
    mock_generate_content.return_value = (
        generation_types.GenerateContentResponse.from_response(
            glm.GenerateContentResponse({
                "candidates": (
                    [{"content": {"parts": [{"text": "fake response"}]}}]
                )
            })
        )
    )
    llm = infer.GeminiGcpWrapper(model_name="some_gemini_model")
    text_output, is_safe, _ = llm.predict_mm("fake prompt", [])
    self.assertEqual(text_output, "fake response")
    self.assertEqual(is_safe, True)

  @mock.patch.object(genai.GenerativeModel, "generate_content")
  def test_gemini_gcp_error(self, mock_generate_content):
    mock_generate_content.return_value = (
        generation_types.GenerateContentResponse.from_response(
            glm.GenerateContentResponse(
                {"candidates": [{"content": {"parts": []}}]}
            )
        )
    )
    llm = infer.GeminiGcpWrapper(model_name="some_gemini_model")
    text_output, is_safe, output = llm.predict_mm("fake prompt", [])
    self.assertEqual(text_output, infer.ERROR_CALLING_LLM)
    self.assertIsNone(is_safe)
    self.assertIsNone(output)

  @mock.patch.object(genai.GenerativeModel, "generate_content")
  def test_gemini_gcp_no_candidates(self, mock_generate_content):
    mock_generate_content.return_value = (
        generation_types.GenerateContentResponse.from_response(
            glm.GenerateContentResponse({"candidates": []})
        )
    )
    llm = infer.GeminiGcpWrapper(model_name="some_gemini_model")
    text_output, is_safe, output = llm.predict_mm("fake prompt", [])
    self.assertEqual(text_output, infer.ERROR_CALLING_LLM)
    self.assertIsNone(is_safe)
    self.assertIsNone(output)

  @mock.patch.object(genai.GenerativeModel, "generate_content")
  def test_gemini_gcp_unsafe(self, mock_generate_content):
    mock_generate_content.return_value = (
        generation_types.GenerateContentResponse.from_response(
            glm.GenerateContentResponse({
                "candidates": (
                    [{
                        "content": {"parts": []},
                        "finish_reason": answer_types.FinishReason.SAFETY,
                    }]
                )
            })
        )
    )
    llm = infer.GeminiGcpWrapper(model_name="some_gemini_model")
    text_output, is_safe, _ = llm.predict_mm("fake prompt", [])
    self.assertEqual(text_output, infer.ERROR_CALLING_LLM)
    self.assertEqual(is_safe, False)

  def test_gpt4v(self):
    llm = infer.Gpt4Wrapper(model_name="gpt-4-turbo-2024-04-09")
    mock_200_response = requests.Response()
    mock_200_response.status_code = 200
    mock_200_response._content = (
        b'{"choices": [{"message": {"content": "fake response"}}]}'
    )
    self.mock_post.return_value = mock_200_response

    text_output, _, _ = llm.predict_mm("fake prompt", [])
    self.assertEqual(text_output, "fake response")

  def test_gpt4v_retry(self):
    gpt4v = infer.Gpt4Wrapper(model_name="gpt-4-turbo-2024-04-09")

    mock_429_response = requests.Response()
    mock_429_response.status_code = 429
    mock_429_response._content = (
        b'{"error": {"message": "Error 429: rate limit reached."}}'
    )

    mock_200_response = requests.Response()
    mock_200_response.status_code = 200
    mock_200_response._content = (
        b'{"choices": [{"message": {"content": "ok."}}]}'
    )
    self.mock_post.side_effect = [mock_429_response, mock_200_response]

    gpt4v.predict_mm("fake prompt", [])
    self.mock_sleep.assert_called_once()


if __name__ == "__main__":
  absltest.main()


# Copyright 2024 The android_world Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Utilities for agents."""

import ast
import re
from typing import Any, Optional


def extract_json(s: str) -> Optional[dict[str, Any]]:
  """Extracts JSON from string.

  Args:
    s: A string with a JSON in it. E.g., "{'hello': 'world'}" or from CoT:
      "let's think step-by-step, ..., {'hello': 'world'}".

  Returns:
    JSON object.
  """
  pattern = r'\{.*?\}'
  match = re.search(pattern, s)
  if match:
    try:
      return ast.literal_eval(match.group())
    except (SyntaxError, ValueError) as error:
      print('Cannot extract JSON, skipping due to error %s', error)
      return None
  else:
    return None


# Adding new tasks in AndroidWorld

This section provides a step-by-step guide to extending tasks in AndroidWorld, focusing on the two most common ways Android applications store data: SQLite databases and the file system. We use *Simple Calendar Pro* as an illustrative example for SQLite, and *Markor* as an example for file system storage. This guide will cover:

1. Determining how an app stores its data
2. Exploring an app's internal structure
3. Creating and validating a new task using SQLite
4. Creating and validating a new task using file system storage

## 1. Determining how an app stores its data

Before extending a task in AndroidWorld, it is essential to determine how the app in question stores its data. This guide focuses on SQLite and file system storage, but the principles can be adapted for alternative storage systems like SharedPreferences.

To identify whether an app uses SQLite or the file system:

1. **Access the app's data directory:** Use the following ADB command to navigate to the app‚Äôs data directory:
    ```bash
    adb shell ls data/data/<package_name>/
    ```
    This command lists the files and directories within the app's data directory. Replace `<package_name>` with the app‚Äôs package name (e.g., `com.simplemobiletools.calendar.pro`).

2. **Check for SQLite database files:** Within the app‚Äôs data directory, look for a `databases` folder, which typically contains SQLite database files. For example:
    ```bash
    adb shell ls data/data/com.simplemobiletools.calendar.pro/databases/
    ```
    If you find `.db` files, the app likely uses SQLite for data storage.

3. **Check for file system storage:** If there is no `databases` folder, or if the app stores data outside of the database, look for a `files` directory or other folders containing data files (e.g., text files, images). For example:
    ```bash
    adb shell ls data/data/<package_name>/files/
    ```
    If you find files such as `.txt`, `.json`, or other custom file types, the app is likely using the file system for data storage.

## 2. Exploring an app's internal structure

Once you have identified that an app uses SQLite or file system storage, the next step is to explore the database schema or file contents. This information is used for creating a new task that interacts with the app‚Äôs data.

### Exploring SQLite databases

1. **View the database schema:** Use the following command to examine the schema of a specific table in the SQLite database. The schema provides the structure of the table, including the columns and their data types:
    ```bash
    adb shell "sqlite3 data/data/com.simplemobiletools.calendar.pro/databases/events.db '.schema Events'"
    ```
    This command returns the schema for the `Events` table, showing the structure of calendar events stored by the app. The schema output will list the columns (e.g., `start_ts`, `end_ts`, `title`) and their respective data types (e.g., `INTEGER`, `TEXT`).

2. **Query the database:** You can retrieve data from the SQLite database to understand the types of records stored in it. For example, to view all records in the `events` table:
    ```bash
    adb shell "sqlite3 data/data/com.simplemobiletools.calendar.pro/databases/events.db 'SELECT * FROM events;'"
    ```
    This command outputs the contents of the `events` table, allowing you to inspect actual data entries and understand how they relate to the task you are developing.

### Exploring file system storage

1. **Inspect file contents:** To understand how data is stored in files, you can use ADB commands to view the contents of specific files. For example, to view a text file:
    ```bash
    adb shell cat data/data/<package_name>/files/<file_name>.txt
    ```
    This command outputs the contents of the specified text file, allowing you to understand the data structure and format used by the app.

2. **Download and explore files locally:** If you need to perform more complex analysis, you can pull files from the device to your local machine for inspection. For example:
    ```bash
    adb pull data/data/<package_name>/files/<file_name>.txt /local/directory/
    ```
    This command copies the specified file to your local machine, where you can use tools such as text editors or JSON viewers to explore the file‚Äôs contents.

## 3. Creating and validating a new task using SQLite

With the schema and data in hand, you can now create a new task in AndroidWorld. A key advantage of AndroidWorld is the use of abstractions that simplify task creation. For example below we use the `sqlite_validators.AddMultipleRows` class and `sqlite_validators.validate_rows_addition_integrity` functions, which encapsulate the key logic for interacting with SQLite databases and verifying that new items have been added. This allows developers to focus on defining the specifics of the task without needing to manually handle the intricacies of database operations. Below is a step-by-step guide to extending a task for an app using an SQLite database.

1. **Define the data class:** Start by defining a data class that mirrors the structure of the table you are working with. This class will represent the data rows in Python. For example, for the `Events` table:
    ```python
    @dataclasses.dataclass(frozen=True)
    class CalendarEvent:
      start_ts: int
      end_ts: int
      title: str
      location: str = ''
      description: str = ''
      repeat_interval: int = 0
      repeat_rule: int = 0
    ```
    This class captures the relevant fields from the `Events` table, providing a structured way to handle data within AndroidWorld.

2. **Create a base task class:** Develop a base class that handles common logic for interacting with the SQLite database. This includes specifying the database path, table name, and any necessary validation logic:
    ```python
    class _SimpleCalendar(sqlite_validators.SQLiteApp):
      """Base class for calendar tasks and evaluation logic."""

      app_name_with_db = "simple calendar pro"
      app_names = ("simple calendar pro",)

      db_key = "id"
      db_path = "data/data/com.simplemobiletools.calendar.pro/databases/events.db"
      table_name = "events"
      row_type = CalendarEvent
    ```
    This base class provides a foundation for interacting with the app's SQLite database, specifying key details like the database path and table name. By leveraging `sqlite_validators.AddMultipleRows`, you can define the task and its associated logic with minimal additional code:

3. **Implement task logic:** Create a task-specific class that extends the base class. This class should define the task template, generate parameters, and validate the task:
    ```python
    class SimpleCalendarAddOneEvent(sqlite_validators.AddMultipleRows, _SimpleCalendar):
      """Task for creating a calendar event in Simple Calendar Pro."""

      complexity = 2
      template = (
          "In Simple Calendar Pro, create a calendar event on {year}-{month}-{day}"
          " at {hour}h with the title `{event_title}' and the description"
          " `{event_description}'. The event should last for {duration_mins} mins."
      )

      @classmethod
      def _get_random_target_row(cls) -> CalendarEvent:
        """Generates a random calendar event."""
        return events_generator.generate_event(
            datetime_utils.create_random_october_2023_unix_ts()
        )

      def validate_addition_integrity(
          self,
          before: list[CalendarEvent],
          after: list[CalendarEvent],
          reference_rows: list[CalendarEvent],
      ) -> bool:
        """Validates the integrity of the event addition."""
       return sqlite_validators.validate_rows_addition_integrity(
          before, after, reference_rows,
          compare_fields=[
          'start_ts',
          'end_ts',
          'title',
          'location',
          'description'
      ]
      )

      @classmethod
      def generate_random_params(cls) -> dict[str, Any]:
        """Generate random parameters for a new calendar event task."""
        event = cls._get_random_target_row()
        n_noise_events = random.randint(0, 20)
        return {
           'year': device_constants.DT.year,
           'month': device_constants.DT.month,
           'day': event.start_datetime.day,
           'hour': event.start_datetime.hour,
           'duration_mins': event.duration_mins,
           'event_title': event.title,
           'event_description': event.description,
            sqlite_validators.ROW_OBJECTS: [event],
            sqlite_validators.NOISE_ROW_OBJECTS: generate_noise_events(
                [event], n_noise_events
            )
        }
    ```
    This class defines a specific task (adding a calendar event) and includes the logic for generating task parameters, validating task execution, and managing noise events.

4. **Integrate and test:** After implementing the task, manually test the validation logic to ensure it behaves as expected. AndroidWorld will automatically clear the database and all app state when `initialize_state` and/or `tear_down` are called.

## 4. Creating and validating a new task using file system storage

For apps that use the file system for data storage, you can extend AndroidWorld by creating tasks that interact with files. Below is a step-by-step guide using the *Markor* app as an example.

1. **Define the task class:** Create a class that defines the task of interacting with files. This might include creating, deleting, or modifying files. For example, to create a new note in *Markor*:
    ```python
    class MarkorCreateNote(task_eval.TaskEval):

      app_names = ("markor",)
      complexity = 2
      schema = file_validators.CreateFile.schema
      template = (
          "Create a new note in Markor named {file_name} with the following text:"
          " {text}"
      )

      def __init__(self, params: dict[str, Any]):
        """See base class."""
        super().__init__(params)

        self.create_file_task = file_validators.CreateFile(
            params, device_constants.MARKOR_DATA
        )

      def initialize_task(self, env: interface.AsyncEnv) -> None:
        super().initialize_task(env)
        self.create_file_task.initialize_task(env)

      def is_successful(self, env: interface.AsyncEnv) -> float:
        super().is_successful(env)
        return self.create_file_task.is_successful(env)

      @classmethod
      def generate_random_params(cls) -> dict[str, str | int]:
        return {"file_name": _generate_random_file_name(), "text": _generate_random_file_text()}

      def tear_down(self, env: interface.AsyncEnv) -> None:
        super().tear_down(env)
        self.create_file_task.tear_down(env)
    ```
    This class defines a task for creating a new note in the *Markor* app and uses the `CreateFile` validator to check the successful creation of the note file.

2. **Validate and test:** Similar to SQLite tasks, test the file interaction logic to ensure it behaves correctly.

## Conclusion

By following this guide, developers can extend AndroidWorld to support new tasks for various apps that use SQLite databases or the file system. The process involves determining how an app stores its data, exploring the app‚Äôs internal structure, and then creating a task using the existing evaluation logic. By leveraging these common building blocks, developers can extend AndroidWorld to a larger set of applications and tasks.