<div align="center">   
  
# DAIR-V2X and OpenDAIRV2X: Towards General and Real-World Cooperative Autonomous Driving

</div>

<h3 align="center">
    <a href="https://thudair.baai.ac.cn/index">Project Page</a> |
    <a href="#dataset">Dataset Download</a> |
    <a href="https://arxiv.org/abs/2204.05575">arXiv</a> |
    <a href="https://github.com/AIR-THU/DAIR-V2X/">OpenDAIRV2X</a> 
</h3>

<br><br>
![teaser](resources/deployment-visual.png)

## Table of Contents:
1. [Highlights](#high)
2. [News](#news)
3. [Dataset Download](#dataset)
4. [Getting Started](#start)
5. [Major Features](#features)
6. [Benchmark](#benchmark)
7. [Citation](#citation)
8. [Contaction](#contaction)

## Highlights <a name="high"></a>
- DAIR-V2X: The first real-world dataset for research on vehicle-to-everything autonomous driving. It comprises a total of 71,254 frames of image data and 71,254 frames of point cloud data.
- V2X-Seq:  The first large-scale, real-world, and sequential V2X dataset, which includes data frames, trajectories, vector maps, and traffic lights captured from natural scenery.  V2X-Seq comprises two parts: V2X-Seq-SPD (Sequential Perception Dataset), which includes more than 15,000 frames captured from 95 scenarios; V2X-Seq-TFD (Trajectory Forecasting Dataset), which contains about 80,000 infrastructure-view scenarios, 80,000 vehicle-view scenarios, and 50,000 cooperative-view scenarios captured from 28 intersections' areas, covering 672 hours of data.
- OpenDAIR-V2X: An open-sourced framework for supporting the research on  vehicle-to-everything autonomous driving.

## News <a name="news"></a>
* [2024.04] 🔥 Our [UniV2X](https://arxiv.org/abs/2404.00717) available on arXiv. UniV2X is the first end-to-end framework that unifies all vital modules as well as diverse driving views into a network for cooperative autonomous driving. Code will be [here](https://github.com/AIR-THU/UniV2X).
* [2024.03] 🔥 Our new Dataset RCooper, a real-world large-scale dataset for roadside cooperative perception, has been accepted by CVPR2024! Please follow [RCooper](https://github.com/AIR-THU/DAIR-RCooper) for the latest news.
* [2024.01] 🔥 Our [QUEST](https://arxiv.org/abs/2308.01804) has been been accpeted by ICRA2024.
* [2023.10] We have released the code for [V2X-Seq-SPD](https://github.com/AIR-THU/DAIR-V2X) and [V2X-Seq-TFD](https://github.com/AIR-THU/DAIR-V2X-Seq).
* [2023.09] Our [FFNET](https://github.com/haibao-yu/FFNet-VIC3D) has been accpeted by Neurips2023.
* [2023.05] V2X-Seq dataset is availale [here](https://thudair.baai.ac.cn/index). It can be unlimitedly downloaded within mainland China. Example dataset can be downloaded directly.
* [2023.03] Our new dataset "V2X-Seq: A Large-Scale Sequential Dataset for Vehicle-Infrastructure Cooperative Perception and Forecasting" has been accepted by CVPR2023. Congratulations! We will release the dataset sooner. Please follow [DAIR-V2X-Seq](https://github.com/AIR-THU/DAIR-V2X-Seq) for the latest news.
* [2023.03] We have released training code for our [FFNET](https://github.com/haibao-yu/FFNet-VIC3D), and our OpenDAIRV2X now supports evaluating [FFNET](https://github.com/haibao-yu/FFNet-VIC3D).
* [2022.11] We have held the first [VIC3D Object Detection challenge](https://aistudio.baidu.com/aistudio/competition/detail/522/0/introduction). 
* [2022.07] We have released the OpenDAIRV2X codebase v1.0.0.
  The current version can faciliate the researchers to use the DAIR-V2X dataset and reproduce the benchmarks.
* [2022.03] Our Paper "DAIR-V2X: A Large-Scale Dataset for Vehicle-Infrastructure Cooperative 3D Object Detection" has been accepted by CVPR2022.
  Arxiv version could be seen [here](https://arxiv.org/abs/2204.05575).
* [2022.02] DAIR-V2X dataset is availale [here](https://thudair.baai.ac.cn/index).
  It can be unlimitedly downloaded within mainland China. 

## Dataset Download <a name="dataset"></a>
 - [DAIR-V2X-I](https://thudair.baai.ac.cn/roadtest)
 - [DAIR-V2X-V](https://thudair.baai.ac.cn/cartest)
 - [DAIR-V2X-C](https://thudair.baai.ac.cn/coop-forecast)
 - [V2X-Seq-SPD](https://thudair.baai.ac.cn/coop-forecast)
 - [V2X-Seq-TFD](https://thudair.baai.ac.cn/cooplocus)
 - DAIR-V2X-C-Example: [google_drive_link](https://drive.google.com/file/d/1y8bGwI63TEBkDEh2JU_gdV7uidthSnoe/view?usp=drive_link)
 - V2X-Seq-SPD-Example: [google_drive_link](https://drive.google.com/file/d/1gjOmGEBMcipvDzu2zOrO9ex_OscUZMYY/view?usp=drive_link)
 - V2X-Seq-TFD-Example: [google_drive_link](https://drive.google.com/file/d/1-Ri92z6rkH14vAOFOx5xhfzvFxBptgAA/view?usp=sharing)

## Getting Started <a name="start"></a>
Please refer to [getting_started.md](docs/get_started.md) for the usage and benchmarks reproduction of DAIR-V2X dataset.

Please refer to [get_started_spd.md](docs/get_started_spd.md) for the usage and benchmarks reproduction of V2X-Seq-SPD dataset.

## Benchmark <a name="benchmark"></a>

You can find more benchmark in [SV3D-Veh](configs/sv3d-veh), [SV3D-Inf](configs/sv3d-inf), [VIC3D](configs/vic3d) and [VIC3D-SPD](configs/vic3d-spd/). 

Part of the VIC3D detection benchmarks based on DAIR-V2X-C dataset:

| Modality  | Fusion  | Model      | Dataset   | AP-3D (IoU=0.5)  |        |        |         | AP-BEV (IoU=0.5)  |       |        |         |   AB   |
| :-------: | :-----: | :--------: | :-------: | :----: | :----: | :----: | :-----: | :-----: | :---: | :----: | :-----: | :----: |
|           |         |            |           | Overall | 0-30m | 30-50m | 50-100m | Overall | 0-30m | 30-50m | 50-100m |        |
| Image     | VehOnly | ImvoxelNet | VIC-Sync  |    9.13   | 19.06         | 5.23  | 0.41   | 10.96   | 21.93           | 7.28  | 0.78   | 0     |
|       | Late-Fusion | ImvoxelNet | VIC-Sync  |   18.77   | 33.47         | 9.43  | 8.62    | 24.85   | 39.49           | 14.68  | 14.96   | 309.38|                    
|Pointcloud | VehOnly | PointPillars | VIC-Sync | 48.06  | 47.62 | 63.51  | 44.37   | 52.24   | 30.55 | 66.03  |  48.36  | 0      |     
|  | Early Fusion | PointPillars | VIC-Sync    | 62.61                    | 64.82                  | 68.68                   | 56.57                    | 68.91                     | 68.92                   | 73.64                    | 65.66                     | 1382275.75 |
|       | Late-Fusion | PointPillars | VIC-Sync | 56.06  | 55.69 | 68.44  | 53.60   | 62.06   | 61.52 | 72.53  | 60.57   | 478.61 |                                                     
|       | Late-Fusion | PointPillars |VIC-Async-2| 52.43 | 51.13 | 67.09  | 49.86   | 58.10   | 57.23 | 70.86  | 55.78   | 478.01 |
|       | TCLF        | PointPillars |VIC-Async-2| 53.37 | 52.41 | 67.33  | 50.87   | 59.17   | 58.25 | 71.20  | 57.43   | 897.91 |

Part of the VIC3D detection and tracking benchmarks based on V2X-Seq-SPD:

| Modality | Fusion      | Model       | Dataset      | AP 3D (Iou=0.5) | AP BEV (Iou=0.5) | MOTA   | MOTP   | AMOTA  | AMOTP  | IDs | AB(Byte) |                                                                                        
|----------|-------------|-------------|--------------|-----------------|------------------|--------|--------|--------|--------|-----|----------|
| Image    | Veh Only    | ImvoxelNet  | VIC-Sync-SPD | 8.55            | 10.32            | 10.19 | 57.83 | 1.36 | 14.75 | 4   |          |
| Image    | Late Fusion | ImvoxelNet  | VIC-Sync-SPD | 17.31           | 22.53            | 21.81 | 56.67 | 6.22 | 25.24 | 47  | 3300     |


## TODO List <a name="TODO List"></a>
- [x] Dataset Release
- [x] Dataset API
- [x] Evaluation Code
- [x] All detection benchmarks based on DAIR-V2X dataset
- [x] Benchmarks for detection and tracking tasks with different fusion strategies for Image based on V2X-Seq-SPD dataset
- [ ] All benchmarks for detection and tracking tasks based on V2X-Seq-SPD dataset


## Citation <a name="citation"></a>
Please consider citing our paper if the project helps your research with the following BibTex:
```bibtex
@inproceedings{v2x-seq,
  title={V2X-Seq: A large-scale sequential dataset for vehicle-infrastructure cooperative perception and forecasting},
  author={Yu, Haibao and Yang, Wenxian and Ruan, Hongzhi and Yang, Zhenwei and Tang, Yingjuan and Gao, Xu and Hao, Xin and Shi, Yifeng and Pan, Yifeng and Sun, Ning and Song, Juan and Yuan, Jirui and Luo, Ping and Nie, Zaiqing},
  booktitle={Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition},
  year={2023},
}
```
```bibtex
@inproceedings{dair-v2x,
  title={Dair-v2x: A large-scale dataset for vehicle-infrastructure cooperative 3d object detection},
  author={Yu, Haibao and Luo, Yizhen and Shu, Mao and Huo, Yiyi and Yang, Zebang and Shi, Yifeng and Guo, Zhenglong and Li, Hanyu and Hu, Xing and Yuan, Jirui and Nie, Zaiqing},
  booktitle={Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition},
  pages={21361--21370},
  year={2022}
}
```

## Contaction <a name="contaction"></a>

If any questions and suggenstations, please email to dair@air.tsinghua.edu.cn. 

## Related Resources

[![Awesome](https://awesome.re/badge.svg)](https://awesome.re)

- [DAIR-V2X-Seq](https://github.com/AIR-THU/DAIR-V2X-Seq) (:rocket:Ours!)
- [FFNET](https://github.com/haibao-yu/FFNet-VIC3D) (:rocket:Ours!)
- [mmdet3d](https://github.com/open-mmlab/mmdetection3d)
- [pypcd](https://github.com/dimatura/pypcd)
- [AB3DMOT](https://github.com/xinshuoweng/AB3DMOT)



import os
import os.path as osp
import argparse
from vis_utils import get_cam_8_points, read_json, vis_label_in_img


def vis_label_in_image(path, save_path):
    """
    path: The root directory of the visualization image, infrastructure-side/vehicle-side.
    save_path: Output path of the visualized image.
    """
    # get data_info
    path_data_infos = read_json(osp.join(path, "data_info.json"))
    for data_info in path_data_infos:
        # Get the path of the image to be visualized.
        image_path = osp.join(path, data_info["image_path"])
        if osp.basename(path) in ["infrastructure-side", "single-infrastructure-side"]:
            # visualize infrastructure-side image
            label_path = osp.join(path, data_info["label_camera_std_path"])
            lidar2cam_path = osp.join(
                path, data_info["calib_virtuallidar_to_camera_path"]
            )  # extrinsic of lidar_to_camera
        else:
            # visualize vehicle-side image
            label_path = osp.join(path, data_info["label_camera_std_path"])
            lidar2cam_path = osp.join(path, data_info["calib_lidar_to_camera_path"])  # extrinsic of lidar_to_camera

        labels = []
        oris = read_json(label_path)
        for ori in oris:
            if "rotation" not in ori.keys():
                ori["rotation"] = 0.0
            labels.append([ori["3d_dimensions"], ori["3d_location"], ori["rotation"]])

        cam_instrinsic_path = osp.join(path, data_info["calib_camera_intrinsic_path"])  # intrinsic pf camera

        camera_8_points_list = get_cam_8_points(
            labels, lidar2cam_path
        )  # Convert the label to the 8 points of the cameara coordinate system
        vis_label_in_img(camera_8_points_list, image_path, cam_instrinsic_path, save_path)


def add_arguments(parser):
    parser.add_argument(
        "--path",
        type=str,
        default="./cooperative-vehicle-infrastructure/vehicle-side",
    )
    parser.add_argument("--id", type=int, default=0)
    parser.add_argument("--output-file", type=str, default="./veh")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    add_arguments(parser)
    args = parser.parse_args()

    if not osp.exists(args.output_file):
        os.mkdir(args.output_file)

    vis_label_in_image(args.path, args.output_file)


import os
import json
import argparse
import pandas as pd


def read_json(path_json):
    with open(path_json, "r") as load_f:
        my_json = json.load(load_f)
    return my_json


def write_json(path_json, new_dict):
    with open(path_json, "w") as f:
        json.dump(new_dict, f)


def gen_sus_label_from_dair_v2x(root_path, output_path):
    """
        Generate SUS visualization file for DAIR-V2X label.(Take vehicle-side for example.)

        Args:
            root_path: V2X-Seq-SPD/
            output_path： SUSTechPOINTS/data/output/
            
        Returns:
            None
    """
    if not os.path.exists(output_path):
        os.makedirs(output_path + '/label')
        os.makedirs(output_path + '/lidar')
        os.makedirs(output_path + '/calib')
        os.makedirs(output_path + '/camera/front')
        os.makedirs(output_path + '/camera/left')
        os.makedirs(output_path + '/camera/right')

    veh_label_name = 'lidar'

    veh_img_path = os.path.join(root_path, 'vehicle-side/image')
    veh_pt_path = os.path.join(root_path, 'vehicle-side/velodyne')
    veh_label_path = os.path.join(root_path, 'vehicle-side/label', veh_label_name)

    list_input_file = os.listdir(veh_label_path)
    for file_name in list_input_file:
        veh_frame_id = file_name.split('.')[0]

        os.system("cp %s/%s.jpg %s/camera/front/%s.jpg" % (
            veh_img_path, veh_frame_id, output_path, veh_frame_id))
        os.system("cp %s/%s.pcd %s/lidar/%s.pcd" % (
            veh_pt_path, veh_frame_id, output_path, veh_frame_id))

        cur_veh_label_path = os.path.join(veh_label_path, file_name)

        output_label_file_path = output_path + '/label/' + file_name
        data_json = read_json(cur_veh_label_path)
        lidar_3d_list = []
        for i in data_json:
            lidar_3d_data = {}
            lidar_3d_data["obj_id"] = str(i["track_id"])
            lidar_3d_data["obj_type"] = str(i["type"])
            lidar_3d_data["psr"] = {}
            lidar_3d_data["psr"]["position"] = {}
            lidar_3d_data["psr"]["position"]["x"] = float(i["3d_location"]["x"])
            lidar_3d_data["psr"]["position"]["y"] = float(i["3d_location"]["y"])
            lidar_3d_data["psr"]["position"]["z"] = float(i["3d_location"]["z"])
            lidar_3d_data["psr"]["rotation"] = {}
            lidar_3d_data["psr"]["rotation"]["x"] = 0.0
            lidar_3d_data["psr"]["rotation"]["y"] = 0.0
            lidar_3d_data["psr"]["rotation"]["z"] = float(i["rotation"])
            lidar_3d_data["psr"]["scale"] = {}
            lidar_3d_data["psr"]["scale"]["x"] = float(i["3d_dimensions"]["l"])
            lidar_3d_data["psr"]["scale"]["y"] = float(i["3d_dimensions"]["w"])
            lidar_3d_data["psr"]["scale"]["z"] = float(i["3d_dimensions"]["h"])
            # print(lidar_3d_data)
            lidar_3d_list.append(lidar_3d_data)
        write_json(output_label_file_path, lidar_3d_list)


def gen_sus_from_kitti_file(side_flag, only_gen_label, dair_datasets_path, input_file_path, output_path):
    """
        Generate SUS visualization file for DAIR-V2X kitti label

        Args:
            side_flag: 'coop','veh','inf', 'i2v'
            dair_datasets_path: V2X-Seq-SPD/
            input_path: kitti_label_file (such as: cooperative-vehicle-infrastructure/infrastructure-side/validation/0003/label_02/0003.txt)            
            output_path: SUSTechPOINTS/data/output/

        Returns:
            None
    """

    if os.path.exists(output_path):
        os.system('rm -rf %s' % (output_path))

    output_path_label = os.path.join(output_path, 'label')
    os.makedirs(output_path_label)

    if side_flag == 'i2v':
        coop_data_info_file_path = os.path.join(dair_datasets_path, 'cooperative/data_info.json')
        with open(coop_data_info_file_path) as f:
            coop_data_info = json.load(f)
        frameid_i2v_dict = {}
        for coop_data in coop_data_info:
            frameid_i2v_dict[coop_data['infrastructure_frame']] = coop_data['vehicle_frame']

    if not only_gen_label:
        output_path_lidar = os.path.join(output_path, 'lidar')
        output_path_camera_front = os.path.join(output_path, 'camera/front')
        os.makedirs(output_path_lidar)
        os.makedirs(output_path_camera_front)

        if side_flag == 'inf':
            img_path = os.path.join(dair_datasets_path, 'infrastructure-side/image')
            velodyne_path = os.path.join(dair_datasets_path, 'infrastructure-side/velodyne')
        elif side_flag == 'veh' or side_flag == 'coop':
            img_path = os.path.join(dair_datasets_path, 'vehicle-side/image')
            velodyne_path = os.path.join(dair_datasets_path, 'vehicle-side/velodyne')
        elif side_flag == 'i2v':
            img_path = os.path.join(dair_datasets_path, 'infrastructure-side/image')
            velodyne_path = os.path.join(dair_datasets_path, 'vehicle-side/velodyne')

    if side_flag == 'coop':
        names = ['frame', 'type', 'track_id', 'truncated', 'occlude', 'alpha', 'bbox-left', 'bbox-top',
                 'bbox-right', 'bbox-bottom', 'h', 'w', 'l', 'camera_bottom_center_x', 'camera_bottom_center_y',
                 'camera_bottom_center_z', 'rotation_y', 'lidar_center_x', 'lidar_center_y', 'lidar_center_z',
                 'rotation_z', 'pointcloud_timestamp', 'score_dtc', 'score_tracking', 'token', 'from_side',
                 'veh_pointcloud_timestamp', 'inf_pointcloud_timestamp', 'veh_frame_id', 'inf_frame_id', 'veh_track_id',
                 'inf_track_id', 'veh_dtc_score', 'inf_dtc_score', 'veh_track_score', 'inf_track_score', 'veh_tocken', 'inf_tocken'
                 ]
    else:
        names = ['frame', 'type', 'track_id', 'truncated', 'occlude', 'alpha', 'bbox-left', 'bbox-top',
                 'bbox-right', 'bbox-bottom', 'h', 'w', 'l', 'camera_bottom_center_x', 'camera_bottom_center_y',
                 'camera_bottom_center_z', 'rotation_y', 'lidar_center_x', 'lidar_center_y', 'lidar_center_z',
                 'rotation_z', 'pointcloud_timestamp', 'score_dtc', 'score_tracking', 'token'
                 ]

    df = pd.read_csv(input_file_path, sep=' ', header=None, names=names)
    for frame in list(set(df['frame'])):
        from_frame_id = '%06d' % int(frame)
        to_frame_id = from_frame_id

        if side_flag == 'i2v':
            to_frame_id = frameid_i2v_dict[from_frame_id]

        if not only_gen_label:
            # lidar/camera
            os.system("cp %s/%s.jpg %s/%s.jpg" % (
                img_path, from_frame_id, output_path_camera_front, to_frame_id))
            os.system("cp %s/%s.pcd %s/%s.pcd" % (
                velodyne_path, to_frame_id, output_path_lidar, to_frame_id))

            # label
        output_file_path = output_path_label + '/' + to_frame_id + '.json'
        m = df[df['frame'] == frame]
        lidar_3d_list = []
        for i, row in m.iterrows():
            lidar_3d_data = {}

            lidar_3d_data["obj_id"] = str(int(row['track_id'])).zfill(6)
            lidar_3d_data["obj_type"] = row['type']
            if side_flag == 'coop':
                lidar_3d_data["obj_type"] = row['type'] + ' ' + row['from_side']

            lidar_3d_data["psr"] = {}
            lidar_3d_data["psr"]["position"] = {}
            lidar_3d_data["psr"]["position"]["x"] = float(row['lidar_center_x'])
            lidar_3d_data["psr"]["position"]["y"] = float(row['lidar_center_y'])
            lidar_3d_data["psr"]["position"]["z"] = float(row['lidar_center_z'])
            lidar_3d_data["psr"]["rotation"] = {}
            lidar_3d_data["psr"]["rotation"]["x"] = 0.0
            lidar_3d_data["psr"]["rotation"]["y"] = 0.0
            lidar_3d_data["psr"]["rotation"]["z"] = float(row['rotation_z'])
            lidar_3d_data["psr"]["scale"] = {}
            lidar_3d_data["psr"]["scale"]["x"] = float(row['l'])
            lidar_3d_data["psr"]["scale"]["y"] = float(row['w'])
            lidar_3d_data["psr"]["scale"]["z"] = float(row['h'])
            # print(lidar_3d_data)
            lidar_3d_list.append(lidar_3d_data)
        write_json(output_file_path, lidar_3d_list)


if __name__ == '__main__':
    parser = argparse.ArgumentParser("3d visualization.")
    parser.add_argument('--dair_datasets_path', type=str, default='V2X-Seq-SPD')
    parser.add_argument('--input_file_path', type=str, default='')
    parser.add_argument('--output_path', type=str, default='')
    parser.add_argument('--side_flag', type=str, default='coop')  # 'veh','inf','coop','i2v'
    parser.add_argument('--only_gen_label', action="store_true")

    args = parser.parse_args()
    print('begin visual.')

    # visualization
    # #veh
    # args.output_path = 'visualize/coop_seq0000'      
    # gen_sus_label_from_dair_v2x(args.dair_datasets_path,args.output_path)

    # kitti file
    args.side_flag = "coop"  # 'veh','inf','coop','i2v'
    args.only_gen_label = True
    args.input_file_path = 'kitti/cooperative-vehicle-infrastructure/cooperative/training/0000/label_02/0000.txt'
    args.output_path = 'visualize/coop_seq0000'
    gen_sus_from_kitti_file(args.side_flag, args.only_gen_label, args.dair_datasets_path, args.input_file_path, args.output_path)


#!/usr/bin/env python
# coding: utf-8
import os
import json
import errno
import numpy as np
import cv2
import pickle


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise


def id_to_str(id, digits=6):
    result = ""
    for i in range(digits):
        result = str(id % 10) + result
        id //= 10
    return result


def load_pkl(path):
    with open(path, "rb") as f:
        return pickle.load(f)


def read_json(path):
    with open(path, "r") as f:
        my_json = json.load(f)
        return my_json


def get_label(label):
    h = float(label[0]["h"])
    w = float(label[0]["w"])
    length = float(label[0]["l"])
    x = float(label[1]["x"])
    y = float(label[1]["y"])
    z = float(label[1]["z"])
    rotation_y = float(label[-1])
    return h, w, length, x, y, z, rotation_y


def get_lidar2cam(calib):
    if "Tr_velo_to_cam" in calib.keys():
        velo2cam = np.array(calib["Tr_velo_to_cam"]).reshape(3, 4)
        r_velo2cam = velo2cam[:, :3]
        t_velo2cam = velo2cam[:, 3].reshape(3, 1)
    else:
        r_velo2cam = np.array(calib["rotation"])
        t_velo2cam = np.array(calib["translation"])
    return r_velo2cam, t_velo2cam


def get_cam_calib_intrinsic(calib_path):
    my_json = read_json(calib_path)
    cam_K = my_json["cam_K"]
    calib = np.zeros([3, 4])
    calib[:3, :3] = np.array(cam_K).reshape([3, 3], order="C")

    return calib


def plot_rect3d_on_img(img, num_rects, rect_corners, color=(0, 255, 0), thickness=1):
    """Plot the boundary lines of 3D rectangular on 2D images.

    Args:
        img (numpy.array): The numpy array of image.
        num_rects (int): Number of 3D rectangulars.
        rect_corners (numpy.array): Coordinates of the corners of 3D
            rectangulars. Should be in the shape of [num_rect, 8, 2].
        color (tuple[int]): The color to draw bboxes. Default: (0, 255, 0).
        thickness (int, optional): The thickness of bboxes. Default: 1.
    """
    line_indices = ((0, 1), (0, 3), (0, 4), (1, 2), (1, 5), (3, 2), (3, 7), (4, 5), (4, 7), (2, 6), (5, 6), (6, 7))
    for i in range(num_rects):
        corners = rect_corners[i].astype(np.int)

        for start, end in line_indices:
            radius = 5
            color = (0, 0, 250)
            thickness = 1
            cv2.circle(img, (corners[start, 0], corners[start, 1]), radius, color, thickness)
            cv2.circle(img, (corners[end, 0], corners[end, 1]), radius, color, thickness)
            color = (0, 255, 0)
            cv2.line(
                img,
                (corners[start, 0], corners[start, 1]),
                (corners[end, 0], corners[end, 1]),
                color,
                thickness,
                cv2.LINE_AA,
            )

    return img.astype(np.uint8)


def get_rgb(img_path):
    return cv2.imread(img_path)


def points_cam2img(points_3d, calib_intrinsic, with_depth=False):
    """Project points from camera coordicates to image coordinates.

    points_3d: N x 8 x 3
    calib_intrinsic: 3 x 4
    return: N x 8 x 2
    """
    points_num = list(points_3d.shape)[:-1]
    points_shape = np.concatenate([points_num, [1]], axis=0)
    points_2d_shape = np.concatenate([points_num, [3]], axis=0)
    # assert len(calib_intrinsic.shape) == 2, 'The dimension of the projection' \
    #                                  f' matrix should be 2 instead of {len(calib_intrinsic.shape)}.'
    # d1, d2 = calib_intrinsic.shape[:2]
    # assert (d1 == 3 and d2 == 3) or (d1 == 3 and d2 == 4) or (
    #         d1 == 4 and d2 == 4), 'The shape of the projection matrix' \
    #                               f' ({d1}*{d2}) is not supported.'
    # if d1 == 3:
    #     calib_intrinsic_expanded = np.eye(4, dtype=calib_intrinsic.dtype)
    #     calib_intrinsic_expanded[:d1, :d2] = calib_intrinsic
    #     calib_intrinsic = calib_intrinsic_expanded

    # previous implementation use new_zeros, new_one yeilds better results

    points_4 = np.concatenate((points_3d, np.ones(points_shape)), axis=-1)
    point_2d = np.matmul(calib_intrinsic, points_4.T.swapaxes(1, 2).reshape(4, -1))
    point_2d = point_2d.T.reshape(points_2d_shape)
    point_2d_res = point_2d[..., :2] / point_2d[..., 2:3]

    if with_depth:
        return np.cat([point_2d_res, point_2d[..., 2:3]], dim=-1)
    return point_2d_res


def compute_corners_3d(dim, rotation_y):
    c, s = np.cos(rotation_y), np.sin(rotation_y)
    R = np.array([[c, -s, 0], [s, c, 0], [0, 0, 1]], dtype=np.float32)
    # R = np.array([[c, 0, s], [0, 1, 0], [-s, 0, c]], dtype=np.float32)
    l, w, h = dim[0], dim[1], dim[2]
    x_corners = [-l / 2, l / 2, l / 2, -l / 2, -l / 2, l / 2, l / 2, -l / 2]
    y_corners = [w / 2, w / 2, w / 2, w / 2, -w / 2, -w / 2, -w / 2, -w / 2]
    z_corners = [h, h, 0, 0, h, h, 0, 0]
    corners = np.array([x_corners, y_corners, z_corners], dtype=np.float32)
    corners_3d = np.dot(R, corners).transpose(1, 0)

    return corners_3d


def compute_box_3d(dim, location, rotation_y):
    # dim: 3
    # location: 3
    # rotation_y: 1
    # return: 8 x 3
    corners_3d = compute_corners_3d(dim, rotation_y)
    corners_3d = corners_3d + np.array(location, dtype=np.float32).reshape(1, 3)

    return corners_3d


def get_cam_8_points(labels, calib_lidar2cam_path):
    """Plot the boundaries of 3D BBox with label on 2D image.

        Args:
            label: h, w, l, x, y, z, rotaion
            image_path: Path of image to be visualized
            calib_lidar2cam_path: Extrinsic of lidar2camera
            calib_intrinsic_path: Intrinsic of camera
            save_path: Save path for visualized images

    ..code - block:: none


                         front z
                              /
                             /
               (x0, y0, z1) + -----------  + (x1, y0, z1)
                           /|            / |
                          / |           /  |
            (x0, y0, z0) + ----------- +   + (x1, y1, z1)
                         |  /      .   |  /
                         | / oriign    | /
            (x0, y1, z0) + ----------- + -------> x right
                         |             (x1, y1, z0)
                         |
                         v
                    down y

    """
    calib_lidar2cam = read_json(calib_lidar2cam_path)
    r_velo2cam, t_velo2cam = get_lidar2cam(calib_lidar2cam)
    camera_8_points_list = []
    for label in labels:
        h, w, l, x, y, z, yaw_lidar = get_label(label)
        z = z - h / 2
        bottom_center = [x, y, z]
        obj_size = [l, w, h]
        lidar_8_points = compute_box_3d(obj_size, bottom_center, yaw_lidar)
        # lidar_8_points = np.matrix([[x - l / 2, y + w / 2, z + h],
        #                             [x + l / 2, y + w / 2, z + h],
        #                             [x + l / 2, y + w / 2, z],
        #                             [x - l / 2, y + w / 2, z],
        #                             [x - l / 2, y - w / 2, z + h],
        #                             [x + l / 2, y - w / 2, z + h],
        #                             [x + l / 2, y - w / 2, z],
        #                             [x - l / 2, y - w / 2, z]])
        camera_8_points = r_velo2cam * np.matrix(lidar_8_points).T + t_velo2cam
        camera_8_points_list.append(camera_8_points.T)

    return camera_8_points_list


def vis_label_in_img(camera_8_points_list, img_path, path_camera_intrinsic, save_path):
    # dirs_camera_intrisinc = os.listdir(path_camera_intrinsic)
    # # path_list_camera_intrisinc = get_files_path(path_camera_intrinsic, '.json')
    # # path_list_camera_intrinsic.sort()
    #
    # for frame in dirs_camera_intrinsic:
    index = img_path.split("/")[-1].split(".")[0]
    calib_intrinsic = get_cam_calib_intrinsic(path_camera_intrinsic)
    img = get_rgb(img_path)

    cam8points = np.array(camera_8_points_list)
    num_bbox = cam8points.shape[0]

    uv_origin = points_cam2img(cam8points, calib_intrinsic)
    uv_origin = (uv_origin - 1).round()

    plot_rect3d_on_img(img, num_bbox, uv_origin)
    cv2.imwrite(os.path.join(save_path, index + ".png"), img)
    print(index)

    return True


import os.path as osp
import numpy as np
import mayavi.mlab as mlab
import pickle
import argparse
import math
from pypcd import pypcd
import json
from vis_utils import id_to_str, load_pkl


def draw_boxes3d(
    boxes3d, fig, arrows=None, color=(1, 0, 0), line_width=2, draw_text=True, text_scale=(1, 1, 1), color_list=None
):
    """
    boxes3d: numpy array (n,8,3) for XYZs of the box corners
    fig: mayavi figure handler
    color: RGB value tuple in range (0,1), box line color
    line_width: box line width
    draw_text: boolean, if true, write box indices beside boxes
    text_scale: three number tuple
    color_list: RGB tuple
    """
    num = len(boxes3d)
    for n in range(num):
        if arrows is not None:
            mlab.plot3d(
                arrows[n, :, 0],
                arrows[n, :, 1],
                arrows[n, :, 2],
                color=color,
                tube_radius=None,
                line_width=line_width,
                figure=fig,
            )
        b = boxes3d[n]
        if color_list is not None:
            color = color_list[n]
        if draw_text:
            mlab.text3d(b[4, 0], b[4, 1], b[4, 2], "%d" % n, scale=text_scale, color=color, figure=fig)
        for k in range(0, 4):
            i, j = k, (k + 1) % 4
            mlab.plot3d(
                [b[i, 0], b[j, 0]],
                [b[i, 1], b[j, 1]],
                [b[i, 2], b[j, 2]],
                color=color,
                tube_radius=None,
                line_width=line_width,
                figure=fig,
            )

            i, j = k + 4, (k + 1) % 4 + 4
            mlab.plot3d(
                [b[i, 0], b[j, 0]],
                [b[i, 1], b[j, 1]],
                [b[i, 2], b[j, 2]],
                color=color,
                tube_radius=None,
                line_width=line_width,
                figure=fig,
            )

            i, j = k, k + 4
            mlab.plot3d(
                [b[i, 0], b[j, 0]],
                [b[i, 1], b[j, 1]],
                [b[i, 2], b[j, 2]],
                color=color,
                tube_radius=None,
                line_width=line_width,
                figure=fig,
            )
    return fig


def read_bin(path):
    pointcloud = np.fromfile(path, dtype=np.float32, count=-1).reshape([-1, 4])
    print(pointcloud.shape)
    x = pointcloud[:, 0]
    y = pointcloud[:, 1]
    z = pointcloud[:, 2]
    return x, y, z


def read_pcd(pcd_path):
    pcd = pypcd.PointCloud.from_path(pcd_path)

    x = np.transpose(pcd.pc_data["x"])
    y = np.transpose(pcd.pc_data["y"])
    z = np.transpose(pcd.pc_data["z"])
    return x, y, z


def get_lidar_3d_8points(obj_size, yaw_lidar, center_lidar):
    center_lidar = [center_lidar[0], center_lidar[1], center_lidar[2]]

    lidar_r = np.matrix(
        [[math.cos(yaw_lidar), -math.sin(yaw_lidar), 0], [math.sin(yaw_lidar), math.cos(yaw_lidar), 0], [0, 0, 1]]
    )
    l, w, h = obj_size
    center_lidar[2] = center_lidar[2] - h / 2
    corners_3d_lidar = np.matrix(
        [
            [l / 2, l / 2, -l / 2, -l / 2, l / 2, l / 2, -l / 2, -l / 2],
            [w / 2, -w / 2, -w / 2, w / 2, w / 2, -w / 2, -w / 2, w / 2],
            [0, 0, 0, 0, h, h, h, h],
        ]
    )
    corners_3d_lidar = lidar_r * corners_3d_lidar + np.matrix(center_lidar).T

    return corners_3d_lidar.T


def read_label_bboxes(label_path):
    with open(label_path, "r") as load_f:
        labels = json.load(load_f)

    boxes = []
    for label in labels:
        obj_size = [
            float(label["3d_dimensions"]["l"]),
            float(label["3d_dimensions"]["w"]),
            float(label["3d_dimensions"]["h"]),
        ]
        yaw_lidar = float(label["rotation"])
        center_lidar = [
            float(label["3d_location"]["x"]),
            float(label["3d_location"]["y"]),
            float(label["3d_location"]["z"]),
        ]

        box = get_lidar_3d_8points(obj_size, yaw_lidar, center_lidar)
        boxes.append(box)

    return boxes


def plot_box_pcd(x, y, z, boxes):
    vals = "height"
    if vals == "height":
        col = z
    fig = mlab.figure(bgcolor=(0, 0, 0), size=(640, 500))
    mlab.points3d(
        x,
        y,
        z,
        col,  # Values used for Color
        mode="point",
        colormap="spectral",  # 'bone', 'copper', 'gnuplot'
        color=(1, 1, 0),  # Used a fixed (r,g,b) instead
        figure=fig,
    )
    draw_boxes3d(np.array(boxes), fig, arrows=None)

    mlab.axes(xlabel="x", ylabel="y", zlabel="z")
    mlab.show()


def plot_pred_fusion(args):
    fig = mlab.figure(bgcolor=(1, 1, 1), size=(640, 500))
    data_all = load_pkl(osp.join(args.path, "result", id_to_str(args.id) + ".pkl"))
    print(data_all.keys())

    draw_boxes3d(
        np.array(data_all["boxes_3d"]),
        fig,
        color=(32 / 255, 32 / 255, 32 / 255),
        line_width=1,
    )
    draw_boxes3d(
        np.array(data_all["label"]),
        fig,
        color=(0, 0, 255 / 255),
    )
    mlab.show()


def plot_pred_single(args):
    fig = mlab.figure(bgcolor=(1, 1, 1), size=(1280, 1000))
    path = args.path
    file = id_to_str(args.id) + ".pkl"

    data_label = load_pkl(osp.join(path, "result", file))
    label_3d_bboxes = data_label["boxes_3d"]
    if len(label_3d_bboxes.shape) != 3:
        label_3d_bboxes = label_3d_bboxes.squeeze(axis=0)

    data_pred = load_pkl(osp.join(path, "preds", file))
    pred_3d_bboxes = data_pred["boxes_3d"]

    draw_boxes3d(label_3d_bboxes, fig, color=(0, 1, 0))  # vis_label
    draw_boxes3d(pred_3d_bboxes, fig, color=(1, 0, 0))  # vis_pred

    mlab.show()


def plot_label_pcd(args):
    pcd_path = args.pcd_path
    x, y, z = read_pcd(pcd_path)

    label_path = args.label_path
    boxes = read_label_bboxes(label_path)

    plot_box_pcd(x, y, z, boxes)


def add_arguments(parser):
    parser.add_argument("--task", type=str, default="coop", choices=["fusion", "single", "pcd_label"])
    parser.add_argument("--path", type=str, default="./coop-mono_v50100")
    parser.add_argument("--id", type=int, default=0)
    parser.add_argument("--pcd-path", type=str, default="./000029.bin", help="pcd path to visualize")
    parser.add_argument("--label-path", type=str, default="./000029.json", help="label path to visualize")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    add_arguments(parser)
    args = parser.parse_args()

    if args.task == "fusion":
        plot_pred_fusion(args)

    if args.task == "single":
        plot_pred_single(args)

    if args.task == "pcd_label":
        plot_label_pcd(args)




import os
import json
from tqdm import tqdm
import argparse
import errno


def read_json(path_json):
    with open(path_json, "r") as load_f:
        my_json = json.load(load_f)
    return my_json


def write_json(path_json, new_dict):
    with open(path_json, "w") as f:
        json.dump(new_dict, f)


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise


def get_data(data_info, path_pcd):
    for data in data_info:
        name1 = os.path.split(path_pcd)[-1]
        name2 = os.path.split(data["pointcloud_path"])[-1]
        if name1 == name2:
            return data


def choose_name(name_list, path_v_data_info):
    v_data_info = read_json(path_v_data_info)
    fusion_data_info = []
    for i in tqdm(range(len(name_list))):
        data = get_data(v_data_info, name_list[i])
        fusion_data_info.append(data)
    return fusion_data_info


def get_name(path_c_data_info):
    c_data_info = read_json(path_c_data_info)
    name_list = []
    for data in c_data_info:
        name = os.path.split(data["vehicle_pointcloud_path"])[-1]
        name_list.append(name)
    return name_list


def get_fusion_label(path_c, path_dest):
    path_c_data_info = os.path.join(path_c, "cooperative/data_info.json")
    path_v_data_info = os.path.join(path_c, "vehicle-side/data_info.json")
    name_list = get_name(path_c_data_info)
    fusion_data_info = choose_name(name_list, path_v_data_info)
    write_json(os.path.join(path_dest, "fusion_data_info.json"), fusion_data_info)


parser = argparse.ArgumentParser("Generate cooperative-vehicle data info.")
parser.add_argument(
    "--source-root",
    type=str,
    default="./data/cooperative-vehicle-infrastructure",
    help="Raw data root about DAIR-V2X-C.",
)
parser.add_argument(
    "--target-root",
    type=str,
    default="./data_info-fusioned",
    help="The fusioned data info",
)

if __name__ == "__main__":
    args = parser.parse_args()
    source_root = args.source_root
    target_label_root = args.target_root
    get_fusion_label(source_root, target_label_root)


# Affine transformation of coordinate system

## Transformation Matrix

### Rotation Matrix

Rotate around the x-axis, y-axis and z-axis respectively, and multiply the three rotation matrices to obtain the rotation matrix at any angle in 3D space. (Right-handed coordinate system)

When rotating around the x-axis, it can be seen as a rotation on the 2D plane of yoz, at which time the value of x remains unchanged.

$$
R_x
=
\begin{bmatrix}
1& 0&0
\\
0&cos\theta_x&sin\theta_x
\\
0&-sin\theta_x&cos\theta_x
\end{bmatrix}
$$

When rotating around the y-axis, it can be seen as a rotation on the 2D plane of zox, at which time the value of y remains unchanged.

$$
R_y
=
\begin{bmatrix}
cos\theta_y&0&-sin\theta_y
\\
0&1&0
\\
sin\theta_y&0&cos\theta_y
\end{bmatrix}
$$

When rotating around the z-axis, it can be seen as a rotation on the 2D plane of xoy, at which time the value of z remains unchanged.

$$
R_z
=
\begin{bmatrix}
cons\theta_z&sin\theta_z&0
\\
-sin\theta_z&cos\theta_z&0
\\
0&0&1
\end{bmatrix}
$$

The final 3D rotation matrix is the multiplication of the above three matrices.

$$
R=R_xR_yR_z
=
\begin{bmatrix}
1&0&0
\\
0&cos\theta_x&sin\theta_x
\\
0&-sin\theta_x&cos\theta_x
\end{bmatrix}
\begin{bmatrix}
cos\theta_y&0&-sin\theta_y
\\
0&1&0
\\
sin\theta_y&0&cos\theta_y
\end{bmatrix}
\begin{bmatrix}
cons\theta_z&sin\theta_z&0
\\
-sin\theta_z&cos\theta_z&0
\\
0&0&1
\end{bmatrix}
$$

### Translation Matrix

Translate along the x-axis direction, y-axis direction and z-axis direction respectively, and add the three translation matrices to obtain any translation matrix in 3D space.

When translating along the x-axis direction, it can be seen that each point is translated along the x-axis direction. At this time, the values of y and z remain unchanged.

$$
T_x=
\begin{bmatrix}
\Delta_x
\\
0
\\
0
\end{bmatrix}
$$

When translating along the y-axis direction, it can be seen that each point is translated along the y-axis direction. At this time, the values of z and x remain unchanged.

$$
T_y=
\begin{bmatrix}
0
\\
\Delta_y
\\
0
\end{bmatrix}
$$

When translating along the z-axis direction, it can be seen that each point is translated along the z-axis direction. At this time, the values of x and y remain unchanged.

$$
T_z=
\begin{bmatrix}
0
\\
0
\\
\Delta_z
\end{bmatrix}
$$

The final 3D translation matrix is the sum of the above three matrices.

$$
T=
T_x+T_y+T_z
=
\begin{bmatrix}
\Delta_x
\\
\Delta_y
\\
\Delta_z
\end{bmatrix}
$$

## Related Codes

### 7 Dimensions Vector Representation to 8 Corner Points Representation

```Python
def get_lidar_3d_8points(label_3d_dimensions, lidar_3d_location, rotation_z):
    """
          4 -------- 5      
         /|         /|     
        7 -------- 6 .     
        | |        | |     
        . 0 -------- 1     
        |/         |/     
        3 -------- 2
        forward direction: 3 -> 0
        Args: 
            label_3d_dimensions: [l, w, h]
            lidar_3d_location: [x, y, z]
            rotation_z: rotation
    """
    lidar_rotation = np.matrix(
        [
            [math.cos(rotation_z), -math.sin(rotation_z), 0],
            [math.sin(rotation_z), math.cos(rotation_z), 0],
            [0, 0, 1]
        ]
    )
    l, w, h = label_3d_dimensions
    corners_3d_lidar = np.matrix(
        [
            [l / 2, l / 2, -l / 2, -l / 2, l / 2, l / 2, -l / 2, -l / 2],
            [w / 2, -w / 2, -w / 2, w / 2, w / 2, -w / 2, -w / 2, w / 2],
            [-h / 2, -h / 2, -h / 2, -h / 2, h / 2, h / 2, h / 2, h / 2],
        ]
    )
    lidar_3d_8points = lidar_rotation * corners_3d_lidar + np.matrix(lidar_3d_location).T
    return lidar_3d_8points.T.tolist()
```

7 Dimensions Vector [l, w, h, x, y, z, rotation] can be obtained from the json files in the following directory:

* `data/DAIR-V2X-V2/cooperative-vehicle-infrastructure/infrastructure-side/label/camera/xxxxxx.json`
* `data/DAIR-V2X-V2/cooperative-vehicle-infrastructure/infrastructure-side/label/virtuallidar/xxxxxx.json`
* `data/DAIR-V2X-V2/cooperative-vehicle-infrastructure/vehicle-side/label/camera/xxxxxx.json`
* `data/DAIR-V2X-V2/cooperative-vehicle-infrastructure/vehicle-side/label/lidar/xxxxxx.json`

### Transform point

```Python
def trans_point(input_point, translation, rotation):
    input_point = np.array(input_point).reshape(3, 1)
    translation = np.array(translation).reshape(3, 1)
    rotation = np.array(rotation).reshape(3, 3)
    output_point = np.dot(rotation, input_point).reshape(3, 1) + np.array(translation).reshape(3, 1)
    output_point = output_point.reshape(1, 3).tolist()
    return output_point[0]
```

Rotation Matrix and Translation Matrix can be obtained from the json files in the following directory:

* `data/DAIR-V2X-V2/cooperative-vehicle-infrastructure/infrastructure-side/calib/xxxx/xxxxxx.json`
* `data/DAIR-V2X-V2/cooperative-vehicle-infrastructure/vehicle-side/calib/xxxx/xxxxxx.json`

If you have the rotation matrix and translation matrix from A coordinate system to B coordinate system, you can obtain the rotation matrix and translation matrix from B coordinate system to A coordinate system through the following code:


import os
import math
import json
import errno
import numpy as np
import open3d as o3d
from pypcd import pypcd


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise


def get_files_path(path_my_dir, extention=".json"):
    path_list = []
    for (dirpath, dirnames, filenames) in os.walk(path_my_dir):
        for filename in filenames:
            if os.path.splitext(filename)[1] == extention:
                path_list.append(os.path.join(dirpath, filename))
    return path_list


def write_txt(path, file):
    with open(path, "w") as f:
        f.write(file)


def read_json(path):
    with open(path, "r") as f:
        my_json = json.load(f)
        return my_json


def write_json(path_json, new_dict):
    with open(path_json, "w") as f:
        json.dump(new_dict, f)


def read_pcd(path_pcd):
    pointpillar = o3d.io.read_point_cloud(path_pcd)
    points = np.asarray(pointpillar.points)
    points = points.tolist()
    return points


def write_pcd(path_pcd, new_points, path_save):
    pc = pypcd.PointCloud.from_path(path_pcd)
    pc.pc_data['x'] = np.array([a[0] for a in new_points])
    pc.pc_data['y'] = np.array([a[1] for a in new_points])
    pc.pc_data['z'] = np.array([a[2] for a in new_points])
    pc.save_pcd(path_save, compression='binary_compressed')


def show_pcd(path_pcd):
    pcd = read_pcd(path_pcd)
    o3d.visualization.draw_geometries([pcd])


def pcd2bin(pcd_file_path, bin_file_path):
    pc = pypcd.PointCloud.from_path(pcd_file_path)

    np_x = (np.array(pc.pc_data["x"], dtype=np.float32)).astype(np.float32)
    np_y = (np.array(pc.pc_data["y"], dtype=np.float32)).astype(np.float32)
    np_z = (np.array(pc.pc_data["z"], dtype=np.float32)).astype(np.float32)
    np_i = (np.array(pc.pc_data["intensity"], dtype=np.float32)).astype(np.float32) / 255

    points_32 = np.transpose(np.vstack((np_x, np_y, np_z, np_i)))
    points_32.tofile(bin_file_path)


def inverse_matrix(R):
    R = np.matrix(R)
    rev_R = R.I
    rev_R = np.array(rev_R)
    return rev_R


def trans_point(input_point, rotation, translation=None):
    if translation is None:
        translation = [0.0, 0.0, 0.0]
    input_point = np.array(input_point).reshape(3, 1)
    translation = np.array(translation).reshape(3, 1)
    rotation = np.array(rotation).reshape(3, 3)
    output_point = np.dot(rotation, input_point).reshape(3, 1) + np.array(translation).reshape(3, 1)
    output_point = output_point.reshape(1, 3).tolist()
    return output_point[0]


def trans(input_point, rotation, translation):
    input_point = np.array(input_point).reshape(3, -1)
    translation = np.array(translation).reshape(3, 1)
    rotation = np.array(rotation).reshape(3, 3)
    output_point = np.dot(rotation, input_point).reshape(3, -1) + np.array(translation).reshape(3, 1)
    return output_point


def get_lidar_3d_8points(label_3d_dimensions, lidar_3d_location, rotation_z):
    lidar_rotation = np.matrix(
        [
            [math.cos(rotation_z), -math.sin(rotation_z), 0],
            [math.sin(rotation_z), math.cos(rotation_z), 0],
            [0, 0, 1]
        ]
    )
    l, w, h = label_3d_dimensions
    corners_3d_lidar = np.matrix(
        [
            [l / 2, l / 2, -l / 2, -l / 2, l / 2, l / 2, -l / 2, -l / 2],
            [w / 2, -w / 2, -w / 2, w / 2, w / 2, -w / 2, -w / 2, w / 2],
            [-h / 2, -h / 2, -h / 2, -h / 2, h / 2, h / 2, h / 2, h / 2],
        ]
    )
    lidar_3d_8points = lidar_rotation * corners_3d_lidar + np.matrix(lidar_3d_location).T
    return lidar_3d_8points.T.tolist()


def get_label_lidar_rotation(lidar_3d_8_points):
    """
    计算 lidar 坐标系下的偏航角 rotation_z
        目标 3D 框示意图:
          4 -------- 5
         /|         /|
        7 -------- 6 .
        | |        | |
        . 0 -------- 1
        |/         |/
        3 -------- 2
        Args:
            lidar_3d_8_points: 八个角点组成的矩阵[[x,y,z],...]
        Returns:
            rotation_z: Lidar坐标系下的偏航角rotation_z (-pi,pi) rad
    """
    x0, y0 = lidar_3d_8_points[0][0], lidar_3d_8_points[0][1]
    x3, y3 = lidar_3d_8_points[3][0], lidar_3d_8_points[3][1]
    dx, dy = x0 - x3, y0 - y3
    rotation_z = math.atan2(dy, dx)  # Lidar坐标系xyz下的偏航角yaw绕z轴与x轴夹角，方向符合右手规则，所以用(dy,dx)
    return rotation_z


def get_camera_3d_8points(label_3d_dimensions, camera_3d_location, rotation_y):
    camera_rotation = np.matrix(
        [
            [math.cos(rotation_y), 0, math.sin(rotation_y)],
            [0, 1, 0],
            [-math.sin(rotation_y), 0, math.cos(rotation_y)]
        ]
    )
    l, w, h = label_3d_dimensions
    corners_3d_camera = np.matrix(
        [
            [l / 2, l / 2, -l / 2, -l / 2, l / 2, l / 2, -l / 2, -l / 2],
            [0, 0, 0, 0, -h, -h, -h, -h],
            [w / 2, -w / 2, -w / 2, w / 2, w / 2, -w / 2, -w / 2, w / 2],
        ]
    )
    camera_3d_8points = camera_rotation * corners_3d_camera + np.matrix(camera_3d_location).T
    return camera_3d_8points.T.tolist()


def get_camera_3d_alpha_rotation(camera_3d_8_points, camera_3d_location):
    x0, z0 = camera_3d_8_points[0][0], camera_3d_8_points[0][2]
    x3, z3 = camera_3d_8_points[3][0], camera_3d_8_points[3][2]
    dx, dz = x0 - x3, z0 - z3
    rotation_y = -math.atan2(dz, dx)  # 相机坐标系xyz下的偏航角yaw绕y轴与x轴夹角，方向符合右手规则，所以用(-dz,dx)
    # alpha = rotation_y - math.atan2(center_in_cam[0], center_in_cam[2])
    alpha = rotation_y - (-math.atan2(-camera_3d_location[2], -camera_3d_location[0])) + math.pi / 2  # yzw
    # add transfer
    if alpha > math.pi:
        alpha = alpha - 2.0 * math.pi
    if alpha <= (-1 * math.pi):
        alpha = alpha + 2.0 * math.pi
    return alpha, rotation_y


def get_cam_calib_intrinsic(calib_path):
    my_json = read_json(calib_path)
    cam_K = my_json["cam_K"]
    calib = np.zeros([3, 4])
    calib[:3, :3] = np.array(cam_K).reshape([3, 3], order="C")
    return calib


def get_lidar2camera(path_lidar2camera):
    lidar2camera = read_json(path_lidar2camera)
    rotation = lidar2camera['rotation']
    translation = lidar2camera['translation']
    rotation = np.array(rotation).reshape(3, 3)
    translation = np.array(translation).reshape(3, 1)
    return rotation, translation


def get_lidar2novatel(path_lidar2novatel):
    lidar2novatel = read_json(path_lidar2novatel)
    rotation = lidar2novatel['transform']['rotation']
    translation = lidar2novatel['transform']['translation']
    rotation = np.array(rotation).reshape(3, 3)
    translation = np.array(translation).reshape(3, 1)
    return rotation, translation


def get_novatel2world(path_novatel2world):
    novatel2world = read_json(path_novatel2world)
    rotation = novatel2world['rotation']
    translation = novatel2world['translation']
    rotation = np.array(rotation).reshape(3, 3)
    translation = np.array(translation).reshape(3, 1)
    return rotation, translation


def get_virtuallidar2world(path_virtuallidar2world):
    virtuallidar2world = read_json(path_virtuallidar2world)
    rotation = virtuallidar2world['rotation']
    translation = virtuallidar2world['translation']
    rotation = np.array(rotation).reshape(3, 3)
    translation = np.array(translation).reshape(3, 1)
    return rotation, translation


import os
import json
import argparse
from tqdm import tqdm


parser = argparse.ArgumentParser("Generate the Early Fusion Data")
parser.add_argument("--source-root", type=str, default="data/V2X-Seq-SPD", help="Raw data root about SPD.")


def read_json(path_json):
    with open(path_json, "r") as load_f:
        my_json = json.load(load_f)
    return my_json


if __name__ == "__main__":
    args = parser.parse_args()
    source_root = args.source_root

    os.makedirs(f'{source_root}/vic3d-early-fusion-training/calib/camera_intrinsic', exist_ok=True)
    os.makedirs(f'{source_root}/vic3d-early-fusion-training/calib/lidar_to_camera', exist_ok=True)
    os.makedirs(f'{source_root}/vic3d-early-fusion-training/calib/lidar_to_novatel', exist_ok=True)
    os.makedirs(f'{source_root}/vic3d-early-fusion-training/calib/novatel_to_world', exist_ok=True)
    os.makedirs(f'{source_root}/vic3d-early-fusion-training/image', exist_ok=True)
    os.makedirs(f'{source_root}/vic3d-early-fusion-training/velodyne', exist_ok=True)
    os.makedirs(f'{source_root}/vic3d-early-fusion-training/label/lidar', exist_ok=True)

    coop_data_info = read_json(f"{source_root}/cooperative/data_info.json")
    for i in tqdm(coop_data_info):
        os.system("cp %s/vehicle-side/calib/camera_intrinsic/%s.json %s/vic3d-early-fusion-training/calib/camera_intrinsic/" % (source_root, i["vehicle_frame"], source_root))
        os.system("cp %s/vehicle-side/calib/lidar_to_camera/%s.json %s/vic3d-early-fusion-training/calib/lidar_to_camera/" % (source_root, i["vehicle_frame"], source_root))
        os.system("cp %s/vehicle-side/calib/lidar_to_novatel/%s.json %s/vic3d-early-fusion-training/calib/lidar_to_novatel/" % (source_root, i["vehicle_frame"], source_root))
        os.system("cp %s/vehicle-side/calib/novatel_to_world/%s.json %s/vic3d-early-fusion-training/calib/novatel_to_world/" % (source_root, i["vehicle_frame"], source_root))

        os.system("cp %s/vehicle-side/image/%s.jpg %s/vic3d-early-fusion-training/image/" % (source_root, i["vehicle_frame"], source_root))
        os.system("cp %s/cooperative/label/%s.json %s/vic3d-early-fusion-training/label/lidar/" % (source_root, i["vehicle_frame"], source_root))

        os.system("cp %s/vehicle-side/data_info.json %s/vic3d-early-fusion-training/" % (source_root, source_root))


import argparse
import os
from tools.dataset_converter.gen_kitti.label_lidarcoord_to_cameracoord import gen_lidar2cam
from tools.dataset_converter.gen_kitti.label_json2kitti import json2kitti, rewrite_label, label_filter
from tools.dataset_converter.gen_kitti.gen_calib2kitti import gen_calib2kitti
from tools.dataset_converter.gen_kitti.gen_ImageSets_from_split_data import gen_ImageSet_from_split_data
from tools.dataset_converter.utils import pcd2bin

parser = argparse.ArgumentParser("Generate the Kitti Format Data")
parser.add_argument("--source-root", type=str, default="data/single-vehicle-side", help="Raw data root about DAIR-V2X.")
parser.add_argument(
    "--target-root",
    type=str,
    default="./single-vehicle-side-point-cloud-kitti",
    help="The data root where the data with kitti format is generated",
)
parser.add_argument(
    "--split-path",
    type=str,
    default="data/split_datas/single-vehicle-split-data.json",
    help="Json file to split the data into training/validation/testing.",
)
parser.add_argument("--label-type", type=str, default="lidar", help="label type from ['lidar', 'camera']")
parser.add_argument("--sensor-view", type=str, default="vehicle", help="Sensor view from ['infrastructure', 'vehicle']")
parser.add_argument(
    "--no-classmerge",
    action="store_true",
    help="Not to merge the four classes [Car, Truck, Van, Bus] into one class [Car]",
)
parser.add_argument("--temp-root", type=str, default="./tmp_file", help="Temporary intermediate file root.")


def mdkir_kitti(target_root):
    if not os.path.exists(target_root):
        os.makedirs(target_root)

    os.system("mkdir -p %s/training" % target_root)
    os.system("mkdir -p %s/training/calib" % target_root)
    os.system("mkdir -p %s/training/label_2" % target_root)
    os.system("mkdir -p %s/testing" % target_root)
    os.system("mkdir -p %s/ImageSets" % target_root)


def rawdata_copy(source_root, target_root):
    os.system("cp -r %s/image %s/training/image_2" % (source_root, target_root))
    os.system("cp -r %s/velodyne %s/training" % (source_root, target_root))


def kitti_pcd2bin(target_root):
    pcd_dir = os.path.join(target_root, "training/velodyne")
    fileList = os.listdir(pcd_dir)
    for fileName in fileList:
        if ".pcd" in fileName:
            pcd_file_path = pcd_dir + "/" + fileName
            bin_file_path = pcd_dir + "/" + fileName.replace(".pcd", ".bin")
            pcd2bin(pcd_file_path, bin_file_path)


if __name__ == "__main__":
    print("================ Start to Convert ================")
    args = parser.parse_args()
    source_root = args.source_root
    target_root = args.target_root

    print("================ Start to Copy Raw Data ================")
    mdkir_kitti(target_root)
    rawdata_copy(source_root, target_root)
    kitti_pcd2bin(target_root)

    print("================ Start to Generate Label ================")
    temp_root = args.temp_root
    label_type = args.label_type
    no_classmerge = args.no_classmerge
    os.system("mkdir -p %s" % temp_root)
    os.system("rm -rf %s/*" % temp_root)
    gen_lidar2cam(source_root, temp_root, label_type=label_type)

    json_root = os.path.join(temp_root, "label", label_type)
    kitti_label_root = os.path.join(target_root, "training/label_2")
    json2kitti(json_root, kitti_label_root)
    if not no_classmerge:
        rewrite_label(kitti_label_root)
    label_filter(kitti_label_root)

    os.system("rm -rf %s" % temp_root)

    print("================ Start to Generate Calibration Files ================")
    sensor_view = args.sensor_view
    path_camera_intrinsic = os.path.join(source_root, "calib/camera_intrinsic")
    if sensor_view == "vehicle" or sensor_view == "cooperative":
        path_lidar_to_camera = os.path.join(source_root, "calib/lidar_to_camera")
    else:
        path_lidar_to_camera = os.path.join(source_root, "calib/virtuallidar_to_camera")
    path_calib = os.path.join(target_root, "training/calib")
    gen_calib2kitti(path_camera_intrinsic, path_lidar_to_camera, path_calib)

    print("================ Start to Generate ImageSet Files ================")
    split_json_path = args.split_path
    ImageSets_path = os.path.join(target_root, "ImageSets")
    gen_ImageSet_from_split_data(ImageSets_path, split_json_path, sensor_view)


import os
import json
from tqdm import tqdm
import argparse
import errno


def read_json(path_json):
    with open(path_json, "r") as load_f:
        my_json = json.load(load_f)
    return my_json


def write_json(path_json, new_dict):
    with open(path_json, "w") as f:
        json.dump(new_dict, f)


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise


def get_data(data_info, frame_id):
    for data in data_info:
        if data["frame_id"] == frame_id:
            return data


def choose_name(name_list, path_v_data_info):
    v_data_info = read_json(path_v_data_info)
    fusion_data_info = []
    for i in tqdm(range(len(name_list))):
        data = get_data(v_data_info, name_list[i])
        fusion_data_info.append(data)
    return fusion_data_info


def get_name(path_c_data_info):
    c_data_info = read_json(path_c_data_info)
    name_list = []
    for data in c_data_info:
        name = data["vehicle_frame"]
        name_list.append(name)
    return name_list


def get_fusion_label(path_c, path_dest):
    path_c_data_info = os.path.join(path_c, "cooperative/data_info.json")
    path_v_data_info = os.path.join(path_c, "vehicle-side/data_info.json")
    name_list = get_name(path_c_data_info)
    fusion_data_info = choose_name(name_list, path_v_data_info)
    write_json(os.path.join(path_dest, "fusion_data_info.json"), fusion_data_info)


parser = argparse.ArgumentParser("Generate cooperative-vehicle data info.")
parser.add_argument(
    "--source-root",
    type=str,
    default="./data/SPD/cooperative-vehicle-infrastructure",
    help="Raw data root about SPD.",
)
parser.add_argument(
    "--target-root",
    type=str,
    default="./data_info-fusioned",
    help="The fusioned data info",
)

if __name__ == "__main__":
    args = parser.parse_args()
    source_root = args.source_root
    target_label_root = args.target_root
    get_fusion_label(source_root, target_label_root)


import os
import json
import argparse
import numpy as np
from pypcd import pypcd
import open3d as o3d
from tqdm import tqdm
import errno


def read_json(path_json):
    with open(path_json, 'r') as load_f:
        my_json = json.load(load_f)
    return my_json


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise


def get_virtuallidar2world(path_virtuallidar2world):
    virtuallidar2world = read_json(path_virtuallidar2world)
    rotation = virtuallidar2world['rotation']
    translation = virtuallidar2world['translation']
    return rotation, translation


def get_novatel2world(path_novatel2world):
    novatel2world = read_json(path_novatel2world)
    rotation = novatel2world['rotation']
    translation = novatel2world['translation']
    return rotation, translation


def get_lidar2novatel(path_lidar2novatel):
    lidar2novatel = read_json(path_lidar2novatel)
    rotation = lidar2novatel['transform']['rotation']
    translation = lidar2novatel['transform']['translation']
    return rotation, translation


def get_data(data_info, frame_id):
    for data in data_info:
        if data["frame_id"] == frame_id:
            return data


def trans(input_point, translation, rotation):
    input_point = np.array(input_point).reshape(3, -1)
    translation = np.array(translation).reshape(3, 1)
    rotation = np.array(rotation).reshape(3, 3)
    output_point = np.dot(rotation, input_point).reshape(3, -1) + np.array(translation).reshape(3, 1)
    return output_point


def rev_matrix(R):
    R = np.matrix(R)
    rev_R = R.I
    rev_R = np.array(rev_R)
    return rev_R


def trans_point_i2v(input_point, path_virtuallidar2world, path_novatel2world, path_lidar2novatel, delta_x, delta_y):
    # print('0:', input_point)

    # virtuallidar to world
    rotation, translation = get_virtuallidar2world(path_virtuallidar2world)
    point = trans(input_point, translation, rotation)
    '''
    print('rotation, translation, delta_x, delta_y', rotation, translation, delta_x, delta_y)
    print('1:', point)
    '''

    # world to novatel
    rotation, translation = get_novatel2world(path_novatel2world)
    new_rotation = rev_matrix(rotation)
    new_translation = - np.dot(new_rotation, translation)
    point = trans(point, new_translation, new_rotation)
    '''
    print('rotation, translation:', rotation, translation)
    print('new_translation, new_rotation:', new_translation, new_rotation)
    print('2:', point)
    '''

    # novatel to lidar
    rotation, translation = get_lidar2novatel(path_lidar2novatel)
    new_rotation = rev_matrix(rotation)
    new_translation = - np.dot(new_rotation, translation)
    point = trans(point, new_translation, new_rotation) + np.array([delta_x, delta_y, 0]).reshape(3, 1)
    '''
    print('rotation, translation:', rotation, translation)
    print('new_translation, new_rotation:', new_translation, new_rotation)
    print('3:', point)
    '''
    # point = point.reshape(1, 3).tolist()
    # point = point[0]
    point = point.T
    
    return point


def read_pcd(path_pcd):
    pointpillar = o3d.io.read_point_cloud(path_pcd)
    points = np.asarray(pointpillar.points)
    # points = points.tolist()
    return points


def show_pcd(path_pcd):
    pcd = read_pcd(path_pcd)
    o3d.visualization.draw_geometries([pcd])


def write_pcd(path_pcd, new_points, path_save):
    pc = pypcd.PointCloud.from_path(path_pcd)
    pc.pc_data['x'] = np.array([a[0] for a in new_points])
    pc.pc_data['y'] = np.array([a[1] for a in new_points])
    pc.pc_data['z'] = np.array([a[2] for a in new_points])
    pc.save_pcd(path_save, compression='binary_compressed')


def trans_pcd_i2v(path_pcd, path_virtuallidar2world, path_novatel2world, path_lidar2novatel, delta_x, delta_y, path_save):
    # (n, 3)
    points = read_pcd(path_pcd)
    # (n, 3)
    new_points = trans_point_i2v(points.T, path_virtuallidar2world, path_novatel2world, path_lidar2novatel, delta_x, delta_y)
    write_pcd(path_pcd, new_points, path_save)


def get_i2v(path_c, path_dest):
    mkdir_p(path_dest)
    path_c_data_info = os.path.join(path_c, 'cooperative/data_info.json')
    path_i_data_info = os.path.join(path_c, 'infrastructure-side/data_info.json')
    path_v_data_info = os.path.join(path_c, 'vehicle-side/data_info.json')
    c_data_info = read_json(path_c_data_info)
    i_data_info = read_json(path_i_data_info)
    v_data_info = read_json(path_v_data_info)

    # for data in tqdm(c_data_info):
    for data in tqdm(c_data_info):
        i_data = get_data(i_data_info, data["infrastructure_frame"])
        v_data = get_data(v_data_info, data["vehicle_frame"])
        path_pcd_i = os.path.join(path_c, "infrastructure-side/velodyne", data["infrastructure_frame"] + ".pcd")
        path_virtuallidar2world = os.path.join(path_c, 'infrastructure-side', i_data['calib_virtuallidar_to_world_path'])
        path_novatel2world = os.path.join(path_c, 'vehicle-side', v_data['calib_novatel_to_world_path'])
        path_lidar2novatel = os.path.join(path_c, 'vehicle-side', v_data['calib_lidar_to_novatel_path'])
        name = os.path.split(path_pcd_i)[-1]
        path_save = os.path.join(path_dest, name)
        delta_x = data["system_error_offset"]["delta_x"]
        delta_y = data["system_error_offset"]["delta_y"]
        trans_pcd_i2v(path_pcd_i, path_virtuallidar2world, path_novatel2world, path_lidar2novatel, delta_x, delta_y, path_save)


parser = argparse.ArgumentParser("Convert The Point Cloud from Infrastructure to Ego-vehicle")
parser.add_argument("--source-root",
                    type=str,
                    default="./data/SPD",
                    help="Raw data root about SPD.")
parser.add_argument(
    "--target-root",
    type=str,
    default="./data/SPD/vic3d-early-fusion/velodyne/lidar_i2v",
    help="The data root where the data with ego-vehicle coordinate is generated",
)

if __name__ == "__main__":
    args = parser.parse_args()
    source_root = args.source_root
    target_root = args.target_root

    get_i2v(source_root, target_root)

import os
import math
import pickle
import numpy as np
from tqdm import tqdm
#from tools.dataset_converter.utils import read_json, trans_point, get_lidar2camera, get_cam_calib_intrinsic, get_label_lidar_rotation, get_camera_3d_alpha_rotation
from utils import read_json, trans_point, get_lidar2camera, get_cam_calib_intrinsic, get_label_lidar_rotation, get_camera_3d_alpha_rotation
import argparse

type2id = {
    "Car": 2,
    "Van": 2,
    "Truck": 2,
    "Bus": 2,
    "Cyclist": 1,
    "Tricyclist": 3,
    "Motorcyclist": 3,
    "Barrow": 3,
    "Barrowlist": 3,
    "Pedestrian": 0,
    "Trafficcone": 3,
    "Pedestrianignore": 3,
    "Carignore": 3,
    "otherignore": 3,
    "unknowns_unmovable": 3,
    "unknowns_movable": 3,
    "unknown_unmovable": 3,
    "unknown_movable": 3,
}

id2type = {
    0: "Pedestrian",
    1: "Cyclist",
    2: "Car",
    3: "Motorcyclist"
}


def get_sequence_id(frame, data_info):
    for obj in data_info:
        if frame == obj["frame_id"]:
            sequence_id = obj["sequence_id"]
            return sequence_id


def trans_points_cam2img(camera_3d_8points, calib_intrinsic, with_depth=False):
    """
        Transform points from camera coordinates to image coordinates.
        Args:
            camera_3d_8points: list(8, 3)
            calib_intrinsic: np.array(3, 4)
        Returns:
            list(8, 2)
    """
    camera_3d_8points = np.array(camera_3d_8points)
    points_shape = np.array([8, 1])
    points_4 = np.concatenate((camera_3d_8points, np.ones(points_shape)), axis=-1)
    point_2d = np.dot(calib_intrinsic, points_4.T)
    point_2d = point_2d.T
    point_2d_res = point_2d[:, :2] / point_2d[:, 2:3]
    if with_depth:
        return np.cat([point_2d_res, point_2d[..., 2:3]], dim=-1)
    return point_2d_res.tolist()


def label_det_result2kitti(input_file_path, output_dir_path, spd_path):
    """
        Convert detection results from mmdetection3d_kitti format to KITTI format.
        Args:
            input_file_path: mmdetection3d_kitti results pickle file path
            output_dir_path: converted kitti format file directory
            spd_path: path to SPD dataset
    """
    if not os.path.exists(output_dir_path):
        os.makedirs(output_dir_path)
    with open(input_file_path, 'rb') as load_f:
        det_result_data = pickle.load(load_f)

    veh_frame = det_result_data["veh_id"]
    lidar2camera_path = f'{spd_path}/vehicle-side/calib/lidar_to_camera/{veh_frame}.json'
    camera2image_path = f'{spd_path}/vehicle-side/calib/camera_intrinsic/{veh_frame}.json'
    rotation, translation = get_lidar2camera(lidar2camera_path)
    calib_intrinsic = get_cam_calib_intrinsic(camera2image_path)
    output_file_path = output_dir_path + '/' + veh_frame + '.txt'
    if os.path.exists(output_file_path):
        print("veh_frame", veh_frame, "det_result_name", input_file_path.split('/')[-1].split('.')[0])
        save_file = open(output_file_path, 'a')
    else:
        save_file = open(output_file_path, 'w')
    num_boxes = len(det_result_data["labels_3d"].tolist())
    for i in range(num_boxes):
        lidar_3d_8points_det_result = det_result_data["boxes_3d"][i].tolist()
        lidar_3d_8points = [lidar_3d_8points_det_result[3], lidar_3d_8points_det_result[0], lidar_3d_8points_det_result[4],
                            lidar_3d_8points_det_result[7], lidar_3d_8points_det_result[2], lidar_3d_8points_det_result[1],
                            lidar_3d_8points_det_result[5], lidar_3d_8points_det_result[6]]

        # calculate l, w, h, x, y, z in LiDAR coordinate system
        lidar_xy0, lidar_xy3, lidar_xy1 = lidar_3d_8points[0][0:2], lidar_3d_8points[3][0:2], lidar_3d_8points[1][0:2]
        lidar_z4, lidar_z0 = lidar_3d_8points[4][2], lidar_3d_8points[0][2]
        l = math.sqrt((lidar_xy0[0] - lidar_xy3[0]) ** 2 + (lidar_xy0[1] - lidar_xy3[1]) ** 2)
        w = math.sqrt((lidar_xy0[0] - lidar_xy1[0]) ** 2 + (lidar_xy0[1] - lidar_xy1[1]) ** 2)
        h = lidar_z4 - lidar_z0
        lidar_x0, lidar_y0 = lidar_3d_8points[0][0], lidar_3d_8points[0][1]
        lidar_x2, lidar_y2 = lidar_3d_8points[2][0], lidar_3d_8points[2][1]
        lidar_x = (lidar_x0 + lidar_x2) / 2
        lidar_y = (lidar_y0 + lidar_y2) / 2
        lidar_z = (lidar_z0 + lidar_z4) / 2

        obj_type = id2type[det_result_data["labels_3d"][i]]
        score = det_result_data["scores_3d"][i]

        camera_3d_8points = []
        for lidar_point in lidar_3d_8points:
            camera_point = trans_point(lidar_point, rotation, translation)
            camera_3d_8points.append(camera_point)

        # generate the yaw angle of the object in the lidar coordinate system at the vehicle-side.
        lidar_rotation = get_label_lidar_rotation(lidar_3d_8points)
        # generate the alpha and yaw angle of the object in the camera coordinate system at the vehicle-side
        camera_x0, camera_z0 = camera_3d_8points[0][0], camera_3d_8points[0][2]
        camera_x2, camera_z2 = camera_3d_8points[2][0], camera_3d_8points[2][2]
        camera_x = (camera_x0 + camera_x2) / 2
        camera_y = camera_3d_8points[0][1]
        camera_z = (camera_z0 + camera_z2) / 2
        camera_3d_location = [camera_x, camera_y, camera_z]

        image_8points_2d = trans_points_cam2img(camera_3d_8points, calib_intrinsic)
        x_max = max(image_8points_2d[:][0])
        x_min = min(image_8points_2d[:][0])
        y_max = max(image_8points_2d[:][1])
        y_min = min(image_8points_2d[:][1])

        alpha, camera_rotation = get_camera_3d_alpha_rotation(camera_3d_8points, camera_3d_location)

        str_item = str(veh_frame) + ' ' + str(obj_type) + ' ' + '-1' + ' ' + '-1' + ' ' + '-1' + ' ' + str(alpha) + ' ' + str(
            x_min) + ' ' + str(y_min) + ' ' + str(x_max) + ' ' + str(y_max) + ' ' + str(h) + ' ' + str(w) + ' ' + str(l) + ' ' + str(
            camera_x) + ' ' + str(camera_y) + ' ' + str(camera_z) + ' ' + str(camera_rotation) + ' ' + str(lidar_x) + ' ' + str(
            lidar_y) + ' ' + str(lidar_z) + ' ' + str(lidar_rotation) + ' ' + '-1' + ' ' + str(score) + ' ' + '-1' + ' ' + '-1' + '\n'
        save_file.writelines(str_item)
    save_file.close()


def gen_kitti_result(input_dir_path, output_dir_path, spd_path):
    """
        Convert detection results from mmdetection3d_kitti format to KITTI format for all files in input_dir_path.
        Args:
            input_dir_path: directory containing mmdetection3d_kitti results pickle files
            output_dir_path: directory to save converted KITTI format files
            spd_path: path to SPD dataset
    """
    if os.path.exists(output_dir_path):
        os.system('rm -rf %s' % output_dir_path)
    os.makedirs(output_dir_path)
    for file in tqdm(os.listdir(input_dir_path)):
        path_file = input_dir_path + '/' + file
        label_det_result2kitti(path_file, output_dir_path, spd_path)


def gen_kitti_seq_result(input_dir_path, output_dir_path, spd_path):
    """
        Convert detection results from mmdetection3d_kitti format to KITTI format and group them by sequence.
        Args:
            input_dir_path: directory containing mmdetection3d_kitti results pickle files
            output_dir_path: directory to save converted KITTI format files grouped by sequence
            spd_path: path to SPD dataset
    """
    data_info = read_json(f'{spd_path}/vehicle-side/data_info.json')
    list_input_files = os.listdir(input_dir_path)
    if os.path.exists(output_dir_path):
        os.system('rm -rf %s' % output_dir_path)
    os.makedirs(output_dir_path)
    for input_file in tqdm(list_input_files):
        input_file_path = input_dir_path + '/' + input_file
        sequence_id = get_sequence_id(input_file.split('.')[0], data_info)
        sequence_path = output_dir_path + '/' + sequence_id
        if not os.path.exists(sequence_path):
            os.makedirs(sequence_path)
        os.system('cp %s %s/' % (input_file_path, sequence_path))


def gen_kitti_seq_txt(input_dir_path, output_dir_path):
    """
        Group converted KITTI format files by sequence and write them into one txt file per sequence.
        Args:
            input_dir_path: directory containing KITTI format files grouped by sequence
            output_dir_path: directory to save txt files grouped by sequence
    """
    if os.path.exists(output_dir_path):
        os.system('rm -rf %s' % output_dir_path)
    os.makedirs(output_dir_path)
    list_dir_sequences = os.listdir(input_dir_path)
    for dir_sequence in tqdm(list_dir_sequences):
        path_seq_input = input_dir_path + '/' + dir_sequence
        file_output = output_dir_path + '/' + dir_sequence + '.txt'
        save_file = open(file_output, 'w')
        list_files = os.listdir(path_seq_input)
        list_files.sort()
        for file in list_files:
            path_file = path_seq_input + '/' + file
            with open(path_file, "r") as read_f:
                data_txt = read_f.readlines()
                for item in data_txt:
                    save_file.writelines(item)
        save_file.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Convert detection results to KITTI format')
    parser.add_argument('--input-dir-path', type=str, required=True, help='Directory containing mmdetection3d_kitti results pickle files')
    parser.add_argument('--output-dir-path', type=str, required=True, help='Directory to save converted KITTI format files')
    parser.add_argument('--spd-path', type=str, required=True, help='Path to SPD dataset')
    args = parser.parse_args()

    input_dir_path = args.input_dir_path
    spd_path = args.spd_path

    output_dir_path = os.path.join(args.output_dir_path, 'label')
    output_dir_path_seq = os.path.join(args.output_dir_path, 'label_seq')
    output_dir_path_track = os.path.join(args.output_dir_path + 'label_track')
    # Convert detection results from mmdetection3d_kitti format to KITTI format for all files in input_dir_path
    gen_kitti_result(input_dir_path, output_dir_path, spd_path)
    # Group converted KITTI format files by sequence
    gen_kitti_seq_result(output_dir_path, output_dir_path_seq, spd_path)
    # Group converted KITTI format files by sequence and write them into one txt file per sequence
    gen_kitti_seq_txt(output_dir_path_seq, output_dir_path_track)

    os.system("cp %s/* %s/"%(output_dir_path_track,args.output_dir_path))
    os.system("rm -rf %s"%(output_dir_path))
    os.system("rm -rf %s"%(output_dir_path_seq))
    os.system("rm -rf %s"%(output_dir_path_track))


import os
import numpy as np
import argparse
from pypcd import pypcd
from tools.dataset_converter.utils import read_json, write_json, pcd2bin
import json


def get_calibs(calib_path):
    calib = read_json(calib_path)
    if "transform" in calib.keys():
        calib = calib["transform"]
    rotation = calib["rotation"]
    translation = calib["translation"]
    return rotation, translation


def rev_matrix(rotation, translation):
    rotation = np.matrix(rotation)
    rev_R = rotation.I
    rev_R = np.array(rev_R)
    rev_T = -np.dot(rev_R, translation)

    return rev_R, rev_T


def mul_matrix(rotation_1, translation_1, rotation_2, translation_2):
    rotation_1 = np.matrix(rotation_1)
    translation_1 = np.matrix(translation_1)
    rotation_2 = np.matrix(rotation_2)
    translation_2 = np.matrix(translation_2)

    rotation = rotation_2 * rotation_1
    translation = rotation_2 * translation_1 + translation_2
    rotation = np.array(rotation)
    translation = np.array(translation)

    return rotation, translation


def trans_lidar_i2v(inf_lidar2world_path, veh_lidar2novatel_path, veh_novatel2world_path, system_error_offset=None):
    inf_lidar2world_r, inf_lidar2world_t = get_calibs(inf_lidar2world_path)
    if system_error_offset is not None:
        inf_lidar2world_t[0][0] = inf_lidar2world_t[0][0] + system_error_offset["delta_x"]
        inf_lidar2world_t[1][0] = inf_lidar2world_t[1][0] + system_error_offset["delta_y"]

    veh_novatel2world_r, veh_novatel2world_t = get_calibs(veh_novatel2world_path)
    veh_world2novatel_r, veh_world2novatel_t = rev_matrix(veh_novatel2world_r, veh_novatel2world_t)
    inf_lidar2novatel_r, inf_lidar2novatel_t = mul_matrix(
        inf_lidar2world_r, inf_lidar2world_t, veh_world2novatel_r, veh_world2novatel_t
    )

    veh_lidar2novatel_r, veh_lidar2novatel_t = get_calibs(veh_lidar2novatel_path)
    veh_novatel2lidar_r, veh_novatel2lidar_t = rev_matrix(veh_lidar2novatel_r, veh_lidar2novatel_t)
    inf_lidar2lidar_r, inf_lidar2lidar_t = mul_matrix(
        inf_lidar2novatel_r, inf_lidar2novatel_t, veh_novatel2lidar_r, veh_novatel2lidar_t
    )

    return inf_lidar2lidar_r, inf_lidar2lidar_t


def trans_point(input_point, rotation, translation):
    input_point = np.array(input_point).reshape(3, 1)
    translation = np.array(translation).reshape(3, 1)
    rotation = np.array(rotation).reshape(3, 3)
    output_point = np.dot(rotation, input_point).reshape(3, 1) + np.array(translation).reshape(3, 1)
    return output_point


parser = argparse.ArgumentParser("Generate label from world coordinate to vehicle lidar coordinate.")
parser.add_argument(
    "--source-root", type=str, default="data/cooperative-vehicle-infrastructure", help="Raw data root about DAIR-V2X-C."
)


if __name__ == "__main__":
    args = parser.parse_args()
    dair_v2x_c_root = args.source_root
    c_jsons_path = os.path.join(dair_v2x_c_root, "cooperative/data_info.json")
    c_jsons = read_json(c_jsons_path)

    for c_json in c_jsons:
        inf_idx = c_json["infrastructure_image_path"].split("/")[-1].replace(".jpg", "")
        inf_lidar2world_path = os.path.join(
            dair_v2x_c_root, "infrastructure-side/calib/virtuallidar_to_world/" + inf_idx + ".json"
        )
        veh_idx = c_json["vehicle_image_path"].split("/")[-1].replace(".jpg", "")
        veh_lidar2novatel_path = os.path.join(
            dair_v2x_c_root, "vehicle-side/calib/lidar_to_novatel/" + veh_idx + ".json"
        )
        veh_novatel2world_path = os.path.join(
            dair_v2x_c_root, "vehicle-side/calib/novatel_to_world/" + veh_idx + ".json"
        )
        system_error_offset = c_json["system_error_offset"]
        if system_error_offset == "":
            system_error_offset = None
        calib_lidar_i2v_r, calib_lidar_i2v_t = trans_lidar_i2v(
            inf_lidar2world_path, veh_lidar2novatel_path, veh_novatel2world_path, system_error_offset
        )
        print("calib_lidar_i2v: ", calib_lidar_i2v_r, calib_lidar_i2v_t)
        calib_lidar_i2v = {}
        calib_lidar_i2v["rotation"] = calib_lidar_i2v_r.tolist()
        calib_lidar_i2v["translation"] = calib_lidar_i2v_t.tolist()
        calib_lidar_i2v_save_path = os.path.join(dair_v2x_c_root, "cooperative/calib/lidar_i2v/" + veh_idx + ".json")
        with open(calib_lidar_i2v_save_path, "w") as f:
            json.dump(calib_lidar_i2v, f)

        """Convert the pointcloud from infrastructure lidar coordinate to vehicle coordinate
        inf_pcd_path = os.path.join(dair_v2x_c_root, c_json["infrastructure_pointcloud_path"])
        inf_pcd = pypcd.PointCloud.from_path(inf_pcd_path)
        for ii in range(len(inf_pcd.pc_data["x"])):
            np_x = inf_pcd.pc_data["x"][ii]
            np_y = inf_pcd.pc_data["y"][ii]
            np_z = inf_pcd.pc_data["z"][ii]
            inf_point = np.array([np_x, np_y, np_z])
            i2v_point = trans_point(inf_point, calib_lidar_i2v_r, calib_lidar_i2v_t)
            inf_pcd.pc_data["x"][ii] = i2v_point[0]
            inf_pcd.pc_data["y"][ii] = i2v_point[1]
            inf_pcd.pc_data["z"][ii] = i2v_point[2]
            inf_pcd.pc_data["intensity"][ii] = inf_pcd.pc_data["intensity"][ii] / 255
        i2v_pcd_save_path = os.path.join(dair_v2x_c_root, "cooperative/velodyne_i2v/" + veh_idx + ".pcd")
        pypcd.save_point_cloud(inf_pcd, i2v_pcd_save_path)
        i2v_bin_save_path = os.path.join(dair_v2x_c_root, "cooperative/velodyne_i2v/" + veh_idx + ".bin")
        pcd2bin(i2v_pcd_save_path, i2v_bin_save_path)

        pcd_path = os.path.join(dair_v2x_c_root, "infrastructure-side/velodyne/" + inf_idx + ".pcd")
        bin_save_path = os.path.join(dair_v2x_c_root, "infrastructure-side/velodyne/" + inf_idx + ".bin")
        pcd2bin(pcd_path, bin_save_path)

        pcd_path = os.path.join(dair_v2x_c_root, "vehicle-side/velodyne/" + veh_idx + ".pcd")
        bin_save_path = os.path.join(dair_v2x_c_root, "vehicle-side/velodyne/" + veh_idx + ".bin")
        pcd2bin(pcd_path, bin_save_path)
        """


import os
import json
import argparse
import numpy as np
from pypcd import pypcd
import open3d as o3d
from tqdm import tqdm
import errno

from concurrent import futures as futures


def read_json(path_json):
    with open(path_json, "r") as load_f:
        my_json = json.load(load_f)
    return my_json


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise


def get_virtuallidar2world(path_virtuallidar2world):
    virtuallidar2world = read_json(path_virtuallidar2world)
    rotation = virtuallidar2world["rotation"]
    translation = virtuallidar2world["translation"]
    delta_x = virtuallidar2world["relative_error"]["delta_x"]
    delta_y = virtuallidar2world["relative_error"]["delta_y"]
    return rotation, translation, delta_x, delta_y


def get_novatel2world(path_novatel2world):
    novatel2world = read_json(path_novatel2world)
    rotation = novatel2world["rotation"]
    translation = novatel2world["translation"]
    return rotation, translation


def get_lidar2novatel(path_lidar2novatel):
    lidar2novatel = read_json(path_lidar2novatel)
    rotation = lidar2novatel["transform"]["rotation"]
    translation = lidar2novatel["transform"]["translation"]
    return rotation, translation


def get_data(data_info, path_pcd):
    for data in data_info:
        name1 = os.path.split(path_pcd)[-1]
        name2 = os.path.split(data["pointcloud_path"])[-1]
        if name1 == name2:
            return data


def trans(input_point, translation, rotation):
    input_point = np.array(input_point).reshape(3, -1)
    translation = np.array(translation).reshape(3, 1)
    rotation = np.array(rotation).reshape(3, 3)
    output_point = np.dot(rotation, input_point).reshape(3, -1) + np.array(translation).reshape(3, 1)
    return output_point


def rev_matrix(R):
    R = np.matrix(R)
    rev_R = R.I
    rev_R = np.array(rev_R)
    return rev_R


def trans_point_i2v(input_point, path_virtuallidar2world, path_novatel2world, path_lidar2novatel):
    # print('0:', input_point)

    # virtuallidar to world
    rotation, translation, delta_x, delta_y = get_virtuallidar2world(path_virtuallidar2world)
    point = trans(input_point, translation, rotation) + np.array([delta_x, delta_y, 0]).reshape(3, 1)
    """
    print('rotation, translation, delta_x, delta_y', rotation, translation, delta_x, delta_y)
    print('1:', point)
    """

    # world to novatel
    rotation, translation = get_novatel2world(path_novatel2world)
    new_rotation = rev_matrix(rotation)
    new_translation = -np.dot(new_rotation, translation)
    point = trans(point, new_translation, new_rotation)
    """
    print('rotation, translation:', rotation, translation)
    print('new_translation, new_rotation:', new_translation, new_rotation)
    print('2:', point)
    """

    # novatel to lidar
    rotation, translation = get_lidar2novatel(path_lidar2novatel)
    new_rotation = rev_matrix(rotation)
    new_translation = -np.dot(new_rotation, translation)
    point = trans(point, new_translation, new_rotation)
    """
    print('rotation, translation:', rotation, translation)
    print('new_translation, new_rotation:', new_translation, new_rotation)
    print('3:', point)
    """
    point = point.T

    return point


def read_pcd(path_pcd):
    pointpillar = o3d.io.read_point_cloud(path_pcd)
    points = np.asarray(pointpillar.points)
    return points


def show_pcd(path_pcd):
    pcd = read_pcd(path_pcd)
    o3d.visualization.draw_geometries([pcd])


def write_pcd(path_pcd, new_points, path_save):
    pc = pypcd.PointCloud.from_path(path_pcd)
    pc.pc_data["x"] = new_points[:, 0]
    pc.pc_data["y"] = new_points[:, 1]
    pc.pc_data["z"] = new_points[:, 2]
    pc.save_pcd(path_save, compression="binary_compressed")


def trans_pcd_i2v(path_pcd, path_virtuallidar2world, path_novatel2world, path_lidar2novatel, path_save):
    # (n, 3)
    points = read_pcd(path_pcd)
    # (n, 3)
    new_points = trans_point_i2v(points.T, path_virtuallidar2world, path_novatel2world, path_lidar2novatel)
    write_pcd(path_pcd, new_points, path_save)

    
def map_func(data, path_c, path_dest, i_data_info, v_data_info):
    path_pcd_i = os.path.join(path_c, data["infrastructure_pointcloud_path"])
    path_pcd_v = os.path.join(path_c, data["vehicle_pointcloud_path"])
    i_data = get_data(i_data_info, path_pcd_i)
    v_data = get_data(v_data_info, path_pcd_v)
    path_virtuallidar2world = os.path.join(
        path_c, "infrastructure-side", i_data["calib_virtuallidar_to_world_path"]
    )
    path_novatel2world = os.path.join(path_c, "vehicle-side", v_data["calib_novatel_to_world_path"])
    path_lidar2novatel = os.path.join(path_c, "vehicle-side", v_data["calib_lidar_to_novatel_path"])
    name = os.path.split(path_pcd_i)[-1]
    path_save = os.path.join(path_dest, name)
    trans_pcd_i2v(path_pcd_i, path_virtuallidar2world, path_novatel2world, path_lidar2novatel, path_save)
    
    
def get_i2v(path_c, path_dest, num_worker):
    mkdir_p(path_dest)
    path_c_data_info = os.path.join(path_c, "cooperative/data_info.json")
    path_i_data_info = os.path.join(path_c, "infrastructure-side/data_info.json")
    path_v_data_info = os.path.join(path_c, "vehicle-side/data_info.json")
    c_data_info = read_json(path_c_data_info)
    i_data_info = read_json(path_i_data_info)
    v_data_info = read_json(path_v_data_info)
    
    total = len(c_data_info)
    with tqdm(total=total) as pbar:
        with futures.ProcessPoolExecutor(num_worker) as executor:
            res = [executor.submit(map_func, data, path_c, path_dest, i_data_info, v_data_info) for data in c_data_info]
            for _ in futures.as_completed(res):
                pbar.update(1)

                
parser = argparse.ArgumentParser("Convert The Point Cloud from Infrastructure to Ego-vehicle")
parser.add_argument(
    "--source-root",
    type=str,
    default="./data/DAIR-V2X/cooperative-vehicle-infrastructure",
    help="Raw data root about DAIR-V2X-C.",
)
parser.add_argument(
    "--target-root",
    type=str,
    default="./data/DAIR-V2X/cooperative-vehicle-infrastructure/vic3d-early-fusion/velodyne/lidar_i2v",
    help="The data root where the data with ego-vehicle coordinate is generated",
)
parser.add_argument(
    "--num-worker",
    type=int,
    default=1,
    help="Number of workers for multi-processing",
)

if __name__ == "__main__":
    args = parser.parse_args()
    source_root = args.source_root
    target_root = args.target_root
    num_worker = args.num_worker

    get_i2v(source_root, target_root, num_worker)



import numpy as np
from pypcd import pypcd
import os
import errno
import json
from tqdm import tqdm
import argparse


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise


def read_json(path_json):
    with open(path_json, "r") as load_f:
        my_json = json.load(load_f)
    return my_json


def concatenate_pcd2bin(path1, path2, path_save):
    pc1 = pypcd.PointCloud.from_path(path1)
    pc2 = pypcd.PointCloud.from_path(path2)

    np_x1 = (np.array(pc1.pc_data["x"], dtype=np.float32)).astype(np.float32)
    np_y1 = (np.array(pc1.pc_data["y"], dtype=np.float32)).astype(np.float32)
    np_z1 = (np.array(pc1.pc_data["z"], dtype=np.float32)).astype(np.float32)
    np_i1 = (np.array(pc1.pc_data["intensity"], dtype=np.float32)).astype(np.float32) / 255

    np_x2 = (np.array(pc2.pc_data["x"], dtype=np.float32)).astype(np.float32)
    np_y2 = (np.array(pc2.pc_data["y"], dtype=np.float32)).astype(np.float32)
    np_z2 = (np.array(pc2.pc_data["z"], dtype=np.float32)).astype(np.float32)
    np_i2 = (np.array(pc2.pc_data["intensity"], dtype=np.float32)).astype(np.float32) / 255

    np_x = np.append(np_x1, np_x2)
    np_y = np.append(np_y1, np_y2)
    np_z = np.append(np_z1, np_z2)
    np_i = np.append(np_i1, np_i2)

    points_32 = np.transpose(np.vstack((np_x, np_y, np_z, np_i)))
    points_32.tofile(path_save)


def concatenate_pcd_i_and_v(path_c, path_i2v, path_dest):
    mkdir_p(path_dest)

    path_c_data_info = os.path.join(path_c, "cooperative/data_info.json")
    c_data_info = read_json(path_c_data_info)

    for data in tqdm(c_data_info):
        path_pcd_v = os.path.join(path_c, data["vehicle_pointcloud_path"])

        name_i = os.path.split(data["infrastructure_pointcloud_path"])[-1]
        path_pcd_i = os.path.join(path_i2v, name_i)

        name = os.path.split(path_pcd_v)[-1]
        name = name.replace(".pcd", ".bin")
        path_save = os.path.join(path_dest, name)
        concatenate_pcd2bin(path_pcd_i, path_pcd_v, path_save)


parser = argparse.ArgumentParser("Concat the Converted Infrastructure Point Cloud with Vehicle Point Cloud.")
parser.add_argument(
    "--source-root",
    type=str,
    default="./data/DAIR-V2X/cooperative-vehicle-infrastructure",
    help="Raw data root about DAIR-V2X-C.",
)
parser.add_argument(
    "--i2v-root",
    type=str,
    default="./data/DAIR-V2X/cooperative-vehicle-infrastructure/vic3d-early-fusion/velodyne/lidar_i2v",
    help="The data root where the data with ego-vehicle coordinate is generated.",
)
parser.add_argument(
    "--target-root",
    type=str,
    default="./data/DAIR-V2X/cooperative-vehicle-infrastructure/vic3d-early-fusion/velodyne-concated",
    help="The concated point cloud.",
)

if __name__ == "__main__":
    args = parser.parse_args()
    path_c = args.source_root
    path_i2v = args.i2v_root
    path_dest = args.target_root

    concatenate_pcd_i_and_v(path_c, path_i2v, path_dest)


import numpy as np
from pypcd import pypcd
import os
import errno
import json
from tqdm import tqdm
import argparse


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise


def read_json(path_json):
    with open(path_json, "r") as load_f:
        my_json = json.load(load_f)
    return my_json


def concatenate_pcd2bin(path1, path2, path_save):
    pc1 = pypcd.PointCloud.from_path(path1)
    pc2 = pypcd.PointCloud.from_path(path2)

    np_x1 = (np.array(pc1.pc_data["x"], dtype=np.float32)).astype(np.float32)
    np_y1 = (np.array(pc1.pc_data["y"], dtype=np.float32)).astype(np.float32)
    np_z1 = (np.array(pc1.pc_data["z"], dtype=np.float32)).astype(np.float32)
    np_i1 = (np.array(pc1.pc_data["intensity"], dtype=np.float32)).astype(np.float32) / 255

    np_x2 = (np.array(pc2.pc_data["x"], dtype=np.float32)).astype(np.float32)
    np_y2 = (np.array(pc2.pc_data["y"], dtype=np.float32)).astype(np.float32)
    np_z2 = (np.array(pc2.pc_data["z"], dtype=np.float32)).astype(np.float32)
    np_i2 = (np.array(pc2.pc_data["intensity"], dtype=np.float32)).astype(np.float32) / 255

    np_x = np.append(np_x1, np_x2)
    np_y = np.append(np_y1, np_y2)
    np_z = np.append(np_z1, np_z2)
    np_i = np.append(np_i1, np_i2)

    points_32 = np.transpose(np.vstack((np_x, np_y, np_z, np_i)))
    points_32.tofile(path_save)


def concatenate_pcd_i_and_v(path_c, path_i2v, path_dest):
    mkdir_p(path_dest)

    path_c_data_info = os.path.join(path_c, "cooperative/data_info.json")
    c_data_info = read_json(path_c_data_info)

    for data in tqdm(c_data_info):
        path_pcd_v = os.path.join(path_c, "vehicle-side/velodyne", data["vehicle_frame"] + ".pcd")

        name_i = data["infrastructure_frame"] + ".pcd"
        path_pcd_i = os.path.join(path_i2v, name_i)

        name = data["vehicle_frame"] + ".bin"
        path_save = os.path.join(path_dest, name)
        concatenate_pcd2bin(path_pcd_i, path_pcd_v, path_save)


parser = argparse.ArgumentParser("Concat the Converted Infrastructure Point Cloud with Vehicle Point Cloud.")
parser.add_argument(
    "--source-root",
    type=str,
    default="./data/SPD/cooperative-vehicle-infrastructure",
    help="Raw data root about SPD-C.",
)
parser.add_argument(
    "--i2v-root",
    type=str,
    default="./data/SPD/cooperative-vehicle-infrastructure/vic3d-early-fusion/velodyne/lidar_i2v",
    help="The data root where the data with ego-vehicle coordinate is generated.",
)
parser.add_argument(
    "--target-root",
    type=str,
    default="./data/SPD/cooperative-vehicle-infrastructure/vic3d-early-fusion/velodyne-concated",
    help="The concated point cloud.",
)

if __name__ == "__main__":
    args = parser.parse_args()
    path_c = args.source_root
    path_i2v = args.i2v_root
    path_dest = args.target_root

    concatenate_pcd_i_and_v(path_c, path_i2v, path_dest)


import os
import argparse
import numpy as np
from rich.progress import track
from tools.dataset_converter.utils import read_json, write_json, inverse_matrix, trans_point, get_lidar_3d_8points, get_label_lidar_rotation, \
    get_camera_3d_alpha_rotation, get_cam_calib_intrinsic, get_lidar2camera, get_lidar2novatel, get_novatel2world, get_virtuallidar2world


def concat_txt(path_input, path_output, file_name_output):
    if not os.path.exists(path_output):
        os.makedirs(path_output)
    path_file_output = path_output + '/' + file_name_output + '.txt'
    write_f = open(path_file_output, 'w')
    list_files = os.listdir(path_input)
    list_files.sort()
    for file in list_files:
        path_file_input = path_input + '/' + file
        with open(path_file_input, 'r') as read_f:
            list_lines = read_f.readlines()
            for line in list_lines:
                write_f.writelines(line)
    write_f.close()


def concat_kitti_label_txt(path_input):
    """
        Args:
            path_input: "../../data/KITTI/cooperative-vehicle-infrastructure/" + vi + "/" + tvt
        Returns:
            None
    """
    list_sequence = os.listdir(path_input)
    list_sequence.sort()
    for sequence in track(list_sequence):
        path_input_label = path_input + '/' + sequence + '/label_02_i2v_split'
        path_output_label = path_input + '/' + sequence + '/label_02_i2v'
        concat_txt(path_input_label, path_output_label, sequence)


def gen_label_track_i2v(kitti_target_root):
    for tvt in ["training", "validation", "testing"]:
        input_path = kitti_target_root + '/' + tvt
        concat_kitti_label_txt(input_path)


def get_frame_data_info(data_info, frame_id):
    for data in data_info:
        if data["frame_id"] == frame_id:
            return data


def trans_points_cam2img(camera_3d_8_points, calib_intrinsic, with_depth=False):
    """
        Project points from camera coordicates to image coordinates.
        Args:
            camera_3d_8_points: list(8, 3)
            calib_intrinsic: np.array(3, 4)
        Returns:
            list(8, 2)
    """
    camera_3d_8_points = np.array(camera_3d_8_points)
    points_shape = np.array([8, 1])
    points_4 = np.concatenate((camera_3d_8_points, np.ones(points_shape)), axis=-1)
    point_2d = np.dot(calib_intrinsic, points_4.T)
    point_2d = point_2d.T
    point_2d_res = point_2d[:, :2] / point_2d[:, 2:3]
    if with_depth:
        return np.cat([point_2d_res, point_2d[..., 2:3]], dim=-1)
    return point_2d_res.tolist()


def trans_point_i2v(input_point, path_virtuallidar2world, path_novatel2world, path_lidar2novatel, delta_x, delta_y):
    # virtuallidar to world
    rotation, translation = get_virtuallidar2world(path_virtuallidar2world)
    point = trans_point(input_point, translation, rotation)

    # world to novatel
    rotation, translation = get_novatel2world(path_novatel2world)
    new_rotation = inverse_matrix(rotation)
    new_translation = - np.dot(new_rotation, translation)
    point = trans_point(point, new_translation, new_rotation)

    # novatel to lidar
    rotation, translation = get_lidar2novatel(path_lidar2novatel)
    new_rotation = inverse_matrix(rotation)
    new_translation = - np.dot(new_rotation, translation)
    point = trans_point(point, new_translation, new_rotation)

    point = np.array(point).reshape(3, 1) + np.array([delta_x, delta_y, 0]).reshape(3, 1)
    point = point.reshape(1, 3).tolist()[0]

    return point


def trans_label_i2v(dair_inf_label_path, dair_target_label_file, kitti_target_label_file, virtuallidar2world_path,
                    novatel2world_path, lidar2novatel_path, lidar2camera_path, camera2image_path, delta_x, delta_y,
                    pointcloud_timestamp):
    dair_inf_label_data = read_json(dair_inf_label_path)
    r_lidar2camera, t_lidar2camera = get_lidar2camera(lidar2camera_path)
    calib_intrinsic = get_cam_calib_intrinsic(camera2image_path)
    save_file = open(kitti_target_label_file, 'w')
    frame = kitti_target_label_file.split('/')[-1].split('.')[0]
    for m in range(len(dair_inf_label_data)):
        # 提取每个目标的信息
        i_label_3d_dimensions = [float(dair_inf_label_data[m]["3d_dimensions"]["l"]),
                                 float(dair_inf_label_data[m]["3d_dimensions"]["w"]),
                                 float(dair_inf_label_data[m]["3d_dimensions"]["h"])]
        i_label_lidar_3d_location = [float(dair_inf_label_data[m]["3d_location"]["x"]),
                                     float(dair_inf_label_data[m]["3d_location"]["y"]),
                                     float(dair_inf_label_data[m]["3d_location"]["z"])]
        i_label_lidar_rotation = dair_inf_label_data[m]["rotation"]

        # 生成车端lidar和camera坐标系下目标的中心点坐标v_label_lidar_3d_location, v_label_camera_3d_location
        v_label_lidar_3d_location = trans_point_i2v(i_label_lidar_3d_location, virtuallidar2world_path, novatel2world_path,
                                                    lidar2novatel_path, delta_x, delta_y)
        v_label_camera_3d_location = trans_point(v_label_lidar_3d_location, t_lidar2camera, r_lidar2camera)
        v_label_camera_3d_location[1] = v_label_camera_3d_location[1] + float(dair_inf_label_data[m]["3d_dimensions"]["h"]) / 2

        # 生成车端坐标系下目标的8个角点坐标
        list_i_lidar_3d_8_points = get_lidar_3d_8points(i_label_3d_dimensions, i_label_lidar_3d_location, i_label_lidar_rotation)
        list_v_lidar_3d_8_points = []
        list_v_camera_3d_8_points = []
        for i_lidar_point in list_i_lidar_3d_8_points:
            # 投影到车端lidar坐标系
            v_lidar_point = trans_point_i2v(i_lidar_point, virtuallidar2world_path, novatel2world_path, lidar2novatel_path,
                                            delta_x, delta_y)
            list_v_lidar_3d_8_points.append(v_lidar_point)
            # 投影到车端camera坐标系
            v_camera_point = trans_point(v_lidar_point, t_lidar2camera, r_lidar2camera)
            list_v_camera_3d_8_points.append(v_camera_point)

        # 生成车端lidar坐标系下目标的偏航角v_label_lidar_rotation
        v_label_lidar_rotation = get_label_lidar_rotation(list_v_lidar_3d_8_points)
        # 生成车端lidar坐标系下目标的alpha和偏航角rotation_y
        alpha, i_label_camera_rotation = get_camera_3d_alpha_rotation(list_v_camera_3d_8_points, v_label_camera_3d_location)

        # 投影到车端图像坐标系
        v_label_image_8_points_2d = trans_points_cam2img(list_v_camera_3d_8_points, calib_intrinsic)
        x_max = max(v_label_image_8_points_2d[:][0])
        x_min = min(v_label_image_8_points_2d[:][0])
        y_max = max(v_label_image_8_points_2d[:][1])
        y_min = min(v_label_image_8_points_2d[:][1])

        # 更新路端投影到车端的目标信息
        dair_inf_label_data[m]["alpha"] = alpha
        dair_inf_label_data[m]["3d_location"]["x"] = v_label_lidar_3d_location[0]
        dair_inf_label_data[m]["3d_location"]["y"] = v_label_lidar_3d_location[1]
        dair_inf_label_data[m]["3d_location"]["z"] = v_label_lidar_3d_location[2]
        dair_inf_label_data[m]["rotation"] = v_label_lidar_rotation

        # 更新贴合camera的label的image 2d信息
        dair_inf_label_data[m]["2d_box"]["xmin"] = x_min
        dair_inf_label_data[m]["2d_box"]["ymin"] = y_min
        dair_inf_label_data[m]["2d_box"]["xmax"] = x_max
        dair_inf_label_data[m]["2d_box"]["ymax"] = y_max
        # 保存车端label投影到路端的label文件

        # 生成 kitti label
        list_kitti_label = [frame, dair_inf_label_data[m]["type"], str(dair_inf_label_data[m]["track_id"]),
                            str(dair_inf_label_data[m]["truncated_state"]),
                            str(dair_inf_label_data[m]["occluded_state"]), str(dair_inf_label_data[m]["alpha"]),
                            str(dair_inf_label_data[m]["2d_box"]["xmin"]),
                            str(dair_inf_label_data[m]["2d_box"]["ymin"]), str(dair_inf_label_data[m]["2d_box"]["xmax"]),
                            str(dair_inf_label_data[m]["2d_box"]["ymax"]), str(dair_inf_label_data[m]["3d_dimensions"]["h"]),
                            str(dair_inf_label_data[m]["3d_dimensions"]["w"]), str(dair_inf_label_data[m]["3d_dimensions"]["l"]),
                            str(v_label_camera_3d_location[0]), str(v_label_camera_3d_location[1]),
                            str(v_label_camera_3d_location[2]),
                            str(i_label_camera_rotation), str(dair_inf_label_data[m]["3d_location"]["x"]),
                            str(dair_inf_label_data[m]["3d_location"]["y"]), str(dair_inf_label_data[m]["3d_location"]["z"]),
                            str(dair_inf_label_data[m]["rotation"]), pointcloud_timestamp, "1", "1", dair_inf_label_data[m]["token"] + '\n']
        str_kitti_label = ' '.join(list_kitti_label)
        save_file.writelines(str_kitti_label)
    write_json(dair_target_label_file, dair_inf_label_data)
    save_file.close()


def get_i2v(dair_source_path, dair_target_path, kitti_target_path, split_info, label_type):
    dict_sequence2tvt = {}
    for tvt in [["train", "training"], ["val", "validation"], ["test", "testing"]]:
        for seq in split_info["batch_split"][tvt[0]]:
            dict_sequence2tvt[seq] = tvt[1]

    inf_label_type = label_type.replace("lidar", "virtuallidar")
    dair_target_label_path = f'{dair_target_path}/label_i2v/{inf_label_type}'
    if not os.path.exists(dair_target_label_path):
        os.makedirs(dair_target_label_path)

    coop_data_info_path = f'{dair_source_path}/cooperative/data_info.json'
    coop_data_info = read_json(coop_data_info_path)
    inf_data_info_path = f'{dair_source_path}/infrastructure-side/data_info.json'
    inf_data_info = read_json(inf_data_info_path)

    for i in track(coop_data_info):

        virtuallidar2world_path = f'{dair_source_path}/infrastructure-side/calib/virtuallidar_to_world/{i["infrastructure_frame"]}.json'
        novatel2world_path = f'{dair_source_path}/vehicle-side/calib/novatel_to_world/{i["vehicle_frame"]}.json'
        lidar2novatel_path = f'{dair_source_path}/vehicle-side/calib/lidar_to_novatel/{i["vehicle_frame"]}.json'
        lidar2camera_path = f'{dair_source_path}/vehicle-side/calib/lidar_to_camera/{i["vehicle_frame"]}.json'
        camera2image_path = f'{dair_source_path}/vehicle-side/calib/camera_intrinsic/{i["vehicle_frame"]}.json'
        delta_x = i["system_error_offset"]["delta_x"]
        delta_y = i["system_error_offset"]["delta_y"]

        # 转换label文件
        dair_inf_label_path = f'{dair_source_path}/infrastructure-side/label/{inf_label_type}/{i["infrastructure_frame"]}.json'
        dair_target_label_file = f'{dair_target_label_path}/{i["vehicle_frame"]}.json'
        kitti_target_label_path = f'{kitti_target_path}/{dict_sequence2tvt[i["infrastructure_sequence"]]}/{i["infrastructure_sequence"]}/label_02_i2v_split'
        if not os.path.exists(kitti_target_label_path):
            os.makedirs(kitti_target_label_path)
        kitti_target_label_file = f'{kitti_target_label_path}/{i["infrastructure_frame"]}.txt'
        for j in inf_data_info:
            if j["frame_id"] == i["infrastructure_frame"]:
                pointcloud_timestamp = j["pointcloud_timestamp"]
        trans_label_i2v(dair_inf_label_path, dair_target_label_file, kitti_target_label_file, virtuallidar2world_path,
                        novatel2world_path, lidar2novatel_path, lidar2camera_path, camera2image_path, delta_x, delta_y,
                        pointcloud_timestamp)


if __name__ == "__main__":
    parser = argparse.ArgumentParser("Convert The Label from Infrastructure-side to Vehicle-side")
    parser.add_argument(
        "--dair-source-root",
        type=str,
        default="../../data/SPD/cooperative-vehicle-infrastructure",
        help="Raw data root about DAIR-V2X-C"
    )
    parser.add_argument(
        "--dair-target-root",
        type=str,
        default="../../data/SPD/cooperative-vehicle-infrastructure/infrastructure-side",
        help="The dair format infrastructure-side data root",
    )
    parser.add_argument(
        "--kitti-target-root",
        type=str,
        default="../../data/KITTI/cooperative-vehicle-infrastructure/infrastructure-side",
        help="The kitti format infrastructure-side data root",
    )
    parser.add_argument(
        "--split-path",
        type=str,
        default="../../data/split_datas/cooperative-split-data-spd.json",
        help="Json file to split the data into training/validation/testing."
    )
    parser.add_argument("--label-type", type=str, default="lidar", help="label type from ['lidar', 'camera']")
    args = parser.parse_args()
    dair_source_root = args.dair_source_root
    dair_target_root = args.dair_target_root
    kitti_target_root = args.kitti_target_root
    split_path = args.split_path
    split_info = read_json(split_path)
    label_type = args.label_type

    get_i2v(dair_source_root, dair_target_root, kitti_target_root, split_info, label_type)
    gen_label_track_i2v(kitti_target_root)


import os
import numpy as np
from tqdm import tqdm
import math
import argparse
from tools.dataset_converter.utils import read_json, write_json, mkdir_p

"""
            virtuallidar2world
inf lidar ------------------------> world coordinate <===== label_world
              补充   relative error      ^
                                         |
                                         |
                                         |
                                         |
                                         | novatel2world
                                         |
                                         |
                                         |
                                         |
                 lidar2novatel           |
veh lidar --------------------------> novatel

"""


"""
   (x0y0z0, x0y0z1, x0y1z1, x0y1z0, x1y0z0, x1y0z1, x1y1z1, x1y1z0)

   ..code - block:: none


                        front z
                             /
                            /
              (x0, y0, z1) + -----------  + (x1, y0, z1)
                          /|            / |
                         / |           /  |
           (x0, y0, z0) + ----------- +   + (x1, y1, z1)
                        |  /      .   |  /
                        | / oriign    | /
           (x0, y1, z0) + ----------- + -------> x right
                        |             (x1, y1, z0)
                        |
                        v
                   down y

   """


def get_3d_location(data_label_world):
    x = data_label_world["3d_location"]["x"]
    y = data_label_world["3d_location"]["y"]
    z = data_label_world["3d_location"]["z"]
    point = np.array([x, y, z]).reshape(3, 1)
    return point


def write_3d_location(point):
    x = float(point[0])
    y = float(point[1])
    z = float(point[2])
    return x, y, z


def get_world_8_points(data_label_world):
    world_8_points = data_label_world["world_8_points"]
    points = []
    for i in range(8):
        point = np.array(world_8_points[i]).reshape(3, 1)
        points.append(point)
    return points


def write_world_8_points(points):
    my_points = []
    for i in range(8):
        point = np.array(points[i]).reshape(1, 3).tolist()[0]
        my_points.append(point)
    return my_points


def get_novatel2world(path_novatel2world):
    novatel2world = read_json(path_novatel2world)
    rotation = novatel2world["rotation"]
    translation = novatel2world["translation"]
    return rotation, translation


def get_lidar2novatel(path_lidar2novatel):
    lidar2novatel = read_json(path_lidar2novatel)
    rotation = lidar2novatel["transform"]["rotation"]
    translation = lidar2novatel["transform"]["translation"]
    return rotation, translation


def get_data(data_info, path_pcd):
    for data in data_info:
        name1 = os.path.split(path_pcd)[-1]
        name2 = os.path.split(data["pointcloud_path"])[-1]
        if name1 == name2:
            return data


def trans(input_point, translation, rotation):
    input_point = np.array(input_point).reshape(3, 1)
    translation = np.array(translation).reshape(3, 1)
    rotation = np.array(rotation).reshape(3, 3)
    output_point = np.dot(rotation, input_point).reshape(3, 1) + np.array(translation).reshape(3, 1)
    return output_point


def rev_matrix(R):
    R = np.matrix(R)
    rev_R = R.I
    rev_R = np.array(rev_R)
    return rev_R


def trans_point_world2v(point, path_novatel2world, path_lidar2novatel):
    # world to novatel
    rotation, translation = get_novatel2world(path_novatel2world)
    new_rotation = rev_matrix(rotation)
    new_translation = -np.dot(new_rotation, translation)
    point = trans(point, new_translation, new_rotation)

    # novatel to lidar
    rotation, translation = get_lidar2novatel(path_lidar2novatel)
    new_rotation = rev_matrix(rotation)
    new_translation = -np.dot(new_rotation, translation)
    point = trans(point, new_translation, new_rotation)

    point = point.reshape(1, 3).tolist()
    point = point[0]

    return point


def label_world2v(path_cooperative_label, path_novatel2world, path_lidar2novatel):
    label_world = read_json(path_cooperative_label)
    new_label = []

    for i in range(len(label_world)):
        my_3d_point = get_3d_location(label_world[i])
        new_3d_point = trans_point_world2v(my_3d_point, path_novatel2world, path_lidar2novatel)

        world_8_points = get_world_8_points(label_world[i])
        my_world_8_points = []
        for j in range(8):
            point = world_8_points[j]
            point = trans_point_world2v(point, path_novatel2world, path_lidar2novatel)
            my_world_8_points.append(point)
        new_world_8_points = write_world_8_points(my_world_8_points)

        length = label_world[i]["3d_dimensions"]["l"]
        w = label_world[i]["3d_dimensions"]["w"]
        rotation = get_rotation(new_world_8_points, new_3d_point, length, w)

        label_world[i]["3d_location"]["x"] = new_3d_point[0]
        label_world[i]["3d_location"]["y"] = new_3d_point[1]
        label_world[i]["3d_location"]["z"] = new_3d_point[2]
        label_world[i]["rotation"] = rotation
        label_world[i]["world_8_points"] = new_world_8_points

        new_label.append(label_world[i])
    return new_label


def get_rotation(world_8_points, my_3d_point, length, w):
    x = my_3d_point[0]
    a = world_8_points[0][0]
    b = world_8_points[1][0]
    c = world_8_points[2][0]
    r_tan = ((b + c - 2 * x) * length) / ((a + b - 2 * x) * w)
    rotation = math.atan(r_tan)
    return rotation


def gen_new_label(path_cooperative_label, path_novatel2world, path_lidar2novatel, path_save):
    new_label = label_world2v(path_cooperative_label, path_novatel2world, path_lidar2novatel)
    write_json(path_save, new_label)


def get_label2v(path_c, path_dest):
    mkdir_p(path_dest)
    path_c_data_info = os.path.join(path_c, "cooperative/data_info.json")
    path_v_data_info = os.path.join(path_c, "vehicle-side/data_info.json")
    c_data_info = read_json(path_c_data_info)
    v_data_info = read_json(path_v_data_info)

    for data in tqdm(c_data_info):
        path_pcd_v = os.path.join(path_c, data["vehicle_pointcloud_path"])
        path_cooperative_label = os.path.join(path_c, data["cooperative_label_path"])

        v_data = get_data(v_data_info, path_pcd_v)
        path_novatel2world = os.path.join(path_c, "vehicle-side", v_data["calib_novatel_to_world_path"])
        path_lidar2novatel = os.path.join(path_c, "vehicle-side", v_data["calib_lidar_to_novatel_path"])

        name = os.path.split(path_cooperative_label)[-1]
        path_save = os.path.join(path_dest, name)
        gen_new_label(path_cooperative_label, path_novatel2world, path_lidar2novatel, path_save)


parser = argparse.ArgumentParser("Generate label from world coordinate to vehicle lidar coordinate.")
parser.add_argument(
    "--source-root",
    type=str,
    default="./data/cooperative-vehicle-infrastructure",
    help="Raw data root about DAIR-V2X-C.",
)
parser.add_argument(
    "--target-root",
    type=str,
    default="./label_new",
    help="The label root where the label is in vehicle lidar coordinate system.",
)

if __name__ == "__main__":
    args = parser.parse_args()
    source_root = args.source_root
    target_label_root = args.target_root
    get_label2v(source_root, target_label_root)


import os
import argparse
from tools.dataset_converter.utils import read_json, get_lidar2camera, trans_point, get_lidar_3d_8points, get_camera_3d_alpha_rotation
from rich.progress import track

parser = argparse.ArgumentParser("Generate the Kitti Format Data")
parser.add_argument("--source-root", type=str, default="data/V2X-Seq-SPD",
                    help="Raw data root about SPD")
parser.add_argument("--target-root", type=str, default="data/KITTI-Track/cooperative",
                    help="The data root where the data with kitti-Track format is generated")
parser.add_argument("--split-path", type=str, default="data/split_datas/cooperative-split-data-spd.json",
                    help="Json file to split the data into training/validation/testing.")
parser.add_argument("--no-classmerge", action="store_true",
                    help="Not to merge the four classes [Car, Truck, Van, Bus] into one class [Car]")
parser.add_argument("--temp-root", type=str, default="./tmp_file", help="Temporary intermediate file root.")


def concat_txt(input_path, output_path, output_file_name):
    if not os.path.exists(output_path):
        os.makedirs(output_path)
    path_file_output = output_path + '/' + output_file_name + '.txt'
    write_f = open(path_file_output, 'w')
    list_files = os.listdir(input_path)
    list_files.sort()
    for file in list_files:
        path_file_input = input_path + '/' + file
        with open(path_file_input, 'r') as read_f:
            list_lines = read_f.readlines()
            for line in list_lines:
                write_f.writelines(line)
    write_f.close()


def label_dair2kiiti_by_frame(dair_label_file_path, kitti_label_file_path, rotation, translation, frame, pointcloud_timestamp,
                              no_classmerge):
    save_file = open(kitti_label_file_path, 'w')
    list_labels = read_json(dair_label_file_path)
    for label in list_labels:
        if not no_classmerge:
            label["type"] = label["type"].replace("Truck", "Car")
            label["type"] = label["type"].replace("Van", "Car")
            label["type"] = label["type"].replace("Bus", "Car")
        label_3d_dimensions = [float(label["3d_dimensions"]["l"]), float(label["3d_dimensions"]["w"]),
                               float(label["3d_dimensions"]["h"])]
        lidar_3d_location = [float(label["3d_location"]["x"]), float(label["3d_location"]["y"]),
                             float(label["3d_location"]["z"])]
        rotation_z = float(label["rotation"])
        lidar_3d_8_points = get_lidar_3d_8points(label_3d_dimensions, lidar_3d_location, rotation_z)

        lidar_3d_bottom_location = [float(label["3d_location"]["x"]), float(label["3d_location"]["y"]),
                                    float(label["3d_location"]["z"]) - float(label["3d_dimensions"]["h"]) / 2]
        camera_3d_location = trans_point(lidar_3d_bottom_location, rotation, translation)
        camera_3d_8_points = []
        for lidar_point in lidar_3d_8_points:
            camera_point = trans_point(lidar_point, rotation, translation)
            camera_3d_8_points.append(camera_point)

        alpha, rotation_y = get_camera_3d_alpha_rotation(camera_3d_8_points, camera_3d_location)

        list_item = [frame, str(label["type"]), str(label["track_id"]),
                     str(label["truncated_state"]), str(label["occluded_state"]), str(alpha),
                     str(label["2d_box"]["xmin"]), str(label["2d_box"]["ymin"]),
                     str(label["2d_box"]["xmax"]), str(label["2d_box"]["ymax"]), str(label_3d_dimensions[2]),
                     str(label_3d_dimensions[1]), str(label_3d_dimensions[0]), str(camera_3d_location[0]),
                     str(camera_3d_location[1]), str(camera_3d_location[2]), str(rotation_y), str(lidar_3d_location[0]),
                     str(lidar_3d_location[1]), str(lidar_3d_location[2]), str(rotation_z), pointcloud_timestamp, "1", "1",
                     str(label["token"])]
        str_item = ' '.join(list_item) + '\n'
        save_file.writelines(str_item)
    save_file.close()


def label_dair2kitti(source_root, target_root, temp_root, dict_sequence2tvt, frame_info, no_classmerge):
    for i in track(frame_info):
        calib_lidar_to_camera_path = f'{source_root}/vehicle-side/calib/lidar_to_camera/{i["vehicle_frame"]}.json'
        rotation, translation = get_lidar2camera(calib_lidar_to_camera_path)
        source_label_path = f'{source_root}/cooperative/label/{i["vehicle_frame"]}.json'
        temp_label_path = f'{temp_root}/{dict_sequence2tvt[i["vehicle_sequence"]]}/{i["vehicle_sequence"]}/label_02_split'
        os.makedirs(temp_label_path, exist_ok=True)
        temp_label_file_path = f'{temp_label_path}/{i["vehicle_frame"]}.txt'
        label_dair2kiiti_by_frame(source_label_path, temp_label_file_path, rotation, translation, i["vehicle_frame"], "-1", no_classmerge)

    list_tvt = os.listdir(temp_root)
    for tvt in list_tvt:
        temp_tvt_path = f'{temp_root}/{tvt}'
        list_seqs = os.listdir(temp_tvt_path)
        for seq in list_seqs:
            temp_label_path = f'{temp_tvt_path}/{seq}/label_02_split'
            target_label_path = f'{target_root}/{tvt}/{seq}/label_02'
            concat_txt(temp_label_path, target_label_path, seq)


if __name__ == "__main__":
    args = parser.parse_args()
    spd_data_root = args.source_root
    target_root = args.target_root
    split_path = args.split_path
    split_info = read_json(split_path)
    dict_sequence2tvt = {}
    for tvt in [["train", "training"], ["val", "validation"], ["test", "testing"]]:
        for seq in split_info["batch_split"][tvt[0]]:
            dict_sequence2tvt[seq] = tvt[1]
    frame_info = read_json(f'{spd_data_root}/cooperative/data_info.json')
    temp_root = args.temp_root
    no_classmerge = args.no_classmerge
    if os.path.exists(temp_root):
        os.system("rm -rf %s" % temp_root)
    os.system("mkdir -p %s" % temp_root)
    label_dair2kitti(spd_data_root, target_root, temp_root, dict_sequence2tvt, frame_info, no_classmerge)
    os.system("cp -r %s/* %s/" % (temp_root, target_root))
    os.system("rm -rf %s" % temp_root)


# Convert SPD to KITTI-Track format

## Install pypcd

```bash
git clone https://github.com/klintan/pypcd.git
cd pypcd/ 
python setup.py install
```

## SPD -> KITTI-Track

```bash
python tools/dataset_converter/dair2kitti.py \
--source-root data/SPD/cooperative-vehicle-infrastructure/vehicle-side \
--target-root data/KITTI-Track/cooperative-vehicle-infrastructure/vehicle-side \
--split-path data/split_datas/cooperative-split-data-spd.json \
--label-type lidar \
--sensor-view vehicle \
--no-classmerge
```

````bash
python tools/dataset_converter/dair2kitti.py \
--source-root data/SPD/cooperative-vehicle-infrastructure/infrastructure-side \
--target-root data/KITTI-Track/cooperative-vehicle-infrastructure/infrastructure-side \
--split-path data/split_datas/cooperative-split-data-spd.json \
--label-type lidar \
--sensor-view infrastructure \
--no-classmerge
````


import argparse
import os
from tools.dataset_converter.spd2kitti_tracking.gen_kitti.label_dair2kitti import label_dair2kitti
from tools.dataset_converter.spd2kitti_tracking.gen_kitti.calib_dair2kitti import gen_calib2kitti
from tools.dataset_converter.spd2kitti_tracking.gen_kitti.gen_ImageSets_from_split_data import gen_ImageSet
from tools.dataset_converter.utils import read_json
from rich.progress import track

parser = argparse.ArgumentParser("Generate the Kitti Format Data")
parser.add_argument("--source-root", type=str, default="data/SPD/cooperative-vehicle-infrastructure/vehicle-side",
                    help="Raw data root about SPD")
parser.add_argument("--target-root", type=str, default="data/KITTI-Track/cooperative-vehicle-infrastructure/vehicle-side",
                    help="The data root where the data with kitti-Track format is generated")
parser.add_argument("--split-path", type=str, default="data/split_datas/cooperative-split-data-spd.json",
                    help="Json file to split the data into training/validation/testing.")
parser.add_argument("--label-type", type=str, default="lidar", help="label type from ['lidar', 'camera']")
parser.add_argument("--sensor-view", type=str, default="vehicle", help="Sensor view from ['infrastructure', 'vehicle']")
parser.add_argument("--no-classmerge", action="store_true",
                    help="Not to merge the four classes [Car, Truck, Van, Bus] into one class [Car]")
parser.add_argument("--temp-root", type=str, default="./tmp_file", help="Temporary intermediate file root.")


def rawdata_copy(source_root, target_root, dict_sequence2tvt, frame_info):
    for i in track(frame_info):
        # copy image
        source_image_path = f'{source_root}/{i["image_path"]}'
        target_image_path = f'{target_root}/{dict_sequence2tvt[i["sequence_id"]]}/{i["sequence_id"]}/image_02'
        if not os.path.exists(target_image_path):
            os.makedirs(target_image_path)
        os.system("cp %s %s/" % (source_image_path, target_image_path))
        # copy point cloud
        source_velodyne_path = f'{source_root}/{i["pointcloud_path"]}'
        target_velodyne_path = f'{target_root}/{dict_sequence2tvt[i["sequence_id"]]}/{i["sequence_id"]}/velodyne'
        if not os.path.exists(target_velodyne_path):
            os.makedirs(target_velodyne_path)
        os.system("cp %s %s/" % (source_velodyne_path, target_velodyne_path))


if __name__ == "__main__":
    print("================ Start to Convert ================")
    args = parser.parse_args()
    source_root = args.source_root
    target_root = args.target_root
    split_path = args.split_path
    split_info = read_json(split_path)
    dict_sequence2tvt = {}
    for tvt in [["train", "training"], ["val", "validation"], ["test", "testing"]]:
        for seq in split_info["batch_split"][tvt[0]]:
            dict_sequence2tvt[seq] = tvt[1]
    frame_info = read_json(f'{source_root}/data_info.json')

    print("================ Start to Copy Raw Data ================")
    rawdata_copy(source_root, target_root, dict_sequence2tvt, frame_info)

    print("================ Start to Generate Label ================")
    temp_root = args.temp_root
    label_type = args.label_type
    sensor_view = args.sensor_view
    no_classmerge = args.no_classmerge
    if os.path.exists(temp_root):
        os.system("rm -rf %s" % temp_root)
    os.system("mkdir -p %s" % temp_root)
    label_dair2kitti(source_root, target_root, temp_root, dict_sequence2tvt, frame_info, label_type, sensor_view, no_classmerge)
    os.system("cp -r %s/* %s/" % (temp_root, target_root))
    os.system("rm -rf %s" % temp_root)

    print("================ Start to Generate Calibration Files ================")
    gen_calib2kitti(source_root, target_root, dict_sequence2tvt, sensor_view)

    print("================ Start to Generate ImageSet Files ================")
    gen_ImageSet(target_root, split_info)


import os
import numpy as np
from rich.progress import track
from tools.dataset_converter.utils import read_json, inverse_matrix, get_lidar2camera, get_lidar2novatel, get_cam_calib_intrinsic


def convert_calib_dair2kitti(cam_intrinsic, r_velo2cam, t_velo2cam, r_novatel2velo, t_novatel2velo):
    P2 = cam_intrinsic.reshape(12, order="C")

    Tr_velo_to_cam = np.concatenate((r_velo2cam, t_velo2cam), axis=1)
    Tr_velo_to_cam = Tr_velo_to_cam.reshape(12, order="C")

    Tr_imu_to_velo = np.concatenate((r_novatel2velo, t_novatel2velo), axis=1)
    Tr_imu_to_velo = Tr_imu_to_velo.reshape(12, order="C")

    return P2, Tr_velo_to_cam, Tr_imu_to_velo


def gen_calib2kitti(source_root, target_root, dict_sequence2tvt, sensor_view):
    data_info = read_json(f'{source_root}/data_info.json')
    for i in track(data_info):
        target_calib_path = f'{target_root}/{dict_sequence2tvt[i["sequence_id"]]}/{i["sequence_id"]}/calib'
        if not os.path.exists(target_calib_path):
            os.makedirs(target_calib_path)
        target_calib_file_path = f'{target_calib_path}/{i["frame_id"]}.txt'
        calib_camera_intrinsic_path = f'{source_root}/{i["calib_camera_intrinsic_path"]}'
        cam_intrinsic = get_cam_calib_intrinsic(calib_camera_intrinsic_path)
        if sensor_view == "vehicle":
            calib_lidar_to_camera_path = f'{source_root}/{i["calib_lidar_to_camera_path"]}'
            r_velo2cam, t_velo2cam = get_lidar2camera(calib_lidar_to_camera_path)
            calib_lidar_to_novatel_path = f'{source_root}/{i["calib_lidar_to_novatel_path"]}'
            r_velo2imu, t_velo2imu = get_lidar2novatel(calib_lidar_to_novatel_path)
            r_imu2velo = inverse_matrix(r_velo2imu)
            t_imu2velo = - np.dot(r_imu2velo, t_velo2imu)
        else:
            calib_lidar_to_camera_path = f'{source_root}/{i["calib_virtuallidar_to_camera_path"]}'
            r_velo2cam, t_velo2cam = get_lidar2camera(calib_lidar_to_camera_path)
            r_imu2velo = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
            t_imu2velo = - np.array([[0], [0], [0]])

        P2, Tr_velo_to_cam, Tr_imu_to_velo = convert_calib_dair2kitti(cam_intrinsic, r_velo2cam, t_velo2cam, r_imu2velo, t_imu2velo)

        str_P2 = "P2: "
        str_Tr_velo_to_cam = "Tr_velo_to_cam: "
        str_Tr_imu_to_velo = "Tr_imu_to_velo: "
        for m in range(11):
            str_P2 = str_P2 + str(P2[m]) + " "
            str_Tr_velo_to_cam = str_Tr_velo_to_cam + str(Tr_velo_to_cam[m]) + " "
            str_Tr_imu_to_velo = str_Tr_imu_to_velo + str(Tr_imu_to_velo[m]) + " "
        str_P2 = str_P2 + str(P2[11])
        str_Tr_velo_to_cam = str_Tr_velo_to_cam + str(Tr_velo_to_cam[11])
        str_Tr_imu_to_velo = str_Tr_imu_to_velo + str(Tr_imu_to_velo[11])

        str_P0 = str_P2.replace("P2", "P0")
        str_P1 = str_P2.replace("P2", "P1")
        str_P3 = str_P2.replace("P2", "P3")
        str_R0_rect = "R0_rect: 1 0 0 0 1 0 0 0 1"

        with open(target_calib_file_path, "w") as save_file:
            gt_line = (
                    str_P0
                    + "\n"
                    + str_P1
                    + "\n"
                    + str_P2
                    + "\n"
                    + str_P3
                    + "\n"
                    + str_R0_rect
                    + "\n"
                    + str_Tr_velo_to_cam
                    + "\n"
                    + str_Tr_imu_to_velo
            )
            save_file.write(gt_line)


import os
from tools.dataset_converter.utils import write_txt


def gen_ImageSet(target_root, split_info):
    target_ImageSets_path = f'{target_root}/ImageSets'
    if not os.path.exists(target_ImageSets_path):
        os.makedirs(target_ImageSets_path)

    list_train_seqs = split_info["batch_split"]["train"]
    list_val_seqs = split_info["batch_split"]["val"]
    list_trainval_seqs = list_train_seqs + list_val_seqs
    list_test_seqs = split_info["batch_split"]["test"]
    list_train_seqs.sort()
    list_val_seqs.sort()
    list_trainval_seqs.sort()
    list_test_seqs.sort()

    str_train_seqs = ""
    str_val_seqs = ""
    str_trainval_seqs = ""
    str_test_seqs = ""

    for train_seq in list_train_seqs:
        str_train_seqs = str_train_seqs + train_seq + "\n"
    for val_seq in list_val_seqs:
        str_val_seqs = str_val_seqs + val_seq + "\n"
    for trainval_seq in list_trainval_seqs:
        str_trainval_seqs = str_trainval_seqs + trainval_seq + "\n"
    for test_seq in list_test_seqs:
        str_test_seqs = str_test_seqs + test_seq + "\n"

    write_txt(target_ImageSets_path + "/train.txt", str_train_seqs)
    write_txt(target_ImageSets_path + "/val.txt", str_val_seqs)
    write_txt(target_ImageSets_path + "/trainval.txt", str_trainval_seqs)
    write_txt(target_ImageSets_path + "/test.txt", str_test_seqs)



import os
from tools.dataset_converter.utils import read_json, get_lidar2camera, trans_point, get_lidar_3d_8points, get_camera_3d_alpha_rotation
from rich.progress import track


def concat_txt(input_path, output_path, output_file_name):
    if not os.path.exists(output_path):
        os.makedirs(output_path)
    path_file_output = output_path + '/' + output_file_name + '.txt'
    write_f = open(path_file_output, 'w')
    list_files = os.listdir(input_path)
    list_files.sort()
    for file in list_files:
        path_file_input = input_path + '/' + file
        with open(path_file_input, 'r') as read_f:
            list_lines = read_f.readlines()
            for line in list_lines:
                write_f.writelines(line)
    write_f.close()


def label_dair2kiiti_by_frame(dair_label_file_path, kitti_label_file_path, rotation, translation, frame, pointcloud_timestamp, no_classmerge):
    save_file = open(kitti_label_file_path, 'w')
    list_labels = read_json(dair_label_file_path)
    for label in list_labels:
        if not no_classmerge:
            label["type"] = label["type"].replace("Truck", "Car")
            label["type"] = label["type"].replace("Van", "Car")
            label["type"] = label["type"].replace("Bus", "Car")
        label_3d_dimensions = [float(label["3d_dimensions"]["l"]), float(label["3d_dimensions"]["w"]),
                               float(label["3d_dimensions"]["h"])]
        lidar_3d_location = [float(label["3d_location"]["x"]), float(label["3d_location"]["y"]),
                             float(label["3d_location"]["z"])]
        rotation_z = float(label["rotation"])
        lidar_3d_8_points = get_lidar_3d_8points(label_3d_dimensions, lidar_3d_location, rotation_z)

        lidar_3d_bottom_location = [float(label["3d_location"]["x"]), float(label["3d_location"]["y"]),
                                    float(label["3d_location"]["z"]) - float(label["3d_dimensions"]["h"]) / 2]
        camera_3d_location = trans_point(lidar_3d_bottom_location, rotation, translation)
        camera_3d_8_points = []
        for lidar_point in lidar_3d_8_points:
            camera_point = trans_point(lidar_point, rotation, translation)
            camera_3d_8_points.append(camera_point)

        alpha, rotation_y = get_camera_3d_alpha_rotation(camera_3d_8_points, camera_3d_location)

        list_item = [frame, str(label["type"]), str(label["track_id"]),
                     str(label["truncated_state"]), str(label["occluded_state"]), str(alpha),
                     str(label["2d_box"]["xmin"]), str(label["2d_box"]["ymin"]),
                     str(label["2d_box"]["xmax"]), str(label["2d_box"]["ymax"]), str(label_3d_dimensions[2]),
                     str(label_3d_dimensions[1]), str(label_3d_dimensions[0]), str(camera_3d_location[0]),
                     str(camera_3d_location[1]), str(camera_3d_location[2]), str(rotation_y), str(lidar_3d_location[0]),
                     str(lidar_3d_location[1]), str(lidar_3d_location[2]), str(rotation_z), pointcloud_timestamp, "1", "1",
                     str(label["token"])]
        str_item = ' '.join(list_item) + '\n'
        save_file.writelines(str_item)
    save_file.close()


def label_dair2kitti(source_root, target_root, temp_root, dict_sequence2tvt, frame_info, label_type, sensor_view, no_classmerge):
    if (sensor_view == "vehicle") or (sensor_view == "cooperative"):
        key_calib_l2c_path = "calib_lidar_to_camera_path"
    else:
        key_calib_l2c_path = "calib_virtuallidar_to_camera_path"
    for i in track(frame_info):
        calib_l2c_path = i[key_calib_l2c_path]
        calib_lidar_to_camera_path = f'{source_root}/{calib_l2c_path}'
        rotation, translation = get_lidar2camera(calib_lidar_to_camera_path)
        label_std_path = i["label_" + label_type + "_std_path"]
        source_label_path = f'{source_root}/{label_std_path}'
        temp_label_path = f'{temp_root}/{dict_sequence2tvt[i["sequence_id"]]}/{i["sequence_id"]}/label_02_split'
        if not os.path.exists(temp_label_path):
            os.makedirs(temp_label_path)
        temp_label_file_path = f'{temp_label_path}/{i["frame_id"]}.txt'
        label_dair2kiiti_by_frame(source_label_path, temp_label_file_path, rotation, translation, i["frame_id"], i["pointcloud_timestamp"], no_classmerge)

    list_tvt = os.listdir(temp_root)
    for tvt in list_tvt:
        temp_tvt_path = f'{temp_root}/{tvt}'
        list_seqs = os.listdir(temp_tvt_path)
        for seq in list_seqs:
            temp_label_path = f'{temp_tvt_path}/{seq}/label_02_split'
            target_label_path = f'{target_root}/{tvt}/{seq}/label_02'
            concat_txt(temp_label_path, target_label_path, seq)


import os
from tools.dataset_converter.utils import mkdir_p, read_json, get_files_path


def write_kitti_in_txt(my_json, path_txt):
    wf = open(path_txt, "w")
    for item in my_json:
        i1 = str(item["type"]).title()
        i2 = str(item["truncated_state"])
        i3 = str(item["occluded_state"])
        i4 = str(item["alpha"])
        i5, i6, i7, i8 = (
            str(item["2d_box"]["xmin"]),
            str(item["2d_box"]["ymin"]),
            str(item["2d_box"]["xmax"]),
            str(item["2d_box"]["ymax"]),
        )
        # i9, i10, i11 = str(item["3d_dimensions"]["h"]), str(item["3d_dimensions"]["w"]), str(item["3d_dimensions"]["l"])
        i9, i11, i10 = str(item["3d_dimensions"]["h"]), str(item["3d_dimensions"]["w"]), str(item["3d_dimensions"]["l"])
        i12, i13, i14 = str(item["3d_location"]["x"]), str(item["3d_location"]["y"]), str(item["3d_location"]["z"])
        # i15 = str(item["rotation"])
        i15 = str(-eval(item["rotation"]))
        item_list = [i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15]
        item_string = " ".join(item_list) + "\n"
        wf.write(item_string)
    wf.close()


def json2kitti(json_root, kitti_label_root):
    mkdir_p(kitti_label_root)
    jsons_path = get_files_path(json_root, ".json")
    for json_path in jsons_path:
        my_json = read_json(json_path)
        name = json_path.split("/")[-1][:-5] + ".txt"
        path_txt = os.path.join(kitti_label_root, name)
        write_kitti_in_txt(my_json, path_txt)


def rewrite_txt(path):
    with open(path, "r+") as f:
        data = f.readlines()
        find_str1 = "Truck"
        find_str2 = "Van"
        find_str3 = "Bus"
        replace_str = "Car"
        new_data = ""
        for line in data:
            if find_str1 in line:
                line = line.replace(find_str1, replace_str)
            if find_str2 in line:
                line = line.replace(find_str2, replace_str)
            if find_str3 in line:
                line = line.replace(find_str3, replace_str)
            new_data = new_data + line
    os.remove(path)
    f_new = open(path, "w")
    f_new.write(new_data)
    f_new.close()


def rewrite_label(path_file):
    path_list = get_files_path(path_file, ".txt")
    for path in path_list:
        rewrite_txt(path)


def label_filter(label_dir):
    label_dir = label_dir
    files = os.listdir(label_dir)

    for file in files:
        path = os.path.join(label_dir, file)

        lines_write = []
        with open(path, "r") as f:
            lines = f.readlines()
            for line in lines:
                wlh = float(line.split(" ")[9])
                if wlh > 0:
                    lines_write.append(line)

        with open(path, "w") as f:
            f.writelines(lines_write)


import json
import os
import errno
import numpy as np
from pypcd import pypcd


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise


def read_json(path):
    with open(path, "r") as f:
        my_json = json.load(f)
        return my_json


def write_json(path_json, new_dict):
    with open(path_json, "w") as f:
        json.dump(new_dict, f)


def write_txt(path, file):
    with open(path, "w") as f:
        f.write(file)


def get_files_path(path_my_dir, extention=".json"):
    path_list = []
    for (dirpath, dirnames, filenames) in os.walk(path_my_dir):
        for filename in filenames:
            if os.path.splitext(filename)[1] == extention:
                path_list.append(os.path.join(dirpath, filename))
    return path_list


def pcd2bin(pcd_file_path, bin_file_path):
    pc = pypcd.PointCloud.from_path(pcd_file_path)

    np_x = (np.array(pc.pc_data["x"], dtype=np.float32)).astype(np.float32)
    np_y = (np.array(pc.pc_data["y"], dtype=np.float32)).astype(np.float32)
    np_z = (np.array(pc.pc_data["z"], dtype=np.float32)).astype(np.float32)
    np_i = (np.array(pc.pc_data["intensity"], dtype=np.float32)).astype(np.float32) / 255

    points_32 = np.transpose(np.vstack((np_x, np_y, np_z, np_i)))
    points_32.tofile(bin_file_path)


import os
import numpy as np
import json
import errno
import math


def read_json(path_json):
    with open(path_json, "r") as load_f:
        my_json = json.load(load_f)
    return my_json


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise


def get_label(label):
    h = float(label["3d_dimensions"]["h"])
    w = float(label["3d_dimensions"]["w"])
    length = float(label["3d_dimensions"]["l"])
    x = float(label["3d_location"]["x"])
    y = float(label["3d_location"]["y"])
    z = float(label["3d_location"]["z"])
    rotation_y = float(label["rotation"])
    return h, w, length, x, y, z, rotation_y


def set_label(label, h, w, length, x, y, z, alpha, rotation_y):
    label["3d_dimensions"]["h"] = h
    label["3d_dimensions"]["w"] = w
    label["3d_dimensions"]["l"] = length
    label["3d_location"]["x"] = x
    label["3d_location"]["y"] = y
    label["3d_location"]["z"] = z
    label["alpha"] = alpha
    label["rotation_y"] = rotation_y


def normalize_angle(angle):
    # make angle in range [-0.5pi, 1.5pi]
    alpha_tan = np.tan(angle)
    alpha_arctan = np.arctan(alpha_tan)
    if np.cos(angle) < 0:
        alpha_arctan = alpha_arctan + math.pi
    return alpha_arctan


def get_camera_3d_8points(obj_size, yaw_lidar, center_lidar, center_in_cam, r_velo2cam, t_velo2cam):
    liadr_r = np.matrix(
        [[math.cos(yaw_lidar), -math.sin(yaw_lidar), 0], [math.sin(yaw_lidar), math.cos(yaw_lidar), 0], [0, 0, 1]]
    )
    l, w, h = obj_size
    corners_3d_lidar = np.matrix(
        [
            [l / 2, l / 2, -l / 2, -l / 2, l / 2, l / 2, -l / 2, -l / 2],
            [w / 2, -w / 2, -w / 2, w / 2, w / 2, -w / 2, -w / 2, w / 2],
            [0, 0, 0, 0, h, h, h, h],
        ]
    )
    corners_3d_lidar = liadr_r * corners_3d_lidar + np.matrix(center_lidar).T
    corners_3d_cam = r_velo2cam * corners_3d_lidar + t_velo2cam

    x0, z0 = corners_3d_cam[0, 0], corners_3d_cam[2, 0]
    x3, z3 = corners_3d_cam[0, 3], corners_3d_cam[2, 3]
    dx, dz = x0 - x3, z0 - z3
    yaw = math.atan2(-dz, dx)

    alpha = yaw - math.atan2(center_in_cam[0], center_in_cam[2])

    # add transfer
    if alpha > math.pi:
        alpha = alpha - 2.0 * math.pi
    if alpha <= (-1 * math.pi):
        alpha = alpha + 2.0 * math.pi

    alpha_arctan = normalize_angle(alpha)

    return alpha_arctan, yaw


def convert_point(point, matrix):
    return matrix @ point


def get_lidar2cam(calib):
    r_velo2cam = np.array(calib["rotation"])
    t_velo2cam = np.array(calib["translation"])
    r_velo2cam = r_velo2cam.reshape(3, 3)
    t_velo2cam = t_velo2cam.reshape(3, 1)
    return r_velo2cam, t_velo2cam


def gen_lidar2cam(source_root, target_root, label_type="lidar"):
    path_data_info = os.path.join(source_root, "data_info.json")
    data_info = read_json(path_data_info)
    write_path = os.path.join(target_root, "label", label_type)
    mkdir_p(write_path)

    for data in data_info:
        if "calib_virtuallidar_to_camera_path" in data.keys():
            calib_lidar2cam_path = data["calib_virtuallidar_to_camera_path"]
        else:
            calib_lidar2cam_path = data["calib_lidar_to_camera_path"]
        calib_lidar2cam = read_json(os.path.join(source_root, calib_lidar2cam_path))
        r_velo2cam, t_velo2cam = get_lidar2cam(calib_lidar2cam)
        Tr_velo_to_cam = np.hstack((r_velo2cam, t_velo2cam))

        labels_path = data["label_" + label_type + "_std_path"]
        labels = read_json(os.path.join(source_root, labels_path))
        for label in labels:
            h, w, l, x, y, z, yaw_lidar = get_label(label)
            z = z - h / 2
            bottom_center = [x, y, z]
            obj_size = [l, w, h]

            bottom_center_in_cam = r_velo2cam * np.matrix(bottom_center).T + t_velo2cam
            alpha, yaw = get_camera_3d_8points(
                obj_size, yaw_lidar, bottom_center, bottom_center_in_cam, r_velo2cam, t_velo2cam
            )
            cam_x, cam_y, cam_z = convert_point(np.array([x, y, z, 1]).T, Tr_velo_to_cam)

            set_label(label, h, w, l, cam_x, cam_y, cam_z, alpha, yaw)

        labels_path = labels_path.replace("virtuallidar", "lidar")
        write_path = os.path.join(target_root, labels_path)

        with open(write_path, "w") as f:
            json.dump(labels, f)


import os
from tools.dataset_converter.utils import read_json, mkdir_p, write_txt


def gen_ImageSet_from_split_data(ImageSets_path, split_data_path, sensor_view="vehicle"):
    split_data = read_json(split_data_path)
    test_file = ""
    train_file = ""
    val_file = ""

    if "vehicle_split" in split_data.keys():
        sensor_view = sensor_view + "_split"
        split_data = split_data[sensor_view]
    for i in range(len(split_data["train"])):
        name = split_data["train"][i]
        train_file = train_file + name + "\n"

    for i in range(len(split_data["val"])):
        name = split_data["val"][i]
        val_file = val_file + name + "\n"

    # The test part of the dataset has not been released
    # for i in range(len(split_data["test"])):
    #     name = split_data["test"][i]
    #     test_file = test_file + name + "\n"

    trainval_file = train_file + val_file

    mkdir_p(ImageSets_path)
    write_txt(os.path.join(ImageSets_path, "test.txt"), test_file)
    write_txt(os.path.join(ImageSets_path, "trainval.txt"), trainval_file)
    write_txt(os.path.join(ImageSets_path, "train.txt"), train_file)
    write_txt(os.path.join(ImageSets_path, "val.txt"), val_file)


import os
import numpy as np
from tools.dataset_converter.utils import mkdir_p, read_json, get_files_path


def convert_calib_v2x_to_kitti(cam_D, cam_K, t_velo2cam, r_velo2cam):
    P2 = np.zeros([3, 4])
    P2[:3, :3] = np.array(cam_K).reshape([3, 3], order="C")
    P2 = P2.reshape(12, order="C")

    Tr_velo_to_cam = np.concatenate((r_velo2cam, t_velo2cam), axis=1)
    Tr_velo_to_cam = Tr_velo_to_cam.reshape(12, order="C")

    return P2, Tr_velo_to_cam


def get_cam_D_and_cam_K(path):
    my_json = read_json(path)
    cam_D = my_json["cam_D"]
    cam_K = my_json["cam_K"]
    return cam_D, cam_K


def get_velo2cam(path):
    my_json = read_json(path)
    t_velo2cam = my_json["translation"]
    r_velo2cam = my_json["rotation"]
    return t_velo2cam, r_velo2cam


def gen_calib2kitti(path_camera_intrisinc, path_lidar_to_camera, path_calib):
    path_list_camera_intrisinc = get_files_path(path_camera_intrisinc, ".json")
    path_list_lidar_to_camera = get_files_path(path_lidar_to_camera, ".json")
    path_list_camera_intrisinc.sort()
    path_list_lidar_to_camera.sort()
    print(len(path_list_camera_intrisinc), len(path_list_lidar_to_camera))
    mkdir_p(path_calib)

    for i in range(len(path_list_camera_intrisinc)):
        cam_D, cam_K = get_cam_D_and_cam_K(path_list_camera_intrisinc[i])
        t_velo2cam, r_velo2cam = get_velo2cam(path_list_lidar_to_camera[i])
        json_name = os.path.split(path_list_camera_intrisinc[i])[-1][:-5] + ".txt"
        json_path = os.path.join(path_calib, json_name)

        t_velo2cam = np.array(t_velo2cam).reshape(3, 1)
        r_velo2cam = np.array(r_velo2cam).reshape(3, 3)
        P2, Tr_velo_to_cam = convert_calib_v2x_to_kitti(cam_D, cam_K, t_velo2cam, r_velo2cam)

        str_P2 = "P2: "
        str_Tr_velo_to_cam = "Tr_velo_to_cam: "
        for ii in range(11):
            str_P2 = str_P2 + str(P2[ii]) + " "
            str_Tr_velo_to_cam = str_Tr_velo_to_cam + str(Tr_velo_to_cam[ii]) + " "
        str_P2 = str_P2 + str(P2[11])
        str_Tr_velo_to_cam = str_Tr_velo_to_cam + str(Tr_velo_to_cam[11])

        str_P0 = str_P2
        str_P1 = str_P2
        str_P3 = str_P2
        str_R0_rect = "R0_rect: 1 0 0 0 1 0 0 0 1"
        str_Tr_imu_to_velo = str_Tr_velo_to_cam

        with open(json_path, "w") as fp:
            gt_line = (
                str_P0
                + "\n"
                + str_P1
                + "\n"
                + str_P2
                + "\n"
                + str_P3
                + "\n"
                + str_R0_rect
                + "\n"
                + str_Tr_velo_to_cam
                + "\n"
                + str_Tr_imu_to_velo
            )
            fp.write(gt_line)


# Convert SPD to KITTI format

## Install pypcd

```bash
git clone https://github.com/klintan/pypcd.git
cd pypcd/ 
python setup.py install
```

## SPD -> KITTI

```bash
python tools/dataset_converter/dair2kitti.py \
--source-root data/SPD/cooperative-vehicle-infrastructure/vehicle-side \
--target-root data/KITTI/cooperative-vehicle-infrastructure/vehicle-side \
--split-path data/split_datas/cooperative-split-data-spd.json \
--label-type lidar \
--sensor-view vehicle \
--no-classmerge
```

````bash
python tools/dataset_converter/dair2kitti.py \
--source-root data/SPD/cooperative-vehicle-infrastructure/infrastructure-side \
--target-root data/KITTI/cooperative-vehicle-infrastructure/infrastructure-side \
--split-path data/split_datas/cooperative-split-data-spd.json \
--label-type lidar \
--sensor-view infrastructure \
--no-classmerge
````


import argparse
import os
from tools.dataset_converter.spd2kitti_detection.gen_kitti.label_dair2kitti import label_dair2kitti
from tools.dataset_converter.spd2kitti_detection.gen_kitti.calib_dair2kitti import gen_calib2kitti
from tools.dataset_converter.spd2kitti_detection.gen_kitti.gen_ImageSets_from_split_data import gen_ImageSet
from tools.dataset_converter.utils import read_json, pcd2bin
from rich.progress import track

parser = argparse.ArgumentParser("Generate the Kitti Format Data")
parser.add_argument("--source-root", type=str, default="data/SPD/cooperative-vehicle-infrastructure/vehicle-side",
                    help="Raw data root about SPD")
parser.add_argument("--target-root", type=str, default="data/KITTI/cooperative-vehicle-infrastructure/vehicle-side",
                    help="The data root where the data with kitti format is generated")
parser.add_argument("--split-path", type=str, default="data/split_datas/cooperative-split-data-spd.json",
                    help="Json file to split the data into training/validation/testing.")
parser.add_argument("--label-type", type=str, default="lidar", help="label type from ['lidar', 'camera']")
parser.add_argument("--sensor-view", type=str, default="vehicle", help="Sensor view from ['infrastructure', 'vehicle']")
parser.add_argument("--no-classmerge", action="store_true",
                    help="Not to merge the four classes [Car, Truck, Van, Bus] into one class [Car]")
parser.add_argument("--temp-root", type=str, default="./tmp_file", help="Temporary intermediate file root.")


def rawdata_copy(source_root, target_root, dict_sequence2tvt, frame_info):
    for i in track(frame_info):
        # copy image
        source_image_path = f'{source_root}/{i["image_path"]}'
        target_image_path = f'{target_root}/{dict_sequence2tvt[i["sequence_id"]]}/image_2'
        if not os.path.exists(target_image_path):
            os.makedirs(target_image_path)
        os.system("cp %s %s/" % (source_image_path, target_image_path))
        # copy point cloud
        source_velodyne_pcd_path = f'{source_root}/{i["pointcloud_path"]}'
        source_velodyne_bin_path = source_velodyne_pcd_path.replace(".pcd", ".bin")
        target_velodyne_path = f'{target_root}/{dict_sequence2tvt[i["sequence_id"]]}/velodyne'
        if not os.path.exists(target_velodyne_path):
            os.makedirs(target_velodyne_path)
        if not os.path.exists(source_velodyne_bin_path):
            pcd2bin(source_velodyne_pcd_path, f'{target_velodyne_path}/{i["frame_id"]}.bin')
        else:
            os.system("cp %s %s/" % (source_velodyne_bin_path, target_velodyne_path))


if __name__ == "__main__":
    print("================ Start to Convert ================")
    args = parser.parse_args()
    source_root = args.source_root
    target_root = args.target_root
    split_path = args.split_path
    split_info = read_json(split_path)
    dict_sequence2tvt = {}
    for tvt in [["train", "training"], ["val", "training"], ["test", "testing"]]:
        for seq in split_info["batch_split"][tvt[0]]:
            dict_sequence2tvt[seq] = tvt[1]
    frame_info = read_json(f'{source_root}/data_info.json')

    print("================ Start to Copy Raw Data ================")
    rawdata_copy(source_root, target_root, dict_sequence2tvt, frame_info)

    print("================ Start to Generate Label ================")
    temp_root = args.temp_root
    label_type = args.label_type
    sensor_view = args.sensor_view
    no_classmerge = args.no_classmerge
    if os.path.exists(temp_root):
        os.system("rm -rf %s" % temp_root)
    os.system("mkdir -p %s" % temp_root)
    label_dair2kitti(source_root, temp_root, dict_sequence2tvt, frame_info, label_type, sensor_view, no_classmerge)
    os.system("cp -r %s/* %s/" % (temp_root, target_root))
    os.system("rm -rf %s" % temp_root)

    print("================ Start to Generate Calibration Files ================")
    gen_calib2kitti(source_root, target_root, dict_sequence2tvt, sensor_view)

    print("================ Start to Generate ImageSet Files ================")
    gen_ImageSet(target_root, split_info, sensor_view)


import os
import numpy as np
from rich.progress import track
from tools.dataset_converter.utils import read_json, get_lidar2camera, get_cam_calib_intrinsic


def convert_calib_dair2kitti(cam_intrinsic, r_velo2cam, t_velo2cam):
    P2 = cam_intrinsic.reshape(12, order="C")

    Tr_velo_to_cam = np.concatenate((r_velo2cam, t_velo2cam), axis=1)
    Tr_velo_to_cam = Tr_velo_to_cam.reshape(12, order="C")

    return P2, Tr_velo_to_cam


def gen_calib2kitti(source_root, target_root, dict_sequence2tvt, sensor_view):
    data_info = read_json(f'{source_root}/data_info.json')
    for i in track(data_info):
        target_calib_path = f'{target_root}/{dict_sequence2tvt[i["sequence_id"]]}/calib'
        if not os.path.exists(target_calib_path):
            os.makedirs(target_calib_path)
        target_calib_file_path = f'{target_calib_path}/{i["frame_id"]}.txt'
        calib_camera_intrinsic_path = f'{source_root}/{i["calib_camera_intrinsic_path"]}'
        cam_intrinsic = get_cam_calib_intrinsic(calib_camera_intrinsic_path)
        if (sensor_view == "vehicle") or (sensor_view == "cooperative"):
            calib_lidar_to_camera_path = f'{source_root}/{i["calib_lidar_to_camera_path"]}'
            r_velo2cam, t_velo2cam = get_lidar2camera(calib_lidar_to_camera_path)
        else:
            calib_lidar_to_camera_path = f'{source_root}/{i["calib_virtuallidar_to_camera_path"]}'
            r_velo2cam, t_velo2cam = get_lidar2camera(calib_lidar_to_camera_path)

        P2, Tr_velo_to_cam = convert_calib_dair2kitti(cam_intrinsic, r_velo2cam, t_velo2cam)

        str_P2 = "P2: "
        str_Tr_velo_to_cam = "Tr_velo_to_cam: "
        # str_Tr_imu_to_velo = "Tr_imu_to_velo: "
        for m in range(11):
            str_P2 = str_P2 + str(P2[m]) + " "
            str_Tr_velo_to_cam = str_Tr_velo_to_cam + str(Tr_velo_to_cam[m]) + " "
        str_P2 = str_P2 + str(P2[11])
        str_Tr_velo_to_cam = str_Tr_velo_to_cam + str(Tr_velo_to_cam[11])
        str_Tr_imu_to_velo = str_Tr_velo_to_cam

        str_P0 = str_P2
        str_P1 = str_P2
        str_P3 = str_P2
        str_R0_rect = "R0_rect: 1 0 0 0 1 0 0 0 1"

        with open(target_calib_file_path, "w") as save_file:
            gt_line = (
                    str_P0
                    + "\n"
                    + str_P1
                    + "\n"
                    + str_P2
                    + "\n"
                    + str_P3
                    + "\n"
                    + str_R0_rect
                    + "\n"
                    + str_Tr_velo_to_cam
                    + "\n"
                    + str_Tr_imu_to_velo
            )
            save_file.write(gt_line)


import os
from tools.dataset_converter.utils import write_txt


def gen_ImageSet(target_root, split_info, sensor_view="vehicle"):
    target_ImageSets_path = f'{target_root}/ImageSets'
    if not os.path.exists(target_ImageSets_path):
        os.makedirs(target_ImageSets_path)
    test_file = ""
    train_file = ""
    val_file = ""

    sensor_view = sensor_view + "_split"
    split_data = split_info[sensor_view]
    for i in range(len(split_data["train"])):
        name = split_data["train"][i]
        train_file = train_file + name + "\n"

    for i in range(len(split_data["val"])):
        name = split_data["val"][i]
        val_file = val_file + name + "\n"

    # The test part of the dataset has not been released
    # for i in range(len(split_data["test"])):
    #     name = split_data["test"][i]
    #     test_file = test_file + name + "\n"

    trainval_file = train_file + val_file

    write_txt(os.path.join(target_ImageSets_path, "test.txt"), test_file)
    write_txt(os.path.join(target_ImageSets_path, "trainval.txt"), trainval_file)
    write_txt(os.path.join(target_ImageSets_path, "train.txt"), train_file)
    write_txt(os.path.join(target_ImageSets_path, "val.txt"), val_file)



import os
from tools.dataset_converter.utils import read_json, get_lidar2camera, trans_point, get_lidar_3d_8points, get_camera_3d_alpha_rotation
from rich.progress import track


def label_dair2kiiti_by_frame(dair_label_file_path, kitti_label_file_path, rotation, translation, no_classmerge):
    save_file = open(kitti_label_file_path, 'w')
    list_labels = read_json(dair_label_file_path)
    for label in list_labels:
        if not no_classmerge:
            label["type"] = label["type"].replace("Truck", "Car")
            label["type"] = label["type"].replace("Van", "Car")
            label["type"] = label["type"].replace("Bus", "Car")
        label_3d_dimensions = [float(label["3d_dimensions"]["l"]), float(label["3d_dimensions"]["w"]),
                               float(label["3d_dimensions"]["h"])]
        lidar_3d_location = [float(label["3d_location"]["x"]), float(label["3d_location"]["y"]),
                             float(label["3d_location"]["z"])]
        rotation_z = float(label["rotation"])
        lidar_3d_8_points = get_lidar_3d_8points(label_3d_dimensions, lidar_3d_location, rotation_z)

        lidar_3d_bottom_location = [float(label["3d_location"]["x"]), float(label["3d_location"]["y"]),
                                    float(label["3d_location"]["z"]) - float(label["3d_dimensions"]["h"]) / 2]
        camera_3d_location = trans_point(lidar_3d_bottom_location, rotation, translation)
        camera_3d_8_points = []
        for lidar_point in lidar_3d_8_points:
            camera_point = trans_point(lidar_point, rotation, translation)
            camera_3d_8_points.append(camera_point)

        alpha, rotation_y = get_camera_3d_alpha_rotation(camera_3d_8_points, camera_3d_location)

        list_item = [str(label["type"]), str(label["truncated_state"]), str(label["occluded_state"]), str(alpha),
                     str(label["2d_box"]["xmin"]), str(label["2d_box"]["ymin"]), str(label["2d_box"]["xmax"]), str(label["2d_box"]["ymax"]),
                     str(label_3d_dimensions[2]), str(label_3d_dimensions[1]), str(label_3d_dimensions[0]), str(camera_3d_location[0]),
                     str(camera_3d_location[1]), str(camera_3d_location[2]), str(rotation_y)]
        str_item = ' '.join(list_item) + '\n'
        save_file.writelines(str_item)
    save_file.close()


def label_dair2kitti(source_root, temp_root, dict_sequence2tvt, frame_info, label_type, sensor_view, no_classmerge):
    if (sensor_view == "vehicle") or (sensor_view == "cooperative"):
        key_calib_l2c_path = "calib_lidar_to_camera_path"
    else:
        key_calib_l2c_path = "calib_virtuallidar_to_camera_path"
    for i in track(frame_info):
        calib_l2c_path = i[key_calib_l2c_path]
        calib_lidar_to_camera_path = f'{source_root}/{calib_l2c_path}'
        rotation, translation = get_lidar2camera(calib_lidar_to_camera_path)
        label_std_path = i["label_" + label_type + "_std_path"]
        source_label_path = f'{source_root}/{label_std_path}'
        temp_label_path = f'{temp_root}/{dict_sequence2tvt[i["sequence_id"]]}/label_2'
        if not os.path.exists(temp_label_path):
            os.makedirs(temp_label_path)
        temp_label_file_path = f'{temp_label_path}/{i["frame_id"]}.txt'
        label_dair2kiiti_by_frame(source_label_path, temp_label_file_path, rotation, translation, no_classmerge)


## Get Started with V2X-Seq-SPD

### Installation

a. Required extertal packages are listed as follows:

```
mmdetection3d==0.17.1, pypcd
```

Firstly follow the instructions [here](https://github.com/open-mmlab/mmdetection3d/blob/master/docs/en/getting_started.md) to install mmdetection3d. Make sure the version of mmdetection3d is exactly 0.17.1.

Note that pypcd pip installing is not compatible with Python3. Therefore, [a modified version](https://github.com/dimatura/pypcd) should be manually installed as followings.
```bash
git clone https://github.com/klintan/pypcd.git
cd pypcd
python setup.py install
```

b. Download AB3DMOT
```
git clone https://github.com/xinshuoweng/AB3DMOT.git

```
Install AB3DMOT refer to [AB3DMOT Installation](https://github.com/xinshuoweng/AB3DMOT/blob/master/docs/INSTALL.md)

Note: Please add the path of AB3DMOT and Xinshuo_PyToolbox to your PYTHONPATH, according to the AB3DMOT Installation.


c. Download DAIR-V2X
```
git clone https://github.com/AIR-THU/DAIR-V2X.git

```

### Data Preparation

#### a.Download data and organize as follows

Download SPD dataset [here](https://thudair.baai.ac.cn/coop-forecast) and organize as follows:

```

# For SPD Dataset located at ${SPD_DATASET_ROOT}
V2X-Seq-SPD/ 
    └──  infrastructure-side            # Infrastructure-side data
        ├── image		        
            ├── {id}.jpg
        ├── velodyne                    
            ├── {id}.pcd               
        ├── calib                     
            ├── camera_intrinsic        # Camera intrinsic parameter       
                ├── {id}.json         
            ├── virtuallidar_to_world   # Extrinsic parameter from virtual LiDAR coordinate system to world coordinate system
                ├── {id}.json          
            ├── virtuallidar_to_camera  # Extrinsic parameter from virtual LiDAR coordinate system to camera coordinate system
                ├── {id}.json          
        ├── label			
            ├── camera                  # Labeles in infrastructure virtual LiDAR coordinate system fitting objects in image with image camptured timestamp
                ├── {id}.json
            ├── virtuallidar            # Labeles in infrastructure virtual LiDAR coordinate system fitting objects in point cloud with point cloud captured timestamp
                ├── {id}.json
        └── data_info.json              # More detailed information for each infrastructure-side frame
    └── vehicle-side                    # Vehicle-side data
        ├── image		        
            ├── {id}.jpg
        ├── velodyne                 
            ├── {id}.pcd               
        ├── calib                     
            ├── camera_intrinsic        # Camera intrinsic parameter   
                ├── {id}.json
            ├── lidar_to_camera         # extrinsic parameter from LiDAR coordinate system to camera coordinate system 
                ├── {id}.json
            ├── lidar_to_novatel        # extrinsic parameter from LiDAR coordinate system to NovAtel coordinate system
                ├── {id}.json
            ├── novatel_to_world        # location in the world coordinate system
                ├── {id}.json
        ├── label			
            ├── camera                  # Labeles in vehicle LiDAR coordinate system fitting objects in image with image camptured timestamp
                ├── {id}.json
            ├── lidar                   # Labeles in vehicle LiDAR coordinate system fitting objects in point cloud with point cloud captured timestamp
                ├── {id}.json
        └── data_info.json              # More detailed information for each vehicle-side frame
    └── cooperative                     # Coopetative-view files
        ├── label                       # Vehicle-infrastructure cooperative (VIC) annotation files. Labeles in vehicle LiDAR coordinate system with the vehicle point cloud timestamp
            ├── {id}.json                
        └── data_info.json              # More detailed information for vehicle-infrastructure cooperative frame pair
    └── maps                            # HD Maps for each intersection

```

#### b.Create a symlink to the dataset root

```
cd DAIR-V2X
cd ./data/
ln -s ${SPD_DATASET_ROOT}/V2X-Seq-SPD
```
#### c.Convert V2X-Seq-SPD cooperative label to V2X-Seq-SPD-KITTI format (Option for tracking evaluation)
```
cd DAIR-V2X
python tools/dataset_converter/spd2kitti_tracking/coop_label_dair2kitti.py \
   --source-root ./data/V2X-Seq-SPD \
   --target-root ./data/V2X-Seq-SPD-KITTI/cooperative \
   --split-path ./data/split_datas/cooperative-split-data-spd.json \
   --no-classmerge

```
At the end of the process, the data and info files should be organized as follows:

```
DAIR-V2X/data/V2X-Seq-SPD-KITTI/     
    └──── cooperative              
       ├──── training
          ├──── {sequence_id}    
             ├──── label_02
                ├───── {sequence_id}.txt
       ├──── validation
       └──── testing   
```

### Evaluation Example

Here we provide an example to evaluate the late fusion results for VIC3D Tracking on the V2X-Seq-SPD dataset for Image.
We use ImvoxelNet to perceive 2D objects from the infrastructure and ego-vehicle sequential images. Next, we transmit the infrastructure objects to the ego vehicle and fuse them with the ego-vehicle objects based on Euclidean distance measurements. Then we use AB3DMOT to track the fused objects.

#### Detection Checkpoint Preparation
Download checkpoints of ImvoxelNet trained on SPD datasets with mmdetection3d from Google drive: [inf-model](https://drive.google.com/file/d/1XntybUfSXQMZgiZnT7INRYPLBuHXT-Lv/view?usp=sharing) & [veh-model](https://drive.google.com/file/d/1eZWsG3VzMuC8swYfVveM3Zg3fcGR6IvN/view?usp=sharing). 

Put the checkpoints under [this folder](../configs/vic3d-spd/late-fusion-image/imvoxelnet/). 
The file structure should be like:

```
DAIR-V2X/configs/vic3d-spd/late-fusion-image/imvoxelnet/
    ├──trainval_config_i.py
    ├──vic3d_latefusion_imvoxelnet_i.pth
    ├──trainval_config_v.py
    ├──vic3d_latefusion_imvoxelnet_v.pth
```

#### Evaluation

Run the following commands for evaluation:

```bash
cd DAIR-V2X
cd v2x
bash scripts/eval_camera_late_fusion_spd.sh 0 0 0 100 --no-comp
```

The parameters are:

- **CUDA_VISIBLE_DEVICES**: GPU IDs
- **DELAY_K**: the number of previous frames for `vic-async-spd` dataset. `vic-async-spd-0` is equivalent to `vic-sync-spd` dataset.
- **EXTEND_RANGE_START**: x_{min} of the interested area of vehicle-egocentric surroundings at Vehicle LiDAR 
- **EXTEND_RANGE_END**: x_{max} of the interested area of vehicle-egocentric surroundings at Vehicle LiDAR 
- **TIME_COMPENSATION**: for `late_fusion`, you can remove the time compensation module by an addtional argument **--no-comp**


If everything is prepared properly, the output results should be:

```
car 3d IoU threshold 0.50, Average Precision = 17.31
car bev IoU threshold 0.50, Average Precision = 22.53
AMOTA = 0.0622
AMOTP = 0.2524

```

#### Reproducing Benchmark Results
We release our benchmarks for detection and tracking tasks with different fusion strategies for Image. Refer to the [README](../configs/vic3d-spd/late-fusion-image/README.md) for implementation details.

We will soon release the benchmarks for detection and tracking tasks with all modalities, fusion types, and fusion methods for our V2X-Seq-SPD dataset. Please stay tuned!


### API usage

To simply load our V2X-Seq-SPD dataset, please refer to [this](./apis/dataloaders_spd.md).

To visualize LiDAR or camera frames in V2X-Seq-SPD, please refer to [this](./visualization_spd.md).


## Data converter tutorial
We provide the tools to process the DAIR-V2X dataset, such as convert the dataset into Kitti format.

### DAIR2Kitti

`tools/dataset_converter/dair2kitti.py` can convert the DAIR-V2X dataset into Kitti format.
    
       python tools/dataset_converter/dair2kitti.py [--source-root ${SOURCE_ROOT}] [--target-root ${TARGET_ROOT}] [--split-path ${SPLIT_PATH}] [--label-type ${LABEL_TYPE}] [--sensor-view ${SENSOR_VIEW}] [--no-classmerge ${NO_CLASSMERGE}] 
    
### Pointcloud Transformation

`tools/dataset_converter/point_cloud_i2v.py` can convert the point cloud from infrastructure LiDAR coordinate system to ego-vehicle LiDAR coordinate system.

### Label Convertion

`tools/dataset_converter/label_world2v.py` can convert the 3D labels which are represented with 8 points and located in world coordinate system into the 3D label which are represented with `[x, y, z, w, h, l, theta]` and located in ego-vehicle LiDAR coordinate system.

### Calibration Convertion

`tools/dataset_converter/calib_i2v.py` can get the calibration parameters from infrastructure LiDAR coordinate system to ego-vehicle LiDAR coordinate system. 

## Get Started with DAIR-V2X

### Installation

Required extertal packages are listed as follows:

```
mmdetection3d==0.17.1, pypcd
```

Firstly follow the instructions [here](https://github.com/open-mmlab/mmdetection3d/blob/master/docs/en/getting_started.md) to install mmdetection3d. Make sure the version of mmdetection3d is exactly 0.17.1.

Note that pypcd pip installing is not compatible with Python3. Therefore [a modified version](https://github.com/dimatura/pypcd) should be manually installed as followings.
```
git clone https://github.com/klintan/pypcd.git
cd pypcd
python setup.py install
```

### An Example of Evaluation

Here we provide an example to evaluate the TCLF on VIC-Async-2 dataset.

#### Data Preparation

##### Download data and organize as follows

Download DAIR-V2X-C dataset [here](https://thudair.baai.ac.cn/cooptest) and organize as follows:

```

# For DAIR-V2X-C Dataset located at ${DAIR-V2X-C_DATASET_ROOT}
├── cooperative-vehicle-infrastructure      # DAIR-V2X-C
    ├── infrastructure-side             # DAIR-V2X-C-I
        ├── image		    
            ├── {id}.jpg
        ├── velodyne                
            ├── {id}.pcd           
        ├── calib                 
            ├── camera_intrinsic            
                ├── {id}.json     
            ├── virtuallidar_to_world   
                ├── {id}.json      
            ├── virtuallidar_to_camera  
                ├── {id}.json      
        ├── label	
            ├── camera                  # Labeled data in Infrastructure Virtual LiDAR Coordinate System fitting objects in image based on image frame time
                ├── {id}.json
            ├── virtuallidar            # Labeled data in Infrastructure Virtual LiDAR Coordinate System fitting objects in point cloud based on point cloud frame time
                ├── {id}.json
        ├── data_info.json              # Relevant index information of Infrastructure data
    ├── vehicle-side                    # DAIR-V2X-C-V
        ├── image		    
            ├── {id}.jpg
        ├── velodyne             
            ├── {id}.pcd           
        ├── calib                 
            ├── camera_intrinsic   
                ├── {id}.json
            ├── lidar_to_camera   
                ├── {id}.json
            ├── lidar_to_novatel  
                ├── {id}.json
            ├── novatel_to_world   
                ├── {id}.json
        ├── label	
            ├── camera                  # Labeled data in Vehicle LiDAR Coordinate System fitting objects in image based on image frame time
                ├── {id}.json
            ├── lidar                   # Labeled data in Vehicle LiDAR Coordinate System fitting objects in point cloud based on point cloud frame time
                ├── {id}.json
        ├── data_info.json              # Relevant index information of the Vehicle data
    ├── cooperative                     # Coopetative Files
        ├── label_world                 # Vehicle-Infrastructure Cooperative (VIC) Annotation files
            ├── {id}.json           
        ├── data_info.json              # Relevant index information combined the Infrastructure data and the Vehicle data
```

##### Create a symlink to the dataset root
```
cd ${dair-v2x_root}/dair-v2x
mkdir ./data/DAIR-V2X
ln -s ${DAIR-V2X-C_DATASET_ROOT}/cooperative-vehicle-infrastructure ${dair-v2x_root}/dair-v2x/data/DAIR-V2X
```

#### Checkpoint Preparation
Download checkpoints trained with mmdetection3d from Google drive: [inf-model](https://drive.google.com/file/d/1BO5dbqmLjC3gTjvQTyfEjhIikFz2P_Om/view?usp=sharing) & [veh-model](https://drive.google.com/file/d/1tY1sqQGGSaRoA8KDeIQPjcUZ20I82wTK/view?usp=sharing). 
Put the checkpoints under [this folder](../configs/vic3d/late-fusion-pointcloud). 
The file structure should be like:

```
configs/vic3d/late-fusion-pointcloud/pointpillars
    ├──trainval_config_i.py
    ├──vic3d_latefusion_inf_pointpillars_596784ad6127866fcfb286301757c949.pth
    ├──trainval_config_v.py
    ├──vic3d_latefusion_veh_pointpillars_a70fa05506bf3075583454f58b28177f.pth
```

#### Evaluation
Run the following commands for evaluation:

```bash
cd ${dair_v2x_root}
cd v2x
bash scripts/eval_lidar_late_fusion_pointpillars.sh 0 late_fusion 2 0 100
```

Or:

```bash
rm -r ./cache
cd v2x

DATA="../data/DAIR-V2X/cooperative-vehicle-infrastructure"
OUTPUT="../cache/vic-late-lidar"
rm -r $OUTPUT
rm -r ../cache
mkdir -p $OUTPUT/result
mkdir -p $OUTPUT/inf/lidar
mkdir -p $OUTPUT/veh/lidar

python eval.py \
  --input $DATA \
  --output $OUTPUT \
  --model late_fusion \
  --dataset vic-async \
  --k 2 \
  --split val \
  --split-data-path ../data/split_datas/cooperative-split-data.json \
  --inf-config-path ../configs/vic3d/late-fusion-pointcloud/pointpillars/trainval_config_i.py \
  --inf-model-path ../configs/vic3d/late-fusion-pointcloud/pointpillars/vic3d_latefusion_inf_pointpillars_596784ad6127866fcfb286301757c949.pth \
  --veh-config-path ../configs/vic3d/late-fusion-pointcloud/pointpillars/trainval_config_v.py \
  --veh-model-path ../configs/vic3d/late-fusion-pointcloud/pointpillars/vic3d_latefusion_veh_pointpillars_a70fa05506bf3075583454f58b28177f.pth \
  --device 0 \
  --pred-class car \
  --sensortype lidar \
  --extended-range 0 -39.68 -3 100 39.68 1
```

The key arguments are:

- **input**: the directory where you download our dair-v2x dataset.
- **output**: the directory where your prediction files are placed.
- **model**: the type of your model. Choices are `veh_only`,`inf_only`,`late_fusion`,`early_fusion`. 
- **dataset**: the name of the dataset. Choices are `dair-v2x-v`, `dair-v2x-i`,`vic-sync` and `vic-async`. 
- **k**: the number of previous frames for `vic-async` dataset. `vic-async-0` is equivalent to `vic-sync` dataset.
- **split**: dataset split. Choices are `train`, `val`, `test`, `valtest`. 
- **pred_class**: the prediction class you want to evaluate on.
- **sensortype**: the modality of input data. Choices are `lidar`, `camera` and `multimodality`.
- **extended-range**: the interested area of vehicle-egocentric surroundings, which is described as $[x_{min}, y_{min},z_{min},x_{max},y_{max},z_{max}]$ at Vehicle LiDAR Coordinate.
- **--no-comp**: for `late_fusion`, you can remove the time compensation module by an addtional argument **--no-comp**


### Reproducing Benchmark Results

We release our checkpoints with different modalities and fusion strategies. Refer to the following table for implementation details and downloading the checkpoints.


|  Modality  |    Fusion    |    Model    |   Dataset   |                             Reproduce&Checkpoint                             |
| :----------: | :------------: | :------------: | :-----------: | :-----------------------------------------------------------------------------: |
|   Image   |   VehOnly   |  ImvoxelNet  |  VIC-Sync  |       [README](../configs/vic3d/late-fusion-image/imvoxelnet/README.md)       |
|            |   InfOnly   |  ImvoxelNet  |  VIC-Sync  |     [README](../configs/vic3d/late-fusion-image/imvoxelnet/README.md)     |
|            | Late-Fusion |  ImvoxelNet  |  VIC-Sync  |     [README](../configs/vic3d/late-fusion-image/imvoxelnet/README.md)     |
| Pointcloud |   VehOnly   | PointPillars |  VIC-Sync  | [README](../configs/vic3d/late-fusion-pointcloud/pointpillars/README.md) |
|            |   InfOnly   | PointPillars |  VIC-Sync  | [README](../configs/vic3d/late-fusion-pointcloud/pointpillars/README.md) |
|            | Late-Fusion | PointPillars |  VIC-Sync  | [README](../configs/vic3d/late-fusion-pointcloud/pointpillars/README.md) |
|            | Early-Fusion | PointPillars |  VIC-Sync  | [README](../configs/vic3d/early-fusion-pointcloud/pointpillars/README.md) |
|            | Late-Fusion | PointPillars | VIC-Async-1 | [README](../configs/vic3d/late-fusion-pointcloud/pointpillars/README.md) |
|            | Late-Fusion | PointPillars | VIC-Async-2 | [README](../configs/vic3d/late-fusion-pointcloud/pointpillars/README.md) |
|            | Early-Fusion | PointPillars | VIC-Async-1 | [README](../configs/vic3d/early-fusion-pointcloud/pointpillars/README.md) |
|            |     TCLF     | PointPillars | VIC-Async-1 | [README](../configs/vic3d/late-fusion-pointcloud/pointpillars/README.md) |
|            |     TCLF     | PointPillars | VIC-Async-2 | [README](../configs/vic3d/late-fusion-pointcloud/pointpillars/README.md) |

### API usage

To simply load our DAIR-V2X dataset, please refer to [this](./apis/dataloaders.md).

To visualize LiDAR or camera frames in DAIR-V2X, please refer to [this](./visualization.md).

To evaluate your own VIC3D object detection model with our framework, please refer to [this](./apis/customized_models.md).

To further learn and use our fusion modules, please refer to [this](./apis/fusion_modules.md).

## Visualization tutorial

### visualization for spd

In SPD, we utilize [SUSTechPOINTS](https://github.com/naurril/SUSTechPOINTS) as the visualization tool for point cloud 3D bounding boxes and tracking IDS. SUSTechPOINTS is a Portable 3D Point Cloud Interactive Annotation Platform System. We offer a tool for converting labels from dair-v2x to SUS. For more details, please refer to [gen_SUS_label](../tools/visualize/gen_SUS_label.py) 


### visualization for vic3d
We provide the tools to visualize the 3d label in images and point clouds, and visualize the prediction results.

#### visualize 3d label in image

##### example:

If you want to visualize the 3d label in images, you can run following commands.

```bash
cd ${dair_v2x_root}
python tools/visualize/vis_label_in_image.py --path ${data_root} --output-file ./vis_results
```

- **path** refers to the directory of the images that want be visualized. It can be ${DAIR-V2X-V_ROOT}, ${DAIR-V2X-I_ROOT}, ${DAIR-V2X-C-I_ROOT}, or ${DAIR-V2X-C-V_ROOT}.
- **save_path** refers to the path of the results of visualization.


#### visualize 3d label in point cloud 
If you want to visualize the 3d label in point cloud, you can run following commands.

```bash
cd ${dair_v2x_root}
python tools/visualize/vis_label_in_3d.py --task pcd_label --pcd-path ${pcd_path} --label-path ${label_json_path}
```
- **--task** refers to the type of task you choose to visualize, the optional values are '**fusion**', '**single**', '**pcd_label**'. 
Here we should set the  **--task** as '**pcd_label**'.
- **--pcd-path** refers to the the path of the pcd file that want be visualized.
- **--label-path** refers to the the label path of the pcd file that want be visualized.

#### visualize 3d label with prediction results

##### example:
After evaluating the TCLF on VIC-Aync-2 dataset with following commands
```bash
cd ${dair_v2x_root}
cd v2x
bash scripts/eval_lidar_late_fusion_pointpillars.sh 0 late_fusion 2 0 100
```
you will generate following cache files including the model prediction results.
The cache file structure should be like
```
└── cache
    ├───── tmps
    └───── vic-late-lidar
       ├───── inf
       ├───── veh
       └───── result
```


If you want to visualize the label and the VIC3D predictionn, you can run following commands.
```bash
cd ${dair_v2x_root}
python tools/visualize/vis_label_in_3d.py --task fusion --path v2x/cache/vic-late-lidar --id 0
```

- **--task** refers to the type of task you choose to visualize, the optional values are '**fusion**', '**single**', '**pcd_label**'.
- **--path** refers to the pickle file generated during inference.
- **--id** refers to the 'filename' you want to visualize.


the resulting .json file should contain the following information in dict:
* "boxes_3d":  3D coordinate values of 8 vertices of all prediction boxes in the current frame, based on Vehicle LiDAR Coordinate System;
* "labels_3d": The category of all prediction boxes in the current frame;
* "scores_3d": indicates the confidence of all prediction boxes in the current frame;
* "ab_cost":   indicates the current frame transmission cost;
The current frame transmission cost calculation method can refer to send() in https://github.com/AIR-THU/DAIR-V2X/blob/main/v2x/models/model_utils/channel.py.

An Result Example of 010823.json (there are two detection boxes):


{
‘boxes_3d’:

    [[[ 1.00691042e+01,  3.46455169e+00, -1.93001246e+00],
    [ 1.00691042e+01,  3.46455169e+00, -3.84817839e-01],
    [ 1.00456753e+01,  5.61096096e+00, -3.84817839e-01],
    [ 1.00456753e+01,  5.61096096e+00, -1.93001246e+00],
    [ 1.46534252e+01,  3.51459002e+00, -1.93001246e+00],
    [ 1.46534252e+01,  3.51459002e+00, -3.84817839e-01],
    [ 1.46299963e+01,  5.66099930e+00, -3.84817839e-01],
    [ 1.46299963e+01,  5.66099930e+00, -1.93001246e+00]],
	      
    [[ 2.98359299e+01,  4.95744991e+00, -1.65398097e+00],
    [ 2.98359299e+01,  4.95744991e+00, -1.67575479e-01],
    [ 2.98803558e+01,  6.82962942e+00, -1.67575479e-01],
    [ 2.98803558e+01,  6.82962942e+00, -1.65398097e+00],
    [ 3.40029182e+01,  4.85857058e+00, -1.65398097e+00],
    [ 3.40029182e+01,  4.85857058e+00, -1.67575479e-01],
    [ 3.40473442e+01,  6.73075008e+00, -1.67575479e-01],
    [ 3.40473442e+01,  6.73075008e+00, -1.65398097e+00]]],

‘labels_3d’: [2, 2],

‘scores_3d’: [0.9015367 , 0.87085658],

‘ab_cost’: 123456

}


## Fusion Modules
We provide useful tools like file io, fusion modules, computational geometry, etc, which may help model design and implementation.

### Transmission Channel
There exists transmission cost from infrastructure to vehicle, and the number of bits transferred is an important metric to evalute the fusion model. Therefore, we provide `channel = Channel()`, a dictionary-format data structure to simulate the transmission process. When implementing your fusion model, modules that take `inf_frame` as input should **NOT** directly transmit any intermediate value. Instead, it must call `channel.send(key, value)` to transmit data. Since the channel is a shared object between different modules, the fusion model can acquire these values via `channel.receive(key)`. When the prediction is finished, `channel.flush()`should be called to clear the table. The module will automatically compute the actual bits of the value, and you can easily compute average transmission cost by `channel.average_bits()`. 
An example is shown below:

```
from fusion_modules import Channel

class InfModule(nn.Module):
    def __init__(self, channel):
        self.channel = channel
        self.layer1 = ...
        self.layer2 = ...
    
    def forward(self, inf_frame):
        # This function should NOT be called during VIC3D training or evaluation
        h = self.layer1(inf_frame)
        h = self.layer2(h)
        return h
        
    def trans_feats(self, inf_frame):
        h = self.layer1(inf_frame)
        self.pipe.send("feat1", h)
        h = self.layer2(h)
        self.pipe.send("feat2", h)
        
class FusionModel(nn.Module):
    def __init__(self, channel):
        self.channel = channel
        self.inf_module = InfModule(channel)
        self.veh_module = ...
        self.prediction_head = ...
    
    def forward(self, inf_frame, veh_frame, delta_t, filt, *args):
        h = self.veh_module(veh_frame)
        # Calling self.inf_module(inf_frame) is invalid!
        self.inf_module.trans_feats(inf_frame)
        feat1 = self.pipe.receive("feat1")
        feat2 = self.pipe.receive("feat2")
        h = torch.cat((h, feat1, feat2), 0)
        return self.prediction_head(h)
        
dataset = VICSyncDataset(split="val")
channel = Channel()
model = FusionModel(channel)
for inf_frame, veh_frame, label, delta_t, filt in dataset:
    model(inf_frame, veh_frame, delta_t, filt)
    channel.flush()
print(channel.average_bits())
```
### Matcher
We provide matching algorithms for late fusion. Currently we only provide matchers based on the distance between the center of two boxes, which is as follows:
```
class Boxes(object):
    def __init__(self, boxes, dir, label, score, class_score=None):
        ...

class EuclidianMatcher(Matcher):
    def __init__(self, filter_func=None, delta_x=0.0, delta_y=0.0, delta_z=0.0):
        ...
    
    def match(self, frame1, frame2):
        ...
```
- **Boxes** is a data structure containing a list of boxes. 
- **filter_func** is a function that decides if the two boxes are identical or not. For example, the function returns True when two boxes are from the same class and the distance bewteen their center is not larger than its width and length.
- **delta_x, delta_y, delta_z** is offset parameters. Positions in `frame1`  will automatically add [delta_x, delta_y, delta_z] before linear assignment.
- **match(frame1, frame2)** takes two frames (`Boxes` object) as input, and returns two arrays, representing matched boxes which are considered identical.

You may also implement your own matcher (such as the matcher in DeepSORT using Mahalanobis Distance and cosine similarity of features).

### Fuser

Currently we only implement a basic fuser for late fusion.

```
class BasicFuser(object):
    def __init__(self, perspective, trust_type, retain_type):
        # perspective:
        # infrastructure / vehicle
        # trust type: 
        # lc (Linear Combination) / max
        # retain type:
        # all / main / none
        
    def fuse(self, frame_i, frame_v, ind_i, ind_v):
        ...
```

The fuser takes two frames (`Boxes` object) as well as matched indexes (often calculated by `Matcher`), and returns a dictionary in the same format as ground truth labels. 

- If trust_type is lc, the final positions and confidence of the boxes are computed by linear combination. If trust_type is max, the box with higher confidence will be considered as fusion result.
- if retain_type is all, both unmatched vehicle and infrastructure boxes will be accounted into fusion results. If retain_type is main, only unmatched boxes from major perspective (defined in perspective) will be added. If retain_type is none, no unmatched box will be retained.

We plan to implement EarlyFuser, which concatenates raw information from infrastructure and vehicle, to facilitate early fusion.

### Compensator

We introduce two compensators, defined as below:

```
class SpaceCompensator(Compensator):
    def __init__(self, minx=-1.0, maxx=1.0, miny=-1.0, maxy=1.0, iters=2, steps=5):
        ...
        
    def coordinate(self, frame1, frame2):
        ...

class TimeCompensator(Compensator):
    def __init__(self, matcher):
        ...
       
    def coordinate(self, frame1, frame2, delta1, delta2):
        # frame1 is the previous frame, frame2 is the current frame
        # delta1 is time difference between frame1 and frame2
        # delta2 is time difference between frame2 and the frame we hope to predict
        ...
```

#### Space Compensator

This compensator aims to compensate for systematic error caused by physical sensors and coordinate transformation. Specifically, it evenly samples step * step points within [minx, miny, maxx, maxy], and conduct linear sum assignment. Similarly, the cost is the Eucilidian distance of box centers. The best offset value is selected based on the total cost. Then, the sample range is shrinked by a certain number, and the same process is conducted several iterations to approximate the ideal offset value.

#### Time Compensator

This compensator conducts motion compensation between temporal asynchronous frames. It leverages the previous frame to compute the speed of matched vehicles. For unmatched ones, linear regression is applied to estimate their speed. Then, it uses linear interpolation to approximate the position of vehicles delta2 milliseconds later. 

### Transformation
We provide tools to faciliate coordinate transformations (mainly rotation and translation). Here are two examples.
```
def box_translation(boxes, translation, rotation, format="mat"):
    ...
    
def points_translation(points, translation, rotation, format="mat"):
    ....
```

There are two supported formats for translation and rotation:

- mat: translation is a $3\times 1$ numpy array, and rotation is a $3\times 3$ numpy array.
- arr: translation is a array [tx, ty, tz], and rotation is a array [rw, rx, ry, rz], which is the parameters of the rotation axis.




## Implement and Evaluate Your Own Model

To implement your model, you should inherit `BaseModel` defined in `models/base_model.py`. Here's an example:

```
class MyModel(BaseModel):
    @staticmethod
    def add_arguments(parser):
        # add model-specific arguments here
        ...
    
    def __init__(self, *args):
        # initialize your model here
        ...
        
    def forward(self, vic_frame, filt, *args):
        # implement the forwarding function here
        ...
```
Then, you should name your model and add it to `SUPPORTED_MODELS` in `models/__init__.py`. In this way, you can simply run your model by specifying `--model` argument in `eval.py`. 

You can also implement your own training and evaluating framework. However, we recommend using our `Evaluator()` in `v2x_utils/eval_utils.py` and `Channel()` in `models/model_utils/channel.py` to measure the average precision and 
average transmission cost of your model in vehicle-infrastructure cooperative detection.

- **Evaluator**: Construct a evaluator by `evaluator=Evaluator(pred_cls)`, where pred\_cls is a list of the prediction classes you want to evaluate on.Then, make sure the format of model prediction is the same as ground truth labels ,which is {"boxes_3d": ..., "labels_3d": ..., "scores_3d": ...}. Then, call `evaluator.add_frame(pred, label)`to add the results of a single frame. When finished with all the frames, simply call `evaluator.print_ap("3d"/"bev")` to get the average percision results under 3d/bev view.
- **Channel**: Construct a channel in your model by `self.channel=Channel()`. Then, every time you want to transfer information from infrastructure to vehicle in your model, call `self.channel.send(key, value)` and `value=self.channel.receive(key)`.  Remember to use `self.channel.flush()` to clear all cached data in the channel after processing a single frame (otherwise the AB results will be incorrect). Use `self.channel.average_bytes()` to get the average transmission cost.


## DAIR-V2X Dataset

We provide four dataset classes, namely `VIC-Sync`, `VIC-Async`, `DAIR-V2X-V` and `DAIR-V2X-I`. The datasets for segmentation task and tracking task will be provided in future work. All the datasets are the subclass of `torch.utils.data`. You can construct them with the following code:
```
dataset = SUPPROTED_DATASETS[dataset](path, split, sensortype, extended_range)
```
- **dataset** refers to the dataset type including `VIC-Sync`, `VIC-Async`, `DAIR-v2x-v` and `DAIR-v2x-i`.

- **path** refers to the directory where DAIR-V2X dataset is stored.

- **split** refers to the dataset split. Available choices are `train`, `val`, `test` and `valtest`.

- **sensortype** refers to the different sensor. `lidar` and `camera` are supported now. 

- **extended_range** is a bounding box denoted as [minx, miny, minz, maxx, maxy, maxz], which represents the intrested area (which is often an extension of the vehicle's range of point cloud) under the vehicle LiDAR coordinate system. Vehicles outside the specific box will be filtered out. 

### Format
We take `VIC-Sync` as an example. Each element of the `VIC-Sync` is a tuple. You can enumerate all data frames in the following way:
```
for VICFrame, label, filt in dataset:
	# Your code here
```
#### VICFrame
You can access to the infrastructure frame class or vehicle frame class by:
```
VICFrame.inf_frame    # The infrastructure frame, member of InfFrame
VICFrame.veh_frame    # The vehicle frame, member of VehFrame
```
We provide `Transform` class carrying out the coordinate transformation you need:
```
trans=VICFrame.transform("from_coord","to_coord")
point_new=trans(point)
```
The following coordinate transformation are supported:
```
Infrastructure_image ->'Infrastructure_camera'->'Infrastructure_lidar'->'world'
                                                                           ^
                                                                           |
                'Vehicle_image'->'Vehicle_camera'->'Vehicle_lidar'->'Vehicle_novatel'

```
You can access the VICFrame values by their keys:
| Key                             | Value                             |
| -------------------------------- | -------------------------------- |
| `infrastructure_image_path`      | path to the infrastructure side image    |
| `infrastructure_pointcloud_path`   | path to the infrastructure side point cloud  |
| `vehicle_image_path`                | path to the vehicle side image |
| `vehicle_pointcloud_path` | path to the vehicle side point cloud    |
| `cooperative_label_path`     | path to the cooperative label |
|`system_error_offset`| the time difference (ms) between the infrastructure frame and vehicle frame |

#### InfFrame

`InfFrame` refers to the infrastructure frame class. We provide APIs which loads the point cloud (`inf_frame.point_cloud(data_format="array"/"file"/"tensor")`) or image (`inf_frame.image(data_format="array"/"file"/"tensor")`) of this frame.

You can also access the frame values by their keys which are listed below:

| Key                             | Value                             |
| -------------------------------- | -------------------------------- |
| `image_path`                       | path to the image            |
| `image_timestamp`                  | the timestamp of the image      |
| `label_camera_path`                | path to the annotation of image |
| `ip`                               | ip of the camera               |
| `camera_id`                        | id of the camera       |
| `pointcloud_path`                  | path to point cloud      |
| `pointcloud_timestamp`             | the timestamp of the point cloud |
| `label_lidar_path`                 | path to the annotation of point cloud |
| `lidar_id`                         | id of the LiDAR   |
| `intersection_loc`                 | name of the intersection       |
| `batch_start_id`                   | start id of the continuous frames |
| `batch_end_id`                     | end id of the continuous frames |
| `calib_virtuallidar_to_world_path`        | path of the calibration file from virtuallidar coordinate system to world coordinate system  |
| `calib_virtuallidar_to_cam_path`          | path of the calibration file from virtuallidar coordinate system to camera coordinate system  |
| `calib_camera_intrisinc_path`      | path of the camera intrinsics file                    |


#### VehFrame

`VehFrame` refers to the vehicle frame class. We provide APIs which loads the point cloud (`inf_frame.point_cloud(data_format="array"/"file"/"tensor")`) or image (`inf_frame.image(data_format="array"/"file"/"tensor")`) of this frame. 
You can also access the frame values by their keys listed below:

| Key                             | Value                             |
| -------------------------------- | -------------------------------- |
| `image_path`                       | path to the image |
| `image_timestamp`                  | the timestamp of the image |
| `label_camera_path`                | path to the annotation of image |
| `pointcloud_path`                  | path to point cloud |
| `pointcloud_timestamp`             | the timestamp of the point cloud  |
| `label_lidar_path`                 | path to the annotation of point cloud |
| `intersection_loc`                 | name of the intersection  |
| `batch_start_id`                   | start id of the continuous frames |
| `batch_end_id`                     | end id of the continuous frames |
| `calib_lidar_to_camera_path`  | path of the calibration file from lidar coordinate system to camera coordinate system |
| `calib_lidar_to_novatel_path` | path of the calibration file from lidar coordinate system to NovAtel coordinate system |
| `calib_novatel_to_world_path` | path of the calibration file from NovAtel coordinate system to world coordinate system |
| `calib_camera_intrisinc_path`      | path of the camera intrinsics file  |

#### Label

`label` refers to the vehicle-infrastructure collaborative annotations, the format of which is as followings.

| Key         | Value                                                        |
| ----------- | ------------------------------------------------------------ |
| `boxes_3d`  | Numpy Float64 Array, [N, 8, 3], representing the 3D bounding box |
| `labels_3d` | Numpy String Array, [N], representing the class of each vehicle (including `car`, `van`,`truck`,`bus`) |
| `scores_3d` | Numpy Float64 Array, which is all 1 in label                 |


#### Filt

`filt` is a filter which decides if the prediction box should be retained since that we are only intrested in boxes within `extended_range`.

### Other functions

#### VIC-Async.prev_inf_frame

Given the pointcloud id of the current vehicle frame, this function queries the previous infrastructure frame captured by the same sensors. If such frame does not exsit, the returned value will be `None`. Here is an example of calling the function:

```
pointcloud_id = inf_frame.id["lidar"]
prev_frame = dataset.prev_inf_frame(pointcloud_id)
prev_pointcloud_id = prev_frame.id["lidar"]
prev_prev_frame = dataset.prev_inf_frame(prev_pointcloud_id)
```



## SPD Dataset

We provide four spd dataset classes, namely `VICSyncDatasetSPD`, `VICAsyncDatasetSPD`, `DAIRV2XVSPD` and `DAIRV2XISPD`.
All the datasets are the subclass of `torch.utils.data.dataset.Dataset`.
You can construct them with the following code:
```
dataset = SUPPROTED_DATASETS[dataset](path, split, sensortype, extended_range)
```
- **dataset** refers to the dataset type including `vic-sync-spd`, `vic-async-spd`, `dair-v2x-v-spd` and `dair-v2x-i-spd`.

- **path** refers to the directory where SPD dataset is stored.

- **split** refers to the dataset split. Available choices are `train`, `val`, `test` and `valtest`.

- **sensortype** refers to the different sensor. `lidar` and `camera` are supported now. 

- **extended_range** is a bounding box denoted as [minx, miny, minz, maxx, maxy, maxz], which represents the intrested area (which is often an extension of the vehicle's range of point cloud) under the vehicle LiDAR coordinate system. Vehicles outside the specific box will be filtered out. 

### Format
We take `vic-sync-spd` as an example. Each element of the `vic-sync-spd` is a tuple. You can enumerate all data frames in the following way:
```
for VICFrameSPD, label, filt in dataset:
	# Your code here
```
#### VICFrameSPD
You can access to the infrastructure frame class or vehicle frame class by:
```
VICFrameSPD.inf_frame    # The infrastructure frame, member of InfFrameSPD
VICFrameSPD.veh_frame    # The vehicle frame, member of VehFrameSPD
```
We provide `Transform` class carrying out the coordinate transformation you need:
```
trans=VICFrameSPD.transform("from_coord","to_coord")
point_new=trans(point)
```
The following coordinate transformation are supported:
```
Infrastructure_image ->'Infrastructure_camera'->'Infrastructure_lidar'->'world'
                                                                           ^
                                                                           |
                'Vehicle_image'->'Vehicle_camera'->'Vehicle_lidar'->'Vehicle_novatel'

```
note: In SPD, when converting from the Infrastructure_lidar to Vehicle_lidar, the usage of delta_x and delta_y in the system_error_offset is different from that in VIC3D.

You can access the VICFrameSPD values by their keys:

| Key                       | Value                                                                       |
|---------------------------|-----------------------------------------------------------------------------|
| `infrastructure_frame`    | infrastructure frame datainfo                                               |
| `vehicle_frame`           | vehicle frame datainfo                                                      |

#### InfFrameSPD

`InfFrameSPD` refers to the infrastructure frame class. We provide APIs which loads the point cloud (`inf_frame.point_cloud(data_format="array"/"file"/"tensor")`) or image (`inf_frame.image(data_format="array"/"file"/"tensor")`) of this frame.

You can also access the frame values by their keys which are listed below:

| Key                                 | Value                                                                                        |
|-------------------------------------|----------------------------------------------------------------------------------------------|
| `image_path`                        | path to the image                                                                            |
| `image_timestamp`                   | the timestamp of the image                                                                   |
| `pointcloud_path`                   | path to point cloud                                                                          |
| `pointcloud_timestamp`              | the timestamp of the point cloud                                                             |
| `label_lidar_std_path`              | path to the annotation of point cloud                                                        |
| `label_camera_std_path`             | path to the annotation of image                                                              |
| `calib_virtuallidar_to_world_path`  | path of the calibration file from virtuallidar coordinate system to world coordinate system  |
| `calib_virtuallidar_to_camera_path` | path of the calibration file from virtuallidar coordinate system to camera coordinate system |
| `calib_camera_intrisinc_path`       | path of the camera intrinsics file                                                           |
| `frame_id`                          | id of the current frame                                                                      |
| `sequence_id`                       | id of the current sequence                                                                   |
| `num_frames`                        | number of the continuous frames                                                              |
| `start_frame_id`                    | start id of the continuous frames                                                            |
| `end_frame_id`                      | end id of the continuous frames                                                              |
| `intersection_loc`                  | name of the intersection                                                                     |
| `camera_ip`                         | ip of the camera                                                                             |
| `camera_id`                         | id of the camera                                                                             |
| `lidar_id`                          | id of the LiDAR                                                                              |


#### VehFrameSPD

`VehFrameSPD` refers to the vehicle frame class. We provide APIs which loads the point cloud (`veh_frame.point_cloud(data_format="array"/"file"/"tensor")`) or image (`veh_frame.image(data_format="array"/"file"/"tensor")`) of this frame. 
You can also access the frame values by their keys listed below:

| Key                           | Value                                                                                  |
|-------------------------------|----------------------------------------------------------------------------------------|
| `image_path`                  | path to the image                                                                      |
| `image_timestamp`             | the timestamp of the image                                                             |
| `pointcloud_path`             | path to point cloud                                                                    |
| `pointcloud_timestamp`        | the timestamp of the point cloud                                                       |
| `label_lidar_std_path`        | path to the annotation of point cloud                                                  |
| `label_camera_std_path`       | path to the annotation of image                                                        |
| `calib_lidar_to_camera_path`  | path of the calibration file from lidar coordinate system to camera coordinate system  |
| `calib_lidar_to_novatel_path` | path of the calibration file from lidar coordinate system to NovAtel coordinate system |
| `calib_novatel_to_world_path` | path of the calibration file from NovAtel coordinate system to world coordinate system |
| `calib_camera_intrisinc_path` | path of the camera intrinsics file                                                     |
| `frame_id`                    | id of the current frame                                                                |
| `sequence_id`                 | id of the current sequence                                                             |
| `num_frames`                  | number of the continuous frames                                                        |
| `start_frame_id`              | start id of the continuous frames                                                      |
| `end_frame_id`                | end id of the continuous frames                                                        |
| `intersection_loc`            | name of the intersection                                                               |

#### Label

`label` refers to the vehicle-infrastructure collaborative annotations, based on Vehicle LiDAR coordinate system. The format of which is as followings.

| Key         | Value                                                                                                  |
|-------------|--------------------------------------------------------------------------------------------------------|
| `boxes_3d`  | Numpy Float64 Array, [N, 8, 3], representing the 3D bounding box                                       |
| `labels_3d` | Numpy String Array, [N], representing the class of each vehicle (including `car`, `van`,`truck`,`bus`) |
| `scores_3d` | Numpy Float64 Array, which is all 1 in label                                                           |


#### Filt

`filt` is a filter which decides if the prediction box should be retained since that we are only intrested in boxes within `extended_range`.




import argparse
import os
from v2x_utils.gen_eval_tracking_data import convert_gt_label, convert_track_label
from AB3DMOT_plugin.scripts.KITTI.evaluate import evaluate
from AB3DMOT_plugin.scripts.KITTI.mailpy import Mail


def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--track-eval-gt-path", type=str, help="Path to ground truth for V2X-Seq-SPD track evaluation in KITTI format"
    )
    parser.add_argument(
        "--track-results-path", type=str, help="Path to tracking results"
    )
    parser.add_argument(
        "--track-eval-output-path", type=str, help="Path to tracking evaluation results"
    )
    parser.add_argument(
        "--ab3dmot-path", type=str, default="AB3DMOT_plugin", help="Path to AB3DMOT"
    )
    parser.add_argument(
        "--fusion-method",
        type=str,
        choices=["early_fusion", "middle_fusion", "late_fusion", "ffnet", "veh_only", "inf_only"],
        help="Model type",
    )
    parser.add_argument('--split', type=str, default='val', help='train, val, test')
    parser.add_argument('--det-name', type=str, default='imvoxelnet', help='imvoxelnet')
    parser.add_argument('--cat', type=str, default='Car', help='category of running tracking')
    parser.add_argument(
        "--tvt",
        nargs="+",
        type=str,
        default=["validation"],
        choices=["training", "validation", "testing"],
        help="Train, validation, or test",
    )
    return parser.parse_args()


def main(args):
    extended_range = [0, -39.68, -3, 100, 39.68, 1]
    file_type = f'{args.det_name}_{args.cat}_{args.split}_H1'
    for tvt in args.tvt:
        print("Track evaluation")
        # 生成eval格式ground truth label及val_dic_new_frame2id_frame.json
        kitti_track_tvt_path = os.path.join(args.track_eval_gt_path, "cooperative", tvt)
        print("generate eval gt label")
        dict_seq_frame2id = convert_gt_label(kitti_track_tvt_path, args.ab3dmot_path, extended_range)

        # 生成eval格式track label
        print("Convert track result")
        track_results_path = f'{args.track_results_path}/{file_type}/data_0'
        ab3dmot_results_dir = f'{args.ab3dmot_path}/results/KITTI/{file_type}/data_0'
        convert_track_label(track_results_path, ab3dmot_results_dir, dict_seq_frame2id, extended_range)

        # get unique sha key of submitted results
        num_hypo = "1"
        dimension = "3D"
        thres = 0.25
        mail = Mail("")
        #

        if dimension == '2D':
            eval_3diou, eval_2diou = False, True  # eval 2d
        elif dimension == '3D':
            eval_3diou, eval_2diou = True, False  # eval 3d
        else:
            eval_3diou, eval_2diou = True, False  # eval 3d

        # evaluate results
        success = evaluate(file_type, mail, num_hypo, eval_3diou, eval_2diou, thres)

        os.system(f'mv {args.ab3dmot_path}/results/KITTI/{file_type} {args.track_eval_output_path}')


if __name__ == "__main__":
    args = parse_arguments()
    main(args)


name2id = {
    "car": 2,
    "van": 2,
    "truck": 2,
    "bus": 2,
    "cyclist": 1,
    "tricyclist": 3,
    "motorcyclist": 3,
    "barrow": 3,
    "barrowlist": 3,
    "pedestrian": 0,
    "trafficcone": 3,
    "pedestrianignore": 3,
    "carignore": 3,
    "otherignore": 3,
    "unknowns_unmovable": 3,
    "unknowns_movable": 3,
    "unknown_unmovable": 3,
    "unknown_movable": 3,
}

superclass = {
    -1: "ignore",
    0: "pedestrian",
    1: "cyclist",
    2: "car",
    3: "ignore",
}


def add_arguments(parser):
    parser.add_argument("--input", type=str, default="")
    parser.add_argument("--output", type=str, default="")
    parser.add_argument("--split", type=str, default="val")
    parser.add_argument(
        "--split-data-path", type=str, default="../data/split_datas/example-cooperative-split-data.json"
    )
    parser.add_argument("--dataset", type=str, default="vic-sync")
    parser.add_argument("--k", type=int, default=0)
    parser.add_argument("--pred-classes", nargs="+", default=["car"])
    parser.add_argument("--model", type=str, default="single_veh")
    parser.add_argument("--device", type=int, default=0)
    parser.add_argument("--debug", action="store_true")
    parser.add_argument("--quiet", action="store_true")
    parser.add_argument("--save-point-cloud", action="store_true")
    parser.add_argument("--save-image", action="store_true")
    parser.add_argument("--extended-range", type=float, nargs="+", default=[-10, -49.68, -3, 79.12, 49.68, 1])
    parser.add_argument("--sensortype", type=str, default="lidar")
    parser.add_argument("--eval-single", action="store_true")
    parser.add_argument("--val-data-path", type=str, default="", help="Help evaluate feature flow net")
    parser.add_argument("--test-mode",  type=str, default="FlowPred", help="Feature Flow Net mode: {'FlowPred', 'OriginFeat', 'Async'}")





import sys
import os
import os.path as osp

sys.path.append("..")
sys.path.extend([os.path.join(root, name) for root, dirs, _ in os.walk("../") for name in dirs])

import argparse
import logging

logger = logging.getLogger(__name__)

from tqdm import tqdm
import numpy as np

from v2x_utils import range2box, id_to_str, Evaluator
from config import add_arguments
from dataset import SUPPROTED_DATASETS
from dataset.dataset_utils import save_pkl
from models import SUPPROTED_MODELS
from models.model_utils import Channel


def eval_vic(args, dataset, model, evaluator):
    idx = -1
    for VICFrame, label, filt in tqdm(dataset):
        idx += 1
        # if idx % 10 != 0:
        #     continue
        if 'spd' in args.dataset:
            veh_id = VICFrame.vehicle_frame().get("frame_id")
        else:
            try:
                veh_id = dataset.data[idx][0]["vehicle_pointcloud_path"].split("/")[-1].replace(".pcd", "")
            except Exception:
                veh_id = VICFrame["vehicle_pointcloud_path"].split("/")[-1].replace(".pcd", "")

        pred = model(
            VICFrame,
            filt,
            None if not hasattr(dataset, "prev_inf_frame") else dataset.prev_inf_frame,
        )

        evaluator.add_frame(pred, label)
        pipe.flush()
        pred["label"] = label["boxes_3d"]
        pred["veh_id"] = veh_id
        save_pkl(pred, osp.join(args.output, "result", pred["veh_id"] + ".pkl"))

    evaluator.print_ap("3d")
    evaluator.print_ap("bev")
    print("Average Communication Cost = %.2lf Bytes" % (pipe.average_bytes()))


def eval_single(args, dataset, model, evaluator):
    for frame, label, filt in tqdm(dataset):
        pred = model(frame, filt)
        if args.sensortype == "camera":
            evaluator.add_frame(pred, label["camera"])
        elif args.sensortype == "lidar":
            evaluator.add_frame(pred, label["lidar"])
        save_pkl({"boxes_3d": label["lidar"]["boxes_3d"]}, osp.join(args.output, "result", frame.id["camera"] + ".pkl"))

    evaluator.print_ap("3d")
    evaluator.print_ap("bev")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(conflict_handler="resolve")
    add_arguments(parser)
    args, _ = parser.parse_known_args()
    # add model-specific arguments
    SUPPROTED_MODELS[args.model].add_arguments(parser)
    args = parser.parse_args()

    if args.quiet:
        level = logging.ERROR
    elif args.debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logging.basicConfig(
        format="%(asctime)s - %(levelname)s - %(name)s -   %(message)s",
        datefmt="%m/%d/%Y %H:%M:%S",
        level=level,
    )

    extended_range = range2box(np.array(args.extended_range))
    logger.info("loading dataset")

    dataset = SUPPROTED_DATASETS[args.dataset](
        args.input,
        args,
        split=args.split,
        sensortype=args.sensortype,
        extended_range=extended_range,
        val_data_path=args.val_data_path
    )

    logger.info("loading evaluator")
    evaluator = Evaluator(args.pred_classes)

    logger.info("loading model")
    if args.eval_single:
        model = SUPPROTED_MODELS[args.model](args)
        eval_single(args, dataset, model, evaluator)
    else:
        pipe = Channel()
        model = SUPPROTED_MODELS[args.model](args, pipe)
        ### Patch for FFNet evaluation ###
        if args.model =='feature_flow':
            model.model.data_root = args.input
            model.model.test_mode = args.test_mode
        #############################
        eval_vic(args, dataset, model, evaluator)


import numpy as np
from scipy.spatial import ConvexHull


def polygon_clip(subjectPolygon, clipPolygon):
    """Clip a polygon with another polygon.

     Ref: https://rosettacode.org/wiki/Sutherland-Hodgman_polygon_clipping#Python

     Args:
       subjectPolygon: a list of (x,y) 2d points, any polygon.
       clipPolygon: a list of (x,y) 2d points, has to be *convex*
    Note:
      **points have to be counter-clockwise ordered**

    Return:
      a list of (x,y) vertex point for the intersection polygon.
    """

    def inside(p):
        return (cp2[0] - cp1[0]) * (p[1] - cp1[1]) > (cp2[1] - cp1[1]) * (p[0] - cp1[0])

    def computeIntersection():
        dc = [cp1[0] - cp2[0], cp1[1] - cp2[1]]
        dp = [s[0] - e[0], s[1] - e[1]]
        n1 = cp1[0] * cp2[1] - cp1[1] * cp2[0]
        n2 = s[0] * e[1] - s[1] * e[0]
        n3 = 1.0 / (dc[0] * dp[1] - dc[1] * dp[0])
        return [(n1 * dp[0] - n2 * dc[0]) * n3, (n1 * dp[1] - n2 * dc[1]) * n3]

    outputList = subjectPolygon
    cp1 = clipPolygon[-1]

    for clipVertex in clipPolygon:
        cp2 = clipVertex
        inputList = outputList
        outputList = []
        s = inputList[-1]

        for subjectVertex in inputList:
            e = subjectVertex
            if inside(e):
                if not inside(s):
                    outputList.append(computeIntersection())
                outputList.append(e)
            elif inside(s):
                outputList.append(computeIntersection())
            s = e
        cp1 = cp2
        if len(outputList) == 0:
            return None
    return outputList


def poly_area(x, y):
    """Ref: http://stackoverflow.com/questions/24467972/calculate-area-of-polygon-given-x-y-coordinates"""
    return 0.5 * np.abs(np.dot(x, np.roll(y, 1)) - np.dot(y, np.roll(x, 1)))


def convex_hull_intersection(p1, p2):
    """Compute area of two convex hull's intersection area.
    p1,p2 are a list of (x,y) tuples of hull vertices.
    return a list of (x,y) for the intersection and its volume
    """
    inter_p = polygon_clip(p1, p2)
    if inter_p is not None:
        hull_inter = ConvexHull(inter_p)
        return inter_p, hull_inter.volume
    else:
        return None, 0.0


def box3d_vol(corners, debug=False):
    """corners: (8,3) no assumption on axis direction"""
    a = np.sqrt(np.sum((corners[0, :] - corners[1, :]) ** 2))
    b = np.sqrt(np.sum((corners[1, :] - corners[2, :]) ** 2))
    c = np.sqrt(np.sum((corners[0, :] - corners[4, :]) ** 2))
    return a * b * c


def is_clockwise(p):
    x = p[:, 0]
    y = p[:, 1]
    return np.dot(x, np.roll(y, 1)) - np.dot(y, np.roll(x, 1)) > 0


def box3d_iou(corners1, corners2, debug=False):
    """Compute 3D bounding box IoU.

    Input:
        corners1:         numpy array (8,3)
        corners2:         numpy array (8,3)

    Output:
        iou:    3D bounding box IoU
        iou_2d: bird's eye view 2D bounding box IoU
    """
    # corner points are in counter clockwise order
    rect1 = [(corners1[i, 0], corners1[i, 1]) for i in range(4)]
    rect2 = [(corners2[i, 0], corners2[i, 1]) for i in range(4)]

    area1 = poly_area(np.array(rect1)[:, 0], np.array(rect1)[:, 1])
    area2 = poly_area(np.array(rect2)[:, 0], np.array(rect2)[:, 1])

    inter, inter_area = convex_hull_intersection(rect1, rect2)
    iou_2d = inter_area / (area1 + area2 - inter_area)
    if debug:
        print("area=", inter_area, "iou=", iou_2d)
    zmax = min(corners1[4, 2], corners2[4, 2])
    zmin = max(corners1[0, 2], corners2[0, 2])
    if debug:
        print("zmax=", zmax, "zmin=", zmin)

    inter_vol = inter_area * max(0.0, zmax - zmin)

    vol1 = box3d_vol(corners1, debug)
    vol2 = box3d_vol(corners2, debug)
    iou = inter_vol / (vol1 + vol2 - inter_vol)
    if debug:
        print(inter_vol, vol1, vol2)
    return iou, iou_2d


from .geometry_utils import point_in_box
from config import superclass
import numpy as np


def diff_label_filt(frame1, frame2, i, j):
    size = frame1.size[i]
    diff = np.abs(frame1.center[i] - frame2.center[j]) / size
    return diff[0] <= 1 and diff[1] <= 1 and diff[2] <= 1 and frame1.label[i] == frame2.label[j]


class Filter(object):
    def __init__(self):
        pass

    def __call__(self, **args):
        return True


class RectFilter(Filter):
    def __init__(self, bbox):
        super().__init__()
        self.bbox = bbox

    def __call__(self, box, **args):
        for corner in box:
            if point_in_box(corner, self.bbox):
                return True
        return False


class SuperClassFilter(Filter):
    def __init__(self, superclass):
        super().__init__()
        self.superclass = superclass

    def __call__(self, box, pred_class):
        return superclass[pred_class] == self.superclass


class AndFilter(Filter):
    def __init__(self, filt1, filt2):
        super().__init__()
        self.filt1 = filt1
        self.filt2 = filt2

    def __call__(self, box, pred_class, **args):
        return self.filt1(box, pred_class) or self.filt2(box, pred_class)


# Copyright (c) DAIR-V2X(AIR). All rights reserved.
import numpy as np
import math
import os
import json


def get_trans(info):
    return info["translation"], info["rotation"]


def quaternion_trans(input_point, translation, rotation):
    T_matrix = np.array(translation).reshape(3, 1)
    R_matrix = np.array(rotation).reshape(3, 3)

    input = np.concatenate((np.array(input_point), np.array([1]))).reshape(4, 1)
    matrix = np.concatenate((R_matrix, T_matrix), axis=1)
    output_point = np.dot(matrix, input)
    return output_point.reshape(-1)


def box_translation(boxes, translation, rotation):
    n, c, _ = boxes.shape
    result = np.zeros(boxes.shape)
    for i in range(n):
        for j in range(c):
            result[i, j, :] = quaternion_trans(boxes[i, j, :], translation, rotation)
    return result


def points_translation(points, translation, rotation):
    result = points.copy()
    for i in range(len(points)):
        result[i, :3] = quaternion_trans(points[i, :3], translation, rotation)
    return result


def get_arrow_end(centers, angles, vector=[5, 5]):
    end = []
    for angle in angles:
        end.append([vector[0] * math.sin(angle), vector[1] * math.cos(angle), 0])
    end = np.array(end) + centers
    return end


def get_3d_8points(obj_size, yaw_lidar, center_lidar):
    # yaw_lidar = -yaw_lidar
    liadr_r = np.matrix(
        [
            [math.cos(yaw_lidar), -math.sin(yaw_lidar), 0],
            [math.sin(yaw_lidar), math.cos(yaw_lidar), 0],
            [0, 0, 1],
        ]
    )
    l, w, h = obj_size
    corners_3d_lidar = np.matrix(
        [
            [l / 2, l / 2, -l / 2, -l / 2, l / 2, l / 2, -l / 2, -l / 2],
            [w / 2, -w / 2, -w / 2, w / 2, w / 2, -w / 2, -w / 2, w / 2],
            [0, 0, 0, 0, h, h, h, h],
        ]
    )
    corners_3d_lidar = liadr_r * corners_3d_lidar + np.matrix(center_lidar).T

    return corners_3d_lidar.T


class Coord_transformation(object):
    """
    coord_list=['Infrastructure_image','Infrastructure_camera','Infrastructure_lidar',
                        'world', 'Vehicle_image','Vehicle_camera','Vehicle_lidar',
                        'Vehicle_novatel']

    'Infrastructure_image' ->'Infrastructure_camera'->'Infrastructure_lidar'->'world'
                                                                                   ^
                                                                                   |
                          Vehicle_image'->'Vehicle_camera'->'Vehicle_lidar'->'Vehicle_novatel'

           Transformation                                   Function name
    infrastructure-lidar to world          ->      Coord_Infrastructure_lidar2world()
    vehicle-lidar to world                 ->      Coord_Vehicle_lidar2world()
    infrastructure-lidar to vehicle-lidar  ->      Coord_Infrastructure_lidar2Vehicle_lidar()
    world to vehicle-lidar                 ->      Coord_world2vehicel_lidar()


    Transformation equation
        a^p=a^R_b*P_b+a^P_b0
        reverse:  P_b=vers(a^R_b)a^p-vers(a^R_b)(a^P_b0)
    """

    def __init__(self, from_coord, to_coord, path_root, infra_name, veh_name):
        # self.transformer = Transformation()
        self.from_coord = from_coord
        self.to_coord = to_coord
        self.path_root = path_root
        self.infra_name = infra_name
        self.veh_name = veh_name

        # Hard code for time-compensation late fusion
        self.delta_x = None
        self.delta_y = None

    def __call__(self, point):

        path_all = {
            "path_root": self.path_root,
            "path_lidar2world": "infrastructure-side/calib/virtuallidar_to_world/" + self.infra_name + ".json",
            "path_lidar2novatel": "vehicle-side/calib/lidar_to_novatel/" + self.veh_name + ".json",
            "path_novatel2world": "vehicle-side/calib/novatel_to_world/" + self.veh_name + ".json",
        }

        rotation, translation = self.forward(self.from_coord, self.to_coord, path_all)
        return self.point_transformation(point, rotation, translation)

    def forward(self, from_coord, to_coord, path_all):
        coord_list = ["Infrastructure_lidar", "World", "Vehicle_lidar"]
        if (from_coord in coord_list) and (to_coord in coord_list):
            if from_coord == "Infrastructure_lidar" and to_coord == "World":
                rotation, translation = self.Coord_Infrastructure_lidar2world(path_all)
                return rotation, translation
            if from_coord == "Vehicle_lidar" and to_coord == "World":
                rotation, translation = self.Coord_Vehicle_lidar2world(path_all)
                return rotation, translation
            if from_coord == "Infrastructure_lidar" and to_coord == "Vehicle_lidar":
                rotation, translation = self.Coord_Infrastructure_lidar2Vehicle_lidar(path_all)
                return rotation, translation
            if from_coord == "World" and to_coord == "Vehicle_lidar":
                rotation, translation = self.Coord_world2vehicel_lidar(path_all)
                return rotation, translation
        else:
            raise ("error: wrong coordinate name")
        
    def get_rot_trans(self):
        path_all = {
            "path_root": self.path_root,
            "path_lidar2world": "infrastructure-side/calib/virtuallidar_to_world/" + self.infra_name + ".json",
            "path_lidar2novatel": "vehicle-side/calib/lidar_to_novatel/" + self.veh_name + ".json",
            "path_novatel2world": "vehicle-side/calib/novatel_to_world/" + self.veh_name + ".json",
        }
        
        return self.forward(self.from_coord, self.to_coord, path_all)

    def rev_matrix(self, R):
        R = np.matrix(R)
        rev_R = R.I
        rev_R = np.array(rev_R)
        return rev_R

    def muilt_coord(self, rotationA2B, translationA2B, rotationB2C, translationB2C):
        rotationA2B = np.array(rotationA2B).reshape(3, 3)
        rotationB2C = np.array(rotationB2C).reshape(3, 3)
        rotation = np.dot(rotationB2C, rotationA2B)
        translationA2B = np.array(translationA2B).reshape(3, 1)
        translationB2C = np.array(translationB2C).reshape(3, 1)
        translation = np.dot(rotationB2C, translationA2B) + translationB2C
        return rotation, translation

    def reverse(self, rotation, translation):
        rev_rotation = self.rev_matrix(rotation)
        rev_translation = -np.dot(rev_rotation, translation)
        return rev_rotation, rev_translation

    def trans(self, input_point, translation, rotation):
        translation = np.array(translation).reshape(3, 1)
        rotation = np.array(rotation).reshape(3, 3)
        for point in input_point:
            output_point = np.dot(rotation, input_point.reshape(3, 1)).reshape(3) + np.array(translation).reshape(3)
        return np.array(output_point)

    def get_lidar2novatel(self, path_lidar2novatel):  # vehicle side
        lidar2novatel = self.read_json(path_lidar2novatel)
        rotation = lidar2novatel["transform"]["rotation"]
        translation = lidar2novatel["transform"]["translation"]
        return rotation, translation

    def get_novatel2world(self, path_novatel2world):  # vehicle side
        novatel2world = self.read_json(path_novatel2world)
        rotation = novatel2world["rotation"]
        translation = novatel2world["translation"]
        return rotation, translation

    def get_lidar2world(self, path_lidar2world):  # Infrastructure side, lidar to word
        lidar2world = self.read_json(path_lidar2world)
        rotation = lidar2world["rotation"]
        translation = lidar2world["translation"]
        delta_x = lidar2world["relative_error"]["delta_x"]
        delta_y = lidar2world["relative_error"]["delta_y"]
        if delta_x == "":
            delta_x = 0
        if delta_y == "":
            delta_y = 0

        return rotation, translation, delta_x, delta_y

    def read_json(self, path_json):
        with open(path_json, "r") as load_f:
            my_json = json.load(load_f)
        return my_json

    def Coord_Infrastructure_lidar2world(self, path_all):
        rotation, translation, delta_x, delta_y = self.get_lidar2world(
            os.path.join(path_all["path_root"], path_all["path_lidar2world"])
        )
        return rotation, translation

    def Coord_world2vehicel_lidar(self, path_all):
        # world to novatel
        rotation, translation = self.get_novatel2world(
            os.path.join(path_all["path_root"], path_all["path_novatel2world"])
        )
        rotationA2B, translationA2B = self.reverse(rotation, translation)
        # novatel to lidar
        rotation, translation = self.get_lidar2novatel(
            os.path.join(path_all["path_root"], path_all["path_lidar2novatel"])
        )
        rotationB2C, translationB2C = self.reverse(rotation, translation)
        new_rotationA2C, new_translationA2C = self.muilt_coord(rotationA2B, translationA2B, rotationB2C, translationB2C)
        return new_rotationA2C, new_translationA2C

    def Coord_Vehicle_lidar2world(self, path_all):
        rotationA2B, translationA2B = self.get_lidar2novatel(
            os.path.join(path_all["path_root"], path_all["path_lidar2novatel"])
        )
        rotationB2C, translationB2C = self.get_novatel2world(
            os.path.join(path_all["path_root"], path_all["path_novatel2world"])
        )
        new_rotationA2C, new_translationA2C = self.muilt_coord(rotationA2B, translationA2B, rotationB2C, translationB2C)

        return new_rotationA2C, new_translationA2C

    def Coord_Infrastructure_lidar2Vehicle_lidar(self, path_all):
        rotationA2B, translationA2B, delta_x, delta_y = self.get_lidar2world(
            os.path.join(path_all["path_root"], path_all["path_lidar2world"])
        )
        if self.delta_x is not None:
            delta_x = self.delta_x
            delta_y = self.delta_y
        self.delta_x = delta_x
        self.delta_y = delta_y

        translationA2B = translationA2B + np.array([delta_x, delta_y, 0]).reshape(3, 1)
        rotationB2C, translationB2C = self.Coord_world2vehicel_lidar(path_all)
        new_rotationA2C, new_translationA2C = self.muilt_coord(rotationA2B, translationA2B, rotationB2C, translationB2C)

        return new_rotationA2C, new_translationA2C

    def point_transformation(self, input_box, rotation, translation):
        translation = np.array(translation).reshape(3, 1)
        rotation = np.array(rotation).reshape(3, 3)
        output = []
        for box in input_box:
            if len(box) == 3:
                output.append(np.dot(rotation, box.reshape(3, 1)).reshape(3) + np.array(translation).reshape(3))
                continue
            output_point = []
            for point in box:
                output_point.append(np.dot(rotation, point.reshape(3, 1)).reshape(3) + np.array(translation).reshape(3))
            output.append(output_point)

        return np.array(output)

    def single_point_transformation(self, input_point):
        path_all = {
            "path_root": self.path_root,
            "path_lidar2world": "infrastructure-side/calib/virtuallidar_to_world/" + self.infra_name + ".json",
            "path_lidar2novatel": "vehicle-side/calib/lidar_to_novatel/" + self.veh_name + ".json",
            "path_novatel2world": "vehicle-side/calib/novatel_to_world/" + self.veh_name + ".json",
        }

        rotation, translation = self.forward(self.from_coord, self.to_coord, path_all)
        input_point = np.array(input_point).reshape(3, 1)
        translation = np.array(translation).reshape(3, 1)
        rotation = np.array(rotation).reshape(3, 3)
        output_point = np.dot(rotation, input_point).reshape(3, 1) + np.array(translation).reshape(3, 1)

        return output_point


class Coord_transformation_spd(object):
    """
    coord_list=['Infrastructure_image','Infrastructure_camera','Infrastructure_lidar',
                        'world', 'Vehicle_image','Vehicle_camera','Vehicle_lidar',
                        'Vehicle_novatel']
    'Infrastructure_image' ->'Infrastructure_camera'->'Infrastructure_lidar'->'world'
                                                                                   ^
                                                                                   |
                          Vehicle_image'->'Vehicle_camera'->'Vehicle_lidar'->'Vehicle_novatel'
           Transformation                                   Function name
    infrastructure-lidar to world          ->      Coord_Infrastructure_lidar2world()
    vehicle-lidar to world                 ->      Coord_Vehicle_lidar2world()
    infrastructure-lidar to vehicle-lidar  ->      Coord_Infrastructure_lidar2Vehicle_lidar()
    world to vehicle-lidar                 ->      Coord_world2vehicel_lidar()
    Transformation equation
        a^p=a^R_b*P_b+a^P_b0
        reverse:  P_b=vers(a^R_b)a^p-vers(a^R_b)(a^P_b0)
    """
    def __init__(self, from_coord, to_coord, path_root, inf_name, veh_name, delta_x, delta_y):
        # self.transformer = Transformation()
        self.from_coord = from_coord
        self.to_coord = to_coord
        self.path_root = path_root
        self.inf_name = inf_name
        self.veh_name = veh_name

        # Hard code for time-compensation late fusion
        self.delta_x = delta_x
        self.delta_y = delta_y

    def __call__(self, point):

        path_all = {
            "path_root": self.path_root,
            "path_lidar2world": "infrastructure-side/calib/virtuallidar_to_world/" + self.inf_name + ".json",
            "path_lidar2novatel": "vehicle-side/calib/lidar_to_novatel/" + self.veh_name + ".json",
            "path_novatel2world": "vehicle-side/calib/novatel_to_world/" + self.veh_name + ".json",
        }

        rotation, translation = self.forward(self.from_coord, self.to_coord, path_all)
        return self.point_transformation(point, rotation, translation)

    def forward(self, from_coord, to_coord, path_all):
        coord_list = ["Infrastructure_lidar", "World", "Vehicle_lidar"]
        if (from_coord in coord_list) and (to_coord in coord_list):
            if from_coord == "Infrastructure_lidar" and to_coord == "World":
                rotation, translation = self.Coord_Infrastructure_lidar2world(path_all)
                return rotation, translation
            if from_coord == "Vehicle_lidar" and to_coord == "World":
                rotation, translation = self.Coord_Vehicle_lidar2world(path_all)
                return rotation, translation
            if from_coord == "Infrastructure_lidar" and to_coord == "Vehicle_lidar":
                rotation, translation = self.Coord_Infrastructure_lidar2Vehicle_lidar(path_all)
                return rotation, translation
            if from_coord == "World" and to_coord == "Vehicle_lidar":
                rotation, translation = self.Coord_world2vehicel_lidar(path_all)
                return rotation, translation
        else:
            raise ("error: wrong coordinate name")

    def get_rot_trans(self):
        path_all = {
            "path_root": self.path_root,
            "path_lidar2world": "infrastructure-side/calib/virtuallidar_to_world/" + self.inf_name + ".json",
            "path_lidar2novatel": "vehicle-side/calib/lidar_to_novatel/" + self.veh_name + ".json",
            "path_novatel2world": "vehicle-side/calib/novatel_to_world/" + self.veh_name + ".json",
        }

        return self.forward(self.from_coord, self.to_coord, path_all)

    def rev_matrix(self, R):
        R = np.matrix(R)
        rev_R = R.I
        rev_R = np.array(rev_R)
        return rev_R

    def muilt_coord(self, rotationA2B, translationA2B, rotationB2C, translationB2C):
        rotationA2B = np.array(rotationA2B).reshape(3, 3)
        rotationB2C = np.array(rotationB2C).reshape(3, 3)
        rotation = np.dot(rotationB2C, rotationA2B)
        translationA2B = np.array(translationA2B).reshape(3, 1)
        translationB2C = np.array(translationB2C).reshape(3, 1)
        translation = np.dot(rotationB2C, translationA2B) + translationB2C
        return rotation, translation

    def reverse(self, rotation, translation):
        rev_rotation = self.rev_matrix(rotation)
        rev_translation = -np.dot(rev_rotation, translation)
        return rev_rotation, rev_translation

    def trans(self, input_point, translation, rotation):
        translation = np.array(translation).reshape(3, 1)
        rotation = np.array(rotation).reshape(3, 3)
        output_points = []
        for point in input_point:
            output_point = (np.dot(rotation, point.reshape(3, 1)) + np.array(translation)).reshape(1, 3).tolist()
            output_points.append(output_point[0])
        return np.array(output_points)

    def get_lidar2novatel(self, path_lidar2novatel):  # vehicle side
        lidar2novatel = self.read_json(path_lidar2novatel)
        rotation = lidar2novatel["transform"]["rotation"]
        translation = lidar2novatel["transform"]["translation"]
        return rotation, translation

    def get_novatel2world(self, path_novatel2world):  # vehicle side
        novatel2world = self.read_json(path_novatel2world)
        rotation = novatel2world["rotation"]
        translation = novatel2world["translation"]
        return rotation, translation

    def get_lidar2world(self, path_lidar2world):  # Infrastructure side, lidar to word
        lidar2world = self.read_json(path_lidar2world)
        rotation = lidar2world["rotation"]
        translation = lidar2world["translation"]
        return rotation, translation

    def read_json(self, path_json):
        with open(path_json, "r") as load_f:
            my_json = json.load(load_f)
        return my_json

    def Coord_Infrastructure_lidar2world(self, path_all):
        rotation, translation = self.get_lidar2world(
            os.path.join(path_all["path_root"], path_all["path_lidar2world"])
        )
        return rotation, translation

    def Coord_world2vehicel_lidar(self, path_all):
        # world to novatel
        rotation, translation = self.get_novatel2world(
            os.path.join(path_all["path_root"], path_all["path_novatel2world"])
        )
        rotationA2B, translationA2B = self.reverse(rotation, translation)
        # novatel to lidar
        rotation, translation = self.get_lidar2novatel(
            os.path.join(path_all["path_root"], path_all["path_lidar2novatel"])
        )
        rotationB2C, translationB2C = self.reverse(rotation, translation)
        # translationB2C = translationB2C + np.array([self.delta_x, self.delta_y, 0]).reshape(3, 1)
        new_rotationA2C, new_translationA2C = self.muilt_coord(rotationA2B, translationA2B, rotationB2C, translationB2C)
        return new_rotationA2C, new_translationA2C

    def Coord_Vehicle_lidar2world(self, path_all):
        rotationA2B, translationA2B = self.get_lidar2novatel(
            os.path.join(path_all["path_root"], path_all["path_lidar2novatel"])
        )
        rotationB2C, translationB2C = self.get_novatel2world(
            os.path.join(path_all["path_root"], path_all["path_novatel2world"])
        )
        new_rotationA2C, new_translationA2C = self.muilt_coord(rotationA2B, translationA2B, rotationB2C, translationB2C)

        return new_rotationA2C, new_translationA2C

    def Coord_Infrastructure_lidar2Vehicle_lidar(self, path_all):
        rotationA2B, translationA2B = self.get_lidar2world(
            os.path.join(path_all["path_root"], path_all["path_lidar2world"])
        )
        rotationB2C, translationB2C = self.Coord_world2vehicel_lidar(path_all)
        new_rotationA2C, new_translationA2C = self.muilt_coord(rotationA2B, translationA2B, rotationB2C, translationB2C)
        new_translationA2C = new_translationA2C + np.array([self.delta_x, self.delta_y, 0]).reshape(3, 1)

        return new_rotationA2C, new_translationA2C

    def point_transformation(self, input_box, rotation, translation):
        translation = np.array(translation).reshape(3, 1)
        rotation = np.array(rotation).reshape(3, 3)
        output = []
        for box in input_box:
            if len(box) == 3:
                output.append(np.dot(rotation, box.reshape(3, 1)).reshape(3) + np.array(translation).reshape(3))
                continue
            output_point = []
            for point in box:
                output_point.append(np.dot(rotation, point.reshape(3, 1)).reshape(3) + np.array(translation).reshape(3))
            output.append(output_point)

        return np.array(output)

    def single_point_transformation(self, input_point):
        path_all = {
            "path_root": self.path_root,
            "path_lidar2world": "infrastructure-side/calib/virtuallidar_to_world/" + self.inf_name + ".json",
            "path_lidar2novatel": "vehicle-side/calib/lidar_to_novatel/" + self.veh_name + ".json",
            "path_novatel2world": "vehicle-side/calib/novatel_to_world/" + self.veh_name + ".json",
        }

        rotation, translation = self.forward(self.from_coord, self.to_coord, path_all)
        input_point = np.array(input_point).reshape(3, 1)
        translation = np.array(translation).reshape(3, 1)
        rotation = np.array(rotation).reshape(3, 3)
        output_point = np.dot(rotation, input_point).reshape(3, 1) + np.array(translation).reshape(3, 1)

        return output_point


if __name__ == "__main__":
    rotation = [
        [-0.0638033225610772, -0.9910914864003576, -0.04429948490729328],
        [-0.2102873406178483, 0.043997692433495696, -0.7987692871343754],
        [0.97575114561348, -0.06031492538699515, -0.17158543199893228],
    ]
    translation = [[-5.779144404715124], [6.037615758600886], [1.0636424034755758]]
    calib = Coord_transformation(rotation, translation)
    print("Init: ", calib.rotation, calib.translation)

    calib_inv = calib.inv()
    print("Inverse: ", calib_inv.rotation, calib_inv.translation)

    rotation_other = [
        [0.854463098610578, -0.5195105091837793, 0.0012102751176149926],
        [0.5195000561482762, 0.8544244218454334, -0.0088276425335725],
        [0.0035518987605347592, 0.008171634487169012, 0.9999599188996214],
    ]
    translation_other = [[3390.138583273976], [2087.3119082041085], [20.66834816604844]]
    calib_other = Coord_transformation(rotation_other, translation_other)
    calib_mul = calib.matmul(calib_other)
    print("Matmul: ", calib_mul.rotation, calib_mul.translation)


import numpy as np


def range2box(box_range):
    # [x0, y0, z0, x1, y1, z1]
    box_range = np.array(box_range)
    indexs = [
        [0, 1, 2],
        [3, 1, 2],
        [3, 4, 2],
        [0, 4, 2],
        [0, 1, 5],
        [3, 1, 5],
        [3, 4, 5],
        [0, 4, 5],
    ]
    return np.array([[box_range[index] for index in indexs]])


def dot_product(p1, p2):
    return p1[0] * p2[0] + p1[1] * p2[1] + p1[2] * p2[2]


def cross_product(p1, p2):
    return [
        p1[1] * p2[2] - p1[2] * p2[1],
        p1[2] * p2[0] - p1[0] * p2[2],
        p1[0] * p2[1] - p2[0] * p1[1],
    ]


def above_line(point, st, ed):
    # ax + by = c
    a = ed[1] - st[1]
    b = st[0] - ed[0]
    c = st[0] * ed[1] - ed[0] * st[1]
    if abs(b) > 1e-6 and abs(a) > 1e-6:
        y_intersec = (c - a * point[0]) / b
        return (
            y_intersec >= st[1] and y_intersec <= ed[1] or y_intersec >= ed[1] and y_intersec <= st[1]
        ) and y_intersec < point[1]
    elif abs(b) > 1e-6:
        return (point[0] >= st[0] and point[0] <= ed[0] or point[0] >= ed[0] and point[0] <= st[0]) and point[1] >= st[
            1
        ]
    else:
        return 0


def point_in_matrix(point, matrix):
    point
    return (
        above_line(point, matrix[0], matrix[1])
        + above_line(point, matrix[1], matrix[2])
        + above_line(point, matrix[2], matrix[3])
        + above_line(point, matrix[3], matrix[0])
    ) % 2 == 1


def GetCross(x1, y1, x2, y2, x, y):
    a = (x2 - x1, y2 - y1)
    b = (x - x1, y - y1)
    return a[0] * b[1] - a[1] * b[0]


def isInSide(x1, y1, x2, y2, x3, y3, x4, y4, x, y):
    return (
        GetCross(x1, y1, x2, y2, x, y) * GetCross(x3, y3, x4, y4, x, y) >= 0
        and GetCross(x2, y2, x3, y3, x, y) * GetCross(x4, y4, x1, y1, x, y) >= 0
    )


def above_plane(point, plane):
    # ax + by + cz = d
    norm = cross_product(plane[1] - plane[0], plane[2] - plane[0])  # [a, b, c]
    d = dot_product(plane[0], norm)
    z_intersec = (d - norm[0] * point[0] - norm[1] * point[1]) / norm[2]
    # https://www.cnblogs.com/nobodyzhou/p/6145030.html
    t = (norm[0] * point[0] + norm[1] * point[1] + norm[2] * point[2] - d) / (
        norm[0] ** 2 + norm[1] ** 2 + norm[2] ** 2
    )
    point_x = point[0] - norm[0] * t
    point_y = point[1] - norm[1] * t
    if z_intersec <= point[2] and isInSide(
        plane[0][0],
        plane[0][1],
        plane[1][0],
        plane[1][1],
        plane[2][0],
        plane[2][1],
        plane[3][0],
        plane[3][1],
        point_x,
        point_y,
    ):
        # if z_intersec <= point[2] and point_in_matrix([point_x,point_y], plane[:, :2]):
        return 1
    else:
        return 0


def point_in_box(point, box):
    return above_plane(point, box[:4]) + above_plane(point, box[4:]) == 1


import os
import os.path as osp

from .transformation_utils import *
from .geometry_utils import *
from .filter_utils import *
from .eval_utils import *
from .iou_utils import *


def id_to_str(id, digits=6):
    result = ""
    for i in range(digits):
        result = str(id % 10) + result
        id //= 10
    return result


def mkdir(path):
    if not osp.exists(path):
        os.system("mkdir " + path)


def id_cmp(x, y):
    id_x = int(x["pointcloud_path"][-10:-4])
    id_y = int(y["pointcloud_path"][-10:-4])
    if id_x < id_y:
        return -1
    elif id_x == id_y:
        return 0
    else:
        return 1


import numpy as np
from scipy.spatial import ConvexHull
from functools import cmp_to_key
import logging

logger = logging.getLogger(__name__)

from config import superclass

iou_threshold_dict = {
    "car": [0.3, 0.5, 0.7],
    "cyclist": [0.25, 0.5],
    "pedestrian": [0.25, 0.5],
}


def polygon_clip(subjectPolygon, clipPolygon):
    """Clip a polygon with another polygon.

     Ref: https://rosettacode.org/wiki/Sutherland-Hodgman_polygon_clipping#Python

     Args:
       subjectPolygon: a list of (x,y) 2d points, any polygon.
       clipPolygon: a list of (x,y) 2d points, has to be *convex*
    Note:
      **points have to be counter-clockwise ordered**

    Return:
      a list of (x,y) vertex point for the intersection polygon.
    """

    def inside(p):
        return (cp2[0] - cp1[0]) * (p[1] - cp1[1]) > (cp2[1] - cp1[1]) * (p[0] - cp1[0])

    def computeIntersection():
        dc = [cp1[0] - cp2[0], cp1[1] - cp2[1]]
        dp = [s[0] - e[0], s[1] - e[1]]
        n1 = cp1[0] * cp2[1] - cp1[1] * cp2[0]
        n2 = s[0] * e[1] - s[1] * e[0]
        n3 = 1.0 / (dc[0] * dp[1] - dc[1] * dp[0])
        return [(n1 * dp[0] - n2 * dc[0]) * n3, (n1 * dp[1] - n2 * dc[1]) * n3]

    outputList = subjectPolygon
    cp1 = clipPolygon[-1]

    for clipVertex in clipPolygon:
        cp2 = clipVertex
        inputList = outputList
        outputList = []
        s = inputList[-1]

        for subjectVertex in inputList:
            e = subjectVertex
            if inside(e):
                if not inside(s):
                    outputList.append(computeIntersection())
                outputList.append(e)
            elif inside(s):
                outputList.append(computeIntersection())
            s = e
        cp1 = cp2
        if len(outputList) == 0:
            return None
    return outputList


def poly_area(x, y):
    """Ref: http://stackoverflow.com/questions/24467972/calculate-area-of-polygon-given-x-y-coordinates"""
    return 0.5 * np.abs(np.dot(x, np.roll(y, 1)) - np.dot(y, np.roll(x, 1)))


def convex_hull_intersection(p1, p2):
    """Compute area of two convex hull's intersection area.
    p1,p2 are a list of (x,y) tuples of hull vertices.
    return a list of (x,y) for the intersection and its volume
    """
    inter_p = polygon_clip(p1, p2)
    if inter_p is not None:
        hull_inter = ConvexHull(inter_p)
        return inter_p, hull_inter.volume
    else:
        return None, 0.0


def box3d_vol(corners, debug=False):
    """corners: (8,3) no assumption on axis direction"""
    a = np.sqrt(np.sum((corners[0, :] - corners[1, :]) ** 2))
    b = np.sqrt(np.sum((corners[1, :] - corners[2, :]) ** 2))
    c = np.sqrt(np.sum((corners[0, :] - corners[4, :]) ** 2))
    return a * b * c


def is_clockwise(p):
    x = p[:, 0]
    y = p[:, 1]
    return np.dot(x, np.roll(y, 1)) - np.dot(y, np.roll(x, 1)) > 0


def box3d_iou(corners1, corners2, debug=False):
    """Compute 3D bounding box IoU.

    Input:
        corners1:         numpy array (8,3)
        corners2:         numpy array (8,3)

    Output:
        iou:    3D bounding box IoU
        iou_2d: bird's eye view 2D bounding box IoU
    """
    # corner points are in counter clockwise order
    rect1 = [(corners1[i, 0], corners1[i, 1]) for i in range(4)]
    rect2 = [(corners2[i, 0], corners2[i, 1]) for i in range(4)]

    area1 = poly_area(np.array(rect1)[:, 0], np.array(rect1)[:, 1])
    area2 = poly_area(np.array(rect2)[:, 0], np.array(rect2)[:, 1])

    inter, inter_area = convex_hull_intersection(rect1, rect2)
    iou_2d = inter_area / (area1 + area2 - inter_area)
    if debug:
        print("area=", inter_area, "iou=", iou_2d)
    zmax = min(corners1[4, 2], corners2[4, 2])
    zmin = max(corners1[0, 2], corners2[0, 2])
    if debug:
        print("zmax=", zmax, "zmin=", zmin)

    inter_vol = inter_area * max(0.0, zmax - zmin)

    vol1 = box3d_vol(corners1, debug)
    vol2 = box3d_vol(corners2, debug)
    iou = inter_vol / (vol1 + vol2 - inter_vol)
    if debug:
        print(inter_vol, vol1, vol2)
    return iou, iou_2d


"""
box corner order: (x0y0z0, x0y0z1, x0y1z1, x0y1z0, x1y0z0, x1y0z1, x1y1z1, x1y1z0)
                                 up z
                  front x         ^
                     /            |
                    /             |
      (x1, y0, z1) + ------------ + (x1, y1, z1)
                  /|            / |
                 / |           /  |
   (x0, y0, z1) + ----------- +   + (x1, y1, z0)
                |  /      .   |  /
                | / origin    | /
left y<-------- + ----------- + (x0, y1, z0)
            (x0, y0, z0)
"""
perm_pred = [0, 4, 7, 3, 1, 5, 6, 2]
perm_label = [3, 2, 1, 0, 7, 6, 5, 4]


def cmp(pred1, pred2):
    if pred1["score"] > pred2["score"]:
        return -1
    elif pred1["score"] < pred2["score"]:
        return 1
    else:
        return 0


def build_label_list(annos, filt):
    result_list = []
    for i in range(len(annos["labels_3d"])):
        if superclass[annos["labels_3d"][i]] == filt:
            result_list.append({"box": annos["boxes_3d"][i], "score": annos["scores_3d"][i]})
    return result_list


def compute_type(gt_annos, pred_annos, cla, iou_threshold, view):
    """
    Input:
        gt_annos, pred_annos: Dict, {'boxes_3d': Array[N, 8, 3], 'labels_3d': Array[N], 'scores_3d': Array[N]}
        cla:                  Str, Class of interest
        iou threshold:        Float
        view:                 Str, 3d or bev
    Output:
        result_pred_annos:    List, [{'box': Array[8, 3], 'score': Float, 'type': 'tp'/'fp'}]
        num_gt:               Int, number of ground truths
    """
    gt_annos = build_label_list(gt_annos, filt=cla)
    pred_annos = build_label_list(pred_annos, filt=cla)
    pred_annos = sorted(pred_annos, key=cmp_to_key(cmp))
    result_pred_annos = []
    num_tp = 0
    p, q = len(pred_annos), len(gt_annos)
    for i in range(len(pred_annos)):
        pred_annos[i]["id"] = i
    for gt_anno in gt_annos:
        # logger.debug("ground truth center: {}".format(np.mean(gt_anno["box"], axis=0)))
        mx = iou_threshold
        mx_pred = None
        for i in range(len(pred_annos)):
            pred_anno = pred_annos[i]
            try:
                iou, iou_2d = box3d_iou(gt_anno["box"][perm_label], pred_anno["box"][perm_pred])
            except Exception:
                iou, iou_2d = 0, 0
                # print("gt=", gt_anno['box'][perm_label], "pred=", pred_anno['box'][perm_pred])
            if view == "bev":
                iou = iou_2d
            """
            if np.sum((np.mean(gt_anno["box"], axis=0) - np.mean(pred_anno['box'], axis=0)) ** 2) ** 0.5 < 3:
                logger.info("pred center:{} {}".format(pred_anno["id"], np.mean(pred_anno['box'], axis=0)))
                logger.info("iou: {}".format(iou))
                if iou < 0.5:
                    iou, _ = box3d_iou(gt_anno['box'][perm_label], pred_anno['box'][perm_pred], debug=True)
            """
            if iou >= mx:

                mx = iou
                mx_pred = i
        if mx_pred is not None:
            result_pred_annos.append(pred_annos[mx_pred])
            del pred_annos[mx_pred]
            result_pred_annos[-1]["type"] = "tp"
            num_tp += 1
    for pred_anno in pred_annos:
        pred_anno["type"] = "fp"
        result_pred_annos.append(pred_anno)
    logger.debug("num_tp: {}, pred: {}, gt: {}".format(num_tp, p, q))
    return result_pred_annos, len(gt_annos), num_tp


def compute_ap(pred_annos, num_gt):
    """
    Input:
        pred_annos: List, [{'box': Array[8, 3], 'score': Float, 'type': 'tp'/'fp'}]
        num_gt:     Int, number of ground truths
    Output:
        mAP:        Float, evaluation result
    """
    pred_annos = sorted(pred_annos, key=cmp_to_key(cmp))
    num_tp = np.zeros(len(pred_annos))
    for i in range(len(pred_annos)):
        num_tp[i] = 0 if i == 0 else num_tp[i - 1]
        if pred_annos[i]["type"] == "tp":
            num_tp[i] += 1
    # logger.debug("num tp = {}".format(num_tp))
    precision = num_tp / np.arange(1, len(pred_annos) + 1)
    recall = num_tp / num_gt
    for i in range(len(pred_annos) - 1, 0, -1):
        precision[i - 1] = max(precision[i], precision[i - 1])
    index = np.where(recall[1:] != recall[:-1])[0]
    return np.sum((recall[index + 1] - recall[index]) * precision[index + 1])


class Evaluator(object):
    def __init__(self, pred_classes):
        self.pred_classes = pred_classes
        self.all_preds = {"3d": {}, "bev": {}}
        self.gt_num = {}
        for pred_class in self.pred_classes:
            self.all_preds["3d"][pred_class] = {}
            self.all_preds["bev"][pred_class] = {}
            self.gt_num[pred_class] = {}
            for iou in iou_threshold_dict[pred_class]:
                self.all_preds["3d"][pred_class][iou] = []
                self.all_preds["bev"][pred_class][iou] = []
                self.gt_num[pred_class][iou] = 0

    def add_frame(self, pred, label):
        for pred_class in self.pred_classes:
            for iou in iou_threshold_dict[pred_class]:
                pred_result, num_label, num_tp = compute_type(label, pred, pred_class, iou, "3d")  # test
                self.all_preds["3d"][pred_class][iou] += pred_result
                self.all_preds["bev"][pred_class][iou] += compute_type(label, pred, pred_class, iou, "bev")[0]
                self.gt_num[pred_class][iou] += num_label
                # logger.debug("iou: {}, tp: {}, all_pred: {}".format(iou, num_tp, len(pred["labels_3d"])))

    def print_ap(self, view, type="micro"):
        for pred_class in self.pred_classes:
            for iou in iou_threshold_dict[pred_class]:
                ap = compute_ap(self.all_preds[view][pred_class][iou], self.gt_num[pred_class][iou])
                print("%s %s IoU threshold %.2lf, Average Precision = %.2lf" % (pred_class, view, iou, ap * 100))


import os
import json
import numpy as np
from .filter import range2box, get_lidar_3d_8points, RectFilter
from rich.progress import track


def convert_gt_label(kitti_track_tvt_path, ab3dmot_path, extended_range=None):
    """
    v2x/AB3DMOT_plugin/scripts/KITTI/evaluate_tracking.seqmap.val
    eval_label_data/full/validation_gt_label -> scripts/KITTI/label/
        Args:
            input_path: "cooperative_gt_label/validation_gt_label"
            kitti_track_tvt_path: "../../data/V2X-Seq-SPD-KITTI/cooperative/validation"
            ab3dmot_path: "./AB3DMOT_plugin"
            output_path: "eval_label_data/full/validation_gt_label"
        Returns:
            dict
    """
    if extended_range is None:
        extended_range = [0, -39.68, -3, 100, 39.68, 1]
    bbox_filter = RectFilter(range2box(np.array(extended_range))[0])

    seqmap_file_path = os.path.join(ab3dmot_path, 'scripts/KITTI/evaluate_tracking.seqmap.val')
    output_path = os.path.join(ab3dmot_path, 'scripts/KITTI/label')

    os.system(f'rm {seqmap_file_path}')
    os.makedirs(output_path, exist_ok=True)
    os.system(f'rm -rf {output_path}/*')

    dic_data_json = {}
    list_sequence_files = sorted(os.listdir(kitti_track_tvt_path))
    with open(seqmap_file_path, 'w') as a:
        for sequence_file in track(list_sequence_files):
            b = [sequence_file.split('.')[0], "empty", "000000"]
            input_seq_file_path = f'{kitti_track_tvt_path}/{sequence_file}/label_02/{sequence_file}.txt'
            output_seq_file_path = f'{output_path}/{sequence_file}.txt'
            with open(input_seq_file_path, 'r') as read_f, open(output_seq_file_path, "w") as write_f:
                list_lines = read_f.readlines()
                list_lines_filt = []
                for line in list_lines:
                    line = line.replace("Truck", "Car")
                    line = line.replace("Van", "Car")
                    line = line.replace("Bus", "Car")
                    i = line.strip().split(' ')
                    corners = get_lidar_3d_8points([float(i[12]), float(i[11]), float(i[10])], [float(i[17]), float(i[18]), float(i[19])],
                                                   float(i[20]))
                    if bbox_filter(corners):
                        list_lines_filt.append(line)

                list_frame = []
                for i in list_lines_filt:
                    list_i = i.strip("\n").split(" ")
                    if list_i[0] not in list_frame:
                        list_frame.append(list_i[0])
                dic_frame2id = {k: str(j) for j, k in enumerate(list_frame)}
                dic_data_json[b[0]] = dic_frame2id
                len_frame = len(list_frame)
                b.append(f"{len_frame:06d}\n")
                a.write(' '.join(b))
                for line in list_lines_filt:
                    list_line = line.strip("\n").split(" ")
                    list_line[0] = dic_frame2id[list_line[0]]
                    list_line_output = [list_line[0], "{:.0f}".format(float(list_line[2])), list_line[1], list_line[3], list_line[4],
                                        list_line[5], list_line[6], list_line[7], list_line[8], list_line[9], list_line[10], list_line[11],
                                        list_line[12], list_line[13], list_line[14], list_line[15], list_line[16]]
                    str_line = ' '.join(list_line_output) + '\n'
                    write_f.write(str_line)
    return dic_data_json


def convert_track_label(track_results_path, output_path, dic, extended_range=None):
    """
        Args:
            track_results_path: "../output/${EVAL_RESULT_NAME}/tracking_results_to_kitti/${SUB_OUTPUT_PATH_DTC}_H1/data_0"
            output_path: ./AB3DMOT_plugin/results/KITTI/imvoxelnet_Car_val_H1/data_0
            dic: dict from val_dic_new_frame2id_frame.json
            extended_range: [0, -39.68, -3, 100, 39.68, 1]
        Returns:
            None
    """
    if extended_range is None:
        extended_range = [0, -39.68, -3, 100, 39.68, 1]
    bbox_filter = RectFilter(range2box(np.array(extended_range))[0])
    os.makedirs(output_path, exist_ok=True)
    os.system(f'rm -rf {output_path}/*')
    list_sequence_files = sorted(os.listdir(track_results_path))
    for sequence_file in track(list_sequence_files):
        dic_frame2id = dic[sequence_file.split('.')[0]]
        input_seq_file_path = os.path.join(track_results_path, sequence_file)
        output_seq_file_path = os.path.join(output_path, sequence_file)
        with open(input_seq_file_path, 'r') as read_f, open(output_seq_file_path, "w") as write_f:
            list_lines = read_f.readlines()
            list_lines_filt = []
            for line in list_lines:
                line = line.replace("Truck", "Car")
                line = line.replace("Van", "Car")
                line = line.replace("Bus", "Car")
                i = line.strip().split(' ')
                corners = get_lidar_3d_8points([float(i[12]), float(i[11]), float(i[10])], [float(i[17]), float(i[18]), float(i[19])], float(i[20]))
                if bbox_filter(corners):
                    list_lines_filt.append(line)

            for line in list_lines_filt:
                list_line = line.strip("\n").split(" ")
                if list_line[0] not in dic_frame2id.keys():
                    # print(sequence_file, list_line[0])
                    continue
                list_line[0] = dic_frame2id[list_line[0]]
                list_line_output = [list_line[0], str(int(list_line[2])), list_line[1], list_line[3], list_line[4], list_line[5],
                                    list_line[6], list_line[7], list_line[8], list_line[9], list_line[10], list_line[11], list_line[12],
                                    list_line[13], list_line[14], list_line[15], list_line[16], list_line[23]]
                str_line = ' '.join(list_line_output) + '\n'
                write_f.write(str_line)


import math
import numpy as np


def range2box(box_range):
    # [x0, y0, z0, x1, y1, z1]
    box_range = np.array(box_range)
    indexs = [
        [0, 1, 2],
        [3, 1, 2],
        [3, 4, 2],
        [0, 4, 2],
        [0, 1, 5],
        [3, 1, 5],
        [3, 4, 5],
        [0, 4, 5],
    ]
    return np.array([[box_range[index] for index in indexs]])


def dot_product(p1, p2):
    return p1[0] * p2[0] + p1[1] * p2[1] + p1[2] * p2[2]


def GetCross(x1, y1, x2, y2, x, y):
    a = (x2 - x1, y2 - y1)
    b = (x - x1, y - y1)
    return a[0] * b[1] - a[1] * b[0]


def cross_product(p1, p2):
    return [
        p1[1] * p2[2] - p1[2] * p2[1],
        p1[2] * p2[0] - p1[0] * p2[2],
        p1[0] * p2[1] - p2[0] * p1[1],
    ]


def isInSide(x1, y1, x2, y2, x3, y3, x4, y4, x, y):
    return (
        GetCross(x1, y1, x2, y2, x, y) * GetCross(x3, y3, x4, y4, x, y) >= 0
        and GetCross(x2, y2, x3, y3, x, y) * GetCross(x4, y4, x1, y1, x, y) >= 0
    )


def above_plane(point, plane):
    # ax + by + cz = d
    norm = cross_product(plane[1] - plane[0], plane[2] - plane[0])  # [a, b, c]
    d = dot_product(plane[0], norm)
    z_intersec = (d - norm[0] * point[0] - norm[1] * point[1]) / norm[2]
    # https://www.cnblogs.com/nobodyzhou/p/6145030.html
    t = (norm[0] * point[0] + norm[1] * point[1] + norm[2] * point[2] - d) / (
        norm[0] ** 2 + norm[1] ** 2 + norm[2] ** 2
    )
    point_x = point[0] - norm[0] * t
    point_y = point[1] - norm[1] * t
    if z_intersec <= point[2] and isInSide(
        plane[0][0],
        plane[0][1],
        plane[1][0],
        plane[1][1],
        plane[2][0],
        plane[2][1],
        plane[3][0],
        plane[3][1],
        point_x,
        point_y,
    ):
        # if z_intersec <= point[2] and point_in_matrix([point_x,point_y], plane[:, :2]):
        return 1
    else:
        return 0


def point_in_box(point, box):
    return above_plane(point, box[:4]) + above_plane(point, box[4:]) == 1


def get_lidar_3d_8points(label_3d_dimensions, lidar_3d_location, rotation_z):
    lidar_rotation = np.matrix(
        [
            [math.cos(rotation_z), -math.sin(rotation_z), 0],
            [math.sin(rotation_z), math.cos(rotation_z), 0],
            [0, 0, 1]
        ]
    )
    l, w, h = label_3d_dimensions
    corners_3d_lidar = np.matrix(
        [
            [l / 2, l / 2, -l / 2, -l / 2, l / 2, l / 2, -l / 2, -l / 2],
            [w / 2, -w / 2, -w / 2, w / 2, w / 2, -w / 2, -w / 2, w / 2],
            [-h / 2, -h / 2, -h / 2, -h / 2, h / 2, h / 2, h / 2, h / 2],
        ]
    )
    lidar_3d_8points = lidar_rotation * corners_3d_lidar + np.matrix(lidar_3d_location).T
    return lidar_3d_8points.T.tolist()


class Filter(object):
    def __init__(self):
        pass

    def __call__(self, **args):
        return True


class RectFilter(Filter):
    def __init__(self, bbox):
        super().__init__()
        self.bbox = bbox

    def __call__(self, box, **args):
        for corner in box:
            if point_in_box(corner, self.bbox):
                return True
        return False

from .filter import *
from .convert_dair_kitti2ab3dmot import *


# Author: Xinshuo Weng
# email: xinshuo.weng@gmail.com

from __future__ import print_function
import matplotlib;

matplotlib.use('Agg')
import os, numpy as np, time, sys, argparse
from AB3DMOT_libs.io import load_detection, get_saving_dir, get_frame_det, save_results, save_affinity
from AB3DMOT_libs.utils import Config, get_subfolder_seq, initialize
from scripts.post_processing.combine_trk_cat import combine_trk_cat
from xinshuo_io import mkdir_if_missing, save_txt_file
from xinshuo_miscellaneous import get_timestring, print_log

file_path = os.path.dirname(os.path.realpath(__file__))
file_dir_path =  os.path.dirname(file_path)

def parse_args():
    parser = argparse.ArgumentParser(description='AB3DMOT')
    parser.add_argument('--dataset', type=str, default='KITTI', help='KITTI, nuScenes')
    parser.add_argument('--split', type=str, default='val', help='train, val, test')
    parser.add_argument('--det_name', type=str, default='imvoxelnet', help='imvoxelnet')
    parser.add_argument('--cat', type=str, default='Car', help='category of running tracking')
    parser.add_argument('--split-data-path', type=str, default='../data/split_datas/cooperative-split-data-spd.json', help='split-data-path')
    parser.add_argument("--input-path", type=str, default="")
    parser.add_argument("--output-path", type=str, default="")

    args = parser.parse_args()
    return args


def main_per_cat(cfg, cat, log, ID_start):
    # get data-cat-split specific path
    # file_path = os.path.dirname(os.path.realpath(__file__))
    result_sha = '%s_%s_%s' % (cfg.det_name, cat, cfg.split)  # pointrcnn_Car_val
    det_root = os.path.join(file_dir_path, cfg.input_path, result_sha)  # './data/KITTI/detection/pointrcnn_Car_val'

    subfolder, _, hw, seq_eval, data_root = get_subfolder_seq(cfg.dataset, cfg.split, cfg.split_data_path)

    trk_root = os.path.join(data_root, 'tracking')  # 'data/V2X-Seq-SPD-KITTI/tracking'

    save_dir = os.path.join(file_dir_path, cfg.output_path, result_sha + '_H%d' % cfg.num_hypo)
    mkdir_if_missing(save_dir)

    # create eval dir for each hypothesis
    eval_dir_dict = dict()
    for index in range(cfg.num_hypo):
        eval_dir_dict[index] = os.path.join(save_dir, 'data_%d' % index)  # {0: './results/KITTI/pointrcnn_Car_val_H1/data_0'}
        mkdir_if_missing(eval_dir_dict[index])

    # loop every sequence
    seq_count = 0
    total_time, total_frames = 0.0, 0
    for seq_name in seq_eval:
        # print('cur seg name is : ',seq_name)
        seq_file = os.path.join(det_root, seq_name + '.txt')  # ./data/KITTI/detection/pointrcnn_Car_val/0000.txt
        seq_dets, flag = load_detection(seq_file,cat)  # load detection N x 25
        if not flag:
            continue  # no detection

        # create folders for saving
        eval_file_dict, save_trk_dir, affinity_dir, affinity_vis = \
            get_saving_dir(eval_dir_dict, seq_name, save_dir, cfg.num_hypo)

        # initialize tracker
        tracker, frame_list = initialize(cfg, trk_root, seq_dets, subfolder, seq_name, cat, ID_start, log)
        frame_list.sort()

        # loop over frame
        min_frame, max_frame = frame_list[0], frame_list[-1]
        for frame in frame_list:
            # add an additional frame here to deal with the case that the last frame, although no detection
            # but should output an N x 0 affinity for consistency

            # logging
            print_str = 'processing %s %s: %d/%d, %s/%s   \r' % (result_sha, seq_name, seq_count, len(seq_eval), frame, max_frame)
            sys.stdout.write(print_str)
            sys.stdout.flush()

            # tracking by detection
            dets_frame = get_frame_det(seq_dets, frame)
            since = time.time()
            results, affi = tracker.track(dets_frame, frame, seq_name)
            total_time += time.time() - since

            # saving affinity matrix, between the past frame and current frame
            # e.g., for 000006.npy, it means affinity between frame 5 and 6
            # note that the saved value in affinity can be different in reality because it is between the
            # original detections and ego-motion compensated predicted tracklets, rather than between the
            # actual two sets of output tracklets
            save_affi_file = os.path.join(affinity_dir, '%06d.npy' % frame)
            save_affi_vis = os.path.join(affinity_vis, '%06d.txt' % frame)
            if (affi is not None) and (affi.shape[0] + affi.shape[1] > 0):
                # save affinity as long as there are tracklets in at least one frame
                np.save(save_affi_file, affi)

                # cannot save for visualization unless both two frames have tracklets
                if affi.shape[0] > 0 and affi.shape[1] > 0:
                    save_affinity(affi, save_affi_vis)

            # saving trajectories, loop over each hypothesis
            for hypo in range(cfg.num_hypo):
                save_trk_file = os.path.join(save_trk_dir[hypo], '%06d.txt' % frame)
                save_trk_file = open(save_trk_file, 'w')
                for result_tmp in results[hypo]:  # N x 15
                    save_results(result_tmp, save_trk_file, eval_file_dict[hypo], frame, cfg.score_threshold)
                save_trk_file.close()

            total_frames += 1
        seq_count += 1

        for index in range(cfg.num_hypo):
            eval_file_dict[index].close()
            ID_start = max(ID_start, tracker.ID_count[index])

    print_log('%s, %25s: %4.f seconds for %5d frames or %6.1f FPS, metric is %s = %.2f' % (
        cfg.dataset, result_sha, total_time, total_frames, total_frames / total_time, tracker.metric, tracker.thres), log=log)

    return ID_start


def tracking(args):
    # load config files
    config_path = 'configs/%s.yml' % args.dataset
    config_path = os.path.join(file_path,config_path)
    cfg, settings_show = Config(config_path)

    # overwrite split and detection method
    if args.split:
        cfg.split = args.split
    if args.det_name:
        cfg.det_name = args.det_name
    cfg.split_data_path = os.path.join(file_dir_path, args.split_data_path)
    cfg.input_path = os.path.join(file_dir_path, args.input_path)
    cfg.output_path = os.path.join(file_dir_path, args.output_path)

    print('split_data_path: ',cfg.split_data_path)
    
    cat = args.cat

    # print configs    
    time_str = get_timestring()
    log = os.path.join(cfg.output_path, 'log/log_%s_%s_%s.txt' % (time_str, cfg.dataset, cfg.split))
    mkdir_if_missing(log)
    
    log = open(log, 'w')
    for idx, data in enumerate(settings_show):
        print_log(data, log, display=False)

    # global ID counter used for all categories, not start from 1 for each category to prevent different
    # categories of objects have the same ID. This allows visualization of all object categories together
    # without ID conflicting, Also use 1 (not 0) as start because MOT benchmark requires positive ID
    ID_start = 1

    # run tracking 
    ID_start = main_per_cat(cfg, cat, log, ID_start)

    # combine results for every category
    print_log('\ncombining results......', log=log)
    combine_trk_cat(cfg.split, cfg.dataset, cfg.det_name, 'H%d' % cfg.num_hypo, cfg.num_hypo,cfg.split_data_path,cfg.output_path)
    print_log('\nDone!', log=log)
    log.close()


if __name__ == '__main__':
    args = parse_args()
    tracking(args)






#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-

# Documentation is intended to be processed by Epydoc.

"""
Introduction
============

The Munkres module provides an implementation of the Munkres algorithm
(also called the Hungarian algorithm or the Kuhn-Munkres algorithm),
useful for solving the Assignment Problem.

Assignment Problem
==================

Let *C* be an *n*\ x\ *n* matrix representing the costs of each of *n* workers
to perform any of *n* jobs. The assignment problem is to assign jobs to
workers in a way that minimizes the total cost. Since each worker can perform
only one job and each job can be assigned to only one worker the assignments
represent an independent set of the matrix *C*.

One way to generate the optimal set is to create all permutations of
the indexes necessary to traverse the matrix so that no row and column
are used more than once. For instance, given this matrix (expressed in
Python)::

    matrix = [[5, 9, 1],
              [10, 3, 2],
              [8, 7, 4]]

You could use this code to generate the traversal indexes::

    def permute(a, results):
        if len(a) == 1:
            results.insert(len(results), a)

        else:
            for i in range(0, len(a)):
                element = a[i]
                a_copy = [a[j] for j in range(0, len(a)) if j != i]
                subresults = []
                permute(a_copy, subresults)
                for subresult in subresults:
                    result = [element] + subresult
                    results.insert(len(results), result)

    results = []
    permute(range(len(matrix)), results) # [0, 1, 2] for a 3x3 matrix

After the call to permute(), the results matrix would look like this::

    [[0, 1, 2],
     [0, 2, 1],
     [1, 0, 2],
     [1, 2, 0],
     [2, 0, 1],
     [2, 1, 0]]

You could then use that index matrix to loop over the original cost matrix
and calculate the smallest cost of the combinations::

    n = len(matrix)
    minval = sys.maxint
    for row in range(n):
        cost = 0
        for col in range(n):
            cost += matrix[row][col]
        minval = min(cost, minval)

    print minval

While this approach works fine for small matrices, it does not scale. It
executes in O(*n*!) time: Calculating the permutations for an *n*\ x\ *n*
matrix requires *n*! operations. For a 12x12 matrix, that's 479,001,600
traversals. Even if you could manage to perform each traversal in just one
millisecond, it would still take more than 133 hours to perform the entire
traversal. A 20x20 matrix would take 2,432,902,008,176,640,000 operations. At
an optimistic millisecond per operation, that's more than 77 million years.

The Munkres algorithm runs in O(*n*\ ^3) time, rather than O(*n*!). This
package provides an implementation of that algorithm.

This version is based on
http://www.public.iastate.edu/~ddoty/HungarianAlgorithm.html.

This version was written for Python by Brian Clapper from the (Ada) algorithm
at the above web site. (The ``Algorithm::Munkres`` Perl version, in CPAN, was
clearly adapted from the same web site.)

Usage
=====

Construct a Munkres object::

    from munkres import Munkres

    m = Munkres()

Then use it to compute the lowest cost assignment from a cost matrix. Here's
a sample program::

    from munkres import Munkres, print_matrix

    matrix = [[5, 9, 1],
              [10, 3, 2],
              [8, 7, 4]]
    m = Munkres()
    indexes = m.compute(matrix)
    print_matrix(matrix, msg='Lowest cost through this matrix:')
    total = 0
    for row, column in indexes:
        value = matrix[row][column]
        total += value
        print '(%d, %d) -> %d' % (row, column, value)
    print 'total cost: %d' % total

Running that program produces::

    Lowest cost through this matrix:
    [5, 9, 1]
    [10, 3, 2]
    [8, 7, 4]
    (0, 0) -> 5
    (1, 1) -> 3
    (2, 2) -> 4
    total cost=12

The instantiated Munkres object can be used multiple times on different
matrices.

Non-square Cost Matrices
========================

The Munkres algorithm assumes that the cost matrix is square. However, it's
possible to use a rectangular matrix if you first pad it with 0 values to make
it square. This module automatically pads rectangular cost matrices to make
them square.

Notes:

- The module operates on a *copy* of the caller's matrix, so any padding will
  not be seen by the caller.
- The cost matrix must be rectangular or square. An irregular matrix will
  *not* work.

Calculating Profit, Rather than Cost
====================================

The cost matrix is just that: A cost matrix. The Munkres algorithm finds
the combination of elements (one from each row and column) that results in
the smallest cost. It's also possible to use the algorithm to maximize
profit. To do that, however, you have to convert your profit matrix to a
cost matrix. The simplest way to do that is to subtract all elements from a
large value. For example::

    from munkres import Munkres, print_matrix

    matrix = [[5, 9, 1],
              [10, 3, 2],
              [8, 7, 4]]
    cost_matrix = []
    for row in matrix:
        cost_row = []
        for col in row:
            cost_row += [sys.maxint - col]
        cost_matrix += [cost_row]

    m = Munkres()
    indexes = m.compute(cost_matrix)
    print_matrix(matrix, msg='Highest profit through this matrix:')
    total = 0
    for row, column in indexes:
        value = matrix[row][column]
        total += value
        print '(%d, %d) -> %d' % (row, column, value)

    print 'total profit=%d' % total

Running that program produces::

    Highest profit through this matrix:
    [5, 9, 1]
    [10, 3, 2]
    [8, 7, 4]
    (0, 1) -> 9
    (1, 0) -> 10
    (2, 2) -> 4
    total profit=23

The ``munkres`` module provides a convenience method for creating a cost
matrix from a profit matrix. Since it doesn't know whether the matrix contains
floating point numbers, decimals, or integers, you have to provide the
conversion function; but the convenience method takes care of the actual
creation of the cost matrix::

    import munkres

    cost_matrix = munkres.make_cost_matrix(matrix,
                                           lambda cost: sys.maxint - cost)

So, the above profit-calculation program can be recast as::

    from munkres import Munkres, print_matrix, make_cost_matrix

    matrix = [[5, 9, 1],
              [10, 3, 2],
              [8, 7, 4]]
    cost_matrix = make_cost_matrix(matrix, lambda cost: sys.maxint - cost)
    m = Munkres()
    indexes = m.compute(cost_matrix)
    print_matrix(matrix, msg='Lowest cost through this matrix:')
    total = 0
    for row, column in indexes:
        value = matrix[row][column]
        total += value
        print '(%d, %d) -> %d' % (row, column, value)
    print 'total profit=%d' % total

References
==========

1. http://www.public.iastate.edu/~ddoty/HungarianAlgorithm.html

2. Harold W. Kuhn. The Hungarian Method for the assignment problem.
   *Naval Research Logistics Quarterly*, 2:83-97, 1955.

3. Harold W. Kuhn. Variants of the Hungarian method for assignment
   problems. *Naval Research Logistics Quarterly*, 3: 253-258, 1956.

4. Munkres, J. Algorithms for the Assignment and Transportation Problems.
   *Journal of the Society of Industrial and Applied Mathematics*,
   5(1):32-38, March, 1957.

5. http://en.wikipedia.org/wiki/Hungarian_algorithm

Copyright and License
=====================

This software is released under a BSD license, adapted from
<http://opensource.org/licenses/bsd-license.php>

Copyright (c) 2008 Brian M. Clapper
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name "clapper.org" nor the names of its contributors may be
  used to endorse or promote products derived from this software without
  specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
"""

__docformat__ = 'restructuredtext'

# ---------------------------------------------------------------------------
# Imports
# ---------------------------------------------------------------------------

import copy, sys

# ---------------------------------------------------------------------------
# Exports
# ---------------------------------------------------------------------------

__all__     = ['Munkres', 'make_cost_matrix']

# ---------------------------------------------------------------------------
# Globals
# ---------------------------------------------------------------------------

# Info about the module
__version__   = "1.0.5.4"
__author__    = "Brian Clapper, bmc@clapper.org"
__url__       = "http://bmc.github.com/munkres/"
__copyright__ = "(c) 2008 Brian M. Clapper"
__license__   = "BSD-style license"

# ---------------------------------------------------------------------------
# Classes
# ---------------------------------------------------------------------------

class Munkres:
    """
    Calculate the Munkres solution to the classical assignment problem.
    See the module documentation for usage.
    """

    def __init__(self):
        """Create a new instance"""
        self.C = None
        self.row_covered = []
        self.col_covered = []
        self.n = 0
        self.Z0_r = 0
        self.Z0_c = 0
        self.marked = None
        self.path = None

    def make_cost_matrix(profit_matrix, inversion_function):
        """
        **DEPRECATED**

        Please use the module function ``make_cost_matrix()``.
        """
        import munkres
        return munkres.make_cost_matrix(profit_matrix, inversion_function)

    make_cost_matrix = staticmethod(make_cost_matrix)

    def pad_matrix(self, matrix, pad_value=0):
        """
        Pad a possibly non-square matrix to make it square.

        :Parameters:
            matrix : list of lists
                matrix to pad

            pad_value : int
                value to use to pad the matrix

        :rtype: list of lists
        :return: a new, possibly padded, matrix
        """
        max_columns = 0
        total_rows = len(matrix)

        for row in matrix:
            max_columns = max(max_columns, len(row))

        total_rows = max(max_columns, total_rows)

        new_matrix = []
        for row in matrix:
            row_len = len(row)
            new_row = row[:]
            if total_rows > row_len:
                # Row too short. Pad it.
                new_row += [0] * (total_rows - row_len)
            new_matrix += [new_row]

        while len(new_matrix) < total_rows:
            new_matrix += [[0] * total_rows]

        return new_matrix

    def compute(self, cost_matrix):
        """
        Compute the indexes for the lowest-cost pairings between rows and
        columns in the database. Returns a list of (row, column) tuples
        that can be used to traverse the matrix.

        :Parameters:
            cost_matrix : list of lists
                The cost matrix. If this cost matrix is not square, it
                will be padded with zeros, via a call to ``pad_matrix()``.
                (This method does *not* modify the caller's matrix. It
                operates on a copy of the matrix.)

                **WARNING**: This code handles square and rectangular
                matrices. It does *not* handle irregular matrices.

        :rtype: list
        :return: A list of ``(row, column)`` tuples that describe the lowest
                 cost path through the matrix

        """
        self.C = self.pad_matrix(cost_matrix)
        self.n = len(self.C)
        self.original_length = len(cost_matrix)
        self.original_width = len(cost_matrix[0])
        self.row_covered = [False for i in range(self.n)]
        self.col_covered = [False for i in range(self.n)]
        self.Z0_r = 0
        self.Z0_c = 0
        self.path = self.__make_matrix(self.n * 2, 0)
        self.marked = self.__make_matrix(self.n, 0)

        done = False
        step = 1

        steps = { 1 : self.__step1,
                  2 : self.__step2,
                  3 : self.__step3,
                  4 : self.__step4,
                  5 : self.__step5,
                  6 : self.__step6 }

        while not done:
            try:
                func = steps[step]
                step = func()
            except KeyError:
                done = True

        # Look for the starred columns
        results = []
        for i in range(self.original_length):
            for j in range(self.original_width):
                if self.marked[i][j] == 1:
                    results += [(i, j)]

        return results

    def __copy_matrix(self, matrix):
        """Return an exact copy of the supplied matrix"""
        return copy.deepcopy(matrix)

    def __make_matrix(self, n, val):
        """Create an *n*x*n* matrix, populating it with the specific value."""
        matrix = []
        for i in range(n):
            matrix += [[val for j in range(n)]]
        return matrix

    def __step1(self):
        """
        For each row of the matrix, find the smallest element and
        subtract it from every element in its row. Go to Step 2.
        """
        C = self.C
        n = self.n
        for i in range(n):
            minval = min(self.C[i])
            # Find the minimum value for this row and subtract that minimum
            # from every element in the row.
            for j in range(n):
                self.C[i][j] -= minval

        return 2

    def __step2(self):
        """
        Find a zero (Z) in the resulting matrix. If there is no starred
        zero in its row or column, star Z. Repeat for each element in the
        matrix. Go to Step 3.
        """
        n = self.n
        for i in range(n):
            for j in range(n):
                if (self.C[i][j] == 0) and \
                   (not self.col_covered[j]) and \
                   (not self.row_covered[i]):
                    self.marked[i][j] = 1
                    self.col_covered[j] = True
                    self.row_covered[i] = True

        self.__clear_covers()
        return 3

    def __step3(self):
        """
        Cover each column containing a starred zero. If K columns are
        covered, the starred zeros describe a complete set of unique
        assignments. In this case, Go to DONE, otherwise, Go to Step 4.
        """
        n = self.n
        count = 0
        for i in range(n):
            for j in range(n):
                if self.marked[i][j] == 1:
                    self.col_covered[j] = True
                    count += 1

        if count >= n:
            step = 7 # done
        else:
            step = 4

        return step

    def __step4(self):
        """
        Find a noncovered zero and prime it. If there is no starred zero
        in the row containing this primed zero, Go to Step 5. Otherwise,
        cover this row and uncover the column containing the starred
        zero. Continue in this manner until there are no uncovered zeros
        left. Save the smallest uncovered value and Go to Step 6.
        """
        step = 0
        done = False
        row = -1
        col = -1
        star_col = -1
        while not done:
            (row, col) = self.__find_a_zero()
            if row < 0:
                done = True
                step = 6
            else:
                self.marked[row][col] = 2
                star_col = self.__find_star_in_row(row)
                if star_col >= 0:
                    col = star_col
                    self.row_covered[row] = True
                    self.col_covered[col] = False
                else:
                    done = True
                    self.Z0_r = row
                    self.Z0_c = col
                    step = 5

        return step

    def __step5(self):
        """
        Construct a series of alternating primed and starred zeros as
        follows. Let Z0 represent the uncovered primed zero found in Step 4.
        Let Z1 denote the starred zero in the column of Z0 (if any).
        Let Z2 denote the primed zero in the row of Z1 (there will always
        be one). Continue until the series terminates at a primed zero
        that has no starred zero in its column. Unstar each starred zero
        of the series, star each primed zero of the series, erase all
        primes and uncover every line in the matrix. Return to Step 3
        """
        count = 0
        path = self.path
        path[count][0] = self.Z0_r
        path[count][1] = self.Z0_c
        done = False
        while not done:
            row = self.__find_star_in_col(path[count][1])
            if row >= 0:
                count += 1
                path[count][0] = row
                path[count][1] = path[count-1][1]
            else:
                done = True

            if not done:
                col = self.__find_prime_in_row(path[count][0])
                count += 1
                path[count][0] = path[count-1][0]
                path[count][1] = col

        self.__convert_path(path, count)
        self.__clear_covers()
        self.__erase_primes()
        return 3

    def __step6(self):
        """
        Add the value found in Step 4 to every element of each covered
        row, and subtract it from every element of each uncovered column.
        Return to Step 4 without altering any stars, primes, or covered
        lines.
        """
        minval = self.__find_smallest()
        for i in range(self.n):
            for j in range(self.n):
                if self.row_covered[i]:
                    self.C[i][j] += minval
                if not self.col_covered[j]:
                    self.C[i][j] -= minval
        return 4

    def __find_smallest(self):
        """Find the smallest uncovered value in the matrix."""
        try:
            minval = sys.maxint
        except AttributeError:
            minval = sys.maxsize
        for i in range(self.n):
            for j in range(self.n):
                if (not self.row_covered[i]) and (not self.col_covered[j]):
                    if minval > self.C[i][j]:
                        minval = self.C[i][j]
        return minval

    def __find_a_zero(self):
        """Find the first uncovered element with value 0"""
        row = -1
        col = -1
        i = 0
        n = self.n
        done = False

        while not done:
            j = 0
            while True:
                if (self.C[i][j] == 0) and \
                   (not self.row_covered[i]) and \
                   (not self.col_covered[j]):
                    row = i
                    col = j
                    done = True
                j += 1
                if j >= n:
                    break
            i += 1
            if i >= n:
                done = True

        return (row, col)

    def __find_star_in_row(self, row):
        """
        Find the first starred element in the specified row. Returns
        the column index, or -1 if no starred element was found.
        """
        col = -1
        for j in range(self.n):
            if self.marked[row][j] == 1:
                col = j
                break

        return col

    def __find_star_in_col(self, col):
        """
        Find the first starred element in the specified row. Returns
        the row index, or -1 if no starred element was found.
        """
        row = -1
        for i in range(self.n):
            if self.marked[i][col] == 1:
                row = i
                break

        return row

    def __find_prime_in_row(self, row):
        """
        Find the first prime element in the specified row. Returns
        the column index, or -1 if no starred element was found.
        """
        col = -1
        for j in range(self.n):
            if self.marked[row][j] == 2:
                col = j
                break

        return col

    def __convert_path(self, path, count):
        for i in range(count+1):
            if self.marked[path[i][0]][path[i][1]] == 1:
                self.marked[path[i][0]][path[i][1]] = 0
            else:
                self.marked[path[i][0]][path[i][1]] = 1

    def __clear_covers(self):
        """Clear all covered matrix cells"""
        for i in range(self.n):
            self.row_covered[i] = False
            self.col_covered[i] = False

    def __erase_primes(self):
        """Erase all prime markings"""
        for i in range(self.n):
            for j in range(self.n):
                if self.marked[i][j] == 2:
                    self.marked[i][j] = 0

# ---------------------------------------------------------------------------
# Functions
# ---------------------------------------------------------------------------

def make_cost_matrix(profit_matrix, inversion_function):
    """
    Create a cost matrix from a profit matrix by calling
    'inversion_function' to invert each value. The inversion
    function must take one numeric argument (of any type) and return
    another numeric argument which is presumed to be the cost inverse
    of the original profit.

    This is a static method. Call it like this:

    .. python::

        cost_matrix = Munkres.make_cost_matrix(matrix, inversion_func)

    For example:

    .. python::

        cost_matrix = Munkres.make_cost_matrix(matrix, lambda x : sys.maxint - x)

    :Parameters:
        profit_matrix : list of lists
            The matrix to convert from a profit to a cost matrix

        inversion_function : function
            The function to use to invert each entry in the profit matrix

    :rtype: list of lists
    :return: The converted matrix
    """
    cost_matrix = []
    for row in profit_matrix:
        cost_matrix.append([inversion_function(value) for value in row])
    return cost_matrix

def print_matrix(matrix, msg=None):
    """
    Convenience function: Displays the contents of a matrix of integers.

    :Parameters:
        matrix : list of lists
            Matrix to print

        msg : str
            Optional message to print before displaying the matrix
    """
    import math

    if msg is not None:
        print(msg)

    # Calculate the appropriate format width.
    width = 0
    for row in matrix:
        for val in row:
            width = max(width, int(math.log10(val)) + 1)

    # Make the format string
    format = '%%%dd' % width

    # Print the matrix
    for row in matrix:
        sep = '['
        for val in row:
            sys.stdout.write(sep + format % val)
            sep = ', '
        sys.stdout.write(']\n')

# ---------------------------------------------------------------------------
# Main
# ---------------------------------------------------------------------------

if __name__ == '__main__':


    matrices = [
                # Square
                ([[400, 150, 400],
                  [400, 450, 600],
                  [300, 225, 300]],
                 850 # expected cost
                ),

                # Rectangular variant
                ([[400, 150, 400, 1],
                  [400, 450, 600, 2],
                  [300, 225, 300, 3]],
                 452 # expected cost
                ),

                # Square
                ([[10, 10,  8],
                  [ 9,  8,  1],
                  [ 9,  7,  4]],
                 18
                ),

                # Rectangular variant
                ([[10, 10,  8, 11],
                  [ 9,  8,  1, 1],
                  [ 9,  7,  4, 10]],
                 15
                ),
               ]

    m = Munkres()
    for cost_matrix, expected_total in matrices:
        print_matrix(cost_matrix, msg='cost matrix')
        indexes = m.compute(cost_matrix)
        total_cost = 0
        for r, c in indexes:
            x = cost_matrix[r][c]
            total_cost += x
            print('(%d, %d) -> %d' % (r, c, x))
        print('lowest cost=%d' % total_cost)
        assert expected_total == total_cost



class Mail:
    """ Dummy class to print messages without sending e-mails"""
    def __init__(self,mailaddress):
        pass
    def msg(self,msg):
        print(msg)
    def finalize(self,success,benchmark,sha_key,mailaddress=None):
        if success:
            print("Results for %s (benchmark: %s) sucessfully created" % (benchmark,sha_key))
        else:
            print("Creating results for %s (benchmark: %s) failed" % (benchmark,sha_key))



#!/usr/bin/env python
# encoding: utf-8

from __future__ import print_function
import matplotlib; matplotlib.use('Agg')
import sys, os, copy, math, numpy as np, matplotlib.pyplot as plt
from munkres import Munkres
from collections import defaultdict

from . import mailpy
from AB3DMOT_plugin.AB3DMOT_libs.dist_metrics import iou

num_sample_pts = 41.0

class tData:
    """
        Utility class to load data.
    """
    def __init__(self,frame=-1,obj_type="unset",truncation=-1,occlusion=-1,\
                 obs_angle=-10,x1=-1,y1=-1,x2=-1,y2=-1,w=-1,h=-1,l=-1,\
                 x=-1000,y=-1000,z=-1000,ry=-10,score=-1000,track_id=-1):
        """
            Constructor, initializes the object given the parameters.
        """
        
        # init object data
        self.frame      = frame
        self.track_id   = track_id
        self.obj_type   = obj_type
        self.truncation = truncation
        self.occlusion  = occlusion
        self.obs_angle  = obs_angle
        self.x1         = x1
        self.y1         = y1
        self.x2         = x2
        self.y2         = y2
        self.w          = w
        self.h          = h
        self.l          = l
        self.x          = x
        self.y          = y
        self.z          = z
        self.ry         = ry
        self.score      = score
        self.ignored    = False
        self.valid      = False
        self.tracker    = -1

    def __str__(self):
        """
            Print read data.
        """
        
        attrs = vars(self)
        return '\n'.join("%s: %s" % item for item in attrs.items())

def boxoverlap(a, b, criterion="union"):
    """
        boxoverlap computes intersection over union for bbox a and b in KITTI format.
        If the criterion is 'union', overlap = (a inter b) / a union b).
        If the criterion is 'a', overlap = (a inter b) / a, where b should be a dontcare area.
        note that this is different from the iou in dist_metrics.py because this one uses 2D 
        box rather than projected 3D boxes to compute overlap
    """
    
    x1 = max(a.x1, b.x1)
    y1 = max(a.y1, b.y1)
    x2 = min(a.x2, b.x2)
    y2 = min(a.y2, b.y2)

    w = x2-x1
    h = y2-y1

    if w<=0. or h<=0.:
        return 0.
    inter = w*h
    aarea = (a.x2-a.x1) * (a.y2-a.y1)
    barea = (b.x2-b.x1) * (b.y2-b.y1)

    # intersection over union overlap
    if criterion.lower()=="union":
        o = inter / float(aarea+barea-inter)
    elif criterion.lower()=="a":
        o = float(inter) / float(aarea)
    else:
        raise TypeError("Unkown type for criterion")
    return o

class trackingEvaluation(object):
    """ tracking statistics (CLEAR MOT, id-switches, fragments, ML/PT/MT, precision/recall)
             MOTA   - Multi-object tracking accuracy in [0,100]
             MOTP   - Multi-object tracking precision in [0,100] (3D) / [td,100] (2D)
             MOTAL  - Multi-object tracking accuracy in [0,100] with log10(id-switches)

             id-switches - number of id switches
             fragments   - number of fragmentations

             MT, PT, ML - number of mostly tracked, partially tracked and mostly lost trajectories

             recall         - recall = percentage of detected targets
             precision      - precision = percentage of correctly detected targets
             FAR            - number of false alarms per frame
             falsepositives - number of false positives (FP)
             missed         - number of missed targets (FN)
    """

    def __init__(self, t_sha, gt_path="AB3DMOT_plugin/scripts/KITTI", max_truncation = 0, min_height = 25, max_occlusion = 2, \
        mail=None, cls="car", eval_3diou=True, eval_2diou=False, num_hypo=1, thres=None):
        # get number of sequences and
        # get number of frames per sequence from test mapping
        # (created while extracting the benchmark)
        filename_test_mapping = os.path.join(gt_path, 'evaluate_tracking.seqmap.val')
        self.n_frames         = []
        self.sequence_name    = []
        with open(filename_test_mapping, "r") as fh:
            for i,l in enumerate(fh):
                fields = l.split(" ")
                self.sequence_name.append("%04d" % int(fields[0]))
                self.n_frames.append(int(fields[3]) - int(fields[2])+1)
        fh.close()
        self.n_sequences = i+1

        # mail object
        self.mail = mail

        # class to evaluate, i.e. pedestrian or car
        self.cls = cls

        # data and parameter
        self.gt_path           = os.path.join(gt_path, "label")
        self.t_sha             = t_sha
        self.t_path            = os.path.join("AB3DMOT_plugin/results/KITTI", t_sha, "data_%d" % (int(num_hypo)-1))
        
        # statistics and numbers for evaluation
        self.n_gt              = 0 # number of ground truth detections minus ignored false negatives and true positives
        self.n_igt             = 0 # number of ignored ground truth detections
        self.n_gts             = [] # number of ground truth detections minus ignored false negatives and true positives PER SEQUENCE
        self.n_igts            = [] # number of ground ignored truth detections PER SEQUENCE
        self.n_gt_trajectories = 0
        self.n_gt_seq          = []
        self.n_tr              = 0 # number of tracker detections minus ignored tracker detections
        self.n_trs             = [] # number of tracker detections minus ignored tracker detections PER SEQUENCE
        self.n_itr             = 0 # number of ignored tracker detections
        self.n_itrs            = [] # number of ignored tracker detections PER SEQUENCE
        self.n_igttr           = 0 # number of ignored ground truth detections where the corresponding associated tracker detection is also ignored
        self.n_tr_trajectories = 0
        self.n_tr_seq          = []
        self.MOTA              = 0
        self.MOTP              = 0
        self.MOTAL             = 0
        self.MODA              = 0
        self.MODP              = 0
        self.MODP_t            = []
        self.recall            = 0
        self.precision         = 0
        self.F1                = 0
        self.FAR               = 0
        self.total_cost        = 0
        self.itp               = 0 # number of ignored true positives
        self.itps              = [] # number of ignored true positives PER SEQUENCE
        self.tp                = 0 # number of true positives including ignored true positives!
        self.tps               = [] # number of true positives including ignored true positives PER SEQUENCE
        self.fn                = 0 # number of false negatives WITHOUT ignored false negatives
        self.fns               = [] # number of false negatives WITHOUT ignored false negatives PER SEQUENCE
        self.ifn               = 0 # number of ignored false negatives
        self.ifns              = [] # number of ignored false negatives PER SEQUENCE
        self.fp                = 0 # number of false positives
                                   # a bit tricky, the number of ignored false negatives and ignored true positives 
                                   # is subtracted, but if both tracker detection and ground truth detection
                                   # are ignored this number is added again to avoid double counting
        self.fps               = [] # above PER SEQUENCE
        self.mme               = 0
        self.fragments         = 0
        self.id_switches       = 0
        self.MT                = 0
        self.PT                = 0
        self.ML                = 0
        
        self.eval_2diou = eval_2diou
        self.eval_3diou = eval_3diou
        if thres is None:
            if eval_2diou: 
                self.min_overlap   = 0.5  # minimum bounding box overlap for 3rd party metrics
            elif eval_3diou: 
                self.min_overlap   = 0.25 # minimum bounding box overlap for 3rd party metrics
            else: assert False
        else:
            self.min_overlap = thres
        # print('min overlap creteria is %f' % self.min_overlap)

        self.max_truncation    = max_truncation # maximum truncation of an object for evaluation
        self.max_occlusion     = max_occlusion # maximum occlusion of an object for evaluation
        self.min_height        = min_height # minimum height of an object for evaluation
        self.n_sample_points   = 500
        
        # this should be enough to hold all groundtruth trajectories
        # is expanded if necessary and reduced in any case
        self.gt_trajectories            = [[] for x in range(self.n_sequences)]
        self.ign_trajectories           = [[] for x in range(self.n_sequences)]

    def loadGroundtruth(self):
        """
            Helper function to load ground truth.
        """
        
        try:
            self._loadData(self.gt_path, cls=self.cls, loading_groundtruth=True)
        except IOError:
            return False
        return True

    def loadTracker(self):
        """
            Helper function to load tracker data.
        """
        
        try:
            if not self._loadData(self.t_path, cls=self.cls, loading_groundtruth=False):
                return False
        except IOError:
            return False
        return True

    def _loadData(self, root_dir, cls, min_score=-1000, loading_groundtruth=False):
        """
            Generic loader for ground truth and tracking data.
            Use loadGroundtruth() or loadTracker() to load this data.
            Loads detections in KITTI format from textfiles.
        """
        # construct objectDetections object to hold detection data
        t_data  = tData()
        data    = []
        eval_2d = True
        eval_3d = True

        seq_data           = []
        n_trajectories     = 0
        n_trajectories_seq = []
        for seq, s_name in enumerate(self.sequence_name):
            i              = 0
            filename       = os.path.join(root_dir, "%s.txt" % s_name)
            f              = open(filename, "r")

            f_data         = [[] for x in range(self.n_frames[seq])] # current set has only 1059 entries, sufficient length is checked anyway
            ids            = []
            n_in_seq       = 0
            id_frame_cache = []
            for line in f:
                # KITTI tracking benchmark data format:
                # (frame,tracklet_id,objectType,truncation,occlusion,alpha,x1,y1,x2,y2,h,w,l,X,Y,Z,ry)
                line = line.strip()
                fields            = line.split(" ")
                # classes that should be loaded (ignored neighboring classes)
                if "car" in cls.lower():
                    classes = ["car","van","bus","truck"]
                elif "pedestrian" in cls.lower():
                    classes = ["pedestrian","person_sitting"]
                else:
                    classes = [cls.lower()]
                classes += ["dontcare"]
                if not any([s for s in classes if s in fields[2].lower()]):
                    continue
                # get fields from table
                t_data.frame        = int(float(fields[0]))     # frame
                t_data.track_id     = int(float(fields[1]))     # id
                t_data.obj_type     = fields[2].lower()         # object type [car, pedestrian, cyclist, ...]
                t_data.truncation   = int(float(fields[3]))     # truncation [-1,0,1,2]
                t_data.occlusion    = int(float(fields[4]))     # occlusion  [-1,0,1,2]
                t_data.obs_angle    = float(fields[5])          # observation angle [rad]
                t_data.x1           = float(fields[6])          # left   [px]
                t_data.y1           = float(fields[7])          # top    [px]
                t_data.x2           = float(fields[8])          # right  [px]
                t_data.y2           = float(fields[9])          # bottom [px]
                t_data.h            = float(fields[10])         # height [m]
                t_data.w            = float(fields[11])         # width  [m]
                t_data.l            = float(fields[12])         # length [m]
                t_data.x            = float(fields[13])         # X [m]
                t_data.y            = float(fields[14])         # Y [m]
                t_data.z            = float(fields[15])         # Z [m]
                t_data.ry           = float(fields[16])         # yaw angle [rad]
                t_data.corners_3d_cam = None
                if not loading_groundtruth:
                    if len(fields) == 17:
                        t_data.score = -1
                    elif len(fields) == 18:
                        t_data.score  = float(fields[17])     # detection score
                    else:
                        self.mail.msg("file is not in KITTI format")
                        return

                # do not consider objects marked as invalid
                if t_data.track_id == -1 and t_data.obj_type != "dontcare":
                    continue

                idx = t_data.frame
                # check if length for frame data is sufficient
                if idx >= len(f_data):
                    print("extend f_data", idx, len(f_data))
                    f_data += [[] for x in range(max(500, idx-len(f_data)))]
                try:
                    id_frame = (t_data.frame,t_data.track_id)
                    if id_frame in id_frame_cache and not loading_groundtruth:
                        self.mail.msg("track ids are not unique for sequence %d: frame %d" % (seq,t_data.frame))
                        self.mail.msg("track id %d occured at least twice for this frame" % t_data.track_id)
                        self.mail.msg("Exiting...")
                        #continue # this allows to evaluate non-unique result files
                        return False
                    id_frame_cache.append(id_frame)
                    f_data[t_data.frame].append(copy.copy(t_data))
                except:
                    print(len(f_data), idx)
                    raise

                if t_data.track_id not in ids and t_data.obj_type!="dontcare":
                    ids.append(t_data.track_id)
                    n_trajectories +=1
                    n_in_seq +=1

                # check if uploaded data provides information for 2D and 3D evaluation
                if not loading_groundtruth and eval_2d is True and(t_data.x1==-1 or t_data.x2==-1 or t_data.y1==-1 or t_data.y2==-1):
                    eval_2d = False
                if not loading_groundtruth and eval_3d is True and(t_data.x==-1000 or t_data.y==-1000 or t_data.z==-1000):
                    eval_3d = False

            # only add existing frames
            n_trajectories_seq.append(n_in_seq)
            seq_data.append(f_data)
            f.close()

        if not loading_groundtruth:
            self.tracker=seq_data
            self.n_tr_trajectories=n_trajectories
            self.eval_2d = eval_2d
            self.eval_3d = eval_3d
            self.n_tr_seq = n_trajectories_seq
            if self.n_tr_trajectories==0:
                return False
        else:
            # split ground truth and DontCare areas
            self.dcareas     = []
            self.groundtruth = []
            for seq_idx in range(len(seq_data)):
                seq_gt = seq_data[seq_idx]
                s_g, s_dc = [],[]
                for f in range(len(seq_gt)):
                    all_gt = seq_gt[f]
                    g,dc = [],[]
                    for gg in all_gt:
                        if gg.obj_type=="dontcare":
                            dc.append(gg)
                        else:
                            g.append(gg)
                    s_g.append(g)
                    s_dc.append(dc)
                self.dcareas.append(s_dc)
                self.groundtruth.append(s_g)
            self.n_gt_seq=n_trajectories_seq
            self.n_gt_trajectories=n_trajectories
        return True

    def getThresholds(self, scores, num_gt, num_sample_pts=num_sample_pts):
        # based on score of true positive to discretize the recall
        # not necessarily have data on all points due to not fully recall the results, all the results point has zero precision
        # compute the recall based on the gt positives

        # scores: the list of scores of the matched true positives

        scores = np.array(scores)
        scores.sort()
        scores = scores[::-1]
        current_recall = 0
        thresholds = []
        recalls = []
        for i, score in enumerate(scores):
            l_recall = (i + 1) / float(num_gt)
            if i < (len(scores) - 1):
                r_recall = (i + 2) / float(num_gt)
            else:
                r_recall = l_recall
            if (((r_recall - current_recall) < (current_recall - l_recall)) and (i < (len(scores) - 1))):
                continue

            thresholds.append(score)
            recalls.append(current_recall)
            current_recall += 1 / (num_sample_pts - 1.0)

        return thresholds[1:], recalls[1:]          # throw the first one with 0 recall

    def reset(self):
        self.n_gt              = 0 # number of ground truth detections minus ignored false negatives and true positives
        self.n_igt             = 0 # number of ignored ground truth detections
        self.n_tr              = 0 # number of tracker detections minus ignored tracker detections
        self.n_itr             = 0 # number of ignored tracker detections
        self.n_igttr           = 0 # number of ignored ground truth detections where the corresponding associated tracker detection is also ignored
        
        self.MOTA              = 0
        self.MOTP              = 0
        self.MOTAL             = 0
        self.MODA              = 0
        self.MODP              = 0
        self.MODP_t            = []

        self.recall            = 0
        self.precision         = 0
        self.F1                = 0
        self.FAR               = 0        

        self.total_cost = 0
        self.itp = 0
        self.tp = 0
        self.fn = 0
        self.ifn = 0
        self.fp = 0

        
        self.n_gts             = [] # number of ground truth detections minus ignored false negatives and true positives PER SEQUENCE
        self.n_igts            = [] # number of ground ignored truth detections PER SEQUENCE
        self.n_trs             = [] # number of tracker detections minus ignored tracker detections PER SEQUENCE
        self.n_itrs            = [] # number of ignored tracker detections PER SEQUENCE

        self.itps              = [] # number of ignored true positives PER SEQUENCE
        self.tps               = [] # number of true positives including ignored true positives PER SEQUENCE
        self.fns               = [] # number of false negatives WITHOUT ignored false negatives PER SEQUENCE
        self.ifns              = [] # number of ignored false negatives PER SEQUENCE
        self.fps               = [] # above PER SEQUENCE
        
        
        self.fragments         = 0
        self.id_switches       = 0
        self.MT                = 0
        self.PT                = 0
        self.ML                = 0
        
        self.gt_trajectories            = [[] for x in range(self.n_sequences)]
        self.ign_trajectories           = [[] for x in range(self.n_sequences)]

        return 

    def compute3rdPartyMetrics(self, threshold=-10000, recall_thres=1.0):
    # def compute3rdPartyMetrics(self, threshold=3):
        """
            Computes the metrics defined in
                - Stiefelhagen 2008: Evaluating Multiple Object Tracking Performance: The CLEAR MOT Metrics
                  MOTA, MOTAL, MOTP
                - Nevatia 2008: Global Data Association for Multi-Object Tracking Using Network Flows
                  MT/PT/ML
        """

        # construct Munkres object for Hungarian Method association
        hm = Munkres()
        max_cost = 1e9
        self.scores = list()

        # go through all frames and associate ground truth and tracker results
        # groundtruth and tracker contain lists for every single frame containing lists of KITTI format detections
        fr, ids = 0,0
        for seq_idx in range(len(self.groundtruth)):
            seq_gt                = self.groundtruth[seq_idx]
            seq_dc                = self.dcareas[seq_idx] # don't care areas
            seq_tracker_before    = self.tracker[seq_idx]

            # remove the tracks with low confidence for each frame
            tracker_id_score = dict()
            for frame in range(len(seq_tracker_before)):
                tracks_tmp = seq_tracker_before[frame]
                for index in range(len(tracks_tmp)):
                    trk_tmp = tracks_tmp[index]
                    id_tmp = trk_tmp.track_id
                    score_tmp = trk_tmp.score
            
                    if id_tmp not in tracker_id_score.keys():
                        tracker_id_score[id_tmp] = list()
                    tracker_id_score[id_tmp].append(score_tmp)

            id_average_score = dict()
            to_delete_id = list()
            for track_id, score_list in tracker_id_score.items():
                average_score = sum(score_list) / float(len(score_list))
                id_average_score[track_id] = average_score
                if average_score < threshold:
                    to_delete_id.append(track_id)
            
            seq_tracker = list()
            for frame in range(len(seq_tracker_before)):
                seq_tracker_frame = list()  
                tracks_tmp = seq_tracker_before[frame]
                for index in range(len(tracks_tmp)):
                    trk_tmp = tracks_tmp[index]
                    id_tmp = trk_tmp.track_id
                    average_score = id_average_score[id_tmp] 
                    trk_tmp.score = average_score
                    if id_tmp not in to_delete_id:
                        seq_tracker_frame.append(trk_tmp)
                seq_tracker.append(seq_tracker_frame)

            seq_trajectories      = defaultdict(list)
            seq_ignored           = defaultdict(list)
            
            # statistics over the current sequence, check the corresponding
            # variable comments in __init__ to get their meaning
            seqtp            = 0
            seqitp           = 0
            seqfn            = 0
            seqifn           = 0
            seqfp            = 0
            seqigt           = 0
            seqitr           = 0
            
            last_ids = [[],[]]
            
            n_gts = 0
            n_trs = 0
            
            for f in range(len(seq_gt)):        # go through each frame
                g = seq_gt[f]
                dc = seq_dc[f]

                t = seq_tracker[f]
                # counting total number of ground truth and tracker objects
                self.n_gt += len(g)
                self.n_tr += len(t)
                
                n_gts += len(g)
                n_trs += len(t)
                
                # use hungarian method to associate, using box overlap 0..1 as cost
                # build cost matrix
                # row is gt, column is det
                cost_matrix = []
                this_ids = [[],[]]
                for gg in g:
                    # save current ids
                    this_ids[0].append(gg.track_id)
                    this_ids[1].append(-1)
                    gg.tracker       = -1
                    gg.id_switch     = 0
                    gg.fragmentation = 0
                    cost_row         = []
                    for tt in t:
                        if self.eval_2diou:
                            c = 1 - boxoverlap(gg, tt)
                        elif self.eval_3diou:
                            c = 1 - iou(gg, tt, metric='iou_3d')
                        else:
                            assert False, 'error'

                        # gating for box overlap
                        if c <= 1 - self.min_overlap:
                            cost_row.append(c)
                        else:
                            cost_row.append(max_cost) # = 1e9
                    cost_matrix.append(cost_row)
                    # all ground truth trajectories are initially not associated
                    # extend groundtruth trajectories lists (merge lists)
                    seq_trajectories[gg.track_id].append(-1)
                    seq_ignored[gg.track_id].append(False)

                if len(g) == 0:
                    cost_matrix=[[]]
                # associate
                association_matrix = hm.compute(cost_matrix)

                # tmp variables for sanity checks and MODP computation
                tmptp = 0
                tmpfp = 0
                tmpfn = 0
                tmpc  = 0 # this will sum up the overlaps for all true positives
                tmpcs = [0]*len(g) # this will save the overlaps for all true positives
                                   # the reason is that some true positives might be ignored
                                   # later such that the corrsponding overlaps can
                                   # be subtracted from tmpc for MODP computation
                
                # mapping for tracker ids and ground truth ids
                for row,col in association_matrix:
                    # apply gating on box overlap
                    c = cost_matrix[row][col]
                    if c < max_cost:
                        g[row].tracker   = t[col].track_id
                        this_ids[1][row] = t[col].track_id
                        t[col].valid     = True
                        g[row].distance  = c
                        self.total_cost += 1-c
                        tmpc            += 1-c
                        tmpcs[row]      = 1-c
                        seq_trajectories[g[row].track_id][-1] = t[col].track_id

                        # true positives are only valid associations
                        self.tp += 1
                        tmptp   += 1
                        self.scores.append(t[col].score)

                    else:
                        g[row].tracker = -1
                        self.fn       += 1
                        tmpfn         += 1
                
                # associate tracker and DontCare areas
                # ignore tracker in neighboring classes
                nignoredtracker = 0 # number of ignored tracker detections
                ignoredtrackers = dict() # will associate the track_id with -1
                                         # if it is not ignored and 1 if it is
                                         # ignored;
                                         # this is used to avoid double counting ignored
                                         # cases, see the next loop
                
                for tt in t:
                    ignoredtrackers[tt.track_id] = -1
                    # ignore detection if it belongs to a neighboring class or is
                    # smaller or equal to the minimum height
                    
                    tt_height = abs(tt.y1 - tt.y2)
                    if ((self.cls=="car" and tt.obj_type=="van") or (self.cls=="pedestrian" and tt.obj_type=="person_sitting") or tt_height<=self.min_height) and not tt.valid:
                        nignoredtracker+= 1
                        tt.ignored      = True
                        ignoredtrackers[tt.track_id] = 1
                        continue
                    for d in dc:
                        # as KITTI does not provide ground truth 3D box for DontCare objects, we have to use
                        # 2D IoU here and a threshold of 0.5 for 2D IoU. 
                        overlap = boxoverlap(tt, d, "a")
                        if overlap > 0.5 and not tt.valid:
                            tt.ignored      = True
                            nignoredtracker += 1
                            ignoredtrackers[tt.track_id] = 1
                            break

                # check for ignored FN/TP (truncation or neighboring object class)
                ignoredfn  = 0 # the number of ignored false negatives
                nignoredtp = 0 # the number of ignored true positives
                nignoredpairs = 0 # the number of ignored pairs, i.e. a true positive
                                  # which is ignored but where the associated tracker
                                  # detection has already been ignored
                                  
                gi = 0
                for gg in g:
                    if gg.tracker < 0:
                        if gg.occlusion>self.max_occlusion or gg.truncation>self.max_truncation\
                                or (self.cls=="car" and gg.obj_type=="van") or (self.cls=="pedestrian" and gg.obj_type=="person_sitting"):
                            seq_ignored[gg.track_id][-1] = True                              
                            gg.ignored = True
                            ignoredfn += 1
                            
                    elif gg.tracker>=0:
                        if gg.occlusion>self.max_occlusion or gg.truncation>self.max_truncation\
                                or (self.cls=="car" and gg.obj_type=="van") or (self.cls=="pedestrian" and gg.obj_type=="person_sitting"):
                            
                            seq_ignored[gg.track_id][-1] = True
                            gg.ignored = True
                            nignoredtp += 1
                            
                            # if the associated tracker detection is already ignored,
                            # we want to avoid double counting ignored detections
                            if ignoredtrackers[gg.tracker] > 0:
                                nignoredpairs += 1
                            
                            # for computing MODP, the overlaps from ignored detections
                            # are subtracted
                            tmpc -= tmpcs[gi]
                    gi += 1
                
                # the below might be confusion, check the comments in __init__
                # to see what the individual statistics represent
                
                # nignoredtp is already associated, but should ignored
                # ignoredfn is already missed, but should ignored

                # correct TP by number of ignored TP due to truncation
                # ignored TP are shown as tracked in visualization
                tmptp -= nignoredtp
                
                # count the number of ignored true positives
                self.itp += nignoredtp
                
                # adjust the number of ground truth objects considered
                # self.n_gt_adjusted = self.n_gt
                self.n_gt -= (ignoredfn + nignoredtp)
                
                # count the number of ignored ground truth objects
                self.n_igt += ignoredfn + nignoredtp
                
                # count the number of ignored tracker objects
                self.n_itr += nignoredtracker
                
                # count the number of ignored pairs, i.e. associated tracker and
                # ground truth objects that are both ignored
                self.n_igttr += nignoredpairs
                
                # false negatives = associated gt bboxes exceding association threshold + non-associated gt bboxes
                # 

                # explanation of fn
                # the original fn is in the matched gt where the score is not high enough
                # len(g) - len(association amtrix), means that some gt is not matched in hungarian
                # further - ignoredfn, means that some gt can be ignored

                tmpfn   += len(g)-len(association_matrix)-ignoredfn
                self.fn += len(g)-len(association_matrix)-ignoredfn
                # self.fn += len(g)-len(association_matrix)
                self.ifn += ignoredfn
                
                # false positives = tracker bboxes - associated tracker bboxes
                # mismatches (mme_t)
                tmpfp   += len(t) - tmptp - nignoredtracker - nignoredtp + nignoredpairs
                self.fp += len(t) - tmptp - nignoredtracker - nignoredtp + nignoredpairs
                #tmpfp   = len(t) - tmptp - nignoredtp # == len(t) - (tp - ignoredtp) - ignoredtp
                #self.fp += len(t) - tmptp - nignoredtp

                # update sequence data
                seqtp += tmptp
                seqitp += nignoredtp
                seqfp += tmpfp
                seqfn += tmpfn
                seqifn += ignoredfn
                seqigt += ignoredfn + nignoredtp
                seqitr += nignoredtracker
                
                # sanity checks
                # - the number of true positives minues ignored true positives
                #   should be greater or equal to 0
                # - the number of false negatives should be greater or equal to 0
                # - the number of false positives needs to be greater or equal to 0
                #   otherwise ignored detections might be counted double
                # - the number of counted true positives (plus ignored ones)
                #   and the number of counted false negatives (plus ignored ones)
                #   should match the total number of ground truth objects
                # - the number of counted true positives (plus ignored ones)
                #   and the number of counted false positives
                #   plus the number of ignored tracker detections should
                #   match the total number of tracker detections; note that
                #   nignoredpairs is subtracted here to avoid double counting
                #   of ignored detection sin nignoredtp and nignoredtracker
                if tmptp<0:
                    print(tmptp, nignoredtp)
                    raise NameError("Something went wrong! TP is negative")
                if tmpfn<0:
                    print(tmpfn, len(g), len(association_matrix), ignoredfn, nignoredpairs)
                    raise NameError("Something went wrong! FN is negative")
                if tmpfp<0:
                    print(tmpfp, len(t), tmptp, nignoredtracker, nignoredtp, nignoredpairs)
                    raise NameError("Something went wrong! FP is negative")
                if tmptp + tmpfn != len(g)-ignoredfn-nignoredtp:
                    print("seqidx", seq_idx)
                    print("frame ", f)
                    print("TP    ", tmptp)
                    print("FN    ", tmpfn)
                    print("FP    ", tmpfp)
                    print("nGT   ", len(g))
                    print("nAss  ", len(association_matrix))
                    print("ign GT", ignoredfn)
                    print("ign TP", nignoredtp)
                    raise NameError("Something went wrong! nGroundtruth is not TP+FN")
                if tmptp+tmpfp+nignoredtp+nignoredtracker-nignoredpairs != len(t):
                    print(seq_idx, f, len(t), tmptp, tmpfp)
                    print(len(association_matrix), association_matrix)
                    raise NameError("Something went wrong! nTracker is not TP+FP")

                # check for id switches or Fragmentations               
                # frag will be more than id switch, switch happens only when id is different but detection exists
                # frag happens when id switch or detection is missing
                for i,tt in enumerate(this_ids[0]):
                    # print(i)
                    # print(tt)
                    if tt in last_ids[0]:
                        idx = last_ids[0].index(tt)
                        tid = this_ids[1][i]            # id in current tracker corresponding to the gt tt
                        lid = last_ids[1][idx]          # id in last frame tracker corresponding to the gt tt
                        if tid != lid and lid != -1 and tid != -1:
                            if g[i].truncation<self.max_truncation:
                                g[i].id_switch = 1
                                ids +=1
                        if tid != lid and lid != -1:
                            if g[i].truncation<self.max_truncation:
                                g[i].fragmentation = 1
                                fr +=1

                # save current index
                last_ids = this_ids
                # compute MOTP_t
                MODP_t = 1
                if tmptp!=0:
                    MODP_t = tmpc/float(tmptp)
                self.MODP_t.append(MODP_t)

            # remove empty lists for current gt trajectories
            self.gt_trajectories[seq_idx]             = seq_trajectories
            self.ign_trajectories[seq_idx]            = seq_ignored
            
            # self.num_gt += n_gts
            # gather statistics for "per sequence" statistics.
            self.n_gts.append(n_gts)
            self.n_trs.append(n_trs)
            self.tps.append(seqtp)
            self.itps.append(seqitp)
            self.fps.append(seqfp)
            self.fns.append(seqfn)
            self.ifns.append(seqifn)
            self.n_igts.append(seqigt)
            self.n_itrs.append(seqitr)
        
        # compute MT/PT/ML, fragments, idswitches for all groundtruth trajectories
        n_ignored_tr_total = 0
        for seq_idx, (seq_trajectories,seq_ignored) in enumerate(zip(self.gt_trajectories, self.ign_trajectories)):
            if len(seq_trajectories)==0:
                continue
            tmpMT, tmpML, tmpPT, tmpId_switches, tmpFragments = [0]*5
            n_ignored_tr = 0
            for g, ign_g in zip(seq_trajectories.values(), seq_ignored.values()):
                # all frames of this gt trajectory are ignored
                if all(ign_g):
                    n_ignored_tr+=1
                    n_ignored_tr_total+=1
                    continue
                # all frames of this gt trajectory are not assigned to any detections
                if all([this==-1 for this in g]):
                    tmpML+=1
                    self.ML+=1
                    continue
                # compute tracked frames in trajectory
                last_id = g[0]
                # first detection (necessary to be in gt_trajectories) is always tracked
                tracked = 1 if g[0]>=0 else 0
                lgt = 0 if ign_g[0] else 1
                for f in range(1,len(g)):
                    if ign_g[f]:
                        last_id = -1
                        continue
                    lgt+=1
                    if last_id != g[f] and last_id != -1 and g[f] != -1 and g[f-1] != -1:
                        tmpId_switches   += 1
                        self.id_switches += 1
                    if f < len(g)-1 and g[f-1] != g[f] and last_id != -1 and g[f] != -1 and g[f+1] != -1:
                        tmpFragments   += 1
                        self.fragments += 1
                    if g[f] != -1:
                        tracked += 1
                        last_id = g[f]
                # handle last frame; tracked state is handled in for loop (g[f]!=-1)
                if len(g)>1 and g[f-1] != g[f] and last_id != -1  and g[f] != -1 and not ign_g[f]:
                    tmpFragments   += 1
                    self.fragments += 1

                # compute MT/PT/ML
                tracking_ratio = tracked / float(len(g) - sum(ign_g))
                if tracking_ratio > 0.8:
                    tmpMT   += 1
                    self.MT += 1
                elif tracking_ratio < 0.2:
                    tmpML   += 1
                    self.ML += 1
                else: # 0.2 <= tracking_ratio <= 0.8
                    tmpPT   += 1
                    self.PT += 1

        if (self.n_gt_trajectories-n_ignored_tr_total)==0:
            self.MT = 0.
            self.PT = 0.
            self.ML = 0.
        else:
            self.MT /= float(self.n_gt_trajectories-n_ignored_tr_total)
            self.PT /= float(self.n_gt_trajectories-n_ignored_tr_total)
            self.ML /= float(self.n_gt_trajectories-n_ignored_tr_total)

        # precision/recall etc.
        if (self.fp+self.tp)==0 or (self.tp+self.fn)==0:
            self.recall = 0.
            self.precision = 0.
        else:
            self.recall = self.tp/float(self.tp+self.fn)
            self.precision = self.tp/float(self.fp+self.tp)
        if (self.recall+self.precision)==0:
            self.F1 = 0.
        else:
            self.F1 = 2.*(self.precision*self.recall)/(self.precision+self.recall)
        if sum(self.n_frames)==0:
            self.FAR = "n/a"
        else:
            self.FAR = self.fp/float(sum(self.n_frames))

        # compute CLEARMOT
        if self.n_gt==0:
            self.MOTA = -float("inf")
            self.MODA = -float("inf")
            self.sMOTA = -float("inf")
        else:
            self.MOTA  = 1 - (self.fn + self.fp + self.id_switches)/float(self.n_gt)
            self.MODA  = 1 - (self.fn + self.fp) / float(self.n_gt)
            self.sMOTA = min(1, max(0, 1 - (self.fn + self.fp + self.id_switches - (1 - recall_thres) * self.n_gt) / float(recall_thres * self.n_gt)))
        if self.tp==0:
            self.MOTP  = 0
        else:
            self.MOTP  = self.total_cost / float(self.tp)
        if self.n_gt!=0:
            if self.id_switches==0:
                self.MOTAL = 1 - (self.fn + self.fp + self.id_switches)/float(self.n_gt)
            else:
                self.MOTAL = 1 - (self.fn + self.fp + math.log10(self.id_switches))/float(self.n_gt)
        else:
            self.MOTAL = -float("inf")
        if sum(self.n_frames)==0:
            self.MODP = "n/a"
        else:
            self.MODP = sum(self.MODP_t)/float(sum(self.n_frames))

        self.num_gt = self.tp + self.fn
        return True

    def createSummary_details(self):
        """
            Generate and mail a summary of the results.
            If mailpy.py is present, the summary is instead printed.
        """
        
        summary = ""
        
        summary += "evaluation: best results with single threshold".center(80,"=") + "\n"
        summary += self.printEntry("Multiple Object Tracking Accuracy (MOTA)", self.MOTA) + "\n"
        summary += self.printEntry("Multiple Object Tracking Precision (MOTP)", float(self.MOTP)) + "\n"
        summary += self.printEntry("Multiple Object Tracking Accuracy (MOTAL)", self.MOTAL) + "\n"
        summary += self.printEntry("Multiple Object Detection Accuracy (MODA)", self.MODA) + "\n"
        summary += self.printEntry("Multiple Object Detection Precision (MODP)", float(self.MODP)) + "\n"
        summary += "\n"
        summary += self.printEntry("Recall", self.recall) + "\n"
        summary += self.printEntry("Precision", self.precision) + "\n"
        summary += self.printEntry("F1", self.F1) + "\n"
        summary += self.printEntry("False Alarm Rate", self.FAR) + "\n"
        summary += "\n"
        summary += self.printEntry("Mostly Tracked", self.MT) + "\n"
        summary += self.printEntry("Partly Tracked", self.PT) + "\n"
        summary += self.printEntry("Mostly Lost", self.ML) + "\n"
        summary += "\n"
        summary += self.printEntry("True Positives", self.tp) + "\n"
        #summary += self.printEntry("True Positives per Sequence", self.tps) + "\n"
        summary += self.printEntry("Ignored True Positives", self.itp) + "\n"
        #summary += self.printEntry("Ignored True Positives per Sequence", self.itps) + "\n"
        summary += self.printEntry("False Positives", self.fp) + "\n"
        #summary += self.printEntry("False Positives per Sequence", self.fps) + "\n"
        summary += self.printEntry("False Negatives", self.fn) + "\n"
        #summary += self.printEntry("False Negatives per Sequence", self.fns) + "\n"
        summary += self.printEntry("Ignored False Negatives", self.ifn) + "\n"
        #summary += self.printEntry("Ignored False Negatives per Sequence", self.ifns) + "\n"
        # summary += self.printEntry("Missed Targets", self.fn) + "\n"
        summary += self.printEntry("ID-switches", self.id_switches) + "\n"
        summary += self.printEntry("Fragmentations", self.fragments) + "\n"
        summary += "\n"
        summary += self.printEntry("Ground Truth Objects (Total)", self.n_gt + self.n_igt) + "\n"
        #summary += self.printEntry("Ground Truth Objects (Total) per Sequence", self.n_gts) + "\n"
        summary += self.printEntry("Ignored Ground Truth Objects", self.n_igt) + "\n"
        #summary += self.printEntry("Ignored Ground Truth Objects per Sequence", self.n_igts) + "\n"
        summary += self.printEntry("Ground Truth Trajectories", self.n_gt_trajectories) + "\n"
        summary += "\n"
        summary += self.printEntry("Tracker Objects (Total)", self.n_tr) + "\n"
        #summary += self.printEntry("Tracker Objects (Total) per Sequence", self.n_trs) + "\n"
        summary += self.printEntry("Ignored Tracker Objects", self.n_itr) + "\n"
        #summary += self.printEntry("Ignored Tracker Objects per Sequence", self.n_itrs) + "\n"
        summary += self.printEntry("Tracker Trajectories", self.n_tr_trajectories) + "\n"
        #summary += "\n"
        #summary += self.printEntry("Ignored Tracker Objects with Associated Ignored Ground Truth Objects", self.n_igttr) + "\n"
        summary += "="*80
        
        return summary

    def createSummary_simple(self, threshold, recall):
        """
            Generate and mail a summary of the results.
            If mailpy.py is present, the summary is instead printed.
        """
        
        summary = ""
        
        summary += ("evaluation with confidence threshold %f, recall %f" % (threshold, recall)).center(80,"=") + "\n"
        summary += ' sMOTA   MOTA   MOTP    MT     ML     IDS  FRAG    F1   Prec  Recall  FAR     TP    FP    FN\n'

        summary += '{:.4f} {:.4f} {:.4f} {:.4f} {:.4f} {:5d} {:5d} {:.4f} {:.4f} {:.4f} {:.4f} {:5d} {:5d} {:5d}\n'.format( \
            self.sMOTA, self.MOTA, self.MOTP, self.MT, self.ML, self.id_switches, self.fragments, \
            self.F1, self.precision, self.recall, self.FAR, self.tp, self.fp, self.fn) 
        summary += "="*80
        
        return summary

    def printEntry(self, key, val,width=(70,10)):
        """
            Pretty print an entry in a table fashion.
        """
        
        s_out =  key.ljust(width[0])
        if type(val)==int:
            s = "%%%dd" % width[1]
            s_out += s % val
        elif type(val)==float:
            s = "%%%d.4f" % (width[1])
            s_out += s % val
        else:
            s_out += ("%s"%val).rjust(width[1])
        return s_out
      
    def saveToStats(self, dump, threshold=None, recall=None):
        """
            Save the statistics in a whitespace separate file.
        """

        if threshold is None: summary = self.createSummary_details()
        else: summary = self.createSummary_simple(threshold, recall)
        self.mail.msg(summary)       # mail or print the summary.
        print(summary, file=dump)

class stat:
    """
        Utility class to load data.
    """
    def __init__(self, t_sha, cls, suffix, dump):
        """
            Constructor, initializes the object given the parameters.
        """
        
        # init object data
        self.mota = 0
        self.motp = 0
        self.F1 = 0
        self.precision = 0
        self.fp = 0
        self.fn = 0
        self.sMOTA = 0

        self.mota_list = list()
        self.motp_list = list()
        self.sMOTA_list = list()
        self.f1_list = list()
        self.precision_list = list()
        self.fp_list = list()
        self.fn_list = list()
        self.recall_list = list()

        self.t_sha = t_sha
        self.cls = cls
        self.suffix = suffix
        self.dump = dump

    def update(self, data):
        self.mota += data['mota']
        self.motp += data['motp']
        self.F1 += data['F1']
        # self.moda += data['moda']
        # self.modp += data['modp']
        self.precision += data['precision']
        self.fp += data['fp']
        self.fn += data['fn']
        self.sMOTA += data['sMOTA']

        self.mota_list.append(data['mota'])
        self.sMOTA_list.append(data['sMOTA'])
        self.motp_list.append(data['motp'])
        self.f1_list.append(data['F1'])
        self.precision_list.append(data['precision'])
        self.fp_list.append(data['fp'])
        self.fn_list.append(data['fn'])
        self.recall_list.append(data['recall'])

    def output(self):
        self.sAMOTA = self.sMOTA / (num_sample_pts - 1)
        self.amota = self.mota / (num_sample_pts - 1)
        self.amotp = self.motp / (num_sample_pts - 1)
    
    def print_summary(self):
        summary = ""
        
        summary += ("evaluation: average over recall").center(80,"=") + "\n"
        summary += ' sAMOTA  AMOTA  AMOTP \n'

        summary += '{:.4f} {:.4f} {:.4f}\n'.format(self.sAMOTA, self.amota, self.amotp) 
        summary += "="*80
    
        print(summary, file=self.dump)
        
        return summary

    def plot_over_recall(self, data_list, title, y_name, save_path):
        # add extra zero at the end
        largest_recall = self.recall_list[-1]
        extra_zero = np.arange(largest_recall, 1, 0.01).tolist()
        len_extra = len(extra_zero)
        y_zero = [0] * len_extra

        fig = plt.figure()
        ax = fig.add_subplot(111)
        ax.plot(np.array(self.recall_list + extra_zero), np.array(data_list + y_zero))
        # ax.set_title(title, fontsize=20)
        ax.set_ylabel(y_name, fontsize=20)
        ax.set_xlabel('Recall', fontsize=20)
        ax.set_xlim(0.0, 1.0)
        plt.xticks(fontsize=20)
        plt.yticks(fontsize=20)
        plt.tight_layout()
        if y_name in ['sMOTA', 'MOTA', 'MOTP', 'F1', 'Precision']:
            ax.set_ylim(0.0, 1.0)
        else:
            ax.set_ylim(0.0, max(data_list))

        if y_name in ['MOTA', 'F1']:
            max_ind = np.argmax(np.array(data_list))
            # print(max_ind)
            plt.axvline(self.recall_list[max_ind], ymax=data_list[max_ind], color='r')
            plt.plot(self.recall_list[max_ind], data_list[max_ind], 'or', markersize=12)
            plt.text(self.recall_list[max_ind]-0.05, data_list[max_ind]+0.03, '%.2f' % (data_list[max_ind] * 100), fontsize=20)
        fig.savefig(save_path)
        plt.close()
        # zxc

    def plot(self):
        save_dir = os.path.join("AB3DMOT_plugin/results/KITTI", self.t_sha)

        self.plot_over_recall(self.mota_list, 'MOTA - Recall Curve', 'MOTA', os.path.join(save_dir, 'MOTA_recall_curve_%s_%s.pdf' % (self.cls, self.suffix)))
        self.plot_over_recall(self.sMOTA_list, 'sMOTA - Recall Curve', 'sMOTA', os.path.join(save_dir, 'sMOTA_recall_curve_%s_%s.pdf' % (self.cls, self.suffix)))
        self.plot_over_recall(self.motp_list, 'MOTP - Recall Curve', 'MOTP', os.path.join(save_dir, 'MOTP_recall_curve_%s_%s.pdf' % (self.cls, self.suffix)))
        self.plot_over_recall(self.f1_list, 'F1 - Recall Curve', 'F1', os.path.join(save_dir, 'F1_recall_curve_%s_%s.pdf' % (self.cls, self.suffix)))
        self.plot_over_recall(self.fp_list, 'False Positive - Recall Curve', 'False Positive', os.path.join(save_dir, 'FP_recall_curve_%s_%s.pdf' % (self.cls, self.suffix)))
        self.plot_over_recall(self.fn_list, 'False Negative - Recall Curve', 'False Negative', os.path.join(save_dir, 'FN_recall_curve_%s_%s.pdf' % (self.cls, self.suffix)))
        self.plot_over_recall(self.precision_list, 'Precision - Recall Curve', 'Precision', os.path.join(save_dir, 'precision_recall_curve_%s_%s.pdf' % (self.cls, self.suffix)))

def evaluate(result_sha,mail,num_hypo,eval_3diou,eval_2diou,thres):
    """
        Entry point for evaluation, will load the data and start evaluation for
        CAR and PEDESTRIAN if available.
    """
    
    # start evaluation and instanciated eval object
    if eval_3diou:
        mail.msg("Processing Result for KITTI 3D MOT Benchmark")
    elif eval_2diou:
        mail.msg("Processing Result for KITTI 2D MOT Benchmark")
    else:
        assert False, 'error'
    classes = []
    # for c in ("car", "pedestrian", "cyclist"):
    for c in ["car"]:
        e = trackingEvaluation(t_sha=result_sha, mail=mail,cls=c,eval_3diou=eval_3diou,eval_2diou=eval_2diou,num_hypo=num_hypo,thres=thres)
        # load tracker data and check provided classes
        try:
            if not e.loadTracker():
                continue
            mail.msg("Loading Results - Success")
            mail.msg("Evaluate Object Class: %s" % c.upper())
            classes.append(c)
        except:
            mail.msg("Feel free to contact us (lenz@kit.edu), if you receive this error message:")
            mail.msg("   Caught exception while loading result data.")
            break
        # load groundtruth data for this class
        if not e.loadGroundtruth():
            raise ValueError("Ground truth not found.")
        mail.msg("Loading Groundtruth - Success")
        # sanity checks
        if len(e.groundtruth) != len(e.tracker):
            mail.msg("The uploaded data does not provide results for every sequence: %d vs %d" % (len(e.groundtruth), len(e.tracker)))
            return False
        mail.msg("Loaded %d Sequences." % len(e.groundtruth))
        mail.msg("Start Evaluation...")

        if eval_3diou: suffix = 'eval3D'
        else: suffix = 'eval2D'
        filename = os.path.join(e.t_path, "../summary_%s_average_%s.txt" % (c, suffix)); dump = open(filename, "w+")
        stat_meter = stat(t_sha=result_sha, cls=c, suffix=suffix, dump=dump)
        e.compute3rdPartyMetrics()

        # evaluate the mean average metrics
        best_mota, best_threshold = 0, -10000
        threshold_list, recall_list = e.getThresholds(e.scores, e.num_gt)
        for threshold_tmp, recall_tmp in zip(threshold_list, recall_list):
            data_tmp = dict()
            e.reset()
            e.compute3rdPartyMetrics(threshold_tmp, recall_tmp)
            data_tmp['mota'], data_tmp['motp'], data_tmp['moda'], data_tmp['modp'], data_tmp['precision'], \
            data_tmp['F1'], data_tmp['fp'], data_tmp['fn'], data_tmp['recall'], data_tmp['sMOTA'] = \
                e.MOTA, e.MOTP, e.MODA, e.MODP, e.precision, e.F1, e.fp, e.fn, e.recall, e.sMOTA
            stat_meter.update(data_tmp)
            mota_tmp = e.MOTA
            if mota_tmp > best_mota: 
                best_threshold = threshold_tmp
                best_mota = mota_tmp
            e.saveToStats(dump, threshold_tmp, recall_tmp) 

        e.reset()
        e.compute3rdPartyMetrics(best_threshold)
        e.saveToStats(dump) 

        stat_meter.output()
        summary = stat_meter.print_summary()
        stat_meter.plot()
        mail.msg(summary)       # mail or print the summary.
        dump.close()

    # finish
    if len(classes)==0:
        mail.msg("The uploaded results could not be evaluated. Check for format errors.")
        return False
    mail.msg("Thank you for participating in our benchmark!")
    return True

#########################################################################
# entry point of evaluation script
# input:
#   - result_sha (unique key of results)
#   - 2D or 3D (using 2D or 3D MOT evaluation system)
if __name__ == "__main__":

    # check for correct number of arguments. if user_sha and email are not supplied,
    # no notification email is sent (this option is used for auto-updates)
    if len(sys.argv)!=3 and len(sys.argv)!=4 and len(sys.argv)!=5:
        print("Usage: python3 scripts/KITTI/evaluate.py result_sha num_hypothesis(e.g., 1) dimension(e.g., 2D or 3D) thres(e.g., 0.25)")
        sys.exit(1);

    # get unique sha key of submitted results
    result_sha = sys.argv[1]
    num_hypo = sys.argv[2]
    mail = mailpy.Mail("")
    # 
    if len(sys.argv)>=4:
        if sys.argv[3] == '2D':
            eval_3diou, eval_2diou = False, True      # eval 2d
        elif sys.argv[3] == '3D':
            eval_3diou, eval_2diou = True, False        # eval 3d
        else:
            print("Usage: python3 scripts/KITTI/evaluate.py result_sha num_hypothesis(e.g., 1) dimension(e.g., 2D or 3D) thres(e.g., 0.25)")
            sys.exit(1);    
        if len(sys.argv)==5: thres = float(sys.argv[4])
        else: thres = None
    else:
        eval_3diou, eval_2diou = True, False        # eval 3d
        thres = None



    # evaluate results
    success = evaluate(result_sha,mail,num_hypo,eval_3diou,eval_2diou,thres)

# Author: Xinshuo Weng
# email: xinshuo.weng@gmail.com

# combine tracking results from different categories 

import os, argparse
from AB3DMOT_libs.io import combine_files
from AB3DMOT_libs.utils import find_all_frames, get_subfolder_seq, Config
from xinshuo_io import mkdir_if_missing, is_path_exists

def parse_args():
    parser = argparse.ArgumentParser(description='AB3DMOT')
    parser.add_argument('--det_name', type=str, default='pointrcnn', help='we provide pointrcnn on KITTI, megvii for nuScenes')
    parser.add_argument('--dataset', type=str, default='KITTI', help='nuScenes, KITTI')
    parser.add_argument('--split', type=str, default='val', help='train, val, test')
    parser.add_argument('--suffix', type=str, default='H1', help='additional string of the folder to be combined')
    parser.add_argument('--num_hypo', type=int, default=1, help='number of hypothesis to combine')
    args = parser.parse_args()
    return args

def combine_trk_cat(split, dataset, method, suffix, num_hypo,split_data_path,root_dir):
	# load dataset-specific config	
	print('root_dir: ',root_dir)
	
	_, det_id2str, _, seq_list, _ = get_subfolder_seq(dataset, split,split_data_path)

	# load config files
	file_path = os.path.dirname(os.path.realpath(__file__))
	config_path = os.path.join(file_path, '../../configs/%s.yml' % dataset)
	cfg, _ = Config(config_path)
	log = os.path.join(root_dir, '%s_%s_%s' % (method, split, suffix), 'combine_log.txt')
	mkdir_if_missing(log); log = open(log, 'w+')

	# source directory
	subset = ['%s_%s_%s_%s' % (method, cat, split, suffix) for cat in cfg.cat_list]

	# loop through all hypotheses
	for hypo_index in range(num_hypo):
		data_suffix = '_%d' % hypo_index
		frame_dict = find_all_frames(root_dir, subset, data_suffix, seq_list)

		############ merge for 3D MOT evaluation
		save_root = os.path.join(root_dir, '%s_%s_%s' % (method, split, suffix), 'data'+data_suffix); mkdir_if_missing(save_root)
		for seq_tmp in seq_list:
			file_list_tmp = list()

			# loop through each category
			for subset_tmp in subset:
				file_tmp = os.path.join(root_dir, subset_tmp, 'data'+data_suffix, seq_tmp+'.txt')
				file_list_tmp.append(file_tmp)

			save_path_tmp = os.path.join(save_root, seq_tmp+'.txt')
			combine_files(file_list_tmp, save_path_tmp)

		############ merge for trk_withid, for detection evaluation and 3D MOT visualization
		save_root = os.path.join(root_dir, '%s_%s_%s' % (method, split, suffix), 'trk_withid'+data_suffix)
		for seq_tmp in seq_list:

			if seq_tmp not in frame_dict:
				continue
			
			save_dir = os.path.join(save_root, seq_tmp); mkdir_if_missing(save_dir)
			for frame_tmp in frame_dict[seq_tmp]:
				file_list_tmp = list()
				for subset_tmp in subset:
					file_tmp = os.path.join(root_dir, subset_tmp, 'trk_withid'+data_suffix, seq_tmp, frame_tmp+'.txt')
					if is_path_exists(file_tmp): file_list_tmp.append(file_tmp)

				save_path_tmp = os.path.join(save_dir, frame_tmp+'.txt')
				combine_files(file_list_tmp, save_path_tmp, sort=False)

if __name__ == '__main__':
	args = parse_args()
	combine_trk_cat(args.split, args.dataset, args.det_name, args.suffix, args.num_hypo)



import numpy as np
from filterpy.kalman import KalmanFilter, UnscentedKalmanFilter, MerweScaledSigmaPoints

class Filter(object):
	def __init__(self, bbox3D, info, ID, lidar_xyzr):

		self.initial_pos = bbox3D
		self.time_since_update = 0
		self.id = ID
		self.hits = 1           		# number of total hits including the first detection
		self.info = info        		# other information associated	
		self.lidar_xyzr = lidar_xyzr    #lidar xyzr

class KF(Filter):
	def __init__(self, bbox3D, info, ID,lidar_xyzr):
		super().__init__(bbox3D, info, ID, lidar_xyzr)

		self.kf = KalmanFilter(dim_x=10, dim_z=7)       
		# There is no need to use EKF here as the measurement and state are in the same space with linear relationship

		# state x dimension 10: x, y, z, theta, l, w, h, dx, dy, dz
		# constant velocity model: x' = x + dx, y' = y + dy, z' = z + dz 
		# while all others (theta, l, w, h, dx, dy, dz) remain the same
		self.kf.F = np.array([[1,0,0,0,0,0,0,1,0,0],      # state transition matrix, dim_x * dim_x
		                      [0,1,0,0,0,0,0,0,1,0],
		                      [0,0,1,0,0,0,0,0,0,1],
		                      [0,0,0,1,0,0,0,0,0,0],  
		                      [0,0,0,0,1,0,0,0,0,0],
		                      [0,0,0,0,0,1,0,0,0,0],
		                      [0,0,0,0,0,0,1,0,0,0],
		                      [0,0,0,0,0,0,0,1,0,0],
		                      [0,0,0,0,0,0,0,0,1,0],
		                      [0,0,0,0,0,0,0,0,0,1]])     

		# measurement function, dim_z * dim_x, the first 7 dimensions of the measurement correspond to the state
		self.kf.H = np.array([[1,0,0,0,0,0,0,0,0,0],      
		                      [0,1,0,0,0,0,0,0,0,0],
		                      [0,0,1,0,0,0,0,0,0,0],
		                      [0,0,0,1,0,0,0,0,0,0],
		                      [0,0,0,0,1,0,0,0,0,0],
		                      [0,0,0,0,0,1,0,0,0,0],
		                      [0,0,0,0,0,0,1,0,0,0]])

		# measurement uncertainty, uncomment if not super trust the measurement data due to detection noise
		# self.kf.R[0:,0:] *= 10.   

		# initial state uncertainty at time 0
		# Given a single data, the initial velocity is very uncertain, so giv a high uncertainty to start
		self.kf.P[7:, 7:] *= 1000. 	
		self.kf.P *= 10.

		# process uncertainty, make the constant velocity part more certain
		self.kf.Q[7:, 7:] *= 0.01

		# initialize data
		self.kf.x[:7] = self.initial_pos.reshape((7, 1))

	def compute_innovation_matrix(self):
		""" compute the innovation matrix for association with mahalanobis distance
		"""
		return np.matmul(np.matmul(self.kf.H, self.kf.P), self.kf.H.T) + self.kf.R

	def get_velocity(self):
		# return the object velocity in the state

		return self.kf.x[7:]

# Author: Xinshuo Weng
# email: xinshuo.weng@gmail.com

import numpy as np, os, copy, math
from AB3DMOT_libs.box import Box3D
from AB3DMOT_libs.matching import data_association
from AB3DMOT_libs.kalman_filter import KF
from AB3DMOT_libs.vis import vis_obj
from xinshuo_miscellaneous import print_log
from xinshuo_io import mkdir_if_missing

from AB3DMOT.AB3DMOT_libs.model import AB3DMOT

np.set_printoptions(suppress=True, precision=3)


# A Baseline of 3D Multi-Object Tracking
class AB3DMOT_custom(AB3DMOT):
	def __init__(self, cfg, cat, calib=None, oxts=None, img_dir=None, vis_dir=None, hw=None, log=None, ID_init=0):
		super().__init__(cfg, cat, calib, oxts, img_dir, vis_dir, hw, log, ID_init)

	def get_param(self, cfg, cat):
		# get parameters for each dataset

		if cfg.dataset == 'KITTI':
			if cfg.det_name == 'pvrcnn':  # tuned for PV-RCNN detections
				if cat == 'Car':
					algm, metric, thres, min_hits, max_age = 'hungar', 'giou_3d', -0.2, 3, 2
				elif cat == 'Pedestrian':
					algm, metric, thres, min_hits, max_age = 'greedy', 'giou_3d', -0.4, 1, 4
				elif cat == 'Cyclist':
					algm, metric, thres, min_hits, max_age = 'hungar', 'dist_3d', 2, 3, 4
				else:
					assert False, 'error'
			elif cfg.det_name == 'pointrcnn':  # tuned for PointRCNN detections
				if cat == 'Car':
					# algm, metric, thres, min_hits, max_age = 'hungar', 'giou_3d', -0.2, 3, 2
					algm, metric, thres, min_hits, max_age = 'hungar', 'giou_3d', -0.2, 1, 21
				elif cat == 'Pedestrian':
					algm, metric, thres, min_hits, max_age = 'greedy', 'giou_3d', -0.4, 1, 4
				elif cat == 'Cyclist':
					algm, metric, thres, min_hits, max_age = 'hungar', 'dist_3d', 2, 3, 4
				else:
					assert False, 'error'
			elif cfg.det_name == 'deprecated':
				if cat == 'Car':
					algm, metric, thres, min_hits, max_age = 'hungar', 'dist_3d', 6, 3, 2
				elif cat == 'Pedestrian':
					algm, metric, thres, min_hits, max_age = 'hungar', 'dist_3d', 1, 3, 2
				elif cat == 'Cyclist':
					algm, metric, thres, min_hits, max_age = 'hungar', 'dist_3d', 6, 3, 2
				else:
					assert False, 'error'
			else:
				if cat == 'Car': 			algm, metric, thres, min_hits, max_age = 'hungar', 'giou_3d', -0.2, 3, 2
				elif cat == 'Pedestrian': 	algm, metric, thres, min_hits, max_age = 'greedy', 'giou_3d', -0.4, 1, 4 		
				elif cat == 'Cyclist': 		algm, metric, thres, min_hits, max_age = 'hungar', 'dist_3d', 2, 3, 4
				else: assert False, 'error'
		else:
			assert False, 'no such dataset'

		# add negative due to it is the cost
		if metric in ['dist_3d', 'dist_2d', 'm_dis']: thres *= -1
		self.algm, self.metric, self.thres, self.max_age, self.min_hits = \
			algm, metric, thres, max_age, min_hits

		# define max/min values for the output affinity matrix
		if self.metric in ['dist_3d', 'dist_2d', 'm_dis']:
			self.max_sim, self.min_sim = 0.0, -100.
		elif self.metric in ['iou_2d', 'iou_3d']:
			self.max_sim, self.min_sim = 1.0, 0.0
		elif self.metric in ['giou_2d', 'giou_3d']:
			self.max_sim, self.min_sim = 1.0, -1.0

	def update(self, matched, unmatched_trks, dets, info, lidar_xyzr):
		# update matched trackers with assigned detections

		dets = copy.copy(dets)
		for t, trk in enumerate(self.trackers):
			if t not in unmatched_trks:
				d = matched[np.where(matched[:, 1] == t)[0], 0]  # a list of index
				assert len(d) == 1, 'error'

				# update statistics
				trk.time_since_update = 0  # reset because just updated
				trk.hits += 1

				# update orientation in propagated tracks and detected boxes so that they are within 90 degree
				bbox3d = Box3D.bbox2array(dets[d[0]])
				trk.kf.x[3], bbox3d[3] = self.orientation_correction(trk.kf.x[3], bbox3d[3])

				if trk.id == self.debug_id:
					print('After ego-compoensation')
					print(trk.kf.x.reshape((-1)))
					print('matched measurement')
					print(bbox3d.reshape((-1)))
				# print('uncertainty')
				# print(trk.kf.P)
				# print('measurement noise')
				# print(trk.kf.R)

				# kalman filter update with observation
				trk.kf.update(bbox3d)

				if trk.id == self.debug_id:
					print('after matching')
					print(trk.kf.x.reshape((-1)))
					print('\n current velocity')
					print(trk.get_velocity())

				trk.kf.x[3] = self.within_range(trk.kf.x[3])
				trk.info = info[d, :][0]
				trk.lidar_xyzr = lidar_xyzr[d, :][0]

		# debug use only
		# else:
		# print('track ID %d is not matched' % trk.id)

	def birth(self, dets, info, unmatched_dets, lidar_xyzr):
		# create and initialise new trackers for unmatched detections

		# dets = copy.copy(dets)
		new_id_list = list()  # new ID generated for unmatched detections
		for i in unmatched_dets:  # a scalar of index
			trk = KF(Box3D.bbox2array(dets[i]), info[i, :], self.ID_count[0],lidar_xyzr[i,:])
			self.trackers.append(trk)
			new_id_list.append(trk.id)
			# print('track ID %s has been initialized due to new detection' % trk.id)

			self.ID_count[0] += 1

		return new_id_list

	def output(self):
		# output exiting tracks that have been stably associated, i.e., >= min_hits
		# and also delete tracks that have appeared for a long time, i.e., >= max_age

		num_trks = len(self.trackers)
		results = []
		for trk in reversed(self.trackers):
			# change format from [x,y,z,theta,l,w,h] to [h,w,l,x,y,z,theta]
			d = Box3D.array2bbox(trk.kf.x[:7].reshape((7,)))  # bbox location self
			d = Box3D.bbox2array_raw(d)

			if ((trk.time_since_update < 1) and (trk.hits >= self.min_hits)):
			# if ((trk.time_since_update < self.max_age) and (trk.hits >= self.min_hits or self.frame_count <= self.min_hits)):
			# if ((trk.time_since_update < self.max_age) and (trk.hits >= self.min_hits or self.frame_count <= self.min_hits)):
				results.append(np.concatenate((d, [trk.id], trk.info, trk.lidar_xyzr)).reshape(1, -1))
			num_trks -= 1

			# deadth, remove dead tracklet
			if (trk.time_since_update >= self.max_age):
				self.trackers.pop(num_trks)

		return results

	def track(self, dets_all, frame, seq_name):
		"""
		Params:
			dets_all: dict
				dets - a numpy array of detections in the format [[h,w,l,x,y,z,theta],...]
				info: a array of other info for each det
				lidar_xyzr: a array of lidar location and rotation z
			frame:    str, frame number, used to query ego pose
		Requires: this method must be called once for each frame even with empty detections.
		Returns the a similar array, where the last column is the object ID.

		NOTE: The number of objects returned may differ from the number of detections provided.
		"""
		dets, info, lidar_xyzr = dets_all['dets'], dets_all['info'], dets_all['lidar_xyzr']  # dets: N x 7, float numpy array
		if self.debug_id:
			print('\nframe is %s' % frame)

		# logging
		print_str = '\n\n*****************************************\n\nprocessing seq_name/frame %s/%d' % (seq_name, frame)
		print_log(print_str, log=self.log, display=False)
		self.frame_count += 1

		# recall the last frames of outputs for computing ID correspondences during affinity processing
		self.id_past_output = copy.copy(self.id_now_output)
		self.id_past = [trk.id for trk in self.trackers]

		# process detection format
		dets = self.process_dets(dets)

		# tracks propagation based on velocity
		trks = self.prediction()

		# ego motion compensation, adapt to the current frame of camera coordinate
		# if (frame > 0) and (self.ego_com) and (self.oxts is not None):
		# 	trks = self.ego_motion_compensation(frame, trks)

		# visualization
		# if self.vis and (self.vis_dir is not None):
		# 	img = os.path.join(self.img_dir, f'{frame:06d}.png')
		# 	save_path = os.path.join(self.vis_dir, f'{frame:06d}.jpg'); mkdir_if_missing(save_path)
		# 	self.visualization(img, dets, trks, self.calib, self.hw, save_path)

		# matching
		trk_innovation_matrix = None
		if self.metric == 'm_dis':
			trk_innovation_matrix = [trk.compute_innovation_matrix() for trk in self.trackers]
		matched, unmatched_dets, unmatched_trks, cost, affi = \
			data_association(dets, trks, self.metric, self.thres, self.algm, trk_innovation_matrix)
		# print_log('detections are', log=self.log, display=False)
		# print_log(dets, log=self.log, display=False)
		# print_log('tracklets are', log=self.log, display=False)
		# print_log(trks, log=self.log, display=False)
		# print_log('matched indexes are', log=self.log, display=False)
		# print_log(matched, log=self.log, display=False)
		# print_log('raw affinity matrix is', log=self.log, display=False)
		# print_log(affi, log=self.log, display=False)

		# update trks with matched detection measurement
		self.update(matched, unmatched_trks, dets, info, lidar_xyzr)

		# create and initialise new trackers for unmatched detections
		new_id_list = self.birth(dets, info, unmatched_dets, lidar_xyzr)

		# output existing valid tracks
		results = self.output()
		if len(results) > 0:
			results = [np.concatenate(results)]  # h,w,l,x,y,z,theta, ID, other info, confidence
		else:
			results = [np.empty((0, 19))]####ywx
		self.id_now_output = results[0][:, 7].tolist()  # only the active tracks that are outputed

		# post-processing affinity to convert to the affinity between resulting tracklets
		if self.affi_process:
			affi = self.process_affi(affi, matched, unmatched_dets, new_id_list)
		# print_log('processed affinity matrix is', log=self.log, display=False)
		# print_log(affi, log=self.log, display=False)

		# logging
		print_log('\ntop-1 cost selected', log=self.log, display=False)
		print_log(cost, log=self.log, display=False)
		for result_index in range(len(results)):
			print_log(results[result_index][:, :8], log=self.log, display=False)
			print_log('', log=self.log, display=False)

		return results, affi


import numpy as np, time
from numba import jit
from scipy.spatial import ConvexHull
from .box import Box3D

def polygon_clip(subjectPolygon, clipPolygon):
	""" Clip a polygon with another polygon.
	Ref: https://rosettacode.org/wiki/Sutherland-Hodgman_polygon_clipping#Python

	Args:
		subjectPolygon: a list of (x,y) 2d points, any polygon.
		clipPolygon: a list of (x,y) 2d points, has to be *convex*
	Note:
		**points have to be counter-clockwise ordered**

	Return:
		a list of (x,y) vertex point for the intersection polygon.
	"""
	def inside(p):
		return (cp2[0] - cp1[0]) * (p[1] - cp1[1]) > (cp2[1] - cp1[1]) * (p[0] - cp1[0])
 
	def computeIntersection():
		dc = [cp1[0] - cp2[0], cp1[1] - cp2[1]]
		dp = [s[0] - e[0], s[1] - e[1]]
		n1 = cp1[0] * cp2[1] - cp1[1] * cp2[0]
		n2 = s[0] * e[1] - s[1] * e[0] 
		n3 = 1.0 / (dc[0] * dp[1] - dc[1] * dp[0])
		return [(n1 * dp[0] - n2 * dc[0]) * n3, (n1 * dp[1] - n2 * dc[1]) * n3]
 
	outputList = subjectPolygon
	cp1 = clipPolygon[-1]
 
	for clipVertex in clipPolygon:
		cp2 = clipVertex
		inputList = outputList
		outputList = []
		s = inputList[-1]
 
		for subjectVertex in inputList:
			e = subjectVertex
			if inside(e):
				if not inside(s): outputList.append(computeIntersection())
				outputList.append(e)
			elif inside(s): outputList.append(computeIntersection())
			s = e
		cp1 = cp2
		if len(outputList) == 0: return None
	return (outputList)

def convex_hull_intersection(p1, p2):
	""" Compute area of two convex hull's intersection area.
		p1,p2 are a list of (x,y) tuples of hull vertices.
		return a list of (x,y) for the intersection and its volume
	"""
	inter_p = polygon_clip(p1,p2)
	if inter_p is not None:
		hull_inter = ConvexHull(inter_p)
		return inter_p, hull_inter.volume
	else:
		return None, 0.0  

def compute_inter_2D(boxa_bottom, boxb_bottom):
	# computer intersection over union of two sets of bottom corner points

	_, I_2D = convex_hull_intersection(boxa_bottom, boxb_bottom)

	# a slower version
	# from shapely.geometry import Polygon
	# reca, recb = Polygon(boxa_bottom), Polygon(boxb_bottom)
	# I_2D = reca.intersection(recb).area

	return I_2D

def compute_height(box_a, box_b, inter=True):

	corners1 = Box3D.box2corners3d_camcoord(box_a) 	# 8 x 3
	corners2 = Box3D.box2corners3d_camcoord(box_b)	# 8 x 3
	
	if inter: 		# compute overlap height
		ymax = min(corners1[0, 1], corners2[0, 1])
		ymin = max(corners1[4, 1], corners2[4, 1])
		height = max(0.0, ymax - ymin)
	else:			# compute union height
		ymax = max(corners1[0, 1], corners2[0, 1])
		ymin = min(corners1[4, 1], corners2[4, 1])
		height = max(0.0, ymax - ymin)

	return height

def compute_bottom(box_a, box_b):
	# obtain ground corners and area, not containing the height

	corners1 = Box3D.box2corners3d_camcoord(box_a) 	# 8 x 3
	corners2 = Box3D.box2corners3d_camcoord(box_b)	# 8 x 3
	
	# get bottom corners and inverse order so that they are in the 
	# counter-clockwise order to fulfill polygon_clip
	boxa_bot = corners1[-5::-1, [0, 2]] 		# 4 x 2
	boxb_bot = corners2[-5::-1, [0, 2]]			# 4 x 2
		
	return boxa_bot, boxb_bot

def PolyArea2D(pts):
    roll_pts = np.roll(pts, -1, axis=0)
    area = np.abs(np.sum((pts[:, 0] * roll_pts[:, 1] - pts[:, 1] * roll_pts[:, 0]))) * 0.5
    return area

def convex_area(boxa_bottom, boxb_bottom):

	# compute the convex area
	all_corners = np.vstack((boxa_bottom, boxb_bottom))
	C = ConvexHull(all_corners)
	convex_corners = all_corners[C.vertices]
	convex_area = PolyArea2D(convex_corners)

	return convex_area

#################### distance metric

def iou(box_a, box_b, metric='giou_3d'):
	''' Compute 3D/2D bounding box IoU, only working for object parallel to ground

	Input:
		Box3D instances
	Output:
	    iou_3d: 3D bounding box IoU
	    iou_2d: bird's eye view 2D bounding box IoU

	box corner order is like follows
            1 -------- 0 		 top is bottom because y direction is negative
           /|         /|
          2 -------- 3 .
          | |        | |
          . 5 -------- 4
          |/         |/
          6 -------- 7    
	
	rect/ref camera coord:
    right x, down y, front z
	'''	

	# compute 2D related measures
	boxa_bot, boxb_bot = compute_bottom(box_a, box_b)
	I_2D = compute_inter_2D(boxa_bot, boxb_bot)

	# only needed for GIoU
	if 'giou' in metric:
		C_2D = convex_area(boxa_bot, boxb_bot)

	if '2d' in metric:		 	# return 2D IoU/GIoU
		U_2D = box_a.w * box_a.l + box_b.w * box_b.l - I_2D
		if metric == 'iou_2d':  return I_2D / U_2D
		if metric == 'giou_2d': return I_2D / U_2D - (C_2D - U_2D) / C_2D

	elif '3d' in metric:		# return 3D IoU/GIoU
		overlap_height = compute_height(box_a, box_b)
		I_3D = I_2D * overlap_height	
		U_3D = box_a.w * box_a.l * box_a.h + box_b.w * box_b.l * box_b.h - I_3D
		if metric == 'iou_3d':  return I_3D / U_3D
		if metric == 'giou_3d':
			union_height = compute_height(box_a, box_b, inter=False)
			C_3D = C_2D * union_height
			return I_3D / U_3D - (C_3D - U_3D) / C_3D
	else:
		assert False, '%s is not supported' % space

def dist_ground(bbox1, bbox2):
	# Compute distance of bottom center in 3D space, NOT considering the difference in height

	c1 = Box3D.bbox2array(bbox1)[[0, 2]]
	c2 = Box3D.bbox2array(bbox2)[[0, 2]]
	dist = np.linalg.norm(c1 - c2)

	return dist

def dist3d_bottom(bbox1, bbox2):	
	# Compute distance of bottom center in 3D space, considering the difference in height / 2

	c1 = Box3D.bbox2array(bbox1)[:3]
	c2 = Box3D.bbox2array(bbox2)[:3]
	dist = np.linalg.norm(c1 - c2)

	return dist

def dist3d(bbox1, bbox2):
	# Compute distance of actual center in 3D space, considering the difference in height

	corners1 = Box3D.box2corners3d_camcoord(bbox1) 	# 8 x 3
	corners2 = Box3D.box2corners3d_camcoord(bbox2)	# 8 x 3

	# compute center point based on 8 corners
	c1 = np.average(corners1, axis=0)
	c2 = np.average(corners2, axis=0)

	dist = np.linalg.norm(c1 - c2)

	return dist

def diff_orientation_correction(diff):
    """
    return the angle diff = det - trk
    if angle diff > 90 or < -90, rotate trk and update the angle diff
    """
    if diff > np.pi / 2:  diff -= np.pi
    if diff < -np.pi / 2: diff += np.pi
    return diff

def m_distance(det, trk, trk_inv_innovation_matrix=None):
    
	# compute difference
    det_array = Box3D.bbox2array(det)[:7]
    trk_array = Box3D.bbox2array(trk)[:7] 		# (7, )
    diff = np.expand_dims(det_array - trk_array, axis=1) 	# 7 x 1

    # correct orientation
    corrected_yaw_diff = diff_orientation_correction(diff[3])
    diff[3] = corrected_yaw_diff

    if trk_inv_innovation_matrix is not None:
        dist = np.sqrt(np.matmul(np.matmul(diff.T, trk_inv_innovation_matrix), diff)[0][0])
    else:
        dist = np.sqrt(np.dot(diff.T, diff)) 		# distance along 7 dimension
    return dist

import numpy as np
from numba import jit
from copy import deepcopy
from .kitti_oxts import roty

class Box3D:
    def __init__(self, x=None, y=None, z=None, h=None, w=None, l=None, ry=None, s=None):
        self.x = x      # center x
        self.y = y      # center y
        self.z = z      # center z
        self.h = h      # height
        self.w = w      # width
        self.l = l      # length
        self.ry = ry    # orientation
        self.s = s      # detection score
        self.corners_3d_cam = None

    def __str__(self):
        return 'x: {}, y: {}, z: {}, heading: {}, length: {}, width: {}, height: {}, score: {}'.format(
            self.x, self.y, self.z, self.ry, self.l, self.w, self.h, self.s)
    
    @classmethod
    def bbox2dict(cls, bbox):
        return {
            'center_x': bbox.x, 'center_y': bbox.y, 'center_z': bbox.z,
            'height': bbox.h, 'width': bbox.w, 'length': bbox.l, 'heading': bbox.ry}
    
    @classmethod
    def bbox2array(cls, bbox):
        if bbox.s is None:
            return np.array([bbox.x, bbox.y, bbox.z, bbox.ry, bbox.l, bbox.w, bbox.h])
        else:
            return np.array([bbox.x, bbox.y, bbox.z, bbox.ry, bbox.l, bbox.w, bbox.h, bbox.s])

    @classmethod
    def bbox2array_raw(cls, bbox):
        if bbox.s is None:
            return np.array([bbox.h, bbox.w, bbox.l, bbox.x, bbox.y, bbox.z, bbox.ry])
        else:
            return np.array([bbox.h, bbox.w, bbox.l, bbox.x, bbox.y, bbox.z, bbox.ry, bbox.s])

    @classmethod
    def array2bbox_raw(cls, data):
        # take the format of data of [h,w,l,x,y,z,theta]

        bbox = Box3D()
        bbox.h, bbox.w, bbox.l, bbox.x, bbox.y, bbox.z, bbox.ry = data[:7]
        if len(data) == 8:
            bbox.s = data[-1]
        return bbox
    
    @classmethod
    def array2bbox(cls, data):
        # take the format of data of [x,y,z,theta,l,w,h]

        bbox = Box3D()
        bbox.x, bbox.y, bbox.z, bbox.ry, bbox.l, bbox.w, bbox.h = data[:7]
        if len(data) == 8:
            bbox.s = data[-1]
        return bbox
    
    @classmethod
    def box2corners3d_camcoord(cls, bbox):
        ''' Takes an object's 3D box with the representation of [x,y,z,theta,l,w,h] and 
            convert it to the 8 corners of the 3D box, the box is in the camera coordinate
            with right x, down y, front z
            
            Returns:
                corners_3d: (8,3) array in in rect camera coord

            box corner order is like follows
                    1 -------- 0         top is bottom because y direction is negative
                   /|         /|
                  2 -------- 3 .
                  | |        | |
                  . 5 -------- 4
                  |/         |/
                  6 -------- 7    
            
            rect/ref camera coord:
            right x, down y, front z

            x -> w, z -> l, y -> h
        '''

        # if already computed before, then skip it
        if bbox.corners_3d_cam is not None:
            return bbox.corners_3d_cam

        # compute rotational matrix around yaw axis
        # -1.57 means straight, so there is a rotation here
        R = roty(bbox.ry)   

        # 3d bounding box dimensions
        l, w, h = bbox.l, bbox.w, bbox.h

        # 3d bounding box corners
        x_corners = [l/2,l/2,-l/2,-l/2,l/2,l/2,-l/2,-l/2];
        y_corners = [0,0,0,0,-h,-h,-h,-h];
        z_corners = [w/2,-w/2,-w/2,w/2,w/2,-w/2,-w/2,w/2];

        # rotate and translate 3d bounding box
        corners_3d = np.dot(R, np.vstack([x_corners, y_corners, z_corners]))
        corners_3d[0,:] = corners_3d[0,:] + bbox.x
        corners_3d[1,:] = corners_3d[1,:] + bbox.y
        corners_3d[2,:] = corners_3d[2,:] + bbox.z
        corners_3d = np.transpose(corners_3d)
        bbox.corners_3d_cam = corners_3d

        return corners_3d

import numpy as np, cv2, random
from PIL import Image
from AB3DMOT_libs.box import Box3D
from xinshuo_visualization import random_colors

random.seed(0)
max_color = 30
colors = random_colors(max_color)       # Generate random colors

def draw_box3d_image(image, qs, img_size=(900, 1600), color=(255,255,255), thickness=4):
	''' Draw 3d bounding box in image
	    qs: (8,2) array of vertices for the 3d box in following order:
	        1 -------- 0
	       /|         /|
	      2 -------- 3 .
	      | |        | |
	      . 5 -------- 4
	      |/         |/
	      6 -------- 7
	'''

	def check_outside_image(x, y, height, width):
		if x < 0 or x >= width: return True
		if y < 0 or y >= height: return True

	# if 6 points of the box are outside the image, then do not draw
	pts_outside = 0
	for index in range(8):
		check = check_outside_image(qs[index, 0], qs[index, 1], img_size[0], img_size[1])
		if check: pts_outside += 1
	if pts_outside >= 6: return image, False

	# actually draw
	if qs is not None:
		qs = qs.astype(np.int32)
		for k in range(0,4):
			i,j=k,(k+1)%4
			image = cv2.line(image, (qs[i,0],qs[i,1]), (qs[j,0],qs[j,1]), color, thickness, cv2.LINE_AA) # use LINE_AA for opencv3

			i,j=k+4,(k+1)%4 + 4
			image = cv2.line(image, (qs[i,0],qs[i,1]), (qs[j,0],qs[j,1]), color, thickness, cv2.LINE_AA)

			i,j=k,k+4
			image = cv2.line(image, (qs[i,0],qs[i,1]), (qs[j,0],qs[j,1]), color, thickness, cv2.LINE_AA)

	return image, True

def vis_obj(box, img, calib, hw, color_tmp=None, str_vis=None, thickness=4, id_hl=None, err_type=None):
	# visualize an individual object	
	# repeat is for highlighted objects, used to create pause in the video

	# draw box
	obj_8corner = Box3D.box2corners3d_camcoord(box)
	obj_pts_2d = calib.project_rect_to_image(obj_8corner)
	img, draw = draw_box3d_image(img, obj_pts_2d, hw, color=color_tmp, thickness=thickness)

	# draw text
	if draw and obj_pts_2d is not None and str_vis is not None:
		x1, y1 = int(obj_pts_2d[4, 0]), int(obj_pts_2d[4, 1])
		img = cv2.putText(img, str_vis, (x1+5, y1-10), cv2.FONT_HERSHEY_TRIPLEX, 0.5, color_tmp, int(thickness/2))

	# highlight
	if err_type is not None:
		
		# compute the radius of the highlight
		xmin = np.min(obj_pts_2d[:, 0]); xmax = np.max(obj_pts_2d[:, 0])
		ymin = np.min(obj_pts_2d[:, 1]); ymax = np.max(obj_pts_2d[:, 1])
		radius = int(max(ymax - ymin, xmax - xmin) / 2 * 1.5)
		radius = max(radius, 50)

		# draw highlighting circle
		center = np.average(obj_pts_2d, axis=0)
		center = tuple(center.astype('int16'))
		img = cv2.circle(img, center, radius, (255, 0, 0), 4)		

		# draw error message
		pos_x, pos_y = center[0] - radius, center[1] - radius - 10
		font = cv2.FONT_HERSHEY_TRIPLEX
		font_scale = 1
		font_thickness = 2
		text_size, _ = cv2.getTextSize(err_type, font, font_scale, font_thickness)
		text_w, text_h = text_size
		cv2.rectangle(img, (pos_x, pos_y - text_h - 5), (pos_x + text_w, pos_y + 5), (255, 255, 255), -1) 		# add white background
		img = cv2.putText(img, err_type, (pos_x, pos_y), font, font_scale, (255, 0, 0), font_thickness) 

	return img

def vis_image_with_obj(img, obj_res, obj_gt, calib, hw, save_path, h_thres=0, \
	color_type='det', id_hl=None, repeat=60):
	# obj_res, obj_gt, a list of object3D class instances
	# h_thres: height threshold for filtering objects
	# id_hl: ID to be highlighted, color_type: ['det', 'trk'], trk means different color for each one
	# det means th same color for the same object

	# load image
	img = np.array(Image.open(img))

	# loop through every objects
	for obj in obj_res:
		depth = obj.z
		if depth >= 2: 		# check in front of camera

			# obtain object color and thickness
			if color_type == 'trk':   
				color_id = obj.id 		# vary across objects
				thickness = 5
			elif color_type == 'det': 
				if id_hl is not None and obj.id in id_hl:
					# color_id = 29 		# fixed, red for highlighted errors
					color_id = obj.id * 9 	# some magic number to scale up the id so that nearby ID does not have similar color
					thickness = 5			# highlighted objects are thicker
				else:						
					color_id = 13			# general object, fixed, lightgreen
					thickness = 1			# general objects are thin
			color_tmp = tuple([int(tmp * 255) for tmp in colors[color_id % max_color]])

			# get miscellaneous information
			box_tmp = obj.get_box3D()
			str_vis = 'ID: %d' % obj.id
			
			# retrieve index in the id_hl dict
			if id_hl is not None and obj.id in id_hl:
				err_type = id_hl[obj.id]
			else:
				err_type = None
			img = vis_obj(box_tmp, img, calib, hw['image'], color_tmp, str_vis, thickness, id_hl, err_type)

	# save image
	img = Image.fromarray(img)
	img = img.resize((hw['image'][1], hw['image'][0]))
	img.save(save_path)

	# create copy of the same image with highlighted objects to pause
	if id_hl is not None:
		for repeat_ in range(repeat):
			save_path_tmp = save_path[:-4] + '_repeat_%d' % repeat_ + save_path[-4:]
			img.save(save_path_tmp)

# Author: Xinshuo Weng
# email: xinshuo.weng@gmail.com

import yaml, numpy as np, os
from easydict import EasyDict as edict

# from AB3DMOT_libs.model_multi import AB3DMOT_multi

# from AB3DMOT_libs.kitti_oxts import load_oxts
# from AB3DMOT_libs.kitti_calib import Calibration
# from AB3DMOT_libs.nuScenes_split import get_split
from xinshuo_io import mkdir_if_missing, is_path_exists, fileparts, load_list_from_folder
from xinshuo_miscellaneous import merge_listoflist
from AB3DMOT_libs.model import AB3DMOT_custom


def Config(filename):
    listfile1 = open(filename, 'r')
    listfile2 = open(filename, 'r')
    cfg = edict(yaml.safe_load(listfile1))
    settings_show = listfile2.read().splitlines()

    listfile1.close()
    listfile2.close()

    return cfg, settings_show


def get_subfolder_seq(dataset, split, split_data_path):
    

    # dataset setting
    file_path = os.path.dirname(os.path.realpath(__file__))

    if dataset == 'KITTI':  # KITTI
        det_id2str = {0: 'Trafficcone', 1: 'Pedestrian', 2: 'Car', 3: 'Cyclist', 4: 'Van', 5: 'Truck', 6: 'Bus',
                      7: 'Tricyclist', 8: 'Motorcyclist', 9: 'Barrowlist'}

        if split == 'val':
            subfolder = 'validation'
        elif split == 'test':
            subfolder = 'testing'
        else:
            subfolder = 'training'

        hw = {'image': (1920, 1080), 'lidar': (720, 1920)}

        import json
        with open(split_data_path,'r') as fp:
            split_data = json.load(fp)
        
        seq_eval = split_data['batch_split'][split]     

        data_root = os.path.join(file_path, '../../../data/V2X-Seq-SPD-KITTI')  # path containing the KITTI root
        
    else:
        assert False, 'error, %s dataset is not supported' % dataset

    return subfolder, det_id2str, hw, seq_eval, data_root


def get_threshold(dataset, det_name):
    # used for visualization only as we want to remove some false positives, also can be
    # used for KITTI 2D MOT evaluation which uses a single operating point
    # obtained by observing the threshold achieving the highest MOTA on the validation set

    if dataset == 'KITTI':
        # if det_name == 'pointrcnn':
        if det_name:
            return {'Car': 3.240738, 'Pedestrian': 2.683133, 'Cyclist': 3.645319}
        else:
            assert False, 'error, detection method not supported for getting threshold' % det_name
    elif dataset == 'nuScenes':
        if det_name == 'megvii':
            return {'Car': 0.262545, 'Pedestrian': 0.217600, 'Truck': 0.294967, 'Trailer': 0.292775,
                    'Bus': 0.440060, 'Motorcycle': 0.314693, 'Bicycle': 0.284720}
        if det_name == 'centerpoint':
            return {'Car': 0.269231, 'Pedestrian': 0.410000, 'Truck': 0.300000, 'Trailer': 0.372632,
                    'Bus': 0.430000, 'Motorcycle': 0.368667, 'Bicycle': 0.394146}
        else:
            assert False, 'error, detection method not supported for getting threshold' % det_name
    else:
        assert False, 'error, dataset %s not supported for getting threshold' % dataset


def initialize(cfg, data_root, seq_dets, subfolder, seq_name, cat, ID_start, log_file):
    # initiate the tracker
    if cfg.num_hypo > 1:
        # tracker = AB3DMOT_multi(cfg, cat, calib=None, oxts=None, img_dir=None, vis_dir=None, hw=None, log=log_file,
        #                         ID_init=ID_start)
        assert False, 'error'
    elif cfg.num_hypo == 1:
        tracker = AB3DMOT_custom(cfg, cat, calib=None, oxts=None, img_dir=None, vis_dir=None, hw=None, log=log_file, ID_init=ID_start)
    else:
        assert False, 'error'

    # compute the min/max frame
    frame_list = list(seq_dets[:, 0])
    frame_list = list(set(frame_list))

    return tracker, frame_list


def find_all_frames(root_dir, subset, data_suffix, seq_list):
    # warm up to find union of all frames from results of all categories in all sequences
    # finding the union is important because there might be some sequences with only cars while
    # some other sequences only have pedestrians, so we may miss some results if mainly looking
    # at one single category
    # return a dictionary with each key correspondes to the list of frame ID

    # loop through every sequence
    frame_dict = dict()
    for seq_tmp in seq_list:
        frame_all = list()

        # find all frame indexes for each category
        for subset_tmp in subset:
            data_dir = os.path.join(root_dir, subset_tmp, 'trk_withid' + data_suffix, seq_tmp)  # pointrcnn_ped
            if not is_path_exists(data_dir):
                print('%s dir not exist' % data_dir)
                # assert False, 'error'
                continue

            # extract frame string from this category
            frame_list, _ = load_list_from_folder(data_dir)
            frame_list = [fileparts(frame_tmp)[1] for frame_tmp in frame_list]
            frame_all.append(frame_list)

        # merge frame indexes from all categories
        
        try:
            frame_all = merge_listoflist(frame_all, unique=True)
        except:
            frame_all = list()
        frame_dict[seq_tmp] = frame_all

    return frame_dict


# Author: Xinshuo Weng
# email: xinshuo.weng@gmail.com

import warnings, numpy as np, os
from xinshuo_io import mkdir_if_missing, load_txt_file, save_txt_file


################## loading

def load_detection(file,cat):
    # load from raw file
    type_str2id = {'Trafficcone': 0, 'Pedestrian': 1, 'Car': 2, 'Cyclist': 3, 'Van': 4, 'Truck': 5, 'Bus': 6,
                   'Tricyclist': 7, 'Motorcyclist': 8, 'Barrowlist': 9}

    try:
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            # dets = np.loadtxt(file, delimiter=' ')  # load detections, N x 25
            list_data = []
            with open(file, 'r') as read_f:
                list_lines = read_f.readlines()
                if len(list_lines) == 0:
                    return [], False
                for line in list_lines:
                    line = line.strip('\n').split(' ')
                    if line[1] == cat:
                        line[1] = type_str2id[line[1]]
                        line = [float(i) for i in line]
                        list_data.append(np.array(line))
            dets = np.array(list_data)
            # print(dets)

        if len(dets.shape) == 1:
            dets = np.expand_dims(dets, axis=0)
        if dets.shape[1] == 0:  # if no detection in a sequence
            return [], False
        else:
            return dets, True
    except:
        print('cur seq dtc file not exsit!!!')
        return [], False

def get_frame_det(dets_all, frame):
    # get irrelevant information associated with an object, not used for associationg
    ori_array = dets_all[dets_all[:, 0] == frame, 5].reshape((-1, 1))  # alpha
    type_array = dets_all[dets_all[:, 0] == frame, 1].reshape((-1, 1))  # type
    bbox_array = dets_all[dets_all[:, 0] == frame, 6:10]  # 2d bbox
    score_array = dets_all[dets_all[:, 0] == frame, 22].reshape((-1, 1))  # det score
    # other_array = dets_all[dets_all[:, 0] == frame, 1:7]  # other information, e.g, 2D box, ...
    # alpha type x1 y1 x2 y2 det_score
    additional_info = np.concatenate((ori_array, type_array, bbox_array, score_array), axis=1)

    # get 3D camera box h w l cam_x cam_y cam_z ry
    dets = dets_all[dets_all[:, 0] == frame, 10:17]

    # get 3D lidar box x y z rz
    lidar_info = dets_all[dets_all[:, 0] == frame, 17:21]
    dets_frame = {'dets': dets, 'info': additional_info, 'lidar_xyzr': lidar_info}
    return dets_frame


def load_highlight(file):
    # load file with each line containing seq_id, frame_id, ID, error_type
    # used to highlight errors in the video visualization, such as IDS, FP
    # but cannot be used to highlight FRAG (next frame) and FN now

    highlight, _ = load_txt_file(file)
    data_dict = dict()
    for data_tmp in highlight:

        # parse data in each line, seq_id, frame_id, ID, error_type
        seq_id, frame_id, id_tmp, err_type = data_tmp.split(', ')
        seq_id, frame_id, id_tmp = int(seq_id), int(frame_id), int(id_tmp)

        # create entry in the dictionary, with key -> seq,
        # val -> dict{key -> frame, value -> dict{key -> ID, value -> err}}
        if seq_id not in data_dict.keys():
            data_dict[seq_id] = dict()
        if frame_id not in data_dict[seq_id]:
            data_dict[seq_id][frame_id] = dict()
        assert id_tmp not in data_dict[seq_id][frame_id], 'error, each ID should not be highlighted twice'

        # assign the err_type to the ID
        data_dict[seq_id][frame_id][id_tmp] = err_type

    return data_dict


#################### saving

def get_saving_dir(eval_dir_dict, seq_name, save_dir, num_hypo):
    # create dir and file for saving
    eval_file_dict, save_trk_dir = dict(), dict()
    for index in range(num_hypo):
        eval_file_dict[index] = os.path.join(eval_dir_dict[index], seq_name + '.txt')
        eval_file_dict[index] = open(eval_file_dict[index], 'w')
        save_trk_dir[index] = os.path.join(save_dir, 'trk_withid_%d' % index, seq_name)
        # ./results/KITTI/pointrcnn_Car_val_H1/trk_withid_0/0000
        mkdir_if_missing(save_trk_dir[index])
    affinity_dir = os.path.join(save_dir, 'affi', seq_name)
    # ./results/KITTI/pointrcnn_Car_val_H1/affi/0000
    mkdir_if_missing(affinity_dir)
    affinity_vis = os.path.join(save_dir, 'affi_vis', seq_name)
    # ./results/KITTI/pointrcnn_Car_val_H1/affi_vis/0000
    mkdir_if_missing(affinity_vis)

    return eval_file_dict, save_trk_dir, affinity_dir, affinity_vis


def save_results(res, save_trk_file, eval_file, frame, score_threshold):
    type_id2str = {0: 'Trafficcone', 1: 'Pedestrian', 2: 'Car', 3: 'Cyclist', 4: 'Van', 5: 'Truck', 6: 'Bus',
                   7: 'Tricyclist', 8: 'Motorcyclist', 9: 'Barrowlist'}
    # box3d in the format of h, w, l, x, y, z, theta in camera coordinate
    bbox3d_tmp, id_tmp, ori_tmp, type_tmp, bbox2d_tmp_trk, conf_tmp, lidar_xyzr = \
        res[0:7], res[7], res[8], type_id2str[int(res[9])], res[10:14], res[14], res[15:19]

    # save in detection format with track ID, can be used for dection evaluation and tracking visualization
    str_to_srite = '%s -1 -1 %f %f %f %f %f %f %f %f %f %f %f %f %f %d\n' % (type_tmp, ori_tmp,
                                                                             bbox2d_tmp_trk[0], bbox2d_tmp_trk[1], bbox2d_tmp_trk[2],
                                                                             bbox2d_tmp_trk[3],
                                                                             bbox3d_tmp[0], bbox3d_tmp[1], bbox3d_tmp[2], bbox3d_tmp[3],
                                                                             bbox3d_tmp[4], bbox3d_tmp[5], bbox3d_tmp[6], conf_tmp, id_tmp)
    save_trk_file.write(str_to_srite)

    # save in tracking format, for 3D MOT evaluation
    if conf_tmp >= score_threshold:
        # str_to_srite = '%s %d %s 0 0 %f %f %f %f %f %f %f %f %f %f %f %f %f\n' % (frame, id_tmp,
        #                                                                           type_tmp, ori_tmp, bbox2d_tmp_trk[0], bbox2d_tmp_trk[1],
        #                                                                           bbox2d_tmp_trk[2], bbox2d_tmp_trk[3],
        #                                                                           bbox3d_tmp[0], bbox3d_tmp[1], bbox3d_tmp[2],
        #                                                                           bbox3d_tmp[3], bbox3d_tmp[4], bbox3d_tmp[5],
        #                                                                           bbox3d_tmp[6], conf_tmp)
        str_to_srite = '%06d %s %d 0 0 %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f -1 -1 %f -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n' % (
            int(frame), type_tmp, id_tmp, ori_tmp, bbox2d_tmp_trk[0], bbox2d_tmp_trk[1], bbox2d_tmp_trk[2], bbox2d_tmp_trk[3], bbox3d_tmp[0],
            bbox3d_tmp[1], bbox3d_tmp[2], bbox3d_tmp[3], bbox3d_tmp[4], bbox3d_tmp[5], bbox3d_tmp[6], lidar_xyzr[0],lidar_xyzr[1],lidar_xyzr[2],lidar_xyzr[3], conf_tmp)
        eval_file.write(str_to_srite)


def save_affinity(affi_data, save_path):
    ######### save txt files for faster check, with aligned formatting

    # compute the number of digit for the largest values for better alignment of saving
    min_val, max_val = np.min(affi_data), np.max(affi_data)
    biggest = max(abs(min_val), abs(max_val))
    num_digit = 0
    while True:
        if biggest < 1: break
        num_digit += 1
        biggest = biggest / 10.0

    # see if there is a negative sign, so need to a one more digit
    negative = False
    if min_val < 0: negative = True
    if negative: num_digit += 1

    # add digits depending on the decimals we want to preserve
    decimals = 2
    num_digit += decimals + 1  # meaning that we want to preserve the dot plus the decimals

    # save
    fmt = '%%%d.%df' % (num_digit, decimals)
    np.savetxt(save_path, affi_data, fmt=fmt, delimiter=', ')


def combine_files(file_list, save_path, sort=True):
    # combine txt files and sort them in frame order, used to collect results from
    # different class categories

    # collect all files
    data_all = list()
    for file_tmp in file_list:
        try:
            data, num_lines = load_txt_file(file_tmp)
            data_all += data
        except:
            print('file_tmp not exist: ',file_tmp )


    # sort based on frame number
    if sort:
        data_all.sort(key=lambda x: int(x.split(' ')[0]))

    save_txt_file(data_all, save_path)


import numpy as np
from numba import jit
from scipy.optimize import linear_sum_assignment
from AB3DMOT_libs.dist_metrics import iou, dist3d, dist_ground, m_distance

def compute_affinity(dets, trks, metric, trk_inv_inn_matrices=None):
	# compute affinity matrix

	aff_matrix = np.zeros((len(dets), len(trks)), dtype=np.float32)
	for d, det in enumerate(dets):
		for t, trk in enumerate(trks):
			try:
				# choose to use different distance metrics
				if 'iou' in metric:    	  dist_now = iou(det, trk, metric)            
				elif metric == 'm_dis':   dist_now = -m_distance(det, trk, trk_inv_inn_matrices[t])
				elif metric == 'euler':   dist_now = -m_distance(det, trk, None)
				elif metric == 'dist_2d': dist_now = -dist_ground(det, trk)              	
				elif metric == 'dist_3d': dist_now = -dist3d(det, trk)              				
				else: assert False, 'error'
			except:
				print('cal iou error!!!!!!!')

				if metric in ['giou_2d', 'giou_3d']:    dist_now = -1.0
				elif metric in ['iou_2d', 'iou_3d']:    dist_now = 0.0
				elif metric in ['dist_3d', 'dist_2d', 'm_dis']: dist_now = -100
				else: assert False, 'error'

			aff_matrix[d, t] = dist_now

	return aff_matrix

def greedy_matching(cost_matrix):
    # association in the greedy manner
    # refer to https://github.com/eddyhkchiu/mahalanobis_3d_multi_object_tracking/blob/master/main.py

    num_dets, num_trks = cost_matrix.shape[0], cost_matrix.shape[1]

    # sort all costs and then convert to 2D
    distance_1d = cost_matrix.reshape(-1)
    index_1d = np.argsort(distance_1d)
    index_2d = np.stack([index_1d // num_trks, index_1d % num_trks], axis=1)

    # assign matches one by one given the sorting, but first come first serves
    det_matches_to_trk = [-1] * num_dets
    trk_matches_to_det = [-1] * num_trks
    matched_indices = []
    for sort_i in range(index_2d.shape[0]):
        det_id = int(index_2d[sort_i][0])
        trk_id = int(index_2d[sort_i][1])

        # if both id has not been matched yet
        if trk_matches_to_det[trk_id] == -1 and det_matches_to_trk[det_id] == -1:
            trk_matches_to_det[trk_id] = det_id
            det_matches_to_trk[det_id] = trk_id
            matched_indices.append([det_id, trk_id])

    return np.asarray(matched_indices)

def data_association(dets, trks, metric, threshold, algm='greedy', \
	trk_innovation_matrix=None, hypothesis=1):   
	"""
	Assigns detections to tracked object

	dets:  a list of Box3D object
	trks:  a list of Box3D object

	Returns 3 lists of matches, unmatched_dets and unmatched_trks, and total cost, and affinity matrix
	"""

	# if there is no item in either row/col, skip the association and return all as unmatched
	aff_matrix = np.zeros((len(dets), len(trks)), dtype=np.float32)
	if len(trks) == 0: 
		return np.empty((0, 2), dtype=int), np.arange(len(dets)), [], 0, aff_matrix
	if len(dets) == 0: 
		return np.empty((0, 2), dtype=int), [], np.arange(len(trks)), 0, aff_matrix		
	
	# prepare inverse innovation matrix for m_dis
	if metric == 'm_dis':
		assert trk_innovation_matrix is not None, 'error'
		trk_inv_inn_matrices = [np.linalg.inv(m) for m in trk_innovation_matrix]
	else:
		trk_inv_inn_matrices = None

	# compute affinity matrix
	aff_matrix = compute_affinity(dets, trks, metric, trk_inv_inn_matrices)

	# association based on the affinity matrix
	if hypothesis == 1:
		if algm == 'hungar':
			row_ind, col_ind = linear_sum_assignment(-aff_matrix)      	# hougarian algorithm
			matched_indices = np.stack((row_ind, col_ind), axis=1)
		elif algm == 'greedy':
			matched_indices = greedy_matching(-aff_matrix) 				# greedy matching
		else: assert False, 'error'
	else:
		cost_list, hun_list = best_k_matching(-aff_matrix, hypothesis)

	# compute total cost
	cost = 0
	for row_index in range(matched_indices.shape[0]):
		cost -= aff_matrix[matched_indices[row_index, 0], matched_indices[row_index, 1]]

	# save for unmatched objects
	unmatched_dets = []
	for d, det in enumerate(dets):
		if (d not in matched_indices[:, 0]): unmatched_dets.append(d)
	unmatched_trks = []
	for t, trk in enumerate(trks):
		if (t not in matched_indices[:, 1]): unmatched_trks.append(t)

	# filter out matches with low affinity
	matches = []
	for m in matched_indices:
		if (aff_matrix[m[0], m[1]] < threshold):
			unmatched_dets.append(m[0])
			unmatched_trks.append(m[1])
		else: matches.append(m.reshape(1, 2))
	if len(matches) == 0: 
		matches = np.empty((0, 2),dtype=int)
	else: matches = np.concatenate(matches, axis=0)

	return matches, np.array(unmatched_dets), np.array(unmatched_trks), cost, aff_matrix

import numpy as np, json
from numba import jit
from xinshuo_io import fileparts

@jit
def rotx(t):
    """Rotation about the x-axis."""
    c = np.cos(t)
    s = np.sin(t)
    return np.array([[1,  0,  0],
                     [0,  c, -s],
                     [0,  s,  c]])

@jit
def roty(t):
    """Rotation about the y-axis."""
    c = np.cos(t)
    s = np.sin(t)
    return np.array([[c,  0,  s],
                     [0,  1,  0],
                     [-s, 0,  c]])

@jit
def rotz(t):
    """Rotation about the z-axis."""
    c = np.cos(t)
    s = np.sin(t)
    return np.array([[c, -s,  0],
                     [s,  c,  0],
                     [0,  0,  1]])

@jit
def transform_from_rot_trans(R, t):
    """Transforation matrix from rotation matrix and translation vector."""
    R = R.reshape(3, 3)
    t = t.reshape(3, 1)
    return np.vstack((np.hstack([R, t]), [0, 0, 0, 1]))

@jit
def _poses_from_oxts(oxts_packets):

    """Helper method to compute SE(3) pose matrices from OXTS packets."""
    # https://github.com/pratikac/kitti/blob/master/pykitti/raw.py
        
    er = 6378137.  # earth radius (approx.) in meters

    # compute scale from first lat value
    scale = np.cos(oxts_packets[0].lat * np.pi / 180.)

    t_0 = []    # initial position
    poses = []  # list of poses computed from oxts
    for packet in oxts_packets:
        # Use a Mercator projection to get the translation vector
        tx = scale * packet.lon * np.pi * er / 180.
        ty = scale * er * \
            np.log(np.tan((90. + packet.lat) * np.pi / 360.))
        tz = packet.alt
        t = np.array([tx, ty, tz])

        # We want the initial position to be the origin, but keep the ENU
        # coordinate system
        if len(t_0) == 0:
            t_0 = t

        # Use the Euler angles to get the rotation matrix
        Rx = rotx(packet.roll)
        Ry = roty(packet.pitch)
        Rz = rotz(packet.yaw)
        R = Rz.dot(Ry.dot(Rx))

        # Combine the translation and rotation into a homogeneous transform
        poses.append(transform_from_rot_trans(R, t - t_0))      # store transformation matrix

    return np.stack(poses)

def load_oxts(oxts_file):
    """Load OXTS data from file."""
    # https://github.com/pratikac/kitti/blob/master/pykitti/raw.py

    ext = fileparts(oxts_file)[-1]
    if ext == '.json':        # loading for nuScenes-to-KITTI data
        with open(oxts_file, 'r') as file: 
            imu_poses = json.load(file)
            imu_poses = np.array(imu_poses)

        return imu_poses

    # Extract the data from each OXTS packe per dataformat.txt
    from collections import namedtuple
    OxtsPacket = namedtuple('OxtsPacket',
                            'lat, lon, alt, ' +
                            'roll, pitch, yaw, ' +
                            'vn, ve, vf, vl, vu, ' +
                            'ax, ay, az, af, al, au, ' +
                            'wx, wy, wz, wf, wl, wu, ' +
                            'pos_accuracy, vel_accuracy, ' +
                            'navstat, numsats, ' +
                            'posmode, velmode, orimode')

    oxts_packets = []
    with open(oxts_file, 'r') as f:
        for line in f.readlines():
            line = line.split()
            # Last five entries are flags and counts
            line[:-5] = [float(x) for x in line[:-5]]
            line[-5:] = [int(float(x)) for x in line[-5:]]

            data = OxtsPacket(*line)
            oxts_packets.append(data)

    # Precompute the IMU poses in the world frame
    imu_poses = _poses_from_oxts(oxts_packets)      # seq_frames x 4 x 4

    return imu_poses
    
def get_ego_traj(imu_poses, frame, pref, futf, inverse=False, only_fut=False):
    # compute the motion of the ego vehicle for ego-motion compensation
    # using the current frame as the coordinate
    # current frame means one frame prior to future, and also the last frame of the past
    
    # compute the start and end frame to retrieve the imu poses
    num_frames = imu_poses.shape[0]
    assert frame >= 0 and frame <= num_frames - 1, 'error'
    if inverse:             # pre and fut are inverse, i.e., inverse ego motion compensation
        start = min(frame+pref-1, num_frames-1)
        end   = max(frame-futf-1, -1)
        index = [*range(start, end, -1)]
    else:
        start = max(frame-pref+1, 0)
        end   = min(frame+futf+1, num_frames)
        index = [*range(start, end)]
    
    # compute frame offset due to sequence boundary
    left  = start - (frame-pref+1)
    right = (frame+futf+1) - end

    # compute relative transition compared to the current frame of the ego
    all_world_xyz = imu_poses[index, :3, 3]    # N x 3, only translation, frame = 10-19 for fut only (0-19 for all)
    cur_world_xyz = imu_poses[frame]                        # 4 x 4, frame = 9
    T_world2imu   = np.linalg.inv(cur_world_xyz)            
    all_world_hom = np.concatenate((all_world_xyz, np.ones((all_world_xyz.shape[0], 1))), axis=1)       # N x 4
    all_xyz = all_world_hom.dot(T_world2imu.T)[:, :3]       # N x 3

    # compute relative rotation compared to the current frame of the ego
    all_world_rot = imu_poses[index, :3, :3]   # N x 3 x 3, only rotation
    cur_world_rot = imu_poses[frame, :3, :3]                # 3 x 3, frame = 9
    T_world2imu_rot = np.linalg.inv(cur_world_rot)        
    all_rot_list = list()
    for frame in range(all_world_rot.shape[0]):
        all_rot_tmp = all_world_rot[frame].dot(T_world2imu_rot)   # 3 x 3
        all_rot_list.append(all_rot_tmp)
    
    if only_fut:
        fut_xyz, fut_rot_list = all_xyz[pref-left:], all_rot_list[pref-left:]
        return fut_xyz, fut_rot_list, left, right
    else:
        return all_xyz, all_rot_list, left, right

def egomotion_compensation_ID(traj_id, calib, ego_rot_imu, ego_xyz_imu, left, right, mask=None):
    # traj_id           # N x 3
    # ego_imu can have frames less than pre+fut due to sequence boundary

    # convert trajectory data from rect to IMU for ego-motion compensation
    traj_id_imu = calib.rect_to_imu(traj_id)        # less_pre x 3

    if mask is not None:
        good_index = np.where(mask == 1)[0]
        good_index = (good_index - left).tolist()
        ego_rot_imu = np.array(ego_rot_imu)
        ego_rot_imu = ego_rot_imu[good_index, :].tolist()

    # correct rotation
    for frame in range(traj_id_imu.shape[0]):
        traj_id_imu[frame, :] = np.matmul(ego_rot_imu[frame], traj_id_imu[frame, :].reshape((3, 1))).reshape((3, ))

    # correct transition
    if mask is not None:
        traj_id_imu += ego_xyz_imu[good_index, :]   # les_frames x 3, TODO, need to test which is correct
    else:
        traj_id_imu += ego_xyz_imu[:traj_id_imu.shape[0], :]   # les_frames x 3

    # convert trajectory data back to rect coordinate for visualization
    traj_id_rect = calib.imu_to_rect(traj_id_imu)

    return traj_id_rect



import torch.nn as nn


class BaseModel(nn.Module):
    def __init__(self, *args):
        super().__init__()

    def forward(self, inf_frame, veh_frame, delta_t, filt, *args):
        raise NotImplementedError

    @staticmethod
    def add_arguments(parser):
        pass


import sys
import os
import os.path as osp

sys.path.append("..")
sys.path.extend([os.path.join(root, name) for root, dirs, _ in os.walk("../") for name in dirs])

from detection_models import *

SUPPROTED_MODELS = {
    "single_side": SingleSide,
    "late_fusion": LateFusion,
    "early_fusion": EarlyFusion,
    "veh_only": VehOnly,
    "inf_only": InfOnly,
    "feature_fusion":FeatureFusion,
    "feature_flow":FeatureFlow
}


# TODO: add MLP-based time compensator


# TODO: add conv layers to build detection models in the future versions


import numpy as np
import sys


class Channel(object):
    def __init__(self):
        self.data = {}
        self.cur_bytes = 0
        self.all_bytes = 0
        self.num_frames = 0

    def send(self, key, val):
        self.data[key] = val
        if isinstance(val, np.ndarray):
            cur_bytes = val.size * 8
        elif type(val) in [int, float]:
            cur_bytes = 8
        elif isinstance(val, list):
            cur_bytes = np.array(val).size * 8
        elif type(val) is str:
            cur_bytes = len(val)
        if key.endswith("boxes"):
            cur_bytes = cur_bytes * 7 / 24
        self.cur_bytes += cur_bytes

    def flush(self):
        self.data = {}
        self.all_bytes += self.cur_bytes
        self.cur_bytes = 0
        self.num_frames += 1

    def receive(self, key):
        return self.data[key] if key in self.data else None

    def average_bytes(self):
        num_frames = self.num_frames if len(self.data) == 0 else self.num_frames + 1
        return self.all_bytes / num_frames

    def __str__(self):
        return str(
            {
                "data": self.data,
                "cur_bytes": self.cur_bytes,
                "all_bytes": self.all_bytes,
                "num_frames": self.num_frames if len(self.data) == 0 else self.num_frames + 1,
            }
        )


import numpy as np
import pickle
from scipy.optimize import linear_sum_assignment
from sklearn.linear_model import LinearRegression

inf = 1e42  # infinity


def box2info(boxes):
    num_boxes = boxes.shape[0]
    center = np.mean(boxes, axis=1)
    size = np.zeros((num_boxes, 3))
    size[:, 0] = (
        np.sum((boxes[:, 2, :] - boxes[:, 1, :]) ** 2, axis=1) ** 0.5
        + np.sum((boxes[:, 6, :] - boxes[:, 5, :]) ** 2, axis=1) ** 0.5
    ) / 2
    size[:, 1] = (
        np.sum((boxes[:, 4, :] - boxes[:, 0, :]) ** 2, axis=1) ** 0.5
        + np.sum((boxes[:, 6, :] - boxes[:, 2, :]) ** 2, axis=1) ** 0.5
    ) / 2
    size[:, 2] = (
        boxes[:, 1, :]
        + boxes[:, 2, :]
        + boxes[:, 5, :]
        + boxes[:, 6, :]
        - boxes[:, 0, :]
        - boxes[:, 3, :]
        - boxes[:, 4, :]
        - boxes[:, 7, :]
    )[:, 2] / 4
    return center, size


class BBoxList(object):
    def __init__(self, boxes, dir, label, score, class_score=None):
        """
        Data format:
        pos0, pos1, dir: numpy array [num_boxes, dim], positions and directions of the bounding box, dim = 2/3
        score: numpy array [num_boxes], confidence of each box
        class_score: numpy array [num_boxes, num_classes], predicted probability of each class
        t: float, timestamp
        """
        self.num_boxes = boxes.shape[0]
        self.num_dims = boxes.shape[2]
        self.num_classes = class_score.shape[1] if class_score is not None else None
        self.boxes = boxes
        self.dir = dir
        self.label = label
        self.confidence = score
        self.class_score = class_score
        self.center, self.size = box2info(self.boxes)

    def __get_item__(self, key):
        # to be implemented
        pass

    def move_center(self, offset):
        delta = np.array(offset)  # N * 2
        if self.num_dims == 3:
            delta = np.insert(delta, 2, values=np.zeros(self.num_boxes), axis=1)  # N * 3
        delta = delta[:, np.newaxis, :]  # N * 1 * 3
        delta = np.repeat(delta, 8, axis=1)  # N * 8 * 3
        self.boxes += delta

    # TODO: implement the following apis
    def merge(self, box1):
        pass

    def filter(self, filter):
        pass

    def match(self, box1):
        pass


class StaticBBoxList(BBoxList):
    def __init__(self, filename, data_format="8points_pkl"):
        if data_format == "8points_pkl":
            """
            data = {
                'info': id,
                'timestamp': 时间戳
                'boxes_3d': 预测的3D box的八个顶点, [N, 8, 3]
                'arrows': box朝向，每个box两个点(起始点和结束点)，[N, 2, 3]
                'scores_3d': 各个box置信度, [N,]
                'labels_3d': 各个box的标签种类, [N,]
                'points': 全范围点云（输入模型的点云范围较小，所以只预测了一部分范围的box）
            }
            """

            def load_pkl(path):
                with open(path, "rb") as f:
                    return pickle.load(f)

            data = load_pkl(filename)
            boxes = np.array(data["boxes_3d"])
            self.boxes = boxes
            self.num_boxes = boxes.shape[0]
            self.num_dims = 3
            self.center = np.sum(boxes, axis=1) / 8
            self.size = np.zeros((self.num_boxes, 3))
            self.size[:, 0] = (
                np.sum((boxes[:, 2, :] - boxes[:, 1, :]) ** 2, axis=1) ** 0.5
                + np.sum((boxes[:, 6, :] - boxes[:, 5, :]) ** 2, axis=1) ** 0.5
            ) / 2
            self.size[:, 1] = (
                np.sum((boxes[:, 4, :] - boxes[:, 0, :]) ** 2, axis=1) ** 0.5
                + np.sum((boxes[:, 6, :] - boxes[:, 2, :]) ** 2, axis=1) ** 0.5
            ) / 2
            self.size[:, 2] = (
                boxes[:, 1, :]
                + boxes[:, 2, :]
                + boxes[:, 5, :]
                + boxes[:, 6, :]
                - boxes[:, 0, :]
                - boxes[:, 3, :]
                - boxes[:, 4, :]
                - boxes[:, 7, :]
            )[:, 2] / 4

            """
            arrows = np.array(data['arrows'])
            self.arrows = arrows
            self.dir = arrows[:, 1, :] - arrows[:, 0, :]
            self.features = np.concatenate((self.center, self.size), axis=1)
            """
            self.class_score = None
            self.confidence = np.array(data["scores_3d"])
            self.num_classes = 26

            self.label = np.array(data["labels_3d"])


class Matcher(object):
    def __init__(self):
        pass

    def match(self, frame1, frame2):
        raise NotImplementedError


class EuclidianMatcher(Matcher):
    def __init__(self, filter_func=None, delta_x=0.0, delta_y=0.0, delta_z=0.0):
        super(EuclidianMatcher, self).__init__()
        self.filter_func = filter_func
        self.delta = [delta_x, delta_y, delta_z]

    def match(self, frame1, frame2):
        cost_matrix = np.zeros((frame1.num_boxes, frame2.num_boxes))
        for i in range(frame1.num_boxes):
            for j in range(frame2.num_boxes):
                cost_matrix[i][j] = np.sum((frame1.center[i] + self.delta - frame2.center[j]) ** 2) ** 0.5
                if self.filter_func is not None and not self.filter_func(frame1, frame2, i, j):
                    cost_matrix[i][j] = 1e6
        # print(cost_matrix, linear_sum_assignment(cost_matrix))
        index1, index2 = linear_sum_assignment(cost_matrix)
        accepted = []
        cost = 0
        for i in range(len(index1)):
            if cost_matrix[index1[i]][index2[i]] < 1e5:
                accepted.append(i)
                cost += cost_matrix[index1[i]][index2[i]]
        return (
            index1[accepted],
            index2[accepted],
            0 if len(accepted) == 0 else cost / len(accepted),
        )


class Compensator(object):
    def __init__(self, *args):
        pass

    def compensate(self, frame1, frame2, *args):
        raise NotImplementedError


class SpaceCompensator(Compensator):
    def __init__(self, minx=-1.0, maxx=1.0, miny=-1.0, maxy=1.0, iters=2, steps=5):
        self.minx = minx
        self.maxx = maxx
        self.miny = miny
        self.maxy = maxy
        self.iters = iters
        self.steps = steps

    def compensate(self, frame1, frame2):
        minx = self.minx
        maxx = self.maxx
        miny = self.miny
        maxy = self.maxy
        for iter in range(self.iters):
            best_x = 0
            best_y = 0
            mn = 1e6
            mx = 0
            for x in range(self.steps):
                for y in range(self.steps):
                    delta_x = minx + (maxx - minx) / self.steps * x
                    delta_y = miny + (maxy - miny) / self.steps * y
                    cost = np.zeros((frame1.num_boxes, frame2.num_boxes))
                    for i in range(frame1.num_boxes):
                        for j in range(frame2.num_boxes):
                            size = frame1.size[i]
                            diff = np.abs(frame1.center[i] + np.array([delta_x, delta_y, 0]) - frame2.center[j]) / size
                            cost[i][j] = np.sum(diff ** 2) ** 0.5
                            if diff[0] > 2 or diff[1] > 2 or diff[2] > 2:
                                cost[i][j] = 1e6
                    index1, index2 = linear_sum_assignment(cost)
                    val = 0
                    cnt = 0
                    for i in range(len(index1)):
                        if cost[index1[i]][index2[i]] < 1e5:
                            val += cost[index1[i]][index2[i]]
                            cnt += 1
                    if cnt > mx or cnt == mx and val < mn:
                        mx = cnt
                        mn = val
                        best_x = delta_x
                        best_y = delta_y
            # print(iter, mx, mn, best_x, best_y)
            if mx == 0:
                minx = 0
                maxx = 0
                miny = 0
                maxy = 0
                break
            range_x = (maxx - minx) / self.steps / 2
            range_y = (maxy - miny) / self.steps / 2
            minx = best_x - range_x
            maxx = best_x + range_x
            miny = best_y - range_y
            maxy = best_y + range_y

        delta_x, delta_y = (minx + maxx) / 2, (miny + maxy) / 2
        offset = np.ones((frame1.num_boxes, 2))
        offset[:, 0] *= delta_x
        offset[:, 1] *= delta_y
        return offset


class TimeCompensator(Compensator):
    def __init__(self, matcher):
        self.matcher = matcher

    def compensate(self, frame1, frame2, delta1, delta2):
        ind_prev, ind_cur, _ = self.matcher.match(frame1, frame2)
        if len(ind_prev) < 1:
            avg_offset = np.mean(frame2.center, axis=0) - np.mean(frame1.center, axis=0)
            avg_offset *= delta2 / delta1
            offset = np.ones((frame2.num_boxes, 2))
            offset[:, 0] *= avg_offset[0]
            offset[:, 1] *= avg_offset[1]
        else:
            x = frame1.center[ind_prev][:, :2]
            y = frame2.center[ind_cur][:, :2] - frame1.center[ind_prev][:, :2]
            model = LinearRegression()
            model.fit(x, y)
            offset = model.predict(frame2.center[:, :2]) * delta2 / delta1
            offset[ind_cur] = y * delta2 / delta1
        return offset


class BasicFuser(object):
    def __init__(self, perspective, trust_type, retain_type):
        # perspective:
        # infrastructure / vehicle
        # trust type:
        # lc (Linear Combination) / max
        # retain type:
        # all / main / none
        self.perspective = perspective
        self.trust_type = trust_type
        self.retain_type = retain_type

    def fuse(self, frame_r, frame_v, ind_r, ind_v):
        if self.perspective == "infrastructure":
            frame1 = frame_r
            frame2 = frame_v
            ind1 = ind_r
            ind2 = ind_v
        elif self.perspective == "vehicle":
            frame1 = frame_v
            frame2 = frame_r
            ind1 = ind_v
            ind2 = ind_r

        confidence1 = np.array(frame1.confidence[ind1])
        confidence2 = np.array(frame2.confidence[ind2])
        if self.trust_type == "max":
            confidence1 = confidence1 > confidence2
            confidence2 = 1 - confidence1
        elif self.trust_type == "main":
            confidence1 = np.ones_like(confidence1)
            confidence2 = 1 - confidence1

        center = frame1.center[ind1] * np.repeat(confidence1[:, np.newaxis], 3, axis=1) + frame2.center[
            ind2
        ] * np.repeat(confidence2[:, np.newaxis], 3, axis=1)
        boxes = (
            frame1.boxes[ind1]
            + np.repeat(center[:, np.newaxis, :], 8, axis=1)
            - np.repeat(frame1.center[ind1][:, np.newaxis, :], 8, axis=1)
        )
        label = frame1.label[ind1]
        confidence = frame1.confidence[ind1] * confidence1 + frame2.confidence[ind2] * confidence2
        # arrows = frame1.arrows[ind1]

        boxes_u = []
        label_u = []
        confidence_u = []
        # arrows_u = []
        if self.retain_type in ["all", "main"]:
            for i in range(frame1.num_boxes):
                if i not in ind1 and frame1.label[i] != -1:
                    boxes_u.append(frame1.boxes[i])
                    label_u.append(frame1.label[i])
                    confidence_u.append(frame1.confidence[i])
                    # arrows_u.append(frame1.arrows[i])

        if self.retain_type in ["all"]:
            for i in range(frame2.num_boxes):
                if i not in ind2 and frame2.label[i] != -1:
                    boxes_u.append(frame2.boxes[i])
                    label_u.append(frame2.label[i])
                    confidence_u.append(frame2.confidence[i] * 0.4)
                    # arrows_u.append(frame2.arrows[i])
        if len(boxes_u) == 0:
            result_dict = {
                "boxes_3d": boxes,
                # "arrows": arrows,
                "labels_3d": label,
                "scores_3d": confidence,
            }
        else:
            result_dict = {
                "boxes_3d": np.concatenate((boxes, np.array(boxes_u)), axis=0),
                # "arrows": np.concatenate((arrows, np.array(arrows_u)), axis=0),
                "labels_3d": np.concatenate((label, np.array(label_u)), axis=0),
                "scores_3d": np.concatenate((confidence, np.array(confidence_u)), axis=0),
            }
        return result_dict


# Comment: Not sure what it is used for, move it here.
# Copyright (c) OpenMMLab. All rights reserved.
import mmcv
import numpy as np
import re
import torch
from copy import deepcopy
from mmcv.parallel import collate, scatter
from mmcv.runner import load_checkpoint
from os import path as osp

from mmdet3d.core import (
    Box3DMode,
    CameraInstance3DBoxes,
    DepthInstance3DBoxes,
    LiDARInstance3DBoxes,
    show_multi_modality_result,
    show_result,
    show_seg_result,
)
from mmdet3d.core.bbox import get_box_type
from mmdet3d.datasets.pipelines import Compose
from mmdet3d.models import build_model


def convert_SyncBN(config):
    """Convert config's naiveSyncBN to BN.

    Args:
         config (str or :obj:`mmcv.Config`): Config file path or the config
            object.
    """
    if isinstance(config, dict):
        for item in config:
            if item == "norm_cfg":
                config[item]["type"] = config[item]["type"].replace("naiveSyncBN", "BN")
            else:
                convert_SyncBN(config[item])


def init_model(config, checkpoint=None, device="cuda:0"):
    """Initialize a model from config file, which could be a 3D detector or a
    3D segmentor.

    Args:
        config (str or :obj:`mmcv.Config`): Config file path or the config
            object.
        checkpoint (str, optional): Checkpoint path. If left as None, the model
            will not load any weights.
        device (str): Device to use.

    Returns:
        nn.Module: The constructed detector.
    """
    if isinstance(config, str):
        config = mmcv.Config.fromfile(config)
    elif not isinstance(config, mmcv.Config):
        raise TypeError("config must be a filename or Config object, " f"but got {type(config)}")
    config.model.pretrained = None
    convert_SyncBN(config.model)
    config.model.train_cfg = None
    model = build_model(config.model, test_cfg=config.get("test_cfg"))
    if checkpoint is not None:
        checkpoint = load_checkpoint(model, checkpoint)
        if "CLASSES" in checkpoint["meta"]:
            model.CLASSES = checkpoint["meta"]["CLASSES"]
        else:
            model.CLASSES = config.class_names
        if "PALETTE" in checkpoint["meta"]:  # 3D Segmentor
            model.PALETTE = checkpoint["meta"]["PALETTE"]
    model.cfg = config  # save the config in the model for convenience
    model.to(device)
    model.eval()
    return model


def inference_detector(model, pcd):
    """Inference point cloud with the detector.

    Args:
        model (nn.Module): The loaded detector.
        pcd (str): Point cloud files.

    Returns:
        tuple: Predicted results and data from pipeline.
    """
    cfg = model.cfg
    device = next(model.parameters()).device  # model device
    # build the data pipeline
    test_pipeline = deepcopy(cfg.data.test.pipeline)
    test_pipeline = Compose(test_pipeline)
    box_type_3d, box_mode_3d = get_box_type(cfg.data.test.box_type_3d)
    data = dict(
        pts_filename=pcd,
        box_type_3d=box_type_3d,
        box_mode_3d=box_mode_3d,
        # for ScanNet demo we need axis_align_matrix
        ann_info=dict(axis_align_matrix=np.eye(4)),
        sweeps=[],
        # set timestamp = 0
        timestamp=[0],
        img_fields=[],
        bbox3d_fields=[],
        pts_mask_fields=[],
        pts_seg_fields=[],
        bbox_fields=[],
        mask_fields=[],
        seg_fields=[],
    )
    data = test_pipeline(data)
    data = collate([data], samples_per_gpu=1)
    if next(model.parameters()).is_cuda:
        # scatter to specified GPU
        data = scatter(data, [device.index])[0]
    else:
        # this is a workaround to avoid the bug of MMDataParallel
        data["img_metas"] = data["img_metas"][0].data
        data["points"] = data["points"][0].data
    # forward the model
    with torch.no_grad():
        result = model(return_loss=False, rescale=True, **data)
    return result, data


def inference_multi_modality_detector(model, pcd, image, ann_file):
    """Inference point cloud with the multi-modality detector.

    Args:
        model (nn.Module): The loaded detector.
        pcd (str): Point cloud files.
        image (str): Image files.
        ann_file (str): Annotation files.

    Returns:
        tuple: Predicted results and data from pipeline.
    """
    cfg = model.cfg
    device = next(model.parameters()).device  # model device
    # build the data pipeline
    test_pipeline = deepcopy(cfg.data.test.pipeline)
    test_pipeline = Compose(test_pipeline)
    box_type_3d, box_mode_3d = get_box_type(cfg.data.test.box_type_3d)
    # get data info containing calib
    data_infos = mmcv.load(ann_file)
    image_idx = int(re.findall(r"\d+", image)[-1])  # xxx/sunrgbd_000017.jpg
    for x in data_infos:
        if int(x["image"]["image_idx"]) != image_idx:
            continue
        info = x
        break
    data = dict(
        pts_filename=pcd,
        img_prefix=osp.dirname(image),
        img_info=dict(filename=osp.basename(image)),
        box_type_3d=box_type_3d,
        box_mode_3d=box_mode_3d,
        img_fields=[],
        bbox3d_fields=[],
        pts_mask_fields=[],
        pts_seg_fields=[],
        bbox_fields=[],
        mask_fields=[],
        seg_fields=[],
    )
    data = test_pipeline(data)

    # TODO: this code is dataset-specific. Move lidar2img and
    #       depth2img to .pkl annotations in the future.
    # LiDAR to image conversion
    if box_mode_3d == Box3DMode.LIDAR:
        rect = info["calib"]["R0_rect"].astype(np.float32)
        Trv2c = info["calib"]["Tr_velo_to_cam"].astype(np.float32)
        P2 = info["calib"]["P2"].astype(np.float32)
        lidar2img = P2 @ rect @ Trv2c
        data["img_metas"][0].data["lidar2img"] = lidar2img
    # Depth to image conversion
    elif box_mode_3d == Box3DMode.DEPTH:
        rt_mat = info["calib"]["Rt"]
        # follow Coord3DMode.convert_point
        rt_mat = np.array([[1, 0, 0], [0, 0, -1], [0, 1, 0]]) @ rt_mat.transpose(1, 0)
        depth2img = info["calib"]["K"] @ rt_mat
        data["img_metas"][0].data["depth2img"] = depth2img

    data = collate([data], samples_per_gpu=1)
    if next(model.parameters()).is_cuda:
        # scatter to specified GPU
        data = scatter(data, [device.index])[0]
    else:
        # this is a workaround to avoid the bug of MMDataParallel
        data["img_metas"] = data["img_metas"][0].data
        data["points"] = data["points"][0].data
        data["img"] = data["img"][0].data

    # forward the model
    with torch.no_grad():
        result = model(return_loss=False, rescale=True, **data)
    return result, data


def inference_mono_3d_detector(model, image, ann_file):
    """Inference image with the monocular 3D detector.

    Args:
        model (nn.Module): The loaded detector.
        image (str): Image files.
        ann_file (str): Annotation files.

    Returns:
        tuple: Predicted results and data from pipeline.
    """
    cfg = model.cfg
    device = next(model.parameters()).device  # model device
    # build the data pipeline
    test_pipeline = deepcopy(cfg.data.test.pipeline)
    test_pipeline = Compose(test_pipeline)
    box_type_3d, box_mode_3d = get_box_type(cfg.data.test.box_type_3d)
    # get data info containing calib
    data_infos = mmcv.load(ann_file)
    # find the info corresponding to this image
    for x in data_infos["images"]:
        if osp.basename(x["file_name"]) != osp.basename(image):
            continue
        img_info = x
        break
    data = dict(
        img_prefix=osp.dirname(image),
        img_info=dict(filename=osp.basename(image)),
        box_type_3d=box_type_3d,
        box_mode_3d=box_mode_3d,
        img_fields=[],
        bbox3d_fields=[],
        pts_mask_fields=[],
        pts_seg_fields=[],
        bbox_fields=[],
        mask_fields=[],
        seg_fields=[],
    )

    # camera points to image conversion
    if box_mode_3d == Box3DMode.CAM:
        data["img_info"].update(dict(cam_intrinsic=img_info["cam_intrinsic"]))

    data = test_pipeline(data)

    data = collate([data], samples_per_gpu=1)
    if next(model.parameters()).is_cuda:
        # scatter to specified GPU
        data = scatter(data, [device.index])[0]
    else:
        # this is a workaround to avoid the bug of MMDataParallel
        data["img_metas"] = data["img_metas"][0].data
        data["img"] = data["img"][0].data

    # lidar points to image conversion
    if box_mode_3d == Box3DMode.LIDAR:
        cam_intrinsic = np.eye(4, 4)
        cam_intrinsic[:3, :3] = np.array(img_info["calib"]["cam_intrinsic"]).reshape(3, 3)
        T_matrix = np.array(img_info["calib"]["Tr_velo_to_cam"]["translation"]).reshape(3, 1)
        R_matrix = np.array(img_info["calib"]["Tr_velo_to_cam"]["rotation"]).reshape(3, 3)
        Trv2c = np.concatenate((R_matrix, T_matrix), axis=1)
        Trv2c = np.concatenate((Trv2c, np.array([0, 0, 0, 1])[np.newaxis, :]), axis=0)
        lidar2img = cam_intrinsic @ Trv2c
        # rect = np.array(img_info['calib']['cam_intrinsic']).astype(np.float32)
        # Trv2c = np.array(img_info['calib']['Tr_velo_to_cam']).astype(np.float32)
        # P2 = np.array(img_info['calib']['P2']).astype(np.float32)
        # lidar2img = P2 @ rect @ Trv2c
        data["img_metas"][0].update({"lidar2img": lidar2img})

    # forward the model
    with torch.no_grad():
        result = model(return_loss=False, rescale=True, **data)
    return result, data


def inference_segmentor(model, pcd):
    """Inference point cloud with the segmentor.

    Args:
        model (nn.Module): The loaded segmentor.
        pcd (str): Point cloud files.

    Returns:
        tuple: Predicted results and data from pipeline.
    """
    cfg = model.cfg
    device = next(model.parameters()).device  # model device
    # build the data pipeline
    test_pipeline = deepcopy(cfg.data.test.pipeline)
    test_pipeline = Compose(test_pipeline)
    data = dict(
        pts_filename=pcd,
        img_fields=[],
        bbox3d_fields=[],
        pts_mask_fields=[],
        pts_seg_fields=[],
        bbox_fields=[],
        mask_fields=[],
        seg_fields=[],
    )
    data = test_pipeline(data)
    data = collate([data], samples_per_gpu=1)
    if next(model.parameters()).is_cuda:
        # scatter to specified GPU
        data = scatter(data, [device.index])[0]
    else:
        # this is a workaround to avoid the bug of MMDataParallel
        data["img_metas"] = data["img_metas"][0].data
        data["points"] = data["points"][0].data
    # forward the model
    with torch.no_grad():
        result = model(return_loss=False, rescale=True, **data)
    return result, data


def show_det_result_meshlab(data, result, out_dir, score_thr=0.0, show=False, snapshot=False):
    """Show 3D detection result by meshlab."""
    points = data["points"][0][0].cpu().numpy()
    pts_filename = data["img_metas"][0][0]["pts_filename"]
    file_name = osp.split(pts_filename)[-1].split(".")[0]

    if "pts_bbox" in result[0].keys():
        pred_bboxes = result[0]["pts_bbox"]["boxes_3d"].tensor.numpy()
        pred_scores = result[0]["pts_bbox"]["scores_3d"].numpy()
    else:
        pred_bboxes = result[0]["boxes_3d"].tensor.numpy()
        pred_scores = result[0]["scores_3d"].numpy()

    # filter out low score bboxes for visualization
    if score_thr > 0:
        inds = pred_scores > score_thr
        pred_bboxes = pred_bboxes[inds]

    # for now we convert points into depth mode
    box_mode = data["img_metas"][0][0]["box_mode_3d"]
    if box_mode != Box3DMode.DEPTH:
        points = points[..., [1, 0, 2]]
        points[..., 0] *= -1
        show_bboxes = Box3DMode.convert(pred_bboxes, box_mode, Box3DMode.DEPTH)
    else:
        show_bboxes = deepcopy(pred_bboxes)

    show_result(points, None, show_bboxes, out_dir, file_name, show=show, snapshot=snapshot)

    return file_name


def show_seg_result_meshlab(data, result, out_dir, palette, show=False, snapshot=False):
    """Show 3D segmentation result by meshlab."""
    points = data["points"][0][0].cpu().numpy()
    pts_filename = data["img_metas"][0][0]["pts_filename"]
    file_name = osp.split(pts_filename)[-1].split(".")[0]

    pred_seg = result[0]["semantic_mask"].numpy()

    if palette is None:
        # generate random color map
        max_idx = pred_seg.max()
        palette = np.random.randint(0, 256, size=(max_idx + 1, 3))
    palette = np.array(palette).astype(np.int)

    show_seg_result(points, None, pred_seg, out_dir, file_name, palette=palette, show=show, snapshot=snapshot)

    return file_name


def show_proj_det_result_meshlab(data, result, out_dir, score_thr=0.0, show=False, snapshot=False):
    """Show result of projecting 3D bbox to 2D image by meshlab."""
    assert "img" in data.keys(), "image data is not provided for visualization"

    img_filename = data["img_metas"][0][0]["filename"]
    file_name = osp.split(img_filename)[-1].split(".")[0]

    # read from file because img in data_dict has undergone pipeline transform
    img = mmcv.imread(img_filename)

    if "pts_bbox" in result[0].keys():
        result[0] = result[0]["pts_bbox"]
    elif "img_bbox" in result[0].keys():
        result[0] = result[0]["img_bbox"]
    pred_bboxes = result[0]["boxes_3d"].tensor.numpy()
    pred_scores = result[0]["scores_3d"].numpy()

    # filter out low score bboxes for visualization
    if score_thr > 0:
        inds = pred_scores > score_thr
        pred_bboxes = pred_bboxes[inds]

    box_mode = data["img_metas"][0][0]["box_mode_3d"]
    if box_mode == Box3DMode.LIDAR:
        if "lidar2img" not in data["img_metas"][0][0]:
            raise NotImplementedError("LiDAR to image transformation matrix is not provided")

        show_bboxes = LiDARInstance3DBoxes(pred_bboxes, origin=(0.5, 0.5, 0))

        show_multi_modality_result(
            img,
            None,
            show_bboxes,
            data["img_metas"][0][0]["lidar2img"],
            out_dir,
            file_name,
            box_mode="lidar",
            show=show,
        )
    elif box_mode == Box3DMode.DEPTH:
        show_bboxes = DepthInstance3DBoxes(pred_bboxes, origin=(0.5, 0.5, 0))

        show_multi_modality_result(
            img,
            None,
            show_bboxes,
            None,
            out_dir,
            file_name,
            box_mode="depth",
            img_metas=data["img_metas"][0][0],
            show=show,
        )
    elif box_mode == Box3DMode.CAM:
        if "cam2img" not in data["img_metas"][0][0]:
            raise NotImplementedError("camera intrinsic matrix is not provided")

        show_bboxes = CameraInstance3DBoxes(pred_bboxes, box_dim=pred_bboxes.shape[-1], origin=(0.5, 1.0, 0.5))

        show_multi_modality_result(
            img, None, show_bboxes, data["img_metas"][0][0]["cam2img"], out_dir, file_name, box_mode="camera", show=show
        )
    else:
        raise NotImplementedError(f"visualization of {box_mode} bbox is not supported")

    return file_name


def show_result_meshlab(data, result, out_dir, score_thr=0.0, show=False, snapshot=False, task="det", palette=None):
    """Show result by meshlab.

    Args:
        data (dict): Contain data from pipeline.
        result (dict): Predicted result from model.
        out_dir (str): Directory to save visualized result.
        score_thr (float): Minimum score of bboxes to be shown. Default: 0.0
        show (bool): Visualize the results online. Defaults to False.
        snapshot (bool): Whether to save the online results. Defaults to False.
        task (str): Distinguish which task result to visualize. Currently we
            support 3D detection, multi-modality detection and 3D segmentation.
            Defaults to 'det'.
        palette (list[list[int]]] | np.ndarray | None): The palette of
                segmentation map. If None is given, random palette will be
                generated. Defaults to None.
    """
    assert task in ["det", "multi_modality-det", "seg", "mono-det"], f"unsupported visualization task {task}"
    assert out_dir is not None, "Expect out_dir, got none."

    if task in ["det", "multi_modality-det"]:
        file_name = show_det_result_meshlab(data, result, out_dir, score_thr, show, snapshot)

    if task in ["seg"]:
        file_name = show_seg_result_meshlab(data, result, out_dir, palette, show, snapshot)

    if task in ["multi_modality-det", "mono-det"]:
        file_name = show_proj_det_result_meshlab(data, result, out_dir, score_thr, show, snapshot)

    return out_dir, file_name


from channel import *
from early_fusion_utils import *
from late_fusion_utils import *
from mmdet3d_utils import *


import os
import json
import numpy as np
from pypcd import pypcd


def read_pcd(path_pcd):
    return pypcd.PointCloud.from_path(path_pcd)


def concatenate_pcd2bin(pc1, pc2, path_save):
    np_x1 = (np.array(pc1.pc_data["x"], dtype=np.float32)).astype(np.float32)
    np_y1 = (np.array(pc1.pc_data["y"], dtype=np.float32)).astype(np.float32)
    np_z1 = (np.array(pc1.pc_data["z"], dtype=np.float32)).astype(np.float32)
    np_i1 = (np.array(pc1.pc_data["intensity"], dtype=np.float32)).astype(np.float32) / 255

    np_x2 = (np.array(pc2.pc_data["x"], dtype=np.float32)).astype(np.float32)
    np_y2 = (np.array(pc2.pc_data["y"], dtype=np.float32)).astype(np.float32)
    np_z2 = (np.array(pc2.pc_data["z"], dtype=np.float32)).astype(np.float32)
    np_i2 = (np.array(pc2.pc_data["intensity"], dtype=np.float32)).astype(np.float32)

    np_x = np.append(np_x1, np_x2)
    np_y = np.append(np_y1, np_y2)
    np_z = np.append(np_z1, np_z2)
    np_i = np.append(np_i1, np_i2)
    points_32 = np.transpose(np.vstack((np_x, np_y, np_z, np_i)))
    list_pcd = []
    for i in range(len(points_32)):

        x, y, z, intensity = points_32[i][0], points_32[i][1], points_32[i][2], points_32[i][3]
        list_pcd.append((x, y, z, intensity))
    dt = np.dtype([("x", "f4"), ("y", "f4"), ("z", "f4"), ("intensity", "f4")])
    np_pcd = np.array(list_pcd, dtype=dt)
    new_metadata = {}
    new_metadata["version"] = "0.7"
    new_metadata["fields"] = ["x", "y", "z", "intensity"]
    new_metadata["size"] = [4, 4, 4, 4]
    new_metadata["type"] = ["F", "F", "F", "F"]
    new_metadata["count"] = [1, 1, 1, 1]
    new_metadata["width"] = len(np_pcd)
    new_metadata["height"] = 1
    new_metadata["viewpoint"] = [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]
    new_metadata["points"] = len(np_pcd)
    new_metadata["data"] = "binary"
    pc_save = pypcd.PointCloud(new_metadata, np_pcd)
    pc_save.save_pcd(path_save, compression="binary_compressed")


import os.path as osp
import sys
import os
import numpy as np
import torch.nn as nn
import logging

logger = logging.getLogger(__name__)

from base_model import BaseModel
from model_utils import (
    init_model,
    inference_detector,
    inference_mono_3d_detector,
    BBoxList,
    EuclidianMatcher,
    SpaceCompensator,
    TimeCompensator,
    BasicFuser,
    read_pcd,
    concatenate_pcd2bin,
)
from dataset.dataset_utils import (
    load_json,
    save_pkl,
    load_pkl,
    read_jpg,
)
from v2x_utils import (
    mkdir,
    get_arrow_end,
    box_translation,
    points_translation,
    get_trans,
    diff_label_filt,
)


def get_box_info(result):
    if len(result[0]["boxes_3d"].tensor) == 0:
        box_lidar = np.zeros((1, 8, 3))
        box_ry = np.zeros(1)
    else:
        box_lidar = result[0]["boxes_3d"].corners.numpy()
        box_ry = result[0]["boxes_3d"].tensor[:, -1].numpy()
    box_centers_lidar = box_lidar.mean(axis=1)
    arrow_ends_lidar = get_arrow_end(box_centers_lidar, box_ry)
    return box_lidar, box_ry, box_centers_lidar, arrow_ends_lidar


def gen_pred_dict(id, timestamp, box, arrow, points, score, label):
    if len(label) == 0:
        score = [-2333]
        label = [-1]
    save_dict = {
        "info": id,
        "timestamp": timestamp,
        "boxes_3d": box.tolist(),
        "arrows": arrow.tolist(),
        "scores_3d": score,
        "labels_3d": label,
        "points": points.tolist(),
    }
    return save_dict


class EarlyFusion(BaseModel):
    def add_arguments(parser):
        parser.add_argument("--inf-config-path", type=str, default="")
        parser.add_argument("--inf-model-path", type=str, default="")
        parser.add_argument("--veh-config-path", type=str, default="")
        parser.add_argument("--veh-model-path", type=str, default="")
        parser.add_argument("--no-comp", action="store_true")
        parser.add_argument("--overwrite-cache", action="store_true")

    def __init__(self, args, pipe):
        super().__init__()
        self.model = LateFusionVeh(args)
        self.args = args
        self.pipe = pipe
        mkdir(args.output)
        mkdir(osp.join(args.output, "inf"))
        mkdir(osp.join(args.output, "veh"))
        mkdir(osp.join(args.output, "inf", "lidar"))
        mkdir(osp.join(args.output, "veh", "lidar"))
        mkdir(osp.join(args.output, "inf", "camera"))
        mkdir(osp.join(args.output, "veh", "camera"))
        mkdir(osp.join(args.output, "result"))

    def forward(self, vic_frame, filt, prev_inf_frame_func=None, *args):
        save_path = osp.join(vic_frame.path, "vehicle-side", "cache")
        if not osp.exists(save_path):
            mkdir(save_path)
        name = vic_frame.veh_frame["image_path"][-10:-4]
        Inf_points = read_pcd(osp.join(vic_frame.path, "infrastructure-side", vic_frame.inf_frame["pointcloud_path"]))
        Veh_points = read_pcd(osp.join(vic_frame.path, "vehicle-side", vic_frame.veh_frame["pointcloud_path"]))
        vic_frame_trans = vic_frame.transform(from_coord="Infrastructure_lidar", to_coord="Vehicle_lidar")
        for i in range(len(Inf_points.pc_data)):
            temp = vic_frame_trans.single_point_transformation(
                [Inf_points.pc_data[i][0], Inf_points.pc_data[i][1], Inf_points.pc_data[i][2]]
            )
            for j in range(3):
                Inf_points.pc_data[i][j] = temp[j]
            Inf_points.pc_data[i][3] = Inf_points.pc_data[i][3] * 255
        concatenate_pcd2bin(Inf_points, Veh_points, osp.join(save_path, name + ".pcd"))
        vic_frame.veh_frame["pointcloud_path"] = osp.join("cache", name + ".pcd")
        pred, id_veh = self.model(vic_frame.vehicle_frame(), None, filt)

        # Hard Code to change the prediction label
        for ii in range(len(pred["labels_3d"])):
            pred["labels_3d"][ii] = 2

        self.pipe.send("boxes_3d", pred["boxes_3d"])
        self.pipe.send("labels_3d", pred["labels_3d"])
        self.pipe.send("scores_3d", pred["scores_3d"])

        return {
            "boxes_3d": np.array(pred["boxes_3d"]),
            "labels_3d": np.array(pred["labels_3d"]),
            "scores_3d": np.array(pred["scores_3d"]),
        }


class LateFusionVeh(nn.Module):
    def __init__(self, args):
        super().__init__()
        self.model = None
        self.args = args
        self.args.overwrite_cache = True

    def pred(self, frame, trans, pred_filter):
        if self.args.sensortype == "lidar":
            id = frame.id["lidar"]
            logger.debug("vehicle pointcloud_id: {}".format(id))
            path = osp.join(self.args.output, "veh", "lidar", id + ".pkl")
            frame_timestamp = frame["pointcloud_timestamp"]

            if osp.exists(path) and self.args.overwrite_cache:
                pred_dict = load_pkl(path)
                return pred_dict, id

            logger.debug("predicting...")
            if self.model is None:
                raise Exception

            tmp = frame.point_cloud(data_format="file")
            result, _ = inference_detector(self.model, tmp)
            box, box_ry, box_center, arrow_ends = get_box_info(result)
            if trans is not None:
                box = trans(box)  #
                box_center = trans(box_center)[:, np.newaxis, :]
                arrow_ends = trans(arrow_ends)[:, np.newaxis, :]

            remain = []
            if len(result[0]["boxes_3d"].tensor) != 0:
                for i in range(box.shape[0]):
                    if pred_filter(box[i]):
                        remain.append(i)

            if len(remain) >= 1:
                box = box[remain]
                box_center = box_center[remain]
                arrow_ends = arrow_ends[remain]
                result[0]["scores_3d"] = result[0]["scores_3d"].numpy()[remain]
                result[0]["labels_3d"] = result[0]["labels_3d"].numpy()[remain]
            else:
                box = np.zeros((1, 8, 3))
                box_center = np.zeros((1, 1, 3))
                arrow_ends = np.zeros((1, 1, 3))
                result[0]["labels_3d"] = np.zeros((1))
                result[0]["scores_3d"] = np.zeros((1))

            if self.args.save_point_cloud:
                save_data = frame.point_cloud(format="array")
            else:
                save_data = np.array([])

            pred_dict = gen_pred_dict(
                id,
                frame_timestamp,
                box,
                np.concatenate([box_center, arrow_ends], axis=1),
                save_data,
                result[0]["scores_3d"].tolist(),
                result[0]["labels_3d"].tolist(),
            )
            save_pkl(pred_dict, path)

            return pred_dict, id
        else:
            print("Now early fusion only supports LiDAR sensor!")
            raise Exception

    def forward(self, data, trans, pred_filter):
        try:
            pred_dict, id = self.pred(data, trans, pred_filter)
        except Exception:
            logger.info("building model")
            self.model = init_model(
                self.args.veh_config_path,
                self.args.veh_model_path,
                device=self.args.device,
            )
            pred_dict, id = self.pred(data, trans, pred_filter)

        return pred_dict, id


if __name__ == "__main__":
    sys.path.append("..")
    sys.path.extend([os.path.join(root, name) for root, dirs, _ in os.walk("../") for name in dirs])


import os.path as osp
import numpy as np
import torch.nn as nn
import logging

logger = logging.getLogger(__name__)

from base_model import BaseModel
from model_utils import (
    init_model,
    inference_detector,
    inference_mono_3d_detector,
    BBoxList,
    EuclidianMatcher,
    SpaceCompensator,
    TimeCompensator,
    BasicFuser,
)
from dataset.dataset_utils import (
    load_json,
    save_pkl,
    load_pkl,
    read_pcd,
    read_jpg,
)
from v2x_utils import (
    mkdir,
    get_arrow_end,
    box_translation,
    points_translation,
    get_trans,
    diff_label_filt,
)


def gen_pred_dict(id, timestamp, box, arrow, points, score, label):
    if len(label) == 0:
        score = [-2333]
        label = [-1]
    save_dict = {
        "info": id,
        "timestamp": timestamp,
        "boxes_3d": box.tolist(),
        "arrows": arrow.tolist(),
        "scores_3d": score,
        "labels_3d": label,
        "points": points.tolist(),
    }
    return save_dict


def get_box_info(result):
    if len(result[0]["boxes_3d"].tensor) == 0:
        box_lidar = np.zeros((1, 8, 3))
        box_ry = np.zeros(1)
    else:
        box_lidar = result[0]["boxes_3d"].corners.numpy()
        box_ry = result[0]["boxes_3d"].tensor[:, -1].numpy()
    box_centers_lidar = box_lidar.mean(axis=1)
    arrow_ends_lidar = get_arrow_end(box_centers_lidar, box_ry)
    return box_lidar, box_ry, box_centers_lidar, arrow_ends_lidar


class LateFusionInf(nn.Module):
    def __init__(self, args, pipe):
        super().__init__()
        self.model = None
        self.args = args
        self.pipe = pipe

    def pred(self, frame, trans, pred_filter):
        if self.args.sensortype == "lidar":
            id = frame.id["lidar"]
            logger.debug("infrastructure pointcloud_id: {}".format(id))
            path = osp.join(self.args.output, "inf", "lidar", id + ".pkl")
            frame_timestamp = frame["pointcloud_timestamp"]
        elif self.args.sensortype == "camera":
            id = frame.id["camera"]
            logger.debug("infrastructure image_id: {}".format(id))
            path = osp.join(self.args.output, "inf", "camera", id + ".pkl")
            frame_timestamp = frame["image_timestamp"]

        if osp.exists(path) and not self.args.overwrite_cache:
            pred_dict = load_pkl(path)
            return pred_dict, id

        logger.debug("prediction not found, predicting...")
        if self.model is None:
            raise Exception

        if self.args.sensortype == "lidar":
            tmp = frame.point_cloud(data_format="file")
            result, _ = inference_detector(self.model, tmp)
        elif self.args.sensortype == "camera":
            tmp = osp.join(self.args.input, "infrastructure-side", frame["image_path"])
            annos = osp.join(self.args.input, "infrastructure-side", "annos", id + ".json")
            result, _ = inference_mono_3d_detector(self.model, tmp, annos)
        box, box_ry, box_center, arrow_ends = get_box_info(result)

        # Convert to other coordinate
        if trans is not None:
            box = trans(box)
            box_center = trans(box_center)[:, np.newaxis, :]
            arrow_ends = trans(arrow_ends)[:, np.newaxis, :]

        # Filter out labels
        remain = []
        if len(result[0]["boxes_3d"].tensor) != 0:
            for i in range(box.shape[0]):
                if pred_filter(box[i]):
                    remain.append(i)

        # hard code by yuhb
        # TODO: new camera model
        if self.args.sensortype == "camera":
            for ii in range(len(result[0]["labels_3d"])):
                result[0]["labels_3d"][ii] = 2

        if len(remain) >= 1:
            box = box[remain]
            box_center = box_center[remain]
            arrow_ends = arrow_ends[remain]
            result[0]["scores_3d"] = result[0]["scores_3d"].numpy()[remain]
            result[0]["labels_3d"] = result[0]["labels_3d"].numpy()[remain]
        else:
            box = np.zeros((1, 8, 3))
            box_center = np.zeros((1, 1, 3))
            arrow_ends = np.zeros((1, 1, 3))
            result[0]["labels_3d"] = np.zeros((1))
            result[0]["scores_3d"] = np.zeros((1))

        if self.args.sensortype == "lidar" and self.args.save_point_cloud:
            save_data = trans(frame.point_cloud(format="array"))
        elif self.args.sensortype == "camera" and self.args.save_image:
            save_data = frame.image(data_format="array")
        else:
            save_data = np.array([])

        pred_dict = gen_pred_dict(
            id,
            frame_timestamp,
            box,
            np.concatenate([box_center, arrow_ends], axis=1),
            save_data,
            result[0]["scores_3d"].tolist(),
            result[0]["labels_3d"].tolist(),
        )
        save_pkl(pred_dict, path)

        return pred_dict, id

    def forward(self, data, trans, pred_filter, prev_inf_frame_func=None):
        try:
            pred_dict, id = self.pred(data, trans, pred_filter)
        except Exception:
            logger.info("building model")
            self.model = init_model(
                self.args.inf_config_path,
                self.args.inf_model_path,
                device=self.args.device,
            )
            pred_dict, id = self.pred(data, trans, pred_filter)
        self.pipe.send("boxes", pred_dict["boxes_3d"])
        self.pipe.send("score", pred_dict["scores_3d"])
        self.pipe.send("label", pred_dict["labels_3d"])

        if prev_inf_frame_func is not None:
            prev_frame, delta_t = prev_inf_frame_func(id, sensortype=self.args.sensortype)
            if prev_frame is not None:
                prev_frame_trans = prev_frame.transform(from_coord="Infrastructure_lidar", to_coord="Vehicle_lidar")
                prev_frame_trans.veh_name = trans.veh_name
                prev_frame_trans.delta_x = trans.delta_x
                prev_frame_trans.delta_y = trans.delta_y
                try:
                    pred_dict, _ = self.pred(
                        prev_frame,
                        prev_frame_trans,
                        pred_filter,
                    )
                except Exception:
                    logger.info("building model")
                    self.model = init_model(
                        self.args.inf_config_path,
                        self.args.inf_model_path,
                        device=self.args.device,
                    )
                    pred_dict, _ = self.pred(
                        prev_frame,
                        prev_frame_trans,
                        pred_filter,
                    )
                self.pipe.send("prev_boxes", pred_dict["boxes_3d"])
                self.pipe.send("prev_time_diff", delta_t)
                self.pipe.send("prev_label", pred_dict["labels_3d"])

        return id


class LateFusionVeh(nn.Module):
    def __init__(self, args):
        super().__init__()
        self.model = None
        self.args = args

    def pred(self, frame, trans, pred_filter):
        if self.args.sensortype == "lidar":
            id = frame.id["lidar"]
            logger.debug("vehicle pointcloud_id: {}".format(id))
            path = osp.join(self.args.output, "veh", "lidar", id + ".pkl")
            frame_timestamp = frame["pointcloud_timestamp"]
        elif self.args.sensortype == "camera":
            id = frame.id["camera"]
            logger.debug("vehicle image_id: {}".format(id))
            path = osp.join(self.args.output, "veh", "camera", id + ".pkl")
            frame_timestamp = frame["image_timestamp"]

        if osp.exists(path) and not self.args.overwrite_cache:
            pred_dict = load_pkl(path)
            return pred_dict, id

        logger.debug("prediction not found, predicting...")
        if self.model is None:
            raise Exception

        if self.args.sensortype == "lidar":
            tmp = frame.point_cloud(data_format="file")
            result, _ = inference_detector(self.model, tmp)
        elif self.args.sensortype == "camera":
            tmp = osp.join(self.args.input, "vehicle-side", frame["image_path"])
            annos = osp.join(self.args.input, "vehicle-side", "annos", id + ".json")
            result, _ = inference_mono_3d_detector(self.model, tmp, annos)
        box, box_ry, box_center, arrow_ends = get_box_info(result)

        # Convert to other coordinate
        if trans is not None:
            box = trans(box)
            box_center = trans(box_center)[:, np.newaxis, :]
            arrow_ends = trans(arrow_ends)[:, np.newaxis, :]

        # Filter out labels
        remain = []
        if len(result[0]["boxes_3d"].tensor) != 0:
            for i in range(box.shape[0]):
                if pred_filter(box[i]):
                    remain.append(i)

        # hard code by yuhb
        # TODO: new camera model
        if self.args.sensortype == "camera":
            for ii in range(len(result[0]["labels_3d"])):
                result[0]["labels_3d"][ii] = 2

        if len(remain) >= 1:
            box = box[remain]
            box_center = box_center[remain]
            arrow_ends = arrow_ends[remain]
            result[0]["scores_3d"] = result[0]["scores_3d"].numpy()[remain]
            result[0]["labels_3d"] = result[0]["labels_3d"].numpy()[remain]
        else:
            box = np.zeros((1, 8, 3))
            box_center = np.zeros((1, 1, 3))
            arrow_ends = np.zeros((1, 1, 3))
            result[0]["labels_3d"] = np.zeros((1))
            result[0]["scores_3d"] = np.zeros((1))

        if self.args.sensortype == "lidar" and self.args.save_point_cloud:
            save_data = trans(frame.point_cloud(format="array"))
        elif self.args.sensortype == "camera" and self.args.save_image:
            save_data = frame.image(data_format="array")
        else:
            save_data = np.array([])

        pred_dict = gen_pred_dict(
            id,
            frame_timestamp,
            box,
            np.concatenate([box_center, arrow_ends], axis=1),
            save_data,
            result[0]["scores_3d"].tolist(),
            result[0]["labels_3d"].tolist(),
        )
        save_pkl(pred_dict, path)

        return pred_dict, id

    def forward(self, data, trans, pred_filter):
        try:
            pred_dict, id = self.pred(data, trans, pred_filter)
        except Exception:
            logger.info("building model")
            self.model = init_model(
                self.args.veh_config_path,
                self.args.veh_model_path,
                device=self.args.device,
            )
            pred_dict, id = self.pred(data, trans, pred_filter)
        return pred_dict, id


class LateFusion(BaseModel):
    def add_arguments(parser):
        parser.add_argument("--inf-config-path", type=str, default="")
        parser.add_argument("--inf-model-path", type=str, default="")
        parser.add_argument("--veh-config-path", type=str, default="")
        parser.add_argument("--veh-model-path", type=str, default="")
        parser.add_argument("--no-comp", action="store_true")
        parser.add_argument("--overwrite-cache", action="store_true")

    def __init__(self, args, pipe):
        super().__init__()
        self.pipe = pipe
        self.inf_model = LateFusionInf(args, pipe)
        self.veh_model = LateFusionVeh(args)
        self.args = args
        self.space_compensator = SpaceCompensator()
        self.time_compensator = TimeCompensator(EuclidianMatcher(diff_label_filt))
        mkdir(args.output)
        mkdir(osp.join(args.output, "inf"))
        mkdir(osp.join(args.output, "veh"))
        mkdir(osp.join(args.output, "inf", "lidar"))
        mkdir(osp.join(args.output, "veh", "lidar"))
        mkdir(osp.join(args.output, "inf", "camera"))
        mkdir(osp.join(args.output, "veh", "camera"))
        mkdir(osp.join(args.output, "result"))

    def forward(self, vic_frame, filt, prev_inf_frame_func=None, *args):
        id_inf = self.inf_model(
            vic_frame.infrastructure_frame(),
            vic_frame.transform(from_coord="Infrastructure_lidar", to_coord="Vehicle_lidar"),
            filt,
            prev_inf_frame_func if not self.args.no_comp else None,
        )
        pred_dict, id_veh = self.veh_model(vic_frame.vehicle_frame(), None, filt)

        # logger.info("running late fusion...")
        pred_inf = BBoxList(
            np.array(self.pipe.receive("boxes")),
            None,
            np.array(self.pipe.receive("label")),
            np.array(self.pipe.receive("score")),
        )
        pred_veh = BBoxList(
            np.array(pred_dict["boxes_3d"]),
            None,
            np.array(pred_dict["labels_3d"]),
            np.array(pred_dict["scores_3d"]),
        )
        if vic_frame.time_diff > 0 and not self.args.no_comp:
            if self.pipe.receive("prev_boxes") is not None:
                pred_inf_prev = BBoxList(
                    np.array(self.pipe.receive("prev_boxes")),
                    None,
                    np.array(self.pipe.receive("prev_label")),
                    None,
                )
                offset = self.time_compensator.compensate(
                    pred_inf_prev,
                    pred_inf,
                    self.pipe.receive("prev_time_diff"),
                    vic_frame.time_diff,
                )
                pred_inf.move_center(offset)
                logger.debug("time compensation: {}".format(offset))
            else:
                print("no previous frame found, time compensation is skipped")

        matcher = EuclidianMatcher(diff_label_filt)
        ind_inf, ind_veh, cost = matcher.match(pred_inf, pred_veh)
        logger.debug("matched boxes: {}, {}".format(ind_inf, ind_veh))

        fuser = BasicFuser(perspective="vehicle", trust_type="main", retain_type="all")
        result = fuser.fuse(pred_inf, pred_veh, ind_inf, ind_veh)
        result["inf_id"] = id_inf
        result["veh_id"] = id_veh
        result["inf_boxes"] = pred_inf.boxes
        return result


import torch.nn as nn
import os.path as osp
import numpy as np
import torch.nn as nn
import logging
logger = logging.getLogger(__name__)
from tqdm import tqdm
from base_model import BaseModel
from pypcd import pypcd
import mmcv
import numpy as np
import re
import torch
from copy import deepcopy
from mmcv.parallel import collate, scatter
from mmcv.runner import load_checkpoint
from os import path as osp
from mmdet3d.core import (
    Box3DMode,
    CameraInstance3DBoxes,
    DepthInstance3DBoxes,
    LiDARInstance3DBoxes,
    show_multi_modality_result,
    show_result,
    show_seg_result,
)
from mmdet3d.core.bbox import get_box_type
from mmdet3d.datasets.pipelines import Compose
from mmdet3d.models import build_model
from model_utils import (
    init_model,
    inference_mono_3d_detector,
    BBoxList,
    EuclidianMatcher,
    SpaceCompensator,
    TimeCompensator,
    BasicFuser,
    read_pcd,
    concatenate_pcd2bin
)
from dataset.dataset_utils import (
    load_json,
    save_pkl,
    load_pkl,
    read_jpg,
)
from v2x_utils import (
    mkdir,
    get_arrow_end,
    box_translation,
    points_translation,
    get_trans,
    diff_label_filt,
)

def get_box_info(result):
    for i in range(len(result[0]["boxes_3d"])):
        temp=result[0]["boxes_3d"].tensor[i][4].clone()
        result[0]["boxes_3d"].tensor[i][4]=result[0]["boxes_3d"].tensor[i][3]
        result[0]["boxes_3d"].tensor[i][3]=temp
        result[0]["boxes_3d"].tensor[i][6]=result[0]["boxes_3d"].tensor[i][6]

    if len(result[0]["boxes_3d"].tensor) == 0:
        box_lidar = np.zeros((1, 8, 3))
        box_ry = np.zeros(1)
    else:
        box_lidar = result[0]["boxes_3d"].corners.numpy()
        box_ry = result[0]["boxes_3d"].tensor[:, -1].numpy()

    box_centers_lidar = box_lidar.mean(axis=1)
    arrow_ends_lidar = get_arrow_end(box_centers_lidar, box_ry)

    return box_lidar, box_ry, box_centers_lidar, arrow_ends_lidar

def gen_pred_dict(id, timestamp, box, arrow, points, score, label):
    if len(label) == 0:
        score = [-2333]
        label = [-1]

    save_dict = {
        "info": id,
        "timestamp": timestamp,
        "boxes_3d": box.tolist(),
        "arrows": arrow.tolist(),
        "scores_3d": score,
        "labels_3d": label,
        "points": points.tolist(),
    }

    return save_dict

def inference_detector_fature_fusion(model, veh_bin, inf_bin, rotation, translation):
    """Inference point cloud with the detector.
    Args:
        model (nn.Module): The loaded detector.
        pcd (str): Point cloud files.
    Returns:
        tuple: Predicted results and data from pipeline.
    """
    cfg = model.cfg
    device = next(model.parameters()).device  # model device
    # build the data pipeline
    test_pipeline = deepcopy(cfg.data.test.pipeline)
    test_pipeline = Compose(test_pipeline)
    box_type_3d, box_mode_3d = get_box_type(cfg.data.test.box_type_3d)
    data = dict(
        vehicle_pts_filename=veh_bin,
        infrastructure_pts_filename=inf_bin,
        box_type_3d=box_type_3d,
        box_mode_3d=box_mode_3d,
        # for ScanNet demo we need axis_align_matrix
        ann_info=dict(axis_align_matrix=np.eye(4)),
        sweeps=[],
        timestamp=[0],
        img_fields=[],
        bbox3d_fields=[],
        pts_mask_fields=[],
        pts_seg_fields=[],
        bbox_fields=[],
        mask_fields=[],
        seg_fields=[],
    )
    data = test_pipeline(data)
    a=dict(
        rotation = rotation,
        translation = translation
    )
    data = collate([data], samples_per_gpu=1)

    if next(model.parameters()).is_cuda:
    # scatter to specified GPU
         data = scatter(data, [device.index])[0]
         data['img_metas'][0][0]['inf2veh']=a 
    else:
    # this is a workaround to avoid the bug of MMDataParallel
        data["img_metas"] = data["img_metas"][0].data
        data["points"] = data["points"][0].data

    # forward the model
    with torch.no_grad():
        result = model(return_loss=False, rescale=True, **data)

    return result, data

class FeatureFusion(BaseModel):
    def add_arguments(parser):
        parser.add_argument("--inf-config-path", type=str, default="")
        parser.add_argument("--inf-model-path", type=str, default="")
        parser.add_argument("--veh-config-path", type=str, default="")
        parser.add_argument("--veh-model-path", type=str, default="")
        parser.add_argument("--no-comp", action="store_true")
        parser.add_argument("--overwrite-cache", action="store_true")

    def __init__(self, args,pipe):
        super().__init__()
        self.args = args
        self.pipe=pipe
        self.model = init_model(
                self.args.veh_config_path,
                self.args.veh_model_path,
                device=self.args.device,
         )
        mkdir(args.output)
        mkdir(osp.join(args.output, "inf"))
        mkdir(osp.join(args.output, "veh"))
        mkdir(osp.join(args.output, "inf", "lidar"))
        mkdir(osp.join(args.output, "veh", "lidar"))
        mkdir(osp.join(args.output, "inf", "camera"))
        mkdir(osp.join(args.output, "veh", "camera"))
        mkdir(osp.join(args.output, "result"))

    def forward(self, vic_frame, filt, prev_inf_frame_func=None, *args):
        tmp_veh = vic_frame.veh_frame.point_cloud(data_format="file")
        tmp_inf = vic_frame.inf_frame.point_cloud(data_format="file")
        trans = vic_frame.transform('Infrastructure_lidar','Vehicle_lidar')
        rotation,translation = trans.get_rot_trans()
        result,_ = inference_detector_fature_fusion(self.model,tmp_veh,tmp_inf,rotation,translation)
        box, box_ry, box_center, arrow_ends = get_box_info(result)
             
        remain = []
        if len(result[0]["boxes_3d"].tensor) != 0:
            
            for i in range(box.shape[0]):
                if filt(box[i]):
                    remain.append(i)
        if len(remain) >= 1:
            box =box[remain]
            box_center = box_center[remain]
            arrow_ends = arrow_ends[remain]
            result[0]["scores_3d"]=result[0]["scores_3d"].numpy()[remain]
            result[0]["labels_3d"]=result[0]["labels_3d"].numpy()[remain]
        else:
            box = np.zeros((1, 8, 3))
            box_center = np.zeros((1, 1, 3))
            arrow_ends = np.zeros((1, 1, 3))
            result[0]["labels_3d"]=np.zeros((1))
            result[0]["scores_3d"]=np.zeros((1))
        # Save results
        pred = gen_pred_dict(
                    id,
                    [],
                    box,
                    np.concatenate([box_center, arrow_ends], axis=1),
                    np.array(1),
                    result[0]["scores_3d"].tolist(),
                    result[0]["labels_3d"].tolist(),
                )
        # if self.args.save_point_cloud:
        #     # points = trans(frame.point_cloud(format="array"))
        #     points = vic_frame.point_cloud(format="array")
        # else:
        #     points = np.array([])
        for ii in range(len(pred["labels_3d"])):
                pred["labels_3d"][ii]=2
        self.pipe.send("boxes_3d",pred["boxes_3d"])
        self.pipe.send("labels_3d",pred["labels_3d"])
        self.pipe.send("scores_3d",pred["scores_3d"])
        
        return {
            "boxes_3d": np.array(pred["boxes_3d"]),
            "labels_3d": np.array(pred["labels_3d"]),
            "scores_3d": np.array(pred["scores_3d"]),
        }

if __name__ == "__main__":
    sys.path.append("..")
    sys.path.extend([os.path.join(root, name) for root, dirs, _ in os.walk("../") for name in dirs])

import torch.nn as nn
import os.path as osp
import numpy as np
import torch.nn as nn
import logging
logger = logging.getLogger(__name__)
from tqdm import tqdm
from base_model import BaseModel
from pypcd import pypcd
import mmcv
import numpy as np
import re
import torch
from copy import deepcopy
from mmcv.parallel import collate, scatter
from mmcv.runner import load_checkpoint
from os import path as osp
from mmdet3d.core import (
    Box3DMode,
    CameraInstance3DBoxes,
    DepthInstance3DBoxes,
    LiDARInstance3DBoxes,
    show_multi_modality_result,
    show_result,
    show_seg_result,
)
from mmdet3d.core.bbox import get_box_type
from mmdet3d.datasets.pipelines import Compose
from mmdet3d.models import build_model
from model_utils import (
    init_model,
    inference_mono_3d_detector,
    BBoxList,
    EuclidianMatcher,
    SpaceCompensator,
    TimeCompensator,
    BasicFuser,
    read_pcd,
    concatenate_pcd2bin
)
from dataset.dataset_utils import (
    load_json,
    save_pkl,
    load_pkl,
    read_jpg,
)
from v2x_utils import (
    mkdir,
    get_arrow_end,
    box_translation,
    points_translation,
    get_trans,
    diff_label_filt,
)

def get_box_info(result):
    for i in range(len(result[0]["boxes_3d"])):
        temp=result[0]["boxes_3d"].tensor[i][4].clone()
        result[0]["boxes_3d"].tensor[i][4]=result[0]["boxes_3d"].tensor[i][3]
        result[0]["boxes_3d"].tensor[i][3]=temp
        result[0]["boxes_3d"].tensor[i][6]=result[0]["boxes_3d"].tensor[i][6]
    if len(result[0]["boxes_3d"].tensor) == 0:
        box_lidar = np.zeros((1, 8, 3))
        box_ry = np.zeros(1)
    else:
        box_lidar = result[0]["boxes_3d"].corners.numpy()
        box_ry = result[0]["boxes_3d"].tensor[:, -1].numpy()
    box_centers_lidar = box_lidar.mean(axis=1)
    arrow_ends_lidar = get_arrow_end(box_centers_lidar, box_ry)
    return box_lidar, box_ry, box_centers_lidar, arrow_ends_lidar

def gen_pred_dict(id, timestamp, box, arrow, points, score, label):
    if len(label) == 0:
        score = [-2333]
        label = [-1]
    save_dict = {
        "info": id,
        "timestamp": timestamp,
        "boxes_3d": box.tolist(),
        "arrows": arrow.tolist(),
        "scores_3d": score,
        "labels_3d": label,
        "points": points.tolist(),
    }
    return save_dict

def inference_detector_feature_fusion(model, veh_bin, inf_bin, rotation, translation, vic_frame):
    """Inference point cloud with the detector.
    Args:
        model (nn.Module): The loaded detector.
        pcd (str): Point cloud files.
    Returns:
        tuple: Predicted results and data from pipeline.
    """
    cfg = model.cfg
    device = next(model.parameters()).device  # model device
    # build the data pipeline
    test_pipeline = deepcopy(cfg.data.test.pipeline)
    test_pipeline = Compose(test_pipeline)
    box_type_3d, box_mode_3d = get_box_type(cfg.data.test.box_type_3d)
    data = dict(
        vehicle_pts_filename=veh_bin,
        infrastructure_pts_filename=inf_bin,
        box_type_3d=box_type_3d,
        box_mode_3d=box_mode_3d,
        # for ScanNet demo we need axis_align_matrix
        ann_info=dict(axis_align_matrix=np.eye(4)),
        sweeps=[],
        # set timestamp = 0
        timestamp=[0],
        img_fields=[],
        bbox3d_fields=[],
        pts_mask_fields=[],
        pts_seg_fields=[],
        bbox_fields=[],
        mask_fields=[],
        seg_fields=[],
    )
    data = test_pipeline(data)
    a=dict(
        rotation = rotation,
        translation = translation
    )

    data = collate([data], samples_per_gpu=1)
    if next(model.parameters()).is_cuda:
    # scatter to specified GPU
        data = scatter(data, [device.index])[0]
        data['img_metas'][0][0]['inf2veh']=a 
        data['img_metas'][0][0]['infrastructure_idx_t_1']=vic_frame['infrastructure_idx_t_1']
        data['img_metas'][0][0]['infrastructure_pointcloud_bin_path_t_1']=vic_frame['infrastructure_pointcloud_bin_path_t_1']
        data['img_metas'][0][0]['infrastructure_idx_t_0']=vic_frame['infrastructure_idx_t_0']
        data['img_metas'][0][0]['infrastructure_pointcloud_bin_path_t_0']=vic_frame['infrastructure_pointcloud_bin_path_t_0']
        data['img_metas'][0][0]['infrastructure_t_0_1']=vic_frame['infrastructure_t_0_1']
        data['img_metas'][0][0]['infrastructure_idx_t_2']=vic_frame['infrastructure_idx_t_2']
        data['img_metas'][0][0]['infrastructure_pointcloud_bin_path_t_2']=vic_frame['infrastructure_pointcloud_bin_path_t_2']
        data['img_metas'][0][0]['infrastructure_t_1_2']=vic_frame['infrastructure_t_1_2']
    else:
    # this is a workaround to avoid the bug of MMDataParallel
        data["img_metas"] = data["img_metas"][0].data
        data["points"] = data["points"][0].data
    # forward the model
    # print(data["img_metas"])
    with torch.no_grad():
        result = model(return_loss=False, rescale=True, **data)
    return result, data

class FeatureFlow(BaseModel):
    def add_arguments(parser):
        parser.add_argument("--inf-config-path", type=str, default="")
        parser.add_argument("--inf-model-path", type=str, default="")
        parser.add_argument("--veh-config-path", type=str, default="")
        parser.add_argument("--veh-model-path", type=str, default="")
        parser.add_argument("--no-comp", action="store_true")
        parser.add_argument("--overwrite-cache", action="store_true")

    def __init__(self, args,pipe):
        super().__init__()
        # self.model = LateFusionVeh(args)
        if osp.exists(args.output):
            import shutil
            shutil.rmtree(args.output)
        self.args = args
        self.pipe=pipe
        self.model = init_model(
                self.args.veh_config_path,
                self.args.veh_model_path,
                device=self.args.device,
         )
        # self.model.flownet_init()
        mkdir(args.output)
        mkdir(osp.join(args.output, "inf"))
        mkdir(osp.join(args.output, "veh"))
        mkdir(osp.join(args.output, "inf", "lidar"))
        mkdir(osp.join(args.output, "veh", "lidar"))
        mkdir(osp.join(args.output, "inf", "camera"))
        mkdir(osp.join(args.output, "veh", "camera"))
        mkdir(osp.join(args.output, "result"))

    def forward(self, vic_frame, filt, prev_inf_frame_func=None, *args):
        tmp_veh = vic_frame.veh_frame.point_cloud(data_format="file")
        tmp_inf = vic_frame.inf_frame.point_cloud(data_format="file")
        
        trans = vic_frame.transform('Infrastructure_lidar','Vehicle_lidar')
        rotation, translation = trans.get_rot_trans()
        result, _ = inference_detector_feature_fusion(self.model, tmp_veh, tmp_inf, rotation, translation, vic_frame)
        box, box_ry,  box_center,  arrow_ends = get_box_info(result)
        
        remain = []
        if len(result[0]["boxes_3d"].tensor) != 0:
            for i in range(box.shape[0]):
                if filt(box[i]):
                    remain.append(i)
        if len(remain) >= 1:
            box =box[remain]
            box_center = box_center[remain]
            arrow_ends = arrow_ends[remain]
            result[0]["scores_3d"]=result[0]["scores_3d"].numpy()[remain]
            result[0]["labels_3d"]=result[0]["labels_3d"].numpy()[remain]
        else:
            box = np.zeros((1, 8, 3))
            box_center = np.zeros((1, 1, 3))
            arrow_ends = np.zeros((1, 1, 3))
            result[0]["labels_3d"] = np.zeros((1))
            result[0]["scores_3d"] = np.zeros((1))
        # Save results
        pred = gen_pred_dict(
                    id,
                    [],
                    box,
                    np.concatenate([box_center, arrow_ends], axis=1),
                    np.array(1),
                    result[0]["scores_3d"].tolist(),
                    result[0]["labels_3d"].tolist(),
                )
        # if self.args.save_point_cloud:
        #     # points = trans(frame.point_cloud(format="array"))
        #     points = vic_frame.point_cloud(format="array")
        # else:
        #     points = np.array([])
        for ii in range(len(pred["labels_3d"])):
                pred["labels_3d"][ii]=2
        self.pipe.send("boxes_3d",pred["boxes_3d"])
        self.pipe.send("labels_3d",pred["labels_3d"])
        self.pipe.send("scores_3d",pred["scores_3d"])

        return {
            "boxes_3d": np.array(pred["boxes_3d"]),
            "labels_3d": np.array(pred["labels_3d"]),
            "scores_3d": np.array(pred["scores_3d"]),
        }
       
if __name__ == "__main__":
    sys.path.append("..")
    sys.path.extend([os.path.join(root, name) for root, dirs, _ in os.walk("../") for name in dirs])

from mmdet3d_anymodel_anymodality_late import *
from mmdet3d_anymodel_anymodality_nofusion import *
from mmdet3d_anymodel_lidar_early import *
from mmdet3d_lidar_feature_fusion import *
from mmdet3d_lidar_feature_flow import *

import os.path as osp
import logging

logger = logging.getLogger(__name__)
import numpy as np

from dataset.dataset_utils import save_pkl, load_pkl, read_jpg
from v2x_utils import mkdir
from model_utils import init_model, inference_detector, inference_mono_3d_detector
from base_model import BaseModel
from mmdet3d_anymodel_anymodality_late import LateFusionVeh, LateFusionInf


class SingleSide(BaseModel):
    @staticmethod
    def add_arguments(parser):
        parser.add_argument("--config-path", type=str, default="")
        parser.add_argument("--model-path", type=str, default="")
        parser.add_argument("--sensor-type", type=str, default="lidar")
        parser.add_argument("--overwrite-cache", action="store_true")

    def __init__(self, args):
        super().__init__()
        self.model = None
        self.args = args
        mkdir(osp.join(args.output, "preds"))

    def pred(self, frame, pred_filter):
        id = frame.id["camera"]
        if self.args.dataset == "dair-v2x-i":
            input_path = osp.join(self.args.input, "infrastructure-side")
        elif self.args.dataset == "dair-v2x-v":
            input_path = osp.join(self.args.input, "vehicle-side")
        path = osp.join(self.args.output, "preds", id + ".pkl")
        if not osp.exists(path) or self.args.overwrite_cache:
            logger.debug("prediction not found, predicting...")
            if self.model is None:
                raise Exception

            if self.args.sensortype == "lidar":
                result, _ = inference_detector(self.model, frame.point_cloud(data_format="file"))

            elif self.args.sensortype == "camera":
                image = osp.join(input_path, frame["image_path"])
                # tmp = "../cache/tmps_i/" + frame.id + ".jpg"  # TODO
                # if not osp.exists(tmp):
                #     import mmcv

                # mmcv.tmp = mmcv.imwrite(image, tmp)
                annos = osp.join(input_path, "annos", id + ".json")

                result, _ = inference_mono_3d_detector(self.model, image, annos)

                # hard code by yuhb
                for ii in range(len(result[0]["labels_3d"])):
                    result[0]["labels_3d"][ii] = 2

            if len(result[0]["boxes_3d"].tensor) == 0:
                box = np.zeros((1, 8, 3))
                score = np.zeros(1)
                label = np.zeros(1)
            else:
                box = result[0]["boxes_3d"].corners.numpy()
                score = result[0]["scores_3d"].numpy()
                label = result[0]["labels_3d"].numpy()

            remain = []
            for i in range(box.shape[0]):
                if pred_filter(box[i]):
                    remain.append(i)
            if len(remain) >= 1:
                box = box[remain]
                score = score[remain]
                label = label[remain]
            else:
                box = np.zeros((1, 8, 3))
                score = np.zeros(1)
                label = np.zeros(1)
            pred_dict = {
                "boxes_3d": box,
                "scores_3d": score,
                "labels_3d": label,
            }
            save_pkl(pred_dict, path)
        else:
            pred_dict = load_pkl(path)
        return pred_dict

    def forward(self, frame, pred_filter):
        try:
            pred_dict = self.pred(frame, pred_filter)
        except Exception:
            logger.info("building model")
            self.model = init_model(
                self.args.config_path,
                self.args.model_path,
                device=self.args.device,
            )
            pred_dict = self.pred(frame, pred_filter)
        return pred_dict


class InfOnly(BaseModel):
    @staticmethod
    def add_arguments(parser):
        parser.add_argument("--inf-config-path", type=str, default="")
        parser.add_argument("--inf-model-path", type=str, default="")
        parser.add_argument("--veh-config-path", type=str, default="")
        parser.add_argument("--veh-model-path", type=str, default="")
        parser.add_argument("--no-comp", action="store_true")
        parser.add_argument("--overwrite-cache", action="store_true")

    def __init__(self, args, pipe):
        super().__init__()
        self.model = LateFusionInf(args, pipe)
        self.pipe = pipe

    def forward(self, vic_frame, filt, offset, *args):
        self.model(
            vic_frame.infrastructure_frame(),
            vic_frame.transform(from_coord="Infrastructure_lidar", to_coord="Vehicle_lidar"),
            filt,
        )
        pred = np.array(self.pipe.receive("boxes"))
        return {
            "boxes_3d": pred,
            "labels_3d": np.array(self.pipe.receive("label")),
            "scores_3d": np.array(self.pipe.receive("score")),
        }


class VehOnly(BaseModel):
    @staticmethod
    def add_arguments(parser):
        parser.add_argument("--inf-config-path", type=str, default="")
        parser.add_argument("--inf-model-path", type=str, default="")
        parser.add_argument("--veh-config-path", type=str, default="")
        parser.add_argument("--veh-model-path", type=str, default="")
        parser.add_argument("--overwrite-cache", action="store_true")

    def __init__(self, args, pipe):
        super().__init__()
        self.model = LateFusionVeh(args)
        self.pipe = pipe

    def forward(self, vic_frame, filt, *args):
        pred = self.model(vic_frame.vehicle_frame(), None, filt)[0]
        return {
            "boxes_3d": np.array(pred["boxes_3d"]),
            "labels_3d": np.array(pred["labels_3d"]),
            "scores_3d": np.array(pred["scores_3d"]),
        }


# TODO: add dair-v2x for segmentation in the future


# TODO: add dair-v2x for tracking in the future


import os.path as osp
from functools import cmp_to_key
import logging

logger = logging.getLogger(__name__)

from base_dataset import DAIRV2XDataset, get_annos, build_path_to_info, build_frame_to_info
from dataset.dataset_utils import load_json, InfFrame, VehFrame, VICFrame, InfFrameSPD, VehFrameSPD, VICFrameSPD, Label
from v2x_utils import Filter, RectFilter, id_cmp, id_to_str, get_trans, box_translation


class DAIRV2XI(DAIRV2XDataset):
    def __init__(self, path, args, split="train", sensortype="lidar", extended_range=None):
        super().__init__(path, args, split, extended_range)
        data_infos = load_json(osp.join(path, "infrastructure-side/data_info.json"))
        split_path = args.split_data_path
        data_infos = self.get_split(split_path, split, data_infos)

        self.inf_path2info = build_path_to_info(
            "",
            load_json(osp.join(path, "infrastructure-side/data_info.json")),
            sensortype,
        )

        self.data = []
        for elem in data_infos:
            gt_label = {}
            filt = RectFilter(extended_range[0]) if extended_range is not None else Filter()
            gt_label["camera"] = Label(osp.join(path, "infrastructure-side", elem["label_camera_std_path"]), filt)
            gt_label["lidar"] = Label(osp.join(path, "infrastructure-side", elem["label_lidar_std_path"]), filt)

            self.data.append((InfFrame(path, elem), gt_label, filt))

            if sensortype == "camera":
                inf_frame = self.inf_path2info[elem["image_path"]]
                get_annos(path + "/infrastructure-side", "", inf_frame, "camera")

    def get_split(self, split_path, split, data_infos):
        if osp.exists(split_path):
            split_data = load_json(split_path)
        else:
            print("Split File Doesn't Exists!")
            raise Exception

        if split in ["train", "val", "test"]:
            split_data = split_data[split]
        else:
            print("Split Method Doesn't Exists!")
            raise Exception

        frame_pairs_split = []
        for data_info in data_infos:
            frame_idx = data_info["image_path"].split("/")[-1].replace(".jpg", "")
            if frame_idx in split_data:
                frame_pairs_split.append(data_info)

        return frame_pairs_split

    def __getitem__(self, idx):
        return self.data[idx]

    def __len__(self):
        return len(self.data)


class DAIRV2XV(DAIRV2XDataset):
    def __init__(self, path, args, split="train", sensortype="lidar", extended_range=None):
        super().__init__(path, args, split, extended_range)
        data_infos = load_json(osp.join(path, "vehicle-side/data_info.json"))
        split_path = args.split_data_path
        data_infos = self.get_split(split_path, split, data_infos)

        self.veh_path2info = build_path_to_info(
            "",
            load_json(osp.join(path, "vehicle-side/data_info.json")),
            sensortype,
        )

        self.data = []
        for elem in data_infos:
            gt_label = {}
            filt = RectFilter(extended_range[0]) if extended_range is not None else Filter
            for view in ["camera", "lidar"]:
                gt_label[view] = Label(osp.join(path, "vehicle-side", elem["label_" + view + "_std_path"]), filt)

            self.data.append((VehFrame(path, elem), gt_label, filt))

            if sensortype == "camera":
                veh_frame = self.veh_path2info[elem["image_path"]]
                get_annos(path + "/vehicle-side", "", veh_frame, "camera")

    def get_split(self, split_path, split, data_infos):
        if osp.exists(split_path):
            split_data = load_json(split_path)
        else:
            print("Split File Doesn't Exists!")
            raise Exception

        if split in ["train", "val", "test"]:
            split_data = split_data[split]
        else:
            print("Split Method Doesn't Exists!")
            raise Exception

        frame_pairs_split = []
        for data_info in data_infos:
            frame_idx = data_info["image_path"].split("/")[-1].replace(".jpg", "")
            if frame_idx in split_data:
                frame_pairs_split.append(data_info)

        return frame_pairs_split

    def __getitem__(self, idx):
        return self.data[idx]

    def __len__(self):
        return len(self.data)


class VICDataset(DAIRV2XDataset):
    def __init__(self, path, args, split="train", sensortype="lidar", extended_range=None, val_data_path=""):
        super().__init__(path + "/cooperative", args, split, extended_range)
        self.path = path
        self.inf_path2info = build_path_to_info(
            "infrastructure-side",
            load_json(osp.join(path, "infrastructure-side/data_info.json")),
            sensortype,
        )
        self.veh_path2info = build_path_to_info(
            "vehicle-side",
            load_json(osp.join(path, "vehicle-side/data_info.json")),
            sensortype,
        )

        ### Patch for FFNet evaluation ###
        if args.model =='feature_flow':
            frame_pairs = load_json(val_data_path)
        else:
            frame_pairs = load_json(osp.join(path, "cooperative/data_info.json"))
            split_path = args.split_data_path
            frame_pairs = self.get_split(split_path, split, frame_pairs)

        self.data = []
        self.inf_frames = {}
        self.veh_frames = {}

        for elem in frame_pairs:
            if sensortype == "lidar":
                inf_frame = self.inf_path2info[elem["infrastructure_pointcloud_path"]]
                veh_frame = self.veh_path2info[elem["vehicle_pointcloud_path"]]
            elif sensortype == "camera":
                inf_frame = self.inf_path2info[elem["infrastructure_image_path"]]
                veh_frame = self.veh_path2info[elem["vehicle_image_path"]]
                get_annos(path, "infrastructure-side", inf_frame, "camera")
                get_annos(path, "vehicle-side", veh_frame, "camera")

            inf_frame = InfFrame(path + "/infrastructure-side/", inf_frame)
            veh_frame = VehFrame(path + "/vehicle-side/", veh_frame)
            if not inf_frame["batch_id"] in self.inf_frames:
                self.inf_frames[inf_frame["batch_id"]] = [inf_frame]
            else:
                self.inf_frames[inf_frame["batch_id"]].append(inf_frame)
            if not veh_frame["batch_id"] in self.veh_frames:
                self.veh_frames[veh_frame["batch_id"]] = [veh_frame]
            else:
                self.veh_frames[veh_frame["batch_id"]].append(veh_frame)
            vic_frame = VICFrame(path, elem, veh_frame, inf_frame, 0)

            # filter in world coordinate
            if extended_range is not None:
                trans = vic_frame.transform(from_coord="Vehicle_lidar", to_coord="World")
                filt_world = RectFilter(trans(extended_range)[0])

            trans_1 = vic_frame.transform("World", "Vehicle_lidar")
            label_v = Label(osp.join(path, elem["cooperative_label_path"]), filt_world)
            label_v["boxes_3d"] = trans_1(label_v["boxes_3d"])
            filt = RectFilter(extended_range[0])
            tup = (
                vic_frame,
                label_v,
                filt,
            )
            self.data.append(tup)

    def query_veh_segment(self, frame, sensortype="lidar", previous_only=False):
        segment = self.veh_frames[frame.batch_id]
        return [f for f in segment if f.id[sensortype] < frame.id[sensortype] or not previous_only]

    def query_inf_segment(self, frame, sensortype="lidar", previous_only=False):
        segment = self.inf_frames[frame.batch_id]
        return [f for f in segment if f.id[sensortype] < frame.id[sensortype] or not previous_only]

    def get_split(self, split_path, split, frame_pairs):
        if osp.exists(split_path):
            split_data = load_json(split_path)
        else:
            print("Split File Doesn't Exists!")
            raise Exception

        if split in ["train", "val", "test"]:
            split_data = split_data["cooperative_split"][split]
        else:
            print("Split Method Doesn't Exists!")
            raise Exception

        frame_pairs_split = []
        for frame_pair in frame_pairs:
            veh_frame_idx = frame_pair["vehicle_image_path"].split("/")[-1].replace(".jpg", "")
            if veh_frame_idx in split_data:
                frame_pairs_split.append(frame_pair)
        return frame_pairs_split

    def __getitem__(self, index):
        raise NotImplementedError


class VICSyncDataset(VICDataset):
    def __init__(self, path, args, split="train", sensortype="lidar", extended_range=None, val_data_path=""):
        super().__init__(path, args, split, sensortype, extended_range, val_data_path)
        logger.info("VIC-Sync {} dataset, overall {} frames".format(split, len(self.data)))

    def __getitem__(self, index):
        return self.data[index]

    def __len__(self):
        return len(self.data)


class VICAsyncDataset(VICDataset):
    def __init__(self, path, args, split="train", sensortype="lidar", extended_range=None, val_data_path=""):
        super().__init__(path, args, split, sensortype, extended_range)
        self.k = args.k
        self.async_data = []
        for vic_frame, coop_labels, filt in self.data:
            inf_frame, delta_t = self.prev_inf_frame(
                vic_frame.inf_frame.id[sensortype],
                sensortype,
            )
            if inf_frame is None:
                continue
            else:
                new_vic_frame = VICFrame(path, {}, vic_frame.veh_frame, inf_frame, delta_t, vic_frame.offset)
                self.async_data.append((new_vic_frame, coop_labels, filt))

        logger.info("VIC-Async {} dataset, overall {} frames".format(split, len(self.async_data)))

    def __getitem__(self, index):
        return self.async_data[index]

    def __len__(self):
        return len(self.async_data)

    def prev_inf_frame(self, index, sensortype="lidar"):
        if sensortype == "lidar":
            cur = self.inf_path2info["infrastructure-side/velodyne/" + index + ".pcd"]
            if (
                int(index) - self.k < int(cur["batch_start_id"])
                or "infrastructure-side/velodyne/" + id_to_str(int(index) - self.k) + ".pcd" not in self.inf_path2info
            ):
                return None, None
            prev = self.inf_path2info["infrastructure-side/velodyne/" + id_to_str(int(index) - self.k) + ".pcd"]
            return (
                InfFrame(self.path + "/infrastructure-side/", prev),
                (int(cur["pointcloud_timestamp"]) - int(prev["pointcloud_timestamp"])) / 1000.0,
            )
        elif sensortype == "camera":
            cur = self.inf_path2info["infrastructure-side/image/" + index + ".jpg"]
            if int(index) - self.k < int(cur["batch_start_id"]):
                return None, None
            prev = self.inf_path2info["infrastructure-side/image/" + id_to_str(int(index) - self.k) + ".jpg"]
            get_annos(self.path, "infrastructure-side", prev, "camera")
            return (
                InfFrame(self.path + "/infrastructure-side/", prev),
                (int(cur["image_timestamp"]) - int(prev["image_timestamp"])) / 1000.0,
            )


if __name__ == "__main__":
    from tqdm import tqdm
    import numpy as np

    input = "../data/cooperative-vehicle-infrastructure/"
    split = "val"
    sensortype = "camera"
    box_range = np.array([-10, -49.68, -3, 79.12, 49.68, 1])
    indexs = [
        [0, 1, 2],
        [3, 1, 2],
        [3, 4, 2],
        [0, 4, 2],
        [0, 1, 5],
        [3, 1, 5],
        [3, 4, 5],
        [0, 4, 5],
    ]
    extended_range = np.array([[box_range[index] for index in indexs]])
    dataset = VICSyncDataset(input, split, sensortype, extended_range=extended_range)

    for VICFrame_data, label, filt in tqdm(dataset):
        veh_image_path = VICFrame_data.vehicle_frame()["image_path"][-10:-4]
        inf_image_path = VICFrame_data.infrastructure_frame()["image_path"][-10:-4]
        print(veh_image_path, inf_image_path)


class DAIRV2XISPD(DAIRV2XDataset):
    def __init__(self, path, args, split="train", sensortype="lidar", extended_range=None):
        super().__init__(path, args, split, extended_range)
        data_infos = load_json(osp.join(path, "infrastructure-side/data_info.json"))
        split_path = args.split_data_path
        data_infos = self.get_split(split_path, split, data_infos)

        self.inf_frame2info = build_frame_to_info(load_json(osp.join(path, "infrastructure-side/data_info.json")))

        self.data = []
        for elem in data_infos:
            gt_label = {}
            filt = RectFilter(extended_range[0]) if extended_range is not None else Filter()
            gt_label["camera"] = Label(osp.join(path, "infrastructure-side", elem["label_camera_std_path"]), filt)
            gt_label["lidar"] = Label(osp.join(path, "infrastructure-side", elem["label_lidar_std_path"]), filt)

            self.data.append((InfFrameSPD(path + "/infrastructure-side", elem), gt_label, filt))

            if sensortype == "camera":
                inf_frame = self.inf_frame2info[elem["frame_id"]]
                get_annos(path + "/infrastructure-side", "", inf_frame, "camera")

    def get_split(self, split_path, split, data_infos):
        if osp.exists(split_path):
            split_data = load_json(split_path)
        else:
            print("Split File Doesn't Exists!")
            raise Exception

        if split in ["train", "val", "test"]:
            split_data = split_data["infrastructure_split"][split]
        else:
            print("Split Method Doesn't Exists!")
            raise Exception

        frame_pairs_split = []
        for data_info in data_infos:
            frame_idx = data_info["frame_id"]
            if frame_idx in split_data:
                frame_pairs_split.append(data_info)

        return frame_pairs_split

    def __getitem__(self, idx):
        return self.data[idx]

    def __len__(self):
        return len(self.data)

class DAIRV2XVSPD(DAIRV2XDataset):
    def __init__(self, path, args, split="train", sensortype="lidar", extended_range=None):
        super().__init__(path, args, split, extended_range)
        data_infos = load_json(osp.join(path, "vehicle-side/data_info.json"))
        split_path = args.split_data_path
        data_infos = self.get_split(split_path, split, data_infos)

        self.veh_frame2info = build_frame_to_info(load_json(osp.join(path, "vehicle-side/data_info.json")))

        self.data = []
        for elem in data_infos:
            gt_label = {}
            filt = RectFilter(extended_range[0]) if extended_range is not None else Filter
            for view in ["camera", "lidar"]:
                gt_label[view] = Label(osp.join(path, "vehicle-side", elem["label_" + view + "_std_path"]), filt)

            self.data.append((VehFrameSPD(path + "/vehicle-side", elem), gt_label, filt))

            if sensortype == "camera":
                veh_frame = self.veh_frame2info[elem["frame_id"]]
                get_annos(path + "/vehicle-side", "", veh_frame, "camera")

    def get_split(self, split_path, split, data_infos):
        if osp.exists(split_path):
            split_data = load_json(split_path)
        else:
            print("Split File Doesn't Exists!")
            raise Exception

        if split in ["train", "val", "test"]:
            split_data = split_data["vehicle_split"][split]
        else:
            print("Split Method Doesn't Exists!")
            raise Exception

        frame_pairs_split = []
        for data_info in data_infos:
            frame_idx = data_info["frame_id"]
            if frame_idx in split_data:
                frame_pairs_split.append(data_info)

        return frame_pairs_split

    def __getitem__(self, idx):
        return self.data[idx]

    def __len__(self):
        return len(self.data)

class VICDatasetSPD(DAIRV2XDataset):
    def __init__(self, path, args, split="train", sensortype="lidar", extended_range=None, val_data_path=""):
        super().__init__(path + "/cooperative", args, split, extended_range)
        self.path = path
        self.inf_frame2info = build_frame_to_info(load_json(osp.join(path, "infrastructure-side/data_info.json")))
        self.veh_frame2info = build_frame_to_info(load_json(osp.join(path, "vehicle-side/data_info.json")))

        ### Patch for FFNet evaluation ###
        if args.model =='feature_flow':
            frame_pairs = load_json(val_data_path)
        else:
            frame_pairs = load_json(osp.join(path, "cooperative/data_info.json"))
            split_path = args.split_data_path
            frame_pairs = self.get_split(split_path, split, frame_pairs)

        self.data = []
        self.inf_frames = {}
        self.veh_frames = {}

        for elem in frame_pairs:
            if sensortype == "lidar":
                inf_frame = self.inf_frame2info[elem["infrastructure_frame"]]
                veh_frame = self.veh_frame2info[elem["vehicle_frame"]]
            elif sensortype == "camera":
                inf_frame = self.inf_frame2info[elem["infrastructure_frame"]]
                veh_frame = self.veh_frame2info[elem["vehicle_frame"]]
                get_annos(path, "infrastructure-side", inf_frame, "camera")
                get_annos(path, "vehicle-side", veh_frame, "camera")

            inf_frame = InfFrameSPD(path + "/infrastructure-side/", inf_frame)
            veh_frame = VehFrameSPD(path + "/vehicle-side/", veh_frame)
            if not inf_frame["sequence_id"] in self.inf_frames:
                self.inf_frames[inf_frame["sequence_id"]] = [inf_frame]
            else:
                self.inf_frames[inf_frame["sequence_id"]].append(inf_frame)
            if not veh_frame["sequence_id"] in self.veh_frames:
                self.veh_frames[veh_frame["sequence_id"]] = [veh_frame]
            else:
                self.veh_frames[veh_frame["sequence_id"]].append(veh_frame)
            vic_frame = VICFrameSPD(
                path, elem, veh_frame, inf_frame, 0, elem["system_error_offset"]["delta_x"], elem["system_error_offset"]["delta_y"]
            )

            # filter in vehicle-side coordinate
            filt_veh = RectFilter(extended_range[0]) if extended_range is not None else Filter()

            coop_label_path = "cooperative/label/" + elem["vehicle_frame"] + ".json"
            label_v = Label(osp.join(path, coop_label_path), filt_veh)
            filt = RectFilter(extended_range[0])
            tup = (
                vic_frame,
                label_v,
                filt,
            )
            self.data.append(tup)

    def query_veh_segment(self, frame, sensortype="lidar", previous_only=False):
        segment = self.veh_frames[frame.sequence_id]
        return [f for f in segment if f["frame_id"] < frame["frame_id"] or not previous_only]

    def query_inf_segment(self, frame, sensortype="lidar", previous_only=False):
        segment = self.inf_frames[frame.sequence_id]
        return [f for f in segment if f["frame_id"] < frame["frame_id"] or not previous_only]

    def get_split(self, split_path, split, frame_pairs):
        if osp.exists(split_path):
            split_data = load_json(split_path)
        else:
            print("Split File Doesn't Exists!")
            raise Exception

        if split in ["train", "val", "test"]:
            split_data = split_data["cooperative_split"][split]
        else:
            print("Split Method Doesn't Exists!")
            raise Exception

        frame_pairs_split = []
        for frame_pair in frame_pairs:
            veh_frame_idx = frame_pair["vehicle_frame"]
            if veh_frame_idx in split_data:
                frame_pairs_split.append(frame_pair)
        return frame_pairs_split

    def __getitem__(self, index):
        raise NotImplementedError

class VICSyncDatasetSPD(VICDatasetSPD):
    def __init__(self, path, args, split="train", sensortype="lidar", extended_range=None, val_data_path=""):
        super().__init__(path, args, split, sensortype, extended_range, val_data_path)
        logger.info("VIC-Sync {} dataset, overall {} frames".format(split, len(self.data)))

    def __getitem__(self, index):
        return self.data[index]

    def __len__(self):
        return len(self.data)

class VICAsyncDatasetSPD(VICDatasetSPD):
    def __init__(self, path, args, split="train", sensortype="lidar", extended_range=None, val_data_path=""):
        super().__init__(path, args, split, sensortype, extended_range, val_data_path)
        self.k = args.k
        self.async_data = []
        for vic_frame, coop_labels, filt in self.data:
            inf_frame, delta_t = self.prev_inf_frame(
                vic_frame.inf_frame.id[sensortype],
                sensortype,
            )
            if inf_frame is None:
                continue
            else:
                new_vic_frame = VICFrameSPD(path, {}, vic_frame.veh_frame, inf_frame, delta_t, vic_frame.delta_x, vic_frame.delta_y)
                self.async_data.append((new_vic_frame, coop_labels, filt))

        logger.info("VIC-Async {} dataset, overall {} frames".format(split, len(self.async_data)))

    def __getitem__(self, index):
        return self.async_data[index]

    def __len__(self):
        return len(self.async_data)

    def prev_inf_frame(self, index, sensortype="lidar"):
        if sensortype == "lidar":
            cur = self.inf_frame2info[index]
            if (
                int(index) - self.k < int(cur["valid_frames_splits"][0]["start_frame_id"])
                or id_to_str(int(index) - self.k) not in self.inf_frame2info.keys()
            ):
                return None, None
            prev = self.inf_frame2info[id_to_str(int(index) - self.k)]
            return (
                InfFrameSPD(self.path + "/infrastructure-side/", prev),
                (int(cur["pointcloud_timestamp"]) - int(prev["pointcloud_timestamp"])) / 1000.0,
            )
        elif sensortype == "camera":
            cur = self.inf_frame2info[index]
            if int(index) - self.k < int(cur["valid_frames_splits"][0]["start_frame_id"]):
                return None, None
            prev = self.inf_frame2info[id_to_str(int(index) - self.k)]
            get_annos(self.path, "infrastructure-side", prev, "camera")
            return (
                InfFrameSPD(self.path + "/infrastructure-side/", prev),
                (int(cur["image_timestamp"]) - int(prev["image_timestamp"])) / 1000.0,
            )


import os.path as osp
import json
import os

from torch.utils.data import Dataset
from v2x_utils import get_trans
from dataset.dataset_utils import load_json


def get_annos(path, prefix, single_frame, sensortype="camera"):
    img_path = path + prefix + single_frame["image_path"]
    trans0_path = ""
    if "calib_lidar_to_camera_path" in single_frame.keys():
        trans0_path = single_frame["calib_lidar_to_camera_path"]
    else:
        trans0_path = single_frame["calib_virtuallidar_to_camera_path"]
    trans1_path = single_frame["calib_camera_intrinsic_path"]
    trans0, rot0 = get_trans(load_json(osp.join(path, prefix, trans0_path)))
    lidar2camera = {}
    lidar2camera.update(
        {
            "translation": trans0,
            "rotation": rot0,
        }
    )
    # trans0, rot0 = lidar2camera["translation"], lidar2camera["rotation"]
    camera2image = load_json(osp.join(path, prefix, trans1_path))["cam_K"]

    annFile = {}
    img_ann = {}
    calib = {}
    calib.update(
        {
            "cam_intrinsic": camera2image,
            "Tr_velo_to_cam": lidar2camera,
        }
    )

    img_ann.update({"file_name": img_path, "calib": calib})
    imglist = []
    imglist.append(img_ann)
    annFile.update({"images": imglist})
    if not osp.exists(osp.join(path, prefix, "annos")):
        os.mkdir(osp.join(path, prefix, "annos"))
    ann_path_o = osp.join(path, prefix, "annos", single_frame["image_path"].split("/")[-1].split(".")[0] + ".json")
    with open(ann_path_o, "w") as f:
        json.dump(annFile, f)


def build_path_to_info(prefix, data, sensortype="lidar"):
    path2info = {}
    if sensortype == "lidar":
        for elem in data:
            if elem["pointcloud_path"] == "":
                continue
            path = osp.join(prefix, elem["pointcloud_path"])
            path2info[path] = elem
    elif sensortype == "camera":
        for elem in data:
            if elem["image_path"] == "":
                continue
            path = osp.join(prefix, elem["image_path"])
            path2info[path] = elem
    return path2info

def build_frame_to_info(data):
    frame2info = {}
    for elem in data:
        if elem["frame_id"] == "":
            continue
        frame2info[elem["frame_id"]] = elem
    return frame2info

class DAIRV2XDataset(Dataset):
    def __init__(self, path, args, split="train", extended_range=None):
        super().__init__()

        self.split = None


from dair_v2x_for_detection import *
from dataset_utils import *

SUPPROTED_DATASETS = {
    "dair-v2x-v": DAIRV2XV,
    "dair-v2x-i": DAIRV2XI,
    "vic-sync": VICSyncDataset,
    "vic-async": VICAsyncDataset,
    "dair-v2x-v-spd": DAIRV2XVSPD,
    "dair-v2x-i-spd": DAIRV2XISPD,
    "vic-sync-spd": VICSyncDatasetSPD,
    "vic-async-spd": VICAsyncDatasetSPD,
}


import json
import yaml
import pickle
import numpy as np
from pypcd import pypcd
import mmcv


def load_json(path):
    with open(path, mode="r") as f:
        data = json.load(f)
    return data


def load_yaml(path):
    with open(path, "r") as f:
        data = yaml.load(f)
    return data


def load_pkl(path):
    with open(path, "rb") as f:
        return pickle.load(f)


def save_pkl(item, path):
    with open(path, "wb") as f:
        pickle.dump(item, f)


def read_pcd(pcd_path):
    pcd = pypcd.PointCloud.from_path(pcd_path)
    time = None
    pcd_np_points = np.zeros((pcd.points, 4), dtype=np.float32)
    pcd_np_points[:, 0] = np.transpose(pcd.pc_data["x"])
    pcd_np_points[:, 1] = np.transpose(pcd.pc_data["y"])
    pcd_np_points[:, 2] = np.transpose(pcd.pc_data["z"])
    pcd_np_points[:, 3] = np.transpose(pcd.pc_data["intensity"]) / 256.0
    del_index = np.where(np.isnan(pcd_np_points))[0]
    pcd_np_points = np.delete(pcd_np_points, del_index, axis=0)
    return pcd_np_points, time


def read_jpg(jpg_path):
    image = mmcv.imread(jpg_path)
    return image


import numpy as np

from v2x_utils import get_3d_8points
from dataset.dataset_utils import load_json
from config import name2id


class Label(dict):
    def __init__(self, path, filt):
        raw_labels = load_json(path)
        boxes = []
        class_types = []
        for label in raw_labels:
            size = label["3d_dimensions"]
            if size["l"] == 0 or size["w"] == 0 or size["h"] == 0:
                continue
            if "world_8_points" in label:
                box = label["world_8_points"]
            else:
                pos = label["3d_location"]
                box = get_3d_8points(
                    [float(size["l"]), float(size["w"]), float(size["h"])],
                    float(label["rotation"]),
                    [float(pos["x"]), float(pos["y"]), float(pos["z"]) - float(size["h"]) / 2],
                ).tolist()
            # determine if box is in extended range
            if filt is None or filt(box):
                boxes.append(box)
                class_types.append(name2id[label["type"].lower()])
        boxes = np.array(boxes)
        class_types = np.array(class_types)
        # if len(class_types) == 1:
        #     boxes = boxes[np.newaxis, :]
        self.__setitem__("boxes_3d", boxes)
        self.__setitem__("labels_3d", class_types)
        self.__setitem__("scores_3d", np.ones_like(class_types))


import os
import os.path as osp
from abc import ABC, abstractmethod
import torch

from dataset.dataset_utils import read_pcd, read_jpg, load_json
from v2x_utils.transformation_utils import Coord_transformation, Coord_transformation_spd


class Frame(dict, ABC):
    def __init__(self, path, info_dict):
        self.path = path
        for key in info_dict:
            self.__setitem__(key, info_dict[key])

    @abstractmethod
    def point_cloud(self, **args):
        raise NotImplementedError

    @abstractmethod
    def image(self, **args):
        raise NotImplementedError


class VehFrame(Frame):
    def __init__(self, path, veh_dict, tmp_key="tmps"):
        super().__init__(path, veh_dict)
        self.id = {}
        self.id["lidar"] = veh_dict["pointcloud_path"][-10:-4]
        self.id["camera"] = veh_dict["image_path"][-10:-4]
        self.tmp = "../cache/" + tmp_key + "/tmp_v_" + self.id["lidar"] + ".bin"
        if not osp.exists("../cache/" + tmp_key):
            os.system("mkdir -p ../cache/" + tmp_key)

    def point_cloud(self, data_format="array"):
        points, _ = read_pcd(osp.join(self.path, self.get("pointcloud_path")))
        if data_format == "array":
            return points, _
        elif data_format == "file":
            if not osp.exists(self.tmp):
                points.tofile(self.tmp)
            return self.tmp
        elif data_format == "tensor":
            return torch.tensor(points)

    def image(self, data_format="rgb"):
        image_array = read_jpg(osp.join(self.path, self.get("image_path")))
        if data_format == "array":
            return image_array
        elif data_format == "file":
            if not osp.exists(self.tmp):
                image_array.tofile(self.tmp)
            return self.tmp
        elif data_format == "tensor":
            return torch.tensor(image_array)


class InfFrame(Frame):
    def __init__(self, path, inf_dict, tmp_key="tmps"):
        super().__init__(path, inf_dict)
        self.id = {}
        self.id["lidar"] = inf_dict["pointcloud_path"][-10:-4]
        self.id["camera"] = inf_dict["image_path"][-10:-4]
        self.tmp = "../cache/" + tmp_key + "/tmp_i_" + self.id["lidar"] + ".bin"
        if not osp.exists("../cache/" + tmp_key):
            os.system("mkdir ../cache/" + tmp_key)

    def point_cloud(self, data_format="array"):
        points, _ = read_pcd(osp.join(self.path, self.get("pointcloud_path")))
        if data_format == "array":
            return points, _
        elif data_format == "file":
            if not osp.exists(self.tmp):
                points.tofile(self.tmp)
            return self.tmp
        elif data_format == "tensor":
            return torch.tensor(points)

    def image(self, data_format="rgb"):
        image_array = read_jpg(osp.join(self.path, self.get("image_path")))
        if data_format == "array":
            return image_array
        elif data_format == "file":
            if not osp.exists(self.tmp):
                image_array.copy(self.tmp)
            return self.tmp
        elif data_format == "tensor":
            return torch.tensor(image_array)

    def transform(self, from_coord="", to_coord=""):
        """
        This function serves to calculate the Transformation Matrix from 'from_coord' to 'to_coord'
        coord_list=['Infrastructure_image','Infrastructure_camera','Infrastructure_lidar',
                       'world', 'Vehicle_image','Vehicle_camera','Vehicle_lidar',
                       'Vehicle_novatel']
        Args:
            from_coord(str): element in the coord_list
            to_coord(str):  element in coord_list
        Return:
            Transformation_Matrix: Transformation Matrix from 'from_coord' to 'to_coord'
        """
        infra_name = self.id["camera"]
        trans = Coord_transformation(from_coord, to_coord, "/".join(self.path.split("/")[:-2]), infra_name, "")
        return trans


class VICFrame(Frame):
    def __init__(self, path, info_dict, veh_frame, inf_frame, time_diff, offset=None):
        # TODO: build vehicle frame and infrastructure frame
        super().__init__(path, info_dict)
        self.veh_frame = veh_frame
        self.inf_frame = inf_frame
        self.time_diff = time_diff
        self.transformation = None
        if offset is None:
            offset = load_json(osp.join(self.inf_frame.path, self.inf_frame["calib_virtuallidar_to_world_path"]))[
                "relative_error"
            ]
        self.offset = offset

    def vehicle_frame(self):
        return self.veh_frame

    def infrastructure_frame(self):
        return self.inf_frame

    def proc_transformation(self):
        # self.transformation["infrastructure_image"]["world"]
        # read vehicle to world
        # read infrastructure to novaltel
        # read novaltel to world
        # compute inv
        # compose
        pass

    def transform(self, from_coord="", to_coord=""):
        """
        This function serves to calculate the Transformation Matrix from 'from_coord' to 'to_coord'
        coord_list=['Infrastructure_image','Infrastructure_camera','Infrastructure_lidar',
                       'world', 'Vehicle_image','Vehicle_camera','Vehicle_lidar',
                       'Vehicle_novatel']
        Args:
            from_coord(str): element in the coord_list
            to_coord(str):  element in coord_list
        Return:
            Transformation_Matrix: Transformation Matrix from 'from_coord' to 'to_coord'
        """
        veh_name = self.veh_frame["image_path"][-10:-4]
        infra_name = self.inf_frame["image_path"][-10:-4]
        trans = Coord_transformation(from_coord, to_coord, self.path, infra_name, veh_name)
        return trans


class VehFrameSPD(Frame):
    def __init__(self, path, veh_dict, tmp_key="tmps", delta_x=0, delta_y=0):
        super().__init__(path, veh_dict)
        self.id = {}
        self.id["lidar"] = veh_dict["frame_id"]
        self.id["camera"] = veh_dict["frame_id"]
        self.tmp = "../cache/" + tmp_key + "/tmp_v_" + self.get("frame_id") + ".bin"
        self.delta_x = delta_x
        self.delta_y = delta_y
        if not osp.exists("../cache/" + tmp_key):
            os.system("mkdir -p ../cache/" + tmp_key)

    def point_cloud(self, data_format="array"):
        points, _ = read_pcd(osp.join(self.path, self.get("pointcloud_path")))
        if data_format == "array":
            return points, _
        elif data_format == "file":
            if not osp.exists(self.tmp):
                points.tofile(self.tmp)
            return self.tmp
        elif data_format == "tensor":
            return torch.tensor(points)

    def early_fusion_tmp_point_cloud(self, data_format="array"):
        points, _ = read_pcd(osp.join("../early_fusion_point_cloud", self.get("pointcloud_path")))
        if data_format == "array":
            return points, _
        elif data_format == "file":
            if not osp.exists(self.tmp):
                points.tofile(self.tmp)
            return self.tmp
        elif data_format == "tensor":
            return torch.tensor(points)

    def image(self, data_format="rgb"):
        image_array = read_jpg(osp.join(self.path, self.get("image_path")))
        if data_format == "array":
            return image_array
        elif data_format == "file":
            if not osp.exists(self.tmp):
                image_array.tofile(self.tmp)
            return self.tmp
        elif data_format == "tensor":
            return torch.tensor(image_array)


class InfFrameSPD(Frame):
    def __init__(self, path, inf_dict, tmp_key="tmps", delta_x=0, delta_y=0):
        super().__init__(path, inf_dict)
        self.id = {}
        self.id["lidar"] = inf_dict["frame_id"]
        self.id["camera"] = inf_dict["frame_id"]
        self.tmp = "../cache/" + tmp_key + "/tmp_i_" + self.get("frame_id") + ".bin"
        self.delta_x = delta_x
        self.delta_y = delta_y
        if not osp.exists("../cache/" + tmp_key):
            os.system("mkdir ../cache/" + tmp_key)

    def point_cloud(self, data_format="array"):
        points, _ = read_pcd(osp.join(self.path, self.get("pointcloud_path")))
        if data_format == "array":
            return points, _
        elif data_format == "file":
            if not osp.exists(self.tmp):
                points.tofile(self.tmp)
            return self.tmp
        elif data_format == "tensor":
            return torch.tensor(points)

    def image(self, data_format="rgb"):
        image_array = read_jpg(osp.join(self.path, self.get("image_path")))
        if data_format == "array":
            return image_array
        elif data_format == "file":
            if not osp.exists(self.tmp):
                image_array.copy(self.tmp)
            return self.tmp
        elif data_format == "tensor":
            return torch.tensor(image_array)

    def transform(self, from_coord="", to_coord=""):
        """
        This function serves to calculate the Transformation Matrix from 'from_coord' to 'to_coord'
        coord_list=['Infrastructure_image','Infrastructure_camera','Infrastructure_lidar',
                       'world', 'Vehicle_image','Vehicle_camera','Vehicle_lidar',
                       'Vehicle_novatel']
        Args:
            from_coord(str): element in the coord_list
            to_coord(str):  element in coord_list
        Return:
            Transformation_Matrix: Transformation Matrix from 'from_coord' to 'to_coord'
        """
        inf_name = self.get("frame_id")
        trans = Coord_transformation_spd(from_coord, to_coord, "/".join(self.path.split("/")[:-2]), inf_name, "", self.delta_x, self.delta_y)
        return trans


class VICFrameSPD(Frame):
    def __init__(self, path, coop_dict, veh_frame_info, inf_frame_info, time_diff, delta_x=0, delta_y=0):
        # TODO: build vehicle frame and infrastructure frame
        super().__init__(path, coop_dict)
        self.veh_frame = veh_frame_info
        self.inf_frame = inf_frame_info
        self.time_diff = time_diff
        self.transformation = None
        self.delta_x = delta_x
        self.delta_y = delta_y

    def vehicle_frame(self):
        return self.veh_frame

    def infrastructure_frame(self):
        return self.inf_frame

    def proc_transformation(self):
        # self.transformation["infrastructure_image"]["world"]
        # read vehicle to world
        # read infrastructure to novaltel
        # read novaltel to world
        # compute inv
        # compose
        pass

    def transform(self, from_coord="", to_coord=""):
        """
        This function serves to calculate the Transformation Matrix from 'from_coord' to 'to_coord'
        coord_list=['Infrastructure_image','Infrastructure_camera','Infrastructure_lidar',
                       'world', 'Vehicle_image','Vehicle_camera','Vehicle_lidar',
                       'Vehicle_novatel']
        Args:
            from_coord(str): element in the coord_list
            to_coord(str):  element in coord_list
        Return:
            Transformation_Matrix: Transformation Matrix from 'from_coord' to 'to_coord'
        """
        trans = Coord_transformation_spd(
            from_coord, to_coord, self.path, self.inf_frame["frame_id"], self.veh_frame["frame_id"], self.delta_x, self.delta_y
        )
        return trans


from file_io import *
from frame import *
from label import *


## [English](./README.md) | 简体中文

## DAIR-V2X车路协同数据集
### 目录结构
```
single-infrastructure-side              # 路端数据集（DAIR-V2X-I）
    ├── image			        # 图像
        ├── {id}.jpg                    
    ├── velodyne                        # 点云（为方便研究，已转到虚拟LiDAR坐标系下）
        ├── {id}.pcd                 
    ├── calib                           # 标定参数
        ├── camera_intrinsic            # 相机参数
            ├── {id}.json              
        ├── virtuallidar_to_camera      # 虚拟LiDAR坐标系到相机坐标系变换参数
            ├── {id}.json              
    ├── label                           # 标注文件
        ├── camera                      # 标注文件（以图像时间戳为基准，3D标注贴合图像中的障碍物）
            ├── {id}.json
        ├── virtuallidar                # 标注文件（以点云时间戳为基准，3D标注贴合点云中的障碍物）
            ├── {id}.json
    ├── data_info.json                  # 数据索引
single-vehicle-side                     # 车端数据集（DAIR-V2X-V）
    ├── image		                # 图像
        ├── {id}.jpg
    ├── velodyne                        # 点云
        ├── {id}.pcd                    
    ├── calib                           # 标定参数
        ├── camera_intrinsic            # 相机参数
            ├── {id}.json
        ├── lidar_to_camera             # LiDAR坐标系到相机坐标系变换参数
            ├── {id}.json
    ├── label				# 标注文件
        ├── camera                      # 标注文件（以图像时间戳为基准，3D标注贴合图像中的障碍物）
            ├── {id}.json
        ├── lidar                       # 标注文件（以点云时间戳为基准，3D标注贴合点云中的障碍物）
            ├── {id}.json
    ├── data_info.json                  # 数据索引
cooperative-vehicle-infrastructure      # 车路协同数据集（DAIR-V2X-C）
    ├── infrastructure-side             # 车路协同路端
        ├── image		        # 图像
            ├── {id}.jpg
        ├── velodyne                    # 点云（为方便研究，已转到虚拟LiDAR坐标系下）
            ├── {id}.pcd               
        ├── calib                       # 标定参数
            ├── camera                  # 相机参数
                ├── {id}.json         
            ├── virtuallidar_to_world   # 虚拟LiDAR坐标系到世界坐标系变换参数（世界坐标系经过简单位置处理）
                ├── {id}.json          
            ├── virtuallidar_to_camera  # 虚拟LiDAR坐标系到相机坐标系变换参数
                ├── {id}.json          
        ├── label			# 标注文件：路端数据标注
            ├── camera                  # 标注文件（以图像时间戳为基准，3D标注贴合图像中的障碍物）
                ├── {id}.json
            ├── virtuallidar            # 标注文件（以点云时间戳为基准，3D标注贴合点云中的障碍物）
                ├── {id}.json
        ├── data_info.json              # 数据索引
    ├── vehicle-side                    # 车路协同车端：此处车端id与路端id非一一对应
        ├── image		        # 图像
            ├── {id}.jpg
        ├── velodyne                    # 点云（LiDAR坐标系下）
            ├── {id}.pcd               
        ├── calib                       # 标定参数和定位
            ├── camera_intrinsic        # 相机参数
                ├── {id}.json
            ├── lidar_to_camera         # LiDAR坐标系到相机坐标系变换参数
                ├── {id}.json
            ├── lidar_to_novatel        # LiDAR坐标系到NovAtel坐标系变换参数
                ├── {id}.json
            ├── novatel_to_world        # NovAtel在世界坐标系下定位坐标（世界坐标系经过简单位置处理）
                ├── {id}.json
        ├── label			# 标注文件：车端数据标注
            ├── camera                  # 标注文件（以图像时间戳为基准，3D标注贴合图像中的障碍物）
                ├── {id}.json
            ├── lidar                   # 标注文件（以点云时间戳为基准，3D标注贴合点云中的障碍物）
                ├── {id}.json
        ├── data_info.json              # 数据索引
    ├── cooperative                     # 融合标注
        ├── label_world                 # 融合标注：利用半自动方式生成车端与路端联合视角下的标注，位于世界坐标系，可利用开源代码转换到车端LiDAR坐标系
            ├── {id}.json               
        ├── data_info.json              # 数据索引
```
---
### 索引文件格式
#### DAIR-V2X-I路端data_info.json组织结构
json文件由一个列表组织而成，列表项的字段和含义如下表所示：

| 字段                             | 含义                             |
| -------------------------------- | --------------------------------- |
| `image_path`                         | 图像路径                        |
| `pointcloud_path`                    | 点云路径                        |
| `label_virtuallidar_path`            | 以点云时间戳为基准标注结果路径      |
 | `label_camera_path`                  | 以图像时间戳为基准标注结果路径      |
| `calib_virtuallidar_to_camera_path`  | 虚拟LiDAR坐标系到相机坐标系参数路径 |
| `calib_camera_intrinsic_path`        | 相机参数路径                     |

#### DAIR-V2X-V车端data_info.json组织结构
json文件由一个列表组织而成，列表项的字段和含义如下表所示：

| 字段                                | 含义                             |
| ---------------------------------- | -------------------------------- |
| `image_path`                       | 图像路径                          |
| `image_timestamp`                  | 图像时间戳                        |
| `pointcloud_path`                  | 点云路径                          |
| `pointcloud_timestamp`             | 点云时间戳                        |
| `label_lidar_path`                 | 以点云时间戳为基准标注结果路径        |
| `label_camera_path`                | 以图像时间戳为基准标注结果路径        |
| `calib_lidar_to_camera_path`       | LiDAR坐标系到相机坐标系参数路径      |
| `calib_camera_intrinsic_path`      | 相机内参路径                      |

#### DAIR-V2X-C路端data_info.json组织结构

json文件由一个列表组织而成，列表项的字段和含义如下表所示：

| 字段                             | 含义                             |
| -------------------------------- | -------------------------------- |
| `image_path`                       | 图像路径                         |
| `image_timestamp`                  | 图像时间戳                       |
| `pointcloud_path`                  | 点云路径                         |
| `pointcloud_timestamp`             | 点云时间戳                       |
| `label_lidar_path`                 | 以点云时间戳为基准标注结果路径 |
| `label_camera_path`                | 以图像时间戳为基准标注结果路径 |
| `calib_virtuallidar_to_world_path`   | 虚拟LiDAR坐标系到世界坐标系参数路径  |
| `calib_virtuallidar_to_camera_path`  | 虚拟LiDAR坐标系到相机坐标系参数路径  |
| `calib_camera_intrinsic_path`      | 相机参数路径                     |
| `batch_id`                         | 数据片段编号：车端与路端共享相同的batch_id |
| `intersection_loc`                 | 数据采集所在路口名称                     |
| `batch_start_id`                   | 数据片段起始编号                       |
| `batch_end_id`                     | 数据片段结束编号             |

**备注**：

- 路端图像、点云编号从[ `batch_start_id`, `batch_end_id` ]为一段，表示同一个路口下采集得到的数据帧，按时间顺序排列

#### DAIR-V2X-C车端data_info.json组织结构

json文件由一个列表组织而成，列表项的字段和含义如下表所示：

| 字段                             | 含义                             |
| -------------------------------- | -------------------------------- |
| `image_path`                       | 图像路径                         |
| `image_timestamp`                  | 图像时间戳                       |
| `pointcloud_path`                  | 点云路径                         |
| `pointcloud_timestamp`             | 点云时间戳                       |
| `label_lidar_path`                 | 以点云时间戳为基准标注结果路径 |
| `label_camera_path`                | 以图像时间戳为基准标注结果路径 |
| `calib_lidar_to_camera_path`  | LiDAR坐标系到相机坐标系参数路径 |
| `calib_lidar_to_novatel_path` | LiDAR坐标系到NovAtel坐标系参数路径 |
| `calib_novatel_to_world_path` | NovAtel坐标系到世界坐标系参数路径 |
| `calib_camera_intrinsic_path`      | 相机参数路径                     |
| `batch_id`                         | 数据片段编号：车端与路端共享相同的batch_id |
| `intersection_loc`                 | 数据采集所在路口名称                     |
| `batch_start_id`                   | 数据片段起始编号                       |
| `batch_end_id`                     | 数据片段结束编号             |


##### 车路协同融合标注data_info.json

json文件由一个列表组织而成，列表项的字段和含义如下表所示：

| 字段                             | 含义                             |
| -------------------------------- | -------------------------------- |
| `infrastructure_image_path`                  | 路端图像路径       |
| `infrastructure_pointcloud_path`             | 路端点云路径       |
| `vehicle_image_path`                | 车端图像路径                     |
| `vehicle_pointcloud_path`                  | 车端点云路径              |
| `cooperative_label_path`             | 融合标注路径：利用路端和车端对应帧label+半自动生成                 |

---
### 单侧标注格式

标注文件由一个列表组织而成，一个列表项对应一个目标的标签，列表项的格式如下所示：

```json
{
  "type": type,                         // 障碍物类型
  "truncated_state": truncated_state,   // 障碍物截断情况：从[0, 1, 2]中取值，分别表示不截断、横向截断、纵向截断 
  "occluded_state": occluded_state,     // 障碍物遮挡情况：从[0, 1, 2]中取值，分别表示不遮挡、0%～50%遮挡，50%～100%遮挡
  "alpha": alpha,                       // 观察者视角，从[-pi, pi]中取值
  "2d_box": {                           // 图像中2D bounding box框
    "xmin": xmin, 
    "ymin": ymin, 
    "xmax": xmax, 
    "ymax": ymax
  }, 
  "3d_dimensions": {                    // 3D bounding box长宽高
    "h": height, 
    "w": width, 
    "l": length
  }, 
  "3d_location": {                      // 3D bounding box中心点坐标
    "x": x, 
    "y": y, 
    "z": z
  }, 
  "rotation": rotation              // 3D bounding box绕中心点z轴正方向为旋转轴，从y轴正方向开始旋转的角度
}
```

**备注**

标签共有10类，如下所示。

| 类型              | 标签名称          |
| ----------------- | ----------------- |
| 小汽车            | Car               |
| 卡车/大货车       | Trunk             |
| 面包车/厢式货车   | Van               |
| 公交车/大型旅客车 | Bus               |
| 行人              | Pedestrian        |
| 自行车            | Cyclist           |
| 三轮车            | Tricyclist        |
| 摩托车            | Motorcyclist      |
| 手推车            | Barrowlist        |
| 交通锥筒          | TrafficCone       |

---
### 融合标注格式

标注文件由一个列表组织而成，一个列表项对应一个目标的标签，列表项的格式如下所示：

```json
{
  "type": type,                         // 障碍物类型
  "world_8_points": 8 corners of 3d bounding box,  // 障碍物3d标注信息，位于世界坐标系；需要转到车端LiDAR坐标系下得到长、宽、高、3d location、朝向等信息；当前标注文件中其他3D信息不可用
  "system_error_offset": { // 路端与车端相对标定存在的系统误差，人工二次修正；未融合标注的为""
    "delta_x": delta_x,
    "delta_y": delta_y,
  }
}
```

**备注**

目前融合标注只考虑如下4类，生成约1w帧。

| 类型              | 标签名称          |
| ----------------- | ----------------- |
| 小汽车            | Car               |
| 卡车/大货车       | Trunk             |
| 面包车/厢式货车   | Van               |
| 公交车/大型旅客车 | Bus               |

---

### 统计信息

- 总计71254帧图像数据和71254帧点云数据；本次只释放train/val部分，test部分将随后续challenge释放
  - DAIR-V2X车路协同数据集(DAIR-V2X-C)，包含38845帧图像数据和38845帧点云数据
    - 车端包含18330帧图像数据和18330帧点云数据
    - 路端包含20515帧图像数据和20515帧点云数据
  - DAIR-V2X路端数据集(DAIR-V2X-I)，包含10084帧图像数据和10084帧点云数据
  - DAIR-V2X车端数据集(DAIR-V2X-V)，包含22325帧图像数据和22325帧点云数据

---

### Citation

```
@inproceedings{yu2022dairv2x,
    title={DAIR-V2X: A Large-Scale Dataset for Vehicle-Infrastructure Cooperative 3D Object Detection},
    author={Yu, Haibao and Luo, Yizhen and Shu, Mao and Huo, Yiyi and Yang, Zebang and Shi, Yifeng and Guo, Zhenglong and Li, Hanyu and Hu, Xing and Yuan, Jirui and Nie, Zaiqing},
    booktitle={IEEE/CVF Conf.~on Computer Vision and Pattern Recognition (CVPR)},
    month = jun,
    year={2022}
}
```

---

### Organizations

清华大学智能产业研究院（AIR）

北京市高级别自动驾驶示范区

北京车网科技发展有限公司

百度Apollo

北京智源人工智能研究院

---

### Contaction

Email: dair@air.tsinghua.edu.cn

## English | [简体中文](./README_zh-CN.md)

## DAIR-V2X
### Data Structure
```
single-infrastructure-side              # DAIR-V2X-I Dataset
    ├── image			      
        ├── {id}.jpg                    
    ├── velodyne                        
        ├── {id}.pcd                 
    ├── calib                          
        ├── camera_intrinsic            
            ├── {id}.json              
        ├── virtuallidar_to_camera     
            ├── {id}.json              
    ├── label                         
        ├── camera                      # Labeled data in Infrastructure Virtual LiDAR Coordinate System fitting objects in image based on image frame time
            ├── {id}.json
        ├── virtuallidar                # Labeled data in Infrastructure Virtual LiDAR Coordinate System fitting objects in point cloud based on point cloud frame time
            ├── {id}.json
    ├── data_info.json                  # Relevant index information of the Infrastructure data
single-vehicle-side                     # DAIR-V2X-V
    ├── image		                
        ├── {id}.jpg
    ├── velodyne                       
        ├── {id}.pcd                    
    ├── calib                         
        ├── camera_intrinsic           
            ├── {id}.json
        ├── lidar_to_camera             
            ├── {id}.json
    ├── label				
        ├── camera                      # Labeled data in Vehicle LiDAR Coordinate System fitting objects in image based on image frame time
            ├── {id}.json
        ├── lidar                       # Labeled data in Vehicle LiDAR Coordinate System fitting objects in point cloud based on point cloud frame time
            ├── {id}.json
    ├── data_info.json                  # Relevant index information of the Vehicle data
cooperative-vehicle-infrastructure      # DAIR-V2X-C
    ├── infrastructure-side             # DAIR-V2X-C-I
        ├── image		        
            ├── {id}.jpg
        ├── velodyne                    
            ├── {id}.pcd               
        ├── calib                     
            ├── camera                
                ├── {id}.json         
            ├── virtuallidar_to_world   
                ├── {id}.json          
            ├── virtuallidar_to_camera  
                ├── {id}.json          
        ├── label			
            ├── camera                  # Labeled data in Infrastructure Virtual LiDAR Coordinate System fitting objects in image based on image frame time
                ├── {id}.json
            ├── virtuallidar            # Labeled data in Infrastructure Virtual LiDAR Coordinate System fitting objects in point cloud based on point cloud frame time
                ├── {id}.json
        ├── data_info.json              # Relevant index information of Infrastructure data
    ├── vehicle-side                    # DAIR-V2X-C-V
        ├── image		        
            ├── {id}.jpg
        ├── velodyne                 
            ├── {id}.pcd               
        ├── calib                     
            ├── camera_intrinsic       
                ├── {id}.json
            ├── lidar_to_camera       
                ├── {id}.json
            ├── lidar_to_novatel      
                ├── {id}.json
            ├── novatel_to_world       
                ├── {id}.json
        ├── label			
            ├── camera                  # Labeled data in Vehicle LiDAR Coordinate System fitting objects in image based on image frame time
                ├── {id}.json
            ├── lidar                   # Labeled data in Vehicle LiDAR Coordinate System fitting objects in point cloud based on point cloud frame time
                ├── {id}.json
        ├── data_info.json              # Relevant index information of the Vehicle data
    ├── cooperative                     # Coopetative Files
        ├── label_world                 # Vehicle-Infrastructure Cooperative (VIC) Annotation files
            ├── {id}.json               
        ├── data_info.json              # Relevant index information combined the Infrastructure data and the Vehicle data
```
---
### Introduction to data-info.json
#### single-infrastructure-side/data_info.json

```json
{
  "image_path",
  "pointcloud_path",
  "label_virtuallidar_path",
  "label_camera_path",
  "calib_virtuallidar_to_camera_path",
  "calib_camera_intrinsic_path"
}
```

#### single-vehicle-side/data_info.json

```json
{
  "image_path",
  "image_timestamp",
  "pointcloud_path",
  "pointcloud_timestamp",
  "label_lidar_path",
  "label_camera_path",
  "calib_lidar_to_camera_path",
  "calib_camera_intrinsic_path"
}
```


#### cooperative-vehicle-infrastructure/infrastructure-side/data_info.json

```json
{
  "image_path",
  "image_timestamp",
  "pointcloud_path",
  "pointcloud_timestamp",
  "label_lidar_path",
  "label_camera_path",
  "calib_virtuallidar_to_world_path",
  "calib_camera_intrinsic_path",
  "batch_id",
  "intersection_loc",
  "batch_start_id",
  "batch_end_id"
}
```

**Comment**：

- Infrastructure and vehicle frame with the same "batch_id" share the same segments.

#### cooperative-vehicle-infrastructure/vehicle-side/data_info.json

```json
{
  "image_path",
  "image_timestamp",
  "pointcloud_path",
  "pointcloud_timestamp",
  "label_lidar_path",
  "label_camera_path",
  "calib_lidar_to_camera_path",
  "calib_lidar_to_novatel_path",
  "calib_novatel_to_world_path",
  "calib_camera_intrinsic_path",
  "batch_id",
  "intersection_loc",
  "batch_start_id",
  "batch_end_id"
}
```


##### cooperative-vehicle-infrastructure/cooperative/data_info.json

```json
{
  "infrastructure_image_path",
  "infrastructure_pointcloud_path",
  "vehicle_image_path",
  "vehicle_pointcloud_path",
  "cooperative_label_path"
}
```


---
### Single-view Annotation File

```json
{
  "type": type,                        
  "truncated_state": truncated_state,  
  "occluded_state": occluded_state,     
  "2d_box": {                          
    "xmin": xmin, 
    "ymin": ymin, 
    "xmax": xmax, 
    "ymax": ymax
  }, 
  "3d_dimensions": {                  
    "h": height, 
    "w": width, 
    "l": length
  }, 
  "3d_location": {               
    "x": x, 
    "y": y, 
    "z": z
  }, 
  "rotation": rotation              
}
```

**Comment**

- 10 object classes, including: Car, Truck, Van, Bus, Pedestrian, Cyclist, Tricyclist,
  Motorcyclist, Barrowlist, and TrafficCone.


---
### Cooperative Annotation File

```json
{
  "type": type,                      
  "world_8_points": 8 corners of 3d bounding box,
  "system_error_offset": {
    "delta_x": delta_x,
    "delta_y": delta_y,
  }
}
```

**Comment**

We only consider the four class ["Car", "Truck", "Van", "Bus"] and generate 9311 annotation files.

---

### Statics

DAIR-V2X is the first large-scale, multi-modality, multi-view dataset for Vehicle-Infrastructure Cooperative Autonomous Driving (VICAD), with 2D&3D object annotations. All data is captured from real scenarios.
- Totally 71254 LiDAR frames and 71254 Camera images:
  - DAIR-V2X Cooperative Dataset (DAIR-V2X-C): 38845 LiDAR frames, 38845 Camera images
  - DAIR-V2X Infrastructure Dataset (DAIR-V2X-I): 10084 LiDAR frames, 10084 Camera images
  - DAIR-V2X Vehicle Dataset (DAIR-V2X-V): 22325 LiDAR frames, 22325 Camera images 
    
We split 50%, 20% and 30% of the dataset into a training set, validation set, and testing set separately. The training set and validation set is now available, and the testing set will be released along with the subsequent challenge activities. 

---

### Citation

```
@inproceedings{yu2022dairv2x,
    title={DAIR-V2X: A Large-Scale Dataset for Vehicle-Infrastructure Cooperative 3D Object Detection},
    author={Yu, Haibao and Luo, Yizhen and Shu, Mao and Huo, Yiyi and Yang, Zebang and Shi, Yifeng and Guo, Zhenglong and Li, Hanyu and Hu, Xing and Yuan, Jirui and Nie, Zaiqing},
    booktitle={IEEE/CVF Conf.~on Computer Vision and Pattern Recognition (CVPR)},
    month = jun,
    year={2022}
}
```

---

### Organizations

- Institute for AI Industry Research, Tsinghua University (AIR)
- Beijing High-level Autonomous Driving Demonstration Area
- Beijing Connected and Autonomous Vehicles Technology Co., Ltd
- Baidu Apollo
- Beijing Academy of Artificial Intelligence，BAAI

---

### Contaction

Email: dair@air.tsinghua.edu.cn

{"train": ["000000", "000001", "000002", "000003", "000004", "000005", "000006", "000007", "000008", "000009", "000010", "000011", "000012", "000013", "000014", "000015", "000016", "000017", "000019", "000020", "000022", "000024", "000025", "000026", "000027", "000028", "000029", "000031", "000033", "000034", "000036", "000037", "000038", "000039", "000040", "000041", "000044", "000047", "000048", "000049", "000051", "000053", "000054", "000058", "000059", "000065", "000066", "000068", "000069", "000072", "000073", "000078", "000081", "000088", "000097", "000110", "000111", "000112", "000113", "000114", "000115", "000116", "000117", "000118", "000119", "000120", "000121", "000123", "000124", "000125", "000126", "000127", "000128", "000129", "000130", "000131", "000132", "000133", "000134", "000135", "000137", "000139", "000140", "000141", "000142", "000144", "000145", "000147", "000148", "000150", "000152", "000154", "000155", "000156", "000159", "000160", "000162", "000163", "000166", "000167", "000172", "000173", "000175", "000179", "000183", "000185", "000187", "000195", "000196", "000202", "000220", "000221", "000222", "000223", "000224", "000225", "000226", "000227", "000228", "000229", "000230", "000231", "000232", "000233", "000235", "000236", "000237", "000238", "000239", "000241", "000242", "000243", "000244", "000245", "000246", "000247", "000249", "000250", "000251", "000252", "000253", "000254", "000256", "000259", "000262", "000263", "000264", "000265", "000268", "000269", "000272", "000273", "000275", "000276", "000278", "000280", "000285", "000287", "000289", "000290", "000295", "000299", "000303", "000307", "000315", "000330", "000331", "000332", "000333", "000334", "000335", "000336", "000337", "000338", "000339", "000340", "000341", "000343", "000344", "000345", "000346", "000347", "000348", "000349", "000350", "000351", "000352", "000354", "000355", "000356", "000357", "000358", "000360", "000361", "000362", "000363", "000367", "000368", "000369", "000372", "000373", "000374", "000375", "000377", "000378", "000382", "000383", "000385", "000387", "000388", "000391", "000393", "000394", "000398", "000401", "000404", "000409", "000413", "000416", "000427", "000440", "000441", "000442", "000443", "000444", "000445", "000446", "000447", "000448", "000449", "000450", "000451", "000452", "000454", "000455", "000456", "000457", "000458", "000459", "000460", "000462", "000463", "000464", "000465", "000466", "000468", "000469", "000470", "000471", "000472", "000474", "000475", "000477", "000478", "000480", "000481", "000484", "000485", "000486", "000489", "000492", "000493", "000494", "000495", "000498", "000500", "000503", "000505", "000506", "000510", "000511", "000517", "000522", "000523", "000539", "000550", "000551", "000552", "000553", "000554", "000555", "000556", "000557", "000558", "000559", "000560", "000561", "000562", "000563", "000564", "000565", "000566", "000568", "000569", "000570", "000571", "000572", "000573", "000575", "000576", "000577", "000578", "000580", "000581", "000582", "000584", "000586", "000587", "000589", "000590", "000591", "000594", "000596", "000598", "000599", "000600", "000601", "000603", "000606", "000608", "000614", "000615", "000617", "000618", "000620", "000628", "000629", "000631", "000635", "000643", "000660", "000661", "000662", "000663", "000664", "000665", "000666", "000667", "000668", "000669", "000670", "000671", "000673", "000674", "000675", "000676", "000677", "000678", "000679", "000680", "000681", "000682", "000683", "000686", "000687", "000688", "000689", "000690", "000691", "000692", "000693", "000695", "000698", "000699", "000704", "000705", "000706", "000707", "000708", "000709", "000711", "000712", "000714", "000715", "000718", "000723", "000724", "000725", "000728", "000730", "000732", "000734", "000741", "000746", "000756", "000770", "000771", "000772", "000773", "000774", "000775", "000776", "000777", "000778", "000779", "000781", "000782", "000783", "000784", "000785", "000786", "000787", "000788", "000789", "000791", "000792", "000794", "000795", "000796", "000797", "000798", "000799", "000800", "000801", "000803", "000804", "000805", "000807", "000808", "000811", "000813", "000815", "000816", "000818", "000819", "000820", "000822", "000823", "000825", "000826", "000835", "000836", "000837", "000839", "000845", "000846", "000849", "000852", "000858", "000865", "000880", "000881", "000882", "000883", "000884", "000885", "000886", "000887", "000888", "000889", "000890", "000891", "000892", "000893", "000894", "000895", "000897", "000898", "000899", "000901", "000902", "000903", "000904", "000905", "000906", "000907", "000909", "000910", "000912", "000914", "000915", "000916", "000917", "000919", "000920", "000922", "000923", "000924", "000925", "000928", "000931", "000933", "000934", "000937", "000939", "000940", "000942", "000944", "000948", "000954", "000957", "000959", "000966", "000969", "000972", "000990", "000991", "000992", "000993", "000994", "000995", "000996", "000997", "000998", "000999", "001000", "001001", "001002", "001003", "001004", "001005", "001006", "001008", "001009", "001010", "001011", "001012", "001013", "001014", "001015", "001016", "001018", "001020", "001021", "001023", "001025", "001026", "001027", "001028", "001030", "001031", "001032", "001033", "001035", "001039", "001040", "001041", "001045", "001046", "001048", "001050", "001052", "001053", "001057", "001060", "001062", "001064", "001072", "001079", "001082", "001100", "001101", "001102", "001103", "001104", "001105", "001106", "001107", "001108", "001109", "001110", "001111", "001112", "001113", "001114", "001115", "001116", "001117", "001118", "001121", "001122", "001123", "001124", "001125", "001126", "001127", "001129", "001130", "001132", "001133", "001135", "001136", "001138", "001139", "001142", "001143", "001144", "001145", "001148", "001149", "001153", "001155", "001156", "001157", "001158", "001160", "001162", "001163", "001169", "001171", "001173", "001174", "001181", "001187", "001193", "001210", "001211", "001212", "001213", "001214", "001215", "001216", "001217", "001218", "001219", "001220", "001221", "001222", "001223", "001224", "001225", "001226", "001228", "001229", "001230", "001231", "001232", "001233", "001235", "001237", "001238", "001239", "001241", "001242", "001243", "001244", "001245", "001246", "001249", "001250", "001252", "001254", "001256", "001258", "001259", "001261", "001263", "001264", "001266", "001267", "001270", "001271", "001273", "001275", "001281", "001283", "001286", "001291", "001292", "001307", "001320", "001321", "001322", "001323", "001324", "001325", "001326", "001327", "001328", "001329", "001330", "001331", "001332", "001333", "001335", "001336", "001337", "001338", "001339", "001340", "001341", "001342", "001343", "001344", "001346", "001347", "001348", "001350", "001352", "001353", "001354", "001355", "001358", "001359", "001361", "001362", "001363", "001365", "001366", "001369", "001370", "001371", "001373", "001374", "001379", "001380", "001383", "001388", "001389", "001391", "001394", "001398", "001401", "001403", "001419", "001430", "001431", "001432", "001433", "001434", "001435", "001436", "001437", "001438", "001439", "001440", "001441", "001442", "001443", "001444", "001445", "001446", "001447", "001448", "001450", "001451", "001452", "001453", "001454", "001455", "001457", "001458", "001460", "001461", "001463", "001464", "001465", "001466", "001467", "001472", "001473", "001474", "001475", "001478", "001479", "001480", "001481", "001484", "001486", "001489", "001490", "001493", "001495", "001497", "001500", "001502", "001504", "001510", "001511", "001521", "001540", "001541", "001542", "001543", "001544", "001545", "001546", "001547", "001548", "001549", "001550", "001551", "001552", "001553", "001555", "001556", "001557", "001558", "001559", "001560", "001561", "001562", "001564", "001565", "001566", "001568", "001569", "001570", "001571", "001573", "001574", "001575", "001576", "001577", "001581", "001582", "001585", "001586", "001587", "001589", "001592", "001593", "001595", "001598", "001599", "001601", "001603", "001607", "001609", "001612", "001613", "001614", "001620", "001626", "001633", "001650", "001651", "001652", "001653", "001654", "001655", "001656", "001657", "001658", "001659", "001660", "001661", "001662", "001663", "001664", "001666", "001667", "001668", "001669", "001670", "001671", "001672", "001673", "001675", "001676", "001677", "001678", "001680", "001682", "001683", "001684", "001685", "001687", "001688", "001690", "001691", "001693", "001696", "001697", "001698", "001702", "001704", "001705", "001707", "001709", "001711", "001712", "001717", "001719", "001722", "001725", "001729", "001730", "001732", "001744", "001760", "001761", "001762", "001763", "001764", "001765", "001766", "001767", "001768", "001769", "001770", "001771", "001772", "001774", "001775", "001776", "001777", "001778", "001779", "001780", "001781", "001782", "001783", "001784", "001785", "001786", "001787", "001790", "001791", "001792", "001794", "001795", "001797", "001799", "001800", "001801", "001803", "001804", "001808", "001809", "001810", "001814", "001815", "001817", "001818", "001821", "001822", "001827", "001829", "001831", "001833", "001837", "001843", "001844", "001856", "001870", "001871", "001872", "001873", "001874", "001875", "001876", "001877", "001878", "001879", "001880", "001881", "001882", "001883", "001885", "001886", "001887", "001888", "001889", "001890", "001891", "001893", "001894", "001895", "001896", "001897", "001899", "001900", "001901", "001902", "001903", "001904", "001908", "001909", "001912", "001915", "001916", "001917", "001918", "001919", "001921", "001924", "001925", "001928", "001929", "001933", "001934", "001937", "001938", "001945", "001947", "001949", "001954", "001956", "001966", "001980", "001981", "001982", "001983", "001984", "001985", "001986", "001987", "001988", "001989", "001990", "001991", "001992", "001993", "001994", "001995", "001996", "001997", "001998", "002000", "002001", "002003", "002004", "002005", "002007", "002008", "002009", "002011", "002013", "002014", "002015", "002016", "002017", "002019", "002021", "002023", "002024", "002025", "002026", "002027", "002030", "002034", "002035", "002038", "002039", "002040", "002045", "002046", "002049", "002052", "002054", "002055", "002062", "002064", "002070", "002090", "002091", "002092", "002093", "002094", "002095", "002096", "002097", "002098", "002099", "002101", "002102", "002103", "002104", "002105", "002106", "002107", "002108", "002109", "002110", "002111", "002112", "002113", "002115", "002116", "002117", "002118", "002120", "002121", "002123", "002125", "002127", "002128", "002129", "002130", "002132", "002133", "002134", "002137", "002138", "002142", "002144", "002145", "002146", "002147", "002150", "002151", "002156", "002159", "002163", "002165", "002168", "002171", "002173", "002187", "002200", "002201", "002202", "002203", "002204", "002205", "002206", "002207", "002208", "002209", "002210", "002211", "002212", "002214", "002215", "002216", "002217", "002218", "002219", "002220", "002221", "002222", "002223", "002224", "002225", "002228", "002229", "002230", "002231", "002233", "002235", "002236", "002237", "002239", "002242", "002243", "002244", "002245", "002246", "002247", "002250", "002252", "002255", "002256", "002257", "002260", "002261", "002262", "002269", "002271", "002275", "002277", "002282", "002285", "002299", "002310", "002311", "002312", "002313", "002314", "002315", "002316", "002317", "002318", "002319", "002320", "002321", "002322", "002323", "002324", "002326", "002327", "002328", "002329", "002330", "002331", "002332", "002334", "002335", "002337", "002338", "002339", "002340", "002341", "002343", "002346", "002347", "002348", "002349", "002351", "002352", "002353", "002354", "002355", "002358", "002360", "002361", "002364", "002366", "002369", "002370", "002372", "002374", "002376", "002380", "002382", "002383", "002390", "002396", "002406", "002420", "002421", "002422", "002423", "002424", "002425", "002426", "002427", "002428", "002429", "002430", "002432", "002433", "002434", "002435", "002436", "002437", "002438", "002439", "002440", "002441", "002444", "002445", "002446", "002447", "002448", "002449", "002450", "002451", "002452", "002455", "002456", "002458", "002459", "002460", "002461", "002462", "002463", "002465", "002468", "002470", "002471", "002475", "002477", "002478", "002482", "002485", "002486", "002487", "002491", "002496", "002497", "002503", "002506", "002510", "002530", "002531", "002532", "002533", "002534", "002535", "002536", "002537", "002538", "002539", "002540", "002542", "002543", "002544", "002545", "002546", "002547", "002548", "002549", "002550", "002552", "002554", "002555", "002556", "002557", "002558", "002559", "002560", "002561", "002563", "002565", "002567", "002568", "002569", "002570", "002573", "002574", "002575", "002577", "002578", "002580", "002581", "002583", "002584", "002587", "002590", "002591", "002592", "002595", "002603", "002605", "002607", "002614", "002616", "002620", "002640", "002641", "002642", "002643", "002644", "002645", "002646", "002647", "002648", "002649", "002650", "002652", "002653", "002654", "002655", "002656", "002657", "002658", "002659", "002662", "002663", "002664", "002665", "002666", "002667", "002668", "002669", "002670", "002671", "002673", "002675", "002676", "002678", "002679", "002680", "002682", "002683", "002684", "002686", "002688", "002692", "002693", "002695", "002697", "002699", "002703", "002704", "002707", "002709", "002715", "002716", "002717", "002725", "002728", "002734", "002750", "002751", "002752", "002753", "002754", "002755", "002756", "002757", "002758", "002759", "002761", "002762", "002763", "002764", "002765", "002766", "002767", "002768", "002769", "002770", "002771", "002773", "002774", "002775", "002776", "002778", "002779", "002780", "002781", "002783", "002784", "002785", "002786", "002789", "002790", "002792", "002794", "002796", "002797", "002798", "002801", "002806", "002807", "002808", "002809", "002811", "002812", "002814", "002818", "002822", "002826", "002828", "002831", "002839", "002841", "002860", "002861", "002862", "002863", "002864", "002865", "002866", "002867", "002868", "002869", "002870", "002871", "002872", "002873", "002874", "002875", "002876", "002877", "002878", "002881", "002882", "002883", "002884", "002885", "002886", "002887", "002889", "002891", "002892", "002894", "002896", "002897", "002898", "002899", "002900", "002902", "002905", "002906", "002907", "002908", "002910", "002911", "002916", "002918", "002919", "002920", "002923", "002924", "002926", "002934", "002938", "002939", "002947", "002948", "002959", "002970", "002971", "002972", "002973", "002974", "002975", "002976", "002977", "002978", "002979", "002980", "002981", "002982", "002983", "002984", "002985", "002987", "002988", "002989", "002990", "002991", "002992", "002993", "002994", "002995", "002997", "002998", "003000", "003001", "003002", "003003", "003004", "003008", "003009", "003010", "003011", "003013", "003015", "003018", "003019", "003020", "003022", "003023", "003027", "003028", "003030", "003033", "003034", "003036", "003043", "003044", "003047", "003053", "003056", "003065", "003080", "003081", "003082", "003083", "003084", "003085", "003086", "003087", "003088", "003089", "003090", "003091", "003092", "003093", "003094", "003096", "003097", "003098", "003099", "003100", "003101", "003103", "003104", "003106", "003107", "003108", "003109", "003110", "003111", "003112", "003113", "003115", "003117", "003118", "003121", "003123", "003125", "003127", "003128", "003129", "003130", "003131", "003133", "003135", "003137", "003143", "003147", "003148", "003149", "003151", "003157", "003159", "003162", "003164", "003171", "003190", "003191", "003192", "003193", "003194", "003195", "003196", "003197", "003198", "003199", "003200", "003201", "003202", "003203", "003204", "003205", "003206", "003208", "003209", "003210", "003211", "003212", "003213", "003215", "003217", "003218", "003219", "003221", "003222", "003223", "003224", "003225", "003226", "003228", "003230", "003231", "003232", "003235", "003237", "003238", "003242", "003243", "003244", "003246", "003249", "003251", "003257", "003258", "003259", "003260", "003261", "003267", "003271", "003275", "003288", "003300", "003301", "003302", "003303", "003304", "003305", "003306", "003307", "003308", "003309", "003310", "003311", "003312", "003313", "003314", "003315", "003316", "003318", "003319", "003320", "003321", "003322", "003323", "003324", "003326", "003328", "003329", "003330", "003331", "003332", "003333", "003335", "003336", "003339", "003341", "003342", "003343", "003344", "003345", "003347", "003350", "003351", "003352", "003354", "003357", "003361", "003362", "003366", "003369", "003374", "003376", "003379", "003381", "003389", "003397", "003410", "003411", "003412", "003413", "003414", "003415", "003416", "003417", "003418", "003419", "003420", "003421", "003422", "003423", "003425", "003426", "003427", "003428", "003429", "003431", "003432", "003433", "003434", "003435", "003436", "003438", "003439", "003440", "003442", "003443", "003444", "003446", "003447", "003448", "003450", "003451", "003453", "003454", "003457", "003459", "003462", "003463", "003464", "003466", "003467", "003471", "003472", "003474", "003476", "003482", "003488", "003489", "003490", "003493", "003509", "003520", "003521", "003522", "003523", "003524", "003525", "003526", "003527", "003528", "003529", "003530", "003531", "003532", "003533", "003534", "003535", "003537", "003538", "003539", "003540", "003541", "003542", "003543", "003545", "003546", "003547", "003548", "003550", "003551", "003552", "003553", "003554", "003557", "003559", "003560", "003562", "003564", "003565", "003566", "003568", "003570", "003575", "003577", "003578", "003579", "003580", "003583", "003586", "003587", "003590", "003592", "003594", "003600", "003602", "003616", "003630", "003631", "003632", "003633", "003634", "003635", "003636", "003637", "003638", "003639", "003640", "003641", "003642", "003643", "003644", "003645", "003647", "003648", "003649", "003650", "003651", "003652", "003653", "003654", "003655", "003658", "003659", "003660", "003661", "003662", "003663", "003664", "003666", "003667", "003670", "003672", "003673", "003674", "003676", "003678", "003682", "003685", "003687", "003688", "003689", "003692", "003693", "003696", "003697", "003701", "003703", "003708", "003712", "003716", "003723", "003740", "003741", "003742", "003743", "003744", "003745", "003746", "003747", "003748", "003749", "003750", "003751", "003752", "003753", "003754", "003756", "003757", "003758", "003759", "003760", "003762", "003763", "003764", "003765", "003766", "003768", "003769", "003770", "003771", "003772", "003773", "003775", "003776", "003778", "003780", "003782", "003783", "003786", "003787", "003789", "003793", "003796", "003797", "003798", "003799", "003802", "003803", "003806", "003809", "003810", "003814", "003819", "003820", "003822", "003838", "003850", "003851", "003852", "003853", "003854", "003855", "003856", "003857", "003858", "003859", "003860", "003861", "003862", "003863", "003865", "003866", "003867", "003868", "003869", "003870", "003871", "003873", "003874", "003876", "003877", "003878", "003879", "003880", "003881", "003882", "003883", "003886", "003887", "003888", "003890", "003892", "003893", "003894", "003895", "003899", "003901", "003902", "003905", "003908", "003909", "003911", "003912", "003914", "003918", "003920", "003923", "003927", "003931", "003935", "003948", "003960", "003961", "003962", "003963", "003964", "003965", "003966", "003967", "003968", "003969", "003970", "003971", "003972", "003973", "003974", "003975", "003976", "003977", "003978", "003980", "003981", "003982", "003983", "003984", "003986", "003987", "003988", "003990", "003991", "003992", "003994", "003995", "003998", "003999", "004001", "004003", "004005", "004006", "004008", "004009", "004010", "004013", "004014", "004016", "004019", "004023", "004024", "004026", "004027", "004031", "004034", "004038", "004043", "004044", "004053", "004070", "004071", "004072", "004073", "004074", "004075", "004076", "004077", "004078", "004079", "004081", "004082", "004083", "004084", "004085", "004086", "004087", "004088", "004089", "004090", "004091", "004092", "004093", "004094", "004096", "004097", "004098", "004100", "004102", "004103", "004104", "004105", "004106", "004108", "004110", "004111", "004113", "004115", "004116", "004119", "004120", "004123", "004124", "004126", "004128", "004132", "004133", "004135", "004138", "004141", "004146", "004149", "004150", "004151", "004169", "004180", "004181", "004182", "004183", "004184", "004185", "004186", "004187", "004188", "004189", "004190", "004191", "004192", "004193", "004194", "004195", "004197", "004198", "004199", "004200", "004202", "004203", "004204", "004205", "004206", "004207", "004208", "004210", "004211", "004212", "004213", "004214", "004216", "004218", "004222", "004224", "004225", "004226", "004227", "004229", "004231", "004232", "004237", "004238", "004239", "004241", "004243", "004244", "004245", "004251", "004254", "004259", "004261", "004266", "004277", "004290", "004291", "004292", "004293", "004294", "004295", "004296", "004297", "004298", "004299", "004300", "004301", "004302", "004303", "004304", "004305", "004307", "004308", "004309", "004310", "004312", "004313", "004314", "004315", "004316", "004317", "004318", "004320", "004321", "004322", "004323", "004325", "004326", "004327", "004330", "004331", "004333", "004336", "004337", "004338", "004340", "004343", "004346", "004347", "004349", "004352", "004355", "004358", "004359", "004365", "004366", "004368", "004371", "004376", "004382", "004400", "004401", "004402", "004403", "004404", "004405", "004406", "004407", "004408", "004409", "004410", "004411", "004412", "004413", "004414", "004415", "004416", "004418", "004419", "004420", "004421", "004422", "004423", "004424", "004426", "004427", "004428", "004430", "004433", "004434", "004435", "004436", "004437", "004438", "004441", "004443", "004445", "004446", "004447", "004449", "004451", "004452", "004455", "004457", "004459", "004462", "004467", "004468", "004469", "004471", "004473", "004479", "004482", "004486", "004496", "004510", "004511", "004512", "004513", "004514", "004515", "004516", "004517", "004518", "004519", "004520", "004521", "004522", "004523", "004525", "004526", "004527", "004528", "004529", "004530", "004532", "004533", "004535", "004536", "004537", "004538", "004539", "004541", "004542", "004544", "004545", "004546", "004547", "004548", "004551", "004552", "004553", "004554", "004555", "004556", "004564", "004565", "004566", "004567", "004569", "004570", "004572", "004574", "004577", "004580", "004581", "004586", "004594", "004599", "004602", "004620", "004621", "004622", "004623", "004624", "004625", "004626", "004627", "004628", "004629", "004630", "004631", "004632", "004633", "004635", "004636", "004637", "004638", "004639", "004640", "004641", "004642", "004644", "004645", "004647", "004648", "004649", "004650", "004651", "004652", "004654", "004655", "004658", "004659", "004660", "004662", "004663", "004666", "004667", "004669", "004671", "004676", "004677", "004678", "004679", "004680", "004682", "004687", "004689", "004692", "004693", "004694", "004703", "004704", "004714", "004730", "004731", "004732", "004733", "004734", "004735", "004736", "004737", "004738", "004739", "004740", "004741", "004742", "004743", "004745", "004746", "004747", "004748", "004749", "004750", "004751", "004754", "004755", "004756", "004757", "004758", "004759", "004760", "004762", "004763", "004764", "004765", "004767", "004768", "004770", "004771", "004774", "004775", "004778", "004779", "004782", "004783", "004785", "004787", "004789", "004791", "004794", "004796", "004799", "004800", "004801", "004802", "004817", "004819", "004824", "004840", "004841", "004842", "004843", "004844", "004845", "004846", "004847", "004848", "004849", "004850", "004851", "004852", "004853", "004854", "004855", "004856", "004858", "004859", "004861", "004863", "004864", "004865", "004866", "004867", "004868", "004869", "004871", "004872", "004873", "004874", "004876", "004877", "004878", "004882", "004883", "004884", "004885", "004886", "004889", "004890", "004892", "004894", "004895", "004897", "004900", "004905", "004906", "004909", "004911", "004915", "004917", "004926", "004928", "004932", "004950", "004951", "004952", "004953", "004954", "004955", "004956", "004957", "004958", "004959", "004960", "004961", "004962", "004963", "004964", "004965", "004966", "004967", "004968", "004970", "004971", "004972", "004973", "004974", "004975", "004976", "004979", "004980", "004981", "004983", "004984", "004986", "004988", "004989", "004990", "004992", "004994", "004996", "004997", "004998", "005001", "005003", "005004", "005007", "005009", "005010", "005013", "005014", "005018", "005022", "005024", "005029", "005033", "005036", "005048", "005060", "005061", "005062", "005063", "005064", "005065", "005066", "005067", "005068", "005069", "005070", "005071", "005072", "005073", "005075", "005076", "005077", "005078", "005079", "005080", "005081", "005082", "005083", "005084", "005085", "005088", "005089", "005092", "005093", "005094", "005095", "005096", "005098", "005099", "005100", "005101", "005103", "005104", "005107", "005109", "005110", "005111", "005113", "005117", "005119", "005120", "005121", "005125", "005128", "005131", "005135", "005137", "005148", "005149", "005159", "005170", "005171", "005172", "005173", "005174", "005175", "005176", "005177", "005178", "005179", "005180", "005181", "005182", "005184", "005185", "005186", "005187", "005188", "005189", "005190", "005191", "005194", "005195", "005196", "005197", "005198", "005199", "005200", "005201", "005205", "005206", "005207", "005208", "005209", "005210", "005212", "005215", "005216", "005218", "005219", "005221", "005222", "005223", "005224", "005225", "005231", "005234", "005236", "005239", "005241", "005243", "005249", "005250", "005251", "005261", "005280", "005281", "005282", "005283", "005284", "005285", "005286", "005287", "005288", "005289", "005290", "005291", "005292", "005293", "005294", "005296", "005297", "005298", "005299", "005300", "005301", "005302", "005303", "005306", "005307", "005308", "005309", "005310", "005311", "005312", "005313", "005315", "005317", "005319", "005320", "005322", "005323", "005325", "005327", "005328", "005330", "005331", "005335", "005336", "005339", "005340", "005342", "005343", "005347", "005350", "005352", "005353", "005362", "005368", "005371", "005390", "005391", "005392", "005393", "005394", "005395", "005396", "005397", "005398", "005399", "005400", "005401", "005402", "005403", "005404", "005405", "005406", "005408", "005409", "005410", "005411", "005412", "005413", "005414", "005415", "005418", "005419", "005420", "005421", "005422", "005426", "005427", "005428", "005429", "005430", "005431", "005432", "005433", "005437", "005439", "005441", "005442", "005443", "005447", "005449", "005454", "005456", "005457", "005459", "005464", "005465", "005466", "005472", "005477", "005480", "005500", "005501", "005502", "005503", "005504", "005505", "005506", "005507", "005508", "005509", "005510", "005512", "005513", "005514", "005515", "005516", "005517", "005518", "005519", "005520", "005522", "005523", "005525", "005526", "005527", "005528", "005529", "005530", "005532", "005533", "005534", "005536", "005537", "005539", "005540", "005541", "005542", "005545", "005547", "005549", "005550", "005551", "005555", "005557", "005559", "005560", "005561", "005567", "005569", "005571", "005572", "005579", "005581", "005588", "005597", "005610", "005611", "005612", "005613", "005614", "005615", "005616", "005617", "005618", "005619", "005620", "005621", "005623", "005624", "005625", "005626", "005627", "005628", "005629", "005630", "005632", "005634", "005635", "005636", "005637", "005638", "005639", "005641", "005642", "005644", "005645", "005646", "005647", "005648", "005652", "005654", "005655", "005656", "005657", "005659", "005662", "005663", "005664", "005665", "005669", "005672", "005673", "005674", "005679", "005683", "005684", "005688", "005690", "005694", "005708", "005720", "005721", "005722", "005723", "005724", "005725", "005726", "005727", "005728", "005729", "005730", "005731", "005732", "005733", "005734", "005735", "005736", "005737", "005739", "005740", "005741", "005742", "005743", "005745", "005746", "005747", "005749", "005752", "005753", "005754", "005756", "005757", "005758", "005759", "005762", "005763", "005764", "005766", "005768", "005769", "005771", "005773", "005774", "005775", "005776", "005780", "005782", "005784", "005788", "005791", "005793", "005795", "005804", "005807", "005816", "005830", "005831", "005832", "005833", "005834", "005835", "005836", "005837", "005838", "005839", "005840", "005842", "005843", "005844", "005845", "005846", "005847", "005848", "005849", "005850", "005851", "005853", "005854", "005855", "005856", "005857", "005859", "005862", "005863", "005865", "005866", "005867", "005868", "005869", "005871", "005872", "005874", "005875", "005876", "005879", "005880", "005881", "005884", "005887", "005888", "005894", "005895", "005896", "005897", "005900", "005901", "005909", "005915", "005917", "005925", "005940", "005941", "005942", "005943", "005944", "005945", "005946", "005947", "005948", "005949", "005950", "005951", "005952", "005953", "005954", "005955", "005956", "005957", "005959", "005960", "005962", "005963", "005965", "005966", "005967", "005968", "005969", "005970", "005971", "005972", "005974", "005975", "005977", "005979", "005982", "005984", "005985", "005986", "005988", "005989", "005991", "005993", "005995", "005996", "005997", "006001", "006002", "006003", "006005", "006015", "006016", "006018", "006024", "006025", "006033", "006050", "006051", "006052", "006053", "006054", "006055", "006056", "006057", "006058", "006059", "006060", "006061", "006062", "006064", "006065", "006066", "006067", "006068", "006069", "006070", "006071", "006073", "006074", "006075", "006076", "006077", "006078", "006080", "006081", "006082", "006084", "006087", "006088", "006089", "006090", "006091", "006092", "006094", "006096", "006099", "006102", "006103", "006105", "006106", "006108", "006110", "006112", "006116", "006117", "006121", "006123", "006128", "006130", "006135", "006145", "006160", "006161", "006162", "006163", "006164", "006165", "006166", "006167", "006168", "006169", "006170", "006171", "006172", "006174", "006175", "006176", "006177", "006178", "006179", "006180", "006181", "006182", "006183", "006185", "006187", "006188", "006189", "006192", "006193", "006194", "006195", "006196", "006197", "006198", "006200", "006201", "006202", "006203", "006206", "006208", "006210", "006212", "006213", "006216", "006217", "006223", "006224", "006226", "006227", "006234", "006236", "006238", "006241", "006248", "006256", "006270", "006271", "006272", "006273", "006274", "006275", "006276", "006277", "006278", "006279", "006281", "006282", "006283", "006284", "006285", "006286", "006287", "006288", "006289", "006290", "006291", "006292", "006293", "006295", "006296", "006298", "006299", "006300", "006301", "006302", "006304", "006306", "006307", "006308", "006310", "006311", "006313", "006314", "006315", "006316", "006321", "006325", "006326", "006327", "006328", "006330", "006332", "006333", "006338", "006340", "006342", "006344", "006352", "006354", "006362", "006380", "006381", "006382", "006383", "006384", "006385", "006386", "006387", "006388", "006389", "006391", "006392", "006393", "006394", "006395", "006396", "006397", "006398", "006399", "006400", "006402", "006404", "006405", "006406", "006407", "006408", "006409", "006410", "006411", "006412", "006416", "006417", "006418", "006419", "006420", "006421", "006423", "006424", "006427", "006428", "006430", "006432", "006434", "006435", "006438", "006440", "006445", "006447", "006448", "006450", "006453", "006454", "006461", "006463", "006478", "006490", "006491", "006492", "006493", "006494", "006495", "006496", "006497", "006498", "006499", "006500", "006502", "006503", "006504", "006505", "006506", "006507", "006508", "006509", "006510", "006511", "006512", "006513", "006515", "006517", "006518", "006519", "006521", "006522", "006523", "006524", "006525", "006526", "006529", "006530", "006533", "006535", "006537", "006538", "006539", "006541", "006544", "006546", "006548", "006549", "006551", "006555", "006557", "006559", "006560", "006564", "006568", "006575", "006579", "006585", "006600", "006601", "006602", "006603", "006604", "006605", "006606", "006607", "006608", "006609", "006610", "006611", "006612", "006613", "006614", "006615", "006616", "006617", "006619", "006621", "006622", "006623", "006624", "006625", "006626", "006628", "006629", "006630", "006633", "006634", "006635", "006636", "006637", "006639", "006640", "006641", "006643", "006644", "006645", "006647", "006652", "006654", "006655", "006656", "006657", "006661", "006662", "006665", "006666", "006670", "006675", "006678", "006681", "006685", "006698", "006710", "006711", "006712", "006713", "006714", "006715", "006716", "006717", "006718", "006719", "006720", "006721", "006723", "006724", "006725", "006726", "006727", "006728", "006729", "006730", "006732", "006733", "006734", "006735", "006736", "006737", "006739", "006740", "006741", "006742", "006745", "006747", "006748", "006749", "006750", "006753", "006754", "006755", "006756", "006758", "006760", "006762", "006767", "006768", "006769", "006770", "006771", "006773", "006776", "006781", "006783", "006788", "006794", "006796", "006801", "006820", "006821", "006822", "006823", "006824", "006825", "006826", "006827", "006828", "006829", "006830", "006831", "006832", "006833", "006834", "006835", "006836", "006837", "006838", "006841", "006842", "006844", "006845", "006846", "006847", "006848", "006849", "006850", "006852", "006854", "006855", "006856", "006858", "006859", "006860", "006863", "006864", "006865", "006866", "006868", "006871", "006873", "006876", "006877", "006879", "006881", "006885", "006888", "006889", "006890", "006891", "006893", "006902", "006908", "006914", "006930", "006931", "006932", "006933", "006934", "006935", "006936", "006937", "006938", "006939", "006940", "006941", "006942", "006943", "006945", "006946", "006947", "006948", "006949", "006950", "006951", "006952", "006953", "006955", "006956", "006957", "006958", "006960", "006961", "006962", "006965", "006967", "006968", "006969", "006972", "006974", "006975", "006976", "006977", "006979", "006980", "006983", "006986", "006987", "006988", "006991", "006993", "006997", "006999", "007002", "007003", "007004", "007012", "007019", "007028", "007040", "007041", "007042", "007043", "007044", "007045", "007046", "007047", "007048", "007049", "007050", "007051", "007052", "007053", "007054", "007056", "007057", "007058", "007059", "007061", "007062", "007064", "007065", "007066", "007067", "007068", "007069", "007070", "007071", "007072", "007073", "007074", "007076", "007078", "007081", "007083", "007084", "007085", "007086", "007088", "007090", "007091", "007095", "007097", "007098", "007102", "007103", "007104", "007106", "007110", "007115", "007119", "007121", "007129", "007130", "007150", "007151", "007152", "007153", "007154", "007155", "007156", "007157", "007158", "007159", "007160", "007161", "007162", "007163", "007164", "007165", "007167", "007168", "007169", "007171", "007172", "007174", "007175", "007176", "007177", "007178", "007179", "007180", "007181", "007184", "007185", "007186", "007187", "007188", "007190", "007193", "007194", "007196", "007198", "007199", "007200", "007204", "007205", "007206", "007209", "007211", "007213", "007216", "007217", "007222", "007227", "007229", "007233", "007235", "007242", "007260", "007261", "007262", "007263", "007264", "007265", "007266", "007267", "007268", "007269", "007270", "007271", "007272", "007273", "007274", "007276", "007277", "007278", "007279", "007281", "007282", "007283", "007284", "007285", "007286", "007288", "007289", "007291", "007294", "007295", "007296", "007297", "007298", "007299", "007300", "007301", "007302", "007303", "007304", "007305", "007310", "007311", "007314", "007316", "007317", "007321", "007322", "007323", "007328", "007331", "007335", "007336", "007343", "007348", "007357", "007370", "007371", "007372", "007373", "007374", "007375", "007376", "007377", "007378", "007379", "007380", "007381", "007382", "007383", "007384", "007385", "007386", "007388", "007389", "007391", "007392", "007393", "007394", "007395", "007397", "007398", "007399", "007400", "007401", "007402", "007403", "007404", "007407", "007408", "007411", "007412", "007415", "007416", "007417", "007419", "007421", "007422", "007423", "007424", "007428", "007430", "007431", "007436", "007439", "007440", "007445", "007449", "007457", "007459", "007462", "007480", "007481", "007482", "007483", "007484", "007485", "007486", "007487", "007488", "007489", "007490", "007491", "007492", "007494", "007495", "007496", "007497", "007498", "007499", "007500", "007501", "007503", "007504", "007505", "007506", "007507", "007509", "007512", "007513", "007515", "007516", "007517", "007518", "007519", "007520", "007522", "007524", "007525", "007526", "007529", "007532", "007533", "007535", "007536", "007537", "007542", "007545", "007548", "007549", "007551", "007554", "007555", "007561", "007567", "007579", "007590", "007591", "007592", "007593", "007594", "007595", "007596", "007597", "007598", "007599", "007600", "007601", "007602", "007604", "007605", "007606", "007607", "007608", "007609", "007610", "007611", "007612", "007614", "007615", "007616", "007617", "007618", "007620", "007623", "007624", "007625", "007626", "007627", "007629", "007630", "007632", "007633", "007635", "007636", "007639", "007641", "007642", "007643", "007645", "007646", "007650", "007651", "007652", "007653", "007663", "007666", "007667", "007675", "007676", "007682", "007700", "007701", "007702", "007703", "007704", "007705", "007706", "007707", "007708", "007709", "007710", "007711", "007712", "007713", "007715", "007716", "007717", "007718", "007719", "007720", "007721", "007723", "007724", "007725", "007726", "007727", "007728", "007730", "007731", "007732", "007733", "007736", "007737", "007738", "007741", "007742", "007744", "007745", "007746", "007749", "007750", "007752", "007753", "007755", "007758", "007761", "007762", "007763", "007765", "007772", "007777", "007778", "007781", "007785", "007798", "007810", "007811", "007812", "007813", "007814", "007815", "007816", "007817", "007818", "007819", "007820", "007821", "007822", "007823", "007824", "007825", "007826", "007827", "007828", "007831", "007832", "007833", "007834", "007835", "007836", "007837", "007838", "007840", "007842", "007843", "007844", "007845", "007846", "007849", "007850", "007852", "007853", "007855", "007857", "007859", "007862", "007863", "007865", "007867", "007869", "007870", "007875", "007876", "007877", "007880", "007881", "007882", "007894", "007897", "007908", "007920", "007921", "007922", "007923", "007924", "007925", "007926", "007927", "007928", "007929", "007930", "007931", "007932", "007933", "007934", "007935", "007936", "007937", "007939", "007940", "007941", "007943", "007944", "007945", "007946", "007947", "007948", "007950", "007952", "007953", "007954", "007956", "007957", "007958", "007961", "007963", "007964", "007965", "007967", "007968", "007970", "007974", "007975", "007976", "007978", "007980", "007982", "007985", "007987", "007990", "007993", "007994", "008006", "008008", "008015", "008030", "008031", "008032", "008033", "008034", "008035", "008036", "008037", "008038", "008039", "008040", "008041", "008042", "008043", "008044", "008045", "008047", "008048", "008049", "008051", "008052", "008053", "008054", "008055", "008056", "008057", "008058", "008060", "008062", "008063", "008064", "008065", "008067", "008069", "008070", "008071", "008072", "008073", "008074", "008078", "008080", "008081", "008084", "008085", "008086", "008091", "008093", "008095", "008096", "008103", "008108", "008109", "008110", "008111", "008121", "008140", "008141", "008142", "008143", "008144", "008145", "008146", "008147", "008148", "008149", "008150", "008151", "008152", "008153", "008154", "008155", "008157", "008158", "008159", "008161", "008162", "008163", "008164", "008165", "008167", "008168", "008169", "008170", "008171", "008172", "008173", "008175", "008177", "008179", "008180", "008181", "008184", "008186", "008187", "008189", "008190", "008191", "008195", "008196", "008197", "008202", "008203", "008205", "008209", "008212", "008213", "008218", "008221", "008225", "008237", "008250", "008251", "008252", "008253", "008254", "008255", "008256", "008257", "008258", "008259", "008260", "008261", "008262", "008263", "008264", "008265", "008266", "008267", "008268", "008270", "008271", "008272", "008273", "008274", "008277", "008278", "008279", "008280", "008281", "008282", "008283", "008285", "008286", "008289", "008291", "008294", "008295", "008296", "008297", "008299", "008300", "008301", "008302", "008307", "008309", "008311", "008312", "008315", "008318", "008321", "008325", "008327", "008331", "008337", "008341", "008360", "008361", "008362", "008363", "008364", "008365", "008366", "008367", "008368", "008369", "008370", "008371", "008372", "008373", "008374", "008375", "008376", "008377", "008378", "008380", "008382", "008383", "008384", "008385", "008387", "008388", "008389", "008390", "008392", "008393", "008394", "008397", "008398", "008399", "008400", "008401", "008402", "008403", "008405", "008406", "008411", "008412", "008413", "008414", "008419", "008420", "008423", "008426", "008428", "008434", "008435", "008436", "008444", "008446", "008451", "008470", "008471", "008472", "008473", "008474", "008475", "008476", "008477", "008478", "008479", "008480", "008481", "008482", "008483", "008484", "008485", "008487", "008488", "008489", "008490", "008492", "008493", "008494", "008495", "008497", "008498", "008499", "008501", "008502", "008504", "008505", "008506", "008508", "008509", "008510", "008512", "008513", "008517", "008518", "008519", "008521", "008523", "008524", "008525", "008528", "008530", "008531", "008532", "008536", "008540", "008541", "008549", "008550", "008558", "008563", "008580", "008581", "008582", "008583", "008584", "008585", "008586", "008587", "008588", "008589", "008590", "008592", "008593", "008594", "008595", "008596", "008597", "008598", "008599", "008600", "008602", "008603", "008604", "008605", "008606", "008608", "008609", "008610", "008611", "008612", "008614", "008616", "008618", "008619", "008620", "008622", "008623", "008625", "008628", "008629", "008631", "008636", "008637", "008638", "008639", "008640", "008641", "008645", "008649", "008654", "008657", "008659", "008661", "008666", "008673", "008690", "008691", "008692", "008693", "008694", "008695", "008696", "008697", "008698", "008699", "008700", "008701", "008703", "008704", "008705", "008706", "008707", "008708", "008709", "008710", "008711", "008712", "008714", "008715", "008717", "008718", "008719", "008722", "008723", "008724", "008725", "008726", "008727", "008728", "008730", "008731", "008733", "008734", "008735", "008737", "008743", "008744", "008746", "008747", "008748", "008754", "008756", "008757", "008758", "008765", "008766", "008768", "008770", "008776", "008789", "008800", "008801", "008802", "008803", "008804", "008805", "008806", "008807", "008808", "008809", "008810", "008811", "008813", "008814", "008815", "008816", "008817", "008818", "008819", "008820", "008821", "008822", "008823", "008824", "008825", "008827", "008828", "008830", "008831", "008833", "008835", "008837", "008838", "008839", "008840", "008842", "008844", "008845", "008846", "008847", "008850", "008851", "008852", "008858", "008859", "008861", "008864", "008866", "008867", "008872", "008873", "008879", "008883", "008888", "008893", "008910", "008911", "008912", "008913", "008914", "008915", "008916", "008917", "008918", "008919", "008920", "008921", "008922", "008923", "008924", "008925", "008927", "008928", "008929", "008931", "008932", "008933", "008934", "008936", "008937", "008938", "008939", "008940", "008941", "008942", "008943", "008945", "008947", "008948", "008950", "008951", "008952", "008956", "008957", "008958", "008960", "008962", "008964", "008966", "008967", "008970", "008972", "008973", "008976", "008981", "008982", "008989", "008996", "008999", "009005", "009020", "009021", "009022", "009023", "009024", "009025", "009026", "009027", "009028", "009029", "009030", "009031", "009032", "009033", "009034", "009035", "009036", "009038", "009039", "009041", "009042", "009044", "009045", "009046", "009047", "009048", "009049", "009051", "009053", "009054", "009055", "009056", "009057", "009059", "009060", "009061", "009063", "009064", "009067", "009069", "009071", "009072", "009073", "009074", "009079", "009080", "009082", "009088", "009089", "009092", "009097", "009099", "009107", "009109", "009113", "009130", "009131", "009132", "009133", "009134", "009135", "009136", "009137", "009138", "009139", "009140", "009141", "009142", "009143", "009144", "009145", "009147", "009148", "009149", "009150", "009151", "009153", "009154", "009155", "009157", "009158", "009159", "009161", "009162", "009164", "009165", "009166", "009167", "009168", "009170", "009173", "009175", "009176", "009177", "009179", "009180", "009181", "009182", "009187", "009189", "009190", "009192", "009196", "009197", "009201", "009202", "009206", "009212", "009219", "009226", "009240", "009241", "009242", "009243", "009244", "009245", "009246", "009247", "009248", "009249", "009250", "009251", "009252", "009253", "009254", "009255", "009256", "009258", "009259", "009260", "009261", "009262", "009264", "009265", "009266", "009267", "009268", "009270", "009271", "009272", "009274", "009276", "009277", "009279", "009282", "009284", "009285", "009286", "009287", "009288", "009290", "009291", "009292", "009293", "009299", "009300", "009303", "009305", "009308", "009311", "009314", "009316", "009320", "009327", "009330", "009350", "009351", "009352", "009353", "009354", "009355", "009356", "009357", "009358", "009359", "009360", "009362", "009363", "009364", "009365", "009366", "009367", "009368", "009369", "009370", "009371", "009372", "009374", "009375", "009376", "009378", "009379", "009380", "009381", "009382", "009383", "009384", "009388", "009389", "009390", "009392", "009393", "009394", "009395", "009399", "009403", "009405", "009407", "009408", "009409", "009413", "009416", "009417", "009418", "009425", "009427", "009429", "009431", "009439", "009444", "009460", "009461", "009462", "009463", "009464", "009465", "009466", "009467", "009468", "009469", "009470", "009472", "009473", "009474", "009475", "009476", "009477", "009478", "009479", "009480", "009481", "009482", "009483", "009484", "009486", "009487", "009489", "009490", "009491", "009492", "009493", "009495", "009498", "009499", "009500", "009502", "009504", "009505", "009507", "009508", "009512", "009513", "009514", "009517", "009518", "009521", "009526", "009528", "009529", "009532", "009534", "009537", "009541", "009543", "009550", "009570", "009571", "009572", "009573", "009574", "009575", "009576", "009577", "009578", "009579", "009580", "009581", "009582", "009583", "009584", "009585", "009586", "009588", "009589", "009590", "009591", "009593", "009595", "009596", "009597", "009598", "009599", "009601", "009602", "009603", "009604", "009605", "009608", "009609", "009611", "009612", "009615", "009616", "009617", "009618", "009622", "009624", "009625", "009627", "009628", "009630", "009631", "009636", "009637", "009642", "009643", "009644", "009650", "009658", "009666", "009680", "009681", "009682", "009683", "009684", "009685", "009686", "009687", "009688", "009689", "009690", "009691", "009692", "009693", "009695", "009696", "009697", "009698", "009699", "009701", "009703", "009704", "009705", "009706", "009707", "009708", "009709", "009710", "009711", "009712", "009715", "009716", "009717", "009718", "009721", "009723", "009726", "009727", "009728", "009729", "009730", "009731", "009733", "009738", "009739", "009742", "009747", "009748", "009749", "009754", "009757", "009759", "009765", "009768", "009771", "009790", "009791", "009792", "009793", "009794", "009795", "009796", "009797", "009798", "009799", "009800", "009801", "009802", "009803", "009804", "009805", "009806", "009807", "009809", "009810", "009812", "009813", "009814", "009815", "009816", "009817", "009818", "009820", "009822", "009823", "009825", "009827", "009828", "009829", "009831", "009832", "009835", "009837", "009838", "009839", "009840", "009841", "009844", "009846", "009849", "009850", "009852", "009857", "009858", "009861", "009867", "009868", "009874", "009877", "009881", "009900", "009901", "009902", "009903", "009904", "009905", "009906", "009907", "009908", "009909", "009910", "009911", "009912", "009913", "009915", "009916", "009917", "009918", "009919", "009920", "009921", "009923", "009924", "009926", "009927", "009928", "009929", "009931", "009932", "009933", "009935", "009936", "009938", "009939", "009940", "009941", "009942", "009947", "009948", "009949", "009950", "009952", "009953", "009955", "009958", "009961", "009962", "009963", "009966", "009975", "009977", "009979", "009983", "009988", "009999", "010015", "010016", "010019", "010021", "010023", "010026", "010027", "010028", "010029", "010033", "010034", "010035", "010036", "010038", "010041", "010042", "010043", "010044", "010048", "010049", "010053", "010056", "010057", "010059", "010060", "010065", "010066", "010067", "010069", "010071", "010072", "010074", "010076", "010079", "010081", "010082", "010083"], "val": ["000018", "000021", "000032", "000043", "000045", "000046", "000050", "000052", "000056", "000057", "000062", "000063", "000071", "000076", "000092", "000093", "000102", "000105", "000106", "000108", "000136", "000143", "000146", "000151", "000161", "000168", "000170", "000171", "000176", "000184", "000186", "000194", "000200", "000205", "000206", "000208", "000209", "000213", "000217", "000258", "000260", "000277", "000281", "000284", "000294", "000296", "000300", "000301", "000302", "000313", "000314", "000316", "000317", "000322", "000323", "000328", "000342", "000359", "000386", "000396", "000402", "000407", "000411", "000412", "000414", "000417", "000418", "000419", "000420", "000421", "000424", "000428", "000430", "000432", "000438", "000453", "000473", "000479", "000483", "000487", "000488", "000490", "000491", "000497", "000508", "000512", "000513", "000515", "000520", "000521", "000525", "000528", "000530", "000531", "000532", "000533", "000534", "000536", "000537", "000542", "000547", "000549", "000583", "000602", "000604", "000607", "000609", "000610", "000611", "000616", "000625", "000630", "000634", "000637", "000646", "000648", "000653", "000672", "000684", "000697", "000700", "000702", "000703", "000710", "000717", "000719", "000720", "000721", "000727", "000729", "000733", "000736", "000739", "000742", "000747", "000749", "000751", "000757", "000758", "000760", "000762", "000763", "000765", "000766", "000767", "000780", "000793", "000806", "000809", "000812", "000827", "000829", "000831", "000840", "000841", "000842", "000848", "000851", "000857", "000860", "000861", "000867", "000869", "000870", "000872", "000873", "000876", "000879", "000896", "000921", "000938", "000941", "000945", "000949", "000950", "000951", "000953", "000958", "000960", "000961", "000962", "000968", "000971", "000973", "000976", "000977", "000986", "000987", "000988", "000989", "001007", "001022", "001024", "001036", "001037", "001042", "001043", "001047", "001059", "001065", "001066", "001068", "001070", "001071", "001073", "001078", "001080", "001083", "001085", "001092", "001095", "001097", "001099", "001119", "001128", "001134", "001137", "001140", "001151", "001152", "001164", "001165", "001167", "001176", "001183", "001184", "001189", "001191", "001192", "001201", "001205", "001209", "001247", "001248", "001257", "001265", "001279", "001288", "001293", "001294", "001295", "001296", "001299", "001300", "001301", "001302", "001303", "001304", "001306", "001309", "001312", "001315", "001364", "001375", "001378", "001381", "001382", "001385", "001386", "001392", "001395", "001399", "001402", "001405", "001407", "001408", "001421", "001429", "001456", "001483", "001487", "001492", "001494", "001499", "001505", "001507", "001508", "001509", "001512", "001518", "001524", "001525", "001533", "001538", "001539", "001567", "001578", "001583", "001584", "001590", "001594", "001596", "001606", "001610", "001616", "001617", "001618", "001619", "001621", "001631", "001632", "001634", "001637", "001638", "001641", "001643", "001647", "001649", "001681", "001686", "001692", "001699", "001700", "001701", "001710", "001713", "001720", "001727", "001733", "001734", "001736", "001738", "001739", "001740", "001749", "001751", "001752", "001757", "001773", "001789", "001793", "001796", "001798", "001812", "001813", "001816", "001819", "001820", "001823", "001828", "001835", "001836", "001838", "001839", "001841", "001842", "001845", "001847", "001849", "001851", "001852", "001853", "001857", "001859", "001862", "001864", "001865", "001868", "001892", "001910", "001923", "001926", "001930", "001935", "001941", "001943", "001944", "001948", "001955", "001958", "001959", "001960", "001961", "001963", "001964", "001965", "001974", "001975", "001976", "001977", "001979", "002010", "002012", "002020", "002022", "002029", "002032", "002042", "002044", "002050", "002053", "002056", "002066", "002068", "002072", "002073", "002075", "002078", "002079", "002085", "002086", "002087", "002088", "002119", "002124", "002126", "002135", "002140", "002153", "002154", "002155", "002161", "002162", "002164", "002166", "002172", "002175", "002176", "002181", "002183", "002185", "002190", "002194", "002198", "002238", "002241", "002248", "002249", "002251", "002258", "002264", "002267", "002268", "002272", "002273", "002276", "002280", "002288", "002295", "002297", "002301", "002304", "002305", "002306", "002308", "002333", "002357", "002362", "002367", "002368", "002373", "002378", "002379", "002385", "002387", "002391", "002392", "002393", "002395", "002399", "002400", "002402", "002403", "002405", "002409", "002412", "002431", "002442", "002443", "002457", "002469", "002472", "002473", "002476", "002479", "002480", "002483", "002488", "002493", "002494", "002495", "002499", "002502", "002507", "002508", "002509", "002512", "002521", "002526", "002527", "002528", "002541", "002553", "002564", "002572", "002576", "002582", "002586", "002588", "002601", "002606", "002608", "002617", "002618", "002619", "002622", "002623", "002626", "002628", "002629", "002632", "002634", "002636", "002637", "002639", "002661", "002672", "002674", "002687", "002690", "002698", "002701", "002705", "002708", "002719", "002722", "002726", "002727", "002729", "002730", "002739", "002740", "002742", "002744", "002747", "002749", "002760", "002772", "002788", "002791", "002793", "002795", "002799", "002800", "002813", "002816", "002817", "002820", "002821", "002825", "002827", "002832", "002836", "002853", "002854", "002855", "002856", "002857", "002879", "002888", "002893", "002895", "002901", "002904", "002913", "002917", "002921", "002927", "002928", "002930", "002931", "002933", "002937", "002944", "002949", "002950", "002953", "002957", "002958", "002965", "002969", "002999", "003005", "003006", "003007", "003016", "003024", "003025", "003032", "003037", "003040", "003041", "003046", "003049", "003050", "003051", "003052", "003054", "003057", "003061", "003063", "003064", "003068", "003070", "003072", "003073", "003075", "003076", "003077", "003078", "003095", "003102", "003122", "003124", "003126", "003138", "003142", "003150", "003152", "003156", "003158", "003160", "003165", "003170", "003173", "003174", "003177", "003181", "003182", "003183", "003187", "003216", "003229", "003233", "003234", "003248", "003250", "003252", "003254", "003255", "003263", "003264", "003266", "003269", "003270", "003272", "003276", "003277", "003281", "003283", "003287", "003293", "003294", "003295", "003296", "003297", "003299", "003325", "003334", "003337", "003348", "003358", "003360", "003364", "003365", "003368", "003373", "003378", "003391", "003393", "003395", "003396", "003398", "003400", "003401", "003402", "003403", "003409", "003445", "003452", "003455", "003461", "003479", "003480", "003481", "003483", "003484", "003485", "003487", "003491", "003492", "003495", "003496", "003497", "003500", "003503", "003508", "003510", "003513", "003516", "003549", "003555", "003561", "003571", "003572", "003582", "003584", "003588", "003599", "003601", "003605", "003613", "003618", "003624", "003625", "003669", "003671", "003675", "003677", "003679", "003683", "003691", "003694", "003695", "003698", "003700", "003704", "003710", "003711", "003719", "003722", "003727", "003728", "003730", "003733", "003735", "003736", "003739", "003755", "003761", "003767", "003779", "003781", "003788", "003790", "003791", "003801", "003811", "003813", "003815", "003817", "003825", "003827", "003829", "003830", "003834", "003840", "003844", "003845", "003846", "003847", "003885", "003897", "003903", "003904", "003907", "003910", "003917", "003922", "003925", "003929", "003932", "003933", "003934", "003937", "003941", "003944", "003951", "003959", "004002", "004015", "004020", "004021", "004022", "004025", "004029", "004033", "004037", "004039", "004041", "004042", "004048", "004049", "004051", "004054", "004055", "004063", "004066", "004067", "004068", "004095", "004112", "004114", "004127", "004139", "004143", "004147", "004153", "004155", "004157", "004160", "004161", "004165", "004167", "004168", "004171", "004176", "004177", "004220", "004221", "004230", "004234", "004235", "004246", "004247", "004248", "004249", "004250", "004256", "004258", "004262", "004264", "004265", "004267", "004268", "004271", "004273", "004275", "004278", "004289", "004319", "004328", "004329", "004339", "004345", "004350", "004351", "004356", "004361", "004369", "004372", "004377", "004378", "004379", "004380", "004384", "004386", "004388", "004391", "004393", "004395", "004397", "004399", "004417", "004431", "004432", "004450", "004453", "004456", "004460", "004461", "004464", "004465", "004466", "004472", "004474", "004476", "004477", "004480", "004490", "004491", "004492", "004494", "004501", "004502", "004504", "004505", "004506", "004507", "004531", "004540", "004543", "004550", "004557", "004558", "004559", "004560", "004568", "004579", "004582", "004587", "004588", "004596", "004597", "004598", "004605", "004614", "004616", "004617", "004618", "004656", "004668", "004675", "004683", "004684", "004695", "004698", "004702", "004705", "004707", "004708", "004712", "004716", "004719", "004720", "004722", "004723", "004761", "004766", "004773", "004776", "004777", "004781", "004784", "004788", "004790", "004792", "004795", "004803", "004812", "004813", "004821", "004826", "004829", "004831", "004832", "004834", "004836", "004838", "004839", "004860", "004879", "004887", "004891", "004898", "004899", "004903", "004904", "004910", "004913", "004921", "004922", "004929", "004933", "004934", "004936", "004939", "004942", "004946", "004947", "004948", "004977", "004978", "004987", "004991", "005000", "005008", "005019", "005021", "005023", "005026", "005028", "005031", "005034", "005035", "005037", "005039", "005040", "005042", "005044", "005045", "005049", "005051", "005052", "005055", "005056", "005058", "005059", "005086", "005090", "005091", "005105", "005106", "005122", "005127", "005139", "005141", "005144", "005146", "005147", "005151", "005154", "005156", "005158", "005161", "005169", "005183", "005192", "005202", "005204", "005211", "005217", "005226", "005228", "005229", "005230", "005238", "005244", "005246", "005247", "005252", "005253", "005254", "005255", "005260", "005263", "005264", "005276", "005279", "005305", "005314", "005318", "005324", "005326", "005334", "005337", "005338", "005344", "005346", "005349", "005351", "005354", "005356", "005357", "005359", "005361", "005364", "005365", "005369", "005375", "005377", "005378", "005379", "005381", "005384", "005385", "005387", "005388", "005423", "005424", "005425", "005435", "005436", "005438", "005446", "005455", "005458", "005463", "005471", "005476", "005478", "005479", "005483", "005486", "005491", "005498", "005511", "005521", "005524", "005531", "005538", "005546", "005552", "005558", "005564", "005566", "005575", "005582", "005584", "005589", "005590", "005591", "005594", "005598", "005601", "005609", "005640", "005643", "005650", "005653", "005677", "005678", "005681", "005682", "005685", "005686", "005693", "005695", "005701", "005703", "005705", "005714", "005716", "005719", "005738", "005744", "005748", "005750", "005755", "005760", "005777", "005779", "005786", "005790", "005796", "005799", "005800", "005802", "005805", "005806", "005809", "005810", "005811", "005814", "005815", "005820", "005822", "005852", "005860", "005883", "005885", "005889", "005905", "005913", "005916", "005918", "005920", "005921", "005923", "005924", "005927", "005928", "005937", "005938", "005939", "005961", "005973", "005976", "005990", "005992", "005994", "006004", "006006", "006007", "006008", "006011", "006022", "006023", "006026", "006027", "006040", "006042", "006043", "006044", "006045", "006048", "006079", "006086", "006095", "006101", "006104", "006107", "006111", "006115", "006124", "006129", "006131", "006134", "006137", "006138", "006142", "006144", "006146", "006147", "006148", "006149", "006153", "006156", "006157", "006173", "006190", "006191", "006199", "006214", "006218", "006219", "006221", "006225", "006230", "006231", "006235", "006237", "006240", "006242", "006245", "006251", "006253", "006258", "006262", "006267", "006268", "006280", "006303", "006318", "006319", "006322", "006324", "006336", "006339", "006341", "006345", "006346", "006347", "006350", "006351", "006353", "006356", "006363", "006366", "006369", "006370", "006372", "006373", "006374", "006375", "006390", "006403", "006425", "006426", "006429", "006431", "006449", "006459", "006460", "006464", "006465", "006470", "006475", "006483", "006486", "006489", "006527", "006534", "006542", "006545", "006550", "006558", "006561", "006565", "006566", "006571", "006574", "006578", "006580", "006583", "006586", "006589", "006590", "006591", "006592", "006593", "006595", "006598", "006620", "006642", "006646", "006648", "006649", "006650", "006653", "006672", "006673", "006674", "006677", "006684", "006686", "006691", "006694", "006699", "006700", "006701", "006704", "006705", "006706", "006731", "006738", "006743", "006744", "006751", "006757", "006761", "006764", "006766", "006774", "006778", "006782", "006784", "006785", "006786", "006791", "006793", "006795", "006798", "006810", "006817", "006843", "006857", "006862", "006869", "006870", "006872", "006878", "006883", "006884", "006886", "006887", "006900", "006909", "006910", "006911", "006912", "006916", "006919", "006920", "006922", "006924", "006926", "006927", "006928", "006944", "006959", "006966", "006971", "006973", "006978", "006982", "006989", "006994", "006998", "007005", "007009", "007010", "007011", "007018", "007024", "007026", "007030", "007031", "007037", "007038", "007055", "007079", "007080", "007089", "007092", "007093", "007107", "007108", "007109", "007112", "007114", "007117", "007120", "007123", "007124", "007128", "007132", "007135", "007136", "007137", "007139", "007140", "007142", "007143", "007147", "007148", "007149", "007173", "007182", "007197", "007212", "007221", "007225", "007226", "007234", "007240", "007244", "007246", "007248", "007249", "007250", "007252", "007255", "007257", "007275", "007292", "007309", "007325", "007327", "007334", "007337", "007339", "007340", "007342", "007347", "007349", "007350", "007351", "007352", "007353", "007355", "007360", "007361", "007363", "007364", "007366", "007367", "007368", "007405", "007406", "007414", "007427", "007438", "007441", "007446", "007450", "007453", "007454", "007455", "007456", "007460", "007464", "007466", "007467", "007469", "007470", "007472", "007474", "007477", "007478", "007511", "007514", "007523", "007527", "007563", "007564", "007566", "007568", "007569", "007570", "007573", "007576", "007578", "007581", "007584", "007586", "007587", "007589", "007603", "007619", "007637", "007638", "007644", "007647", "007654", "007656", "007658", "007661", "007662", "007664", "007668", "007672", "007673", "007674", "007678", "007679", "007680", "007681", "007683", "007685", "007689", "007690", "007691", "007694", "007696", "007697", "007729", "007739", "007748", "007751", "007759", "007760", "007764", "007771", "007773", "007775", "007782", "007783", "007784", "007789", "007790", "007791", "007795", "007796", "007797", "007802", "007803", "007805", "007806", "007807", "007809", "007829", "007839", "007856", "007858", "007861", "007871", "007872", "007878", "007879", "007884", "007886", "007888", "007893", "007895", "007902", "007905", "007906", "007912", "007913", "007917", "007918", "007951", "007955", "007959", "007960", "007966", "007972", "007977", "007979", "007983", "007988", "007989", "007992", "007995", "007999", "008003", "008010", "008012", "008013", "008017", "008018", "008020", "008021", "008022", "008025", "008026", "008029", "008046", "008059", "008066", "008068", "008082", "008089", "008090", "008092", "008094", "008099", "008104", "008105", "008107", "008113", "008114", "008115", "008116", "008119", "008132", "008133", "008135", "008136", "008137", "008138", "008139", "008156", "008160", "008178", "008185", "008193", "008194", "008198", "008199", "008210", "008214", "008217", "008222", "008224", "008227", "008232", "008233", "008234", "008235", "008239", "008242", "008244", "008248", "008249", "008276", "008298", "008303", "008306", "008308", "008310", "008313", "008316", "008317", "008323", "008328", "008330", "008332", "008335", "008338", "008340", "008342", "008343", "008344", "008346", "008351", "008353", "008379", "008386", "008391", "008407", "008409", "008410", "008416", "008418", "008425", "008440", "008443", "008445", "008448", "008450", "008453", "008455", "008456", "008457", "008460", "008463", "008464", "008465", "008467", "008511", "008515", "008516", "008522", "008526", "008527", "008529", "008533", "008534", "008535", "008539", "008542", "008545", "008548", "008551", "008553", "008555", "008560", "008565", "008566", "008575", "008576", "008577", "008591", "008601", "008613", "008615", "008624", "008627", "008630", "008632", "008633", "008635", "008646", "008647", "008650", "008651", "008660", "008662", "008663", "008670", "008671", "008679", "008682", "008685", "008686", "008687", "008688", "008689", "008720", "008721", "008729", "008736", "008739", "008742", "008749", "008760", "008762", "008773", "008775", "008777", "008778", "008780", "008781", "008782", "008783", "008784", "008785", "008786", "008788", "008791", "008794", "008799", "008812", "008826", "008829", "008832", "008836", "008841", "008853", "008855", "008871", "008874", "008878", "008885", "008886", "008887", "008889", "008890", "008892", "008895", "008897", "008899", "008900", "008901", "008903", "008905", "008906", "008907", "008908", "008953", "008954", "008955", "008963", "008971", "008975", "008977", "008984", "008987", "008990", "008993", "008994", "008995", "009007", "009008", "009010", "009011", "009018", "009019", "009037", "009066", "009075", "009076", "009083", "009087", "009091", "009093", "009095", "009098", "009102", "009103", "009104", "009111", "009114", "009118", "009121", "009123", "009124", "009125", "009127", "009128", "009129", "009146", "009156", "009163", "009172", "009178", "009185", "009186", "009198", "009199", "009204", "009207", "009211", "009215", "009218", "009223", "009224", "009227", "009228", "009231", "009232", "009234", "009235", "009239", "009263", "009280", "009283", "009289", "009296", "009313", "009317", "009319", "009321", "009326", "009331", "009332", "009335", "009336", "009337", "009339", "009340", "009343", "009345", "009386", "009387", "009396", "009398", "009406", "009410", "009414", "009420", "009423", "009426", "009430", "009433", "009437", "009441", "009443", "009446", "009448", "009449", "009450", "009451", "009453", "009455", "009457", "009471", "009494", "009501", "009506", "009509", "009510", "009523", "009524", "009525", "009530", "009531", "009540", "009542", "009544", "009547", "009548", "009552", "009554", "009556", "009562", "009568", "009569", "009594", "009610", "009613", "009614", "009623", "009626", "009633", "009634", "009638", "009645", "009648", "009651", "009655", "009656", "009657", "009660", "009663", "009664", "009667", "009671", "009672", "009674", "009678", "009679", "009720", "009736", "009737", "009751", "009752", "009755", "009756", "009763", "009766", "009772", "009774", "009776", "009777", "009778", "009781", "009782", "009783", "009784", "009786", "009788", "009808", "009811", "009821", "009826", "009834", "009845", "009851", "009859", "009862", "009863", "009864", "009870", "009873", "009875", "009878", "009880", "009883", "009884", "009889", "009890", "009898", "009899", "009914", "009925", "009934", "009937", "009946", "009951", "009960", "009964", "009967", "009970", "009972", "009973", "009980", "009982", "009984", "009985", "009989", "009993", "009994", "009996", "010000", "010004", "010005", "010006", "010009", "010010", "010013", "010017", "010020", "010022", "010030", "010032", "010037", "010040", "010045", "010064", "010068", "010075", "010077", "010080"], "test": ["000023", "000030", "000035", "000042", "000055", "000060", "000061", "000064", "000067", "000070", "000074", "000075", "000077", "000079", "000080", "000082", "000083", "000084", "000085", "000086", "000087", "000089", "000090", "000091", "000094", "000095", "000096", "000098", "000099", "000100", "000101", "000103", "000104", "000107", "000109", "000122", "000138", "000149", "000153", "000157", "000158", "000164", "000165", "000169", "000174", "000177", "000178", "000180", "000181", "000182", "000188", "000189", "000190", "000191", "000192", "000193", "000197", "000198", "000199", "000201", "000203", "000204", "000207", "000210", "000211", "000212", "000214", "000215", "000216", "000218", "000219", "000234", "000240", "000248", "000255", "000257", "000261", "000266", "000267", "000270", "000271", "000274", "000279", "000282", "000283", "000286", "000288", "000291", "000292", "000293", "000297", "000298", "000304", "000305", "000306", "000308", "000309", "000310", "000311", "000312", "000318", "000319", "000320", "000321", "000324", "000325", "000326", "000327", "000329", "000353", "000364", "000365", "000366", "000370", "000371", "000376", "000379", "000380", "000381", "000384", "000389", "000390", "000392", "000395", "000397", "000399", "000400", "000403", "000405", "000406", "000408", "000410", "000415", "000422", "000423", "000425", "000426", "000429", "000431", "000433", "000434", "000435", "000436", "000437", "000439", "000461", "000467", "000476", "000482", "000496", "000499", "000501", "000502", "000504", "000507", "000509", "000514", "000516", "000518", "000519", "000524", "000526", "000527", "000529", "000535", "000538", "000540", "000541", "000543", "000544", "000545", "000546", "000548", "000567", "000574", "000579", "000585", "000588", "000592", "000593", "000595", "000597", "000605", "000612", "000613", "000619", "000621", "000622", "000623", "000624", "000626", "000627", "000632", "000633", "000636", "000638", "000639", "000640", "000641", "000642", "000644", "000645", "000647", "000649", "000650", "000651", "000652", "000654", "000655", "000656", "000657", "000658", "000659", "000685", "000694", "000696", "000701", "000713", "000716", "000722", "000726", "000731", "000735", "000737", "000738", "000740", "000743", "000744", "000745", "000748", "000750", "000752", "000753", "000754", "000755", "000759", "000761", "000764", "000768", "000769", "000790", "000802", "000810", "000814", "000817", "000821", "000824", "000828", "000830", "000832", "000833", "000834", "000838", "000843", "000844", "000847", "000850", "000853", "000854", "000855", "000856", "000859", "000862", "000863", "000864", "000866", "000868", "000871", "000874", "000875", "000877", "000878", "000900", "000908", "000911", "000913", "000918", "000926", "000927", "000929", "000930", "000932", "000935", "000936", "000943", "000946", "000947", "000952", "000955", "000956", "000963", "000964", "000965", "000967", "000970", "000974", "000975", "000978", "000979", "000980", "000981", "000982", "000983", "000984", "000985", "001017", "001019", "001029", "001034", "001038", "001044", "001049", "001051", "001054", "001055", "001056", "001058", "001061", "001063", "001067", "001069", "001074", "001075", "001076", "001077", "001081", "001084", "001086", "001087", "001088", "001089", "001090", "001091", "001093", "001094", "001096", "001098", "001120", "001131", "001141", "001146", "001147", "001150", "001154", "001159", "001161", "001166", "001168", "001170", "001172", "001175", "001177", "001178", "001179", "001180", "001182", "001185", "001186", "001188", "001190", "001194", "001195", "001196", "001197", "001198", "001199", "001200", "001202", "001203", "001204", "001206", "001207", "001208", "001227", "001234", "001236", "001240", "001251", "001253", "001255", "001260", "001262", "001268", "001269", "001272", "001274", "001276", "001277", "001278", "001280", "001282", "001284", "001285", "001287", "001289", "001290", "001297", "001298", "001305", "001308", "001310", "001311", "001313", "001314", "001316", "001317", "001318", "001319", "001334", "001345", "001349", "001351", "001356", "001357", "001360", "001367", "001368", "001372", "001376", "001377", "001384", "001387", "001390", "001393", "001396", "001397", "001400", "001404", "001406", "001409", "001410", "001411", "001412", "001413", "001414", "001415", "001416", "001417", "001418", "001420", "001422", "001423", "001424", "001425", "001426", "001427", "001428", "001449", "001459", "001462", "001468", "001469", "001470", "001471", "001476", "001477", "001482", "001485", "001488", "001491", "001496", "001498", "001501", "001503", "001506", "001513", "001514", "001515", "001516", "001517", "001519", "001520", "001522", "001523", "001526", "001527", "001528", "001529", "001530", "001531", "001532", "001534", "001535", "001536", "001537", "001554", "001563", "001572", "001579", "001580", "001588", "001591", "001597", "001600", "001602", "001604", "001605", "001608", "001611", "001615", "001622", "001623", "001624", "001625", "001627", "001628", "001629", "001630", "001635", "001636", "001639", "001640", "001642", "001644", "001645", "001646", "001648", "001665", "001674", "001679", "001689", "001694", "001695", "001703", "001706", "001708", "001714", "001715", "001716", "001718", "001721", "001723", "001724", "001726", "001728", "001731", "001735", "001737", "001741", "001742", "001743", "001745", "001746", "001747", "001748", "001750", "001753", "001754", "001755", "001756", "001758", "001759", "001788", "001802", "001805", "001806", "001807", "001811", "001824", "001825", "001826", "001830", "001832", "001834", "001840", "001846", "001848", "001850", "001854", "001855", "001858", "001860", "001861", "001863", "001866", "001867", "001869", "001884", "001898", "001905", "001906", "001907", "001911", "001913", "001914", "001920", "001922", "001927", "001931", "001932", "001936", "001939", "001940", "001942", "001946", "001950", "001951", "001952", "001953", "001957", "001962", "001967", "001968", "001969", "001970", "001971", "001972", "001973", "001978", "001999", "002002", "002006", "002018", "002028", "002031", "002033", "002036", "002037", "002041", "002043", "002047", "002048", "002051", "002057", "002058", "002059", "002060", "002061", "002063", "002065", "002067", "002069", "002071", "002074", "002076", "002077", "002080", "002081", "002082", "002083", "002084", "002089", "002100", "002114", "002122", "002131", "002136", "002139", "002141", "002143", "002148", "002149", "002152", "002157", "002158", "002160", "002167", "002169", "002170", "002174", "002177", "002178", "002179", "002180", "002182", "002184", "002186", "002188", "002189", "002191", "002192", "002193", "002195", "002196", "002197", "002199", "002213", "002226", "002227", "002232", "002234", "002240", "002253", "002254", "002259", "002263", "002265", "002266", "002270", "002274", "002278", "002279", "002281", "002283", "002284", "002286", "002287", "002289", "002290", "002291", "002292", "002293", "002294", "002296", "002298", "002300", "002302", "002303", "002307", "002309", "002325", "002336", "002342", "002344", "002345", "002350", "002356", "002359", "002363", "002365", "002371", "002375", "002377", "002381", "002384", "002386", "002388", "002389", "002394", "002397", "002398", "002401", "002404", "002407", "002408", "002410", "002411", "002413", "002414", "002415", "002416", "002417", "002418", "002419", "002453", "002454", "002464", "002466", "002467", "002474", "002481", "002484", "002489", "002490", "002492", "002498", "002500", "002501", "002504", "002505", "002511", "002513", "002514", "002515", "002516", "002517", "002518", "002519", "002520", "002522", "002523", "002524", "002525", "002529", "002551", "002562", "002566", "002571", "002579", "002585", "002589", "002593", "002594", "002596", "002597", "002598", "002599", "002600", "002602", "002604", "002609", "002610", "002611", "002612", "002613", "002615", "002621", "002624", "002625", "002627", "002630", "002631", "002633", "002635", "002638", "002651", "002660", "002677", "002681", "002685", "002689", "002691", "002694", "002696", "002700", "002702", "002706", "002710", "002711", "002712", "002713", "002714", "002718", "002720", "002721", "002723", "002724", "002731", "002732", "002733", "002735", "002736", "002737", "002738", "002741", "002743", "002745", "002746", "002748", "002777", "002782", "002787", "002802", "002803", "002804", "002805", "002810", "002815", "002819", "002823", "002824", "002829", "002830", "002833", "002834", "002835", "002837", "002838", "002840", "002842", "002843", "002844", "002845", "002846", "002847", "002848", "002849", "002850", "002851", "002852", "002858", "002859", "002880", "002890", "002903", "002909", "002912", "002914", "002915", "002922", "002925", "002929", "002932", "002935", "002936", "002940", "002941", "002942", "002943", "002945", "002946", "002951", "002952", "002954", "002955", "002956", "002960", "002961", "002962", "002963", "002964", "002966", "002967", "002968", "002986", "002996", "003012", "003014", "003017", "003021", "003026", "003029", "003031", "003035", "003038", "003039", "003042", "003045", "003048", "003055", "003058", "003059", "003060", "003062", "003066", "003067", "003069", "003071", "003074", "003079", "003105", "003114", "003116", "003119", "003120", "003132", "003134", "003136", "003139", "003140", "003141", "003144", "003145", "003146", "003153", "003154", "003155", "003161", "003163", "003166", "003167", "003168", "003169", "003172", "003175", "003176", "003178", "003179", "003180", "003184", "003185", "003186", "003188", "003189", "003207", "003214", "003220", "003227", "003236", "003239", "003240", "003241", "003245", "003247", "003253", "003256", "003262", "003265", "003268", "003273", "003274", "003278", "003279", "003280", "003282", "003284", "003285", "003286", "003289", "003290", "003291", "003292", "003298", "003317", "003327", "003338", "003340", "003346", "003349", "003353", "003355", "003356", "003359", "003363", "003367", "003370", "003371", "003372", "003375", "003377", "003380", "003382", "003383", "003384", "003385", "003386", "003387", "003388", "003390", "003392", "003394", "003399", "003404", "003405", "003406", "003407", "003408", "003424", "003430", "003437", "003441", "003449", "003456", "003458", "003460", "003465", "003468", "003469", "003470", "003473", "003475", "003477", "003478", "003486", "003494", "003498", "003499", "003501", "003502", "003504", "003505", "003506", "003507", "003511", "003512", "003514", "003515", "003517", "003518", "003519", "003536", "003544", "003556", "003558", "003563", "003567", "003569", "003573", "003574", "003576", "003581", "003585", "003589", "003591", "003593", "003595", "003596", "003597", "003598", "003603", "003604", "003606", "003607", "003608", "003609", "003610", "003611", "003612", "003614", "003615", "003617", "003619", "003620", "003621", "003622", "003623", "003626", "003627", "003628", "003629", "003646", "003656", "003657", "003665", "003668", "003680", "003681", "003684", "003686", "003690", "003699", "003702", "003705", "003706", "003707", "003709", "003713", "003714", "003715", "003717", "003718", "003720", "003721", "003724", "003725", "003726", "003729", "003731", "003732", "003734", "003737", "003738", "003774", "003777", "003784", "003785", "003792", "003794", "003795", "003800", "003804", "003805", "003807", "003808", "003812", "003816", "003818", "003821", "003823", "003824", "003826", "003828", "003831", "003832", "003833", "003835", "003836", "003837", "003839", "003841", "003842", "003843", "003848", "003849", "003864", "003872", "003875", "003884", "003889", "003891", "003896", "003898", "003900", "003906", "003913", "003915", "003916", "003919", "003921", "003924", "003926", "003928", "003930", "003936", "003938", "003939", "003940", "003942", "003943", "003945", "003946", "003947", "003949", "003950", "003952", "003953", "003954", "003955", "003956", "003957", "003958", "003979", "003985", "003989", "003993", "003996", "003997", "004000", "004004", "004007", "004011", "004012", "004017", "004018", "004028", "004030", "004032", "004035", "004036", "004040", "004045", "004046", "004047", "004050", "004052", "004056", "004057", "004058", "004059", "004060", "004061", "004062", "004064", "004065", "004069", "004080", "004099", "004101", "004107", "004109", "004117", "004118", "004121", "004122", "004125", "004129", "004130", "004131", "004134", "004136", "004137", "004140", "004142", "004144", "004145", "004148", "004152", "004154", "004156", "004158", "004159", "004162", "004163", "004164", "004166", "004170", "004172", "004173", "004174", "004175", "004178", "004179", "004196", "004201", "004209", "004215", "004217", "004219", "004223", "004228", "004233", "004236", "004240", "004242", "004252", "004253", "004255", "004257", "004260", "004263", "004269", "004270", "004272", "004274", "004276", "004279", "004280", "004281", "004282", "004283", "004284", "004285", "004286", "004287", "004288", "004306", "004311", "004324", "004332", "004334", "004335", "004341", "004342", "004344", "004348", "004353", "004354", "004357", "004360", "004362", "004363", "004364", "004367", "004370", "004373", "004374", "004375", "004381", "004383", "004385", "004387", "004389", "004390", "004392", "004394", "004396", "004398", "004425", "004429", "004439", "004440", "004442", "004444", "004448", "004454", "004458", "004463", "004470", "004475", "004478", "004481", "004483", "004484", "004485", "004487", "004488", "004489", "004493", "004495", "004497", "004498", "004499", "004500", "004503", "004508", "004509", "004524", "004534", "004549", "004561", "004562", "004563", "004571", "004573", "004575", "004576", "004578", "004583", "004584", "004585", "004589", "004590", "004591", "004592", "004593", "004595", "004600", "004601", "004603", "004604", "004606", "004607", "004608", "004609", "004610", "004611", "004612", "004613", "004615", "004619", "004634", "004643", "004646", "004653", "004657", "004661", "004664", "004665", "004670", "004672", "004673", "004674", "004681", "004685", "004686", "004688", "004690", "004691", "004696", "004697", "004699", "004700", "004701", "004706", "004709", "004710", "004711", "004713", "004715", "004717", "004718", "004721", "004724", "004725", "004726", "004727", "004728", "004729", "004744", "004752", "004753", "004769", "004772", "004780", "004786", "004793", "004797", "004798", "004804", "004805", "004806", "004807", "004808", "004809", "004810", "004811", "004814", "004815", "004816", "004818", "004820", "004822", "004823", "004825", "004827", "004828", "004830", "004833", "004835", "004837", "004857", "004862", "004870", "004875", "004880", "004881", "004888", "004893", "004896", "004901", "004902", "004907", "004908", "004912", "004914", "004916", "004918", "004919", "004920", "004923", "004924", "004925", "004927", "004930", "004931", "004935", "004937", "004938", "004940", "004941", "004943", "004944", "004945", "004949", "004969", "004982", "004985", "004993", "004995", "004999", "005002", "005005", "005006", "005011", "005012", "005015", "005016", "005017", "005020", "005025", "005027", "005030", "005032", "005038", "005041", "005043", "005046", "005047", "005050", "005053", "005054", "005057", "005074", "005087", "005097", "005102", "005108", "005112", "005114", "005115", "005116", "005118", "005123", "005124", "005126", "005129", "005130", "005132", "005133", "005134", "005136", "005138", "005140", "005142", "005143", "005145", "005150", "005152", "005153", "005155", "005157", "005160", "005162", "005163", "005164", "005165", "005166", "005167", "005168", "005193", "005203", "005213", "005214", "005220", "005227", "005232", "005233", "005235", "005237", "005240", "005242", "005245", "005248", "005256", "005257", "005258", "005259", "005262", "005265", "005266", "005267", "005268", "005269", "005270", "005271", "005272", "005273", "005274", "005275", "005277", "005278", "005295", "005304", "005316", "005321", "005329", "005332", "005333", "005341", "005345", "005348", "005355", "005358", "005360", "005363", "005366", "005367", "005370", "005372", "005373", "005374", "005376", "005380", "005382", "005383", "005386", "005389", "005407", "005416", "005417", "005434", "005440", "005444", "005445", "005448", "005450", "005451", "005452", "005453", "005460", "005461", "005462", "005467", "005468", "005469", "005470", "005473", "005474", "005475", "005481", "005482", "005484", "005485", "005487", "005488", "005489", "005490", "005492", "005493", "005494", "005495", "005496", "005497", "005499", "005535", "005543", "005544", "005548", "005553", "005554", "005556", "005562", "005563", "005565", "005568", "005570", "005573", "005574", "005576", "005577", "005578", "005580", "005583", "005585", "005586", "005587", "005592", "005593", "005595", "005596", "005599", "005600", "005602", "005603", "005604", "005605", "005606", "005607", "005608", "005622", "005631", "005633", "005649", "005651", "005658", "005660", "005661", "005666", "005667", "005668", "005670", "005671", "005675", "005676", "005680", "005687", "005689", "005691", "005692", "005696", "005697", "005698", "005699", "005700", "005702", "005704", "005706", "005707", "005709", "005710", "005711", "005712", "005713", "005715", "005717", "005718", "005751", "005761", "005765", "005767", "005770", "005772", "005778", "005781", "005783", "005785", "005787", "005789", "005792", "005794", "005797", "005798", "005801", "005803", "005808", "005812", "005813", "005817", "005818", "005819", "005821", "005823", "005824", "005825", "005826", "005827", "005828", "005829", "005841", "005858", "005861", "005864", "005870", "005873", "005877", "005878", "005882", "005886", "005890", "005891", "005892", "005893", "005898", "005899", "005902", "005903", "005904", "005906", "005907", "005908", "005910", "005911", "005912", "005914", "005919", "005922", "005926", "005929", "005930", "005931", "005932", "005933", "005934", "005935", "005936", "005958", "005964", "005978", "005980", "005981", "005983", "005987", "005998", "005999", "006000", "006009", "006010", "006012", "006013", "006014", "006017", "006019", "006020", "006021", "006028", "006029", "006030", "006031", "006032", "006034", "006035", "006036", "006037", "006038", "006039", "006041", "006046", "006047", "006049", "006063", "006072", "006083", "006085", "006093", "006097", "006098", "006100", "006109", "006113", "006114", "006118", "006119", "006120", "006122", "006125", "006126", "006127", "006132", "006133", "006136", "006139", "006140", "006141", "006143", "006150", "006151", "006152", "006154", "006155", "006158", "006159", "006184", "006186", "006204", "006205", "006207", "006209", "006211", "006215", "006220", "006222", "006228", "006229", "006232", "006233", "006239", "006243", "006244", "006246", "006247", "006249", "006250", "006252", "006254", "006255", "006257", "006259", "006260", "006261", "006263", "006264", "006265", "006266", "006269", "006294", "006297", "006305", "006309", "006312", "006317", "006320", "006323", "006329", "006331", "006334", "006335", "006337", "006343", "006348", "006349", "006355", "006357", "006358", "006359", "006360", "006361", "006364", "006365", "006367", "006368", "006371", "006376", "006377", "006378", "006379", "006401", "006413", "006414", "006415", "006422", "006433", "006436", "006437", "006439", "006441", "006442", "006443", "006444", "006446", "006451", "006452", "006455", "006456", "006457", "006458", "006462", "006466", "006467", "006468", "006469", "006471", "006472", "006473", "006474", "006476", "006477", "006479", "006480", "006481", "006482", "006484", "006485", "006487", "006488", "006501", "006514", "006516", "006520", "006528", "006531", "006532", "006536", "006540", "006543", "006547", "006552", "006553", "006554", "006556", "006562", "006563", "006567", "006569", "006570", "006572", "006573", "006576", "006577", "006581", "006582", "006584", "006587", "006588", "006594", "006596", "006597", "006599", "006618", "006627", "006631", "006632", "006638", "006651", "006658", "006659", "006660", "006663", "006664", "006667", "006668", "006669", "006671", "006676", "006679", "006680", "006682", "006683", "006687", "006688", "006689", "006690", "006692", "006693", "006695", "006696", "006697", "006702", "006703", "006707", "006708", "006709", "006722", "006746", "006752", "006759", "006763", "006765", "006772", "006775", "006777", "006779", "006780", "006787", "006789", "006790", "006792", "006797", "006799", "006800", "006802", "006803", "006804", "006805", "006806", "006807", "006808", "006809", "006811", "006812", "006813", "006814", "006815", "006816", "006818", "006819", "006839", "006840", "006851", "006853", "006861", "006867", "006874", "006875", "006880", "006882", "006892", "006894", "006895", "006896", "006897", "006898", "006899", "006901", "006903", "006904", "006905", "006906", "006907", "006913", "006915", "006917", "006918", "006921", "006923", "006925", "006929", "006954", "006963", "006964", "006970", "006981", "006984", "006985", "006990", "006992", "006995", "006996", "007000", "007001", "007006", "007007", "007008", "007013", "007014", "007015", "007016", "007017", "007020", "007021", "007022", "007023", "007025", "007027", "007029", "007032", "007033", "007034", "007035", "007036", "007039", "007060", "007063", "007075", "007077", "007082", "007087", "007094", "007096", "007099", "007100", "007101", "007105", "007111", "007113", "007116", "007118", "007122", "007125", "007126", "007127", "007131", "007133", "007134", "007138", "007141", "007144", "007145", "007146", "007166", "007170", "007183", "007189", "007191", "007192", "007195", "007201", "007202", "007203", "007207", "007208", "007210", "007214", "007215", "007218", "007219", "007220", "007223", "007224", "007228", "007230", "007231", "007232", "007236", "007237", "007238", "007239", "007241", "007243", "007245", "007247", "007251", "007253", "007254", "007256", "007258", "007259", "007280", "007287", "007290", "007293", "007306", "007307", "007308", "007312", "007313", "007315", "007318", "007319", "007320", "007324", "007326", "007329", "007330", "007332", "007333", "007338", "007341", "007344", "007345", "007346", "007354", "007356", "007358", "007359", "007362", "007365", "007369", "007387", "007390", "007396", "007409", "007410", "007413", "007418", "007420", "007425", "007426", "007429", "007432", "007433", "007434", "007435", "007437", "007442", "007443", "007444", "007447", "007448", "007451", "007452", "007458", "007461", "007463", "007465", "007468", "007471", "007473", "007475", "007476", "007479", "007493", "007502", "007508", "007510", "007521", "007528", "007530", "007531", "007534", "007538", "007539", "007540", "007541", "007543", "007544", "007546", "007547", "007550", "007552", "007553", "007556", "007557", "007558", "007559", "007560", "007562", "007565", "007571", "007572", "007574", "007575", "007577", "007580", "007582", "007583", "007585", "007588", "007613", "007621", "007622", "007628", "007631", "007634", "007640", "007648", "007649", "007655", "007657", "007659", "007660", "007665", "007669", "007670", "007671", "007677", "007684", "007686", "007687", "007688", "007692", "007693", "007695", "007698", "007699", "007714", "007722", "007734", "007735", "007740", "007743", "007747", "007754", "007756", "007757", "007766", "007767", "007768", "007769", "007770", "007774", "007776", "007779", "007780", "007786", "007787", "007788", "007792", "007793", "007794", "007799", "007800", "007801", "007804", "007808", "007830", "007841", "007847", "007848", "007851", "007854", "007860", "007864", "007866", "007868", "007873", "007874", "007883", "007885", "007887", "007889", "007890", "007891", "007892", "007896", "007898", "007899", "007900", "007901", "007903", "007904", "007907", "007909", "007910", "007911", "007914", "007915", "007916", "007919", "007938", "007942", "007949", "007962", "007969", "007971", "007973", "007981", "007984", "007986", "007991", "007996", "007997", "007998", "008000", "008001", "008002", "008004", "008005", "008007", "008009", "008011", "008014", "008016", "008019", "008023", "008024", "008027", "008028", "008050", "008061", "008075", "008076", "008077", "008079", "008083", "008087", "008088", "008097", "008098", "008100", "008101", "008102", "008106", "008112", "008117", "008118", "008120", "008122", "008123", "008124", "008125", "008126", "008127", "008128", "008129", "008130", "008131", "008134", "008166", "008174", "008176", "008182", "008183", "008188", "008192", "008200", "008201", "008204", "008206", "008207", "008208", "008211", "008215", "008216", "008219", "008220", "008223", "008226", "008228", "008229", "008230", "008231", "008236", "008238", "008240", "008241", "008243", "008245", "008246", "008247", "008269", "008275", "008284", "008287", "008288", "008290", "008292", "008293", "008304", "008305", "008314", "008319", "008320", "008322", "008324", "008326", "008329", "008333", "008334", "008336", "008339", "008345", "008347", "008348", "008349", "008350", "008352", "008354", "008355", "008356", "008357", "008358", "008359", "008381", "008395", "008396", "008404", "008408", "008415", "008417", "008421", "008422", "008424", "008427", "008429", "008430", "008431", "008432", "008433", "008437", "008438", "008439", "008441", "008442", "008447", "008449", "008452", "008454", "008458", "008459", "008461", "008462", "008466", "008468", "008469", "008486", "008491", "008496", "008500", "008503", "008507", "008514", "008520", "008537", "008538", "008543", "008544", "008546", "008547", "008552", "008554", "008556", "008557", "008559", "008561", "008562", "008564", "008567", "008568", "008569", "008570", "008571", "008572", "008573", "008574", "008578", "008579", "008607", "008617", "008621", "008626", "008634", "008642", "008643", "008644", "008648", "008652", "008653", "008655", "008656", "008658", "008664", "008665", "008667", "008668", "008669", "008672", "008674", "008675", "008676", "008677", "008678", "008680", "008681", "008683", "008684", "008702", "008713", "008716", "008732", "008738", "008740", "008741", "008745", "008750", "008751", "008752", "008753", "008755", "008759", "008761", "008763", "008764", "008767", "008769", "008771", "008772", "008774", "008779", "008787", "008790", "008792", "008793", "008795", "008796", "008797", "008798", "008834", "008843", "008848", "008849", "008854", "008856", "008857", "008860", "008862", "008863", "008865", "008868", "008869", "008870", "008875", "008876", "008877", "008880", "008881", "008882", "008884", "008891", "008894", "008896", "008898", "008902", "008904", "008909", "008926", "008930", "008935", "008944", "008946", "008949", "008959", "008961", "008965", "008968", "008969", "008974", "008978", "008979", "008980", "008983", "008985", "008986", "008988", "008991", "008992", "008997", "008998", "009000", "009001", "009002", "009003", "009004", "009006", "009009", "009012", "009013", "009014", "009015", "009016", "009017", "009040", "009043", "009050", "009052", "009058", "009062", "009065", "009068", "009070", "009077", "009078", "009081", "009084", "009085", "009086", "009090", "009094", "009096", "009100", "009101", "009105", "009106", "009108", "009110", "009112", "009115", "009116", "009117", "009119", "009120", "009122", "009126", "009152", "009160", "009169", "009171", "009174", "009183", "009184", "009188", "009191", "009193", "009194", "009195", "009200", "009203", "009205", "009208", "009209", "009210", "009213", "009214", "009216", "009217", "009220", "009221", "009222", "009225", "009229", "009230", "009233", "009236", "009237", "009238", "009257", "009269", "009273", "009275", "009278", "009281", "009294", "009295", "009297", "009298", "009301", "009302", "009304", "009306", "009307", "009309", "009310", "009312", "009315", "009318", "009322", "009323", "009324", "009325", "009328", "009329", "009333", "009334", "009338", "009341", "009342", "009344", "009346", "009347", "009348", "009349", "009361", "009373", "009377", "009385", "009391", "009397", "009400", "009401", "009402", "009404", "009411", "009412", "009415", "009419", "009421", "009422", "009424", "009428", "009432", "009434", "009435", "009436", "009438", "009440", "009442", "009445", "009447", "009452", "009454", "009456", "009458", "009459", "009485", "009488", "009496", "009497", "009503", "009511", "009515", "009516", "009519", "009520", "009522", "009527", "009533", "009535", "009536", "009538", "009539", "009545", "009546", "009549", "009551", "009553", "009555", "009557", "009558", "009559", "009560", "009561", "009563", "009564", "009565", "009566", "009567", "009587", "009592", "009600", "009606", "009607", "009619", "009620", "009621", "009629", "009632", "009635", "009639", "009640", "009641", "009646", "009647", "009649", "009652", "009653", "009654", "009659", "009661", "009662", "009665", "009668", "009669", "009670", "009673", "009675", "009676", "009677", "009694", "009700", "009702", "009713", "009714", "009719", "009722", "009724", "009725", "009732", "009734", "009735", "009740", "009741", "009743", "009744", "009745", "009746", "009750", "009753", "009758", "009760", "009761", "009762", "009764", "009767", "009769", "009770", "009773", "009775", "009779", "009780", "009785", "009787", "009789", "009819", "009824", "009830", "009833", "009836", "009842", "009843", "009847", "009848", "009853", "009854", "009855", "009856", "009860", "009865", "009866", "009869", "009871", "009872", "009876", "009879", "009882", "009885", "009886", "009887", "009888", "009891", "009892", "009893", "009894", "009895", "009896", "009897", "009922", "009930", "009943", "009944", "009945", "009954", "009956", "009957", "009959", "009965", "009968", "009969", "009971", "009974", "009976", "009978", "009981", "009986", "009987", "009990", "009991", "009992", "009995", "009997", "009998", "010001", "010002", "010003", "010007", "010008", "010011", "010012", "010014", "010018", "010024", "010025", "010031", "010039", "010046", "010047", "010050", "010051", "010052", "010054", "010055", "010058", "010061", "010062", "010063", "010070", "010073", "010078"]}

{"batch_split": {"train": ["0", "1", "2", "3", "4", "10", "11", "12", "13", "14", "20", "21", "22", "23", "24", "30", "31", "32", "33", "34", "40", "41", "42", "43", "44", "50", "51", "52", "53", "54", "55", "60", "61", "62", "63", "64", "70", "71", "72", "73", "74", "80", "81", "82", "83", "84", "90", "91", "92", "93", "94", "100", "101", "102", "103", "104", "110", "111", "112", "113", "114", "120", "121", "122"], "val": ["5", "6", "15", "16", "25", "26", "35", "36", "45", "46", "56", "65", "66", "75", "76", "85", "86", "95", "96", "105", "106", "115", "116"], "test": ["7", "8", "9", "17", "18", "19", "27", "28", "29", "37", "38", "39", "47", "48", "49", "57", "58", "59", "67", "68", "69", "77", "78", "79", "87", "88", "89", "97", "98", "99", "107", "108", "109", "117", "118", "119"], "test_A": ["7", "29", "39", "47", "79", "58", "87", "109", "119"]}, "vehicle_split": {"train": ["000000", "000001", "000002", "000003", "000004", "000005", "000006", "000007", "000008", "000009", "000010", "000011", "000012", "000013", "000014", "000015", "000016", "000017", "000018", "000019", "000020", "000021", "000022", "000023", "000024", "000025", "000026", "000027", "000028", "000029", "000030", "000031", "000032", "000033", "000034", "000035", "000036", "000037", "000038", "000039", "000040", "000041", "000042", "000043", "000044", "000045", "000046", "000047", "000048", "000049", "000050", "000051", "000052", "000053", "000054", "000055", "000056", "000057", "000058", "000059", "000060", "000061", "000062", "000063", "000064", "000065", "000066", "000067", "000068", "000069", "000070", "000071", "000072", "000073", "000074", "000075", "000076", "000077", "000078", "000079", "000080", "000081", "000082", "000083", "000084", "000085", "000086", "000087", "000088", "000089", "000090", "000091", "000092", "000093", "000094", "000095", "000096", "000097", "000098", "000099", "000100", "000101", "000102", "000103", "000104", "000105", "000106", "000107", "000108", "000109", "000110", "000111", "000112", "000113", "000114", "000115", "000116", "000117", "000118", "000119", "000120", "000121", "000122", "000123", "000124", "000125", "000126", "000127", "000128", "000129", "000130", "000131", "000132", "000133", "000134", "000135", "000136", "000137", "000138", "000139", "000140", "000141", "000142", "000143", "000144", "000145", "000146", "000147", "000148", "000149", "000150", "000151", "000152", "000153", "000154", "000155", "000156", "000157", "000158", "000159", "000160", "000161", "000162", "000163", "000164", "000165", "000166", "000167", "000168", "000169", "000170", "000171", "000172", "000173", "000174", "000175", "000176", "000177", "000178", "000179", "000180", "000181", "000182", "000183", "000184", "000185", "000186", "000187", "000188", "000189", "000190", "000191", "000192", "000193", "000194", "000195", "000196", "000197", "000198", "000199", "000200", "000201", "000202", "000203", "000204", "000205", "000206", "000207", "000208", "000209", "000210", "000211", "000212", "000213", "000214", "000215", "000216", "000217", "000218", "000219", "000220", "000221", "000222", "000223", "000224", "000225", "000226", "000227", "000228", "000229", "000230", "000231", "000232", "000233", "000234", "000235", "000236", "000237", "000238", "000239", "000240", "000241", "000242", "000243", "000244", "000245", "000246", "000247", "000248", "000249", "000250", "000251", "000252", "000253", "000254", "000255", "000256", "000257", "000258", "000259", "000260", "000261", "000262", "000263", "000264", "000265", "000266", "000267", "000268", "000269", "000270", "000271", "000272", "000273", "000274", "000275", "000276", "000277", "000278", "000279", "000280", "000281", "000282", "000283", "000284", "000285", "000286", "000287", "000288", "000289", "000290", "000291", "000292", "000293", "000294", "000295", "000296", "000297", "000298", "000299", "000300", "000301", "000302", "000303", "000304", "000305", "000306", "000307", "000308", "000309", "000310", "000311", "000312", "000313", "000314", "000315", "000316", "000317", "000318", "000319", "000320", "000321", "000322", "000323", "000324", "000325", "000326", "000327", "000328", "000329", "000330", "000331", "000332", "000333", "000334", "000335", "000336", "000337", "000338", "000339", "000340", "000341", "000342", "000343", "000344", "000345", "000346", "000347", "000348", "000349", "000350", "000351", "000352", "000353", "000354", "000355", "000356", "000357", "000358", "000359", "000360", "000361", "000362", "000363", "000364", "000365", "000366", "000367", "000368", "000369", "000370", "000371", "000372", "000373", "000374", "000375", "000376", "000377", "000378", "000379", "000380", "000381", "000382", "000383", "000384", "000385", "000386", "000387", "000388", "000389", "000390", "000391", "000392", "000393", "000394", "000395", "000396", "000397", "000398", "000399", "000400", "000401", "000402", "000403", "000404", "000405", "000406", "000407", "000408", "000409", "000410", "000411", "000412", "000413", "000414", "000415", "000416", "000417", "000418", "000419", "000420", "000421", "000422", "000423", "000424", "000425", "000426", "000427", "000428", "000429", "000430", "000431", "000432", "000433", "000434", "000435", "000436", "000437", "000438", "000439", "000440", "000441", "000442", "000443", "000444", "000445", "000446", "000447", "000448", "000449", "000450", "000451", "000452", "000453", "000454", "000455", "000456", "000457", "000458", "000459", "000460", "000461", "000462", "000463", "000464", "000465", "000466", "000467", "000468", "000469", "000470", "000471", "000472", "000473", "000474", "000475", "000476", "000477", "000478", "000479", "000480", "000481", "000482", "000483", "000484", "000485", "000486", "000487", "000488", "000489", "000490", "000491", "000492", "000493", "000494", "000495", "000496", "000497", "000498", "000499", "000500", "000501", "000502", "000503", "000504", "000505", "000506", "000507", "000508", "000509", "000510", "000511", "000512", "000513", "000514", "000515", "000516", "000517", "000518", "000519", "000520", "000521", "000522", "000523", "000524", "000525", "000526", "000527", "000528", "000529", "000530", "000531", "000532", "000533", "000534", "000535", "000536", "000537", "000538", "000539", "000540", "000541", "000542", "000543", "000544", "000545", "000546", "000547", "000548", "000549", "000550", "000551", "000552", "000553", "000554", "000555", "000556", "000557", "000558", "000559", "000560", "000561", "000562", "000563", "000564", "000565", "000566", "000567", "000568", "000569", "000570", "000571", "000572", "000573", "000574", "000575", "000576", "000577", "000578", "000579", "000580", "000581", "000582", "000583", "000584", "000585", "000586", "000587", "000588", "000589", "000590", "000591", "000592", "000593", "000594", "000595", "000596", "000597", "000598", "000599", "000600", "000601", "000602", "000603", "000604", "000605", "000606", "000607", "000608", "000609", "000610", "000611", "000612", "000613", "000614", "000615", "000616", "000617", "000618", "000619", "000620", "000621", "000622", "000623", "000624", "000625", "000626", "000627", "000628", "000629", "000630", "000631", "000632", "000633", "000634", "000635", "000636", "000637", "000638", "000639", "000640", "000641", "000642", "000643", "000644", "000645", "000646", "000647", "000648", "000649", "000650", "000651", "000652", "000653", "000654", "000655", "000656", "000657", "000658", "000659", "000660", "000661", "000662", "000663", "000664", "000665", "000666", "000667", "000668", "000669", "000670", "000671", "000672", "000673", "000674", "000675", "000676", "000677", "000678", "000679", "000680", "000681", "000682", "000683", "000684", "000685", "000686", "000687", "000688", "000689", "000690", "000691", "000692", "000693", "000694", "000695", "000696", "000697", "000698", "000699", "000700", "000701", "000702", "000703", "000704", "000705", "000706", "000707", "000708", "000709", "000710", "000711", "000712", "000713", "000714", "000715", "000716", "000717", "000718", "000719", "000720", "000721", "000722", "000723", "000724", "000725", "000726", "000727", "000728", "000729", "000730", "000731", "000732", "000733", "000734", "000735", "000736", "000737", "000738", "000739", "000740", "000741", "000742", "000743", "000744", "000745", "000746", "000747", "000748", "000749", "000750", "000751", "000752", "000753", "000754", "000755", "000756", "000757", "000758", "000759", "000760", "000761", "000762", "000763", "000764", "000765", "000766", "000767", "000768", "000769", "000770", "000771", "000772", "000773", "000774", "000775", "000776", "000777", "000778", "000779", "000780", "000781", "000782", "000783", "000784", "000785", "000786", "000787", "000788", "000789", "000790", "000791", "000792", "000793", "000794", "000795", "000796", "000797", "000798", "000799", "000800", "000801", "000802", "000803", "000804", "000805", "000806", "000807", "000808", "000809", "000810", "000811", "000812", "000813", "000814", "000815", "000816", "000817", "000818", "000819", "000820", "000821", "000822", "000823", "000824", "000825", "000826", "000827", "000828", "000829", "000830", "000831", "000832", "000833", "000834", "000835", "000836", "000837", "000838", "000839", "000840", "000841", "000842", "000843", "000844", "000845", "000846", "000847", "000848", "000849", "000850", "000851", "000852", "000853", "000854", "000855", "000856", "000857", "000858", "000859", "000860", "000861", "000862", "000863", "000864", "000865", "000866", "000867", "000868", "000869", "000870", "001078", "001079", "001080", "001081", "001082", "001083", "001084", "001085", "001086", "001087", "001088", "001089", "001090", "001091", "001092", "001093", "001094", "001095", "001096", "001097", "001098", "001099", "001100", "001101", "001102", "001103", "001104", "001105", "001106", "001107", "001108", "001109", "001110", "001111", "001112", "001113", "001114", "001115", "001116", "001117", "001118", "001119", "001120", "001121", "001122", "001123", "001124", "001125", "001126", "001127", "001128", "001129", "001130", "001131", "001132", "001133", "001134", "001135", "001136", "001137", "001138", "001139", "001140", "001141", "001142", "001143", "001144", "001145", "001146", "001147", "001148", "001149", "001150", "001151", "001152", "001153", "001154", "001155", "001156", "001157", "001158", "001159", "001160", "001161", "001162", "001163", "001164", "001165", "001166", "001167", "001168", "001169", "001170", "001171", "001172", "001173", "001174", "001175", "001176", "001177", "001178", "001179", "001180", "001181", "001182", "001183", "001184", "001185", "001186", "001187", "001188", "001189", "001190", "001191", "001192", "001193", "001194", "001195", "001196", "001197", "001198", "001199", "001200", "001201", "001202", "001203", "001204", "001205", "001206", "001207", "001208", "001209", "001210", "001211", "001212", "001213", "001214", "001215", "001216", "001217", "001218", "001219", "001220", "001221", "001222", "001223", "001224", "001225", "001226", "001227", "001228", "001229", "001230", "001231", "001232", "001233", "001234", "001235", "001236", "001237", "001238", "001239", "001240", "001241", "001242", "001243", "001244", "001245", "001246", "001247", "001248", "001249", "001250", "001251", "001252", "001253", "001254", "001255", "001256", "001257", "001258", "001259", "001260", "001261", "001262", "001263", "001264", "001265", "001266", "001267", "001268", "001269", "001270", "001271", "001272", "001273", "001274", "001275", "001276", "001277", "001278", "001279", "001280", "001281", "001282", "001283", "001284", "001285", "001286", "001287", "001288", "001289", "001290", "001291", "001292", "001293", "001294", "001295", "001296", "001297", "001298", "001299", "001300", "001301", "001302", "001303", "001304", "001305", "001306", "001307", "001308", "001309", "001310", "001311", "001312", "001313", "001314", "001315", "001316", "001317", "001318", "001319", "001320", "001321", "001322", "001323", "001324", "001325", "001326", "001327", "001328", "001329", "001330", "001331", "001332", "001333", "001334", "001335", "001336", "001337", "001338", "001339", "001340", "001341", "001342", "001343", "001344", "001345", "001346", "001347", "001348", "001349", "001350", "001351", "001352", "001353", "001354", "001355", "001356", "001357", "001358", "001359", "001360", "001361", "001362", "001363", "001364", "001365", "001366", "001367", "001368", "001369", "001370", "001371", "001372", "001373", "001374", "001375", "001376", "001377", "001378", "001379", "001380", "001381", "001382", "001383", "001384", "001385", "001386", "001387", "001388", "001389", "001390", "001391", "001392", "001393", "001394", "001395", "001396", "001397", "001398", "001399", "001400", "001401", "001402", "001403", "001404", "001405", "001406", "001407", "001408", "001409", "001410", "001411", "001412", "001413", "001414", "001415", "001416", "001417", "001418", "001419", "001420", "001421", "001422", "001423", "001424", "001425", "001426", "001427", "001428", "001429", "001430", "001431", "001432", "001433", "001434", "001435", "001436", "001437", "001438", "001439", "001440", "001441", "001442", "001443", "001444", "001445", "001446", "001447", "001448", "001449", "001450", "001451", "001452", "001453", "001454", "001455", "001456", "001457", "001458", "001459", "001460", "001461", "001462", "001463", "001464", "001465", "001466", "001467", "001468", "001469", "001470", "001471", "001472", "001473", "001474", "001475", "001515", "001865", "001866", "001867", "001868", "001869", "001870", "001871", "001872", "001873", "001874", "001875", "001876", "001877", "001878", "001879", "001880", "001881", "001882", "001883", "001884", "001885", "001886", "001887", "001888", "001889", "001890", "001891", "001892", "001893", "001894", "001895", "001896", "001897", "001898", "001899", "001900", "001901", "001902", "001903", "001904", "001905", "001906", "001907", "001908", "001909", "001910", "001911", "001912", "001913", "001914", "001915", "001916", "001917", "001918", "001919", "001920", "001921", "001922", "001923", "001924", "001925", "001926", "001927", "001928", "001929", "001930", "001931", "001932", "001933", "001934", "001935", "001936", "001937", "001938", "001939", "001940", "001941", "001942", "001943", "001944", "001945", "001946", "001947", "001948", "001949", "001950", "001951", "001952", "001953", "001954", "001955", "001956", "001957", "001958", "001959", "001960", "001961", "001962", "001963", "001964", "001965", "001966", "001967", "001968", "001969", "001970", "001971", "001972", "001973", "001974", "001975", "001976", "001977", "001978", "001979", "001980", "001981", "001982", "001983", "001984", "001985", "001986", "001987", "001988", "001989", "001990", "001991", "001992", "001993", "001994", "001995", "001996", "001997", "001998", "001999", "002000", "002001", "002002", "002003", "002004", "002005", "002006", "002007", "002008", "002009", "002010", "002011", "002012", "002013", "002014", "002015", "002016", "002017", "002018", "002019", "002020", "002021", "002022", "002023", "002024", "002025", "002026", "002027", "002028", "002029", "002030", "002031", "002032", "002033", "002034", "002035", "002036", "002037", "002038", "002039", "002040", "002041", "002042", "002043", "002044", "002045", "002046", "002047", "002048", "002049", "002050", "002051", "002052", "002053", "002054", "002055", "002056", "002057", "002058", "002059", "002060", "002061", "002062", "002063", "002064", "002234", "002235", "002236", "002237", "002238", "002239", "002240", "002241", "002242", "002243", "002244", "002245", "002246", "002247", "002248", "002249", "002250", "002251", "002252", "002253", "002254", "002255", "002256", "002257", "002258", "002259", "002260", "002261", "002262", "002263", "002264", "002265", "002266", "002267", "002268", "002269", "002270", "002271", "002272", "002273", "002274", "002275", "002276", "002277", "002278", "002279", "002280", "002281", "002282", "002283", "002284", "002285", "002286", "002287", "002288", "002289", "002290", "002291", "002292", "002293", "002294", "002295", "002296", "002297", "002298", "002299", "002300", "002301", "002302", "002303", "002304", "002305", "002306", "002307", "002308", "002309", "002310", "002311", "002312", "002313", "002314", "002315", "002316", "002317", "002318", "002319", "002320", "002321", "002322", "002323", "002324", "002325", "002326", "002327", "002328", "002329", "002330", "002331", "002332", "002333", "002334", "002335", "002336", "002337", "002338", "002339", "002340", "002341", "002342", "002343", "002344", "002345", "002346", "002347", "002348", "002349", "002350", "002351", "002352", "002353", "002354", "002355", "002356", "002357", "002358", "002359", "002360", "002361", "002362", "002363", "002364", "002365", "002366", "002367", "002368", "002369", "002370", "002371", "002372", "002373", "002374", "002375", "002376", "002377", "002378", "002379", "002380", "002381", "002382", "002383", "002384", "002385", "002386", "002387", "002388", "002389", "002390", "002391", "002392", "002393", "002394", "002395", "002396", "002397", "002398", "002399", "002400", "002401", "002402", "002403", "002404", "002405", "002406", "002407", "002408", "002409", "002410", "002411", "002412", "002413", "002414", "002415", "002416", "002417", "002418", "002419", "002420", "002421", "002422", "002423", "002424", "002425", "002426", "002427", "002428", "002429", "002430", "002431", "002432", "002433", "002434", "002435", "002436", "002437", "002438", "002439", "002440", "002441", "002442", "002443", "002444", "002445", "002446", "002447", "002448", "002449", "002450", "002451", "002452", "002453", "002454", "002455", "002456", "002457", "002458", "002459", "002460", "002461", "002462", "002463", "002464", "002465", "002466", "002467", "002468", "002469", "002470", "002471", "002472", "002473", "002474", "002475", "002476", "002477", "002478", "002479", "002480", "002481", "002482", "002483", "002484", "002485", "002486", "002487", "002488", "002489", "002490", "002491", "002492", "002493", "002494", "002495", "002496", "002497", "002498", "002499", "002500", "002501", "002502", "002503", "002504", "002505", "002506", "002507", "002508", "002509", "002510", "002511", "002512", "002513", "002514", "002515", "002516", "002517", "002518", "002519", "002520", "002521", "002522", "002523", "002524", "002525", "002526", "002527", "002528", "002529", "002530", "002531", "002532", "002533", "002534", "002535", "002536", "002537", "002538", "002539", "002540", "002541", "002542", "002543", "002544", "002545", "002546", "002547", "002548", "002549", "002550", "002551", "002552", "002553", "002554", "002555", "002556", "002557", "002558", "002559", "002560", "002561", "002562", "002563", "002564", "002565", "002566", "002567", "002568", "002569", "002570", "002571", "003400", "003401", "003402", "003403", "003404", "003405", "003406", "003407", "003408", "003409", "003410", "003411", "003412", "003413", "003414", "003415", "003416", "003417", "003418", "003419", "003420", "003421", "003422", "003423", "003424", "003425", "003426", "003427", "003428", "003429", "003430", "003431", "003432", "003433", "003434", "003435", "003436", "003437", "003438", "003439", "003440", "003441", "003442", "003443", "003444", "003445", "003446", "003447", "003448", "003449", "003450", "003451", "003452", "003453", "003454", "003455", "003456", "003457", "003458", "003459", "003460", "003461", "003462", "003463", "003464", "003465", "003466", "003467", "003468", "003469", "003470", "003471", "003472", "003473", "003474", "003475", "003476", "003477", "003478", "003479", "003480", "003481", "003482", "003483", "003484", "003485", "003486", "003487", "003488", "003489", "003490", "003491", "003492", "003493", "003494", "003495", "003496", "003497", "003498", "003499", "003500", "003501", "003502", "003503", "003504", "003505", "003506", "003507", "003508", "003509", "003510", "003511", "003512", "003513", "003514", "003515", "003516", "003517", "003518", "003519", "003520", "003521", "003522", "003523", "003524", "003525", "003526", "003527", "003528", "003529", "003530", "003531", "003532", "003533", "003534", "003535", "003536", "003537", "003538", "003539", "003540", "003541", "003542", "003543", "003544", "003545", "003546", "003547", "003548", "003549", "003550", "003551", "003552", "003553", "003554", "003555", "003556", "003557", "003558", "003559", "003680", "003681", "003682", "003683", "003684", "003685", "003686", "003687", "003688", "003689", "003690", "003691", "003692", "003693", "003694", "003695", "003696", "003697", "003698", "003699", "003700", "003701", "003702", "003703", "003704", "003705", "003706", "003707", "003708", "003709", "003710", "003711", "003712", "003713", "003714", "003715", "003716", "003717", "003718", "003719", "003720", "003721", "003722", "003723", "003724", "003725", "003726", "003727", "003728", "003729", "003730", "003731", "003732", "003733", "003734", "003735", "003736", "003737", "003738", "003739", "003740", "003741", "003742", "003743", "003744", "003745", "003746", "003747", "003748", "003749", "003750", "003751", "003752", "003753", "003754", "003755", "003756", "003757", "003758", "003759", "003760", "003761", "003762", "003763", "003764", "003765", "003766", "003767", "003768", "003769", "003770", "003771", "003772", "003773", "003774", "003775", "003776", "003777", "003778", "003779", "003780", "003781", "003782", "003783", "003784", "003785", "003786", "003787", "003788", "003789", "003790", "003791", "003792", "003793", "003794", "003795", "003796", "003797", "003798", "003799", "003800", "003801", "003802", "003803", "003804", "003805", "003806", "003807", "003808", "003809", "003810", "003811", "003812", "003813", "003814", "003815", "003816", "003817", "003818", "003819", "003820", "003821", "003822", "003823", "003824", "003825", "003826", "003827", "003828", "003829", "004450", "004451", "004452", "004453", "004454", "004455", "004456", "004457", "004458", "004459", "004460", "004461", "004462", "004463", "004464", "004465", "004466", "004467", "004468", "004469", "004470", "004471", "004472", "004473", "004474", "004475", "004476", "004477", "004478", "004479", "004480", "004481", "004482", "004483", "004484", "004485", "004486", "004487", "004488", "004489", "004490", "004491", "004492", "004493", "004494", "004495", "004496", "004497", "004498", "004499", "004500", "004501", "004502", "004503", "004504", "004505", "004506", "004507", "004508", "004509", "004510", "004511", "004512", "004513", "004514", "004515", "004516", "004517", "004518", "004519", "004520", "004521", "004522", "004523", "004524", "004525", "004526", "004527", "004528", "004529", "004530", "004531", "004532", "004533", "004534", "004535", "004536", "004537", "004538", "004539", "004540", "004541", "004542", "004543", "004544", "004545", "004546", "004547", "004548", "004549", "004550", "004551", "004552", "004553", "004554", "004555", "004556", "004557", "004558", "004559", "004560", "004561", "004562", "004563", "004564", "004565", "004566", "004567", "004568", "004569", "004570", "004571", "004572", "004573", "004574", "004575", "004576", "004577", "004578", "004579", "004580", "004581", "004582", "004583", "004584", "004585", "004586", "004587", "004588", "004589", "004590", "004591", "004592", "004593", "004594", "004595", "004596", "004597", "004598", "004599", "004600", "004601", "004602", "004603", "004604", "004605", "004606", "004607", "004608", "004609", "004610", "004611", "004612", "004613", "004614", "004615", "004616", "004617", "004618", "004619", "004620", "004621", "004622", "004623", "004624", "004625", "004626", "004627", "004628", "004629", "004630", "004631", "004632", "004633", "004634", "004635", "004636", "004637", "004638", "004639", "004640", "004641", "004642", "004643", "004644", "004645", "004646", "004647", "004648", "004649", "004650", "004651", "004652", "004653", "004654", "004655", "004656", "004657", "004658", "004659", "004660", "004661", "004662", "004663", "004664", "004665", "004666", "004667", "004668", "004669", "004670", "004671", "004672", "004673", "004674", "004675", "004676", "004677", "004678", "004679", "004680", "004681", "004682", "004683", "004684", "004685", "004686", "004687", "004688", "004689", "004690", "004691", "004692", "004693", "004694", "004695", "004696", "004697", "004698", "004699", "004700", "004701", "004702", "004703", "004704", "004705", "004706", "004707", "004708", "004709", "004710", "004711", "004712", "004713", "004714", "004715", "004716", "004717", "004718", "004719", "004720", "004721", "004722", "004723", "004724", "004725", "004726", "004727", "004728", "004729", "004730", "004731", "004732", "004733", "004734", "004735", "004736", "004737", "004738", "004739", "004740", "004741", "004742", "004883", "004884", "004885", "004886", "004887", "004888", "004889", "004890", "004891", "004892", "004893", "004894", "004895", "004896", "004897", "004898", "004899", "004900", "004901", "004902", "004903", "004904", "004905", "004906", "004907", "004908", "004909", "004910", "004911", "004912", "004913", "004914", "004915", "004916", "004917", "004918", "004919", "004920", "004921", "004922", "004923", "004924", "004925", "004926", "004927", "004928", "004929", "004930", "004931", "004932", "004933", "004934", "004935", "004936", "004937", "004938", "004939", "004940", "004941", "004942", "004943", "004944", "004945", "004946", "004947", "004948", "004949", "004950", "004951", "004952", "004953", "004954", "004955", "004956", "004957", "004958", "004959", "004960", "004961", "004962", "004963", "004964", "004965", "004966", "004967", "004968", "004969", "004970", "004971", "004972", "004973", "004974", "004975", "004976", "004977", "004978", "004979", "004980", "004981", "004982", "004983", "004984", "004985", "004986", "004987", "004988", "004989", "004990", "004991", "004992", "004993", "004994", "004995", "004996", "004997", "004998", "004999", "005000", "005001", "005002", "005003", "005004", "005005", "005006", "005007", "005008", "005009", "005010", "005011", "005012", "005013", "005014", "005015", "005016", "005017", "005018", "005019", "005020", "005021", "005022", "005023", "005024", "005025", "005026", "005027", "005028", "005029", "005030", "005031", "005032", "005033", "005034", "005035", "005036", "005037", "005038", "005039", "005040", "005041", "005042", "005043", "005044", "005045", "005046", "005047", "005048", "005049", "005050", "005051", "005052", "005053", "005054", "005055", "005056", "005057", "005058", "005059", "005060", "005061", "005062", "005063", "005064", "005065", "005066", "005067", "005068", "005069", "005070", "005071", "005072", "005073", "005603", "005604", "005605", "005606", "005607", "005608", "005609", "005610", "005611", "005612", "005613", "005614", "005615", "005616", "005617", "005618", "005619", "005620", "005621", "005622", "005623", "005624", "005625", "005626", "005627", "005628", "005629", "005630", "005631", "005632", "005633", "005634", "005635", "005636", "005637", "005638", "005639", "005640", "005641", "005642", "005643", "005644", "005645", "005646", "005647", "005648", "005649", "005650", "005651", "005652", "005653", "005654", "005655", "005656", "005657", "005658", "005659", "005660", "005661", "005662", "005663", "005664", "005665", "005666", "005667", "005668", "005669", "005670", "005671", "005672", "005673", "005674", "005675", "005676", "005677", "005678", "005679", "005680", "005681", "005682", "005683", "005684", "005685", "005686", "005687", "005688", "005689", "005690", "005691", "005692", "005693", "005694", "005695", "005696", "005697", "005698", "005699", "005700", "005701", "005702", "005703", "005704", "005705", "005706", "005707", "005708", "005709", "005710", "005711", "005712", "005713", "005714", "005715", "005716", "005717", "005718", "005719", "005720", "005721", "005722", "005723", "005724", "005725", "005726", "005727", "005728", "005729", "005730", "005731", "005732", "005733", "005734", "005735", "005736", "005737", "005738", "005739", "005740", "005741", "005742", "005743", "005744", "005745", "005746", "005747", "005748", "005749", "005750", "005751", "005752", "005753", "005754", "005755", "005756", "005757", "005758", "005759", "005760", "005761", "005762", "005763", "005764", "005765", "005766", "005767", "005768", "005769", "005770", "005771", "005772", "005773", "005774", "005775", "005776", "005777", "005778", "005779", "005780", "005781", "005782", "005783", "005784", "005785", "005786", "005787", "005788", "005789", "005790", "005791", "005792", "005793", "005794", "005795", "005796", "005797", "005798", "005799", "005800", "005801", "005802", "005803", "005804", "005805", "005806", "005807", "005808", "005809", "005810", "005811", "005812", "005813", "005814", "005815", "005816", "005817", "005818", "005819", "005820", "005821", "005822", "005823", "005824", "005825", "005826", "005827", "005828", "005829", "005830", "005831", "005832", "005833", "005834", "005835", "005836", "005837", "005838", "005839", "005840", "005841", "005842", "005843", "005844", "005845", "005846", "005847", "005848", "005849", "005850", "005851", "005852", "005853", "005854", "005855", "005856", "005857", "005858", "005859", "005860", "005861", "005862", "005863", "005864", "005865", "005866", "005867", "005868", "005869", "005870", "005871", "005872", "005873", "005874", "005875", "005876", "005877", "005878", "005879", "005880", "005881", "005882", "005883", "005884", "005885", "005886", "005887", "005888", "005889", "005890", "005891", "005892", "005893", "005894", "005895", "005896", "005897", "005898", "005899", "005900", "005901", "005902", "005903", "005904", "005905", "005906", "005907", "005908", "005909", "005910", "005911", "005912", "005913", "005914", "005915", "005916", "005917", "005918", "005919", "005920", "005921", "005922", "005923", "005924", "005925", "005926", "005927", "005928", "005929", "005930", "005931", "005932", "006106", "006107", "006108", "006109", "006110", "006111", "006112", "006113", "006114", "006115", "006116", "006117", "006118", "006119", "006120", "006121", "006122", "006123", "006124", "006125", "006126", "006127", "006128", "006129", "006130", "006131", "006132", "006133", "006134", "006135", "006136", "006137", "006138", "006139", "006140", "006141", "006142", "006143", "006144", "006145", "006146", "006147", "006148", "006149", "006150", "006151", "006152", "006153", "006154", "006155", "006156", "006157", "006158", "006159", "006160", "006161", "006162", "006163", "006164", "006165", "006166", "006167", "006168", "006169", "006170", "006171", "006172", "006173", "006174", "006175", "006176", "006177", "006178", "006179", "006180", "006181", "006182", "006183", "006184", "006185", "006186", "006187", "006188", "006189", "006190", "006191", "006192", "006193", "006194", "006195", "006196", "006197", "006198", "006199", "006200", "006201", "006202", "006203", "006204", "006205", "006206", "006207", "006208", "006209", "006210", "006211", "006212", "006213", "006214", "006215", "006216", "006217", "006218", "006219", "006220", "006221", "006222", "006223", "006224", "006225", "006226", "006227", "006228", "006229", "006230", "006231", "006232", "006233", "006234", "006235", "006236", "006237", "006238", "006239", "006240", "006241", "006242", "006243", "006244", "006245", "006246", "006247", "006248", "006249", "006250", "006251", "006252", "006253", "006254", "006255", "006256", "006257", "006258", "006259", "006260", "006261", "006262", "006263", "006264", "006265", "006266", "006267", "006268", "006269", "006270", "006271", "006272", "006273", "006274", "006275", "006276", "006277", "006278", "006279", "006280", "006281", "006282", "006283", "006284", "006285", "006286", "006287", "006288", "006289", "006290", "006291", "006292", "006293", "006294", "006295", "006296", "006297", "006298", "006299", "006300", "006301", "006302", "006303", "006304", "006305", "006306", "006307", "006308", "006309", "006310", "006311", "006312", "006313", "006314", "006315", "006316", "006317", "006318", "006319", "006320", "006321", "006322", "006323", "006324", "006325", "006326", "006327", "006328", "006329", "006330", "006331", "006332", "006333", "006334", "006335", "006336", "006337", "006338", "006339", "006340", "006341", "006342", "006343", "006344", "006345", "006346", "006347", "006348", "006349", "006350", "006351", "006352", "006353", "006354", "006355", "006356", "006357", "006358", "006359", "006360", "006361", "006362", "006363", "006364", "006365", "006366", "006367", "006368", "006369", "006370", "006371", "006372", "006373", "006374", "006375", "006376", "006377", "006378", "006379", "006380", "006381", "006382", "006383", "006384", "006385", "006386", "006387", "006388", "006389", "006390", "006391", "006392", "006393", "006394", "006395", "006396", "006397", "006398", "006399", "006400", "006401", "006402", "006403", "006404", "006405", "006406", "006407", "006408", "006409", "006410", "006411", "006412", "006413", "006414", "006415", "006416", "006417", "006418", "006419", "006420", "006421", "006422", "006423", "006424", "006425", "006426", "006427", "006428", "006429", "006430", "006431", "006432", "006433", "006434", "006435", "006436", "006437", "006438", "006439", "006440", "006441", "006442", "006443", "006444", "006445", "006446", "006447", "006448", "006449", "006450", "006451", "006452", "006453", "006454", "006455", "006456", "006457", "006458", "006459", "006460", "006461", "006462", "006463", "006464", "006465", "006466", "006467", "006468", "006469", "006470", "006471", "006472", "006473", "006474", "006475", "006476", "006477", "006478", "006479", "006480", "006481", "006482", "006483", "006484", "006485", "006486", "006487", "006488", "006489", "006490", "006491", "006492", "006493", "006494", "006495", "006496", "006497", "006498", "006499", "006500", "006501", "006502", "006503", "006504", "006505", "006506", "006507", "006508", "006509", "006510", "006511", "006512", "006513", "006514", "006515", "006516", "006517", "006518", "006519", "006520", "006521", "006522", "006523", "006524", "006525", "006526", "006527", "006528", "006529", "006530", "006531", "006532", "006533", "006534", "006535", "006536", "006537", "006538", "006539", "006540", "006541", "006542", "006543", "006544", "006545", "006546", "006547", "006548", "006549", "006550", "006551", "006552", "006553", "006554", "006555", "006556", "006557", "006558", "006559", "006560", "006561", "006562", "006563", "006564", "006565", "006566", "006567", "006568", "006569", "006570", "006571", "006572", "006573", "006574", "006575", "006576", "006577", "006578", "006579", "006580", "006581", "006582", "006583", "006584", "006585", "006586", "006587", "006588", "006589", "006590", "006591", "006592", "006593", "006594", "006595", "006596", "006597", "006598", "006599", "006600", "006601", "006602", "006603", "006604", "006605", "006606", "006607", "006608", "006609", "006610", "006611", "006612", "006613", "006614", "006615", "006616", "006617", "006618", "006619", "006620", "006621", "006622", "006623", "006624", "006625", "006626", "006627", "006628", "006629", "006630", "006631", "006632", "006633", "006634", "006635", "006636", "006637", "006638", "006639", "006640", "006641", "006642", "006643", "006644", "006645", "006646", "006647", "006648", "006649", "006650", "006651", "006652", "006653", "006654", "006655", "006656", "006657", "006658", "006659", "006660", "006661", "006662", "006663", "006664", "006665", "006666", "006667", "006668", "006669", "006670", "006671", "006672", "006673", "006674", "006675", "006676", "006677", "006678", "006679", "006680", "006681", "006682", "006683", "006684", "006685", "006686", "006687", "006688", "006689", "006690", "006691", "006692", "006693", "006694", "006695", "006696", "006697", "006698", "006699", "006700", "006701", "006702", "006703", "006704", "006705", "006706", "006707", "006708", "006709", "006710", "006711", "006712", "006713", "006714", "006715", "006716", "006717", "006718", "006719", "006720", "006721", "006722", "006723", "006724", "006725", "006726", "006727", "006728", "006729", "006730", "006731", "006732", "006733", "006734", "006735", "006736", "006737", "006738", "006739", "006740", "006741", "006742", "006743", "006744", "006745", "006746", "006747", "006748", "006749", "006750", "006751", "006752", "006753", "006754", "006755", "006756", "006757", "006758", "006759", "006760", "006761", "006762", "006763", "006764", "006765", "006766", "006767", "006768", "006769", "006770", "006771", "006772", "006773", "006774", "006775", "006776", "006777", "006778", "006779", "006780", "006781", "006782", "006783", "006784", "006785", "006786", "006787", "006788", "006789", "006790", "006791", "006792", "006793", "006794", "006795", "006796", "006797", "006798", "006799", "006800", "006801", "006802", "006803", "006804", "006805", "006806", "006807", "006808", "006809", "006810", "006811", "006812", "006813", "006814", "006815", "006816", "006817", "006818", "006819", "006820", "006821", "006822", "006823", "006824", "006825", "006826", "006827", "006828", "006829", "006830", "006831", "006832", "006833", "006834", "006835", "006836", "006837", "006838", "006839", "006840", "006841", "006842", "006843", "006844", "006845", "006846", "006847", "006848", "006849", "006850", "006851", "006852", "006853", "006854", "006855", "006856", "006857", "006858", "006859", "006860", "006861", "006862", "006863", "006864", "006865", "006866", "006867", "006868", "006869", "006870", "006871", "006872", "006873", "006874", "006875", "006876", "006877", "006878", "006879", "006880", "006881", "006882", "006883", "006884", "006885", "006886", "006887", "006888", "006889", "006890", "006891", "006892", "006893", "006894", "006895", "006896", "006897", "006898", "006899", "006900", "006901", "006902", "006903", "006904", "006905", "006906", "006907", "006908", "006909", "006910", "006911", "006912", "006913", "006914", "006915", "006916", "006917", "006918", "006919", "006920", "006921", "006922", "006923", "006924", "006925", "006926", "006927", "006928", "006929", "006930", "006931", "006932", "006933", "006934", "006935", "006936", "006937", "006938", "006939", "006940", "006941", "006942", "006943", "006944", "006945", "006946", "006947", "006948", "006949", "006950", "006951", "006952", "006953", "006954", "006955", "006956", "006957", "006958", "006959", "006960", "006961", "006962", "006963", "006964", "006965", "006966", "006967", "006968", "006969", "006970", "006971", "006972", "006973", "006974", "006975", "006976", "006977", "006978", "006979", "006980", "006981", "006982", "006983", "006984", "006985", "006986", "006987", "006988", "006989", "006990", "006991", "006992", "006993", "006994", "006995", "006996", "006997", "006998", "006999", "007000", "007001", "007002", "007003", "007004", "007005", "007445", "007446", "007447", "007448", "007449", "007450", "007451", "007452", "007453", "007454", "007455", "007456", "007457", "007458", "007459", "007460", "007461", "007462", "007463", "007464", "007465", "007466", "007467", "007468", "007469", "007470", "007471", "007472", "007473", "007474", "007475", "007476", "007477", "007478", "007479", "007480", "007481", "007482", "007483", "007484", "007485", "007486", "007487", "007488", "007489", "007490", "007491", "007492", "007493", "007494", "007495", "007496", "007497", "007498", "007499", "007500", "007501", "007502", "007503", "007504", "007505", "007506", "007507", "007508", "007509", "007510", "007511", "007512", "007513", "007514", "007515", "007516", "007517", "007518", "007519", "007520", "007521", "007522", "007523", "007524", "007525", "007526", "007527", "007528", "007529", "007530", "007531", "007532", "007533", "007534", "007535", "007536", "007537", "007538", "007539", "007540", "007541", "007542", "007543", "007544", "007545", "007546", "007547", "007548", "007549", "007550", "007551", "007552", "007553", "007554", "007555", "007556", "007557", "007558", "007559", "007560", "007561", "007562", "007563", "007564", "007565", "007566", "007567", "007568", "007569", "007570", "007571", "007572", "007573", "007574", "007575", "007576", "007577", "007578", "007579", "007580", "007581", "007582", "007583", "007584", "007585", "007586", "007587", "007588", "007589", "007590", "007591", "007592", "007593", "007594", "007595", "007596", "007597", "007598", "007599", "007600", "007601", "007602", "007603", "007604", "007605", "007606", "007607", "007608", "007609", "007610", "007611", "007612", "007613", "007614", "007615", "007616", "007617", "007618", "007619", "007620", "007621", "007622", "007623", "007624", "007625", "007626", "007627", "007628", "007629", "007630", "007631", "007632", "007633", "007634", "007635", "007636", "007637", "007638", "007639", "007640", "007641", "007642", "007643", "007644", "007645", "007646", "007647", "007648", "007649", "007650", "007651", "007652", "007653", "007654", "007655", "007656", "007657", "007658", "007659", "007660", "007661", "007662", "007663", "007664", "007665", "007666", "007667", "007668", "007669", "007670", "007671", "007672", "007673", "007674", "007675", "007676", "007677", "007678", "007679", "007680", "007681", "007682", "007683", "007684", "007685", "007686", "007687", "007688", "007689", "007690", "007691", "007692", "007693", "007694", "007695", "007696", "007697", "007698", "007699", "007700", "007701", "007702", "007703", "007704", "007705", "007706", "007707", "007708", "007709", "007710", "007711", "007712", "007713", "007714", "007715", "007716", "007717", "007718", "007719", "007720", "007721", "007722", "007723", "007724", "007725", "007726", "007727", "007728", "007729", "007730", "007731", "007732", "007733", "007734", "007735", "007736", "007737", "007738", "007739", "007740", "007741", "007742", "007743", "007744", "007745", "007746", "007747", "007748", "007749", "007750", "007751", "007752", "007753", "007754", "007755", "007756", "007757", "007758", "007759", "007760", "007761", "007762", "007763", "007764", "007765", "007766", "007767", "007768", "007769", "007770", "007771", "007772", "007773", "007774", "007775", "007776", "007777", "007778", "007779", "007780", "007781", "007782", "007783", "007784", "007785", "007786", "007787", "007788", "007789", "007790", "007791", "007792", "007793", "007794", "007795", "007796", "007797", "007798", "007799", "007800", "007801", "007802", "007803", "007804", "007805", "007806", "007807", "007808", "007809", "007810", "007811", "007812", "007813", "007814", "008665", "008666", "008667", "008668", "008669", "008670", "008671", "008672", "008673", "008674", "008675", "008676", "008677", "008678", "008679", "008680", "008681", "008682", "008683", "008684", "008685", "008686", "008687", "008688", "008689", "008690", "008691", "008692", "008693", "008694", "008695", "008696", "008697", "008698", "008699", "008700", "008701", "008702", "008703", "008704", "008705", "008706", "008707", "008708", "008709", "008710", "008711", "008712", "008713", "008714", "008715", "008716", "008717", "008718", "008719", "008720", "008721", "008722", "008723", "008724", "008725", "008726", "008727", "008728", "008729", "008730", "008731", "008732", "008733", "008734", "008735", "008736", "008737", "008738", "008739", "008740", "008741", "008742", "008743", "008744", "008745", "008746", "008747", "008748", "008749", "008750", "008751", "008752", "008753", "008754", "008755", "008756", "008757", "008758", "008759", "008760", "008761", "008762", "008763", "008764", "008765", "008766", "008767", "008768", "008769", "008770", "008771", "008772", "008773", "008774", "008775", "008776", "008777", "008778", "008779", "008780", "008781", "008782", "008783", "008784", "008785", "008786", "008787", "008788", "008789", "008790", "008791", "008792", "008793", "008794", "008795", "008796", "008797", "008798", "008799", "008800", "008801", "008802", "008803", "008804", "008805", "008806", "008807", "008808", "008809", "008810", "008811", "008812", "008813", "008814", "008815", "008816", "008817", "008818", "008819", "008820", "008821", "008822", "008823", "008824", "008825", "008826", "008827", "008828", "008829", "008830", "008831", "008832", "008833", "008834", "008835", "008836", "008837", "008838", "008839", "008840", "008841", "008842", "008843", "008844", "008845", "008846", "008847", "008848", "008849", "008850", "008851", "008852", "008853", "008854", "008855", "008856", "008857", "008858", "008859", "008860", "008861", "008862", "008863", "008864", "008865", "008866", "008867", "008868", "008869", "008870", "008871", "008872", "008873", "008874", "008875", "008876", "008877", "008878", "008879", "008880", "008881", "008882", "008883", "008884", "008885", "008886", "008887", "008888", "008889", "008890", "008891", "008892", "008893", "008894", "008895", "008896", "008897", "008898", "008899", "008900", "008901", "008902", "008903", "008904", "008905", "008906", "008907", "008908", "008909", "008910", "008911", "008912", "008913", "008914", "008915", "008916", "008917", "008918", "008919", "008920", "008921", "008922", "008923", "008924", "008925", "008926", "008927", "008928", "008929", "008930", "008931", "008932", "008933", "008934", "008935", "008936", "008937", "008938", "008939", "008940", "008941", "008942", "008943", "008944", "008945", "008946", "008947", "008948", "008949", "008950", "008951", "008952", "008953", "008954", "008955", "008956", "008957", "008958", "008959", "008960", "008961", "008962", "008963", "008964", "008965", "008966", "008967", "008968", "008969", "008970", "008971", "008972", "008973", "008974", "008975", "008976", "008977", "008978", "008979", "008980", "008981", "008982", "008983", "008984", "008985", "008986", "008987", "008988", "008989", "008990", "008991", "008992", "008993", "008994", "008995", "008996", "008997", "008998", "008999", "009000", "009001", "009002", "009003", "009004", "009005", "009006", "009007", "009008", "009009", "009010", "009011", "009012", "009013", "009014", "009015", "009016", "009017", "009018", "009019", "009020", "009021", "009022", "009023", "009024", "009025", "009026", "009027", "009028", "009029", "009030", "009031", "009032", "009033", "009034", "009035", "009036", "009037", "009038", "009039", "009040", "009041", "009042", "009043", "009044", "009045", "009046", "009047", "009048", "009049", "009050", "009051", "009052", "009053", "009054", "009055", "009056", "009057", "009058", "009059", "009060", "009061", "009062", "009063", "009064", "009065", "009066", "009067", "009068", "009069", "009070", "009071", "009072", "009073", "009074", "009075", "009076", "009077", "009078", "009079", "009080", "009081", "009082", "009083", "009084", "009085", "009086", "009087", "009088", "009089", "009090", "009091", "009092", "009093", "009094", "009095", "009096", "009097", "009098", "009099", "009100", "009101", "009102", "009103", "009104", "009105", "009106", "009107", "009108", "009109", "009110", "009111", "009112", "009113", "009114", "009115", "009116", "009117", "009118", "009119", "009120", "009121", "009122", "009123", "009124", "009125", "009126", "009127", "009128", "009129", "009130", "009131", "009132", "009133", "009134", "009135", "009136", "009137", "009138", "009139", "009140", "009141", "009142", "009143", "009144", "009145", "009146", "009147", "009148", "009149", "009150", "009151", "009152", "009153", "009154", "009155", "009156", "009157", "009158", "009159", "009160", "009161", "009162", "009163", "009164", "009165", "009166", "009167", "009168", "009169", "009170", "009171", "009172", "009173", "009174", "009175", "009176", "009177", "009178", "009179", "009180", "009181", "009182", "009183", "009184", "009185", "009186", "009187", "009188", "009189", "009190", "009191", "009192", "009193", "009194", "009195", "009196", "009197", "009198", "009199", "009200", "009201", "009202", "009203", "009204", "009205", "009206", "009207", "009208", "009209", "009210", "009211", "009212", "009213", "009214", "009215", "009216", "009217", "009218", "009219", "009220", "009221", "009222", "009223", "009224", "009225", "009226", "009227", "009228", "009229", "009230", "009231", "009232", "009233", "009234", "009235", "009236", "009237", "009238", "009239", "009240", "009241", "009242", "009243", "009244", "009245", "009246", "009247", "009248", "009249", "009250", "009251", "009252", "009253", "009254", "009255", "009256", "009257", "009258", "009259", "009260", "009261", "009262", "009263", "009264", "009265", "009266", "009267", "009268", "009269", "009270", "009271", "009272", "009273", "009274", "009275", "009276", "009277", "009278", "009279", "009280", "009281", "009282", "009283", "009284", "009285", "009286", "009287", "009288", "009289", "009290", "009291", "009292", "009293", "009294", "009295", "009296", "009297", "009298", "009299", "009300", "009301", "009302", "009303", "009304", "009305", "009306", "009307", "009308", "009309", "009310", "009311", "009312", "009313", "009314", "009315", "009316", "009317", "009318", "009319", "009320", "009321", "009322", "009323", "009324", "009325", "009326", "009327", "009328", "009329", "009330", "009331", "009332", "009333", "009334", "009335", "009336", "009337", "009338", "009339", "009340", "009341", "009342", "009343", "009344", "009345", "009346", "009347", "009348", "009349", "009350", "009351", "009352", "009353", "009354", "009355", "009356", "009357", "009358", "009359", "009360", "009361", "009362", "009363", "009364", "009365", "009366", "009367", "009368", "009369", "009370", "009371", "009372", "009373", "009374", "009375", "009376", "009377", "009378", "009379", "009380", "009381", "009382", "009383", "009384", "009385", "009386", "009387", "009388", "009389", "009390", "009391", "009392", "009393", "009394", "009395", "009396", "009397", "009398", "009399", "009400", "009401", "009402", "009403", "009404", "009405", "009406", "009407", "009408", "009409", "009410", "009411", "009412", "009413", "009414", "009415", "009416", "009417", "009418", "009419", "009420", "009421", "009422", "009423", "009424", "009425", "009426", "009427", "009428", "009429", "009430", "009431", "009432", "009433", "009434", "009435", "009436", "009437", "009438", "009439", "009440", "009441", "009442", "009443", "009444", "009445", "009446", "009447", "009448", "009449", "009450", "009451", "009452", "009453", "009454", "009455", "009456", "009457", "009458", "009459", "009460", "009461", "009462", "009463", "009464", "009465", "009466", "009467", "009468", "009469", "010010", "010011", "010012", "010013", "010014", "010015", "010016", "010017", "010018", "010019", "010020", "010021", "010022", "010023", "010024", "010025", "010026", "010027", "010028", "010029", "010030", "010031", "010032", "010033", "010034", "010035", "010036", "010037", "010038", "010039", "010040", "010041", "010042", "010043", "010044", "010045", "010046", "010047", "010048", "010049", "010050", "010051", "010052", "010053", "010054", "010055", "010056", "010057", "010058", "010059", "010060", "010061", "010062", "010063", "010064", "010065", "010066", "010067", "010068", "010069", "010070", "010071", "010072", "010073", "010074", "010075", "010076", "010077", "010078", "010079", "010080", "010081", "010082", "010083", "010084", "010085", "010086", "010087", "010088", "010089", "010090", "010091", "010092", "010093", "010094", "010095", "010096", "010097", "010098", "010099", "010100", "010101", "010102", "010103", "010104", "010105", "010106", "010107", "010108", "010109", "010110", "010111", "010112", "010113", "010114", "010115", "010116", "010117", "010118", "010119", "010120", "010121", "010122", "010123", "010124", "010125", "010126", "010127", "010128", "010129", "010130", "010131", "010132", "010133", "010134", "010135", "010136", "010137", "010138", "010139", "010140", "010141", "010142", "010143", "010144", "010145", "010146", "010147", "010148", "010149", "010150", "010151", "010152", "010153", "010154", "010155", "010156", "010157", "010158", "010159", "010160", "010161", "010162", "010163", "010164", "010165", "010166", "010167", "010168", "010169", "010170", "010171", "010172", "010173", "010174", "010175", "010176", "010177", "010178", "010179", "010180", "010181", "010182", "010183", "010184", "010185", "010186", "010187", "010188", "010189", "010190", "010191", "010192", "010193", "010194", "010195", "010196", "010197", "010198", "010199", "010200", "010201", "010202", "010203", "010204", "010205", "010206", "010207", "010208", "010209", "010210", "010211", "010212", "010213", "010214", "010215", "010216", "010217", "010218", "010219", "010220", "010221", "010222", "010223", "010224", "010225", "010226", "010227", "010228", "010229", "010230", "010231", "010232", "010233", "010234", "010235", "010236", "010237", "010238", "010239", "010240", "010241", "010242", "010243", "010244", "010245", "010246", "010247", "010248", "010249", "010250", "010251", "010252", "010253", "010254", "010255", "010256", "010257", "010258", "010259", "010260", "010261", "010262", "010263", "010264", "010265", "010266", "010267", "010268", "010269", "010270", "010271", "010272", "010273", "010274", "010275", "010276", "010277", "010278", "010279", "010280", "010281", "010282", "010283", "010284", "010285", "010286", "010287", "010288", "010289", "010290", "010291", "010292", "010293", "010294", "010295", "010296", "010297", "010298", "010299", "010300", "010301", "010302", "010303", "010304", "010305", "010306", "010307", "010308", "010309", "010310", "010311", "010312", "010313", "010314", "010315", "010316", "010317", "010318", "010319", "010320", "010321", "010322", "010323", "010324", "010325", "010326", "010327", "010328", "010329", "010330", "010331", "010332", "010333", "010334", "010335", "010336", "010337", "010338", "010339", "010340", "010341", "010342", "010343", "010344", "010345", "010346", "010347", "010348", "010349", "010350", "010351", "010352", "010353", "010354", "010355", "010356", "010357", "010358", "010359", "010360", "010361", "010362", "010363", "010364", "010365", "010366", "010367", "010368", "010369", "010370", "010371", "010372", "010373", "010374", "010375", "010376", "010377", "010378", "010379", "010380", "010381", "010382", "010383", "010384", "010385", "010386", "010387", "010388", "010389", "010390", "010391", "010392", "010393", "010394", "010395", "010396", "010397", "010398", "010399", "010400", "010401", "010402", "010403", "010404", "010405", "010406", "010407", "010408", "010409", "010410", "010411", "010412", "010413", "010414", "010415", "010416", "010417", "010418", "010419", "010420", "010421", "010422", "010423", "010424", "010425", "010426", "010427", "010428", "010429", "010430", "010431", "010432", "010433", "010434", "010435", "010436", "010437", "010438", "010439", "010440", "010441", "010442", "010443", "010444", "010445", "010446", "010447", "010448", "010449", "010450", "010451", "010452", "010453", "010454", "010455", "010456", "010457", "010458", "010459", "010460", "010461", "010462", "010463", "010464", "010465", "010466", "010467", "010468", "010469", "010470", "010471", "010472", "010473", "010474", "010475", "010476", "010477", "010478", "010479", "010480", "010481", "010482", "010483", "010484", "010485", "010486", "010487", "010488", "010489", "010490", "010491", "010492", "010493", "010494", "010495", "010496", "010497", "010498", "010499", "010500", "010501", "010502", "010503", "010504", "010505", "010506", "010507", "010508", "010509", "010510", "010511", "010512", "010513", "010514", "010515", "010516", "010517", "010518", "010519", "010520", "010521", "010522", "010523", "010524", "010525", "010526", "010527", "010528", "010529", "010530", "010531", "010532", "010533", "010534", "010535", "010536", "010537", "010538", "010539", "010540", "010541", "010542", "010543", "010544", "010545", "010546", "010547", "010548", "010549", "010550", "010551", "010552", "010553", "010554", "010555", "010556", "010557", "010558", "010559", "010560", "010561", "010562", "010563", "010564", "010565", "010566", "010567", "010568", "010569", "010570", "010571", "010572", "010573", "010574", "010575", "010576", "010577", "010578", "010579", "010580", "010581", "010582", "010583", "010584", "010585", "010586", "010587", "010588", "010589", "010590", "010591", "010592", "010593", "010594", "010595", "010596", "010597", "010598", "010599", "010600", "010601", "010602", "010603", "010604", "010605", "010606", "010607", "010608", "010609", "010610", "010611", "010612", "010613", "010614", "010615", "010616", "010617", "010618", "010619", "010620", "010621", "010622", "010623", "010624", "010625", "010626", "010627", "010628", "010629", "010630", "010631", "010632", "010633", "010634", "010635", "010636", "010637", "010638", "010639", "010640", "010641", "010642", "010643", "010644", "010645", "010646", "010647", "010648", "010649", "010650", "010651", "010652", "010653", "010654", "010655", "010656", "010657", "010658", "010659", "010660", "010661", "010662", "010663", "010664", "010665", "010666", "010667", "010668", "010669", "010670", "010671", "010672", "010673", "010674", "010675", "010676", "010677", "010678", "010679", "010680", "010681", "010682", "010683", "010684", "010685", "010686", "010687", "010688", "010689", "010690", "010691", "010692", "010693", "010694", "010695", "010696", "010697", "010698", "010699", "010700", "010701", "010702", "010703", "010704", "010705", "010706", "010707", "010708", "010709", "010710", "010711", "010712", "010713", "010714", "010715", "010716", "010717", "010718", "010719", "010720", "010721", "010722", "010723", "010724", "010725", "010726", "010727", "010728", "010729", "010730", "010731", "010732", "010733", "010734", "010735", "010736", "010737", "010738", "010739", "010740", "010741", "010742", "010743", "010744", "010745", "010746", "010747", "010748", "010749", "010750", "010751", "010752", "010753", "010754", "010755", "010756", "010757", "010758", "010759", "010760", "010761", "010762", "010763", "010764", "010765", "010766", "010767", "010768", "010769", "010770", "010771", "010772", "010773", "010774", "010775", "010776", "010777", "010778", "010779", "010780", "010781", "010782", "010783", "010784", "010785", "010786", "010787", "010788", "010789", "010790", "010791", "010792", "010793", "010794", "010795", "010796", "010797", "010798", "010799", "011260", "011261", "011262", "011263", "011264", "011265", "011266", "011267", "011268", "011269", "011270", "011271", "011272", "011273", "011274", "011275", "011276", "011277", "011278", "011279", "011280", "011281", "011282", "011283", "011284", "011285", "011286", "011287", "011288", "011289", "011290", "011291", "011292", "011293", "011294", "011295", "011296", "011297", "011298", "011299", "011300", "011301", "011302", "011303", "011304", "011305", "011306", "011307", "011308", "011309", "011310", "011311", "011312", "011313", "011314", "011315", "011316", "011317", "011318", "011319", "011320", "011321", "011322", "011323", "011324", "011325", "011326", "011327", "011328", "011329", "011330", "011331", "011332", "011333", "011334", "011335", "011336", "011337", "011338", "011339", "011340", "011341", "011342", "011343", "011344", "011345", "011346", "011347", "011348", "011349", "011350", "011351", "011352", "011353", "011354", "011355", "011356", "011357", "011358", "011359", "011360", "011361", "011362", "011363", "011364", "011365", "011366", "011367", "011368", "011369", "011370", "011371", "011372", "011373", "011374", "011375", "011376", "011377", "011378", "011379", "011380", "011381", "011382", "011383", "011384", "011385", "011386", "011387", "011388", "011389", "011390", "011391", "011392", "011393", "011394", "011395", "011396", "011397", "011398", "011399", "011400", "011401", "011402", "011403", "011404", "011405", "011406", "011407", "011408", "011409", "011410", "011411", "011412", "011413", "011414", "011415", "011416", "011417", "011418", "011419", "011420", "011421", "011422", "011423", "011424", "011425", "011426", "011427", "011428", "011429", "011430", "011431", "011432", "011433", "011434", "011435", "011436", "011437", "011438", "011439", "011440", "011441", "011442", "011443", "011444", "011445", "011446", "011447", "011448", "011449", "011450", "011451", "011452", "011453", "011454", "011455", "011456", "011457", "011458", "011459", "011460", "011461", "011462", "011463", "011464", "011465", "011466", "011467", "011468", "011469", "011470", "011471", "011472", "011473", "011474", "011475", "011476", "011477", "011478", "011479", "011580", "011581", "011582", "011583", "011584", "011585", "011586", "011587", "011588", "011589", "011590", "011591", "011592", "011593", "011594", "011595", "011596", "011597", "011598", "011599", "011600", "011601", "011602", "011603", "011604", "011605", "011606", "011607", "011608", "011609", "011610", "011611", "011612", "011613", "011614", "011615", "011616", "011617", "011618", "011619", "011620", "011621", "011622", "011623", "011624", "011625", "011626", "011627", "011628", "011629", "011630", "011631", "011632", "011633", "011634", "011635", "011636", "011637", "011638", "011639", "011640", "011641", "011642", "011643", "011644", "011645", "011646", "011647", "011648", "011649", "011650", "011651", "011652", "011653", "011654", "011655", "011656", "011657", "011658", "011659", "011660", "011661", "011662", "011663", "011664", "011665", "011666", "011667", "011668", "011669", "011670", "011671", "011672", "011673", "011674", "011675", "011676", "011677", "011678", "011679", "011680", "011681", "011682", "011683", "011684", "011685", "011686", "011687", "011688", "011689", "011690", "011691", "011692", "011693", "011694", "011695", "011696", "011697", "011698", "011699", "011700", "011701", "011702", "011703", "011704", "011705", "011706", "011707", "011708", "011709", "011710", "011711", "011712", "011713", "011714", "011715", "011716", "011717", "011718", "011719", "011720", "011721", "011722", "011723", "011724", "011725", "011726", "011727", "011728", "011729", "011730", "011731", "011732", "011733", "011734", "011735", "011736", "011737", "011738", "011739", "011740", "011741", "011742", "011743", "011744", "011745", "011746", "011747", "011748", "011749", "011750", "011751", "011752", "011753", "011754", "011755", "011756", "011757", "011758", "011759", "011760", "011761", "011762", "011763", "011764", "011765", "011766", "011767", "011768", "011769", "011960", "011961", "011962", "011963", "011964", "011965", "011966", "011967", "011968", "011969", "011970", "011971", "011972", "011973", "011974", "011975", "011976", "011977", "011978", "011979", "011980", "011981", "011982", "011983", "011984", "011985", "011986", "011987", "011988", "011989", "011990", "011991", "011992", "011993", "011994", "011995", "011996", "011997", "011998", "011999", "012000", "012001", "012002", "012003", "012004", "012005", "012006", "012007", "012008", "012009", "012010", "012011", "012012", "012013", "012014", "012015", "012016", "012017", "012018", "012019", "012020", "012021", "012022", "012023", "012024", "012025", "012026", "012027", "012028", "012029", "012030", "012031", "012032", "012033", "012034", "012035", "012036", "012037", "012038", "012039", "012040", "012041", "012042", "012043", "012044", "012045", "012046", "012047", "012048", "012049", "012050", "012410", "012411", "012412", "012413", "012414", "012415", "012416", "012417", "012418", "012419", "012420", "012421", "012422", "012423", "012424", "012425", "012426", "012427", "012428", "012429", "012430", "012431", "012432", "012433", "012434", "012435", "012436", "012437", "012438", "012439", "012440", "012441", "012442", "012443", "012444", "012445", "012446", "012447", "012448", "012449", "012450", "012451", "012452", "012453", "012454", "012455", "012456", "012457", "012458", "012459", "012460", "012461", "012462", "012463", "012464", "012465", "012466", "012467", "012468", "012469", "012470", "012471", "012472", "012473", "012474", "012475", "012476", "012477", "012478", "012479", "012480", "012481", "012482", "012483", "012484", "012485", "012486", "012487", "012488", "012489", "012490", "012491", "012492", "012493", "012494", "012495", "012496", "012497", "012498", "012499", "012500", "012501", "012502", "012503", "012504", "012505", "012506", "012507", "012508", "012509", "012510", "012511", "012512", "012513", "012514", "012515", "012516", "012517", "012518", "012519", "012520", "012521", "012522", "012523", "012524", "012525", "012526", "012527", "012528", "012529", "012530", "012531", "012532", "012533", "012534", "012535", "012536", "012537", "012538", "012539", "012540", "012541", "012542", "012543", "012544", "012545", "012546", "012547", "012548", "012549", "012550", "012551", "012552", "012553", "012554", "012555", "012556", "012557", "012558", "012559", "012560", "012561", "012562", "012563", "012564", "012565", "012566", "012567", "012568", "012569", "012570", "012571", "012572", "012573", "012574", "012575", "012576", "012577", "012578", "012579", "012580", "012581", "012582", "012583", "012584", "012585", "012586", "012587", "012588", "012589", "012590", "012591", "012592", "012593", "012594", "012595", "012596", "012597", "012598", "012599", "012600", "012601", "012602", "012603", "012604", "012605", "012606", "012607", "012608", "012609", "013038", "013039", "013040", "013041", "013042", "013043", "013044", "013045", "013046", "013047", "013048", "013049", "013050", "013051", "013052", "013053", "013054", "013055", "013056", "013057", "013058", "013059", "013060", "013061", "013062", "013063", "013064", "013065", "013066", "013067", "013068", "013069", "013070", "013071", "013072", "013073", "013074", "013075", "013076", "013077", "013078", "013079", "013080", "013081", "013082", "013083", "013084", "013085", "013086", "013087", "013088", "013089", "013090", "013091", "013092", "013093", "013094", "013095", "013096", "013097", "013098", "013099", "013100", "013101", "013102", "013103", "013104", "013105", "013106", "013107", "013108", "013109", "013110", "013111", "013112", "013113", "013114", "013115", "013116", "013117", "013118", "013119", "013120", "013121", "013122", "013123", "013124", "013125", "013126", "013127", "013128", "013129", "013130", "013131", "013132", "013133", "013134", "013135", "013136", "013137", "013138", "013139", "013140", "013141", "013142", "013143", "013144", "013145", "013146", "013147", "013148", "013149", "013150", "013151", "013152", "013153", "013154", "013155", "013156", "013157", "013158", "013159", "013160", "013161", "013162", "013163", "013164", "013165", "013166", "013167", "013168", "013169", "013170", "013171", "013172", "013173", "013174", "013175", "013176", "013177", "013178", "013179", "013180", "013181", "013182", "013183", "013184", "013185", "013186", "013187", "013188", "013189", "013190", "013191", "013192", "013193", "013194", "013195", "013196", "013197", "013198", "013199", "013200", "013201", "013202", "013203", "013204", "013205", "013206", "013207", "013508", "013509", "013510", "013511", "013512", "013513", "013514", "013515", "013516", "013517", "013518", "013519", "013520", "013521", "013522", "013523", "013524", "013525", "013526", "013527", "013528", "013529", "013530", "013531", "013532", "013533", "013534", "013535", "013536", "013537", "013538", "013539", "013540", "013541", "013542", "013543", "013544", "013545", "013546", "013547", "013548", "013549", "013550", "013551", "013552", "013553", "013554", "013555", "013556", "013557", "013558", "013559", "013560", "013561", "013562", "013563", "013564", "013565", "013566", "013567", "013568", "013569", "013570", "013571", "013572", "013573", "013574", "013575", "013576", "013577", "013578", "013579", "013580", "013581", "013582", "013583", "013584", "013585", "013586", "013587", "013588", "013589", "013590", "013591", "013592", "013593", "013594", "013595", "013596", "013597", "013598", "013599", "013600", "013601", "013602", "013603", "013604", "013605", "013606", "013607", "013608", "013609", "013610", "013611", "013612", "013613", "013614", "013615", "013616", "013617", "013618", "013619", "013620", "013621", "013622", "013623", "013624", "013625", "013626", "013627", "013628", "013629", "013630", "013631", "013632", "013633", "013634", "013635", "013636", "013637", "013638", "013639", "013640", "013641", "013642", "013643", "013644", "013645", "013646", "013647", "013648", "013649", "013650", "013651", "013652", "013653", "013654", "013655", "013656", "013657", "013658", "013659", "013660", "013661", "013662", "013663", "013664", "013665", "013666", "013667", "013668", "013669", "013670", "013671", "013672", "013673", "013674", "013675", "013676", "013677", "013678", "013679", "013680", "013681", "013682", "013683", "013684", "013685", "013686", "013687", "013688", "013689", "013690", "013691", "013692", "013693", "013694", "013695", "013696", "013697", "013698", "013699", "013700", "013701", "013702", "013703", "013704", "013705", "013706", "013707", "013708", "013709", "013710", "013711", "013712", "013713", "013714", "013715", "013716", "014047", "014048", "014049", "014050", "014051", "014052", "014053", "014054", "014055", "014056", "014057", "014058", "014059", "014060", "014061", "014062", "014063", "014064", "014065", "014066", "014067", "014068", "014069", "014070", "014071", "014072", "014073", "014074", "014075", "014076", "014077", "014078", "014079", "014080", "014081", "014082", "014083", "014084", "014085", "014086", "014087", "014088", "014089", "014090", "014091", "014092", "014093", "014094", "014095", "014096", "014097", "014098", "014099", "014100", "014101", "014102", "014103", "014104", "014105", "014106", "014107", "014108", "014109", "014110", "014111", "014112", "014113", "014114", "014115", "014116", "014117", "014118", "014119", "014120", "014121", "014122", "014123", "014124", "014125", "014126", "014127", "014128", "014129", "014130", "014131", "014132", "014133", "014134", "014135", "014136", "014137", "014138", "014139", "014140", "014141", "014142", "014143", "014144", "014145", "014146", "014147", "014148", "014149", "014150", "014151", "014152", "014153", "014154", "014155", "014156", "014157", "014158", "014159", "014160", "014161", "014162", "014163", "014164", "014165", "014166", "014167", "014168", "014169", "014170", "014171", "014172", "014173", "014174", "014175", "014176", "014177", "014178", "014179", "014180", "014181", "014182", "014183", "014184", "014185", "014186", "014187", "014188", "014189", "014190", "014191", "014192", "014193", "014194", "014195", "014196", "014197", "014198", "014199", "014200", "014201", "014202", "014203", "014204", "014205", "014206", "014445", "014446", "014447", "014448", "014449", "014450", "014451", "014452", "014453", "014454", "014455", "014456", "014457", "014458", "014459", "014460", "014461", "014462", "014463", "014464", "014465", "014466", "014467", "014468", "014469", "014470", "014471", "014472", "014473", "014474", "014475", "014476", "014477", "014478", "014479", "014480", "014481", "014482", "014483", "014484", "014665", "014666", "014667", "014668", "014669", "014670", "014671", "014672", "014673", "014674", "014675", "014676", "014677", "014678", "014679", "014680", "014681", "014682", "014683", "014684", "014685", "014686", "014687", "014688", "014689", "014690", "014691", "014692", "014693", "014694", "014695", "014696", "014697", "014698", "014699", "014700", "014701", "014702", "014703", "014704", "014705", "014706", "014707", "014708", "014709", "014710", "014711", "014712", "014713", "014714", "014715", "014716", "014717", "014718", "014719", "014720", "014721", "014722", "014723", "014724", "014725", "014726", "014727", "014728", "014729", "014730", "014731", "014732", "014733", "014734", "014735", "014736", "014737", "014738", "014739", "014740", "014741", "014742", "014743", "014744", "014745", "014746", "014747", "014748", "014749", "014750", "014751", "014752", "014753", "014754", "014755", "014756", "014757", "014758", "014759", "014760", "014761", "014762", "014763", "014764", "014765", "014766", "014767", "014768", "014769", "014770", "014771", "014772", "014773", "014774", "014775", "014776", "014777", "014778", "014779", "014780", "014781", "014782", "014783", "014784", "014785", "014786", "014787", "014788", "014789", "014790", "014791", "014792", "014793", "014794", "014795", "014796", "014797", "014798", "014799", "014800", "014801", "014802", "014803", "014804", "014805", "014806", "014807", "014808", "014809", "014810", "014811", "014812", "014813", "014814", "014815", "014816", "014817", "014818", "014819", "014820", "014821", "014822", "014823", "014824", "014825", "014826", "014827", "014828", "014829", "014830", "014831", "014832", "014833", "014834", "014835", "014836", "014837", "014838", "014839", "014840", "014841", "014842", "014843", "014844", "014845", "014846", "014847", "014848", "014849", "014850", "014851", "014852", "014853", "014854", "014855", "014856", "014857", "014858", "014859", "014860", "014861", "014862", "014863", "014864", "014865", "014866", "014867", "014868", "014869", "014870", "014871", "014872", "014873", "014874", "014875", "014876", "014877", "014878", "014879", "014880", "014881", "014882", "014883", "014884", "014885", "014886", "014887", "014888", "014889", "014890", "014891", "014892", "014893", "014894", "014895", "014896", "014897", "014898", "014899", "014900", "014901", "014902", "014903", "014904", "014905", "014906", "014907", "014908", "014909", "014910", "014911", "014912", "014913", "014914", "014915", "014916", "014917", "014918", "014919", "014920", "014921", "014922", "014923", "014924", "014925", "014926", "014927", "014928", "014929", "014930", "014931", "014932", "014933", "014934", "014935", "014936", "014937", "014938", "014939", "014940", "014941", "014942", "014943", "014944", "014945", "014946", "014947", "014948", "014949", "014950", "014951", "014952", "014953", "014954", "014955", "014956", "014957", "014958", "014959", "014960", "014961", "014962", "014963", "014964", "014965", "014966", "014967", "014968", "014969", "014970", "014971", "014972", "014973", "014974", "014975", "014976", "014977", "014978", "014979", "014980", "014981", "014982", "014983", "014984", "014985", "014986", "014987", "014988", "014989", "014990", "014991", "014992", "014993", "014994", "014995", "014996", "014997", "014998", "014999", "015000", "015001", "015002", "015003", "015004", "015005", "015006", "015007", "015008", "015009", "015010", "015011", "015012", "015013", "015014", "015015", "015016", "015017", "015018", "015019", "015020", "015021", "015022", "015023", "015024", "015025", "015026", "015027", "015028", "015029", "015030", "015031", "015032", "015033", "015034", "015035", "015036", "015037", "015038", "015039", "015040", "015041", "015042", "015043", "015044", "015045", "015046", "015047", "015048", "015049", "015050", "015051", "015052", "015053", "015054", "015055", "015056", "015057", "015058", "015059", "015060", "015061", "015062", "015063", "015064", "015065", "015066", "015067", "015068", "015069", "015070", "015071", "015072", "015073", "015074", "015075", "015076", "015077", "015078", "015079", "015080", "015081", "015082", "015083", "015084", "015085", "015086", "015087", "015088", "015089", "015090", "015091", "015092", "015093", "015094", "015095", "015096", "015097", "015098", "015099", "015100", "015101", "015102", "015103", "015104", "015105", "015106", "015107", "015108", "015109", "015110", "015111", "015112", "015113", "015114", "015115", "015116", "015117", "015118", "015119", "015120", "015121", "015122", "015123", "015124", "015125", "015126", "015127", "015128", "015129", "015130", "015131", "015132", "015133", "015134", "015135", "015136", "015137", "015138", "015139", "015140", "015141", "015142", "015143", "015144", "015145", "015146", "015147", "015148", "015149", "015150", "015151", "015152", "015153", "015154", "015155", "015156", "015157", "015158", "015159", "015160", "015161", "015162", "015163", "015164", "015165", "015166", "015167", "015168", "015169", "015170", "015171", "015172", "015173", "015174", "015175", "015176", "015177", "015178", "015179", "015180", "015181", "015182", "015183", "015184", "015185", "015186", "015187", "015188", "015189", "015190", "015191", "015192", "015193", "015194", "015195", "015196", "015197", "015198", "015199", "015200", "015201", "015202", "015203", "015204", "015205", "015206", "015207", "015208", "015209", "015210", "015211", "015212", "015213", "015214", "015215", "015216", "015217", "015218", "015219", "015220", "015221", "015222", "015223", "015224", "015225", "015226", "015227", "015228", "015229", "015230", "015231", "015232", "015233", "015234", "015235", "015236", "015237", "015238", "015239", "015240", "015241", "015242", "015243", "015244", "015245", "015246", "015247", "015248", "015249", "015250", "015251", "015252", "015253", "015254", "015255", "015256", "015257", "015258", "015259", "015260", "015261", "015262", "015263", "015264", "015265", "015266", "015267", "015268", "015269", "015270", "015271", "015272", "015273", "015274", "015275", "015276", "015277", "015278", "015279", "015280", "015281", "015282", "015283", "015284", "015285", "015286", "015287", "015288", "015289", "015290", "015291", "015292", "015293", "015294", "015295", "015296", "015297", "015298", "015299", "015300", "015301", "015302", "015303", "015304", "015305", "015306", "015307", "015308", "015309", "015310", "015311", "015312", "015313", "015314", "015315", "015316", "015317", "015318", "015319", "015320", "015321", "015322", "015323", "015324", "015325", "015326", "015327", "015328", "015329", "015330", "015331", "015332", "015333", "015334", "015335", "015336", "015337", "015338", "015339", "015340", "015341", "015342", "015343", "015344", "015345", "015346", "015347", "015348", "015349", "015350", "015351", "015352", "015353", "015354", "015355", "015356", "015357", "015358", "015359", "015360", "015361", "015362", "015363", "015364", "015365", "015366", "015367", "015368", "015369", "015370", "015371", "015372", "015373", "015374", "015375", "015376", "015377", "015378", "015379", "015380", "015381", "015382", "015383", "015384", "015385", "015386", "015387", "015388", "015389", "015390", "015391", "015392", "015393", "015394", "015395", "015396", "015397", "015398", "015399", "015400", "015401", "015402", "015403", "015404", "015405", "015406", "015407", "015408", "015409", "015410", "015411", "015412", "015413", "015414", "015415", "015416", "015417", "015418", "015419", "015420", "015421", "015422", "015423", "015424", "015425", "015426", "015427", "015428", "015429", "015430", "015431", "015432", "015433", "015434", "015435", "015436", "015437", "015438", "015439", "015440", "015441", "015442", "015443", "015444", "015445", "015446", "015447", "015448", "015449", "015450", "015451", "015452", "015453", "015454", "015455", "015456", "015457", "015458", "015459", "015460", "015461", "015462", "015463", "015464", "015465", "015466", "015467", "015468", "015469", "015470", "015471", "015472", "015473", "015474", "015475", "015476", "015477", "015478", "015479", "015480", "015481", "015482", "015483", "015484", "015485", "015486", "015487", "015488", "015489", "015490", "015491", "015492", "015493", "015494", "015495", "015496", "015497", "015498", "015499", "015500", "015501", "015502", "015503", "015504", "015505", "015506", "015507", "015508", "015509", "015510", "015511", "015512", "015513", "015514", "015515", "015516", "015517", "015518", "015519", "015520", "015521", "015522", "015523", "015524", "015525", "015526", "015527", "015528", "015529", "015530", "015531", "015532", "015533", "015534", "015535", "015536", "015537", "015538", "015539", "015540", "015541", "015542", "015543", "015544", "015545", "015546", "015547", "015548", "015549", "015550", "015551", "015552", "015553", "015554", "015555", "015556", "015557", "015558", "015559", "015560", "015561", "015562", "015563", "015564", "015565", "015566", "015567", "015568", "015569", "015570", "015571", "015572", "015573", "015574", "015575", "015576", "015577", "015578", "015579", "015580", "015581", "015582", "015583", "015584", "015585", "015586", "015587", "015588", "015589", "015590", "015591", "015592", "015593", "015594", "015595", "015596", "015597", "015598", "015599", "015600", "015601", "015602", "015603", "015604", "015605", "015606", "015607", "015608", "015609", "015610", "015611", "015612", "015613", "015614", "015615", "015616", "015617", "015618", "015619", "015620", "015621", "015622", "015623", "015624", "015625", "015626", "015627", "015628", "015629", "015630", "015631", "015632", "015633", "015634", "015635", "015636", "015637", "015638", "015639", "015640", "015641", "015642", "015643", "015644", "015645", "015646", "015647", "015648", "015649", "015650", "015651", "015652", "015653", "015654", "015655", "015656", "015657", "015658", "015659", "015660", "015661", "015662", "015663", "015664", "015665", "015666", "015667", "015668", "015669", "015670", "015671", "015672", "015673", "015674", "015675", "015676", "015677", "015678", "015679", "015680", "015681", "015682", "015683", "015684", "015685", "015686", "015687", "015688", "015689", "015690", "015691", "015692", "015693", "015694", "015695", "015696", "015697", "015698", "015699", "015700", "015701", "015702", "015703", "015704", "015835", "015836", "015837", "015838", "015839", "015840", "015841", "015842", "015843", "015844", "015845", "015846", "015847", "015848", "015849", "015850", "015851", "015852", "015853", "015854", "015855", "015856", "015857", "015858", "015859", "015860", "015861", "015862", "015863", "015864", "015865", "015866", "015867", "015868", "015869", "015870", "015871", "015872", "015873", "015874", "015875", "015876", "015877", "015878", "015879", "015880", "015881", "015882", "015883", "015884", "015885", "015886", "015887", "015888", "015889", "015890", "015891", "015892", "015893", "015894", "015895", "015896", "015897", "015898", "015899", "015900", "015901", "015902", "015903", "015904", "015905", "015906", "015907", "015908", "015909", "015910", "015911", "015912", "015913", "015914", "016060", "016061", "016062", "016063", "016064", "016065", "016066", "016067", "016068", "016069", "016070", "016071", "016072", "016073", "016074", "016075", "016076", "016077", "016078", "016079", "016080", "016081", "016082", "016083", "016084", "016085", "016086", "016087", "016088", "016089", "016090", "016091", "016092", "016093", "016094", "016095", "016096", "016097", "016098", "016099", "016100", "016101", "016102", "016103", "016104", "016105", "016106", "016107", "016108", "016109", "016110", "016111", "016112", "016113", "016114", "016115", "016116", "016117", "016118", "016119", "016120", "016121", "016122", "016123", "016124", "016125", "016126", "016127", "016128", "016129", "016130", "016131", "016132", "016133", "016134", "016135", "016136", "016137", "016138", "016139", "016140", "016141", "016142", "016143", "016144", "016145", "016146", "016147", "016148", "016149", "016150", "016151", "016152", "016153", "016154", "016155", "016156", "016157", "016158", "016159", "016160", "016161", "016162", "016163", "016164", "016165", "016166", "016167", "016168", "016169", "016170", "016171", "016172", "016173", "016174", "016175", "016176", "016177", "016178", "016179", "016180", "016181", "016182", "016183", "016184", "016185", "016186", "016187", "016188", "016189", "016190", "016191", "016192", "016193", "016194", "016195", "016196", "016197", "016198", "016199", "016200", "016201", "016202", "016203", "016204", "016205", "016206", "016207", "016208", "016209", "016210", "016211", "016212", "016213", "016214", "016215", "016216", "016217", "016218", "016219", "016220", "016221", "016222", "016223", "016224", "017575", "017576", "017577", "017578", "017579", "017580", "017581", "017582", "017583", "017584", "017585", "017586", "017587", "017588", "017589", "017590", "017591", "017592", "017593", "017594", "017595", "017596", "017597", "017598", "017599", "017600", "017601", "017602", "017603", "017604", "018055", "018056", "018057", "018058", "018059", "018060", "018061", "018062", "018063", "018064", "018065", "018066", "018067", "018068", "018069", "018070", "018071", "018072", "018073", "018074", "018075", "018076", "018077", "018078", "018079", "018080", "018081", "018082", "018083", "018084", "018085", "018086", "018087", "018088", "018089", "018090", "018091", "018092", "018093", "018094", "018415", "018416", "018417", "018418", "018419", "018420", "018421", "018422", "018423", "018424", "018425", "018426", "018427", "018428", "018429", "018430", "018431", "018432", "018433", "018434", "018435", "018436", "018437", "018438", "018439", "018440", "018441", "018442", "018443", "018444", "018445", "018446", "018447", "018448", "018449", "018450", "018451", "018452", "018453", "018454", "018455", "018456", "018457", "018458", "018459", "018460", "018461", "018462", "018463", "018464", "018465", "018466", "018467", "018468", "018469", "018470", "018471", "018472", "018473", "018474", "018475", "018476", "018477", "018478", "018479", "018480", "018481", "018482", "018483", "018484", "018485", "018486", "018487", "018488", "018489", "018490", "018491", "018492", "018493", "018494", "018495", "018496", "018497", "018498", "018499", "018500", "018501", "018502", "018503", "018504", "018505", "018506", "018507", "018508", "018509", "018510", "018511", "018512", "018513", "018514", "018515", "018516", "018517", "018518", "018519", "018520", "018521", "018522", "018523", "018524", "018645", "018646", "018647", "018648", "018649", "018650", "018651", "018652", "018653", "018654", "019515", "019516", "019517", "019518", "019519", "019520", "019521", "019522", "019523", "019524", "019525", "019526", "019527", "019528", "019529", "019530", "019531", "019532", "019533", "019534", "019535", "019536", "019537", "019538", "019539", "019540", "019541", "019542", "019543", "019544", "019545", "019546", "019547", "019548", "019549", "019550", "019551", "019552", "019553", "019554", "019555", "019556", "019557", "019558", "019559", "019560", "019561", "019562", "019563", "019564", "019565", "019566", "019567", "019568", "019569", "019570", "019571", "019572", "019573", "019574", "019575", "019576", "019577", "019578", "019579", "019580", "019581", "019582", "019583", "019584", "019585", "019586", "019587", "019588", "019589", "019590", "019591", "019592", "019593", "019594", "019595", "019596", "019597", "019598", "019599", "019600", "019601", "019602", "019603", "019604", "019605", "019606", "019607", "019608", "019609", "019610", "019611", "019612", "019613", "019614", "019615", "019616", "019617", "019618", "019619", "019620", "019621", "019622", "019623", "019624", "019625", "019626", "019627", "019628", "019629", "019630", "019631", "019632", "019633", "019634", "019635", "019636", "019637", "019638", "019639", "019640", "019641", "019642", "019643", "019644", "019645", "019646", "019647", "019648", "019649", "019650", "019651", "019652", "019653", "019654", "019655", "019656", "019657", "019658", "019659", "019660", "019661", "019662", "019663", "019664", "019665", "019666", "019667", "019668", "019669", "019670", "019671", "019672", "019673", "019674", "019675", "019676", "019677", "019678", "019679", "019680", "019681", "019682", "019683", "019684", "019685", "019686", "019687", "019688", "019689", "019690", "019691", "019692", "019693", "019694", "019695", "019696", "019697", "019698", "019699", "019700", "019701", "019702", "019703", "019704", "019705", "019706", "019707", "019708", "019709", "019710", "019711", "019712", "019713", "019714", "019715", "019716", "019717", "019718", "019719", "019720", "019721", "019722", "019723", "019724", "019725", "019726", "019727", "019728", "019729", "019730", "019731", "019732", "019733", "019734", "019735", "019736", "019737", "019738", "019739", "019740", "019741", "019742", "019743", "019744", "019745", "019746", "019747", "019748", "019749", "019750", "019751", "019752", "019753", "019754", "019755", "019756", "019757", "019758", "019759", "019760", "019761", "019762", "019763", "019764", "019995", "019996", "019997", "019998", "019999", "020000", "020001", "020002", "020003", "020004", "020005", "020006", "020007", "020008", "020009", "020010", "020011", "020012", "020013", "020014", "020015", "020016", "020017", "020018", "020019", "020020", "020021", "020022", "020023", "020024", "020025", "020026", "020027", "020028", "020029", "020030", "020031", "020032", "020033", "020034", "020035", "020036", "020037", "020038", "020039", "020040", "020041", "020042", "020043", "020044", "020045", "020046", "020047", "020048", "020049", "020050", "020051", "020052", "020053", "020054", "020055", "020056", "020057", "020058", "020059", "020060", "020061", "020062", "020063", "020064", "020065", "020066", "020067", "020068", "020069", "020070", "020071", "020072", "020073", "020074", "020075", "020076", "020077", "020078", "020079", "020080", "020081", "020082", "020083", "020084", "020085", "020086", "020087", "020088", "020089", "020090", "020091", "020092", "020093", "020094", "020095", "020096", "020097", "020098", "020099", "020100", "020101", "020102", "020103", "020104", "020105", "020106", "020107", "020108", "020109", "020110", "020111", "020112", "020113", "020114", "020115", "020116", "020117", "020118", "020119", "020120", "020121", "020122", "020123", "020124", "020125", "020126", "020127", "020128", "020129", "020130", "020131", "020132", "020133", "020134", "020135", "020136", "020137", "020138", "020139", "020140", "020141", "020142", "020143", "020144", "020145", "020146", "020147", "020148", "020149", "020150", "020151", "020152", "020153", "020154", "020155", "020156", "020157", "020158", "020159", "020160", "020161", "020162", "020163", "020164", "020165", "020166", "020167", "020168", "020169", "020170", "020171", "020172", "020173", "020174", "020175", "020176", "020177", "020178", "020179", "020180", "020181", "020182", "020183", "020184", "020185", "020186", "020187", "020188", "020189", "020190", "020191", "020192", "020193", "020194", "020195", "020196", "020197", "020198", "020199", "020200", "020201", "020202", "020203", "020204", "020205", "020206", "020207", "020208", "020209", "020210", "020211", "020212", "020213", "020214", "020215", "020216", "020217", "020218", "020219", "020220", "020221", "020222", "020223", "020224", "020225", "020226", "020227", "020228", "020229", "020230", "020231", "020232", "020233", "020234", "020235", "020236", "020237", "020238", "020239", "020240", "020241", "020242", "020243", "020244", "020245", "020246", "020247", "020248", "020249", "020250", "020251", "020252", "020253", "020254", "020255", "020256", "020257", "020258", "020259", "020260", "020261", "020262", "020263", "020264", "020265", "020266", "020267", "020268", "020269", "020270", "020271", "020272", "020273", "020274", "020275", "020276", "020277", "020278", "020279", "020280", "020281", "020282", "020283", "020284", "020285", "020286", "020287", "020288", "020289", "020290", "020291", "020292", "020293", "020294", "020295", "020296", "020297", "020298", "020299", "020300", "020301", "020302", "020303", "020304", "020305", "020306", "020307", "020308", "020309", "020310", "020311", "020312", "020313", "020314", "020315", "020316", "020317", "020318", "020319", "020320", "020321", "020322", "020323", "020324", "020325", "020326", "020327", "020328", "020329", "020330", "020331", "020332", "020333", "020334", "020335", "020336", "020337", "020338", "020339", "020340", "020341", "020342", "020343", "020344", "020345", "020346", "020347", "020348", "020349", "020350", "020351", "020352", "020353", "020354", "020355", "020356", "020357", "020358", "020359", "020360", "020361", "020362", "020363", "020364", "020365", "020366", "020367", "020368", "020369", "020370", "020371", "020372", "020373", "020374", "020375", "020376", "020377", "020378", "020379", "020380", "020381", "020382", "020383", "020384", "020385", "020386", "020387", "020388", "020389", "020390", "020391", "020392", "020393", "020394", "020395", "020396", "020397", "020398", "020399", "020400", "020401", "020402", "020403", "020404", "020405", "020406", "020407", "020408", "020409", "020410", "020411", "020412", "020413", "020414", "020415", "020416", "020417", "020418", "020419", "020420", "020421", "020422", "020423", "020424", "020425", "020426", "020427", "020428", "020429", "020430", "020431", "020432", "020433", "020434", "020435", "020436", "020437", "020438", "020439", "020440", "020441", "020442", "020443", "020444", "020445", "020446", "020447", "020448", "020449", "020450", "020451", "020452", "020453", "020454", "020455", "020456", "020457", "020458", "020459", "020460", "020461", "020462", "020463", "020464", "020465", "020466", "020467", "020468", "020469", "020470", "020471", "020472", "020473", "020474", "020475", "020476", "020477", "020478", "020479", "020480", "020481", "020482", "020483", "020484", "020485", "020486", "020487", "020488", "020489", "020490", "020491", "020492", "020493", "020494", "020495", "020496", "020497", "020498", "020499", "020500", "020501", "020502", "020503", "020504", "020505", "020506", "020507", "020508", "020509", "020510", "020511", "020512", "020513", "020514"], "val": ["000871", "000872", "000873", "000874", "000875", "000876", "000877", "000878", "000879", "000880", "000881", "000882", "000883", "000884", "000885", "000886", "000887", "000888", "000889", "000890", "000891", "000892", "000893", "000894", "000895", "000896", "000897", "000898", "000899", "000900", "000901", "000902", "000903", "000904", "000905", "000906", "000907", "000908", "000909", "000910", "000911", "000912", "000913", "000914", "000915", "000916", "000917", "000918", "000919", "000920", "000921", "000922", "000923", "000924", "000925", "000926", "000927", "000928", "000929", "000930", "000931", "000932", "000933", "000934", "000935", "000936", "000937", "000938", "000939", "000940", "000941", "000942", "000943", "000944", "000945", "000946", "000947", "000948", "000949", "000950", "000951", "000952", "000953", "000954", "000955", "000956", "000957", "000958", "000959", "000960", "000961", "000962", "000963", "000964", "000965", "000966", "000967", "000968", "000969", "000970", "000971", "000972", "000973", "000974", "000975", "000976", "000977", "000978", "000979", "000980", "000981", "000982", "000983", "000984", "000985", "000986", "000987", "000988", "000989", "000990", "000991", "000992", "000993", "000994", "000995", "000996", "000997", "000998", "000999", "001000", "001001", "001002", "001003", "001004", "001005", "001006", "001007", "001008", "001009", "001010", "001011", "001012", "001013", "001014", "001015", "001016", "001017", "001018", "001019", "001020", "001021", "001022", "001023", "001024", "001025", "001026", "001027", "001028", "001029", "001030", "001031", "001032", "001033", "001034", "001035", "001036", "001037", "001038", "001039", "001040", "001041", "001042", "001043", "001044", "001045", "001046", "001047", "001048", "001049", "001050", "001051", "001052", "001053", "001054", "001055", "001056", "001057", "001058", "001059", "001060", "001061", "001062", "001063", "001064", "001065", "001066", "001067", "001068", "001069", "001070", "001071", "001072", "001073", "001074", "001075", "001076", "001077", "001715", "001716", "001717", "001718", "001719", "001720", "001721", "001722", "001723", "001724", "001725", "001726", "001727", "001728", "001729", "001730", "001731", "001732", "001733", "001734", "001735", "001736", "001737", "001738", "001739", "001740", "001741", "001742", "001743", "001744", "001745", "001746", "001747", "001748", "001749", "001750", "001751", "001752", "001753", "001754", "001755", "001756", "001757", "001758", "001759", "001760", "001761", "001762", "001763", "001764", "001765", "001766", "001767", "001768", "001769", "001770", "001771", "001772", "001773", "001774", "001775", "001776", "001777", "001778", "001779", "001780", "001781", "001782", "001783", "001784", "001785", "001786", "001787", "001788", "001789", "001790", "001791", "001792", "001793", "001794", "001795", "001796", "001797", "001798", "001799", "001800", "001801", "001802", "001803", "001804", "001805", "001806", "001807", "001808", "001809", "001810", "001811", "001812", "001813", "001814", "001815", "001816", "001817", "001818", "001819", "001820", "001821", "001822", "001823", "001824", "001825", "001826", "001827", "001828", "001829", "001830", "001831", "001832", "001833", "001834", "001835", "001836", "001837", "001838", "001839", "001840", "001841", "001842", "001843", "001844", "001845", "001846", "001847", "001848", "001849", "001850", "001851", "001852", "001853", "001854", "001855", "001856", "001857", "001858", "001859", "001860", "001861", "001862", "001863", "001864", "003057", "003058", "003059", "003060", "003061", "003062", "003063", "003064", "003065", "003066", "003067", "003068", "003069", "003070", "003071", "003072", "003073", "003074", "003075", "003076", "003077", "003078", "003079", "003080", "003081", "003082", "003083", "003084", "003085", "003086", "003087", "003088", "003089", "003090", "003091", "003092", "003093", "003094", "003095", "003096", "003097", "003098", "003099", "003100", "003101", "003102", "003103", "003104", "003105", "003106", "003107", "003108", "003109", "003110", "003111", "003112", "003113", "003114", "003115", "003116", "003117", "003118", "003119", "003120", "003121", "003122", "003123", "003124", "003125", "003126", "003127", "003128", "003129", "003130", "003131", "003132", "003133", "003134", "003135", "003136", "003137", "003138", "003139", "003140", "003141", "003142", "003143", "003144", "003145", "003146", "003147", "003148", "003149", "003150", "003151", "003152", "003153", "003154", "003155", "003156", "003157", "003158", "003159", "003160", "003161", "003162", "003163", "003164", "003165", "003166", "003167", "003168", "003169", "003170", "003171", "003172", "003173", "003174", "003175", "003176", "003177", "003178", "003179", "003180", "003181", "003182", "003183", "003184", "003185", "003186", "003187", "003188", "003189", "003190", "003191", "003192", "003193", "003194", "003195", "003196", "003197", "003198", "003199", "003200", "003201", "003202", "003203", "003204", "003205", "003206", "003207", "003208", "003209", "003210", "003211", "003212", "003213", "003214", "003215", "003216", "003217", "003218", "003219", "003220", "003221", "003222", "003223", "003224", "003225", "003226", "003227", "003228", "003229", "003230", "003231", "003232", "003233", "003234", "003235", "003236", "003237", "003238", "003239", "003240", "003241", "003242", "003243", "003244", "003245", "003246", "003247", "003248", "003249", "003250", "003251", "003252", "003253", "003254", "003255", "003256", "003257", "003258", "003259", "003260", "003261", "003262", "003263", "003264", "003265", "003266", "003267", "003268", "003269", "003270", "003271", "003272", "003273", "003274", "003275", "003276", "003277", "003278", "003279", "003280", "003281", "003282", "003283", "003284", "003285", "003286", "003287", "003288", "003289", "003290", "003291", "003292", "003293", "003294", "003295", "003296", "003297", "003298", "003299", "003300", "003301", "003302", "003303", "003304", "003305", "003306", "003307", "003308", "003309", "003310", "003311", "003312", "003313", "003314", "003315", "003316", "003317", "003318", "003319", "003320", "003321", "003322", "003323", "003324", "003325", "003326", "003327", "003328", "003329", "003330", "003331", "003332", "003333", "003334", "003335", "003336", "003337", "003338", "003339", "003340", "003341", "003342", "003343", "003344", "003345", "003346", "003347", "003348", "003349", "003350", "003351", "003352", "003353", "003354", "003355", "003356", "003357", "003358", "003359", "003360", "003361", "003362", "003363", "003364", "003365", "003366", "003367", "003368", "003369", "003370", "003371", "003372", "003373", "003374", "003375", "003376", "003377", "003378", "003379", "003380", "003381", "003382", "003383", "003384", "003385", "003386", "003387", "003388", "003389", "003390", "003391", "003392", "003393", "003394", "003395", "003396", "003397", "003398", "003399", "003560", "003561", "003562", "003563", "003564", "003565", "003566", "003567", "003568", "003569", "003570", "003571", "003572", "003573", "003574", "003575", "003576", "003577", "003578", "003579", "003580", "003581", "003582", "003583", "003584", "003585", "003586", "003587", "003588", "003589", "003590", "003591", "003592", "003593", "003594", "003595", "003596", "003597", "003598", "003599", "003600", "003601", "003602", "003603", "003604", "003605", "003606", "003607", "003608", "003609", "003610", "003611", "003612", "003613", "003614", "003615", "003616", "003617", "003618", "003619", "003620", "003621", "003622", "003623", "003624", "003625", "003626", "003627", "003628", "003629", "003630", "003631", "003632", "003633", "003634", "003635", "003636", "003637", "003638", "003639", "003640", "003641", "003642", "003643", "003644", "003645", "003646", "003647", "003648", "003649", "003650", "003651", "003652", "003653", "003654", "003655", "003656", "003657", "003658", "003659", "003660", "003661", "003662", "003663", "003664", "003665", "003666", "003667", "003668", "003669", "003670", "003671", "003672", "003673", "003674", "003675", "003676", "003677", "003678", "003679", "004050", "004051", "004052", "004053", "004054", "004055", "004056", "004057", "004058", "004059", "004060", "004061", "004062", "004063", "004064", "004065", "004066", "004067", "004068", "004069", "004070", "004071", "004072", "004073", "004074", "004075", "004076", "004077", "004078", "004079", "004080", "004081", "004082", "004083", "004084", "004085", "004086", "004087", "004088", "004089", "004090", "004091", "004092", "004093", "004094", "004095", "004096", "004097", "004098", "004099", "004100", "004101", "004102", "004103", "004104", "004105", "004106", "004107", "004108", "004109", "004110", "004111", "004112", "004113", "004114", "004115", "004116", "004117", "004118", "004119", "004120", "004121", "004122", "004123", "004124", "004125", "004126", "004127", "004128", "004129", "004130", "004131", "004132", "004133", "004134", "004135", "004136", "004137", "004138", "004139", "004140", "004141", "004142", "004143", "004144", "004145", "004146", "004147", "004148", "004149", "004150", "004151", "004152", "004153", "004154", "004155", "004156", "004157", "004158", "004159", "004160", "004161", "004162", "004163", "004164", "004165", "004166", "004167", "004168", "004169", "004170", "004171", "004172", "004173", "004174", "004175", "004176", "004177", "004178", "004179", "004180", "004181", "004182", "004183", "004184", "004185", "004186", "004187", "004188", "004189", "004190", "004191", "004192", "004193", "004194", "004195", "004196", "004197", "004198", "004199", "004200", "004201", "004202", "004203", "004204", "004205", "004206", "004207", "004208", "004209", "004210", "004211", "004212", "004213", "004214", "004215", "004216", "004217", "004218", "004219", "004220", "004221", "004222", "004223", "004224", "004225", "004226", "004227", "004228", "004229", "004230", "004231", "004232", "004233", "004234", "004235", "004236", "004237", "004238", "004239", "004240", "004241", "004242", "004243", "004244", "004245", "004246", "004247", "004248", "004249", "004250", "004251", "004252", "004253", "004254", "004255", "004256", "004257", "004258", "004259", "004260", "004261", "004262", "004263", "004264", "004265", "004266", "004267", "004268", "004269", "004270", "004271", "004272", "004273", "004274", "004275", "004276", "004277", "004278", "004279", "004280", "004281", "004282", "004283", "004284", "004285", "004286", "004287", "004288", "004289", "004290", "004291", "004292", "004293", "004294", "004295", "004296", "004297", "004298", "004299", "004300", "004301", "004302", "004303", "004304", "004305", "004306", "004307", "004308", "004309", "004310", "004311", "004312", "004313", "004314", "004315", "004316", "004317", "004318", "004319", "004320", "004321", "004322", "004323", "004324", "004325", "004326", "004327", "004328", "004329", "004330", "004331", "004332", "004333", "004334", "004335", "004336", "004337", "004338", "004339", "004340", "004341", "004342", "004343", "004344", "004345", "004346", "004347", "004348", "004349", "004350", "004351", "004352", "004353", "004354", "004355", "004356", "004357", "004358", "004359", "004360", "004361", "004362", "004363", "004364", "004365", "004366", "004367", "004368", "004369", "004370", "004371", "004372", "004373", "004374", "004375", "004376", "004377", "004378", "004379", "004380", "004381", "004382", "004383", "004384", "004385", "004386", "004387", "004388", "004389", "004390", "004391", "004392", "004393", "004394", "004395", "004396", "004397", "004398", "004399", "004400", "004401", "004402", "004403", "004404", "004405", "004406", "004407", "004408", "004409", "004410", "004411", "004412", "004413", "004414", "004415", "004416", "004417", "004418", "004419", "004420", "004421", "004422", "004423", "004424", "004425", "004426", "004427", "004428", "004429", "004430", "004431", "004432", "004433", "004434", "004435", "004436", "004437", "004438", "004439", "004440", "004441", "004442", "004443", "004444", "004445", "004446", "004447", "004448", "004449", "007815", "007816", "007817", "007818", "007819", "007820", "007821", "007822", "007823", "007824", "007825", "007826", "007827", "007828", "007829", "007830", "007831", "007832", "007833", "007834", "007835", "007836", "007837", "007838", "007839", "007840", "007841", "007842", "007843", "007844", "007845", "007846", "007847", "007848", "007849", "007850", "007851", "007852", "007853", "007854", "007855", "007856", "007857", "007858", "007859", "007860", "007861", "007862", "007863", "007864", "007865", "007866", "007867", "007868", "007869", "007870", "007871", "007872", "007873", "007874", "007875", "007876", "007877", "007878", "007879", "007880", "007881", "007882", "007883", "007884", "007885", "007886", "007887", "007888", "007889", "007890", "007891", "007892", "007893", "007894", "007895", "007896", "007897", "007898", "007899", "007900", "007901", "007902", "007903", "007904", "007905", "007906", "007907", "007908", "007909", "007910", "007911", "007912", "007913", "007914", "007915", "007916", "007917", "007918", "007919", "007920", "007921", "007922", "007923", "007924", "007925", "007926", "007927", "007928", "007929", "007930", "007931", "007932", "007933", "007934", "007935", "007936", "007937", "007938", "007939", "007940", "007941", "007942", "007943", "007944", "007945", "007946", "007947", "007948", "007949", "007950", "007951", "007952", "007953", "007954", "007955", "007956", "007957", "007958", "007959", "007960", "007961", "007962", "007963", "007964", "007965", "007966", "007967", "007968", "007969", "007970", "007971", "007972", "007973", "007974", "007975", "007976", "007977", "007978", "007979", "007980", "007981", "007982", "007983", "007984", "009680", "009681", "009682", "009683", "009684", "009685", "009686", "009687", "009688", "009689", "009690", "009691", "009692", "009693", "009694", "009695", "009696", "009697", "009698", "009699", "009700", "009701", "009702", "009703", "009704", "009705", "009706", "009707", "009708", "009709", "009710", "009711", "009712", "009713", "009714", "009715", "009716", "009717", "009718", "009719", "009720", "009721", "009722", "009723", "009724", "009725", "009726", "009727", "009728", "009729", "009730", "009731", "009732", "009733", "009734", "009735", "009736", "009737", "009738", "009739", "009740", "009741", "009742", "009743", "009744", "009745", "009746", "009747", "009748", "009749", "009750", "009751", "009752", "009753", "009754", "009755", "009756", "009757", "009758", "009759", "009760", "009761", "009762", "009763", "009764", "009765", "009766", "009767", "009768", "009769", "009770", "009771", "009772", "009773", "009774", "009775", "009776", "009777", "009778", "009779", "009780", "009781", "009782", "009783", "009784", "009785", "009786", "009787", "009788", "009789", "009790", "009791", "009792", "009793", "009794", "009795", "009796", "009797", "009798", "009799", "009800", "009801", "009802", "009803", "009804", "009805", "009806", "009807", "009808", "009809", "009810", "009811", "009812", "009813", "009814", "009815", "009816", "009817", "009818", "009819", "010800", "010801", "010802", "010803", "010804", "010805", "010806", "010807", "010808", "010809", "010810", "010811", "010812", "010813", "010814", "010815", "010816", "010817", "010818", "010819", "010820", "010821", "010822", "010823", "010824", "010825", "010826", "010827", "010828", "010829", "010830", "010831", "010832", "010833", "010834", "010835", "010836", "010837", "010838", "010839", "010840", "010841", "010842", "010843", "010844", "010845", "010846", "010847", "010848", "010849", "010850", "010851", "010852", "010853", "010854", "010855", "010856", "010857", "010858", "010859", "010860", "010861", "010862", "010863", "010864", "010865", "010866", "010867", "010868", "010869", "010870", "010871", "010872", "010873", "010874", "010875", "010876", "010877", "010878", "010879", "010880", "010881", "010882", "010883", "010884", "010885", "010886", "010887", "010888", "010889", "010890", "010891", "010892", "010893", "010894", "010895", "010896", "010897", "010898", "010899", "010900", "010901", "010902", "010903", "010904", "010905", "010906", "010907", "010908", "010909", "010910", "010911", "010912", "010913", "010914", "010915", "010916", "010917", "010918", "010919", "010920", "010921", "010922", "010923", "010924", "010925", "010926", "010927", "010928", "010929", "010930", "010931", "010932", "010933", "010934", "010935", "010936", "010937", "010938", "010939", "010940", "010941", "010942", "010943", "010944", "010945", "010946", "010947", "010948", "010949", "010950", "010951", "010952", "010953", "010954", "010955", "010956", "010957", "010958", "010959", "010960", "010961", "010962", "010963", "010964", "010965", "010966", "010967", "010968", "010969", "010970", "010971", "010972", "010973", "010974", "010975", "010976", "010977", "010978", "010979", "010980", "010981", "010982", "010983", "010984", "010985", "010986", "010987", "010988", "010989", "010990", "010991", "010992", "010993", "010994", "010995", "010996", "010997", "010998", "010999", "011000", "011001", "011002", "011003", "011004", "011005", "011006", "011007", "011008", "011009", "011010", "011011", "011012", "011013", "011014", "011015", "011016", "011017", "011018", "011019", "011020", "011021", "011022", "011023", "011024", "011025", "011026", "011027", "011028", "011029", "011030", "011031", "011032", "011033", "011034", "011035", "011036", "011037", "011038", "011039", "011040", "011041", "011042", "011043", "011044", "011045", "011046", "011047", "011048", "011049", "011050", "011051", "011052", "011053", "011054", "011055", "011056", "011057", "011058", "011059", "011060", "011061", "011062", "011063", "011064", "011065", "011066", "011067", "011068", "011069", "011070", "011071", "011072", "011073", "011074", "011075", "011076", "011077", "011078", "011079", "011080", "011081", "011082", "011083", "011084", "011085", "011086", "011087", "011088", "011089", "011090", "011091", "011092", "011093", "011094", "011095", "011096", "011097", "011098", "011099", "011100", "011101", "011102", "011103", "011104", "011105", "011106", "011107", "011108", "011109", "011110", "011111", "011112", "011113", "011114", "011115", "011116", "011117", "011118", "011119", "011120", "011121", "011122", "011123", "011124", "011125", "011126", "011127", "011128", "011129", "011130", "011131", "011132", "011133", "011134", "011135", "011136", "011137", "011138", "011139", "011140", "011141", "011142", "011143", "011144", "011145", "011146", "011147", "011148", "011149", "011150", "011151", "011152", "011153", "011154", "011155", "011156", "011157", "011158", "011159", "011160", "011161", "011162", "011163", "011164", "011165", "011166", "011167", "011168", "011169", "011170", "011171", "011172", "011173", "011174", "011175", "011176", "011177", "011178", "011179", "011180", "011181", "011182", "011183", "011184", "011185", "011186", "011187", "011188", "011189", "011190", "011191", "011192", "011193", "011194", "011195", "011196", "011197", "011198", "011199", "011200", "011201", "011202", "011203", "011204", "011205", "011206", "011207", "011208", "011209", "011210", "011211", "011212", "011213", "011214", "011215", "011216", "011217", "011218", "011219", "011220", "011221", "011222", "011223", "011224", "011225", "011226", "011227", "011228", "011229", "011230", "011231", "011232", "011233", "011234", "011235", "011236", "011237", "011238", "011239", "011240", "011241", "011242", "011243", "011244", "011245", "011246", "011247", "011248", "011249", "011250", "011251", "011252", "011253", "011254", "011255", "011256", "011257", "011258", "011259", "011480", "011481", "011482", "011483", "011484", "011485", "011486", "011487", "011488", "011489", "011490", "011491", "011492", "011493", "011494", "011495", "011496", "011497", "011498", "011499", "011500", "011501", "011502", "011503", "011504", "011505", "011506", "011507", "011508", "011509", "011510", "011511", "011512", "011513", "011514", "011515", "011516", "011517", "011518", "011519", "011520", "011521", "011522", "011523", "011524", "011525", "011526", "011527", "011528", "011529", "011530", "011531", "011532", "011533", "011534", "011535", "011536", "011537", "011538", "011539", "011540", "011541", "011542", "011543", "011544", "011545", "011546", "011547", "011548", "011549", "011550", "011551", "011552", "011553", "011554", "011555", "011556", "011557", "011558", "011559", "011560", "011561", "011562", "011563", "011564", "011565", "011566", "011567", "011568", "011569", "011570", "011571", "011572", "011573", "011574", "011575", "011576", "011577", "011578", "011579", "011770", "011771", "011772", "011773", "011774", "011775", "011776", "011777", "011778", "011779", "011780", "011781", "011782", "011783", "011784", "011785", "011786", "011787", "011788", "011789", "011790", "011791", "011792", "011793", "011794", "011795", "011796", "011797", "011798", "011799", "011800", "011801", "011802", "011803", "011804", "011805", "011806", "011807", "011808", "011809", "011810", "011811", "011812", "011813", "011814", "011815", "011816", "011817", "011818", "011819", "011820", "011821", "011822", "011823", "011824", "011825", "011826", "011827", "011828", "011829", "011830", "011831", "011832", "011833", "011834", "011835", "011836", "011837", "011838", "011839", "011840", "011841", "011842", "011843", "011844", "011845", "011846", "011847", "011848", "011849", "011850", "011851", "011852", "011853", "011854", "011855", "011856", "011857", "011858", "011859", "011860", "011861", "011862", "011863", "011864", "011865", "011866", "011867", "011868", "011869", "011870", "011871", "011872", "011873", "011874", "011875", "011876", "011877", "011878", "011879", "011880", "011881", "011882", "011883", "011884", "011885", "011886", "011887", "011888", "011889", "011890", "011891", "011892", "011893", "011894", "011895", "011896", "011897", "011898", "011899", "011900", "011901", "011902", "011903", "011904", "011905", "011906", "011907", "011908", "011909", "011910", "011911", "011912", "011913", "011914", "011915", "011916", "011917", "011918", "011919", "011920", "011921", "011922", "011923", "011924", "011925", "011926", "011927", "011928", "011929", "011930", "011931", "011932", "011933", "011934", "011935", "011936", "011937", "011938", "011939", "011940", "011941", "011942", "011943", "011944", "011945", "011946", "011947", "011948", "011949", "011950", "011951", "011952", "011953", "011954", "011955", "011956", "011957", "011958", "011959", "012610", "012611", "012612", "012613", "012614", "012615", "012616", "012617", "012618", "012619", "012620", "012621", "012622", "012623", "012624", "012625", "012626", "012627", "012628", "012629", "012630", "012631", "012632", "012633", "012634", "012635", "012636", "012637", "012638", "012639", "012640", "012641", "012642", "012643", "012644", "012645", "012646", "012647", "012648", "012649", "012650", "012651", "012652", "012653", "012654", "012655", "012656", "012657", "012658", "012659", "012660", "012661", "012662", "012663", "012664", "012665", "012666", "012667", "012668", "012669", "012670", "012671", "012672", "012673", "012674", "012675", "012676", "012677", "012678", "012679", "012680", "012681", "012682", "012683", "012684", "012685", "012686", "012687", "012688", "012689", "012690", "012691", "012692", "012693", "012694", "012695", "012696", "012697", "012698", "012699", "012700", "012701", "012702", "012703", "012704", "012705", "012706", "012707", "012708", "012709", "012710", "012711", "012712", "012713", "012714", "012715", "012716", "012717", "012718", "012719", "012720", "012721", "012722", "012723", "012724", "012725", "012726", "012727", "012728", "012729", "012730", "012731", "012732", "012733", "012734", "012735", "012736", "012737", "012738", "012739", "012740", "012741", "012742", "012743", "012744", "012745", "012746", "012747", "012748", "012749", "012750", "012751", "012752", "012753", "012754", "012755", "012756", "012757", "012758", "012759", "012760", "012761", "012762", "012763", "012764", "012765", "012766", "012767", "012768", "012769", "012770", "012771", "012772", "012773", "012774", "012775", "012776", "012777", "012778", "012779", "012780", "012781", "012782", "012783", "012784", "012785", "012786", "012787", "012788", "012789", "012790", "012791", "012792", "012793", "012794", "012795", "012796", "012797", "012958", "012959", "012960", "012961", "012962", "012963", "012964", "012965", "012966", "012967", "012968", "012969", "012970", "012971", "012972", "012973", "012974", "012975", "012976", "012977", "012978", "012979", "012980", "012981", "012982", "012983", "012984", "012985", "012986", "012987", "012988", "012989", "012990", "012991", "012992", "012993", "012994", "012995", "012996", "012997", "012998", "012999", "013000", "013001", "013002", "013003", "013004", "013005", "013006", "013007", "013008", "013009", "013010", "013011", "013012", "013013", "013014", "013015", "013016", "013017", "013018", "013019", "013020", "013021", "013022", "013023", "013024", "013025", "013026", "013027", "013028", "013029", "013030", "013031", "013032", "013033", "013034", "013035", "013036", "013037", "013208", "013209", "013210", "013211", "013212", "013213", "013214", "013215", "013216", "013217", "013218", "013219", "013220", "013221", "013222", "013223", "013224", "013225", "013226", "013227", "013228", "013229", "013230", "013231", "013232", "013233", "013234", "013235", "013236", "013237", "013238", "013239", "013240", "013241", "013242", "013243", "013244", "013245", "013246", "013247", "013248", "013249", "013250", "013251", "013252", "013253", "013254", "013255", "013256", "013257", "013258", "013259", "013260", "013261", "013262", "013263", "013264", "013265", "013266", "013267", "013268", "013269", "013270", "013271", "013272", "013273", "013274", "013275", "013276", "013277", "013278", "013279", "013280", "013281", "013282", "013283", "013284", "013285", "013286", "013287", "013288", "013289", "013290", "013291", "013292", "013293", "013294", "013295", "013296", "013297", "013298", "013299", "013300", "013301", "013302", "013303", "013304", "013305", "013306", "013307", "013308", "013309", "013310", "013311", "013312", "013313", "013314", "013315", "013316", "013317", "013717", "013718", "013719", "013720", "013721", "013722", "013723", "013724", "013725", "013726", "013727", "013728", "013729", "013730", "013731", "013732", "013733", "013734", "013735", "013736", "013737", "013738", "013739", "013740", "013741", "013742", "013743", "013744", "013745", "013746", "013747", "013748", "013749", "013750", "013751", "013752", "013753", "013754", "013755", "013756", "013757", "013758", "013759", "013760", "013761", "013762", "013763", "013764", "013765", "013766", "013767", "013768", "013769", "013770", "013771", "013772", "013773", "013774", "013775", "013776", "013777", "013778", "013779", "013780", "013781", "013782", "013783", "013784", "013785", "013786", "013787", "013788", "013789", "013790", "013791", "013792", "013793", "013794", "013795", "013796", "013797", "013798", "013799", "013800", "013801", "013802", "013803", "013804", "013805", "013806", "013807", "013808", "013809", "013810", "013811", "013812", "013813", "013814", "013815", "013816", "013817", "013818", "013819", "013820", "013821", "013822", "013823", "013824", "013825", "013826", "013827", "013828", "013829", "013830", "013831", "013832", "013833", "013834", "013835", "013836", "013837", "013838", "013839", "013840", "013841", "013842", "013843", "013844", "013845", "013846", "013847", "013848", "013849", "013850", "013851", "013852", "013853", "013854", "013855", "013856", "013857", "013858", "013859", "013860", "013861", "013862", "013863", "013864", "013865", "013866", "013867", "013868", "013869", "013870", "013871", "013872", "013873", "013874", "013875", "013876", "013877", "013878", "013879", "013880", "013881", "013882", "013883", "013884", "013885", "013886", "013887", "013888", "013889", "013890", "013891", "013892", "013893", "013894", "013895", "013896", "013897", "013898", "013899", "013900", "013901", "013902", "013903", "013904", "013905", "013906", "013907", "013908", "013909", "013910", "013911", "013912", "013913", "013914", "013915", "013916", "013917", "013918", "013919", "013920", "013921", "013922", "013923", "013924", "013925", "013926", "013927", "013928", "013929", "013930", "013931", "013932", "013933", "013934", "013935", "013936", "013937", "013938", "013939", "013940", "013941", "013942", "013943", "013944", "013945", "013946", "013947", "013948", "013949", "013950", "013951", "013952", "013953", "013954", "013955", "013956", "013957", "013958", "013959", "013960", "013961", "013962", "013963", "013964", "013965", "013966", "013967", "013968", "013969", "013970", "013971", "013972", "013973", "013974", "013975", "013976", "013977", "013978", "013979", "013980", "013981", "013982", "013983", "013984", "013985", "013986", "013987", "013988", "013989", "013990", "013991", "013992", "013993", "013994", "013995", "013996", "013997", "013998", "013999", "014000", "014001", "014002", "014003", "014004", "014005", "014006", "014007", "014008", "014009", "014010", "014011", "014012", "014013", "014014", "014015", "014016", "014017", "014018", "014019", "014020", "014021", "014022", "014023", "014024", "014025", "014026", "014027", "014028", "014029", "014030", "014031", "014032", "014033", "014034", "014035", "014036", "014037", "014038", "014039", "014040", "014041", "014042", "014043", "014044", "014045", "014046", "014207", "014208", "014209", "014210", "014211", "014212", "014213", "014214", "014215", "014216", "014217", "014218", "014219", "014220", "014221", "014222", "014223", "014224", "014225", "014226", "014227", "014228", "014229", "014230", "014231", "014232", "014233", "014234", "014235", "014236", "014237", "014238", "014239", "014240", "014241", "014242", "014243", "014244", "014245", "014246", "014247", "014248", "014249", "014250", "014251", "014252", "014253", "014254", "014255", "014256", "014257", "014258", "014259", "014260", "014261", "014262", "014263", "014264", "014265", "014266", "014267", "014268", "014269", "014270", "014271", "014272", "014273", "014274", "014275", "014276", "014277", "014278", "014279", "014280", "014281", "014282", "014283", "014284", "014285", "014286", "014287", "014288", "014289", "014290", "014291", "014292", "014293", "014294", "014295", "014296", "014297", "014298", "014299", "014300", "014301", "014302", "014303", "014304", "014305", "014306", "014307", "014308", "014309", "014310", "014311", "014312", "014313", "014314", "014315", "014316", "014317", "014318", "014319", "014320", "014321", "014322", "014323", "014324", "014325", "014326", "014327", "014328", "014329", "014330", "014331", "014332", "014333", "014334", "014335", "014336", "014337", "014338", "014339", "014340", "014341", "014342", "014343", "014344", "014345", "014346", "014347", "014348", "014349", "014350", "014351", "014352", "014353", "014354", "014355", "014356", "014357", "014358", "014359", "014360", "014361", "014362", "014363", "014364", "014365", "014366", "014367", "014368", "014369", "014370", "014371", "014372", "014373", "014374", "014375", "014376", "014377", "014378", "014379", "014380", "014381", "014382", "014383", "014384", "014385", "014386", "014387", "014388", "014389", "014390", "014391", "014392", "014393", "014394", "014395", "014396", "014485", "014486", "014487", "014488", "014489", "014490", "014491", "014492", "014493", "014494", "014495", "014496", "014497", "014498", "014499", "014500", "014501", "014502", "014503", "014504", "014505", "014506", "014507", "014508", "014509", "014510", "014511", "014512", "014513", "014514", "014515", "014516", "014517", "014518", "014519", "014520", "014521", "014522", "014523", "014524", "014525", "014526", "014527", "014528", "014529", "014530", "014531", "014532", "014533", "014534", "014535", "014536", "014537", "014538", "014539", "014540", "014541", "014542", "014543", "014544", "015805", "015806", "015807", "015808", "015809", "015810", "015811", "015812", "015813", "015814", "015815", "015816", "015817", "015818", "015819", "015820", "015821", "015822", "015823", "015824", "015825", "015826", "015827", "015828", "015829", "015830", "015831", "015832", "015833", "015834", "015915", "015916", "015917", "015918", "015919", "015920", "015921", "015922", "015923", "015924", "015925", "015926", "015927", "015928", "015929", "015930", "015931", "015932", "015933", "015934", "015935", "015936", "015937", "015938", "015939", "015940", "015941", "015942", "015943", "015944", "015945", "015946", "015947", "015948", "015949", "015950", "015951", "015952", "015953", "015954", "015955", "015956", "015957", "015958", "015959", "015960", "015961", "015962", "015963", "015964", "015965", "015966", "015967", "015968", "015969", "015970", "015971", "015972", "015973", "015974", "015975", "015976", "015977", "015978", "015979", "015980", "015981", "015982", "015983", "015984", "015985", "015986", "015987", "015988", "015989", "015990", "015991", "015992", "015993", "015994", "015995", "015996", "015997", "015998", "015999", "016000", "016001", "016002", "016003", "016004", "016005", "016006", "016007", "016008", "016009", "016010", "016011", "016012", "016013", "016014", "016015", "016016", "016017", "016018", "016019", "016020", "016021", "016022", "016023", "016024", "016025", "016026", "016027", "016028", "016029", "016030", "016031", "016032", "016033", "016034", "016035", "016036", "016037", "016038", "016039", "016040", "016041", "016042", "016043", "016044", "016045", "016046", "016047", "016048", "016049", "016050", "016051", "016052", "016053", "016054", "016055", "016056", "016057", "016058", "016059", "016225", "016226", "016227", "016228", "016229", "016230", "016231", "016232", "016233", "016234", "016235", "016236", "016237", "016238", "016239", "016240", "016241", "016242", "016243", "016244", "016245", "016246", "016247", "016248", "016249", "016250", "016251", "016252", "016253", "016254", "016255", "016256", "016257", "016258", "016259", "016260", "016261", "016262", "016263", "016264", "016265", "016266", "016267", "016268", "016269", "016270", "016271", "016272", "016273", "016274", "016275", "016276", "016277", "016278", "016279", "016280", "016281", "016282", "016283", "016284", "016285", "016286", "016287", "016288", "016289", "016290", "016291", "016292", "016293", "016294", "016295", "016296", "016297", "016298", "016299", "016300", "016301", "016302", "016303", "016304", "016305", "016306", "016307", "016308", "016309", "016310", "016311", "016312", "016313", "016314", "016315", "016316", "016317", "016318", "016319", "016320", "016321", "016322", "016323", "016324", "016325", "016326", "016327", "016328", "016329", "016330", "016331", "016332", "016333", "016334", "016335", "016336", "016337", "016338", "016339", "016340", "016341", "016342", "016343", "016344", "016345", "016346", "016347", "016348", "016349", "016350", "016351", "016352", "016353", "016354", "016355", "016356", "016357", "016358", "016359", "016360", "016361", "016362", "016363", "016364", "016365", "016366", "016367", "016368", "016369", "016370", "016371", "016372", "016373", "016374", "016375", "016376", "016377", "016378", "016379", "016380", "016381", "016382", "016383", "016384", "016385", "016386", "016387", "016388", "016389", "016390", "016391", "016392", "016393", "016394", "016395", "016396", "016397", "016398", "016399", "016400", "016401", "016402", "016403", "016404", "016405", "016406", "016407", "016408", "016409", "016410", "016411", "016412", "016413", "016414", "016415", "016416", "016417", "016418", "016419", "016420", "016421", "016422", "016423", "016424", "016425", "016426", "016427", "016428", "016429", "016430", "016431", "016432", "016433", "016434", "016435", "016436", "016437", "016438", "016439", "016440", "016441", "016442", "016443", "016444", "016445", "016446", "016447", "016448", "016449", "016450", "016451", "016452", "016453", "016454", "016455", "016456", "016457", "016458", "016459", "016460", "016461", "016462", "016463", "016464", "016465", "016466", "016467", "016468", "016469", "016470", "016471", "016472", "016473", "016474", "016475", "016476", "016477", "016478", "016479", "016480", "016481", "016482", "016483", "016484", "016485", "016486", "016487", "016488", "016489", "016490", "016491", "016492", "016493", "016494", "016495", "016496", "016497", "016498", "016499", "016500", "016501", "016502", "016503", "016504", "016505", "016506", "016507", "016508", "016509", "016510", "016511", "016512", "016513", "016514", "016515", "016516", "016517", "016518", "016519", "016520", "016521", "016522", "016523", "016524", "016525", "016526", "016527", "016528", "016529", "016530", "016531", "016532", "016533", "016534", "016535", "016536", "016537", "016538", "016539", "016540", "016541", "016542", "016543", "016544", "016545", "016546", "016547", "016548", "016549", "016550", "016551", "016552", "016553", "016554", "016555", "016556", "016557", "016558", "016559", "016560", "016561", "016562", "016563", "016564", "016565", "016566", "016567", "016568", "016569", "016570", "016571", "016572", "016573", "016574", "016575", "016576", "016577", "016578", "016579", "016580", "016581", "016582", "016583", "016584", "016585", "016586", "016587", "016588", "016589", "016590", "016591", "016592", "016593", "016594", "016595", "016596", "016597", "016598", "016599", "016600", "016601", "016602", "016603", "016604", "016605", "016606", "016607", "016608", "016609", "016610", "016611", "016612", "016613", "016614", "016615", "016616", "016617", "016618", "016619", "016620", "016621", "016622", "016623", "016624", "016625", "016626", "016627", "016628", "016629", "016630", "016631", "016632", "016633", "016634", "016635", "016636", "016637", "016638", "016639", "016640", "016641", "016642", "016643", "016644", "016645", "016646", "016647", "016648", "016649", "016650", "016651", "016652", "016653", "016654", "016655", "016656", "016657", "016658", "016659", "016660", "016661", "016662", "016663", "016664", "016665", "016666", "016667", "016668", "016669", "016670", "016671", "016672", "016673", "016674", "016675", "016676", "016677", "016678", "016679", "016680", "016681", "016682", "016683", "016684", "016685", "016686", "016687", "016688", "016689", "016690", "016691", "016692", "016693", "016694", "016695", "016696", "016697", "016698", "016699", "016700", "016701", "016702", "016703", "016704", "016705", "016706", "016707", "016708", "016709", "016710", "016711", "016712", "016713", "016714", "016715", "016716", "016717", "016718", "016719", "016720", "016721", "016722", "016723", "016724", "016725", "016726", "016727", "016728", "016729", "016730", "016731", "016732", "016733", "016734", "016735", "016736", "016737", "016738", "016739", "016740", "016741", "016742", "016743", "016744", "016745", "016746", "016747", "016748", "016749", "016750", "016751", "016752", "016753", "016754", "016755", "016756", "016757", "016758", "016759", "016760", "016761", "016762", "016763", "016764", "016765", "016766", "016767", "016768", "016769", "016770", "016771", "016772", "016773", "016774", "016775", "016776", "016777", "016778", "016779", "016780", "016781", "016782", "016783", "016784", "016785", "016786", "016787", "016788", "016789", "016790", "016791", "016792", "016793", "016794", "016795", "016796", "016797", "016798", "016799", "016800", "016801", "016802", "016803", "016804", "016805", "016806", "016807", "016808", "016809", "016810", "016811", "016812", "016813", "016814", "016815", "016816", "016817", "016818", "016819", "016820", "016821", "016822", "016823", "016824", "016825", "016826", "016827", "016828", "016829", "016830", "016831", "016832", "016833", "016834", "016835", "016836", "016837", "016838", "016839", "016840", "016841", "016842", "016843", "016844", "016845", "016846", "016847", "016848", "016849", "016850", "016851", "016852", "016853", "016854", "016855", "016856", "016857", "016858", "016859", "016860", "016861", "016862", "016863", "016864", "016865", "016866", "016867", "016868", "016869", "016870", "016871", "016872", "016873", "016874", "016875", "016876", "016877", "016878", "016879", "016880", "016881", "016882", "016883", "016884", "016885", "016886", "016887", "016888", "016889", "016890", "016891", "016892", "016893", "016894", "016895", "016896", "016897", "016898", "016899", "016900", "016901", "016902", "016903", "016904", "016905", "016906", "016907", "016908", "016909", "016910", "016911", "016912", "016913", "016914", "016915", "016916", "016917", "016918", "016919", "016920", "016921", "016922", "016923", "016924", "016925", "016926", "016927", "016928", "016929", "016930", "016931", "016932", "016933", "016934", "016935", "016936", "016937", "016938", "016939", "016940", "016941", "016942", "016943", "016944", "016945", "016946", "016947", "016948", "016949", "016950", "016951", "016952", "016953", "016954", "016955", "016956", "016957", "016958", "016959", "016960", "016961", "016962", "016963", "016964", "016965", "016966", "016967", "016968", "016969", "016970", "016971", "016972", "016973", "016974", "016975", "016976", "016977", "016978", "016979", "016980", "016981", "016982", "016983", "016984", "016985", "016986", "016987", "016988", "016989", "016990", "016991", "016992", "016993", "016994", "016995", "016996", "016997", "016998", "016999", "017000", "017001", "017002", "017003", "017004", "017005", "017006", "017007", "017008", "017009", "017010", "017011", "017012", "017013", "017014", "017015", "017016", "017017", "017018", "017019", "017020", "017021", "017022", "017023", "017024", "017025", "017026", "017027", "017028", "017029", "017030", "017031", "017032", "017033", "017034", "017035", "017036", "017037", "017038", "017039", "017040", "017041", "017042", "017043", "017044", "017045", "017046", "017047", "017048", "017049", "017050", "017051", "017052", "017053", "017054", "017055", "017056", "017057", "017058", "017059", "017060", "017061", "017062", "017063", "017064", "017065", "017066", "017067", "017068", "017069", "017070", "017071", "017072", "017073", "017074", "017075", "017076", "017077", "017078", "017079", "017080", "017081", "017082", "017083", "017084", "017085", "017086", "017087", "017088", "017089", "017090", "017091", "017092", "017093", "017094", "017095", "017096", "017097", "017098", "017099", "017100", "017101", "017102", "017103", "017104", "017105", "017106", "017107", "017108", "017109", "017110", "017111", "017112", "017113", "017114", "017115", "017116", "017117", "017118", "017119", "017120", "017121", "017122", "017123", "017124", "017125", "017126", "017127", "017128", "017129", "017130", "017131", "017132", "017133", "017134", "017135", "017136", "017137", "017138", "017139", "017140", "017141", "017142", "017143", "017144", "017145", "017146", "017147", "017148", "017149", "017150", "017151", "017152", "017153", "017154", "017155", "017156", "017157", "017158", "017159", "017160", "017161", "017162", "017163", "017164", "017165", "017166", "017167", "017168", "017169", "017170", "017171", "017172", "017173", "017174", "017175", "017176", "017177", "017178", "017179", "017180", "017181", "017182", "017183", "017184", "017185", "017186", "017187", "017188", "017189", "017190", "017191", "017192", "017193", "017194", "017195", "017196", "017197", "017198", "017199", "017200", "017201", "017202", "017203", "017204", "017205", "017206", "017207", "017208", "017209", "017210", "017211", "017212", "017213", "017214", "017215", "017216", "017217", "017218", "017219", "017220", "017221", "017222", "017223", "017224", "017225", "017226", "017227", "017228", "017229", "017230", "017231", "017232", "017233", "017234", "017235", "017236", "017237", "017238", "017239", "017240", "017241", "017242", "017243", "017244", "017245", "017246", "017247", "017248", "017249", "017250", "017251", "017252", "017253", "017254", "017255", "017256", "017257", "017258", "017259", "017260", "017261", "017262", "017263", "017264", "017265", "017266", "017267", "017268", "017269", "017270", "017271", "017272", "017273", "017274", "017275", "017276", "017277", "017278", "017279", "017280", "017281", "017282", "017283", "017284", "017285", "017286", "017287", "017288", "017289", "017290", "017291", "017292", "017293", "017294", "017295", "017296", "017297", "017298", "017299", "017300", "017301", "017302", "017303", "017304", "017305", "017306", "017307", "017308", "017309", "017310", "017311", "017312", "017313", "017314", "017315", "017316", "017317", "017318", "017319", "017320", "017321", "017322", "017323", "017324", "017325", "017326", "017327", "017328", "017329", "017330", "017331", "017332", "017333", "017334", "017335", "017336", "017337", "017338", "017339", "017340", "017341", "017342", "017343", "017344", "017345", "017346", "017347", "017348", "017349", "017350", "017351", "017352", "017353", "017354", "017355", "017356", "017357", "017358", "017359", "017360", "017361", "017362", "017363", "017364", "017365", "017366", "017367", "017368", "017369", "017370", "017371", "017372", "017373", "017374", "017375", "017376", "017377", "017378", "017379", "017380", "017381", "017382", "017383", "017384", "017385", "017386", "017387", "017388", "017389", "017390", "017391", "017392", "017393", "017394", "017395", "017396", "017397", "017398", "017399", "017400", "017401", "017402", "017403", "017404", "017405", "017406", "017407", "017408", "017409", "017410", "017411", "017412", "017413", "017414", "017415", "017416", "017417", "017418", "017419", "017420", "017421", "017422", "017423", "017424", "017425", "017426", "017427", "017428", "017429", "017430", "017431", "017432", "017433", "017434", "017435", "017436", "017437", "017438", "017439", "017440", "017441", "017442", "017443", "017444", "017445", "017446", "017447", "017448", "017449", "017450", "017451", "017452", "017453", "017454", "017455", "017456", "017457", "017458", "017459", "017460", "017461", "017462", "017463", "017464", "017465", "017466", "017467", "017468", "017469", "017470", "017471", "017472", "017473", "017474", "017475", "017476", "017477", "017478", "017479", "017480", "017481", "017482", "017483", "017484", "017485", "017486", "017487", "017488", "017489", "017490", "017491", "017492", "017493", "017494", "017495", "017496", "017497", "017498", "017499", "017500", "017501", "017502", "017503", "017504", "017505", "017506", "017507", "017508", "017509", "017510", "017511", "017512", "017513", "017514", "017515", "017516", "017517", "017518", "017519", "017520", "017521", "017522", "017523", "017524", "017525", "017526", "017527", "017528", "017529", "017530", "017531", "017532", "017533", "017534", "017535", "017536", "017537", "017538", "017539", "017540", "017541", "017542", "017543", "017544", "017545", "017546", "017547", "017548", "017549", "017550", "017551", "017552", "017553", "017554", "017555", "017556", "017557", "017558", "017559", "017560", "017561", "017562", "017563", "017564", "017565", "017566", "017567", "017568", "017569", "017570", "017571", "017572", "017573", "017574", "017605", "017606", "017607", "017608", "017609", "017610", "017611", "017612", "017613", "017614", "017615", "017616", "017617", "017618", "017619", "017620", "017621", "017622", "017623", "017624", "017625", "017626", "017627", "017628", "017629", "017630", "017631", "017632", "017633", "017634", "017635", "017636", "017637", "017638", "017639", "017640", "017641", "017642", "017643", "017644", "017645", "017646", "017647", "017648", "017649", "017650", "017651", "017652", "017653", "017654", "017655", "017656", "017657", "017658", "017659", "017660", "017661", "017662", "017663", "017664", "017665", "017666", "017667", "017668", "017669", "017670", "017671", "017672", "017673", "017674", "017675", "017676", "017677", "017678", "017679", "017680", "017681", "017682", "017683", "017684", "017685", "017686", "017687", "017688", "017689", "017690", "017691", "017692", "017693", "017694", "017695", "017696", "017697", "017698", "017699", "017700", "017701", "017702", "017703", "017704", "017705", "017706", "017707", "017708", "017709", "017710", "017711", "017712", "017713", "017714", "017715", "017716", "017717", "017718", "017719", "017720", "017721", "017722", "017723", "017724", "017725", "017726", "017727", "017728", "017729", "017730", "017731", "017732", "017733", "017734", "017735", "017736", "017737", "017738", "017739", "017740", "017741", "017742", "017743", "017744", "017745", "017746", "017747", "017748", "017749", "017750", "017751", "017752", "017753", "017754", "017755", "017756", "017757", "017758", "017759", "017760", "017761", "017762", "017763", "017764", "017765", "017766", "017767", "017768", "017769", "017770", "017771", "017772", "017773", "017774", "017775", "017776", "017777", "017778", "017779", "017780", "017781", "017782", "017783", "017784", "017785", "017786", "017787", "017788", "017789", "017790", "017791", "017792", "017793", "017794", "017795", "017796", "017797", "017798", "017799", "017800", "017801", "017802", "017803", "017804", "017805", "017806", "017807", "017808", "017809", "017810", "017811", "017812", "017813", "017814", "017815", "017816", "017817", "017818", "017819", "017820", "017821", "017822", "017823", "017824", "017825", "017826", "017827", "017828", "017829", "017830", "017831", "017832", "017833", "017834", "017835", "017836", "017837", "017838", "017839", "017840", "017841", "017842", "017843", "017844", "017845", "017846", "017847", "017848", "017849", "017850", "017851", "017852", "017853", "017854", "017855", "017856", "017857", "017858", "017859", "017860", "017861", "017862", "017863", "017864", "017865", "017866", "017867", "017868", "017869", "017870", "017871", "017872", "017873", "017874", "017875", "017876", "017877", "017878", "017879", "017880", "017881", "017882", "017883", "017884", "017885", "017886", "017887", "017888", "017889", "017890", "017891", "017892", "017893", "017894", "017895", "017896", "017897", "017898", "017899", "017900", "017901", "017902", "017903", "017904", "017905", "017906", "017907", "017908", "017909", "017910", "017911", "017912", "017913", "017914", "017915", "017916", "017917", "017918", "017919", "017920", "017921", "017922", "017923", "017924", "017925", "017926", "017927", "017928", "017929", "017930", "017931", "017932", "017933", "017934", "017935", "017936", "017937", "017938", "017939", "017940", "017941", "017942", "017943", "017944", "017945", "017946", "017947", "017948", "017949", "017950", "017951", "017952", "017953", "017954", "017955", "017956", "017957", "017958", "017959", "017960", "017961", "017962", "017963", "017964", "017965", "017966", "017967", "017968", "017969", "017970", "017971", "017972", "017973", "017974", "017975", "017976", "017977", "017978", "017979", "017980", "017981", "017982", "017983", "017984", "017985", "017986", "017987", "017988", "017989", "017990", "017991", "017992", "017993", "017994", "017995", "017996", "017997", "017998", "017999", "018000", "018001", "018002", "018003", "018004", "018005", "018006", "018007", "018008", "018009", "018010", "018011", "018012", "018013", "018014", "018015", "018016", "018017", "018018", "018019", "018020", "018021", "018022", "018023", "018024", "018025", "018026", "018027", "018028", "018029", "018030", "018031", "018032", "018033", "018034", "018035", "018036", "018037", "018038", "018039", "018040", "018041", "018042", "018043", "018044", "018045", "018046", "018047", "018048", "018049", "018050", "018051", "018052", "018053", "018054", "018095", "018096", "018097", "018098", "018099", "018100", "018101", "018102", "018103", "018104", "018105", "018106", "018107", "018108", "018109", "018110", "018111", "018112", "018113", "018114", "018115", "018116", "018117", "018118", "018119", "018120", "018121", "018122", "018123", "018124", "018125", "018126", "018127", "018128", "018129", "018130", "018131", "018132", "018133", "018134", "018135", "018136", "018137", "018138", "018139", "018140", "018141", "018142", "018143", "018144", "018145", "018146", "018147", "018148", "018149", "018150", "018151", "018152", "018153", "018154", "018155", "018156", "018157", "018158", "018159", "018160", "018161", "018162", "018163", "018164", "018165", "018166", "018167", "018168", "018169", "018170", "018171", "018172", "018173", "018174", "018175", "018176", "018177", "018178", "018179", "018180", "018181", "018182", "018183", "018184", "018185", "018186", "018187", "018188", "018189", "018190", "018191", "018192", "018193", "018194", "018195", "018196", "018197", "018198", "018199", "018200", "018201", "018202", "018203", "018204", "018205", "018206", "018207", "018208", "018209", "018210", "018211", "018212", "018213", "018214", "018215", "018216", "018217", "018218", "018219", "018220", "018221", "018222", "018223", "018224", "018225", "018226", "018227", "018228", "018229", "018230", "018231", "018232", "018233", "018234", "018235", "018236", "018237", "018238", "018239", "018240", "018241", "018242", "018243", "018244", "018245", "018246", "018247", "018248", "018249", "018250", "018251", "018252", "018253", "018254", "018255", "018256", "018257", "018258", "018259", "018260", "018261", "018262", "018263", "018264", "018265", "018266", "018267", "018268", "018269", "018270", "018271", "018272", "018273", "018274", "018275", "018276", "018277", "018278", "018279", "018280", "018281", "018282", "018283", "018284", "018285", "018286", "018287", "018288", "018289", "018290", "018291", "018292", "018293", "018294", "018295", "018296", "018297", "018298", "018299", "018300", "018301", "018302", "018303", "018304", "018305", "018306", "018307", "018308", "018309", "018310", "018311", "018312", "018313", "018314", "018315", "018316", "018317", "018318", "018319", "018320", "018321", "018322", "018323", "018324", "018325", "018326", "018327", "018328", "018329", "018330", "018331", "018332", "018333", "018334", "018335", "018336", "018337", "018338", "018339", "018340", "018341", "018342", "018343", "018344", "018345", "018346", "018347", "018348", "018349", "018350", "018351", "018352", "018353", "018354", "018355", "018356", "018357", "018358", "018359", "018360", "018361", "018362", "018363", "018364", "018365", "018366", "018367", "018368", "018369", "018370", "018371", "018372", "018373", "018374", "018375", "018376", "018377", "018378", "018379", "018380", "018381", "018382", "018383", "018384", "018385", "018386", "018387", "018388", "018389", "018390", "018391", "018392", "018393", "018394", "018395", "018396", "018397", "018398", "018399", "018400", "018401", "018402", "018403", "018404", "018405", "018406", "018407", "018408", "018409", "018410", "018411", "018412", "018413", "018414", "018885", "018886", "018887", "018888", "018889", "018890", "018891", "018892", "018893", "018894", "018895", "018896", "018897", "018898", "018899", "018900", "018901", "018902", "018903", "018904", "018905", "018906", "018907", "018908", "018909", "018910", "018911", "018912", "018913", "018914", "018915", "018916", "018917", "018918", "018919", "018920", "018921", "018922", "018923", "018924", "018925", "018926", "018927", "018928", "018929", "018930", "018931", "018932", "018933", "018934", "018935", "018936", "018937", "018938", "018939", "018940", "018941", "018942", "018943", "018944", "018945", "018946", "018947", "018948", "018949", "018950", "018951", "018952", "018953", "018954", "018955", "018956", "018957", "018958", "018959", "018960", "018961", "018962", "018963", "018964", "018965", "018966", "018967", "018968", "018969", "018970", "018971", "018972", "018973", "018974", "018975", "018976", "018977", "018978", "018979", "018980", "018981", "018982", "018983", "018984", "018985", "018986", "018987", "018988", "018989", "018990", "018991", "018992", "018993", "018994", "018995", "018996", "018997", "018998", "018999", "019000", "019001", "019002", "019003", "019004", "019005", "019006", "019007", "019008", "019009", "019010", "019011", "019012", "019013", "019014", "019015", "019016", "019017", "019018", "019019", "019020", "019021", "019022", "019023", "019024", "019025", "019026", "019027", "019028", "019029", "019030", "019031", "019032", "019033", "019034", "019035", "019036", "019037", "019038", "019039", "019040", "019041", "019042", "019043", "019044", "019045", "019046", "019047", "019048", "019049", "019050", "019051", "019052", "019053", "019054", "019055", "019056", "019057", "019058", "019059", "019060", "019061", "019062", "019063", "019064", "019065", "019066", "019067", "019068", "019069", "019070", "019071", "019072", "019073", "019074", "019075", "019076", "019077", "019078", "019079", "019080", "019081", "019082", "019083", "019084", "019765", "019766", "019767", "019768", "019769", "019770", "019771", "019772", "019773", "019774", "019775", "019776", "019777", "019778", "019779", "019780", "019781", "019782", "019783", "019784", "019785", "019786", "019787", "019788", "019789", "019790", "019791", "019792", "019793", "019794", "019795", "019796", "019797", "019798", "019799", "019800", "019801", "019802", "019803", "019804", "019805", "019806", "019807", "019808", "019809", "019810", "019811", "019812", "019813", "019814", "019815", "019816", "019817", "019818", "019819", "019820", "019821", "019822", "019823", "019824", "019825", "019826", "019827", "019828", "019829", "019830", "019831", "019832", "019833", "019834", "019835", "019836", "019837", "019838", "019839", "019840", "019841", "019842", "019843", "019844", "019845", "019846", "019847", "019848", "019849", "019850", "019851", "019852", "019853", "019854", "019855", "019856", "019857", "019858", "019859", "019860", "019861", "019862", "019863", "019864", "019865", "019866", "019867", "019868", "019869", "019870", "019871", "019872", "019873", "019874", "019875", "019876", "019877", "019878", "019879", "019880", "019881", "019882", "019883", "019884", "019885", "019886", "019887", "019888", "019889", "019890", "019891", "019892", "019893", "019894", "019895", "019896", "019897", "019898", "019899", "019900", "019901", "019902", "019903", "019904", "019905", "019906", "019907", "019908", "019909", "019910", "019911", "019912", "019913", "019914", "019915", "019916", "019917", "019918", "019919", "019920", "019921", "019922", "019923", "019924", "019925", "019926", "019927", "019928", "019929", "019930", "019931", "019932", "019933", "019934", "019935", "019936", "019937", "019938", "019939", "019940", "019941", "019942", "019943", "019944", "019945", "019946", "019947", "019948", "019949", "019950", "019951", "019952", "019953", "019954", "019955", "019956", "019957", "019958", "019959", "019960", "019961", "019962", "019963", "019964", "019965", "019966", "019967", "019968", "019969", "019970", "019971", "019972", "019973", "019974", "019975", "019976", "019977", "019978", "019979", "019980", "019981", "019982", "019983", "019984", "019985", "019986", "019987", "019988", "019989", "019990", "019991", "019992", "019993", "019994"], "test": ["001476", "001477", "001478", "001479", "001480", "001481", "001482", "001483", "001484", "001485", "001486", "001487", "001488", "001489", "001490", "001491", "001492", "001493", "001494", "001495", "001496", "001497", "001498", "001499", "001500", "001501", "001502", "001503", "001504", "001505", "001506", "001507", "001508", "001509", "001510", "001511", "001512", "001513", "001514", "001516", "001517", "001518", "001519", "001520", "001521", "001522", "001523", "001524", "001525", "001526", "001527", "001528", "001529", "001530", "001531", "001532", "001533", "001534", "001535", "001536", "001537", "001538", "001539", "001540", "001541", "001542", "001543", "001544", "001545", "001546", "001547", "001548", "001549", "001550", "001551", "001552", "001553", "001554", "001555", "001556", "001557", "001558", "001559", "001560", "001561", "001562", "001563", "001564", "001565", "001566", "001567", "001568", "001569", "001570", "001571", "001572", "001573", "001574", "001575", "001576", "001577", "001578", "001579", "001580", "001581", "001582", "001583", "001584", "001585", "001586", "001587", "001588", "001589", "001590", "001591", "001592", "001593", "001594", "001595", "001596", "001597", "001598", "001599", "001600", "001601", "001602", "001603", "001604", "001605", "001606", "001607", "001608", "001609", "001610", "001611", "001612", "001613", "001614", "001615", "001616", "001617", "001618", "001619", "001620", "001621", "001622", "001623", "001624", "001625", "001626", "001627", "001628", "001629", "001630", "001631", "001632", "001633", "001634", "001635", "001636", "001637", "001638", "001639", "001640", "001641", "001642", "001643", "001644", "001645", "001646", "001647", "001648", "001649", "001650", "001651", "001652", "001653", "001654", "001655", "001656", "001657", "001658", "001659", "001660", "001661", "001662", "001663", "001664", "001665", "001666", "001667", "001668", "001669", "001670", "001671", "001672", "001673", "001674", "001675", "001676", "001677", "001678", "001679", "001680", "001681", "001682", "001683", "001684", "001685", "001686", "001687", "001688", "001689", "001690", "001691", "001692", "001693", "001694", "001695", "001696", "001697", "001698", "001699", "001700", "001701", "001702", "001703", "001704", "001705", "001706", "001707", "001708", "001709", "001710", "001711", "001712", "001713", "001714", "002065", "002066", "002067", "002068", "002069", "002070", "002071", "002072", "002073", "002074", "002075", "002076", "002077", "002078", "002079", "002080", "002081", "002082", "002083", "002084", "002085", "002086", "002087", "002088", "002089", "002090", "002091", "002092", "002093", "002094", "002095", "002096", "002097", "002098", "002099", "002100", "002101", "002102", "002103", "002104", "002105", "002106", "002107", "002108", "002109", "002110", "002111", "002112", "002113", "002114", "002115", "002116", "002117", "002118", "002119", "002120", "002121", "002122", "002123", "002124", "002125", "002126", "002127", "002128", "002129", "002130", "002131", "002132", "002133", "002134", "002135", "002136", "002137", "002138", "002139", "002140", "002141", "002142", "002143", "002144", "002145", "002146", "002147", "002148", "002149", "002150", "002151", "002152", "002153", "002154", "002155", "002156", "002157", "002158", "002159", "002160", "002161", "002162", "002163", "002164", "002165", "002166", "002167", "002168", "002169", "002170", "002171", "002172", "002173", "002174", "002175", "002176", "002177", "002178", "002179", "002180", "002181", "002182", "002183", "002184", "002185", "002186", "002187", "002188", "002189", "002190", "002191", "002192", "002193", "002194", "002195", "002196", "002197", "002198", "002199", "002200", "002201", "002202", "002203", "002204", "002205", "002206", "002207", "002208", "002209", "002210", "002211", "002212", "002213", "002214", "002215", "002216", "002217", "002218", "002219", "002220", "002221", "002222", "002223", "002224", "002225", "002226", "002227", "002228", "002229", "002230", "002231", "002232", "002233", "002572", "002573", "002574", "002575", "002576", "002577", "002578", "002579", "002580", "002581", "002582", "002583", "002584", "002585", "002586", "002587", "002588", "002589", "002590", "002591", "002592", "002593", "002594", "002595", "002596", "002597", "002598", "002599", "002600", "002601", "002602", "002603", "002604", "002605", "002606", "002607", "002608", "002609", "002610", "002611", "002612", "002613", "002614", "002615", "002616", "002617", "002618", "002619", "002620", "002621", "002622", "002623", "002624", "002625", "002626", "002627", "002628", "002629", "002630", "002631", "002632", "002633", "002634", "002635", "002636", "002637", "002638", "002639", "002640", "002641", "002642", "002643", "002644", "002645", "002646", "002647", "002648", "002649", "002650", "002651", "002652", "002653", "002654", "002655", "002656", "002657", "002658", "002659", "002660", "002661", "002662", "002663", "002664", "002665", "002666", "002667", "002668", "002669", "002670", "002671", "002672", "002673", "002674", "002675", "002676", "002677", "002678", "002679", "002680", "002681", "002682", "002683", "002684", "002685", "002686", "002687", "002688", "002689", "002690", "002691", "002692", "002693", "002694", "002695", "002696", "002697", "002698", "002699", "002700", "002701", "002702", "002703", "002704", "002705", "002706", "002707", "002708", "002709", "002710", "002711", "002712", "002713", "002714", "002715", "002716", "002717", "002718", "002719", "002720", "002721", "002722", "002723", "002724", "002725", "002726", "002727", "002728", "002729", "002730", "002731", "002732", "002733", "002734", "002735", "002736", "002737", "002738", "002739", "002740", "002741", "002742", "002743", "002744", "002745", "002746", "002747", "002748", "002749", "002750", "002751", "002752", "002753", "002754", "002755", "002756", "002757", "002758", "002759", "002760", "002761", "002762", "002763", "002764", "002765", "002766", "002767", "002768", "002769", "002770", "002771", "002772", "002773", "002774", "002775", "002776", "002777", "002778", "002779", "002780", "002781", "002782", "002783", "002784", "002785", "002786", "002787", "002788", "002789", "002790", "002791", "002792", "002793", "002794", "002795", "002796", "002797", "002798", "002799", "002800", "002801", "002802", "002803", "002804", "002805", "002806", "002807", "002808", "002809", "002810", "002811", "002812", "002813", "002814", "002815", "002816", "002817", "002818", "002819", "002820", "002821", "002822", "002823", "002824", "002825", "002826", "002827", "002828", "002829", "002830", "002831", "002832", "002833", "002834", "002835", "002836", "002837", "002838", "002839", "002840", "002841", "002842", "002843", "002844", "002845", "002846", "002847", "002848", "002849", "002850", "002851", "002852", "002853", "002854", "002855", "002856", "002857", "002858", "002859", "002860", "002861", "002862", "002863", "002864", "002865", "002866", "002867", "002868", "002869", "002870", "002871", "002872", "002873", "002874", "002875", "002876", "002877", "002878", "002879", "002880", "002881", "002882", "002883", "002884", "002885", "002886", "002887", "002888", "002889", "002890", "002891", "002892", "002893", "002894", "002895", "002896", "002897", "002898", "002899", "002900", "002901", "002902", "002903", "002904", "002905", "002906", "002907", "002908", "002909", "002910", "002911", "002912", "002913", "002914", "002915", "002916", "002917", "002918", "002919", "002920", "002921", "002922", "002923", "002924", "002925", "002926", "002927", "002928", "002929", "002930", "002931", "002932", "002933", "002934", "002935", "002936", "002937", "002938", "002939", "002940", "002941", "002942", "002943", "002944", "002945", "002946", "002947", "002948", "002949", "002950", "002951", "002952", "002953", "002954", "002955", "002956", "002957", "002958", "002959", "002960", "002961", "002962", "002963", "002964", "002965", "002966", "002967", "002968", "002969", "002970", "002971", "002972", "002973", "002974", "002975", "002976", "002977", "002978", "002979", "002980", "002981", "002982", "002983", "002984", "002985", "002986", "002987", "002988", "002989", "002990", "002991", "002992", "002993", "002994", "002995", "002996", "002997", "002998", "002999", "003000", "003001", "003002", "003003", "003004", "003005", "003006", "003007", "003008", "003009", "003010", "003011", "003012", "003013", "003014", "003015", "003016", "003017", "003018", "003019", "003020", "003021", "003022", "003023", "003024", "003025", "003026", "003027", "003028", "003029", "003030", "003031", "003032", "003033", "003034", "003035", "003036", "003037", "003038", "003039", "003040", "003041", "003042", "003043", "003044", "003045", "003046", "003047", "003048", "003049", "003050", "003051", "003052", "003053", "003054", "003055", "003056", "003830", "003831", "003832", "003833", "003834", "003835", "003836", "003837", "003838", "003839", "003840", "003841", "003842", "003843", "003844", "003845", "003846", "003847", "003848", "003849", "003850", "003851", "003852", "003853", "003854", "003855", "003856", "003857", "003858", "003859", "003860", "003861", "003862", "003863", "003864", "003865", "003866", "003867", "003868", "003869", "003870", "003871", "003872", "003873", "003874", "003875", "003876", "003877", "003878", "003879", "003880", "003881", "003882", "003883", "003884", "003885", "003886", "003887", "003888", "003889", "003890", "003891", "003892", "003893", "003894", "003895", "003896", "003897", "003898", "003899", "003900", "003901", "003902", "003903", "003904", "003905", "003906", "003907", "003908", "003909", "003910", "003911", "003912", "003913", "003914", "003915", "003916", "003917", "003918", "003919", "003920", "003921", "003922", "003923", "003924", "003925", "003926", "003927", "003928", "003929", "003930", "003931", "003932", "003933", "003934", "003935", "003936", "003937", "003938", "003939", "003940", "003941", "003942", "003943", "003944", "003945", "003946", "003947", "003948", "003949", "003950", "003951", "003952", "003953", "003954", "003955", "003956", "003957", "003958", "003959", "003960", "003961", "003962", "003963", "003964", "003965", "003966", "003967", "003968", "003969", "003970", "003971", "003972", "003973", "003974", "003975", "003976", "003977", "003978", "003979", "003980", "003981", "003982", "003983", "003984", "003985", "003986", "003987", "003988", "003989", "003990", "003991", "003992", "003993", "003994", "003995", "003996", "003997", "003998", "003999", "004000", "004001", "004002", "004003", "004004", "004005", "004006", "004007", "004008", "004009", "004010", "004011", "004012", "004013", "004014", "004015", "004016", "004017", "004018", "004019", "004020", "004021", "004022", "004023", "004024", "004025", "004026", "004027", "004028", "004029", "004030", "004031", "004032", "004033", "004034", "004035", "004036", "004037", "004038", "004039", "004040", "004041", "004042", "004043", "004044", "004045", "004046", "004047", "004048", "004049", "004743", "004744", "004745", "004746", "004747", "004748", "004749", "004750", "004751", "004752", "004753", "004754", "004755", "004756", "004757", "004758", "004759", "004760", "004761", "004762", "004763", "004764", "004765", "004766", "004767", "004768", "004769", "004770", "004771", "004772", "004773", "004774", "004775", "004776", "004777", "004778", "004779", "004780", "004781", "004782", "004783", "004784", "004785", "004786", "004787", "004788", "004789", "004790", "004791", "004792", "004793", "004794", "004795", "004796", "004797", "004798", "004799", "004800", "004801", "004802", "004803", "004804", "004805", "004806", "004807", "004808", "004809", "004810", "004811", "004812", "004813", "004814", "004815", "004816", "004817", "004818", "004819", "004820", "004821", "004822", "004823", "004824", "004825", "004826", "004827", "004828", "004829", "004830", "004831", "004832", "004833", "004834", "004835", "004836", "004837", "004838", "004839", "004840", "004841", "004842", "004843", "004844", "004845", "004846", "004847", "004848", "004849", "004850", "004851", "004852", "004853", "004854", "004855", "004856", "004857", "004858", "004859", "004860", "004861", "004862", "004863", "004864", "004865", "004866", "004867", "004868", "004869", "004870", "004871", "004872", "004873", "004874", "004875", "004876", "004877", "004878", "004879", "004880", "004881", "004882", "005074", "005075", "005076", "005077", "005078", "005079", "005080", "005081", "005082", "005083", "005084", "005085", "005086", "005087", "005088", "005089", "005090", "005091", "005092", "005093", "005094", "005095", "005096", "005097", "005098", "005099", "005100", "005101", "005102", "005103", "005104", "005105", "005106", "005107", "005108", "005109", "005110", "005111", "005112", "005113", "005114", "005115", "005116", "005117", "005118", "005119", "005120", "005121", "005122", "005123", "005124", "005125", "005126", "005127", "005128", "005129", "005130", "005131", "005132", "005133", "005134", "005135", "005136", "005137", "005138", "005139", "005140", "005141", "005142", "005143", "005144", "005145", "005146", "005147", "005148", "005149", "005150", "005151", "005152", "005153", "005154", "005155", "005156", "005157", "005158", "005159", "005160", "005161", "005162", "005163", "005164", "005165", "005166", "005167", "005168", "005169", "005170", "005171", "005172", "005173", "005174", "005175", "005176", "005177", "005178", "005179", "005180", "005181", "005182", "005183", "005184", "005185", "005186", "005187", "005188", "005189", "005190", "005191", "005192", "005193", "005194", "005195", "005196", "005197", "005198", "005199", "005200", "005201", "005202", "005203", "005204", "005205", "005206", "005207", "005208", "005209", "005210", "005211", "005212", "005213", "005214", "005215", "005216", "005217", "005218", "005219", "005220", "005221", "005222", "005223", "005224", "005225", "005226", "005227", "005228", "005229", "005230", "005231", "005232", "005233", "005234", "005235", "005236", "005237", "005238", "005239", "005240", "005241", "005242", "005243", "005244", "005245", "005246", "005247", "005248", "005249", "005250", "005251", "005252", "005253", "005254", "005255", "005256", "005257", "005258", "005259", "005260", "005261", "005262", "005263", "005264", "005265", "005266", "005267", "005268", "005269", "005270", "005271", "005272", "005273", "005274", "005275", "005276", "005277", "005278", "005279", "005280", "005281", "005282", "005283", "005284", "005285", "005286", "005287", "005288", "005289", "005290", "005291", "005292", "005293", "005294", "005295", "005296", "005297", "005298", "005299", "005300", "005301", "005302", "005303", "005304", "005305", "005306", "005307", "005308", "005309", "005310", "005311", "005312", "005313", "005314", "005315", "005316", "005317", "005318", "005319", "005320", "005321", "005322", "005323", "005324", "005325", "005326", "005327", "005328", "005329", "005330", "005331", "005332", "005333", "005334", "005335", "005336", "005337", "005338", "005339", "005340", "005341", "005342", "005343", "005344", "005345", "005346", "005347", "005348", "005349", "005350", "005351", "005352", "005353", "005354", "005355", "005356", "005357", "005358", "005359", "005360", "005361", "005362", "005363", "005364", "005365", "005366", "005367", "005368", "005369", "005370", "005371", "005372", "005373", "005374", "005375", "005376", "005377", "005378", "005379", "005380", "005381", "005382", "005383", "005384", "005385", "005386", "005387", "005388", "005389", "005390", "005391", "005392", "005393", "005394", "005395", "005396", "005397", "005398", "005399", "005400", "005401", "005402", "005403", "005404", "005405", "005406", "005407", "005408", "005409", "005410", "005411", "005412", "005413", "005414", "005415", "005416", "005417", "005418", "005419", "005420", "005421", "005422", "005423", "005424", "005425", "005426", "005427", "005428", "005429", "005430", "005431", "005432", "005433", "005434", "005435", "005436", "005437", "005438", "005439", "005440", "005441", "005442", "005443", "005444", "005445", "005446", "005447", "005448", "005449", "005450", "005451", "005452", "005453", "005454", "005455", "005456", "005457", "005458", "005459", "005460", "005461", "005462", "005463", "005464", "005465", "005466", "005467", "005468", "005469", "005470", "005471", "005472", "005473", "005474", "005475", "005476", "005477", "005478", "005479", "005480", "005481", "005482", "005483", "005484", "005485", "005486", "005487", "005488", "005489", "005490", "005491", "005492", "005493", "005494", "005495", "005496", "005497", "005498", "005499", "005500", "005501", "005502", "005503", "005504", "005505", "005506", "005507", "005508", "005509", "005510", "005511", "005512", "005513", "005514", "005515", "005516", "005517", "005518", "005519", "005520", "005521", "005522", "005523", "005524", "005525", "005526", "005527", "005528", "005529", "005530", "005531", "005532", "005533", "005534", "005535", "005536", "005537", "005538", "005539", "005540", "005541", "005542", "005543", "005544", "005545", "005546", "005547", "005548", "005549", "005550", "005551", "005552", "005553", "005554", "005555", "005556", "005557", "005558", "005559", "005560", "005561", "005562", "005563", "005564", "005565", "005566", "005567", "005568", "005569", "005570", "005571", "005572", "005573", "005574", "005575", "005576", "005577", "005578", "005579", "005580", "005581", "005582", "005583", "005584", "005585", "005586", "005587", "005588", "005589", "005590", "005591", "005592", "005593", "005594", "005595", "005596", "005597", "005598", "005599", "005600", "005601", "005602", "005933", "005934", "005935", "005936", "005937", "005938", "005939", "005940", "005941", "005942", "005943", "005944", "005945", "005946", "005947", "005948", "005949", "005950", "005951", "005952", "005953", "005954", "005955", "005956", "005957", "005958", "005959", "005960", "005961", "005962", "005963", "005964", "005965", "005966", "005967", "005968", "005969", "005970", "005971", "005972", "005973", "005974", "005975", "005976", "005977", "005978", "005979", "005980", "005981", "005982", "005983", "005984", "005985", "005986", "005987", "005988", "005989", "005990", "005991", "005992", "005993", "005994", "005995", "005996", "005997", "005998", "005999", "006000", "006001", "006002", "006003", "006004", "006005", "006006", "006007", "006008", "006009", "006010", "006011", "006012", "006013", "006014", "006015", "006016", "006017", "006018", "006019", "006020", "006021", "006022", "006023", "006024", "006025", "006026", "006027", "006028", "006029", "006030", "006031", "006032", "006033", "006034", "006035", "006036", "006037", "006038", "006039", "006040", "006041", "006042", "006043", "006044", "006045", "006046", "006047", "006048", "006049", "006050", "006051", "006052", "006053", "006054", "006055", "006056", "006057", "006058", "006059", "006060", "006061", "006062", "006063", "006064", "006065", "006066", "006067", "006068", "006069", "006070", "006071", "006072", "006073", "006074", "006075", "006076", "006077", "006078", "006079", "006080", "006081", "006082", "006083", "006084", "006085", "006086", "006087", "006088", "006089", "006090", "006091", "006092", "006093", "006094", "006095", "006096", "006097", "006098", "006099", "006100", "006101", "006102", "006103", "006104", "006105", "007006", "007007", "007008", "007009", "007010", "007011", "007012", "007013", "007014", "007015", "007016", "007017", "007018", "007019", "007020", "007021", "007022", "007023", "007024", "007025", "007026", "007027", "007028", "007029", "007030", "007031", "007032", "007033", "007034", "007035", "007036", "007037", "007038", "007039", "007040", "007041", "007042", "007043", "007044", "007045", "007046", "007047", "007048", "007049", "007050", "007051", "007052", "007053", "007054", "007055", "007056", "007057", "007058", "007059", "007060", "007061", "007062", "007063", "007064", "007065", "007066", "007067", "007068", "007069", "007070", "007071", "007072", "007073", "007074", "007075", "007076", "007077", "007078", "007079", "007080", "007081", "007082", "007083", "007084", "007085", "007086", "007087", "007088", "007089", "007090", "007091", "007092", "007093", "007094", "007095", "007096", "007097", "007098", "007099", "007100", "007101", "007102", "007103", "007104", "007105", "007106", "007107", "007108", "007109", "007110", "007111", "007112", "007113", "007114", "007115", "007116", "007117", "007118", "007119", "007120", "007121", "007122", "007123", "007124", "007125", "007126", "007127", "007128", "007129", "007130", "007131", "007132", "007133", "007134", "007135", "007136", "007137", "007138", "007139", "007140", "007141", "007142", "007143", "007144", "007145", "007146", "007147", "007148", "007149", "007150", "007151", "007152", "007153", "007154", "007155", "007156", "007157", "007158", "007159", "007160", "007161", "007162", "007163", "007164", "007165", "007166", "007167", "007168", "007169", "007170", "007171", "007172", "007173", "007174", "007175", "007176", "007177", "007178", "007179", "007180", "007181", "007182", "007183", "007184", "007185", "007186", "007187", "007188", "007189", "007190", "007191", "007192", "007193", "007194", "007195", "007196", "007197", "007198", "007199", "007200", "007201", "007202", "007203", "007204", "007205", "007206", "007207", "007208", "007209", "007210", "007211", "007212", "007213", "007214", "007215", "007216", "007217", "007218", "007219", "007220", "007221", "007222", "007223", "007224", "007225", "007226", "007227", "007228", "007229", "007230", "007231", "007232", "007233", "007234", "007235", "007236", "007237", "007238", "007239", "007240", "007241", "007242", "007243", "007244", "007245", "007246", "007247", "007248", "007249", "007250", "007251", "007252", "007253", "007254", "007255", "007256", "007257", "007258", "007259", "007260", "007261", "007262", "007263", "007264", "007265", "007266", "007267", "007268", "007269", "007270", "007271", "007272", "007273", "007274", "007275", "007276", "007277", "007278", "007279", "007280", "007281", "007282", "007283", "007284", "007285", "007286", "007287", "007288", "007289", "007290", "007291", "007292", "007293", "007294", "007295", "007296", "007297", "007298", "007299", "007300", "007301", "007302", "007303", "007304", "007305", "007306", "007307", "007308", "007309", "007310", "007311", "007312", "007313", "007314", "007315", "007316", "007317", "007318", "007319", "007320", "007321", "007322", "007323", "007324", "007325", "007326", "007327", "007328", "007329", "007330", "007331", "007332", "007333", "007334", "007335", "007336", "007337", "007338", "007339", "007340", "007341", "007342", "007343", "007344", "007345", "007346", "007347", "007348", "007349", "007350", "007351", "007352", "007353", "007354", "007355", "007356", "007357", "007358", "007359", "007360", "007361", "007362", "007363", "007364", "007365", "007366", "007367", "007368", "007369", "007370", "007371", "007372", "007373", "007374", "007375", "007376", "007377", "007378", "007379", "007380", "007381", "007382", "007383", "007384", "007385", "007386", "007387", "007388", "007389", "007390", "007391", "007392", "007393", "007394", "007395", "007396", "007397", "007398", "007399", "007400", "007401", "007402", "007403", "007404", "007405", "007406", "007407", "007408", "007409", "007410", "007411", "007412", "007413", "007414", "007415", "007416", "007417", "007418", "007419", "007420", "007421", "007422", "007423", "007424", "007425", "007426", "007427", "007428", "007429", "007430", "007431", "007432", "007433", "007434", "007435", "007436", "007437", "007438", "007439", "007440", "007441", "007442", "007443", "007444", "007985", "007986", "007987", "007988", "007989", "007990", "007991", "007992", "007993", "007994", "007995", "007996", "007997", "007998", "007999", "008000", "008001", "008002", "008003", "008004", "008005", "008006", "008007", "008008", "008009", "008010", "008011", "008012", "008013", "008014", "008015", "008016", "008017", "008018", "008019", "008020", "008021", "008022", "008023", "008024", "008025", "008026", "008027", "008028", "008029", "008030", "008031", "008032", "008033", "008034", "008035", "008036", "008037", "008038", "008039", "008040", "008041", "008042", "008043", "008044", "008045", "008046", "008047", "008048", "008049", "008050", "008051", "008052", "008053", "008054", "008055", "008056", "008057", "008058", "008059", "008060", "008061", "008062", "008063", "008064", "008065", "008066", "008067", "008068", "008069", "008070", "008071", "008072", "008073", "008074", "008075", "008076", "008077", "008078", "008079", "008080", "008081", "008082", "008083", "008084", "008085", "008086", "008087", "008088", "008089", "008090", "008091", "008092", "008093", "008094", "008095", "008096", "008097", "008098", "008099", "008100", "008101", "008102", "008103", "008104", "008105", "008106", "008107", "008108", "008109", "008110", "008111", "008112", "008113", "008114", "008115", "008116", "008117", "008118", "008119", "008120", "008121", "008122", "008123", "008124", "008125", "008126", "008127", "008128", "008129", "008130", "008131", "008132", "008133", "008134", "008135", "008136", "008137", "008138", "008139", "008140", "008141", "008142", "008143", "008144", "008145", "008146", "008147", "008148", "008149", "008150", "008151", "008152", "008153", "008154", "008155", "008156", "008157", "008158", "008159", "008160", "008161", "008162", "008163", "008164", "008165", "008166", "008167", "008168", "008169", "008170", "008171", "008172", "008173", "008174", "008175", "008176", "008177", "008178", "008179", "008180", "008181", "008182", "008183", "008184", "008185", "008186", "008187", "008188", "008189", "008190", "008191", "008192", "008193", "008194", "008195", "008196", "008197", "008198", "008199", "008200", "008201", "008202", "008203", "008204", "008205", "008206", "008207", "008208", "008209", "008210", "008211", "008212", "008213", "008214", "008215", "008216", "008217", "008218", "008219", "008220", "008221", "008222", "008223", "008224", "008225", "008226", "008227", "008228", "008229", "008230", "008231", "008232", "008233", "008234", "008235", "008236", "008237", "008238", "008239", "008240", "008241", "008242", "008243", "008244", "008245", "008246", "008247", "008248", "008249", "008250", "008251", "008252", "008253", "008254", "008255", "008256", "008257", "008258", "008259", "008260", "008261", "008262", "008263", "008264", "008265", "008266", "008267", "008268", "008269", "008270", "008271", "008272", "008273", "008274", "008275", "008276", "008277", "008278", "008279", "008280", "008281", "008282", "008283", "008284", "008285", "008286", "008287", "008288", "008289", "008290", "008291", "008292", "008293", "008294", "008295", "008296", "008297", "008298", "008299", "008300", "008301", "008302", "008303", "008304", "008305", "008306", "008307", "008308", "008309", "008310", "008311", "008312", "008313", "008314", "008315", "008316", "008317", "008318", "008319", "008320", "008321", "008322", "008323", "008324", "008325", "008326", "008327", "008328", "008329", "008330", "008331", "008332", "008333", "008334", "008335", "008336", "008337", "008338", "008339", "008340", "008341", "008342", "008343", "008344", "008345", "008346", "008347", "008348", "008349", "008350", "008351", "008352", "008353", "008354", "008355", "008356", "008357", "008358", "008359", "008360", "008361", "008362", "008363", "008364", "008365", "008366", "008367", "008368", "008369", "008370", "008371", "008372", "008373", "008374", "008375", "008376", "008377", "008378", "008379", "008380", "008381", "008382", "008383", "008384", "008385", "008386", "008387", "008388", "008389", "008390", "008391", "008392", "008393", "008394", "008395", "008396", "008397", "008398", "008399", "008400", "008401", "008402", "008403", "008404", "008405", "008406", "008407", "008408", "008409", "008410", "008411", "008412", "008413", "008414", "008415", "008416", "008417", "008418", "008419", "008420", "008421", "008422", "008423", "008424", "008425", "008426", "008427", "008428", "008429", "008430", "008431", "008432", "008433", "008434", "008435", "008436", "008437", "008438", "008439", "008440", "008441", "008442", "008443", "008444", "008445", "008446", "008447", "008448", "008449", "008450", "008451", "008452", "008453", "008454", "008455", "008456", "008457", "008458", "008459", "008460", "008461", "008462", "008463", "008464", "008465", "008466", "008467", "008468", "008469", "008470", "008471", "008472", "008473", "008474", "008475", "008476", "008477", "008478", "008479", "008480", "008481", "008482", "008483", "008484", "008485", "008486", "008487", "008488", "008489", "008490", "008491", "008492", "008493", "008494", "008495", "008496", "008497", "008498", "008499", "008500", "008501", "008502", "008503", "008504", "008505", "008506", "008507", "008508", "008509", "008510", "008511", "008512", "008513", "008514", "008515", "008516", "008517", "008518", "008519", "008520", "008521", "008522", "008523", "008524", "008525", "008526", "008527", "008528", "008529", "008530", "008531", "008532", "008533", "008534", "008535", "008536", "008537", "008538", "008539", "008540", "008541", "008542", "008543", "008544", "008545", "008546", "008547", "008548", "008549", "008550", "008551", "008552", "008553", "008554", "008555", "008556", "008557", "008558", "008559", "008560", "008561", "008562", "008563", "008564", "008565", "008566", "008567", "008568", "008569", "008570", "008571", "008572", "008573", "008574", "008575", "008576", "008577", "008578", "008579", "008580", "008581", "008582", "008583", "008584", "008585", "008586", "008587", "008588", "008589", "008590", "008591", "008592", "008593", "008594", "008595", "008596", "008597", "008598", "008599", "008600", "008601", "008602", "008603", "008604", "008605", "008606", "008607", "008608", "008609", "008610", "008611", "008612", "008613", "008614", "008615", "008616", "008617", "008618", "008619", "008620", "008621", "008622", "008623", "008624", "008625", "008626", "008627", "008628", "008629", "008630", "008631", "008632", "008633", "008634", "008635", "008636", "008637", "008638", "008639", "008640", "008641", "008642", "008643", "008644", "008645", "008646", "008647", "008648", "008649", "008650", "008651", "008652", "008653", "008654", "008655", "008656", "008657", "008658", "008659", "008660", "008661", "008662", "008663", "008664", "009470", "009471", "009472", "009473", "009474", "009475", "009476", "009477", "009478", "009479", "009480", "009481", "009482", "009483", "009484", "009485", "009486", "009487", "009488", "009489", "009490", "009491", "009492", "009493", "009494", "009495", "009496", "009497", "009498", "009499", "009500", "009501", "009502", "009503", "009504", "009505", "009506", "009507", "009508", "009509", "009510", "009511", "009512", "009513", "009514", "009515", "009516", "009517", "009518", "009519", "009520", "009521", "009522", "009523", "009524", "009525", "009526", "009527", "009528", "009529", "009530", "009531", "009532", "009533", "009534", "009535", "009536", "009537", "009538", "009539", "009540", "009541", "009542", "009543", "009544", "009545", "009546", "009547", "009548", "009549", "009550", "009551", "009552", "009553", "009554", "009555", "009556", "009557", "009558", "009559", "009560", "009561", "009562", "009563", "009564", "009565", "009566", "009567", "009568", "009569", "009570", "009571", "009572", "009573", "009574", "009575", "009576", "009577", "009578", "009579", "009580", "009581", "009582", "009583", "009584", "009585", "009586", "009587", "009588", "009589", "009590", "009591", "009592", "009593", "009594", "009595", "009596", "009597", "009598", "009599", "009600", "009601", "009602", "009603", "009604", "009605", "009606", "009607", "009608", "009609", "009610", "009611", "009612", "009613", "009614", "009615", "009616", "009617", "009618", "009619", "009620", "009621", "009622", "009623", "009624", "009625", "009626", "009627", "009628", "009629", "009630", "009631", "009632", "009633", "009634", "009635", "009636", "009637", "009638", "009639", "009640", "009641", "009642", "009643", "009644", "009645", "009646", "009647", "009648", "009649", "009650", "009651", "009652", "009653", "009654", "009655", "009656", "009657", "009658", "009659", "009660", "009661", "009662", "009663", "009664", "009665", "009666", "009667", "009668", "009669", "009670", "009671", "009672", "009673", "009674", "009675", "009676", "009677", "009678", "009679", "009820", "009821", "009822", "009823", "009824", "009825", "009826", "009827", "009828", "009829", "009830", "009831", "009832", "009833", "009834", "009835", "009836", "009837", "009838", "009839", "009840", "009841", "009842", "009843", "009844", "009845", "009846", "009847", "009848", "009849", "009850", "009851", "009852", "009853", "009854", "009855", "009856", "009857", "009858", "009859", "009860", "009861", "009862", "009863", "009864", "009865", "009866", "009867", "009868", "009869", "009870", "009871", "009872", "009873", "009874", "009875", "009876", "009877", "009878", "009879", "009880", "009881", "009882", "009883", "009884", "009885", "009886", "009887", "009888", "009889", "009890", "009891", "009892", "009893", "009894", "009895", "009896", "009897", "009898", "009899", "009900", "009901", "009902", "009903", "009904", "009905", "009906", "009907", "009908", "009909", "009910", "009911", "009912", "009913", "009914", "009915", "009916", "009917", "009918", "009919", "009920", "009921", "009922", "009923", "009924", "009925", "009926", "009927", "009928", "009929", "009930", "009931", "009932", "009933", "009934", "009935", "009936", "009937", "009938", "009939", "009940", "009941", "009942", "009943", "009944", "009945", "009946", "009947", "009948", "009949", "009950", "009951", "009952", "009953", "009954", "009955", "009956", "009957", "009958", "009959", "009960", "009961", "009962", "009963", "009964", "009965", "009966", "009967", "009968", "009969", "009970", "009971", "009972", "009973", "009974", "009975", "009976", "009977", "009978", "009979", "009980", "009981", "009982", "009983", "009984", "009985", "009986", "009987", "009988", "009989", "009990", "009991", "009992", "009993", "009994", "009995", "009996", "009997", "009998", "009999", "010000", "010001", "010002", "010003", "010004", "010005", "010006", "010007", "010008", "010009", "012051", "012052", "012053", "012054", "012055", "012056", "012057", "012058", "012059", "012060", "012061", "012062", "012063", "012064", "012065", "012066", "012067", "012068", "012069", "012070", "012071", "012072", "012073", "012074", "012075", "012076", "012077", "012078", "012079", "012080", "012081", "012082", "012083", "012084", "012085", "012086", "012087", "012088", "012089", "012090", "012091", "012092", "012093", "012094", "012095", "012096", "012097", "012098", "012099", "012100", "012101", "012102", "012103", "012104", "012105", "012106", "012107", "012108", "012109", "012110", "012111", "012112", "012113", "012114", "012115", "012116", "012117", "012118", "012119", "012120", "012121", "012122", "012123", "012124", "012125", "012126", "012127", "012128", "012129", "012130", "012131", "012132", "012133", "012134", "012135", "012136", "012137", "012138", "012139", "012140", "012141", "012142", "012143", "012144", "012145", "012146", "012147", "012148", "012149", "012150", "012151", "012152", "012153", "012154", "012155", "012156", "012157", "012158", "012159", "012160", "012161", "012162", "012163", "012164", "012165", "012166", "012167", "012168", "012169", "012170", "012171", "012172", "012173", "012174", "012175", "012176", "012177", "012178", "012179", "012180", "012181", "012182", "012183", "012184", "012185", "012186", "012187", "012188", "012189", "012190", "012191", "012192", "012193", "012194", "012195", "012196", "012197", "012198", "012199", "012200", "012201", "012202", "012203", "012204", "012205", "012206", "012207", "012208", "012209", "012210", "012211", "012212", "012213", "012214", "012215", "012216", "012217", "012218", "012219", "012220", "012221", "012222", "012223", "012224", "012225", "012226", "012227", "012228", "012229", "012230", "012231", "012232", "012233", "012234", "012235", "012236", "012237", "012238", "012239", "012240", "012241", "012242", "012243", "012244", "012245", "012246", "012247", "012248", "012249", "012250", "012251", "012252", "012253", "012254", "012255", "012256", "012257", "012258", "012259", "012260", "012261", "012262", "012263", "012264", "012265", "012266", "012267", "012268", "012269", "012270", "012271", "012272", "012273", "012274", "012275", "012276", "012277", "012278", "012279", "012280", "012281", "012282", "012283", "012284", "012285", "012286", "012287", "012288", "012289", "012290", "012291", "012292", "012293", "012294", "012295", "012296", "012297", "012298", "012299", "012300", "012301", "012302", "012303", "012304", "012305", "012306", "012307", "012308", "012309", "012310", "012311", "012312", "012313", "012314", "012315", "012316", "012317", "012318", "012319", "012320", "012321", "012322", "012323", "012324", "012325", "012326", "012327", "012328", "012329", "012330", "012331", "012332", "012333", "012334", "012335", "012336", "012337", "012338", "012339", "012340", "012341", "012342", "012343", "012344", "012345", "012346", "012347", "012348", "012349", "012350", "012351", "012352", "012353", "012354", "012355", "012356", "012357", "012358", "012359", "012360", "012361", "012362", "012363", "012364", "012365", "012366", "012367", "012368", "012369", "012370", "012371", "012372", "012373", "012374", "012375", "012376", "012377", "012378", "012379", "012380", "012381", "012382", "012383", "012384", "012385", "012386", "012387", "012388", "012389", "012390", "012391", "012392", "012393", "012394", "012395", "012396", "012397", "012398", "012399", "012400", "012401", "012402", "012403", "012404", "012405", "012406", "012407", "012408", "012409", "012798", "012799", "012800", "012801", "012802", "012803", "012804", "012805", "012806", "012807", "012808", "012809", "012810", "012811", "012812", "012813", "012814", "012815", "012816", "012817", "012818", "012819", "012820", "012821", "012822", "012823", "012824", "012825", "012826", "012827", "012828", "012829", "012830", "012831", "012832", "012833", "012834", "012835", "012836", "012837", "012838", "012839", "012840", "012841", "012842", "012843", "012844", "012845", "012846", "012847", "012848", "012849", "012850", "012851", "012852", "012853", "012854", "012855", "012856", "012857", "012858", "012859", "012860", "012861", "012862", "012863", "012864", "012865", "012866", "012867", "012868", "012869", "012870", "012871", "012872", "012873", "012874", "012875", "012876", "012877", "012878", "012879", "012880", "012881", "012882", "012883", "012884", "012885", "012886", "012887", "012888", "012889", "012890", "012891", "012892", "012893", "012894", "012895", "012896", "012897", "012898", "012899", "012900", "012901", "012902", "012903", "012904", "012905", "012906", "012907", "012908", "012909", "012910", "012911", "012912", "012913", "012914", "012915", "012916", "012917", "012918", "012919", "012920", "012921", "012922", "012923", "012924", "012925", "012926", "012927", "012928", "012929", "012930", "012931", "012932", "012933", "012934", "012935", "012936", "012937", "012938", "012939", "012940", "012941", "012942", "012943", "012944", "012945", "012946", "012947", "012948", "012949", "012950", "012951", "012952", "012953", "012954", "012955", "012956", "012957", "013318", "013319", "013320", "013321", "013322", "013323", "013324", "013325", "013326", "013327", "013328", "013329", "013330", "013331", "013332", "013333", "013334", "013335", "013336", "013337", "013338", "013339", "013340", "013341", "013342", "013343", "013344", "013345", "013346", "013347", "013348", "013349", "013350", "013351", "013352", "013353", "013354", "013355", "013356", "013357", "013358", "013359", "013360", "013361", "013362", "013363", "013364", "013365", "013366", "013367", "013368", "013369", "013370", "013371", "013372", "013373", "013374", "013375", "013376", "013377", "013378", "013379", "013380", "013381", "013382", "013383", "013384", "013385", "013386", "013387", "013388", "013389", "013390", "013391", "013392", "013393", "013394", "013395", "013396", "013397", "013398", "013399", "013400", "013401", "013402", "013403", "013404", "013405", "013406", "013407", "013408", "013409", "013410", "013411", "013412", "013413", "013414", "013415", "013416", "013417", "013418", "013419", "013420", "013421", "013422", "013423", "013424", "013425", "013426", "013427", "013428", "013429", "013430", "013431", "013432", "013433", "013434", "013435", "013436", "013437", "013438", "013439", "013440", "013441", "013442", "013443", "013444", "013445", "013446", "013447", "013448", "013449", "013450", "013451", "013452", "013453", "013454", "013455", "013456", "013457", "013458", "013459", "013460", "013461", "013462", "013463", "013464", "013465", "013466", "013467", "013468", "013469", "013470", "013471", "013472", "013473", "013474", "013475", "013476", "013477", "013478", "013479", "013480", "013481", "013482", "013483", "013484", "013485", "013486", "013487", "013488", "013489", "013490", "013491", "013492", "013493", "013494", "013495", "013496", "013497", "013498", "013499", "013500", "013501", "013502", "013503", "013504", "013505", "013506", "013507", "014397", "014398", "014399", "014400", "014401", "014402", "014403", "014404", "014405", "014406", "014407", "014408", "014409", "014410", "014411", "014412", "014413", "014414", "014415", "014416", "014417", "014418", "014419", "014420", "014421", "014422", "014423", "014424", "014425", "014426", "014427", "014428", "014429", "014430", "014431", "014432", "014433", "014434", "014435", "014436", "014437", "014438", "014439", "014440", "014441", "014442", "014443", "014444", "014545", "014546", "014547", "014548", "014549", "014550", "014551", "014552", "014553", "014554", "014555", "014556", "014557", "014558", "014559", "014560", "014561", "014562", "014563", "014564", "014565", "014566", "014567", "014568", "014569", "014570", "014571", "014572", "014573", "014574", "014575", "014576", "014577", "014578", "014579", "014580", "014581", "014582", "014583", "014584", "014585", "014586", "014587", "014588", "014589", "014590", "014591", "014592", "014593", "014594", "014595", "014596", "014597", "014598", "014599", "014600", "014601", "014602", "014603", "014604", "014605", "014606", "014607", "014608", "014609", "014610", "014611", "014612", "014613", "014614", "014615", "014616", "014617", "014618", "014619", "014620", "014621", "014622", "014623", "014624", "014625", "014626", "014627", "014628", "014629", "014630", "014631", "014632", "014633", "014634", "014635", "014636", "014637", "014638", "014639", "014640", "014641", "014642", "014643", "014644", "014645", "014646", "014647", "014648", "014649", "014650", "014651", "014652", "014653", "014654", "014655", "014656", "014657", "014658", "014659", "014660", "014661", "014662", "014663", "014664", "015705", "015706", "015707", "015708", "015709", "015710", "015711", "015712", "015713", "015714", "015715", "015716", "015717", "015718", "015719", "015720", "015721", "015722", "015723", "015724", "015725", "015726", "015727", "015728", "015729", "015730", "015731", "015732", "015733", "015734", "015735", "015736", "015737", "015738", "015739", "015740", "015741", "015742", "015743", "015744", "015745", "015746", "015747", "015748", "015749", "015750", "015751", "015752", "015753", "015754", "015755", "015756", "015757", "015758", "015759", "015760", "015761", "015762", "015763", "015764", "015765", "015766", "015767", "015768", "015769", "015770", "015771", "015772", "015773", "015774", "015775", "015776", "015777", "015778", "015779", "015780", "015781", "015782", "015783", "015784", "015785", "015786", "015787", "015788", "015789", "015790", "015791", "015792", "015793", "015794", "015795", "015796", "015797", "015798", "015799", "015800", "015801", "015802", "015803", "015804", "018525", "018526", "018527", "018528", "018529", "018530", "018531", "018532", "018533", "018534", "018535", "018536", "018537", "018538", "018539", "018540", "018541", "018542", "018543", "018544", "018545", "018546", "018547", "018548", "018549", "018550", "018551", "018552", "018553", "018554", "018555", "018556", "018557", "018558", "018559", "018560", "018561", "018562", "018563", "018564", "018565", "018566", "018567", "018568", "018569", "018570", "018571", "018572", "018573", "018574", "018575", "018576", "018577", "018578", "018579", "018580", "018581", "018582", "018583", "018584", "018585", "018586", "018587", "018588", "018589", "018590", "018591", "018592", "018593", "018594", "018595", "018596", "018597", "018598", "018599", "018600", "018601", "018602", "018603", "018604", "018605", "018606", "018607", "018608", "018609", "018610", "018611", "018612", "018613", "018614", "018615", "018616", "018617", "018618", "018619", "018620", "018621", "018622", "018623", "018624", "018625", "018626", "018627", "018628", "018629", "018630", "018631", "018632", "018633", "018634", "018635", "018636", "018637", "018638", "018639", "018640", "018641", "018642", "018643", "018644", "018655", "018656", "018657", "018658", "018659", "018660", "018661", "018662", "018663", "018664", "018665", "018666", "018667", "018668", "018669", "018670", "018671", "018672", "018673", "018674", "018675", "018676", "018677", "018678", "018679", "018680", "018681", "018682", "018683", "018684", "018685", "018686", "018687", "018688", "018689", "018690", "018691", "018692", "018693", "018694", "018695", "018696", "018697", "018698", "018699", "018700", "018701", "018702", "018703", "018704", "018705", "018706", "018707", "018708", "018709", "018710", "018711", "018712", "018713", "018714", "018715", "018716", "018717", "018718", "018719", "018720", "018721", "018722", "018723", "018724", "018725", "018726", "018727", "018728", "018729", "018730", "018731", "018732", "018733", "018734", "018735", "018736", "018737", "018738", "018739", "018740", "018741", "018742", "018743", "018744", "018745", "018746", "018747", "018748", "018749", "018750", "018751", "018752", "018753", "018754", "018755", "018756", "018757", "018758", "018759", "018760", "018761", "018762", "018763", "018764", "018765", "018766", "018767", "018768", "018769", "018770", "018771", "018772", "018773", "018774", "018775", "018776", "018777", "018778", "018779", "018780", "018781", "018782", "018783", "018784", "018785", "018786", "018787", "018788", "018789", "018790", "018791", "018792", "018793", "018794", "018795", "018796", "018797", "018798", "018799", "018800", "018801", "018802", "018803", "018804", "018805", "018806", "018807", "018808", "018809", "018810", "018811", "018812", "018813", "018814", "018815", "018816", "018817", "018818", "018819", "018820", "018821", "018822", "018823", "018824", "018825", "018826", "018827", "018828", "018829", "018830", "018831", "018832", "018833", "018834", "018835", "018836", "018837", "018838", "018839", "018840", "018841", "018842", "018843", "018844", "018845", "018846", "018847", "018848", "018849", "018850", "018851", "018852", "018853", "018854", "018855", "018856", "018857", "018858", "018859", "018860", "018861", "018862", "018863", "018864", "018865", "018866", "018867", "018868", "018869", "018870", "018871", "018872", "018873", "018874", "018875", "018876", "018877", "018878", "018879", "018880", "018881", "018882", "018883", "018884", "019085", "019086", "019087", "019088", "019089", "019090", "019091", "019092", "019093", "019094", "019095", "019096", "019097", "019098", "019099", "019100", "019101", "019102", "019103", "019104", "019105", "019106", "019107", "019108", "019109", "019110", "019111", "019112", "019113", "019114", "019115", "019116", "019117", "019118", "019119", "019120", "019121", "019122", "019123", "019124", "019125", "019126", "019127", "019128", "019129", "019130", "019131", "019132", "019133", "019134", "019135", "019136", "019137", "019138", "019139", "019140", "019141", "019142", "019143", "019144", "019145", "019146", "019147", "019148", "019149", "019150", "019151", "019152", "019153", "019154", "019155", "019156", "019157", "019158", "019159", "019160", "019161", "019162", "019163", "019164", "019165", "019166", "019167", "019168", "019169", "019170", "019171", "019172", "019173", "019174", "019175", "019176", "019177", "019178", "019179", "019180", "019181", "019182", "019183", "019184", "019185", "019186", "019187", "019188", "019189", "019190", "019191", "019192", "019193", "019194", "019195", "019196", "019197", "019198", "019199", "019200", "019201", "019202", "019203", "019204", "019205", "019206", "019207", "019208", "019209", "019210", "019211", "019212", "019213", "019214", "019215", "019216", "019217", "019218", "019219", "019220", "019221", "019222", "019223", "019224", "019225", "019226", "019227", "019228", "019229", "019230", "019231", "019232", "019233", "019234", "019235", "019236", "019237", "019238", "019239", "019240", "019241", "019242", "019243", "019244", "019245", "019246", "019247", "019248", "019249", "019250", "019251", "019252", "019253", "019254", "019255", "019256", "019257", "019258", "019259", "019260", "019261", "019262", "019263", "019264", "019265", "019266", "019267", "019268", "019269", "019270", "019271", "019272", "019273", "019274", "019275", "019276", "019277", "019278", "019279", "019280", "019281", "019282", "019283", "019284", "019285", "019286", "019287", "019288", "019289", "019290", "019291", "019292", "019293", "019294", "019295", "019296", "019297", "019298", "019299", "019300", "019301", "019302", "019303", "019304", "019305", "019306", "019307", "019308", "019309", "019310", "019311", "019312", "019313", "019314", "019315", "019316", "019317", "019318", "019319", "019320", "019321", "019322", "019323", "019324", "019325", "019326", "019327", "019328", "019329", "019330", "019331", "019332", "019333", "019334", "019335", "019336", "019337", "019338", "019339", "019340", "019341", "019342", "019343", "019344", "019345", "019346", "019347", "019348", "019349", "019350", "019351", "019352", "019353", "019354", "019355", "019356", "019357", "019358", "019359", "019360", "019361", "019362", "019363", "019364", "019365", "019366", "019367", "019368", "019369", "019370", "019371", "019372", "019373", "019374", "019375", "019376", "019377", "019378", "019379", "019380", "019381", "019382", "019383", "019384", "019385", "019386", "019387", "019388", "019389", "019390", "019391", "019392", "019393", "019394", "019395", "019396", "019397", "019398", "019399", "019400", "019401", "019402", "019403", "019404", "019405", "019406", "019407", "019408", "019409", "019410", "019411", "019412", "019413", "019414", "019415", "019416", "019417", "019418", "019419", "019420", "019421", "019422", "019423", "019424", "019425", "019426", "019427", "019428", "019429", "019430", "019431", "019432", "019433", "019434", "019435", "019436", "019437", "019438", "019439", "019440", "019441", "019442", "019443", "019444", "019445", "019446", "019447", "019448", "019449", "019450", "019451", "019452", "019453", "019454", "019455", "019456", "019457", "019458", "019459", "019460", "019461", "019462", "019463", "019464", "019465", "019466", "019467", "019468", "019469", "019470", "019471", "019472", "019473", "019474", "019475", "019476", "019477", "019478", "019479", "019480", "019481", "019482", "019483", "019484", "019485", "019486", "019487", "019488", "019489", "019490", "019491", "019492", "019493", "019494", "019495", "019496", "019497", "019498", "019499", "019500", "019501", "019502", "019503", "019504", "019505", "019506", "019507", "019508", "019509", "019510", "019511", "019512", "019513", "019514"], "test_A": ["001476", "001477", "001478", "001479", "001480", "001481", "001482", "001483", "001484", "001485", "001486", "001487", "001488", "001489", "001490", "001491", "001492", "001493", "001494", "001495", "001496", "001497", "001498", "001499", "001500", "001501", "001502", "001503", "001504", "001505", "001506", "001507", "001508", "001509", "001510", "001511", "001512", "001513", "001514", "002065", "002066", "002067", "002068", "002069", "002070", "002071", "002072", "002073", "002074", "002075", "002076", "002077", "002078", "002079", "002080", "002081", "002082", "002083", "002084", "002085", "002086", "002087", "002088", "002089", "002090", "002091", "002092", "002093", "002094", "002095", "002096", "002097", "002098", "002099", "002100", "002101", "002102", "002103", "002104", "002105", "002106", "002107", "002108", "002109", "002110", "002111", "002112", "002113", "002114", "002115", "002116", "002117", "002118", "002119", "002120", "002121", "002122", "002123", "002124", "002125", "002126", "002127", "002128", "002129", "002130", "002131", "002132", "002133", "002134", "002135", "002136", "002137", "002138", "002139", "002140", "002141", "002142", "002143", "002144", "002145", "002146", "002147", "002148", "002149", "002150", "002151", "002152", "002153", "002154", "002155", "002156", "002157", "002158", "002159", "002160", "002161", "002162", "002163", "002164", "002165", "002166", "002167", "002168", "002169", "002170", "002171", "002172", "002173", "002174", "002175", "002176", "002177", "002178", "002179", "002180", "002181", "002182", "002183", "002184", "002185", "002186", "002187", "002188", "002189", "002190", "002191", "002192", "002193", "002194", "002195", "002196", "002197", "002198", "002199", "002200", "002201", "002202", "002203", "002204", "002205", "002206", "002207", "002208", "002209", "002210", "002211", "002212", "002213", "002214", "002215", "002216", "002217", "002218", "002219", "002220", "002221", "002222", "002223", "002224", "002225", "002226", "002227", "002228", "002229", "002230", "002231", "002232", "002233", "002882", "002883", "002884", "002885", "002886", "002887", "002888", "002889", "002890", "002891", "002892", "002893", "002894", "002895", "002896", "002897", "002898", "002899", "002900", "002901", "002902", "002903", "002904", "002905", "002906", "002907", "002908", "002909", "002910", "002911", "002912", "002913", "002914", "002915", "002916", "002917", "002918", "002919", "002920", "002921", "002922", "002923", "002924", "002925", "002926", "002927", "002928", "002929", "002930", "002931", "002932", "002933", "002934", "002935", "002936", "002937", "002938", "002939", "002940", "002941", "002942", "002943", "002944", "002945", "002946", "002947", "002948", "002949", "002950", "002951", "002952", "002953", "002954", "002955", "002956", "002957", "002958", "002959", "002960", "002961", "002962", "002963", "002964", "002965", "002966", "002967", "002968", "002969", "002970", "002971", "002972", "002973", "002974", "002975", "002976", "002977", "002978", "002979", "002980", "002981", "002982", "002983", "002984", "002985", "002986", "002987", "002988", "002989", "002990", "002991", "002992", "002993", "002994", "002995", "002996", "002997", "002998", "002999", "003000", "003001", "003002", "003003", "003004", "003005", "003006", "003007", "003008", "003009", "003010", "003011", "003012", "003013", "003014", "003015", "003016", "003017", "003018", "003019", "003020", "003021", "003022", "003023", "003024", "003025", "003026", "003027", "003028", "003029", "003030", "003031", "003032", "003033", "003034", "003035", "003036", "003037", "003038", "003039", "003040", "003041", "003042", "003043", "003044", "003045", "003046", "003047", "003048", "003049", "003050", "003051", "003052", "003053", "003054", "003055", "003056", "005074", "005075", "005076", "005077", "005078", "005079", "005080", "005081", "005082", "005083", "005084", "005085", "005086", "005087", "005088", "005089", "005090", "005091", "005092", "005093", "005094", "005095", "005096", "005097", "005098", "005099", "005100", "005101", "005102", "005103", "005104", "005105", "005106", "005107", "005108", "005109", "005110", "005111", "005112", "005113", "005114", "005115", "005116", "005117", "005118", "005119", "005120", "005121", "005122", "005123", "005124", "005125", "005126", "005127", "005128", "005129", "005130", "005131", "005132", "005133", "005134", "005135", "005136", "005137", "005138", "005139", "005140", "005141", "005142", "005143", "005144", "005145", "005146", "005147", "005148", "005149", "005150", "005151", "005152", "005153", "005154", "005155", "005156", "005157", "005158", "005159", "005160", "005161", "005162", "005163", "005164", "005165", "005166", "005167", "005168", "005169", "005170", "005171", "005172", "005173", "005174", "005175", "005176", "005177", "005178", "005179", "005180", "005181", "005182", "005183", "005184", "005185", "005186", "005187", "005188", "005189", "005190", "005191", "005192", "005193", "005194", "005195", "005196", "005197", "005198", "005199", "005200", "005201", "005202", "005203", "005204", "005205", "005206", "005207", "005208", "005209", "005210", "005211", "005212", "005213", "005214", "005215", "005216", "005217", "005218", "005219", "005220", "005221", "005222", "005223", "005224", "005225", "005226", "005227", "005228", "005229", "005230", "005231", "005232", "005233", "005234", "005235", "005236", "005237", "005238", "005239", "005240", "005241", "005242", "005243", "005244", "005245", "005246", "005247", "005248", "005249", "005250", "005251", "005252", "007006", "007007", "007008", "007009", "007010", "007011", "007012", "007013", "007014", "007015", "007016", "007017", "007018", "007019", "007020", "007021", "007022", "007023", "007024", "007025", "007026", "007027", "007028", "007029", "007030", "007031", "007032", "007033", "007034", "007035", "007036", "007037", "007038", "007039", "007040", "007041", "007042", "007043", "007044", "007045", "007046", "007047", "007048", "007049", "007050", "007051", "007052", "007053", "007054", "007055", "007056", "007057", "007058", "007059", "007060", "007061", "007062", "007063", "007064", "007065", "007066", "007067", "007068", "007069", "007070", "007071", "007072", "007073", "007074", "007075", "007076", "007077", "007078", "007079", "007080", "007081", "007082", "007083", "007084", "007085", "007086", "007087", "007088", "007089", "007090", "007091", "007092", "007093", "007094", "007095", "007096", "007097", "007098", "007099", "007100", "007101", "007102", "007103", "007104", "007105", "007106", "007107", "007108", "007109", "007110", "007111", "007112", "007113", "007114", "007115", "007116", "007117", "007118", "007119", "007120", "007121", "007122", "007123", "007124", "007125", "007126", "007127", "007128", "007129", "007130", "007131", "007132", "007133", "007134", "007135", "007136", "007137", "007138", "007139", "007140", "007141", "007142", "007143", "007144", "007145", "007146", "007147", "007148", "007149", "007150", "007151", "007152", "007153", "007154", "007155", "007156", "007157", "007158", "007159", "007160", "007161", "007162", "007163", "007164", "007165", "007166", "007167", "007168", "007169", "007170", "007171", "007172", "007173", "007174", "007175", "007176", "007177", "007178", "007179", "007180", "007181", "007182", "007183", "007184", "007185", "007186", "007187", "007188", "007189", "007190", "007191", "007192", "007193", "007194", "008155", "008156", "008157", "008158", "008159", "008160", "008161", "008162", "008163", "008164", "008165", "008166", "008167", "008168", "008169", "008170", "008171", "008172", "008173", "008174", "008175", "008176", "008177", "008178", "008179", "008180", "008181", "008182", "008183", "008184", "008185", "008186", "008187", "008188", "008189", "008190", "008191", "008192", "008193", "008194", "008195", "008196", "008197", "008198", "008199", "008200", "008201", "008202", "008203", "008204", "008205", "008206", "008207", "008208", "008209", "008210", "008211", "008212", "008213", "008214", "008215", "008216", "008217", "008218", "008219", "008220", "008221", "008222", "008223", "008224", "008225", "008226", "008227", "008228", "008229", "008230", "008231", "008232", "008233", "008234", "008235", "008236", "008237", "008238", "008239", "008240", "008241", "008242", "008243", "008244", "008245", "008246", "008247", "008248", "008249", "008250", "008251", "008252", "008253", "008254", "008255", "008256", "008257", "008258", "008259", "008260", "008261", "008262", "008263", "008264", "008265", "008266", "008267", "008268", "008269", "008270", "008271", "008272", "008273", "008274", "012798", "012799", "012800", "012801", "012802", "012803", "012804", "012805", "012806", "012807", "012808", "012809", "012810", "012811", "012812", "012813", "012814", "012815", "012816", "012817", "012818", "012819", "012820", "012821", "012822", "012823", "012824", "012825", "012826", "012827", "012828", "012829", "012830", "012831", "012832", "012833", "012834", "012835", "012836", "012837", "012838", "012839", "012840", "012841", "012842", "012843", "012844", "012845", "012846", "012847", "012848", "012849", "012850", "012851", "012852", "012853", "012854", "012855", "012856", "012857", "012858", "012859", "012860", "012861", "012862", "012863", "012864", "012865", "012866", "012867", "012868", "012869", "012870", "012871", "012872", "012873", "012874", "012875", "012876", "012877", "012878", "012879", "012880", "012881", "012882", "012883", "012884", "012885", "012886", "012887", "012888", "012889", "012890", "012891", "012892", "012893", "012894", "012895", "012896", "012897", "012898", "012899", "012900", "012901", "012902", "012903", "012904", "012905", "012906", "012907", "012908", "012909", "012910", "012911", "012912", "012913", "012914", "012915", "012916", "012917", "012918", "012919", "012920", "012921", "012922", "012923", "012924", "012925", "012926", "012927", "012928", "012929", "012930", "012931", "012932", "012933", "012934", "012935", "012936", "012937", "012938", "012939", "012940", "012941", "012942", "012943", "012944", "012945", "012946", "012947", "012948", "012949", "012950", "012951", "012952", "012953", "012954", "012955", "012956", "012957", "014545", "014546", "014547", "014548", "014549", "014550", "014551", "014552", "014553", "014554", "014555", "014556", "014557", "014558", "014559", "014560", "014561", "014562", "014563", "014564", "014565", "014566", "014567", "014568", "014569", "014570", "014571", "014572", "014573", "014574", "014575", "014576", "014577", "014578", "014579", "014580", "014581", "014582", "014583", "014584", "014585", "014586", "014587", "014588", "014589", "014590", "014591", "014592", "014593", "014594", "014595", "014596", "014597", "014598", "014599", "014600", "014601", "014602", "014603", "014604", "014605", "014606", "014607", "014608", "014609", "014610", "014611", "014612", "014613", "014614", "014615", "014616", "014617", "014618", "014619", "014620", "014621", "014622", "014623", "014624", "014625", "014626", "014627", "014628", "014629", "014630", "014631", "014632", "014633", "014634", "014635", "014636", "014637", "014638", "014639", "014640", "014641", "014642", "014643", "014644", "014645", "014646", "014647", "014648", "014649", "014650", "014651", "014652", "014653", "014654", "014655", "014656", "014657", "014658", "014659", "014660", "014661", "014662", "014663", "014664", "018525", "018526", "018527", "018528", "018529", "018530", "018531", "018532", "018533", "018534", "018535", "018536", "018537", "018538", "018539", "018540", "018541", "018542", "018543", "018544", "018545", "018546", "018547", "018548", "018549", "018550", "018551", "018552", "018553", "018554", "018555", "018556", "018557", "018558", "018559", "018560", "018561", "018562", "018563", "018564", "018565", "018566", "018567", "018568", "018569", "018570", "018571", "018572", "018573", "018574", "018575", "018576", "018577", "018578", "018579", "018580", "018581", "018582", "018583", "018584", "018585", "018586", "018587", "018588", "018589", "018590", "018591", "018592", "018593", "018594", "018595", "018596", "018597", "018598", "018599", "018600", "018601", "018602", "018603", "018604", "018605", "018606", "018607", "018608", "018609", "018610", "018611", "018612", "018613", "018614", "018615", "018616", "018617", "018618", "018619", "018620", "018621", "018622", "018623", "018624", "018625", "018626", "018627", "018628", "018629", "018630", "018631", "018632", "018633", "018634", "018635", "018636", "018637", "018638", "018639", "018640", "018641", "018642", "018643", "018644", "018655", "018656", "018657", "018658", "018659", "018660", "018661", "018662", "018663", "018664", "018665", "018666", "018667", "018668", "018669", "018670", "018671", "018672", "018673", "018674", "018675", "018676", "018677", "018678", "018679", "018680", "018681", "018682", "018683", "018684", "018685", "018686", "018687", "018688", "018689", "018690", "018691", "018692", "018693", "018694", "018695", "018696", "018697", "018698", "018699", "018700", "018701", "018702", "018703", "018704", "018705", "018706", "018707", "018708", "018709", "018710", "018711", "018712", "018713", "018714", "018715", "018716", "018717", "018718", "018719", "018720", "018721", "018722", "018723", "018724", "018725", "018726", "018727", "018728", "018729", "018730", "018731", "018732", "018733", "018734", "018735", "018736", "018737", "018738", "018739", "018740", "018741", "018742", "018743", "018744", "018745", "018746", "018747", "018748", "018749", "018750", "018751", "018752", "018753", "018754", "018755", "018756", "018757", "018758", "018759", "018760", "018761", "018762", "018763", "018764", "018765", "018766", "018767", "018768", "018769", "018770", "018771", "018772", "018773", "018774", "018775", "018776", "018777", "018778", "018779", "018780", "018781", "018782", "018783", "018784", "018785", "018786", "018787", "018788", "018789", "018790", "018791", "018792", "018793", "018794", "018795", "018796", "018797", "018798", "018799", "018800", "018801", "018802", "018803", "018804", "018805", "018806", "018807", "018808", "018809", "018810", "018811", "018812", "018813", "018814", "018815", "018816", "018817", "018818", "018819", "018820", "018821", "018822", "018823", "018824", "018825", "018826", "018827", "018828", "018829", "018830", "018831", "018832", "018833", "018834", "018835", "018836", "018837", "018838", "018839", "018840", "018841", "018842", "018843", "018844", "018845", "018846", "018847", "018848", "018849", "018850", "018851", "018852", "018853", "018854", "018855", "018856", "018857", "018858", "018859", "018860", "018861", "018862", "018863", "018864", "018865", "018866", "018867", "018868", "018869", "018870", "018871", "018872", "018873", "018874", "018875", "018876", "018877", "018878", "018879", "018880", "018881", "018882", "018883", "018884", "019325", "019326", "019327", "019328", "019329", "019330", "019331", "019332", "019333", "019334", "019335", "019336", "019337", "019338", "019339", "019340", "019341", "019342", "019343", "019344", "019345", "019346", "019347", "019348", "019349", "019350", "019351", "019352", "019353", "019354", "019355", "019356", "019357", "019358", "019359", "019360", "019361", "019362", "019363", "019364", "019365", "019366", "019367", "019368", "019369", "019370", "019371", "019372", "019373", "019374", "019375", "019376", "019377", "019378", "019379", "019380", "019381", "019382", "019383", "019384", "019385", "019386", "019387", "019388", "019389", "019390", "019391", "019392", "019393", "019394", "019395", "019396", "019397", "019398", "019399", "019400", "019401", "019402", "019403", "019404", "019405", "019406", "019407", "019408", "019409", "019410", "019411", "019412", "019413", "019414", "019415", "019416", "019417", "019418", "019419", "019420", "019421", "019422", "019423", "019424", "019425", "019426", "019427", "019428", "019429", "019430", "019431", "019432", "019433", "019434", "019435", "019436", "019437", "019438", "019439", "019440", "019441", "019442", "019443", "019444", "019445", "019446", "019447", "019448", "019449", "019450", "019451", "019452", "019453", "019454", "019455", "019456", "019457", "019458", "019459", "019460", "019461", "019462", "019463", "019464", "019465", "019466", "019467", "019468", "019469", "019470", "019471", "019472", "019473", "019474", "019475", "019476", "019477", "019478", "019479", "019480", "019481", "019482", "019483", "019484", "019485", "019486", "019487", "019488", "019489", "019490", "019491", "019492", "019493", "019494", "019495", "019496", "019497", "019498", "019499", "019500", "019501", "019502", "019503", "019504", "019505", "019506", "019507", "019508", "019509", "019510", "019511", "019512", "019513", "019514"]}, "infrastructure_split": {"train": ["000009", "000010", "000011", "000012", "000013", "000014", "000015", "000016", "000017", "000018", "000019", "000020", "000021", "000022", "000023", "000024", "000025", "000026", "000027", "000028", "000029", "000030", "000031", "000032", "000033", "000034", "000035", "000036", "000037", "000038", "000039", "000040", "000041", "000042", "000043", "000044", "000045", "000046", "000047", "000048", "000049", "000050", "000051", "000052", "000053", "000054", "000055", "000056", "000057", "000058", "000059", "000060", "000061", "000062", "000063", "000064", "000065", "000066", "000067", "000068", "000069", "000070", "000071", "000072", "000073", "000074", "000075", "000076", "000077", "000078", "000079", "000080", "000081", "000082", "000083", "000084", "000085", "000086", "000087", "000088", "000089", "000090", "000091", "000092", "000103", "000104", "000105", "000106", "000107", "000108", "000109", "000110", "000111", "000112", "000113", "000114", "000115", "000116", "000117", "000118", "000119", "000120", "000121", "000122", "000123", "000124", "000125", "000126", "000127", "000128", "000129", "000130", "000131", "000132", "000133", "000134", "000135", "000136", "000137", "000138", "000139", "000140", "000141", "000142", "000143", "000144", "000145", "000146", "000147", "000148", "000149", "000150", "000151", "000152", "000153", "000154", "000155", "000156", "000157", "000158", "000159", "000160", "000161", "000162", "000163", "000164", "000165", "000166", "000167", "000168", "000169", "000170", "000171", "000172", "000173", "000174", "000175", "000176", "000177", "000178", "000179", "000180", "000181", "000182", "000183", "000184", "000185", "000186", "000187", "000188", "000189", "000190", "000191", "000192", "000193", "000194", "000195", "000196", "000197", "000198", "000199", "000200", "000201", "000202", "000203", "000204", "000205", "000206", "000217", "000218", "000238", "000239", "000240", "000241", "000242", "000243", "000244", "000245", "000246", "000247", "000248", "000249", "000260", "000261", "000262", "000263", "000264", "000265", "000266", "000267", "000268", "000269", "000270", "000271", "000272", "000273", "000274", "000275", "000276", "000277", "000278", "000279", "000280", "000281", "000282", "000283", "000284", "000285", "000286", "000287", "000288", "000289", "000290", "000291", "000292", "000293", "000294", "000295", "000296", "000297", "000298", "000299", "000300", "000301", "000302", "000303", "000304", "000305", "000306", "000307", "000308", "000309", "000310", "000311", "000312", "000313", "000314", "000315", "000316", "000317", "000318", "000319", "000320", "000321", "000322", "000323", "000324", "000325", "000326", "000327", "000328", "000329", "000330", "000331", "000332", "000333", "000334", "000335", "000336", "000337", "000338", "000339", "000340", "000341", "000342", "000343", "000344", "000345", "000346", "000347", "000348", "000349", "000350", "000351", "000352", "000353", "000354", "000355", "000356", "000357", "000358", "000359", "000360", "000361", "000362", "000363", "000364", "000365", "000366", "000367", "000368", "000369", "000370", "000371", "000372", "000373", "000374", "000375", "000376", "000377", "000378", "000379", "000380", "000381", "000382", "000383", "000384", "000385", "000386", "000387", "000388", "000389", "000390", "000391", "000392", "000393", "000394", "000395", "000396", "000397", "000398", "000399", "000400", "000401", "000402", "000403", "000404", "000405", "000406", "000407", "000408", "000409", "000885", "000886", "000887", "000888", "000889", "000890", "000891", "000892", "000893", "000894", "000895", "000896", "000897", "000898", "000899", "000900", "000901", "000902", "000903", "000904", "000905", "000906", "000927", "000928", "000929", "000930", "000931", "000932", "000933", "000934", "000935", "000936", "000937", "000938", "000939", "000940", "000941", "000942", "000943", "000944", "000945", "000946", "000947", "000948", "000949", "000950", "000951", "000952", "000953", "000954", "000955", "000956", "000957", "000958", "000959", "000960", "000961", "000962", "000963", "000964", "000965", "000966", "000967", "000968", "000969", "000980", "000981", "000982", "000983", "000984", "000985", "000986", "000987", "000988", "000989", "000990", "000991", "000992", "000993", "000994", "000995", "000996", "000997", "000998", "000999", "001000", "001001", "001002", "001003", "001004", "001005", "001006", "001007", "001008", "001009", "001010", "001011", "001012", "001013", "001014", "001015", "001016", "001017", "001018", "001019", "001020", "001021", "001022", "001023", "001024", "001025", "001026", "001027", "001028", "001029", "001030", "001031", "001032", "001033", "001034", "001035", "001036", "001037", "001038", "001039", "001040", "001041", "001042", "001043", "001044", "001045", "001046", "001047", "001048", "001049", "001050", "001051", "001052", "001053", "001054", "001055", "001056", "001057", "001058", "001059", "001060", "001061", "001062", "001063", "001064", "001065", "001066", "001067", "001068", "001069", "001070", "001071", "001072", "001073", "001084", "001085", "001086", "001087", "001088", "001089", "001090", "001091", "001092", "001093", "001094", "001095", "001096", "001097", "001098", "001099", "001100", "001101", "001102", "001103", "001104", "001105", "001106", "001107", "001108", "001109", "001110", "001111", "001112", "001113", "001114", "001115", "001116", "001117", "001118", "001119", "001120", "001121", "001122", "001123", "001124", "001125", "001126", "001127", "001128", "001129", "001130", "001131", "001132", "001133", "001134", "001135", "001136", "001137", "001138", "001139", "001140", "001141", "001142", "001143", "001144", "001145", "001146", "001157", "001158", "001159", "001160", "001161", "001162", "001163", "001164", "001165", "001166", "001167", "001168", "001169", "001170", "001171", "001172", "001173", "001174", "001175", "001176", "001177", "001178", "001179", "001180", "001181", "001182", "001183", "001184", "001185", "001186", "001187", "001188", "001189", "001190", "001191", "001192", "001193", "001194", "001195", "001196", "001197", "001198", "001199", "001200", "001201", "001202", "001203", "001204", "001205", "001206", "001207", "001208", "001209", "001210", "001211", "001212", "001213", "001214", "001215", "001216", "001217", "001218", "001219", "001220", "001221", "001222", "001223", "001224", "001225", "001226", "001227", "001228", "001229", "001230", "001231", "001232", "001233", "001234", "001235", "001236", "001237", "001238", "001239", "001240", "001241", "001242", "001243", "001244", "001245", "001246", "001247", "001248", "001249", "001250", "001251", "001252", "001253", "001254", "001255", "001256", "001257", "001258", "001259", "001260", "001261", "001262", "001263", "001264", "001265", "001266", "001267", "001268", "001269", "001270", "001271", "001272", "001273", "001274", "001275", "001276", "001277", "001278", "001279", "001280", "001281", "001282", "001283", "001284", "001285", "001286", "001287", "001288", "001289", "001290", "001291", "001292", "001293", "001294", "001295", "001296", "001297", "001298", "001299", "001300", "001301", "001302", "001303", "001304", "001305", "001306", "001307", "001308", "001309", "001310", "001311", "001312", "001313", "001314", "001315", "002133", "002134", "002135", "002136", "002137", "002138", "002139", "002140", "002141", "002142", "002143", "002144", "002145", "002146", "002147", "002148", "002149", "002150", "002151", "002152", "002153", "002154", "002155", "002156", "002157", "002158", "002159", "002160", "002161", "002162", "002163", "002164", "002165", "002166", "002167", "002168", "002169", "002170", "002171", "002172", "002173", "002174", "002175", "002176", "002177", "002178", "002179", "002180", "002181", "002182", "002183", "002184", "002185", "002186", "002187", "002188", "002189", "002190", "002191", "002192", "002193", "002194", "002195", "002196", "002197", "002198", "002199", "002200", "002201", "002202", "002203", "002206", "002207", "002208", "002209", "002210", "002211", "002212", "002213", "002214", "002215", "002216", "002217", "002218", "002219", "002220", "002221", "002222", "002223", "002224", "002225", "002226", "002227", "002228", "002229", "002230", "002231", "002232", "002233", "002234", "002235", "002236", "002237", "002238", "002239", "002240", "002241", "002242", "002243", "002244", "002245", "002246", "002247", "002248", "002249", "002250", "002251", "002252", "002253", "002254", "002255", "002256", "002257", "002258", "002259", "002260", "002261", "002262", "002263", "002264", "002265", "002266", "002267", "002268", "002269", "002270", "002271", "002272", "002273", "002274", "002275", "002276", "002277", "002278", "002279", "002280", "002281", "002282", "002283", "002284", "002285", "002286", "002287", "002288", "002289", "002290", "002291", "002292", "002293", "002294", "002295", "002296", "002297", "002298", "002299", "002300", "002301", "002302", "002303", "002304", "002305", "002306", "002307", "002308", "002309", "002310", "002311", "002312", "002313", "002314", "002315", "002316", "002317", "002318", "002319", "002320", "002321", "002322", "002323", "002324", "002325", "002326", "002327", "002328", "002329", "002330", "002331", "002332", "002333", "002334", "002335", "002336", "002337", "002338", "002339", "002340", "002341", "002342", "002343", "002344", "002345", "002346", "002347", "002348", "002349", "002350", "002351", "002352", "002353", "002354", "002355", "002356", "002357", "002358", "002359", "002360", "002361", "002362", "002363", "002364", "002365", "002366", "002367", "002368", "002369", "002370", "002371", "002372", "002373", "002374", "002375", "002376", "002377", "002378", "002379", "002380", "002381", "002382", "002383", "002384", "002385", "002386", "002387", "002388", "002389", "002390", "002391", "002392", "002393", "002394", "002395", "002396", "002397", "002398", "002399", "002400", "002401", "002402", "002403", "002404", "002405", "002406", "002407", "002408", "002409", "002410", "002411", "002412", "002413", "002414", "002415", "002416", "002417", "002418", "002419", "002420", "002421", "002422", "002423", "002424", "002425", "002426", "002427", "002428", "002429", "002430", "002431", "002432", "002433", "002434", "002435", "002436", "002437", "002438", "002439", "002440", "002441", "002442", "002443", "002444", "002445", "002446", "002447", "002448", "002449", "002450", "002451", "002452", "002453", "002454", "002455", "002456", "002457", "002458", "002459", "002460", "002461", "002462", "002463", "002464", "002465", "002466", "002467", "002468", "002469", "002470", "002471", "002472", "002473", "002474", "002475", "002476", "002477", "002478", "002479", "002480", "002481", "002482", "002483", "002484", "002485", "002486", "002487", "002488", "002489", "002490", "002491", "002492", "002493", "002494", "002495", "002496", "002497", "002498", "002499", "002500", "002501", "002502", "002503", "002504", "002505", "002506", "002507", "002508", "002509", "002510", "002511", "002512", "002513", "002514", "002515", "002516", "002517", "002518", "002519", "002520", "002521", "002522", "002523", "002524", "002525", "002526", "002527", "002528", "002529", "002530", "002531", "002532", "002533", "002534", "002535", "002536", "002537", "002538", "002539", "002540", "002541", "002542", "002543", "002544", "002545", "002546", "002547", "002548", "002549", "002550", "002551", "002552", "002553", "002554", "002555", "002556", "002557", "002558", "002559", "002560", "002561", "002562", "002563", "002564", "002565", "002566", "002567", "002568", "002569", "002570", "002571", "002572", "002573", "002574", "002575", "002576", "002577", "002578", "002579", "002580", "002581", "002582", "002583", "002584", "002585", "002586", "002587", "002588", "002589", "002590", "002591", "002592", "002593", "002594", "002595", "002596", "002597", "002598", "002606", "002607", "002608", "002609", "002610", "002611", "002612", "002613", "002614", "002615", "002616", "002617", "002618", "002619", "002620", "002621", "002622", "002623", "002624", "002625", "002626", "002627", "002628", "002629", "002630", "002631", "002632", "002633", "002634", "002635", "002636", "002637", "002638", "002639", "002640", "002641", "002642", "002643", "002644", "002645", "002646", "002647", "002648", "002649", "002650", "002651", "002652", "002653", "002654", "002655", "002656", "002657", "002658", "002659", "002660", "002661", "002662", "002663", "002664", "002665", "002666", "002667", "002668", "002669", "002670", "002671", "002672", "002673", "002674", "002675", "002676", "002677", "002678", "002679", "002680", "002681", "002682", "002683", "002684", "002685", "002686", "002687", "002688", "002689", "002690", "002691", "002692", "002693", "002694", "002695", "002696", "002697", "002698", "002699", "002700", "002701", "002702", "002703", "002704", "002705", "002706", "002707", "002708", "002709", "002710", "002711", "002712", "002713", "002714", "002715", "002716", "002717", "002718", "002719", "002720", "002721", "002722", "002723", "002724", "002725", "002726", "002727", "002728", "002729", "002730", "002731", "002732", "002733", "002734", "002735", "002736", "002737", "002738", "002739", "002740", "002741", "002742", "002743", "002744", "002745", "002746", "002747", "002748", "002749", "002750", "002751", "002752", "002753", "002754", "002755", "002756", "002757", "002758", "002759", "002760", "002761", "002762", "002763", "002764", "002765", "002766", "002767", "002768", "002769", "002770", "002771", "002772", "002773", "002774", "002775", "002776", "002777", "002778", "002779", "002780", "002781", "002782", "002783", "002784", "002785", "002786", "002787", "002788", "002789", "002790", "002791", "002792", "002793", "002794", "002795", "002796", "002797", "002798", "002799", "002800", "002801", "002802", "002803", "002804", "002805", "002806", "002807", "002808", "002809", "002810", "002811", "002812", "002813", "002814", "002815", "002816", "002817", "002818", "002819", "002820", "002821", "002822", "002823", "002824", "002825", "002826", "002827", "002828", "002829", "002830", "002831", "002832", "002833", "002834", "002835", "002836", "002837", "002838", "002839", "002840", "002841", "002842", "002843", "002844", "002845", "002846", "002847", "002848", "002849", "002850", "002851", "002852", "002853", "002854", "002855", "002856", "002857", "002858", "002859", "002860", "002861", "002862", "002863", "002864", "002865", "002866", "002867", "002868", "002869", "002870", "002871", "002872", "002873", "002874", "002875", "002876", "002877", "002878", "002879", "002880", "002881", "002882", "002883", "002884", "002885", "002886", "002887", "002888", "002889", "002890", "002891", "002892", "002893", "002894", "002895", "002896", "002897", "002898", "002899", "002900", "002901", "002902", "002903", "002904", "002905", "002906", "002907", "002908", "002909", "002910", "002911", "002912", "002913", "002914", "002915", "002916", "002917", "002918", "002919", "002920", "002921", "002922", "002923", "002924", "002925", "002926", "002927", "002928", "002929", "002930", "002931", "002932", "002933", "002934", "002935", "002936", "002937", "002938", "002939", "002940", "002941", "002942", "002943", "002944", "002945", "002946", "002947", "002948", "002949", "002950", "002951", "002952", "002953", "002954", "002955", "002956", "002957", "002958", "002959", "002960", "002961", "002962", "002963", "002964", "002965", "002966", "002967", "002968", "002969", "002970", "002971", "002972", "002973", "002974", "002975", "002976", "002977", "002978", "002979", "002980", "002981", "002982", "002983", "003805", "003806", "003807", "003808", "003809", "003810", "003823", "003824", "003825", "003826", "003827", "003828", "003829", "003830", "003831", "003832", "003833", "003834", "003835", "003836", "003837", "003838", "003839", "003840", "003841", "003842", "003843", "003844", "003845", "003846", "003847", "003848", "003849", "003850", "003851", "003852", "003853", "003854", "003855", "003856", "003857", "003858", "003859", "003860", "003861", "003862", "003863", "003864", "003865", "003866", "003867", "003868", "003869", "003870", "003871", "003872", "003873", "003874", "003875", "003876", "003877", "003878", "003879", "003880", "003881", "003882", "003883", "003884", "003885", "003886", "003887", "003888", "003889", "003890", "003891", "003892", "003893", "003894", "003895", "003896", "003897", "003898", "003899", "003900", "003901", "003902", "003903", "003904", "003905", "003906", "003907", "003908", "003909", "003910", "003911", "003912", "003913", "003914", "003915", "003916", "003917", "003918", "003919", "003920", "003921", "003922", "003923", "003924", "003925", "003926", "003927", "003928", "003929", "003930", "003931", "003932", "003933", "003934", "003935", "003936", "003937", "003938", "003939", "003940", "003941", "003942", "003943", "003944", "003945", "003946", "003947", "003948", "003949", "003950", "003951", "003952", "003953", "003954", "003955", "003956", "003957", "003958", "003959", "003960", "003961", "003962", "003963", "003964", "003965", "003966", "003967", "003968", "003969", "003970", "003971", "003972", "003973", "003974", "003975", "003976", "003977", "003978", "003979", "003980", "003981", "003982", "003983", "003984", "003985", "003986", "003987", "003988", "003989", "003990", "003991", "003992", "003993", "003994", "003995", "003996", "003997", "003998", "003999", "004000", "004001", "004002", "004003", "004004", "004015", "004016", "004017", "004018", "004019", "004020", "004021", "004022", "004023", "004024", "004025", "004026", "004027", "004028", "004029", "004030", "004031", "004032", "004033", "004034", "004035", "004036", "004037", "004038", "004039", "004040", "004041", "004042", "004043", "004044", "004045", "004046", "004047", "004048", "004049", "004050", "004051", "004052", "004053", "004054", "004055", "004056", "004057", "004058", "004059", "004060", "004061", "004062", "004063", "004064", "004065", "004066", "004067", "004068", "004069", "004070", "004071", "004072", "004073", "004074", "004075", "004076", "004077", "004078", "004079", "004080", "004081", "004082", "004083", "004084", "004085", "004086", "004087", "004088", "004089", "004090", "004091", "004092", "004093", "004094", "004095", "004096", "004097", "004098", "004099", "004100", "004101", "004102", "004103", "004104", "004105", "004106", "004107", "004108", "004109", "004110", "004111", "004112", "004113", "004114", "004115", "004116", "004117", "004118", "004119", "004120", "004121", "004122", "004123", "004124", "004125", "004126", "004127", "004128", "004129", "004130", "004131", "004132", "004133", "004134", "004135", "004136", "004137", "004138", "004139", "004140", "004141", "004142", "004143", "004144", "004145", "004146", "004147", "004148", "004149", "004150", "004151", "004152", "004153", "004154", "004155", "004156", "004157", "004158", "004159", "004160", "004161", "004162", "004163", "004164", "004165", "004166", "004167", "004168", "004169", "004170", "004171", "004172", "004173", "004174", "004175", "004176", "004177", "004178", "004179", "004180", "004181", "004182", "004183", "004184", "004185", "004186", "004187", "004188", "004189", "004190", "004191", "004192", "004193", "004194", "004195", "004196", "004197", "004198", "004199", "004200", "004201", "004202", "004203", "004204", "004205", "004206", "004207", "004208", "004209", "004210", "004211", "004212", "004213", "004214", "004215", "004216", "004993", "004994", "004995", "004996", "004997", "004998", "004999", "005000", "005001", "005002", "005003", "005004", "005005", "005006", "005007", "005008", "005009", "005010", "005011", "005012", "005013", "005014", "005015", "005016", "005018", "005019", "005020", "005021", "005022", "005023", "005024", "005025", "005026", "005027", "005028", "005029", "005030", "005031", "005032", "005033", "005034", "005035", "005036", "005037", "005038", "005039", "005040", "005041", "005042", "005043", "005044", "005045", "005046", "005047", "005048", "005049", "005050", "005051", "005052", "005053", "005054", "005055", "005056", "005057", "005058", "005059", "005060", "005061", "005062", "005063", "005064", "005065", "005066", "005067", "005068", "005069", "005070", "005071", "005072", "005073", "005074", "005075", "005076", "005077", "005078", "005079", "005080", "005081", "005082", "005083", "005084", "005085", "005086", "005087", "005088", "005089", "005090", "005091", "005092", "005093", "005094", "005095", "005096", "005097", "005098", "005099", "005100", "005101", "005102", "005103", "005104", "005105", "005106", "005107", "005108", "005109", "005110", "005111", "005112", "005113", "005114", "005115", "005116", "005117", "005118", "005119", "005120", "005121", "005122", "005123", "005124", "005125", "005126", "005127", "005128", "005129", "005130", "005131", "005132", "005133", "005134", "005135", "005136", "005137", "005138", "005139", "005140", "005141", "005142", "005143", "005144", "005145", "005146", "005147", "005148", "005149", "005150", "005151", "005152", "005153", "005154", "005155", "005156", "005157", "005158", "005159", "005160", "005161", "005162", "005163", "005164", "005165", "005166", "005167", "005168", "005169", "005170", "005171", "005172", "005173", "005174", "005175", "005176", "005177", "005178", "005179", "005180", "005181", "005182", "005183", "005184", "005185", "005186", "005187", "005188", "005189", "005190", "005191", "005192", "005193", "005194", "005195", "005196", "005197", "005198", "005199", "005200", "005201", "005202", "005203", "005204", "005205", "005206", "005207", "005208", "005209", "005210", "005211", "005212", "005213", "005214", "005215", "005216", "005217", "005218", "005219", "005220", "005225", "005226", "005227", "005228", "005229", "005230", "005231", "005232", "005233", "005234", "005235", "005236", "005237", "005238", "005239", "005240", "005241", "005242", "005243", "005244", "005245", "005246", "005247", "005248", "005249", "005250", "005251", "005252", "005253", "005254", "005255", "005256", "005257", "005258", "005259", "005260", "005261", "005262", "005263", "005264", "005265", "005266", "005267", "005268", "005269", "005270", "005271", "005272", "005273", "005274", "005275", "005276", "005277", "005278", "005279", "005280", "005281", "005282", "005283", "005284", "005285", "005286", "005287", "005288", "005289", "005290", "005291", "005292", "005293", "005294", "005295", "005296", "005297", "005298", "005299", "005300", "005301", "005302", "005303", "005304", "005305", "005306", "005307", "005308", "005309", "005310", "005311", "005312", "005313", "005314", "005315", "005316", "005317", "005318", "005319", "005320", "005321", "005322", "005323", "005324", "005325", "005326", "005327", "005328", "005329", "005330", "005331", "005332", "005333", "005334", "005335", "005336", "005337", "005338", "005339", "005340", "005341", "005342", "005343", "005344", "005345", "005346", "005347", "005348", "005349", "005350", "005351", "005352", "005353", "005354", "005355", "005356", "005357", "005358", "005359", "005360", "005361", "005362", "005363", "005364", "005365", "005366", "005367", "005368", "005369", "005370", "005371", "005372", "005373", "005374", "005375", "005376", "005377", "005378", "005379", "005380", "005381", "005382", "005383", "005384", "005385", "005386", "005387", "005388", "005389", "005390", "005391", "005392", "005393", "005394", "005395", "005396", "005397", "005398", "005399", "005400", "005401", "005402", "005454", "005455", "005456", "005457", "005458", "005459", "005460", "005461", "005462", "005463", "005464", "005465", "005466", "005467", "005468", "005469", "005470", "005471", "005472", "005473", "005474", "005475", "005476", "005477", "005478", "005479", "005480", "005481", "005482", "005483", "005484", "005485", "005486", "005487", "005488", "005489", "005490", "005491", "005492", "005493", "005494", "005495", "005496", "005497", "005498", "005499", "005500", "005501", "005502", "005503", "005504", "005505", "005506", "005507", "005508", "005509", "005510", "005511", "005512", "005513", "005514", "005515", "005516", "005517", "005518", "005519", "005520", "005521", "005522", "005523", "005524", "005525", "005526", "005527", "005528", "005529", "005530", "005531", "005532", "005533", "005534", "005535", "005536", "005537", "005538", "005539", "005540", "005541", "005542", "005543", "005544", "005616", "005617", "005618", "005619", "005620", "005621", "005622", "005623", "005624", "005625", "005626", "005627", "005628", "005629", "005630", "005631", "005632", "005633", "005634", "005635", "005636", "005637", "005638", "005639", "005640", "005641", "005642", "005643", "005644", "005645", "005646", "005647", "005648", "005649", "005650", "005651", "005652", "005653", "005654", "005655", "005656", "005657", "005658", "005659", "005660", "005661", "005662", "005663", "005664", "005665", "005666", "005667", "005668", "005669", "005670", "005671", "005672", "005673", "005674", "005675", "005676", "005677", "005678", "005679", "005680", "005681", "005682", "005683", "005684", "005685", "005686", "005687", "005688", "005689", "005690", "005691", "005692", "005693", "005694", "005695", "005696", "005697", "005698", "005699", "005700", "005701", "005702", "005703", "005704", "005705", "005706", "005707", "005708", "005709", "005710", "005711", "005712", "005713", "005714", "005715", "005716", "005717", "005718", "005719", "005720", "005721", "005722", "005723", "005724", "005725", "005726", "005727", "005728", "005729", "005730", "005731", "005732", "005733", "005734", "005735", "005736", "005737", "005738", "005739", "005740", "005741", "005742", "005743", "005744", "005745", "005746", "005747", "005748", "005749", "005750", "005751", "005752", "005753", "005754", "005755", "005756", "005757", "006688", "006689", "006690", "006691", "006692", "006693", "006694", "006695", "006696", "006697", "006698", "006699", "006700", "006701", "006702", "006703", "006704", "006705", "006706", "006707", "006708", "006709", "006710", "006711", "006712", "006713", "006714", "006715", "006716", "006717", "006718", "006719", "006720", "006721", "006722", "006723", "006724", "006725", "006726", "006727", "006728", "006729", "006730", "006731", "006732", "006733", "006734", "006735", "006736", "006737", "006738", "006739", "006740", "006741", "006742", "006743", "006744", "006745", "006746", "006747", "006748", "006749", "006750", "006751", "006752", "006753", "006754", "006755", "006756", "006757", "006758", "006759", "006760", "006761", "006762", "006763", "006764", "006765", "006766", "006767", "006768", "006769", "006770", "006771", "006772", "006773", "006774", "006775", "006776", "006777", "006778", "006779", "006780", "006781", "006782", "006783", "006784", "006785", "006786", "006787", "006788", "006789", "006790", "006791", "006792", "006793", "006794", "006795", "006796", "006797", "006798", "006799", "006800", "006801", "006802", "006803", "006804", "006805", "006806", "006807", "006808", "006809", "006810", "006811", "006812", "006813", "006814", "006815", "006816", "006817", "006818", "006819", "006820", "006821", "006822", "006823", "006824", "006825", "006826", "006827", "006828", "006829", "006830", "006831", "006832", "006833", "006834", "006835", "006836", "006837", "006838", "006839", "006840", "006841", "006842", "006843", "006844", "006845", "006846", "006847", "006848", "006849", "006850", "006851", "006852", "006853", "006854", "006855", "006856", "006857", "006858", "006859", "006860", "006861", "006862", "006863", "006864", "006865", "006866", "006867", "006868", "006869", "006870", "006871", "006872", "006873", "006874", "006875", "006876", "006877", "006878", "006879", "006880", "006881", "006882", "006883", "006884", "006885", "006886", "006887", "006888", "006889", "006890", "006891", "006892", "006893", "006894", "006895", "006896", "006897", "006898", "006899", "006900", "006901", "006902", "006903", "006904", "006905", "006906", "006907", "006908", "006909", "006910", "006911", "006912", "006913", "006914", "006915", "006916", "006917", "006918", "006919", "006920", "006921", "006922", "006923", "006924", "006925", "006926", "006927", "006928", "006929", "006930", "006931", "006932", "006933", "006934", "006935", "006936", "006937", "006938", "006939", "006940", "006941", "006942", "006943", "006944", "006945", "006946", "006947", "006948", "006949", "006950", "006951", "006952", "006953", "006954", "006955", "006956", "006957", "006958", "006959", "006960", "006961", "006962", "006963", "006964", "006965", "006966", "006967", "006968", "006969", "006970", "006971", "006972", "006973", "006974", "006975", "006976", "006977", "006978", "006979", "006980", "006981", "006982", "006983", "006984", "006985", "006986", "006987", "006988", "006989", "006990", "006991", "006992", "006993", "006994", "006995", "006996", "006997", "006998", "006999", "007000", "007001", "007002", "007003", "007004", "007005", "007006", "007007", "007008", "007009", "007010", "007011", "007012", "007013", "007014", "007015", "007016", "007017", "007018", "007019", "007020", "007021", "007022", "007023", "007024", "007025", "007026", "007027", "007028", "007029", "007030", "007031", "007032", "007033", "007034", "007035", "007036", "007037", "007038", "007039", "007040", "007041", "007042", "007043", "007044", "007045", "007046", "007047", "007048", "007049", "007050", "007051", "007052", "007053", "007054", "007055", "007056", "007057", "007058", "007059", "007060", "007061", "007062", "007063", "007064", "007065", "007066", "007067", "007068", "007069", "007070", "007071", "007072", "007073", "007074", "007075", "007076", "007077", "007078", "007079", "007080", "007081", "007082", "007083", "007084", "007085", "007086", "007087", "007088", "007089", "007090", "007091", "007092", "007093", "007094", "007095", "007096", "007097", "007098", "007099", "007100", "007101", "007102", "007103", "007104", "007105", "007106", "007107", "007108", "007109", "007110", "007111", "007112", "007113", "007114", "007115", "007116", "007117", "007118", "007119", "007120", "007121", "007122", "007123", "007124", "007125", "007126", "007127", "007128", "007129", "007130", "007131", "007132", "007133", "007134", "007135", "007136", "007137", "007138", "007139", "007140", "007141", "007142", "007143", "007144", "007145", "007146", "007147", "007148", "007149", "007150", "007151", "007152", "007153", "007154", "007155", "007156", "007157", "007158", "007159", "007160", "007161", "007162", "007163", "007164", "007165", "007166", "007167", "007168", "007169", "007170", "007171", "007172", "007173", "007174", "007175", "007176", "007177", "007178", "007179", "007180", "007181", "007182", "007183", "007184", "007185", "007186", "007187", "007188", "007189", "007190", "007191", "007192", "007193", "007194", "007195", "007196", "007197", "007198", "007199", "007200", "007201", "007202", "007203", "007204", "007205", "007206", "007207", "007208", "007209", "007210", "007211", "007212", "007213", "007214", "007215", "007216", "007217", "007218", "007219", "007220", "007221", "007222", "007223", "007224", "007225", "007226", "007227", "007228", "007229", "007230", "007231", "007232", "007233", "007234", "007235", "007236", "007237", "007238", "007239", "007240", "007241", "007242", "007243", "007244", "007245", "007246", "007247", "007248", "007249", "007250", "007251", "007252", "007253", "007254", "007255", "007256", "007257", "007258", "007259", "007260", "007261", "007262", "007263", "007264", "007265", "007266", "007267", "007268", "007269", "007270", "007271", "007272", "007273", "007274", "007275", "007276", "007277", "007278", "007279", "007280", "007281", "007282", "007283", "007284", "007285", "007286", "007287", "007288", "007289", "007290", "007291", "007292", "007293", "007294", "007295", "007296", "007297", "007298", "007299", "007300", "007301", "007302", "007303", "007304", "007305", "007306", "007307", "007308", "007309", "007310", "007311", "007312", "007313", "007314", "007315", "007316", "007317", "007318", "007319", "007320", "007321", "007322", "007323", "007324", "007325", "007326", "007327", "007328", "007329", "007330", "007331", "007332", "007333", "007334", "007335", "007336", "007337", "007338", "007339", "007340", "007341", "007342", "007343", "007344", "007345", "007346", "007347", "007348", "007349", "007350", "007351", "007352", "007353", "007354", "007355", "007356", "007357", "007358", "007359", "007360", "007361", "007362", "007363", "007364", "007365", "007366", "007367", "007368", "007369", "007370", "007371", "007372", "007373", "007374", "007375", "007376", "007377", "007410", "007411", "007412", "007413", "007414", "007415", "007416", "007417", "007418", "007419", "007420", "007421", "007422", "007423", "007424", "007425", "007426", "007427", "007428", "007429", "007430", "007431", "007432", "007433", "007434", "007435", "007436", "007437", "007438", "007439", "007440", "007441", "007442", "007443", "007444", "007445", "007446", "007447", "007448", "007449", "007450", "007451", "007452", "007453", "007454", "007455", "007456", "007457", "007458", "007459", "007460", "007461", "007462", "007463", "007464", "007465", "007466", "007467", "007468", "007469", "007470", "007471", "007472", "007473", "007474", "007475", "007476", "007477", "007478", "007479", "007480", "007481", "007482", "007483", "007484", "007485", "007486", "007487", "007488", "007489", "007490", "007491", "007492", "007493", "007494", "007495", "007496", "007497", "007498", "007499", "007500", "007501", "007502", "007503", "007504", "007505", "007506", "007507", "007508", "007509", "007510", "007511", "007512", "007513", "007514", "007515", "007516", "007517", "007518", "007519", "007520", "007521", "007522", "007523", "007524", "007525", "007526", "007527", "007528", "007529", "007530", "007531", "007532", "007533", "007534", "007535", "007536", "007537", "007538", "007539", "007540", "007541", "007542", "007543", "007544", "007545", "007546", "007547", "007548", "007549", "007550", "007551", "007552", "007553", "007554", "007555", "007556", "007557", "007558", "007559", "007560", "007561", "007562", "007563", "007564", "007565", "007566", "007567", "007568", "007569", "007570", "007571", "007572", "007573", "007574", "007575", "007576", "007577", "007578", "007579", "007580", "007581", "007582", "007583", "007584", "007585", "007586", "007587", "007588", "007589", "007590", "007591", "007592", "007593", "007594", "007595", "007596", "007597", "007598", "007599", "007600", "007601", "007602", "007603", "007604", "007605", "007606", "007607", "007608", "007609", "007610", "007611", "007612", "007613", "007614", "007615", "007616", "007617", "007618", "007619", "007620", "007621", "008348", "008349", "008350", "008351", "008352", "008353", "008354", "008355", "008356", "008357", "008358", "008359", "008360", "008361", "008362", "008363", "008364", "008365", "008366", "008367", "008368", "008369", "008370", "008371", "008372", "008373", "008374", "008375", "008376", "008377", "008378", "008379", "008380", "008381", "008382", "008383", "008384", "008385", "008386", "008387", "008388", "008389", "008390", "008391", "008392", "008393", "008394", "008395", "008396", "008397", "008398", "008399", "008400", "008401", "008402", "008403", "008404", "008405", "008406", "008407", "008408", "008409", "008410", "008411", "008412", "008413", "008414", "008415", "008416", "008417", "008418", "008419", "008420", "008421", "008422", "008423", "008424", "008425", "008426", "008427", "008428", "008429", "008430", "008431", "008432", "008433", "008434", "008435", "008436", "008437", "008438", "008439", "008440", "008441", "008442", "008443", "008444", "008445", "008446", "008447", "008448", "008449", "008450", "008451", "008452", "008453", "008454", "008455", "008456", "008457", "008458", "008459", "008460", "008461", "008462", "008463", "008464", "008465", "008466", "008467", "008468", "008469", "008470", "008471", "008472", "008473", "008474", "008475", "008476", "008477", "008478", "008479", "008480", "008481", "008482", "008483", "008484", "008485", "008486", "008487", "008488", "008489", "008490", "008491", "008492", "008493", "008494", "008495", "008496", "008497", "008498", "008499", "008500", "008501", "008502", "008503", "008504", "008505", "008506", "008507", "008508", "008509", "008510", "008511", "008512", "008513", "008514", "008515", "008516", "008517", "008518", "008519", "008520", "008521", "008522", "008523", "008524", "008525", "008526", "008527", "008528", "008529", "008540", "008541", "008542", "008543", "008544", "008545", "008546", "008547", "008548", "008549", "008550", "008551", "008552", "008553", "008554", "008555", "008556", "008557", "008558", "008559", "008560", "008561", "008562", "008563", "008564", "008565", "008566", "008567", "008568", "008569", "008570", "008571", "008572", "008573", "008574", "008575", "008576", "008577", "008578", "008579", "008580", "008581", "008582", "008583", "008584", "008585", "008586", "008587", "008588", "008589", "008590", "008591", "008592", "008593", "008594", "008595", "008596", "008597", "008598", "008599", "008600", "008601", "008602", "008603", "008604", "008605", "008606", "008607", "008608", "008609", "008610", "008611", "008612", "008613", "008614", "008615", "008616", "008617", "008618", "008619", "008620", "008636", "008637", "008638", "008639", "008640", "008641", "008642", "008643", "008644", "008645", "008646", "008647", "008648", "008649", "008650", "008651", "008652", "008653", "008654", "008655", "008656", "008657", "008658", "008659", "008660", "008661", "008662", "008663", "008664", "008665", "008666", "008667", "008668", "008669", "008670", "008671", "008672", "008673", "008674", "008675", "008676", "008677", "008678", "008679", "008680", "008681", "008682", "008683", "008684", "008685", "008686", "008687", "008688", "008689", "008690", "008691", "008692", "008693", "008694", "008695", "008696", "008697", "008698", "008699", "008700", "008701", "008702", "008703", "008704", "008705", "008706", "008707", "008708", "008709", "008710", "008711", "008712", "008713", "008714", "008715", "008716", "008717", "008718", "008719", "008720", "008721", "008722", "008723", "008724", "008725", "008726", "008727", "008728", "008729", "008730", "008741", "008742", "008743", "008744", "008745", "008746", "008747", "008748", "008749", "008750", "008751", "008752", "008753", "008754", "008755", "008756", "008757", "008758", "008759", "008760", "008761", "008762", "008763", "008764", "008765", "008766", "008767", "008768", "008769", "008770", "008771", "008772", "008773", "008774", "008775", "008776", "008777", "008778", "008779", "008780", "008781", "008782", "008783", "008784", "008785", "008786", "008787", "008788", "008789", "008790", "008791", "008792", "008793", "008794", "008795", "008796", "008797", "008798", "008799", "008800", "008801", "008802", "008803", "008804", "008805", "008806", "008807", "008808", "008809", "008810", "008811", "008812", "008813", "008814", "008815", "008816", "008817", "008818", "008819", "008820", "008821", "008822", "008823", "008824", "008825", "008826", "008827", "008828", "008829", "008830", "008831", "008832", "008833", "008834", "008835", "008836", "008837", "008838", "008839", "008840", "008841", "008842", "008843", "008844", "008845", "008846", "008847", "008848", "008849", "008850", "008851", "008852", "008853", "008854", "008855", "008856", "008857", "008858", "008859", "008860", "008861", "008862", "008863", "008864", "008865", "008866", "008867", "008868", "008869", "008870", "008871", "008872", "008873", "008874", "008875", "008876", "008877", "008878", "008879", "008880", "008881", "008882", "008883", "008884", "008885", "008886", "008887", "008888", "008889", "008890", "008891", "008892", "008903", "008904", "008905", "008906", "008907", "008908", "008909", "008910", "008911", "008912", "008913", "008914", "008915", "008916", "008917", "008918", "008919", "008920", "008921", "008922", "008923", "008924", "008925", "008926", "008927", "008928", "008929", "008930", "008931", "008932", "008933", "008934", "008935", "008936", "008937", "008938", "008939", "008940", "008941", "008942", "008943", "008944", "008945", "008946", "008947", "008948", "008949", "008950", "008951", "008952", "008953", "008954", "008955", "008956", "008957", "008958", "008959", "008960", "008961", "008962", "008963", "008964", "008965", "008966", "008967", "008968", "008969", "008970", "008971", "008972", "008973", "008974", "008975", "008976", "008977", "008978", "008979", "008980", "008981", "008982", "008983", "008984", "008985", "008986", "008987", "008988", "008989", "008990", "008991", "008992", "008993", "008994", "008995", "008996", "008997", "008998", "008999", "009000", "009001", "009002", "009003", "009004", "009005", "009006", "009007", "009008", "009009", "009010", "009011", "009012", "009013", "009014", "009015", "009016", "009017", "009018", "009019", "009020", "009021", "009022", "009023", "009024", "009025", "009026", "009027", "009028", "009029", "009030", "009031", "009032", "009033", "009034", "009035", "009036", "009037", "009038", "009039", "009040", "009041", "009042", "009043", "009044", "009045", "009046", "009047", "009048", "009049", "009050", "009051", "009052", "009053", "009054", "009055", "009056", "009057", "009058", "009059", "009060", "009061", "009062", "009063", "009064", "009065", "009066", "009067", "009068", "009069", "009070", "009071", "009072", "009073", "009074", "009075", "009076", "009077", "009078", "009079", "009080", "009081", "009082", "009083", "009084", "009085", "009086", "009087", "009088", "009089", "009090", "009091", "009092", "009093", "009094", "009105", "009106", "009107", "009108", "009109", "009110", "009111", "009112", "009113", "009114", "009115", "009116", "009117", "009118", "009119", "009120", "009121", "009122", "009123", "009124", "009125", "009126", "009127", "009128", "009129", "009130", "009131", "009132", "009133", "009134", "009135", "009136", "009137", "009138", "009139", "009140", "009141", "009142", "009143", "009144", "009145", "009165", "009166", "009167", "009168", "009169", "009170", "009171", "009172", "009173", "009174", "009175", "009176", "009177", "009178", "009179", "009180", "009181", "009182", "009183", "009184", "009185", "009186", "009187", "009188", "009189", "009190", "009191", "009192", "009193", "009194", "009195", "009196", "009197", "009198", "009199", "009200", "009201", "009202", "009203", "009204", "009205", "009206", "009207", "009208", "009209", "009210", "009211", "009212", "009213", "009214", "009215", "009216", "009217", "009218", "009219", "009220", "009221", "009222", "009223", "009224", "009225", "009226", "009227", "009228", "009229", "009230", "009231", "009232", "009233", "009234", "009235", "009236", "009237", "009238", "009239", "009240", "009241", "009242", "009243", "009244", "009245", "009246", "009247", "009248", "009249", "009250", "009251", "009252", "009253", "009254", "009255", "009256", "009257", "009258", "009259", "009260", "009261", "009262", "009263", "009264", "009265", "009266", "009267", "009268", "009269", "009270", "009271", "009272", "009273", "009274", "009275", "009276", "009277", "009278", "009279", "009280", "009281", "009282", "009283", "009284", "009285", "009286", "009287", "009288", "009289", "009290", "009291", "009292", "009293", "009294", "009295", "009296", "010258", "010259", "010260", "010261", "010262", "010263", "010264", "010265", "010266", "010267", "010268", "010269", "010270", "010271", "010272", "010273", "010274", "010275", "010276", "010277", "010278", "010279", "010280", "010281", "010282", "010283", "010284", "010285", "010286", "010287", "010288", "010289", "010290", "010291", "010292", "010293", "010294", "010295", "010296", "010297", "010298", "010299", "010300", "010301", "010302", "010303", "010304", "010305", "010306", "010307", "010308", "010309", "010310", "010311", "010312", "010313", "010314", "010315", "010316", "010317", "010318", "010319", "010320", "010321", "010322", "010323", "010324", "010325", "010326", "010327", "010328", "010329", "010330", "010331", "010332", "010333", "010334", "010335", "010336", "010337", "010338", "010339", "010340", "010341", "010342", "010343", "010344", "010345", "010346", "010347", "010348", "010349", "010350", "010351", "010352", "010353", "010354", "010355", "010356", "010357", "010358", "010359", "010360", "010361", "010362", "010363", "010364", "010365", "010366", "010367", "010368", "010369", "010370", "010371", "010372", "010373", "010374", "010375", "010376", "010377", "010378", "010379", "010380", "010381", "010382", "010383", "010384", "010385", "010386", "010387", "010388", "010389", "010390", "010391", "010392", "010393", "010394", "010395", "010396", "010397", "010398", "010409", "010410", "010411", "010412", "010413", "010414", "010415", "010416", "010417", "010418", "010419", "010420", "010421", "010422", "010423", "010424", "010425", "010426", "010427", "010428", "010429", "010430", "010431", "010432", "010433", "010434", "010435", "010436", "010437", "010438", "010439", "010440", "010441", "010442", "010443", "010444", "010445", "010446", "010447", "010448", "010449", "010450", "010451", "010452", "010453", "010454", "010455", "010456", "010457", "010458", "010459", "010477", "010478", "010479", "010480", "010481", "010482", "010483", "010484", "010485", "010486", "010487", "010488", "010489", "010490", "010491", "010492", "010493", "010494", "010495", "010496", "010497", "010498", "010499", "010500", "010501", "010502", "010503", "010504", "010505", "010506", "010507", "010508", "010509", "010510", "010511", "010512", "010513", "010514", "010515", "010516", "010517", "010518", "010519", "010520", "010521", "010522", "010523", "010524", "010525", "010526", "010527", "010528", "010529", "010530", "010531", "010532", "010533", "010534", "010535", "010536", "010537", "010538", "010539", "010540", "010541", "010542", "010543", "010544", "010545", "010546", "010547", "010548", "010549", "010550", "010551", "010552", "010553", "010554", "010555", "010556", "010557", "010558", "010559", "010560", "010561", "010562", "010563", "010564", "010565", "010566", "010567", "010568", "010569", "010570", "010583", "010584", "010585", "010586", "010587", "010588", "010589", "010590", "010591", "010592", "010593", "010594", "010595", "010596", "010597", "010598", "010599", "010600", "010601", "010602", "010603", "010604", "010605", "010606", "010607", "010608", "010609", "010610", "010611", "010612", "010613", "010614", "010615", "010616", "010617", "010618", "010619", "010620", "010621", "010622", "010623", "010624", "010625", "010626", "010627", "010628", "010629", "010630", "010631", "010632", "010633", "010634", "010635", "010636", "010637", "010638", "010639", "010640", "010641", "010642", "010643", "010644", "010645", "010646", "010647", "010648", "010649", "010650", "010651", "010652", "010653", "010654", "010655", "010656", "010657", "010658", "010659", "010660", "010661", "010662", "010663", "010664", "010665", "010666", "010667", "010668", "010669", "010670", "010671", "010672", "010673", "010674", "010675", "010676", "010677", "010678", "010679", "010680", "010681", "010682", "010683", "010684", "010685", "010686", "010687", "010688", "010689", "010690", "010691", "010692", "010693", "010694", "010695", "010696", "010697", "010698", "010699", "010700", "010701", "010702", "010713", "010714", "010715", "010716", "010717", "010718", "010719", "010720", "010721", "010722", "010723", "010724", "010725", "010726", "010727", "010728", "010729", "010730", "010731", "010732", "010733", "010734", "010735", "010736", "010737", "010738", "010739", "010740", "010741", "010742", "010743", "010744", "010745", "010746", "010747", "010748", "010749", "010750", "010751", "010752", "010753", "010754", "010755", "010756", "010757", "010758", "010759", "010760", "010761", "010762", "010763", "010764", "010765", "010766", "010767", "010768", "010769", "010770", "010771", "010772", "010773", "010774", "010775", "010776", "010777", "010778", "010779", "010780", "010781", "010782", "010783", "010784", "010785", "010786", "010787", "010788", "010789", "010790", "010791", "010792", "010793", "010794", "010795", "010796", "010797", "010798", "010799", "010800", "010801", "010802", "010803", "010804", "010805", "010806", "010807", "010808", "010809", "010810", "010811", "010812", "010813", "010814", "010815", "010816", "010817", "010818", "010819", "010820", "010821", "010822", "010823", "010824", "010825", "010826", "010827", "010828", "010829", "010830", "010831", "010832", "010833", "010834", "010835", "010836", "010837", "010838", "010839", "010840", "010841", "010842", "010843", "010844", "010845", "010846", "010847", "010848", "010849", "010850", "010851", "010852", "010853", "010854", "010855", "010856", "010857", "010858", "010859", "010860", "010861", "010862", "010863", "010874", "010875", "010876", "010877", "010878", "010879", "010880", "010881", "010882", "010883", "010884", "010885", "010886", "010887", "010888", "010889", "010890", "010891", "010892", "010893", "010894", "010895", "010896", "010897", "010898", "010899", "010900", "010901", "010902", "010903", "010904", "010905", "010906", "010907", "010908", "010909", "010910", "010911", "010912", "010913", "010914", "010915", "010916", "010917", "010918", "010919", "010920", "010921", "010922", "010923", "010924", "010925", "010926", "010927", "010928", "010929", "010930", "010931", "010932", "010933", "010934", "010935", "010936", "010937", "010938", "010939", "010940", "010941", "010942", "010943", "010944", "010945", "010946", "010947", "010948", "010949", "010950", "010951", "010952", "010953", "010954", "010955", "010956", "010957", "010958", "010959", "010960", "010961", "010962", "010963", "010964", "010965", "010966", "010967", "010968", "010969", "010970", "010971", "010972", "010973", "010974", "010975", "010976", "010977", "010978", "010979", "010980", "010981", "010982", "010983", "010984", "010985", "010986", "010987", "010988", "010989", "010990", "010991", "010992", "010993", "010994", "010995", "010996", "010997", "010998", "010999", "011000", "011001", "011002", "011003", "011004", "011005", "011006", "011007", "011008", "011009", "011010", "011011", "011012", "011013", "011014", "012014", "012015", "012016", "012017", "012018", "012019", "012020", "012021", "012022", "012023", "012024", "012025", "012026", "012027", "012028", "012029", "012030", "012031", "012032", "012033", "012034", "012035", "012036", "012037", "012038", "012039", "012040", "012041", "012042", "012043", "012044", "012045", "012046", "012047", "012048", "012049", "012050", "012051", "012052", "012053", "012054", "012055", "012056", "012057", "012058", "012059", "012060", "012061", "012062", "012063", "012064", "012065", "012066", "012067", "012068", "012069", "012070", "012071", "012072", "012073", "012074", "012075", "012076", "012077", "012078", "012079", "012080", "012081", "012082", "012083", "012084", "012085", "012086", "012087", "012088", "012089", "012090", "012091", "012092", "012093", "012094", "012095", "012096", "012097", "012098", "012099", "012100", "012101", "012102", "012103", "012104", "012105", "012106", "012107", "012108", "012109", "012110", "012111", "012112", "012113", "012114", "012115", "012116", "012117", "012118", "012119", "012120", "012121", "012122", "012123", "012124", "012125", "012126", "012127", "012128", "012129", "012130", "012131", "012132", "012133", "012134", "012135", "012136", "012137", "012138", "012139", "012140", "012141", "012142", "012143", "012144", "012145", "012146", "012147", "012148", "012149", "012150", "012151", "012152", "012153", "012154", "012155", "012156", "012157", "012158", "012159", "012160", "012161", "012162", "012163", "012164", "012165", "012166", "012167", "012168", "012169", "012170", "012171", "012172", "012173", "012174", "012175", "012186", "012187", "012188", "012189", "012190", "012191", "012192", "012193", "012194", "012195", "012196", "012197", "012198", "012199", "012200", "012201", "012202", "012203", "012204", "012205", "012206", "012207", "012208", "012209", "012210", "012211", "012212", "012213", "012214", "012215", "012216", "012217", "012218", "012219", "012220", "012221", "012222", "012223", "012224", "012225", "012226", "012227", "012228", "012229", "012230", "012231", "012232", "012233", "012234", "012235", "012236", "012237", "012238", "012239", "012240", "012241", "012242", "012243", "012244", "012245", "012246", "012247", "012248", "012249", "012250", "012251", "012252", "012253", "012254", "012255", "012256", "012257", "012258", "012259", "012260", "012261", "012262", "012263", "012264", "012265", "012266", "012267", "012268", "012269", "012270", "012271", "012272", "012273", "012274", "012275", "012276", "012277", "012278", "012279", "012280", "012281", "012282", "012283", "012284", "012285", "012286", "012287", "012288", "012289", "012290", "012291", "012292", "012293", "012294", "012295", "012296", "012297", "012298", "012299", "012300", "012301", "012302", "012303", "012304", "012305", "012306", "012307", "012308", "012309", "012310", "012311", "012312", "012313", "012314", "012315", "012316", "012317", "012318", "012319", "012320", "012321", "012322", "012323", "012324", "012325", "012326", "012327", "012328", "012329", "012330", "012331", "012332", "012333", "012334", "012335", "012336", "012351", "012352", "012353", "012354", "012355", "012356", "012357", "012358", "012359", "012360", "012361", "012362", "012363", "012364", "012365", "012366", "012367", "012368", "012369", "012370", "012371", "012372", "012373", "012374", "012375", "012376", "012377", "012378", "012379", "012380", "012381", "012382", "012383", "012384", "012385", "012386", "012387", "012388", "012389", "012390", "012391", "012392", "012393", "012394", "012395", "012396", "012397", "012398", "012399", "012400", "012401", "012402", "012403", "012404", "012405", "012406", "012407", "012408", "012409", "012410", "012411", "012412", "012413", "012414", "012415", "012416", "012417", "012418", "012419", "012420", "012421", "012422", "012423", "012424", "012425", "012426", "012427", "012428", "012429", "012430", "012431", "012432", "012433", "012434", "012435", "012436", "012437", "012438", "012439", "012440", "012441", "012442", "012443", "012444", "012445", "012446", "012447", "012448", "012449", "012450", "012451", "012452", "012453", "012454", "012455", "012456", "012457", "012458", "012459", "012460", "012461", "012462", "012463", "012464", "012465", "012466", "012467", "012468", "012469", "012470", "012471", "012472", "012473", "012474", "012475", "012476", "012477", "012478", "012479", "012480", "012481", "012482", "012483", "012484", "012485", "012486", "012487", "012488", "012489", "012490", "012491", "012492", "012493", "012494", "012495", "012496", "012497", "012498", "012501", "012502", "012503", "012504", "012505", "012506", "012507", "012508", "012509", "012510", "012511", "012512", "012513", "012514", "012515", "012516", "012517", "012518", "012519", "012520", "012521", "012522", "012523", "012524", "012525", "012526", "012527", "012528", "012529", "012530", "012531", "012532", "012533", "012534", "012535", "012536", "012537", "012538", "012539", "012540", "012541", "012542", "012543", "012544", "012545", "012546", "012547", "012548", "012549", "012550", "012551", "012552", "012553", "012554", "012555", "012556", "012557", "012558", "012559", "012560", "012561", "012562", "012563", "012568", "012569", "012570", "012571", "012572", "012573", "012574", "012575", "012576", "012577", "012578", "012579", "012580", "012581", "012582", "012583", "012584", "012585", "012586", "012587", "012588", "012589", "012590", "012591", "012592", "012593", "012594", "012595", "012596", "012597", "012598", "012599", "012600", "012601", "012602", "012603", "012604", "012605", "012606", "012607", "012608", "012609", "012610", "012611", "012612", "012613", "012614", "012615", "012616", "012617", "012618", "012619", "012620", "012621", "012622", "012623", "012624", "012625", "012626", "012627", "012628", "012629", "012630", "012631", "012632", "012633", "012634", "012635", "012636", "012637", "012638", "012639", "012640", "012641", "012642", "012643", "012644", "012645", "012646", "012647", "012648", "012649", "012650", "012651", "012652", "012653", "012654", "013594", "013595", "013596", "013597", "013598", "013599", "013600", "013601", "013602", "013603", "013604", "013605", "013606", "013607", "013608", "013609", "013610", "013611", "013612", "013613", "013614", "013615", "013616", "013617", "013618", "013619", "013620", "013621", "013622", "013623", "013624", "013625", "013626", "013627", "013628", "013629", "013630", "013631", "013632", "013633", "013634", "013635", "013636", "013637", "013638", "013639", "013640", "013641", "013642", "013643", "013644", "013645", "013646", "013647", "013648", "013649", "013650", "013651", "013652", "013653", "013654", "013655", "013656", "013657", "013658", "013659", "013660", "013661", "013662", "013663", "013664", "013665", "013666", "013667", "013668", "013669", "013670", "013671", "013672", "013673", "013674", "013675", "013676", "013677", "013678", "013679", "013680", "013681", "013682", "013683", "013684", "013685", "013686", "013687", "013688", "013689", "013690", "013691", "013692", "013693", "013694", "013695", "013696", "013697", "013698", "013699", "013700", "013701", "013702", "013703", "013704", "013705", "013706", "013707", "013708", "013709", "013710", "013711", "013712", "013713", "013714", "013715", "013716", "013717", "013718", "013719", "013720", "013721", "013722", "013723", "013724", "013725", "013726", "013727", "013728", "013729", "013730", "013731", "013732", "013733", "013734", "013735", "013736", "013737", "013738", "013739", "013740", "013741", "013742", "013743", "013744", "013745", "013746", "013747", "013748", "013749", "013750", "013751", "013752", "013753", "013754", "013755", "013756", "013757", "013758", "013759", "013760", "013761", "013762", "013763", "013764", "013765", "013766", "013767", "013768", "013769", "013770", "013771", "013772", "013773", "013774", "013775", "013776", "013777", "013778", "013779", "013780", "013781", "013782", "013783", "013784", "013785", "013786", "013787", "013788", "013789", "013790", "013791", "013792", "013793", "013794", "013795", "013796", "013797", "013798", "013799", "013800", "013801", "013802", "013803", "013804", "013805", "013806", "013807", "013808", "013809", "013810", "013811", "013812", "013813", "013818", "013819", "013820", "013821", "013822", "013823", "013824", "013825", "013826", "013827", "013828", "013829", "013830", "013831", "013832", "013834", "013835", "013836", "013837", "013838", "013839", "013840", "013841", "013842", "013843", "013844", "013845", "013846", "013847", "013848", "013849", "013850", "013851", "013852", "013853", "013854", "013855", "013856", "013857", "013858", "013859", "013860", "013861", "013862", "013863", "013864", "013865", "013866", "013867", "013868", "013869", "013870", "013871", "013872", "013873", "013874", "013875", "013876", "013877", "013878", "013879", "013880", "013881", "013882", "013883", "013884", "013885", "013886", "013887", "013888", "013889", "013890", "013891", "013892", "013893", "013894", "013895", "013896", "013897", "013898", "013899", "013900", "013901", "013902", "013903", "013904", "013905", "013906", "013907", "013908", "013909", "013910", "013911", "013912", "013913", "013914", "013915", "013916", "013917", "013918", "013919", "013920", "013921", "013922", "013923", "013924", "013925", "013926", "013927", "013928", "013929", "013930", "013931", "013932", "013933", "013934", "013935", "013936", "013937", "013938", "013939", "013940", "013941", "013942", "013943", "013944", "013945", "013946", "013947", "013948", "013949", "013950", "013951", "013952", "013953", "013954", "013955", "013956", "013957", "013958", "013959", "013960", "013961", "013962", "013963", "013964", "013965", "013966", "013967", "013968", "013969", "013970", "013971", "013972", "013973", "013974", "013975", "013976", "013977", "013978", "013979", "013980", "013981", "013982", "013983", "013984", "013985", "013986", "013987", "013988", "013989", "013990", "013991", "013992", "013993", "013994", "013995", "013996", "013997", "013998", "013999", "014000", "014001", "014002", "014003", "014004", "014005", "014006", "014007", "014008", "014009", "014010", "014011", "014012", "014013", "014014", "014015", "014016", "014017", "014018", "014019", "014020", "014021", "014022", "014023", "014024", "014025", "014026", "014027", "014028", "014029", "014030", "014031", "014032", "014033", "014034", "014035", "014036", "014037", "014101", "014102", "014103", "014104", "014105", "014106", "014107", "014108", "014109", "014110", "014111", "014112", "014113", "014114", "014115", "014116", "014117", "014118", "014119", "014120", "014121", "014122", "014123", "014124", "014125", "014126", "014127", "014128", "014129", "014130", "014131", "014132", "014133", "014134", "014135", "014136", "014137", "014138", "014139", "014140", "014141", "014142", "014143", "014144", "014145", "014146", "014147", "014148", "014149", "014150", "014151", "014152", "014153", "014154", "014155", "014156", "014157", "014158", "014159", "014160", "014161", "014162", "014163", "014164", "014165", "014166", "014167", "014168", "014169", "014170", "014171", "014172", "014173", "014174", "014175", "014176", "014177", "014178", "014179", "014180", "014181", "014182", "014183", "014184", "014185", "014186", "014187", "014188", "014189", "014190", "014191", "014192", "014193", "014194", "014195", "014196", "014197", "014198", "014199", "014200", "014201", "014202", "014203", "014204", "014205", "014206", "014207", "014208", "014209", "014210", "014211", "014212", "014213", "014214", "014215", "014216", "014217", "014218", "014219", "014220", "014221", "014222", "014223", "014224", "014225", "014226", "014227", "014228", "014229", "014230", "014231", "014232", "014233", "014234", "014235", "014236", "014237", "014238", "014239", "014240", "014241", "014242", "014243", "014244", "014245", "014246", "014247", "014248", "014249", "014250", "014251", "014252", "014253", "014254", "014255", "014256", "014257", "014258", "014259", "014260", "014261", "014262", "014263", "014264", "014265", "014266", "014267", "014268", "014269", "014270", "014271", "014272", "014273", "014274", "014275", "014276", "014277", "014278", "014279", "014280", "014281", "014282", "014283", "014284", "014285", "014286", "014287", "014288", "014289", "014290", "014291", "014292", "014293", "014294", "014295", "014296", "014297", "014298", "014299", "014300", "014301", "014302", "014303", "014304", "014305", "014306", "014307", "014308", "014309", "014310", "014311", "014312", "014313", "014314", "014315", "014316", "014317", "014318", "014319", "014320", "014321", "014322", "014323", "014324", "014325", "014326", "014327", "014328", "014329", "014330", "014331", "014332", "014333", "014334", "014335", "014336", "014337", "014338", "014339", "014340", "014341", "014342", "014343", "014344", "014345", "014346", "014347", "014348", "014349", "014350", "014351", "014352", "014353", "014354", "014355", "014356", "014357", "014358", "014359", "014360", "014361", "014362", "014363", "014364", "014365", "014366", "014367", "014368", "014369", "014370", "014371", "014372", "014373", "014374", "014375", "014376", "014377", "014378", "014379", "014380", "014381", "014382", "014383", "014384", "014385", "014386", "014387", "014388", "014389", "014390", "014391", "014392", "014393", "014394", "014395", "014396", "014397", "014398", "014399", "014400", "014401", "014402", "014403", "014404", "014409", "014410", "014411", "014412", "014413", "014414", "014415", "014416", "014417", "014418", "014419", "014420", "014421", "014422", "014423", "014424", "014425", "014426", "014427", "014428", "014429", "014430", "014431", "014432", "014433", "014434", "014435", "014436", "014437", "014438", "014439", "014440", "014441", "014442", "014443", "014444", "014445", "014446", "014447", "014448", "014449", "014450", "014451", "014452", "014453", "014454", "014455", "014456", "014457", "014458", "014459", "014460", "014461", "014462", "014463", "014464", "014465", "014466", "014467", "014468", "014469", "014470", "014471", "014472", "014473", "014474", "014475", "014476", "014477", "014478", "014479", "014480", "014481", "014482", "014483", "014484", "014485", "014486", "014487", "014488", "014489", "014490", "014491", "014492", "014493", "014494", "014495", "014496", "014497", "014498", "014499", "014500", "014501", "014502", "014503", "014504", "014505", "014506", "014507", "014508", "014509", "014510", "014511", "014512", "014513", "014514", "014515", "014516", "015596", "015597", "015598", "015599", "015600", "015601", "015602", "015603", "015604", "015605", "015606", "015607", "015608", "015609", "015610", "015611", "015612", "015613", "015614", "015615", "015616", "015617", "015618", "015619", "015620", "015621", "015622", "015623", "015624", "015625", "015626", "015627", "015628", "015629", "015630", "015631", "015632", "015633", "015634", "015635", "015636", "015637", "015638", "015639", "015640", "015641", "015642", "015643", "015644", "015645", "015646", "015647", "015648", "015649", "015650", "015651", "015652", "015653", "015654", "015655", "015656", "015657", "015658", "015659", "015660", "015661", "015662", "015663", "015664", "015665", "015666", "015667", "015668", "015669", "015670", "015671", "015672", "015673", "015674", "015675", "015676", "015677", "015678", "015679", "015680", "015681", "015682", "015683", "015684", "015685", "015686", "015687", "015688", "015689", "015690", "015691", "015692", "015693", "015694", "015695", "015696", "015697", "015698", "015699", "015700", "015701", "015702", "015703", "015704", "015705", "015706", "015707", "015708", "015709", "015710", "015711", "015712", "015713", "015714", "015715", "015716", "015717", "015718", "015719", "015720", "015721", "015722", "015723", "015724", "015725", "015726", "015727", "015728", "015729", "015730", "015731", "015732", "015733", "015734", "015735", "015736", "015737", "015738", "015739", "015740", "015741", "015742", "015743", "015744", "015745", "015746", "015747", "015748", "015749", "015750", "015751", "015752", "015753", "015754", "015755", "015756", "015757", "015758", "015759", "015760", "015761", "015762", "015763", "015764", "015765", "015766", "015767", "015768", "015769", "015770", "015771", "015772", "015773", "015774", "015775", "015786", "015787", "015788", "015789", "015790", "015791", "015792", "015793", "015794", "015795", "015796", "015797", "015798", "015799", "015800", "015801", "015802", "015803", "015804", "015805", "015806", "015807", "015808", "015809", "015810", "015811", "015812", "015813", "015814", "015815", "015816", "015817", "015818", "015819", "015820", "015821", "015822", "015823", "015824", "015825", "015826", "015827", "015828", "015829", "015830", "015831", "015832", "015833", "015834", "015835", "015836", "015837", "015838", "015839", "015840", "015841", "015842", "015843", "015844", "015845", "015846", "015847", "015848", "015849", "015850", "015851", "015852", "015853", "015854", "015855", "015856", "015857", "015858", "015859", "015860", "015861", "015862", "015863", "015864", "015865", "015866", "015867", "015868", "015869", "015870", "015871", "015872", "015873", "015874", "015875", "015876", "015877", "015878", "015879", "015880", "015881", "015882", "015883", "015884", "015885", "015886", "015887", "015888", "015889", "015890", "015891", "015892", "015893", "015894", "015895", "015896", "015897", "015898", "015899", "015900", "015901", "015902", "015903", "015904", "015905", "015906", "015907", "015908", "015909", "015910", "015911", "015912", "015913", "015914", "015915", "015916", "015917", "015918", "015919", "015920", "015921", "015922", "015923", "015924", "015925", "015926", "015927", "015928", "015929", "015930", "015931", "015932", "015933", "015934", "015935", "015936", "015937", "015938", "015939", "015940", "015941", "015942", "015943", "015944", "015945", "015946", "015947", "015948", "015949", "015950", "015951", "015952", "015953", "015954", "015955", "015956", "015957", "015958", "015959", "015960", "015961", "015962", "015963", "015964", "015965", "015966", "015967", "015968", "015969", "015970", "015971", "015972", "015973", "015974", "015975", "015986", "015987", "015988", "015989", "015990", "015991", "015992", "015993", "015994", "015995", "015996", "015997", "015998", "015999", "016000", "016001", "016002", "016003", "016004", "016005", "016006", "016007", "016008", "016009", "016010", "016011", "016012", "016013", "016014", "016015", "016016", "016017", "016018", "016019", "016020", "016021", "016022", "016023", "016024", "016025", "016026", "016027", "016028", "016029", "016030", "016031", "016032", "016033", "016034", "016035", "016036", "016037", "016038", "016039", "016040", "016041", "016042", "016043", "016044", "016045", "016046", "016047", "016048", "016049", "016050", "016051", "016052", "016053", "016054", "016055", "016056", "016057", "016058", "016059", "016060", "016061", "016062", "016063", "016064", "016065", "016066", "016067", "016068", "016069", "016070", "016071", "016072", "016073", "016074", "016075", "016076", "016077", "016078", "016079", "016080", "016081", "016082", "016083", "016084", "016085", "016086", "016087", "016088", "016089", "016090", "016091", "016092", "016093", "016094", "016095", "016096", "016097", "016098", "016099", "016100", "016101", "016102", "016103", "016104", "016105", "016106", "016107", "016108", "016109", "016110", "016111", "016112", "016113", "016114", "016115", "016116", "016117", "016118", "016119", "016120", "016121", "016122", "016123", "016124", "016125", "016126", "016127", "016128", "016129", "016130", "016131", "016132", "016133", "016134", "016135", "016136", "016137", "016138", "016139", "016140", "016141", "016142", "016143", "016144", "016145", "016146", "016147", "016148", "016149", "016150", "016151", "016152", "016153", "016154", "016155", "016156", "016157", "016158", "016159", "016160", "016161", "016162", "016163", "016164", "016165", "016176", "016177", "016178", "016179", "016180", "016181", "016182", "016183", "016184", "016185", "016186", "016187", "016188", "016189", "016190", "016191", "016192", "016193", "016194", "016195", "016196", "016197", "016198", "016199", "016200", "016201", "016202", "016203", "016204", "016205", "016206", "016207", "016208", "016209", "016210", "016211", "016212", "016213", "016214", "016215", "016216", "016217", "016218", "016219", "016220", "016221", "016222", "016223", "016224", "016225", "016226", "016227", "016228", "016229", "016230", "016231", "016232", "016233", "016234", "016235", "016236", "016237", "016238", "016239", "016240", "016241", "016242", "016243", "016244", "016245", "016246", "016247", "016248", "016249", "016250", "016251", "016252", "016253", "016254", "016255", "016256", "016257", "016258", "016259", "016260", "016261", "016262", "016263", "016264", "016265", "016266", "016267", "016268", "016269", "016270", "016271", "016272", "016273", "016274", "016275", "016276", "016277", "016278", "016279", "016280", "016281", "016282", "016283", "016284", "016285", "016286", "016287", "016288", "016289", "016290", "016291", "016292", "016293", "016294", "016295", "016296", "016297", "016298", "016299", "016300", "016301", "016302", "016303", "016304", "016305", "016306", "016307", "016308", "016309", "016310", "016311", "016312", "016313", "016314", "016315", "016316", "016317", "016318", "016319", "016320", "016321", "016322", "016323", "016324", "016325", "016326", "016327", "016328", "016329", "016330", "016331", "016332", "016333", "016334", "016335", "016336", "016337", "016338", "016339", "016340", "016341", "016342", "016343", "016344", "016345", "016346", "016347", "016348", "016349", "016350", "016351", "016352", "016353", "016354", "016355", "016356", "016357", "016358", "016359", "016360", "016361", "016362", "016363", "016364", "016365", "016376", "016377", "016378", "016379", "016380", "016381", "016382", "016383", "016384", "016385", "016386", "016387", "016388", "016389", "016390", "016391", "016392", "016393", "016394", "016395", "016396", "016397", "016398", "016399", "016400", "016401", "016402", "016403", "016404", "016405", "016406", "016407", "016408", "016409", "016410", "016411", "016412", "016413", "016414", "016415", "016416", "016417", "016418", "016419", "016420", "016421", "016422", "016423", "016424", "016425", "016426", "016427", "016428", "016429", "016430", "016431", "016432", "016433", "016434", "016435", "016436", "016437", "016438", "016439", "016440", "016441", "016442", "016443", "016444", "016445", "016446", "016447", "016448", "016449", "016450", "016451", "016452", "016453", "016454", "016455", "016456", "016457", "016458", "016459", "016460", "016461", "016462", "016463", "016464", "016465", "016466", "016467", "016468", "016469", "016470", "016471", "016472", "016473", "016474", "016475", "016476", "016477", "016478", "016479", "016480", "016481", "016482", "016483", "016484", "016485", "016486", "016487", "016488", "016489", "016490", "016491", "016492", "016493", "016494", "016495", "016502", "016503", "016504", "016505", "016506", "016507", "016508", "016509", "016510", "016511", "016512", "016513", "016514", "016515", "016516", "016517", "016518", "016519", "016520", "016521", "016522", "016523", "016524", "016525", "016526", "016527", "016528", "016529", "016530", "016531", "016532", "016533", "016534", "016535", "016536", "016537", "016538", "016539", "016540", "016541", "016542", "016543", "016544", "016545", "016546", "016547", "016548", "016549", "016550", "016551", "016552", "016553", "016554", "016555", "016556", "016557", "016558", "016559", "016560", "016561", "016562", "016563", "016564", "016565", "016566", "016567", "016568", "016569", "016570", "016571", "016572", "016573", "016574", "016575", "017646", "017647", "017648", "017649", "017650", "017651", "017652", "017653", "017654", "017655", "017656", "017657", "017658", "017659", "017660", "017661", "017662", "017663", "017664", "017665", "017666", "017667", "017668", "017669", "017670", "017671", "017672", "017673", "017674", "017675", "017676", "017677", "017678", "017679", "017680", "017681", "017682", "017683", "017684", "017685", "017686", "017687", "017688", "017689", "017690", "017691", "017692", "017693", "017694", "017695", "017696", "017697", "017698", "017699", "017700", "017701", "017702", "017703", "017704", "017705", "017706", "017707", "017708", "017709", "017710", "017711", "017712", "017713", "017714", "017715", "017716", "017717", "017718", "017719", "017720", "017721", "017722", "017723", "017724", "017725", "017726", "017727", "017728", "017729", "017730", "017731", "017732", "017733", "017734", "017735", "017736", "017737", "017738", "017739", "017740", "017741", "017742", "017743", "017744", "017745", "017746", "017747", "017748", "017749", "017750", "017751", "017752", "017753", "017754", "017755", "017756", "017757", "017758", "017759", "017760", "017761", "017762", "017763", "017764", "017765", "017766", "017767", "017768", "017769", "017770", "017771", "017772", "017773", "017774", "017775", "017776", "017777", "017778", "017779", "017780", "017781", "017782", "017783", "017784", "017785", "017786", "017787", "017788", "017789", "017790", "017791", "017792", "017793", "017794", "017795", "017796", "017797", "017798", "017799", "017800", "017801", "017802", "017803", "017804", "017805", "017806", "017807", "017808", "017809", "017810", "017811", "017812", "017813", "017814", "017815", "017816", "017817", "017818", "017819", "017820", "017821", "017822", "017823", "017824", "017825", "017826", "017827", "017828", "017829", "017830", "017831", "017832", "017833", "017834", "017835", "017836", "017837", "017838", "017839", "017840", "017841", "017842", "017843", "017844", "017845", "017846", "017847", "017848", "017849", "017850", "017851", "017852", "017853", "017854", "017855", "017866", "017867", "017868", "017869", "017870", "017871", "017872", "017873", "017874", "017875", "017876", "017877", "017878", "017879", "017880", "017881", "017882", "017883", "017884", "017885", "017886", "017887", "017888", "017889", "017890", "017891", "017892", "017893", "017894", "017895", "017896", "017897", "017898", "017899", "017900", "017901", "017902", "017903", "017904", "017905", "017906", "017907", "017908", "017909", "017910", "017911", "017912", "017913", "017914", "017915", "017916", "017917", "017918", "017919", "017920", "017921", "017922", "017923", "017924", "017925", "017926", "017927", "017928", "017929", "017930", "017931", "017932", "017933", "017934", "017935", "017936", "017937", "017938", "017939", "017940", "017941", "017942", "017943", "017944", "017945", "017946", "017947", "017948", "017949", "017950", "017951", "017952", "017953", "017954", "017955", "017956", "017957", "017958", "017959", "017960", "017961", "017962", "017963", "017964", "017965", "017966", "017967", "017968", "017969", "017970", "017971", "017972", "017973", "017974", "017975", "017976", "017977", "017978", "017979", "017980", "017981", "017982", "017983", "017984", "017985", "017986", "017987", "017988", "017989", "017990", "017991", "017992", "017993", "017994", "017995", "017996", "017997", "017998", "017999", "018000", "018001", "018002", "018003", "018004", "018005", "018006", "018007", "018008", "018009", "018010", "018011", "018012", "018013", "018014", "018015", "018016", "018017", "018018", "018019", "018020", "018021", "018022", "018023", "018024", "018025", "018026", "018027", "018028", "018029", "018030", "018031", "018032", "018033", "018034", "018035", "018036", "018047", "018048", "018049", "018050", "018051", "018052", "018053", "018054", "018055", "018056", "018057", "018058", "018059", "018060", "018061", "018062", "018063", "018064", "018065", "018066", "018067", "018068", "018069", "018070", "018071", "018072", "018073", "018074", "018075", "018076", "018077", "018078", "018079", "018080", "018081", "018082", "018083", "018084", "018085", "018086", "018087", "018088", "018089", "018090", "018091", "018092", "018093", "018094", "018095", "018096", "018097", "018098", "018099", "018100", "018101", "018102", "018103", "018104", "018105", "018106", "018107", "018108", "018109", "018110", "018111", "018112", "018113", "018114", "018115", "018116", "018117", "018118", "018119", "018120", "018121", "018122", "018123", "018124", "018125", "018126", "018127", "018128", "018129", "018130", "018131", "018132", "018133", "018134", "018135", "018136", "018137", "018138", "018139", "018140", "018141", "018142", "018143", "018144", "018145", "018146", "018147", "018148", "018149", "018150", "018151", "018152", "018153", "018154", "018155", "018156", "018157", "018158", "018159", "018160", "018161", "018162", "018163", "018164", "018165", "018166", "018173", "018174", "018175", "018176", "018177", "018178", "018179", "018180", "018181", "018182", "018183", "018184", "018185", "018186", "018187", "018188", "018189", "018190", "018191", "018192", "018193", "018194", "018195", "018196", "018197", "018198", "018199", "018200", "018201", "018202", "018203", "018204", "018205", "018206", "018207", "018208", "018209", "018210", "018211", "018212", "018213", "018214", "018215", "018216", "018217", "018218", "018219", "018220", "018221", "018222", "018223", "018224", "018225", "018226", "018227", "018228", "018229", "018230", "018231", "018232", "018233", "018234", "018235", "018236", "018246", "018247", "018248", "018249", "018250", "018251", "018252", "018253", "018254", "018255", "018256", "018257", "018258", "018259", "018260", "018261", "018262", "018263", "018264", "018265", "018266", "018267", "018268", "018269", "018270", "018271", "018272", "018273", "018274", "018275", "018276", "018277", "018278", "018279", "018280", "018281", "018282", "018283", "018284", "018285", "018286", "018287", "018288", "018289", "018290", "018291", "018292", "018293", "018294", "018295", "018296", "018297", "018298", "018299", "018300", "018301", "018302", "018303", "018304", "018305", "018306", "018307", "018308", "018309", "018310", "018311", "018312", "018313", "018314", "018315", "018316", "018317", "018318", "018319", "018320", "018321", "018322", "018323", "018324", "018325", "018326", "018327", "018328", "018329", "018330", "018331", "018332", "018333", "018334", "018335", "018336", "018337", "018338", "018339", "018340", "018341", "018342", "018343", "018344", "018345", "018346", "018347", "018348", "018349", "018350", "018351", "018352", "018353", "018354", "018355", "018356", "018357", "018358", "018359", "018360", "018361", "018362", "018363", "018364", "018365", "018366", "018367", "018368", "018369", "018370", "018371", "018372", "018373", "018374", "018375", "018376", "018377", "018378", "018379", "018380", "018381", "018382", "018383", "018384", "018385", "018386", "018387", "018388", "018389", "018390", "018391", "018392", "018393", "018394", "018395", "018396", "018397", "018398", "018399", "018400", "018401", "018402", "018403", "018404", "018405", "018406", "018407", "018408", "018409", "018410", "018411", "018412", "018413", "018414", "018415", "018426", "018427", "018428", "018429", "018430", "018431", "018432", "018433", "018434", "018435", "018436", "018437", "018438", "018439", "018440", "018441", "018442", "018443", "018444", "018445", "018446", "018447", "018448", "018449", "018450", "018451", "018452", "018453", "018454", "018455", "018456", "018457", "018458", "018459", "018460", "018461", "018462", "018463", "018464", "018465", "018466", "018467", "018468", "018469", "018470", "018471", "018472", "018473", "018474", "018475", "018476", "018477", "018478", "018479", "018480", "018481", "018482", "018483", "018484", "018485", "018486", "018487", "018488", "018489", "018490", "018491", "018492", "018493", "018494", "018495", "018496", "018497", "018498", "018499", "018500", "018501", "018502", "018503", "018504", "018505", "018506", "018507", "018508", "018509", "018510", "018511", "018512", "018513", "018514", "018515", "018516", "018517", "018518", "018519", "018520", "018521", "018522", "018523", "018524", "018525", "018526", "018527", "018528", "018529", "018530", "018531", "018532", "018533", "018534", "018535", "018536", "018537", "018538", "018539", "018540", "018541", "018542", "018543", "018544", "018545", "018546", "018547", "018548", "018549", "018550", "018551", "018552", "018553", "018554", "018555", "018556", "018557", "018558", "018559", "018560", "018561", "018562", "018563", "018564", "018565", "018566", "018567", "018568", "018569", "018570", "018571", "018572", "018573", "018574", "018575", "018576", "018577", "018578", "018579", "018580", "018581", "018582", "018583", "018584", "018585", "018586", "018587", "018588", "018589", "018590", "018591", "018592", "018593", "018594", "018595", "018596", "018597", "018598", "018599", "018600", "018601", "018602", "018603", "018604", "018605", "018606", "018607", "018608", "018609", "018610", "018611", "018612", "018613", "018614", "018615", "018616", "018617", "018618", "018619", "018620", "018621", "018622", "018623", "018624", "018625", "019546", "019547", "019548", "019549", "019550", "019551", "019552", "019553", "019554", "019555", "019556", "019557", "019558", "019559", "019560", "019561", "019562", "019563", "019564", "019565", "019566", "019567", "019568", "019569", "019570", "019571", "019572", "019573", "019574", "019575", "019576", "019577", "019578", "019579", "019580", "019581", "019582", "019583", "019584", "019585", "019586", "019587", "019588", "019589", "019590", "019591", "019592", "019593", "019594", "019595", "019596", "019597", "019598", "019599", "019600", "019601", "019602", "019603", "019604", "019605", "019606", "019607", "019608", "019609", "019610", "019611", "019612", "019613", "019614", "019615", "019616", "019617", "019618", "019619", "019620", "019621", "019622", "019623", "019624", "019625", "019626", "019627", "019628", "019629", "019630", "019631", "019632", "019633", "019634", "019635", "019636", "019637", "019638", "019639", "019640", "019641", "019642", "019643", "019644", "019645", "019646", "019647", "019648", "019649", "019650", "019651", "019652", "019653", "019654", "019655", "019656", "019657", "019658", "019659", "019660", "019661", "019662", "019663", "019664", "019665", "019666", "019676", "019677", "019678", "019679", "019680", "019681", "019682", "019683", "019684", "019685", "019686", "019687", "019688", "019689", "019690", "019691", "019692", "019693", "019694", "019695", "019696", "019697", "019698", "019699", "019700", "019701", "019702", "019703", "019704", "019705", "019706", "019707", "019708", "019709", "019710", "019711", "019712", "019713", "019714", "019715", "019716", "019717", "019718", "019719", "019720", "019721", "019722", "019723", "019724", "019725", "019726", "019727", "019728", "019729", "019730", "019731", "019732", "019733", "019734", "019735", "019736", "019737", "019738", "019739", "019740", "019741", "019742", "019743", "019744", "019745", "019746", "019747", "019748", "019749", "019750", "019751", "019752", "019753", "019754", "019755", "019756", "019757", "019758", "019759", "019760", "019761", "019762", "019763", "019764", "019765", "019766", "019767", "019768", "019769", "019770", "019771", "019772", "019773", "019774", "019775", "019776", "019777", "019778", "019779", "019780", "019781", "019782", "019783", "019784", "019785", "019786", "019787", "019788", "019789", "019790", "019791", "019792", "019793", "019794", "019795", "019796", "019797", "019798", "019799", "019800", "019801", "019802", "019803", "019804", "019805", "019816", "019817", "019818", "019819", "019820", "019821", "019822", "019823", "019824", "019825", "019826", "019827", "019828", "019829", "019830", "019831", "019832", "019833", "019834", "019835", "019836", "019837", "019838", "019839", "019840", "019841", "019842", "019843", "019844", "019845", "019846", "019847", "019848", "019849", "019850", "019851", "019852", "019853", "019854", "019855", "019856", "019857", "019858", "019859", "019860", "019861", "019862", "019863", "019864", "019865", "019866", "019867", "019868", "019869", "019870", "019871", "019872", "019873", "019874", "019875", "019876", "019877", "019878", "019879", "019880", "019881", "019882", "019883", "019884", "019885", "019886", "019887", "019888", "019889", "019890", "019891", "019892", "019893", "019894", "019895", "019896", "019897", "019898", "019899", "019900", "019901", "019902", "019903", "019904", "019905", "019906", "019907", "019908", "019909", "019910", "019911", "019912", "019913", "019914", "019915", "019916", "019917", "019918", "019919", "019920", "019921", "019922", "019923", "019924", "019925", "019926", "019927", "019928", "019929", "019930", "019931", "019932", "019933", "019934", "019935", "019936", "019937", "019938", "019939", "019940", "019941", "019942", "019943", "019944", "019945", "019946", "019947", "019948", "019949", "019950", "019951", "019952", "019953", "019954", "019955"], "val": ["000419", "000420", "000421", "000422", "000423", "000424", "000425", "000426", "000427", "000428", "000429", "000430", "000431", "000432", "000433", "000434", "000435", "000436", "000437", "000438", "000439", "000440", "000441", "000442", "000443", "000444", "000445", "000446", "000447", "000448", "000449", "000450", "000451", "000452", "000453", "000454", "000455", "000456", "000457", "000458", "000459", "000460", "000461", "000480", "000481", "000482", "000483", "000484", "000485", "000486", "000487", "000488", "000489", "000490", "000491", "000492", "000493", "000494", "000495", "000496", "000497", "000498", "000499", "000500", "000501", "000502", "000503", "000504", "000505", "000506", "000507", "000508", "000509", "000510", "000511", "000512", "001317", "001318", "001319", "001320", "001321", "001322", "001323", "001324", "001325", "001326", "001327", "001328", "001329", "001330", "001331", "001332", "001333", "001334", "001335", "001336", "001337", "001338", "001339", "001340", "001341", "001342", "001343", "001344", "001345", "001346", "001347", "001348", "001349", "001350", "001351", "001352", "001353", "001354", "001355", "001356", "001357", "001358", "001359", "001360", "001361", "001362", "001363", "001364", "001365", "001366", "001367", "001368", "001369", "001370", "001371", "001372", "001373", "001374", "001375", "001376", "001377", "001378", "001379", "001380", "001381", "001382", "001383", "001384", "001385", "001386", "001387", "001388", "001389", "001390", "001391", "001392", "001393", "001394", "001395", "001396", "001397", "001398", "001399", "001400", "001401", "001402", "001403", "001404", "001405", "001406", "001407", "001408", "001409", "001410", "001411", "001412", "001413", "001414", "001415", "001416", "001417", "001418", "001419", "001420", "001421", "001422", "001423", "001424", "001425", "001426", "001427", "001428", "001429", "001430", "001431", "001432", "001433", "001434", "001435", "001436", "001437", "001438", "001439", "001440", "001441", "001442", "001443", "001444", "001445", "001446", "001447", "001448", "001449", "001450", "001451", "001452", "001453", "001454", "001455", "001456", "001457", "001458", "001459", "001460", "001461", "001462", "001463", "001464", "001465", "001466", "001467", "001468", "001469", "001470", "001471", "001472", "001473", "001474", "001475", "001476", "001477", "001478", "001479", "001480", "001481", "001482", "001483", "001484", "001485", "001486", "001487", "001488", "001489", "001490", "001491", "001492", "001511", "001512", "001513", "001514", "001515", "001516", "001517", "001518", "001519", "001520", "001521", "001522", "001523", "001524", "001525", "001526", "001527", "001528", "001529", "001530", "001531", "001532", "001533", "001534", "001535", "001536", "001537", "001538", "001539", "001540", "001541", "001542", "001543", "001544", "001545", "001546", "001547", "001548", "001549", "001550", "001551", "001552", "001553", "001554", "001555", "001556", "001557", "001558", "001559", "001560", "001561", "001562", "001563", "001564", "001565", "001566", "001567", "001568", "001569", "001570", "001571", "001572", "001573", "001574", "002989", "002990", "002991", "002992", "002993", "002994", "002995", "002996", "002997", "002998", "002999", "003000", "003001", "003002", "003003", "003004", "003005", "003006", "003007", "003008", "003009", "003010", "003011", "003012", "003013", "003014", "003015", "003016", "003017", "003018", "003019", "003020", "003021", "003022", "003023", "003024", "003025", "003026", "003027", "003028", "003029", "003030", "003031", "003032", "003033", "003034", "003035", "003036", "003037", "003038", "003039", "003040", "003041", "003042", "003043", "003044", "003045", "003046", "003047", "003048", "003049", "003050", "003051", "003052", "003053", "003054", "003055", "003056", "003057", "003058", "003059", "003060", "003061", "003062", "003063", "003064", "003065", "003066", "003067", "003068", "003069", "003070", "003071", "003072", "003073", "003074", "003075", "003076", "003077", "003078", "003079", "003080", "003081", "003082", "003083", "003084", "003085", "003086", "003087", "003088", "003089", "003090", "003091", "003092", "003093", "003094", "003095", "003096", "003097", "003098", "003099", "003100", "003101", "003102", "003103", "003104", "003105", "003106", "003107", "003108", "003109", "003110", "003111", "003112", "003113", "003114", "003115", "003116", "003117", "003118", "003119", "003120", "003121", "003122", "003123", "003124", "003125", "003126", "003127", "003128", "003129", "003130", "003131", "003132", "003133", "003134", "003135", "003136", "003137", "003138", "003139", "003140", "003141", "003142", "003143", "003144", "003145", "003146", "003147", "003148", "003149", "003150", "003151", "003152", "003153", "003154", "003155", "003156", "003157", "003158", "003159", "003160", "003161", "003162", "003163", "003164", "003165", "003166", "003167", "003168", "003169", "003170", "003171", "004227", "004228", "004229", "004230", "004231", "004232", "004233", "004234", "004235", "004236", "004237", "004238", "004239", "004240", "004241", "004242", "004243", "004244", "004245", "004246", "004247", "004248", "004249", "004250", "004251", "004252", "004253", "004254", "004255", "004256", "004257", "004258", "004259", "004260", "004261", "004262", "004263", "004264", "004265", "004266", "004267", "004268", "004269", "004270", "004271", "004272", "004273", "004274", "004275", "004276", "004277", "004278", "004279", "004280", "004281", "004282", "004283", "004284", "004285", "004286", "004287", "004288", "004289", "004290", "004291", "004292", "004293", "004294", "004295", "004296", "004297", "004298", "004299", "004300", "004301", "004302", "004303", "004304", "004305", "004306", "004307", "004308", "004309", "004310", "004311", "004312", "004313", "004314", "004315", "004316", "004317", "004318", "004319", "004320", "004321", "004322", "004323", "004324", "004325", "004326", "004327", "004328", "004329", "004330", "004331", "004332", "004333", "004334", "004335", "004336", "004337", "004338", "004339", "004340", "004341", "004342", "004343", "004344", "004345", "004346", "004347", "004348", "004349", "004350", "004351", "004352", "004353", "004354", "004355", "004356", "004357", "004358", "004359", "004360", "004361", "004362", "004363", "004364", "004365", "004366", "004367", "004368", "004369", "004370", "004371", "004372", "004373", "004374", "004375", "004376", "004377", "004378", "004379", "004380", "004381", "004382", "004383", "004384", "004385", "004386", "004387", "004388", "004389", "004390", "004391", "004392", "004393", "004394", "004395", "004396", "004397", "004398", "004399", "004400", "004401", "004402", "004403", "004404", "004405", "004406", "004407", "004408", "004409", "004410", "004411", "004412", "004413", "004414", "004415", "004416", "004417", "004418", "004419", "004420", "004421", "004422", "004423", "004424", "004425", "004426", "004427", "004428", "004429", "004440", "004441", "004442", "004443", "004444", "004445", "004446", "004447", "004448", "004449", "004450", "004451", "004452", "004453", "004454", "004455", "004456", "004457", "004458", "004459", "004460", "004461", "004462", "004463", "004464", "004465", "004466", "004467", "004468", "004469", "004470", "004471", "004472", "004473", "004474", "004475", "004476", "004477", "004478", "004479", "004480", "004481", "004482", "004483", "004484", "004485", "004486", "004487", "004488", "004489", "004490", "004491", "004492", "004493", "004494", "004495", "004496", "004497", "004498", "004499", "004500", "004501", "004502", "004503", "004504", "004505", "004506", "004507", "004508", "004509", "004510", "004511", "004512", "004513", "004514", "004515", "004516", "004517", "004518", "004519", "004520", "004521", "004522", "004523", "004524", "004525", "004526", "004527", "004528", "004529", "004530", "004531", "004532", "004533", "004534", "004535", "004536", "004537", "004538", "004539", "004540", "004541", "004542", "004543", "004544", "004545", "004546", "004547", "004548", "004549", "004550", "004551", "004556", "004557", "004558", "004559", "004560", "004561", "004562", "004563", "004564", "004565", "004566", "004567", "004568", "004569", "004570", "004571", "004572", "004573", "004574", "004575", "004576", "004577", "004578", "004579", "004580", "004581", "004582", "004583", "004584", "004585", "004586", "004587", "004588", "004589", "004590", "004591", "004592", "004593", "004594", "004595", "004596", "004597", "004598", "004599", "004600", "004601", "004602", "004603", "004604", "004605", "004606", "004607", "004608", "004609", "004610", "004611", "004612", "004613", "004614", "004615", "004616", "004617", "004618", "004619", "004620", "004621", "004622", "004623", "004624", "004625", "004626", "004627", "004628", "004629", "004630", "004631", "004632", "004633", "004634", "004635", "004636", "004637", "004638", "004639", "004640", "004641", "004642", "004643", "004644", "004645", "004646", "004647", "004648", "004649", "004650", "004651", "004652", "004653", "004654", "004655", "004656", "004657", "004658", "004659", "004660", "004661", "004662", "004663", "004664", "004665", "004666", "004667", "004668", "004669", "004670", "004671", "004672", "005758", "005759", "005760", "005761", "005762", "005763", "005764", "005765", "005766", "005767", "005768", "005769", "005770", "005771", "005772", "005773", "005774", "005775", "005776", "005777", "005778", "005779", "005780", "005781", "005782", "005783", "005784", "005785", "005786", "005787", "005788", "005789", "005790", "005791", "005792", "005793", "005794", "005795", "005796", "005797", "005798", "005799", "005800", "005801", "005802", "005803", "005804", "005805", "005806", "005807", "005808", "005809", "005810", "005811", "005812", "005813", "005814", "005815", "005816", "005817", "005818", "005819", "005820", "005821", "005822", "005823", "005824", "005825", "005826", "005827", "005828", "005829", "005830", "005831", "005832", "005833", "005834", "005835", "005836", "005837", "005838", "005839", "005840", "005841", "005842", "005843", "005844", "005845", "005846", "005847", "005848", "005849", "005850", "005851", "005852", "005853", "005854", "005855", "005856", "005857", "005858", "005859", "005860", "005861", "005862", "005863", "005864", "005865", "005866", "005867", "005868", "005869", "005870", "005871", "005872", "005873", "005874", "005875", "005876", "005877", "005878", "005879", "005880", "005881", "005882", "005883", "005884", "005885", "005886", "005887", "005888", "005889", "005890", "005891", "005892", "005893", "005894", "005895", "005896", "005897", "005898", "005899", "005900", "005901", "005902", "005903", "005904", "005905", "005906", "005907", "005908", "005909", "005910", "005911", "005912", "005913", "005914", "005915", "005916", "005917", "005918", "005919", "005920", "005921", "005922", "005923", "005924", "005925", "005926", "005927", "005928", "005929", "005930", "005931", "005932", "005933", "005934", "005935", "005936", "005937", "005938", "005939", "005940", "005941", "005942", "005943", "005944", "005945", "005946", "005947", "005948", "005949", "005950", "005951", "005952", "005953", "005954", "005955", "005956", "005957", "005958", "005959", "005960", "005961", "005962", "005963", "005964", "005965", "005966", "005967", "005968", "005969", "005970", "005971", "005972", "005973", "005974", "005975", "005976", "005977", "005978", "005979", "005983", "005984", "005985", "005986", "005987", "005988", "005989", "005990", "005991", "005992", "005993", "005994", "005995", "005996", "005997", "005998", "005999", "006000", "006001", "006002", "006003", "006004", "006005", "006006", "006007", "006008", "006009", "006010", "006011", "006012", "006013", "006014", "006015", "006016", "006017", "006018", "006019", "006020", "006021", "006022", "006023", "006024", "006025", "006026", "006027", "006028", "006029", "006030", "006031", "006032", "006033", "006034", "006035", "006036", "006037", "006038", "006039", "006040", "006041", "006042", "006043", "006044", "006045", "006046", "006047", "006048", "006049", "006050", "006051", "006052", "006053", "006054", "006055", "006056", "006057", "006058", "006059", "006060", "006061", "006062", "006063", "006064", "006065", "006066", "006067", "006068", "006069", "006070", "006071", "006072", "006073", "006074", "006075", "006076", "006077", "006078", "006079", "006080", "006081", "006085", "006086", "006087", "006088", "006089", "006090", "006091", "006092", "006093", "006094", "006095", "006096", "006097", "006098", "006099", "006100", "006101", "006102", "006103", "006104", "006105", "006106", "006107", "006108", "006109", "006110", "006111", "006112", "006113", "006114", "006115", "006116", "006117", "006118", "006119", "006120", "006121", "006122", "006123", "006124", "006125", "006126", "006127", "006128", "006129", "006130", "006131", "006132", "006133", "006134", "006135", "006136", "006137", "006138", "006139", "006140", "006141", "006142", "007703", "007704", "007705", "007706", "007707", "007708", "007709", "007710", "007711", "007712", "007713", "007714", "007715", "007716", "007717", "007718", "007719", "007720", "007721", "007722", "007723", "007724", "007725", "007726", "007727", "007728", "007729", "007730", "007731", "007732", "007750", "007751", "007752", "007753", "007754", "007755", "007756", "007757", "007758", "007759", "007760", "007761", "007762", "007763", "007764", "007765", "007766", "007767", "007768", "007769", "007770", "007771", "007772", "007773", "007774", "007775", "007776", "007777", "007778", "007779", "007780", "007781", "007782", "007783", "007784", "007785", "007786", "007787", "007788", "007789", "007790", "007791", "007792", "007793", "007794", "007795", "007796", "007797", "007798", "007799", "007800", "007801", "007802", "007803", "007804", "007805", "007806", "007807", "007808", "007809", "007810", "007811", "007812", "007813", "007814", "007815", "007816", "007817", "007818", "007819", "007820", "007821", "007822", "007823", "009307", "009308", "009309", "009310", "009311", "009312", "009313", "009314", "009315", "009316", "009317", "009318", "009319", "009320", "009321", "009322", "009323", "009324", "009325", "009326", "009327", "009328", "009329", "009330", "009331", "009332", "009333", "009334", "009335", "009336", "009337", "009338", "009339", "009340", "009341", "009342", "009343", "009344", "009345", "009346", "009347", "009348", "009349", "009350", "009351", "009352", "009353", "009354", "009355", "009356", "009357", "009358", "009359", "009360", "009361", "009362", "009363", "009364", "009365", "009366", "009367", "009368", "009369", "009370", "009371", "009372", "009373", "009374", "009375", "009376", "009377", "009378", "009379", "009380", "009381", "009382", "009383", "009384", "009385", "009386", "009387", "009388", "009389", "009390", "009391", "009392", "009393", "009394", "009395", "009396", "009397", "009398", "009399", "009400", "009401", "009402", "009403", "009404", "009405", "009406", "009407", "009408", "009409", "009410", "009411", "009412", "009413", "009414", "009415", "009416", "009417", "009418", "009419", "009420", "009421", "009422", "009423", "009424", "009425", "009426", "009427", "009428", "009429", "009430", "009431", "009432", "009433", "009434", "009435", "009436", "009437", "009438", "009439", "009440", "009441", "009442", "009443", "009444", "009445", "009446", "009447", "009448", "009449", "009450", "009451", "009452", "009453", "009454", "009455", "009456", "009457", "009458", "009459", "009460", "009461", "009462", "009463", "009464", "009465", "009466", "009467", "009468", "009469", "009470", "009471", "009472", "009473", "009474", "009475", "009476", "009477", "009478", "009479", "009480", "009481", "009482", "009483", "009484", "009485", "009486", "009487", "009488", "009489", "009490", "009491", "009492", "009493", "009494", "009495", "009496", "009497", "009498", "009499", "009500", "009501", "009502", "009503", "009504", "009505", "009506", "009507", "009508", "009509", "009510", "009511", "009512", "009513", "009514", "009515", "009516", "009517", "009518", "009529", "009530", "009531", "009532", "009533", "009534", "009535", "009536", "009537", "009538", "009539", "009540", "009541", "009542", "009543", "009544", "009545", "009546", "009547", "009548", "009549", "009550", "009551", "009552", "009553", "009554", "009555", "009556", "009557", "009558", "009559", "009560", "009561", "009562", "009563", "009564", "009565", "009566", "009567", "009568", "009569", "009570", "009571", "009572", "009573", "009574", "009575", "009576", "009577", "009578", "009579", "009580", "009581", "009582", "009583", "009584", "009585", "009586", "009587", "009588", "009589", "009590", "009591", "009592", "009593", "009594", "009595", "009596", "009597", "009598", "009599", "009600", "009601", "009602", "009603", "009604", "009605", "009606", "009607", "009608", "009609", "009610", "009611", "009612", "009613", "009614", "009615", "009616", "009617", "009618", "009619", "009620", "009621", "009622", "009623", "009624", "009625", "009626", "009627", "009628", "009629", "009630", "009631", "009632", "009633", "009634", "009635", "009636", "009637", "009638", "009639", "009640", "009641", "009642", "009643", "009644", "009645", "009646", "009647", "009648", "009649", "009650", "009651", "009652", "009653", "009654", "009655", "009656", "009657", "009658", "009659", "009660", "009661", "009662", "009663", "009664", "009665", "009666", "009667", "009668", "009669", "009670", "009671", "009672", "009673", "009674", "009675", "009676", "009677", "009678", "009679", "009680", "009681", "009682", "009683", "009684", "009685", "009686", "009687", "009688", "009689", "009690", "009691", "009692", "009693", "009694", "009695", "009696", "009697", "009698", "009699", "009700", "011025", "011026", "011027", "011028", "011029", "011030", "011031", "011032", "011033", "011034", "011035", "011036", "011037", "011038", "011039", "011040", "011041", "011042", "011043", "011044", "011045", "011046", "011047", "011048", "011049", "011050", "011051", "011052", "011053", "011054", "011055", "011056", "011057", "011058", "011059", "011060", "011061", "011062", "011063", "011064", "011065", "011066", "011067", "011068", "011069", "011070", "011071", "011072", "011073", "011074", "011075", "011076", "011077", "011078", "011079", "011080", "011081", "011082", "011083", "011084", "011085", "011086", "011087", "011088", "011089", "011090", "011091", "011092", "011093", "011094", "011095", "011096", "011097", "011098", "011099", "011100", "011101", "011102", "011103", "011104", "011105", "011106", "011107", "011108", "011109", "011110", "011111", "011112", "011113", "011114", "011115", "011116", "011117", "011118", "011119", "011120", "011121", "011122", "011123", "011124", "011125", "011126", "011127", "011128", "011129", "011130", "011131", "011132", "011133", "011134", "011135", "011136", "011137", "011138", "011139", "011140", "011141", "011142", "011143", "011144", "011145", "011146", "011147", "011148", "011149", "011150", "011151", "011152", "011153", "011154", "011155", "011156", "011157", "011158", "011159", "011160", "011161", "011162", "011163", "011164", "011165", "011166", "011167", "011168", "011169", "011170", "011171", "011172", "011173", "011174", "011175", "011176", "011177", "011178", "011179", "011180", "011181", "011182", "011183", "011184", "011185", "011186", "011187", "011188", "011189", "011190", "011191", "011192", "011193", "011194", "011195", "011196", "011197", "011198", "011199", "011200", "011201", "011202", "011203", "011204", "011205", "011206", "011207", "011208", "011209", "011210", "011211", "011212", "011213", "011214", "011215", "011243", "011244", "011245", "011246", "011247", "011248", "011249", "011250", "011251", "011252", "011253", "011254", "011255", "011256", "011257", "011258", "011259", "011260", "011261", "011262", "011263", "011264", "011265", "011266", "011267", "011268", "011269", "011270", "011271", "011272", "011273", "011274", "011275", "011276", "011277", "011278", "011279", "011280", "011281", "011282", "011283", "011284", "011285", "011286", "011287", "011288", "011289", "011290", "011291", "011292", "011293", "011294", "011295", "011296", "011297", "011298", "011299", "011300", "011301", "011302", "011303", "011304", "011305", "011306", "011307", "011308", "011309", "011310", "011311", "011312", "011313", "011314", "011315", "011316", "011317", "011318", "011319", "011320", "011321", "011322", "011323", "011324", "011325", "011326", "011327", "011328", "011329", "011330", "011331", "011332", "011333", "011334", "011335", "011336", "011337", "011338", "011339", "011340", "011341", "011342", "011343", "011344", "011345", "011346", "011347", "011348", "011349", "011350", "011351", "011352", "011353", "011354", "011355", "011356", "011357", "011358", "011359", "011360", "011361", "011362", "011363", "011364", "011365", "011366", "011367", "011368", "011369", "011370", "011371", "011372", "011373", "011374", "011375", "011376", "011377", "011378", "011379", "011380", "011381", "011382", "011383", "011384", "011385", "011386", "011387", "011388", "011389", "011390", "011391", "011392", "011393", "011394", "011395", "011396", "011397", "011398", "011399", "011400", "011401", "011402", "011403", "011404", "011405", "011406", "011407", "012658", "012659", "012660", "012661", "012662", "012663", "012664", "012665", "012666", "012667", "012668", "012669", "012670", "012671", "012672", "012673", "012674", "012675", "012676", "012677", "012678", "012679", "012680", "012681", "012682", "012683", "012684", "012685", "012686", "012687", "012688", "012689", "012690", "012691", "012692", "012693", "012694", "012695", "012696", "012697", "012698", "012699", "012700", "012701", "012702", "012703", "012704", "012705", "012706", "012707", "012708", "012709", "012710", "012711", "012712", "012713", "012714", "012715", "012716", "012717", "012718", "012719", "012720", "012721", "012722", "012723", "012724", "012725", "012726", "012727", "012728", "012729", "012730", "012731", "012732", "012733", "012734", "012735", "012736", "012737", "012738", "012739", "012740", "012741", "012742", "012743", "012744", "012745", "012762", "012763", "012764", "012765", "012766", "012767", "012768", "012769", "012770", "012771", "012772", "012773", "012774", "012775", "012776", "012777", "012778", "012779", "012780", "012781", "012782", "012783", "012784", "012785", "012786", "012787", "012788", "012789", "012790", "012791", "012792", "012793", "012794", "012795", "012796", "012797", "012798", "012799", "012800", "012801", "012802", "012803", "012804", "012805", "012806", "012807", "012808", "012809", "012810", "012811", "012812", "012813", "012814", "012815", "012816", "012817", "012818", "012819", "012820", "012821", "012822", "012823", "012824", "012825", "012826", "012827", "012828", "012829", "012830", "012831", "012832", "012833", "012834", "012835", "012836", "012837", "012838", "012839", "012840", "012841", "012842", "012843", "012844", "012845", "012846", "012847", "012848", "012849", "012850", "012851", "012852", "012853", "012854", "012855", "012856", "012857", "012858", "012859", "012860", "012861", "012862", "012863", "012864", "012865", "012866", "012867", "012868", "012869", "012870", "012871", "012872", "012873", "012874", "012875", "012876", "012877", "012878", "012879", "012880", "012881", "012882", "012883", "012884", "012885", "012886", "012887", "012888", "012889", "012890", "012891", "012892", "012893", "012894", "012895", "012896", "012897", "012898", "012899", "012900", "012901", "012902", "012903", "012904", "012905", "012906", "012907", "012908", "012909", "012910", "012911", "012912", "012913", "012914", "012915", "012916", "012917", "012918", "012919", "012920", "012921", "012922", "012923", "012924", "012925", "012926", "012927", "012928", "012929", "012930", "012931", "012932", "012933", "012934", "012935", "012936", "012937", "012938", "012939", "012940", "012941", "012942", "012943", "012944", "012945", "012946", "012947", "012948", "012949", "012950", "012951", "012952", "012953", "012954", "012955", "012956", "012957", "012958", "014613", "014614", "014615", "014616", "014617", "014618", "014619", "014620", "014621", "014622", "014623", "014624", "014625", "014626", "014627", "014628", "014629", "014630", "014631", "014632", "014633", "014634", "014635", "014636", "014637", "014638", "014639", "014640", "014641", "014642", "014643", "014644", "014645", "014646", "014647", "014648", "014649", "014650", "014651", "014652", "014653", "014654", "014655", "014656", "014657", "014658", "014659", "014660", "014661", "014662", "014663", "014664", "014665", "014666", "014667", "014668", "014669", "014670", "014671", "014672", "014673", "014674", "014675", "014676", "014677", "014678", "014679", "014680", "014681", "014682", "014683", "014684", "014685", "014686", "014687", "014688", "014689", "014690", "014691", "014692", "014693", "014694", "014695", "014696", "014697", "014698", "014699", "014700", "014701", "014702", "014703", "014704", "014705", "014706", "014707", "014708", "014709", "014710", "014711", "014712", "014713", "014714", "014715", "014716", "014717", "014718", "014719", "014720", "014721", "014722", "014723", "014724", "014725", "014726", "014727", "014728", "014729", "014730", "014731", "014732", "014733", "014734", "014735", "014736", "014737", "014738", "014739", "014740", "014741", "014742", "014743", "014744", "014745", "014746", "014747", "014748", "014749", "014750", "014751", "014752", "014753", "014754", "014755", "014756", "014757", "014758", "014759", "014760", "014761", "014762", "014763", "014764", "014765", "014766", "014767", "014768", "014769", "014770", "014771", "014772", "014773", "014774", "014775", "014776", "014777", "014778", "014779", "014780", "014781", "014782", "014783", "014784", "014785", "014786", "014787", "014788", "014789", "014790", "014791", "014792", "014793", "014794", "014795", "014796", "014797", "014798", "014799", "014800", "014801", "014802", "014803", "014804", "014805", "014806", "014807", "014808", "014809", "014810", "014816", "014817", "014818", "014819", "014820", "014821", "014822", "014823", "014824", "014825", "014826", "014827", "014828", "014829", "014830", "014831", "014832", "014833", "014834", "014835", "014836", "014837", "014838", "014839", "014840", "014841", "014842", "014843", "014844", "014845", "014846", "014847", "014848", "014849", "014850", "014851", "014852", "014853", "014854", "014855", "014856", "014857", "014858", "014859", "014860", "014861", "014862", "014863", "014864", "014865", "014866", "014867", "014868", "014869", "014870", "014871", "014872", "014873", "014874", "014875", "014876", "014877", "014878", "014879", "014880", "014881", "014882", "014883", "014884", "014885", "014886", "014887", "014888", "014889", "014890", "014891", "014892", "014893", "014894", "014895", "014896", "014897", "014898", "014899", "014900", "014901", "014902", "014903", "014904", "014905", "014906", "014907", "014908", "014909", "014910", "014911", "014912", "014913", "014914", "014915", "014916", "014917", "014918", "014919", "014920", "014921", "014922", "014923", "014924", "014925", "014926", "014927", "014928", "014929", "014930", "014931", "014932", "014933", "014934", "014935", "014936", "014937", "014938", "014939", "014940", "014941", "014942", "014943", "014944", "014945", "014946", "014947", "014948", "014949", "014950", "014951", "014952", "014953", "014954", "014955", "014956", "014957", "014958", "014959", "014960", "014961", "014962", "014963", "014964", "014965", "014966", "014967", "014968", "014969", "014970", "014971", "014972", "014973", "014974", "014975", "014976", "014977", "014978", "014979", "014980", "014981", "014982", "014983", "014984", "014985", "014986", "014987", "014988", "014989", "014990", "014991", "014992", "014993", "014994", "014995", "014996", "014997", "014998", "014999", "015000", "015001", "015002", "015003", "015004", "015005", "015006", "015007", "015008", "015009", "015010", "015011", "015012", "015013", "015014", "015015", "015016", "015017", "015018", "015019", "015020", "015021", "015022", "015023", "015024", "015025", "015026", "015027", "015028", "015029", "015030", "015031", "015032", "015033", "016586", "016587", "016588", "016589", "016590", "016591", "016592", "016593", "016594", "016595", "016596", "016597", "016598", "016599", "016600", "016601", "016602", "016603", "016604", "016605", "016606", "016607", "016608", "016609", "016610", "016611", "016612", "016613", "016614", "016615", "016616", "016617", "016618", "016619", "016620", "016621", "016622", "016623", "016624", "016625", "016626", "016627", "016628", "016629", "016630", "016631", "016632", "016633", "016634", "016635", "016636", "016637", "016638", "016639", "016640", "016641", "016642", "016643", "016644", "016645", "016646", "016647", "016648", "016649", "016650", "016651", "016652", "016653", "016654", "016655", "016656", "016657", "016658", "016659", "016660", "016661", "016662", "016663", "016664", "016665", "016666", "016667", "016668", "016669", "016670", "016671", "016672", "016673", "016674", "016675", "016676", "016677", "016678", "016679", "016680", "016681", "016682", "016683", "016684", "016685", "016686", "016687", "016688", "016689", "016690", "016691", "016692", "016693", "016694", "016695", "016696", "016697", "016698", "016699", "016700", "016701", "016702", "016703", "016704", "016705", "016706", "016707", "016708", "016709", "016710", "016711", "016712", "016713", "016714", "016715", "016716", "016717", "016718", "016719", "016720", "016721", "016722", "016723", "016724", "016725", "016726", "016727", "016728", "016729", "016730", "016731", "016732", "016733", "016734", "016735", "016736", "016737", "016738", "016739", "016740", "016741", "016742", "016743", "016744", "016745", "016746", "016747", "016748", "016749", "016750", "016751", "016752", "016753", "016754", "016755", "016756", "016757", "016758", "016759", "016760", "016761", "016762", "016763", "016764", "016765", "016766", "016767", "016768", "016769", "016770", "016771", "016772", "016773", "016774", "016775", "016776", "016777", "016778", "016779", "016780", "016781", "016782", "016783", "016784", "016785", "016786", "016787", "016788", "016789", "016790", "016791", "016792", "016793", "016794", "016795", "016806", "016807", "016808", "016809", "016810", "016811", "016812", "016813", "016814", "016815", "016816", "016817", "016818", "016819", "016820", "016821", "016822", "016823", "016824", "016825", "016826", "016827", "016828", "016829", "016830", "016831", "016832", "016833", "016834", "016835", "016836", "016837", "016838", "016839", "016840", "016841", "016842", "016843", "016844", "016845", "016846", "016847", "016848", "016849", "016850", "016851", "016852", "016853", "016854", "016855", "016856", "016857", "016858", "016859", "016860", "016861", "016862", "016863", "016864", "016865", "016866", "016867", "016868", "016869", "016870", "016871", "016872", "016873", "016874", "016875", "016876", "016877", "016878", "016879", "016880", "016881", "016882", "016883", "016884", "016885", "016886", "016887", "016888", "016889", "016890", "016891", "016892", "016893", "016894", "016895", "016896", "016897", "016898", "016899", "016900", "016901", "016902", "016903", "016904", "016905", "016906", "016907", "016908", "016909", "016910", "016911", "016912", "016913", "016914", "016915", "016916", "016917", "016918", "016919", "016920", "016921", "016922", "016923", "016924", "016925", "016926", "016927", "016928", "016929", "016930", "016931", "016932", "016933", "016934", "016935", "016936", "016937", "016938", "016939", "016940", "016941", "016942", "016943", "016944", "016945", "016946", "016947", "016948", "016949", "016950", "016951", "016952", "016953", "016954", "016955", "016956", "016957", "016958", "016959", "016960", "016961", "016962", "016963", "016964", "016965", "016966", "016967", "016968", "016969", "016970", "016971", "016972", "016973", "016974", "016975", "016976", "016977", "016978", "016979", "016980", "016981", "016982", "016983", "016984", "016985", "016986", "016987", "016988", "016989", "016990", "016991", "016992", "016993", "016994", "016995", "016996", "016997", "016998", "016999", "017000", "017001", "017002", "017003", "017004", "017005", "017006", "017007", "017008", "017009", "017010", "017011", "017012", "017013", "017014", "017015", "017016", "017017", "017018", "017019", "017020", "017021", "017022", "017023", "017024", "017025", "017026", "017027", "017028", "017029", "017030", "017031", "017032", "017033", "017034", "017035", "017036", "017037", "017038", "017039", "017040", "017041", "017042", "017043", "017044", "017045", "017046", "017047", "017048", "017049", "017050", "017051", "017052", "017053", "017054", "017055", "017056", "018636", "018637", "018638", "018639", "018640", "018641", "018642", "018643", "018644", "018645", "018646", "018647", "018648", "018649", "018650", "018651", "018652", "018653", "018654", "018655", "018656", "018657", "018658", "018659", "018660", "018661", "018662", "018663", "018664", "018665", "018666", "018667", "018668", "018669", "018670", "018671", "018672", "018673", "018674", "018675", "018676", "018677", "018678", "018679", "018680", "018681", "018682", "018683", "018684", "018685", "018686", "018687", "018688", "018689", "018690", "018691", "018692", "018693", "018694", "018695", "018696", "018697", "018698", "018699", "018700", "018701", "018702", "018703", "018704", "018705", "018706", "018707", "018708", "018709", "018710", "018711", "018712", "018713", "018714", "018715", "018716", "018717", "018718", "018719", "018720", "018721", "018722", "018723", "018724", "018725", "018726", "018727", "018728", "018729", "018730", "018731", "018732", "018733", "018734", "018735", "018736", "018737", "018738", "018739", "018740", "018741", "018742", "018743", "018744", "018745", "018746", "018747", "018748", "018749", "018750", "018751", "018752", "018753", "018754", "018755", "018756", "018757", "018758", "018759", "018760", "018761", "018762", "018763", "018764", "018765", "018766", "018767", "018768", "018769", "018770", "018771", "018772", "018773", "018774", "018775", "018776", "018777", "018778", "018779", "018780", "018781", "018782", "018783", "018784", "018785", "018786", "018787", "018788", "018789", "018790", "018791", "018792", "018793", "018794", "018795", "018796", "018797", "018798", "018799", "018800", "018801", "018802", "018803", "018804", "018805", "018816", "018817", "018818", "018819", "018820", "018821", "018822", "018823", "018824", "018825", "018826", "018827", "018828", "018829", "018830", "018831", "018832", "018833", "018834", "018835", "018836", "018837", "018838", "018839", "018840", "018841", "018842", "018843", "018844", "018845", "018846", "018847", "018848", "018849", "018850", "018851", "018852", "018853", "018854", "018855", "018856", "018857", "018858", "018859", "018860", "018861", "018862", "018863", "018864", "018865", "018866", "018867", "018868", "018869", "018870", "018871", "018872", "018873", "018874", "018875", "018876", "018877", "018878", "018879", "018880", "018881", "018882", "018883", "018884", "018885", "018886", "018887", "018888", "018889", "018890", "018891", "018892", "018893", "018894", "018895", "018896", "018897", "018898", "018899", "018900", "018901", "018902", "018903", "018904", "018905", "018906", "018907", "018908", "018909", "018910", "018911", "018912", "018913", "018914", "018915", "018916", "018917", "018918", "018919", "018920", "018921", "018922", "018923", "018924", "018925", "018926", "018927", "018928", "018929", "018930", "018931", "018932", "018933", "018934", "018935", "018938", "018939", "018940", "018941", "018942", "018943", "018944", "018945", "018946", "018947", "018948", "018949", "018950", "018951", "018952", "018953", "018954", "018955"], "test": ["000533", "000534", "000535", "000536", "000537", "000538", "000539", "000540", "000541", "000542", "000543", "000544", "000545", "000546", "000547", "000548", "000549", "000550", "000551", "000552", "000553", "000554", "000555", "000556", "000557", "000558", "000559", "000560", "000561", "000562", "000563", "000564", "000565", "000566", "000567", "000568", "000569", "000570", "000571", "000572", "000573", "000574", "000575", "000576", "000577", "000578", "000579", "000580", "000581", "000582", "000583", "000584", "000585", "000586", "000587", "000588", "000589", "000590", "000591", "000592", "000593", "000594", "000595", "000596", "000597", "000598", "000599", "000600", "000601", "000602", "000603", "000604", "000605", "000606", "000607", "000608", "000609", "000610", "000611", "000612", "000613", "000614", "000615", "000616", "000617", "000618", "000619", "000620", "000621", "000622", "000623", "000624", "000625", "000626", "000627", "000628", "000629", "000630", "000631", "000632", "000633", "000634", "000635", "000636", "000637", "000638", "000639", "000640", "000641", "000642", "000643", "000644", "000645", "000646", "000647", "000648", "000668", "000669", "000670", "000671", "000672", "000673", "000674", "000675", "000676", "000677", "000678", "000679", "000680", "000681", "000682", "000683", "000684", "000685", "000686", "000687", "000688", "000689", "000690", "000691", "000692", "000693", "000694", "000695", "000696", "000697", "000698", "000699", "000700", "000701", "000702", "000703", "000704", "000705", "000706", "000707", "000708", "000709", "000710", "000711", "000712", "000713", "000714", "000715", "000716", "000717", "000718", "000719", "000720", "000721", "000722", "000723", "000724", "000725", "000726", "000727", "000728", "000729", "000730", "000731", "000732", "000733", "000734", "000735", "000736", "000737", "000738", "000739", "000740", "000741", "000742", "000743", "000744", "000745", "000746", "000747", "000748", "000749", "000750", "000751", "000752", "000753", "000754", "000755", "000756", "000757", "000758", "000759", "000760", "000761", "000762", "000781", "000782", "000783", "000784", "000785", "000786", "000787", "000788", "000789", "000790", "000791", "000792", "000793", "000794", "000795", "000796", "000797", "000798", "000799", "000800", "000801", "000802", "000803", "000804", "000805", "000806", "000807", "000808", "000809", "000810", "000811", "000812", "000813", "000814", "000815", "000816", "000817", "000818", "000819", "000820", "000821", "000822", "000823", "000824", "000825", "000826", "000827", "000828", "000829", "000830", "000831", "000832", "000833", "000834", "000835", "000836", "000837", "000838", "000839", "000840", "000841", "000842", "000843", "000844", "000845", "000846", "000847", "000848", "000849", "000850", "000851", "000852", "000853", "000854", "000855", "000856", "000857", "000858", "000859", "000860", "000861", "000862", "000863", "000864", "000865", "001586", "001587", "001588", "001589", "001590", "001591", "001592", "001593", "001595", "001596", "001597", "001598", "001599", "001600", "001601", "001602", "001603", "001604", "001605", "001606", "001607", "001608", "001609", "001610", "001611", "001612", "001613", "001614", "001615", "001616", "001617", "001618", "001619", "001620", "001621", "001622", "001623", "001624", "001625", "001626", "001627", "001628", "001629", "001630", "001631", "001632", "001633", "001634", "001635", "001636", "001637", "001638", "001639", "001640", "001641", "001642", "001643", "001644", "001645", "001646", "001647", "001648", "001649", "001650", "001651", "001652", "001653", "001654", "001655", "001656", "001657", "001658", "001659", "001660", "001661", "001662", "001663", "001664", "001665", "001666", "001667", "001668", "001669", "001670", "001671", "001672", "001673", "001674", "001675", "001676", "001677", "001678", "001679", "001680", "001681", "001682", "001683", "001684", "001685", "001686", "001687", "001688", "001689", "001690", "001691", "001692", "001693", "001694", "001695", "001696", "001699", "001700", "001701", "001702", "001703", "001704", "001705", "001706", "001707", "001708", "001709", "001710", "001711", "001712", "001713", "001714", "001715", "001716", "001717", "001718", "001719", "001720", "001721", "001722", "001723", "001724", "001725", "001726", "001727", "001728", "001729", "001730", "001731", "001732", "001733", "001734", "001735", "001736", "001737", "001738", "001739", "001740", "001741", "001742", "001743", "001744", "001745", "001746", "001747", "001748", "001749", "001750", "001751", "001752", "001753", "001754", "001755", "001756", "001757", "001758", "001759", "001760", "001761", "001762", "001763", "001764", "001765", "001766", "001767", "001768", "001769", "001770", "001771", "001772", "001773", "001774", "001775", "001776", "001777", "001778", "001779", "001780", "001781", "001782", "001783", "001784", "001785", "001786", "001787", "001788", "001789", "001790", "001791", "001792", "001793", "001794", "001795", "001796", "001797", "001798", "001799", "001800", "001801", "001802", "001803", "001804", "001805", "001806", "001807", "001808", "001809", "001810", "001811", "001812", "001813", "001814", "001815", "001816", "001817", "001818", "001819", "001820", "001821", "001822", "001823", "001824", "001825", "001826", "001827", "001828", "001829", "001830", "001831", "001832", "001833", "001834", "001835", "001836", "001837", "001838", "001839", "001840", "001841", "001842", "001843", "001844", "001845", "001846", "001847", "001848", "001849", "001850", "001851", "001852", "001853", "001854", "001855", "001856", "001857", "001858", "001859", "001860", "001861", "001862", "001863", "001864", "001865", "001866", "001867", "001868", "001869", "001870", "001871", "001872", "001873", "001874", "001875", "001876", "001877", "001878", "001879", "001880", "001881", "001882", "001883", "001884", "001885", "001886", "001887", "001888", "001889", "001890", "001891", "001892", "001893", "001894", "001895", "001896", "001897", "001898", "001899", "001900", "001901", "001902", "001903", "001904", "001905", "001906", "001907", "001908", "001909", "001910", "001911", "001912", "001913", "001914", "001915", "001916", "001917", "001918", "001919", "001920", "001921", "001922", "001923", "001924", "001925", "001926", "001927", "001928", "001929", "001930", "001931", "001932", "001933", "001934", "001935", "001936", "001937", "001938", "001939", "001940", "001941", "001942", "001943", "001944", "001945", "001946", "001947", "001948", "001949", "001950", "001951", "001952", "001953", "001954", "001955", "001956", "001957", "001958", "001959", "001960", "001961", "001962", "001963", "001964", "001965", "001966", "001967", "001968", "001969", "001970", "001971", "001972", "001973", "001974", "001975", "001976", "001977", "001978", "001979", "001980", "001981", "001982", "001983", "001984", "001985", "001986", "001987", "001988", "001989", "001990", "001991", "001992", "001993", "001994", "001995", "001996", "001997", "001998", "001999", "002000", "002001", "002002", "002003", "002004", "002005", "002006", "002007", "002008", "002009", "002010", "002011", "002012", "002013", "002014", "002015", "002016", "002017", "002018", "002019", "002020", "002021", "002022", "002023", "002024", "002025", "002026", "002027", "002028", "002029", "002030", "002031", "002032", "002033", "002034", "002035", "002036", "002037", "002038", "002039", "002040", "002041", "002042", "002043", "002044", "002045", "002046", "002047", "002048", "002049", "002050", "002051", "002052", "002053", "002054", "002055", "002056", "002057", "002058", "002059", "002060", "002061", "002062", "002063", "002064", "002065", "002066", "002067", "002068", "002069", "002070", "002071", "002072", "002073", "002074", "002075", "002076", "002077", "002078", "002079", "002080", "002081", "002082", "002083", "002084", "002085", "002086", "002087", "002088", "002089", "002090", "002091", "002092", "002093", "002094", "002095", "002096", "002097", "002098", "002099", "002100", "002101", "002102", "002103", "002104", "002105", "002106", "002107", "002108", "002109", "002110", "002111", "002112", "002113", "002114", "002115", "002116", "002117", "002118", "002119", "002120", "002121", "002122", "002123", "002124", "002125", "002126", "002127", "002128", "002129", "002130", "002131", "002132", "003172", "003173", "003174", "003175", "003176", "003177", "003178", "003179", "003180", "003181", "003182", "003183", "003184", "003185", "003186", "003187", "003188", "003189", "003190", "003191", "003192", "003193", "003194", "003195", "003196", "003197", "003198", "003199", "003200", "003201", "003202", "003203", "003204", "003205", "003206", "003207", "003208", "003209", "003210", "003211", "003212", "003213", "003214", "003215", "003216", "003217", "003218", "003219", "003220", "003221", "003222", "003223", "003224", "003225", "003226", "003227", "003228", "003229", "003230", "003231", "003232", "003233", "003234", "003235", "003236", "003237", "003238", "003239", "003240", "003241", "003242", "003243", "003244", "003245", "003246", "003247", "003248", "003249", "003250", "003251", "003252", "003253", "003254", "003255", "003256", "003257", "003258", "003259", "003260", "003261", "003262", "003263", "003264", "003265", "003266", "003267", "003268", "003269", "003270", "003271", "003272", "003273", "003274", "003275", "003276", "003277", "003278", "003279", "003280", "003281", "003282", "003283", "003284", "003285", "003286", "003287", "003288", "003289", "003290", "003291", "003292", "003293", "003294", "003295", "003296", "003297", "003298", "003299", "003300", "003301", "003302", "003303", "003304", "003305", "003306", "003307", "003308", "003309", "003310", "003311", "003312", "003313", "003320", "003321", "003322", "003323", "003324", "003325", "003326", "003327", "003328", "003329", "003330", "003331", "003332", "003333", "003334", "003335", "003336", "003337", "003338", "003339", "003340", "003341", "003342", "003343", "003344", "003345", "003346", "003347", "003348", "003349", "003350", "003351", "003352", "003353", "003354", "003355", "003356", "003357", "003358", "003359", "003360", "003361", "003362", "003363", "003364", "003365", "003366", "003367", "003368", "003369", "003370", "003371", "003372", "003373", "003374", "003375", "003376", "003377", "003378", "003379", "003380", "003381", "003382", "003384", "003385", "003386", "003387", "003388", "003389", "003390", "003391", "003392", "003393", "003394", "003395", "003396", "003397", "003398", "003399", "003400", "003401", "003402", "003403", "003404", "003405", "003406", "003407", "003408", "003409", "003410", "003411", "003412", "003413", "003414", "003415", "003416", "003417", "003418", "003419", "003420", "003421", "003422", "003423", "003424", "003425", "003426", "003427", "003428", "003429", "003430", "003431", "003432", "003433", "003434", "003435", "003436", "003437", "003438", "003439", "003440", "003441", "003442", "003443", "003444", "003445", "003446", "003447", "003448", "003449", "003450", "003451", "003452", "003453", "003454", "003455", "003456", "003457", "003458", "003459", "003460", "003461", "003462", "003463", "003464", "003465", "003466", "003467", "003468", "003469", "003470", "003471", "003472", "003473", "003474", "003475", "003476", "003477", "003478", "003479", "003480", "003481", "003482", "003483", "003484", "003485", "003486", "003487", "003488", "003489", "003490", "003491", "003492", "003493", "003494", "003495", "003496", "003497", "003498", "003499", "003500", "003501", "003502", "003503", "003504", "003505", "003506", "003507", "003508", "003509", "003510", "003511", "003512", "003513", "003514", "003515", "003516", "003517", "003518", "003519", "003520", "003521", "003522", "003523", "003524", "003525", "003526", "003527", "003528", "003529", "003530", "003531", "003532", "003533", "003534", "003535", "003536", "003537", "003538", "003539", "003540", "003541", "003542", "003543", "003544", "003545", "003546", "003547", "003548", "003549", "003550", "003551", "003552", "003553", "003554", "003555", "003556", "003557", "003558", "003559", "003560", "003561", "003562", "003563", "003564", "003565", "003566", "003572", "003573", "003574", "003575", "003576", "003577", "003578", "003579", "003580", "003581", "003582", "003583", "003584", "003585", "003586", "003587", "003588", "003589", "003590", "003591", "003592", "003593", "003594", "003595", "003596", "003597", "003598", "003599", "003600", "003601", "003602", "003603", "003604", "003605", "003606", "003607", "003608", "003609", "003610", "003611", "003612", "003613", "003614", "003615", "003616", "003617", "003618", "003619", "003620", "003621", "003622", "003623", "003624", "003625", "003626", "003627", "003628", "003629", "003630", "003631", "003632", "003633", "003634", "003635", "003636", "003637", "003638", "003639", "003640", "003641", "003642", "003643", "003644", "003645", "003646", "003647", "003648", "003649", "003650", "003651", "003652", "003653", "003654", "003655", "003656", "003657", "003658", "003659", "003660", "003661", "003662", "003663", "003664", "003665", "003666", "003667", "003668", "003669", "003670", "003671", "003672", "003673", "003674", "003675", "003676", "003677", "003678", "003679", "003680", "003681", "003682", "003683", "003684", "003685", "003686", "003687", "003688", "003689", "003690", "003691", "003692", "003693", "003694", "003695", "003696", "003697", "003698", "003699", "003700", "003701", "003702", "003703", "003704", "003705", "003706", "003707", "003708", "003709", "003710", "003711", "003712", "003713", "003714", "003715", "003716", "003717", "003718", "003719", "003720", "003721", "003722", "003723", "003724", "003725", "003726", "003727", "003728", "003729", "003730", "003731", "003732", "003733", "003734", "003735", "003736", "003737", "003738", "003739", "003740", "003741", "003742", "003743", "003744", "003745", "003746", "003747", "003748", "003749", "003750", "003751", "003752", "003753", "003754", "003755", "003756", "003757", "003758", "003759", "003760", "003761", "003762", "003763", "003764", "003765", "003766", "003767", "003768", "003769", "003770", "003771", "003772", "003773", "003774", "003775", "003776", "003777", "003778", "003779", "003780", "003781", "003782", "003783", "003784", "003785", "003786", "003787", "003788", "003789", "003790", "003791", "003792", "003793", "003794", "003795", "003796", "003797", "003798", "003799", "003800", "003801", "004683", "004684", "004685", "004686", "004687", "004688", "004689", "004690", "004691", "004692", "004693", "004694", "004695", "004696", "004697", "004698", "004699", "004700", "004701", "004702", "004703", "004704", "004705", "004706", "004707", "004708", "004709", "004710", "004711", "004712", "004713", "004714", "004715", "004716", "004717", "004718", "004719", "004720", "004721", "004722", "004723", "004724", "004725", "004726", "004727", "004728", "004729", "004730", "004731", "004732", "004733", "004734", "004735", "004736", "004737", "004738", "004739", "004740", "004741", "004742", "004743", "004744", "004745", "004746", "004747", "004748", "004749", "004750", "004751", "004752", "004753", "004754", "004755", "004756", "004757", "004758", "004759", "004760", "004761", "004762", "004763", "004764", "004765", "004766", "004767", "004768", "004769", "004770", "004771", "004772", "004773", "004774", "004775", "004776", "004777", "004778", "004779", "004780", "004781", "004782", "004783", "004784", "004785", "004786", "004787", "004788", "004789", "004790", "004791", "004792", "004793", "004794", "004795", "004796", "004797", "004798", "004799", "004800", "004801", "004802", "004803", "004808", "004809", "004810", "004811", "004812", "004813", "004814", "004815", "004816", "004817", "004818", "004819", "004820", "004821", "004822", "004823", "004824", "004825", "004826", "004827", "004828", "004829", "004830", "004831", "004832", "004833", "004834", "004835", "004836", "004837", "004838", "004839", "004840", "004841", "004842", "004843", "004844", "004845", "004846", "004847", "004848", "004849", "004850", "004851", "004852", "004853", "004854", "004855", "004856", "004857", "004858", "004859", "004860", "004861", "004862", "004863", "004864", "004865", "004866", "004867", "004868", "004869", "004870", "004871", "004872", "004873", "004874", "004875", "004876", "004877", "004878", "004879", "004880", "004881", "004882", "004883", "004884", "004885", "004886", "004887", "004888", "004889", "004890", "004891", "004892", "004893", "004894", "004895", "004896", "004897", "004898", "004899", "004900", "004901", "004902", "004903", "004904", "004905", "004906", "004907", "004908", "004909", "004910", "004911", "004912", "004913", "004914", "004915", "004916", "004917", "004918", "004919", "004920", "004921", "004922", "004923", "004924", "004943", "004944", "004945", "004946", "004947", "004948", "004949", "004950", "004951", "004952", "004953", "004954", "004955", "004956", "004957", "004958", "004959", "004960", "004961", "004962", "004963", "004964", "004965", "004966", "004967", "004968", "004969", "004970", "004971", "004972", "004973", "004974", "004975", "004976", "004977", "004978", "004979", "004980", "004981", "004982", "004983", "004984", "004985", "004986", "004987", "004988", "006153", "006154", "006155", "006156", "006157", "006158", "006159", "006160", "006161", "006162", "006163", "006164", "006165", "006166", "006167", "006168", "006169", "006170", "006171", "006172", "006173", "006174", "006175", "006176", "006177", "006178", "006179", "006180", "006181", "006182", "006183", "006184", "006185", "006186", "006187", "006188", "006189", "006190", "006191", "006192", "006193", "006194", "006195", "006196", "006197", "006198", "006199", "006200", "006201", "006202", "006203", "006204", "006205", "006206", "006207", "006208", "006209", "006210", "006211", "006212", "006213", "006214", "006215", "006216", "006217", "006218", "006219", "006220", "006221", "006222", "006223", "006224", "006225", "006226", "006227", "006228", "006229", "006230", "006231", "006232", "006233", "006234", "006235", "006236", "006237", "006238", "006239", "006240", "006241", "006242", "006243", "006244", "006245", "006246", "006247", "006248", "006249", "006250", "006251", "006252", "006253", "006254", "006255", "006256", "006257", "006258", "006259", "006260", "006261", "006262", "006263", "006264", "006265", "006266", "006267", "006268", "006269", "006270", "006271", "006272", "006273", "006274", "006275", "006276", "006277", "006278", "006279", "006280", "006281", "006282", "006283", "006284", "006285", "006286", "006287", "006288", "006289", "006290", "006291", "006292", "006293", "006294", "006295", "006296", "006297", "006298", "006299", "006300", "006301", "006302", "006303", "006304", "006305", "006306", "006307", "006308", "006309", "006310", "006311", "006312", "006313", "006314", "006315", "006341", "006342", "006343", "006344", "006345", "006346", "006347", "006348", "006349", "006350", "006351", "006352", "006353", "006354", "006355", "006356", "006357", "006358", "006359", "006360", "006361", "006362", "006363", "006365", "006366", "006367", "006368", "006369", "006370", "006371", "006372", "006374", "006375", "006376", "006377", "006378", "006379", "006380", "006381", "006382", "006383", "006384", "006385", "006386", "006387", "006388", "006389", "006390", "006391", "006392", "006393", "006394", "006395", "006396", "006397", "006398", "006399", "006400", "006401", "006402", "006403", "006404", "006405", "006406", "006407", "006408", "006409", "006410", "006411", "006412", "006413", "006414", "006415", "006416", "006417", "006418", "006419", "006421", "006422", "006423", "006424", "006425", "006426", "006427", "006428", "006429", "006430", "006431", "006432", "006433", "006434", "006435", "006436", "006437", "006438", "006439", "006440", "006441", "006442", "006443", "006444", "006445", "006446", "006447", "006448", "006449", "006450", "006451", "006452", "006453", "006454", "006455", "006456", "006457", "006458", "006459", "006460", "006461", "006462", "006463", "006464", "006465", "006466", "006467", "006468", "006469", "006470", "006471", "006472", "006473", "006474", "006475", "006476", "006477", "006478", "006479", "006480", "006481", "006482", "006483", "006484", "006485", "006486", "006487", "006488", "006489", "006490", "006491", "006492", "006493", "006494", "006495", "006496", "006497", "006498", "006499", "006500", "006501", "006502", "006503", "006504", "006505", "006506", "006507", "006508", "006509", "006510", "006511", "006512", "006513", "006514", "006515", "006516", "006517", "006518", "006519", "006520", "006521", "006522", "006523", "006524", "006525", "006526", "006527", "006528", "006529", "006530", "006531", "006532", "006533", "006534", "006535", "006536", "006537", "006538", "006539", "006540", "006541", "006542", "006543", "006544", "006545", "006546", "007834", "007835", "007836", "007837", "007838", "007839", "007840", "007841", "007842", "007843", "007844", "007845", "007846", "007847", "007848", "007849", "007850", "007851", "007852", "007853", "007854", "007855", "007856", "007857", "007858", "007859", "007860", "007861", "007862", "007863", "007864", "007865", "007866", "007867", "007868", "007869", "007870", "007871", "007872", "007873", "007874", "007875", "007876", "007877", "007878", "007879", "007880", "007881", "007882", "007883", "007884", "007885", "007886", "007887", "007888", "007889", "007890", "007891", "007892", "007893", "007894", "007895", "007896", "007897", "007898", "007899", "007900", "007901", "007902", "007903", "007904", "007905", "007906", "007907", "007908", "007909", "007910", "007911", "007912", "007913", "007914", "007915", "007916", "007917", "007918", "007919", "007920", "007921", "007922", "007923", "007924", "007925", "007926", "007927", "007928", "007929", "007930", "007931", "007932", "007933", "007934", "007935", "007936", "007937", "007938", "007939", "007940", "007941", "007942", "007943", "007944", "007945", "007946", "007947", "007948", "007949", "007950", "007951", "007952", "007953", "007954", "007955", "007956", "007957", "007958", "007959", "007960", "007961", "007962", "007963", "007964", "007965", "007966", "007967", "007968", "007969", "007970", "007971", "007972", "007973", "007974", "007985", "007986", "007987", "007988", "007989", "007990", "007991", "007992", "007993", "007994", "007995", "007996", "007997", "007998", "007999", "008000", "008001", "008002", "008003", "008004", "008005", "008006", "008007", "008008", "008009", "008010", "008011", "008012", "008013", "008014", "008015", "008016", "008017", "008018", "008019", "008020", "008021", "008022", "008023", "008024", "008025", "008026", "008027", "008028", "008029", "008030", "008031", "008032", "008033", "008034", "008035", "008036", "008037", "008038", "008039", "008040", "008041", "008042", "008043", "008044", "008045", "008046", "008047", "008048", "008049", "008050", "008051", "008052", "008053", "008054", "008055", "008056", "008057", "008058", "008059", "008060", "008061", "008062", "008063", "008064", "008065", "008066", "008067", "008068", "008069", "008070", "008071", "008072", "008073", "008074", "008075", "008076", "008077", "008078", "008079", "008080", "008081", "008082", "008083", "008084", "008085", "008086", "008087", "008088", "008089", "008090", "008091", "008092", "008093", "008094", "008095", "008096", "008097", "008098", "008099", "008100", "008101", "008102", "008103", "008104", "008105", "008106", "008107", "008108", "008109", "008110", "008111", "008112", "008113", "008114", "008115", "008116", "008117", "008118", "008119", "008120", "008121", "008122", "008123", "008124", "008125", "008126", "008127", "008128", "008129", "008130", "008131", "008132", "008133", "008134", "008135", "008136", "008137", "008138", "008139", "008140", "008141", "008142", "008143", "008144", "008145", "008146", "008147", "008148", "008149", "008150", "008151", "008152", "008153", "008154", "008155", "008156", "008167", "008168", "008169", "008170", "008171", "008172", "008173", "008174", "008175", "008176", "008177", "008178", "008179", "008180", "008181", "008182", "008183", "008184", "008185", "008186", "008187", "008188", "008189", "008190", "008191", "008192", "008193", "008194", "008195", "008196", "008197", "008198", "008199", "008200", "008201", "008202", "008203", "008204", "008205", "008206", "008207", "008208", "008209", "008210", "008211", "008212", "008213", "008214", "008215", "008216", "008217", "008218", "008219", "008220", "008221", "008222", "008223", "008224", "008225", "008226", "008227", "008228", "008229", "008230", "008231", "008232", "008233", "008234", "008235", "008236", "008237", "008238", "008239", "008240", "008241", "008242", "008243", "008244", "008245", "008246", "008247", "008248", "008249", "008250", "008251", "008252", "008253", "008254", "008255", "008256", "008257", "008258", "008259", "008260", "008261", "008262", "008263", "008264", "008265", "008266", "008267", "008268", "008269", "008270", "008271", "008272", "008273", "008274", "008275", "008276", "008277", "008278", "008279", "008280", "008281", "008282", "008283", "008284", "008285", "008286", "008287", "008288", "008289", "008290", "008291", "008292", "008293", "008294", "008295", "008296", "008297", "008298", "008299", "008300", "008301", "008302", "008303", "008304", "008305", "008306", "008307", "008308", "008309", "008310", "008311", "008312", "008313", "008314", "008315", "008316", "008317", "008318", "008319", "008320", "008321", "008322", "008323", "008324", "008325", "008326", "008327", "008328", "008329", "008330", "008331", "008332", "008333", "008334", "008335", "008336", "008337", "009712", "009713", "009714", "009715", "009716", "009717", "009718", "009719", "009720", "009721", "009722", "009723", "009724", "009725", "009726", "009727", "009728", "009729", "009730", "009731", "009732", "009733", "009734", "009735", "009736", "009737", "009738", "009739", "009740", "009741", "009742", "009743", "009744", "009745", "009746", "009747", "009748", "009749", "009750", "009751", "009752", "009753", "009754", "009755", "009756", "009757", "009758", "009759", "009760", "009761", "009762", "009763", "009764", "009765", "009766", "009767", "009768", "009769", "009770", "009771", "009772", "009773", "009774", "009775", "009776", "009777", "009778", "009779", "009780", "009781", "009782", "009783", "009784", "009785", "009786", "009787", "009788", "009789", "009790", "009791", "009792", "009793", "009794", "009795", "009796", "009797", "009798", "009799", "009800", "009801", "009802", "009803", "009804", "009805", "009806", "009807", "009808", "009809", "009810", "009811", "009812", "009813", "009814", "009815", "009816", "009817", "009818", "009819", "009820", "009821", "009822", "009833", "009834", "009835", "009836", "009837", "009838", "009839", "009840", "009841", "009842", "009843", "009844", "009845", "009846", "009847", "009848", "009849", "009850", "009851", "009852", "009853", "009854", "009855", "009856", "009857", "009858", "009859", "009860", "009861", "009862", "009863", "009864", "009865", "009866", "009867", "009868", "009869", "009870", "009871", "009872", "009873", "009874", "009875", "009876", "009877", "009878", "009879", "009880", "009881", "009882", "009883", "009884", "009885", "009886", "009887", "009888", "009889", "009890", "009891", "009892", "009893", "009894", "009895", "009896", "009897", "009898", "009899", "009900", "009901", "009902", "009903", "009904", "009905", "009906", "009907", "009908", "009909", "009910", "009911", "009912", "009913", "009914", "009915", "009916", "009917", "009918", "009919", "009920", "009921", "009922", "009923", "009924", "009925", "009926", "009927", "009928", "009929", "009930", "009931", "009932", "009933", "009934", "009935", "009936", "009937", "009938", "009939", "009940", "009941", "009942", "009943", "009944", "009945", "009946", "009947", "009948", "009949", "009950", "009951", "009952", "009953", "009954", "009955", "009956", "009957", "009958", "009959", "009960", "009961", "009962", "009963", "009964", "009965", "009966", "009967", "009968", "009969", "009970", "009971", "009972", "009973", "009974", "009975", "009976", "009977", "009978", "009979", "009980", "009981", "009982", "009983", "009984", "009985", "009986", "009987", "009988", "009989", "009990", "009991", "009992", "009993", "009994", "009995", "009996", "009997", "009998", "009999", "010000", "010001", "010002", "010003", "010004", "010005", "010006", "010007", "010008", "010009", "010010", "010011", "010012", "010013", "010014", "010015", "010016", "010017", "010018", "010019", "010020", "010021", "010022", "010023", "010024", "010025", "010026", "010027", "010028", "010029", "010030", "010031", "010032", "010033", "010034", "010035", "010036", "010037", "010038", "010039", "010040", "010041", "010042", "010043", "010044", "010045", "010046", "010047", "010048", "010049", "010050", "010051", "010052", "010053", "010054", "010055", "010066", "010067", "010068", "010069", "010070", "010071", "010072", "010073", "010074", "010075", "010076", "010077", "010078", "010079", "010080", "010081", "010082", "010083", "010084", "010085", "010086", "010087", "010088", "010089", "010090", "010091", "010092", "010093", "010094", "010095", "010096", "010097", "010098", "010099", "010100", "010101", "010102", "010103", "010104", "010105", "010106", "010107", "010108", "010109", "010110", "010111", "010112", "010113", "010114", "010115", "010116", "010117", "010118", "010119", "010120", "010121", "010122", "010123", "010124", "010125", "010126", "010127", "010128", "010129", "010130", "010131", "010132", "010133", "010134", "010135", "010136", "010137", "010138", "010139", "010140", "010141", "010142", "010143", "010144", "010145", "010146", "010147", "010148", "010149", "010150", "010151", "010152", "010153", "010154", "010155", "010156", "010157", "010158", "010159", "010160", "010161", "010162", "010163", "010164", "010165", "010166", "010167", "010168", "010169", "010170", "010171", "010172", "010173", "010174", "010175", "010176", "010177", "010178", "010179", "010180", "010181", "010182", "010183", "010184", "010185", "010186", "010187", "010188", "010189", "010190", "010191", "010192", "010193", "010194", "010195", "010196", "010197", "010198", "010199", "010200", "010201", "010202", "010203", "010204", "010205", "010206", "010207", "010208", "010209", "010210", "010211", "010212", "010213", "010214", "010215", "010216", "010217", "010218", "010219", "010220", "010221", "010222", "010223", "010224", "010225", "010226", "010227", "010228", "010229", "010230", "010231", "010232", "010233", "010234", "010235", "010236", "010237", "010238", "010239", "010240", "010241", "010242", "010243", "010244", "010245", "010246", "010247", "011418", "011419", "011420", "011421", "011422", "011423", "011424", "011425", "011426", "011427", "011428", "011429", "011430", "011431", "011432", "011433", "011434", "011435", "011436", "011437", "011438", "011439", "011440", "011441", "011442", "011443", "011444", "011445", "011446", "011447", "011448", "011449", "011450", "011451", "011452", "011453", "011454", "011455", "011456", "011457", "011458", "011459", "011460", "011461", "011462", "011463", "011464", "011465", "011466", "011467", "011468", "011469", "011470", "011471", "011472", "011473", "011474", "011475", "011476", "011477", "011478", "011479", "011480", "011481", "011482", "011483", "011484", "011485", "011486", "011487", "011488", "011489", "011490", "011491", "011492", "011493", "011494", "011495", "011496", "011497", "011498", "011499", "011500", "011501", "011502", "011503", "011504", "011505", "011506", "011507", "011508", "011509", "011510", "011511", "011512", "011513", "011514", "011515", "011516", "011517", "011518", "011519", "011520", "011521", "011522", "011523", "011524", "011525", "011526", "011527", "011528", "011529", "011530", "011531", "011532", "011533", "011534", "011535", "011536", "011537", "011538", "011539", "011540", "011541", "011542", "011543", "011544", "011545", "011546", "011547", "011548", "011549", "011550", "011551", "011552", "011553", "011554", "011555", "011556", "011557", "011558", "011559", "011560", "011561", "011562", "011563", "011564", "011565", "011566", "011567", "011568", "011569", "011570", "011571", "011572", "011573", "011574", "011575", "011576", "011577", "011578", "011579", "011580", "011581", "011582", "011583", "011584", "011585", "011586", "011587", "011588", "011589", "011590", "011591", "011592", "011593", "011594", "011595", "011596", "011597", "011599", "011600", "011601", "011602", "011603", "011604", "011605", "011606", "011607", "011608", "011609", "011610", "011611", "011612", "011613", "011614", "011615", "011616", "011617", "011618", "011619", "011630", "011631", "011632", "011633", "011634", "011635", "011636", "011637", "011638", "011639", "011640", "011641", "011642", "011643", "011644", "011645", "011646", "011647", "011648", "011649", "011650", "011651", "011652", "011653", "011654", "011655", "011656", "011657", "011658", "011659", "011660", "011661", "011662", "011663", "011664", "011665", "011666", "011667", "011668", "011669", "011670", "011671", "011672", "011673", "011674", "011675", "011676", "011677", "011678", "011679", "011680", "011681", "011682", "011683", "011684", "011685", "011686", "011687", "011688", "011689", "011690", "011691", "011692", "011693", "011694", "011695", "011696", "011697", "011698", "011699", "011700", "011701", "011702", "011703", "011704", "011705", "011706", "011707", "011708", "011709", "011710", "011711", "011712", "011713", "011714", "011715", "011716", "011717", "011718", "011719", "011720", "011721", "011722", "011723", "011724", "011725", "011726", "011727", "011728", "011729", "011730", "011731", "011732", "011733", "011734", "011735", "011736", "011737", "011738", "011739", "011740", "011741", "011742", "011743", "011744", "011745", "011746", "011747", "011748", "011749", "011750", "011751", "011752", "011753", "011754", "011755", "011756", "011757", "011758", "011759", "011760", "011761", "011762", "011763", "011764", "011765", "011766", "011767", "011768", "011769", "011770", "011771", "011772", "011773", "011774", "011775", "011776", "011777", "011778", "011779", "011780", "011781", "011782", "011783", "011784", "011785", "011786", "011787", "011788", "011789", "011790", "011791", "011792", "011793", "011794", "011795", "011796", "011797", "011798", "011799", "011800", "011801", "011802", "011803", "011804", "011805", "011806", "011807", "011808", "011809", "011810", "011811", "011822", "011823", "011824", "011825", "011826", "011827", "011828", "011829", "011830", "011831", "011832", "011833", "011834", "011835", "011836", "011837", "011838", "011839", "011840", "011841", "011842", "011843", "011844", "011845", "011846", "011847", "011848", "011849", "011850", "011851", "011852", "011853", "011854", "011855", "011856", "011857", "011858", "011859", "011860", "011861", "011862", "011863", "011864", "011865", "011866", "011867", "011868", "011869", "011870", "011871", "011872", "011873", "011874", "011875", "011876", "011877", "011878", "011879", "011880", "011881", "011882", "011883", "011884", "011885", "011886", "011887", "011888", "011889", "011890", "011891", "011892", "011893", "011894", "011895", "011896", "011897", "011898", "011899", "011900", "011901", "011902", "011903", "011904", "011905", "011906", "011907", "011908", "011909", "011910", "011911", "011912", "011913", "011914", "011915", "011916", "011917", "011918", "011919", "011920", "011921", "011922", "011923", "011924", "011925", "011926", "011927", "011928", "011929", "011930", "011931", "011932", "011933", "011934", "011935", "011936", "011937", "011938", "011939", "011940", "011941", "011942", "011943", "011944", "011945", "011946", "011947", "011948", "011949", "011950", "011951", "011952", "011953", "011954", "011955", "011956", "011957", "011958", "011959", "011960", "011961", "011962", "011963", "011964", "011965", "011966", "011967", "011968", "011969", "011970", "011971", "011972", "011973", "011974", "011975", "011976", "011977", "011978", "011979", "011980", "011981", "011982", "011983", "011984", "011985", "011986", "011987", "011988", "011989", "011990", "011991", "011992", "011993", "011994", "011995", "011996", "011997", "011998", "011999", "012000", "012001", "012002", "012003", "012966", "012967", "012968", "012969", "012970", "012971", "012972", "012973", "012974", "012975", "012976", "012977", "012978", "012979", "012980", "012981", "012982", "012983", "012984", "012985", "012986", "012987", "012988", "012989", "012990", "012991", "012992", "012993", "012994", "012995", "012996", "012997", "012998", "012999", "013000", "013001", "013002", "013003", "013004", "013005", "013006", "013007", "013008", "013009", "013010", "013011", "013012", "013013", "013014", "013015", "013016", "013017", "013018", "013019", "013020", "013021", "013022", "013023", "013024", "013025", "013026", "013027", "013028", "013029", "013030", "013031", "013032", "013033", "013034", "013035", "013036", "013037", "013038", "013039", "013040", "013041", "013042", "013043", "013044", "013045", "013046", "013047", "013048", "013049", "013050", "013051", "013052", "013053", "013054", "013055", "013056", "013057", "013058", "013059", "013060", "013061", "013062", "013063", "013064", "013065", "013066", "013067", "013068", "013069", "013070", "013071", "013072", "013073", "013074", "013075", "013076", "013077", "013078", "013079", "013080", "013081", "013082", "013083", "013084", "013085", "013086", "013087", "013088", "013089", "013090", "013091", "013092", "013093", "013094", "013095", "013096", "013097", "013098", "013099", "013100", "013101", "013102", "013103", "013104", "013105", "013106", "013107", "013108", "013109", "013110", "013111", "013112", "013122", "013123", "013124", "013125", "013126", "013127", "013128", "013129", "013130", "013131", "013132", "013133", "013134", "013135", "013136", "013137", "013138", "013139", "013140", "013141", "013142", "013143", "013144", "013145", "013146", "013147", "013148", "013149", "013150", "013151", "013152", "013153", "013154", "013155", "013156", "013157", "013158", "013159", "013160", "013161", "013162", "013163", "013164", "013165", "013166", "013167", "013168", "013169", "013170", "013171", "013172", "013173", "013174", "013175", "013176", "013177", "013178", "013179", "013180", "013181", "013182", "013183", "013184", "013185", "013186", "013187", "013188", "013189", "013190", "013191", "013192", "013193", "013194", "013195", "013196", "013197", "013198", "013199", "013200", "013201", "013202", "013203", "013204", "013205", "013206", "013207", "013208", "013209", "013210", "013211", "013212", "013213", "013214", "013215", "013216", "013217", "013218", "013219", "013220", "013221", "013222", "013223", "013224", "013225", "013226", "013227", "013228", "013229", "013230", "013231", "013232", "013233", "013234", "013235", "013236", "013237", "013238", "013239", "013240", "013241", "013242", "013243", "013244", "013245", "013246", "013247", "013248", "013249", "013250", "013251", "013252", "013253", "013254", "013255", "013256", "013257", "013258", "013259", "013260", "013261", "013262", "013263", "013264", "013265", "013266", "013267", "013268", "013269", "013270", "013271", "013272", "013273", "013274", "013275", "013276", "013277", "013278", "013279", "013280", "013281", "013282", "013283", "013284", "013285", "013286", "013287", "013288", "013289", "013290", "013291", "013292", "013293", "013294", "013295", "013296", "013297", "013298", "013299", "013300", "013301", "013302", "013303", "013304", "013305", "013306", "013307", "013308", "013309", "013310", "013311", "013312", "013313", "013314", "013315", "013317", "013318", "013319", "013320", "013321", "013322", "013323", "013324", "013325", "013326", "013327", "013328", "013329", "013330", "013331", "013332", "013333", "013334", "013335", "013336", "013337", "013338", "013339", "013340", "013341", "013342", "013343", "013344", "013345", "013346", "013347", "013348", "013349", "013350", "013351", "013352", "013353", "013354", "013355", "013356", "013357", "013358", "013359", "013360", "013361", "013362", "013363", "013364", "013365", "013366", "013367", "013368", "013369", "013370", "013371", "013372", "013373", "013374", "013375", "013376", "013377", "013378", "013379", "013380", "013381", "013382", "013383", "013384", "013385", "013386", "013387", "013388", "013389", "013390", "013391", "013392", "013393", "013394", "013395", "013396", "013397", "013398", "013399", "013400", "013401", "013402", "013403", "013404", "013405", "013406", "013407", "013408", "013409", "013410", "013411", "013412", "013413", "013414", "013415", "013416", "013417", "013418", "013419", "013420", "013421", "013422", "013423", "013424", "013425", "013426", "013427", "013428", "013429", "013430", "013431", "013432", "013433", "013434", "013435", "013436", "013437", "013438", "013439", "013440", "013441", "013442", "013443", "013444", "013445", "013446", "013447", "013448", "013449", "013450", "013451", "013452", "013453", "013454", "013455", "013456", "013457", "013458", "013459", "013460", "013461", "013462", "013463", "013464", "013465", "013466", "013467", "013468", "013469", "013470", "013471", "013472", "013473", "013474", "013475", "013476", "013477", "013478", "013479", "013480", "013481", "013482", "013483", "013484", "013485", "013486", "013487", "013488", "013489", "013490", "013491", "013492", "013493", "013494", "013495", "013496", "013497", "013498", "013499", "013500", "013501", "013502", "013503", "013504", "013505", "013506", "013507", "013508", "013509", "013510", "013511", "013512", "013513", "013514", "013515", "013516", "013517", "013518", "013519", "013520", "013521", "013522", "013523", "013524", "013525", "013526", "013527", "013528", "013529", "013530", "013531", "013532", "013533", "013534", "013535", "013536", "013537", "013538", "013539", "013540", "013541", "013542", "013543", "013544", "013545", "013546", "013547", "013548", "013549", "013550", "013551", "013552", "013553", "013554", "013555", "013556", "013557", "013558", "013559", "013560", "013561", "013562", "013563", "013564", "013565", "013566", "013567", "013568", "013569", "013570", "013571", "013572", "013573", "013574", "013575", "013576", "013577", "013578", "013579", "013580", "013581", "013582", "013583", "013584", "013585", "013586", "013587", "013588", "013589", "015035", "015036", "015037", "015038", "015039", "015040", "015041", "015042", "015043", "015044", "015045", "015046", "015047", "015048", "015049", "015050", "015051", "015052", "015053", "015054", "015055", "015056", "015057", "015058", "015059", "015060", "015061", "015062", "015063", "015064", "015065", "015066", "015067", "015068", "015069", "015070", "015071", "015072", "015073", "015074", "015075", "015076", "015077", "015078", "015079", "015080", "015081", "015082", "015083", "015084", "015085", "015086", "015087", "015088", "015089", "015090", "015091", "015092", "015093", "015094", "015095", "015096", "015097", "015098", "015099", "015100", "015101", "015102", "015103", "015104", "015105", "015106", "015107", "015108", "015109", "015110", "015111", "015112", "015113", "015114", "015115", "015116", "015117", "015118", "015119", "015120", "015121", "015122", "015123", "015124", "015125", "015136", "015137", "015138", "015139", "015140", "015141", "015142", "015143", "015144", "015145", "015146", "015147", "015148", "015149", "015150", "015151", "015152", "015153", "015154", "015155", "015156", "015157", "015158", "015159", "015160", "015161", "015162", "015163", "015164", "015165", "015166", "015167", "015168", "015169", "015170", "015171", "015172", "015173", "015174", "015175", "015176", "015177", "015178", "015179", "015180", "015181", "015182", "015183", "015184", "015185", "015186", "015187", "015188", "015189", "015190", "015191", "015192", "015193", "015194", "015195", "015196", "015197", "015198", "015199", "015200", "015201", "015202", "015203", "015204", "015205", "015206", "015207", "015208", "015209", "015210", "015211", "015212", "015213", "015214", "015215", "015216", "015217", "015218", "015219", "015220", "015221", "015222", "015223", "015224", "015225", "015226", "015227", "015228", "015229", "015230", "015231", "015232", "015233", "015234", "015235", "015236", "015237", "015238", "015239", "015240", "015241", "015242", "015243", "015244", "015245", "015246", "015247", "015248", "015249", "015250", "015251", "015252", "015253", "015254", "015255", "015256", "015257", "015258", "015259", "015260", "015261", "015262", "015263", "015264", "015265", "015266", "015267", "015268", "015269", "015270", "015271", "015272", "015273", "015274", "015275", "015276", "015277", "015278", "015279", "015280", "015281", "015282", "015283", "015284", "015285", "015286", "015287", "015288", "015289", "015290", "015291", "015292", "015293", "015294", "015295", "015296", "015297", "015298", "015299", "015300", "015301", "015302", "015303", "015304", "015305", "015306", "015307", "015308", "015309", "015310", "015311", "015312", "015313", "015314", "015315", "015316", "015317", "015318", "015319", "015320", "015321", "015322", "015323", "015324", "015325", "015326", "015327", "015328", "015329", "015330", "015331", "015332", "015333", "015334", "015335", "015336", "015337", "015338", "015339", "015340", "015341", "015342", "015343", "015344", "015345", "015346", "015347", "015348", "015349", "015350", "015351", "015352", "015353", "015354", "015355", "015356", "015357", "015358", "015359", "015360", "015361", "015362", "015363", "015364", "015365", "015366", "015367", "015368", "015369", "015370", "015371", "015372", "015373", "015374", "015375", "015376", "015377", "015378", "015379", "015380", "015381", "015382", "015383", "015384", "015385", "015396", "015397", "015398", "015399", "015400", "015401", "015402", "015403", "015404", "015405", "015406", "015407", "015408", "015409", "015410", "015411", "015412", "015413", "015414", "015415", "015416", "015417", "015418", "015419", "015420", "015421", "015422", "015423", "015424", "015425", "015426", "015427", "015428", "015429", "015430", "015431", "015432", "015433", "015434", "015435", "015436", "015437", "015438", "015439", "015440", "015441", "015442", "015443", "015444", "015445", "015446", "015447", "015448", "015449", "015450", "015451", "015452", "015453", "015454", "015455", "015456", "015457", "015458", "015459", "015460", "015461", "015462", "015463", "015464", "015465", "015466", "015467", "015468", "015469", "015470", "015471", "015472", "015473", "015474", "015475", "015476", "015477", "015478", "015479", "015480", "015481", "015482", "015483", "015484", "015485", "015488", "015489", "015490", "015491", "015492", "015493", "015494", "015495", "015496", "015497", "015498", "015499", "015500", "015501", "015502", "015503", "015504", "015505", "015506", "015507", "015508", "015509", "015510", "015511", "015512", "015513", "015514", "015515", "015516", "015517", "015518", "015519", "015520", "015521", "015522", "015523", "015524", "015525", "015526", "015527", "015528", "015529", "015530", "015531", "015532", "015533", "015534", "015535", "015536", "015537", "015538", "015539", "015540", "015541", "015542", "015543", "015544", "015545", "015546", "015547", "015548", "015549", "015550", "015551", "015552", "015553", "015554", "015555", "015556", "015557", "015558", "015559", "015560", "015561", "015562", "015563", "015564", "015565", "015566", "015567", "015568", "015569", "015570", "015571", "015572", "015573", "015574", "015575", "015576", "015577", "015578", "015579", "015580", "015581", "015582", "015583", "015584", "015585", "017066", "017067", "017068", "017069", "017070", "017071", "017072", "017073", "017074", "017075", "017076", "017077", "017078", "017079", "017080", "017081", "017082", "017083", "017084", "017085", "017086", "017087", "017088", "017089", "017090", "017091", "017092", "017093", "017094", "017095", "017096", "017097", "017098", "017099", "017100", "017101", "017102", "017103", "017104", "017105", "017106", "017107", "017108", "017109", "017110", "017111", "017112", "017113", "017114", "017115", "017116", "017117", "017118", "017119", "017120", "017121", "017122", "017123", "017124", "017125", "017126", "017127", "017128", "017129", "017130", "017131", "017132", "017133", "017134", "017135", "017136", "017137", "017138", "017139", "017140", "017141", "017142", "017143", "017144", "017145", "017146", "017147", "017148", "017149", "017150", "017151", "017152", "017153", "017154", "017155", "017156", "017157", "017158", "017159", "017160", "017161", "017162", "017163", "017164", "017165", "017166", "017167", "017168", "017169", "017170", "017171", "017172", "017173", "017174", "017175", "017176", "017177", "017178", "017179", "017180", "017181", "017182", "017183", "017184", "017185", "017186", "017187", "017188", "017189", "017190", "017191", "017192", "017193", "017194", "017195", "017196", "017197", "017198", "017199", "017200", "017201", "017202", "017203", "017204", "017205", "017206", "017207", "017208", "017209", "017210", "017211", "017212", "017213", "017214", "017215", "017216", "017217", "017218", "017219", "017220", "017221", "017222", "017223", "017224", "017225", "017226", "017227", "017228", "017229", "017230", "017231", "017232", "017233", "017234", "017235", "017236", "017237", "017238", "017239", "017240", "017241", "017242", "017243", "017244", "017245", "017246", "017247", "017248", "017249", "017250", "017251", "017252", "017253", "017254", "017255", "017256", "017257", "017258", "017259", "017260", "017261", "017262", "017263", "017264", "017265", "017266", "017267", "017268", "017269", "017270", "017271", "017272", "017273", "017274", "017275", "017286", "017287", "017288", "017289", "017290", "017291", "017292", "017293", "017294", "017295", "017296", "017297", "017298", "017299", "017300", "017301", "017302", "017303", "017304", "017305", "017306", "017307", "017308", "017309", "017310", "017311", "017312", "017313", "017314", "017315", "017316", "017317", "017318", "017319", "017320", "017321", "017322", "017323", "017324", "017325", "017326", "017327", "017328", "017329", "017330", "017331", "017332", "017333", "017334", "017335", "017336", "017337", "017338", "017339", "017340", "017341", "017342", "017343", "017344", "017345", "017346", "017347", "017348", "017349", "017350", "017351", "017352", "017353", "017354", "017355", "017356", "017357", "017358", "017359", "017360", "017361", "017362", "017363", "017364", "017365", "017366", "017367", "017368", "017369", "017370", "017371", "017372", "017373", "017374", "017375", "017376", "017377", "017378", "017379", "017380", "017381", "017382", "017383", "017384", "017385", "017386", "017387", "017388", "017389", "017390", "017391", "017392", "017393", "017394", "017395", "017396", "017397", "017398", "017399", "017400", "017401", "017402", "017403", "017404", "017405", "017406", "017407", "017408", "017409", "017410", "017411", "017412", "017413", "017414", "017415", "017416", "017417", "017418", "017419", "017420", "017421", "017422", "017423", "017424", "017425", "017426", "017427", "017428", "017429", "017430", "017431", "017432", "017433", "017434", "017435", "017436", "017437", "017438", "017439", "017440", "017441", "017442", "017443", "017444", "017445", "017446", "017447", "017448", "017449", "017450", "017451", "017452", "017453", "017454", "017455", "017456", "017457", "017458", "017459", "017460", "017461", "017462", "017463", "017464", "017465", "017476", "017477", "017478", "017479", "017480", "017481", "017482", "017483", "017484", "017485", "017496", "017497", "017498", "017499", "017500", "017501", "017502", "017503", "017504", "017505", "017506", "017507", "017508", "017509", "017510", "017511", "017512", "017513", "017514", "017515", "017516", "017517", "017518", "017519", "017520", "017521", "017522", "017523", "017524", "017525", "017526", "017527", "017528", "017529", "017530", "017531", "017532", "017533", "017534", "017535", "017536", "017537", "017538", "017539", "017540", "017541", "017542", "017543", "017544", "017545", "017546", "017547", "017548", "017549", "017550", "017551", "017552", "017553", "017554", "017555", "017556", "017557", "017558", "017559", "017560", "017561", "017562", "017563", "017564", "017565", "017566", "017567", "017568", "017569", "017570", "017571", "017572", "017573", "017574", "017575", "017576", "017577", "017578", "017579", "017580", "017581", "017582", "017583", "017584", "017585", "017586", "017587", "017588", "017589", "017590", "017591", "017592", "017593", "017594", "017595", "017596", "017597", "017598", "017599", "017600", "017601", "017602", "017603", "017604", "017605", "017606", "017607", "017608", "017609", "017610", "017611", "017612", "017613", "017614", "017615", "017616", "017617", "017618", "017619", "017620", "017621", "017622", "017623", "017624", "017625", "017626", "017627", "017628", "017629", "017630", "017631", "017632", "017633", "017634", "017635", "018966", "018967", "018968", "018969", "018970", "018971", "018972", "018973", "018974", "018975", "018976", "018977", "018978", "018979", "018980", "018981", "018982", "018983", "018984", "018985", "018986", "018987", "018988", "018989", "018990", "018991", "018992", "018993", "018994", "018995", "018996", "018997", "018998", "018999", "019000", "019001", "019002", "019003", "019004", "019005", "019006", "019007", "019008", "019009", "019010", "019011", "019012", "019013", "019014", "019015", "019016", "019017", "019018", "019019", "019020", "019021", "019022", "019023", "019024", "019025", "019026", "019027", "019028", "019029", "019030", "019031", "019032", "019033", "019034", "019035", "019036", "019037", "019038", "019039", "019040", "019041", "019042", "019043", "019044", "019045", "019046", "019047", "019048", "019049", "019050", "019051", "019052", "019053", "019054", "019055", "019056", "019057", "019058", "019059", "019060", "019061", "019062", "019063", "019064", "019065", "019066", "019067", "019068", "019069", "019070", "019071", "019072", "019073", "019074", "019075", "019076", "019077", "019078", "019079", "019080", "019081", "019082", "019083", "019084", "019085", "019086", "019087", "019088", "019089", "019090", "019091", "019092", "019093", "019094", "019095", "019096", "019097", "019098", "019099", "019100", "019101", "019102", "019103", "019104", "019105", "019106", "019107", "019108", "019109", "019110", "019111", "019112", "019113", "019114", "019115", "019116", "019117", "019118", "019119", "019120", "019121", "019122", "019123", "019124", "019125", "019126", "019127", "019128", "019129", "019130", "019131", "019132", "019133", "019134", "019135", "019146", "019147", "019148", "019149", "019150", "019151", "019152", "019153", "019154", "019155", "019156", "019157", "019158", "019159", "019160", "019161", "019162", "019163", "019164", "019165", "019166", "019167", "019168", "019169", "019170", "019171", "019172", "019173", "019174", "019175", "019176", "019177", "019178", "019179", "019180", "019181", "019182", "019183", "019184", "019185", "019186", "019187", "019188", "019189", "019190", "019191", "019192", "019193", "019194", "019195", "019196", "019197", "019198", "019199", "019200", "019201", "019202", "019203", "019204", "019205", "019206", "019207", "019208", "019209", "019210", "019211", "019212", "019213", "019214", "019215", "019216", "019217", "019218", "019219", "019220", "019221", "019222", "019223", "019224", "019225", "019226", "019227", "019228", "019229", "019230", "019231", "019232", "019233", "019234", "019235", "019236", "019237", "019238", "019239", "019240", "019241", "019242", "019243", "019244", "019245", "019246", "019247", "019248", "019249", "019250", "019251", "019252", "019253", "019254", "019255", "019256", "019257", "019258", "019259", "019260", "019261", "019262", "019263", "019264", "019265", "019266", "019267", "019268", "019269", "019270", "019271", "019272", "019273", "019274", "019275", "019276", "019277", "019278", "019279", "019280", "019281", "019282", "019283", "019284", "019285", "019286", "019287", "019288", "019289", "019290", "019291", "019292", "019293", "019294", "019295", "019296", "019297", "019298", "019299", "019300", "019301", "019302", "019303", "019304", "019305", "019306", "019307", "019308", "019309", "019310", "019311", "019312", "019313", "019314", "019315", "019316", "019317", "019318", "019319", "019320", "019321", "019322", "019323", "019324", "019325", "019326", "019327", "019328", "019329", "019330", "019331", "019332", "019333", "019334", "019335", "019346", "019347", "019348", "019349", "019350", "019351", "019352", "019353", "019354", "019355", "019356", "019357", "019358", "019359", "019360", "019361", "019362", "019363", "019364", "019365", "019366", "019367", "019368", "019369", "019370", "019371", "019372", "019373", "019374", "019375", "019376", "019377", "019378", "019379", "019380", "019381", "019382", "019383", "019384", "019385", "019386", "019387", "019388", "019389", "019390", "019391", "019392", "019393", "019394", "019395", "019396", "019397", "019398", "019399", "019400", "019401", "019402", "019403", "019404", "019405", "019406", "019407", "019408", "019409", "019410", "019411", "019412", "019413", "019414", "019415", "019416", "019417", "019418", "019419", "019420", "019421", "019422", "019423", "019424", "019425", "019426", "019427", "019428", "019429", "019430", "019431", "019432", "019433", "019434", "019435", "019436", "019437", "019438", "019439", "019440", "019441", "019442", "019443", "019444", "019445", "019446", "019447", "019448", "019449", "019450", "019451", "019452", "019453", "019454", "019455", "019456", "019457", "019458", "019459", "019460", "019461", "019462", "019463", "019464", "019465", "019466", "019467", "019468", "019469", "019470", "019471", "019472", "019473", "019474", "019475", "019476", "019477", "019478", "019479", "019480", "019481", "019482", "019483", "019484", "019485", "019486", "019487", "019488", "019489", "019490", "019491", "019492", "019493", "019494", "019495", "019496", "019497", "019498", "019499", "019500", "019501", "019502", "019503", "019504", "019505", "019506", "019507", "019508", "019509", "019510", "019511", "019512", "019513", "019514", "019515", "019516", "019517", "019518", "019519", "019520", "019521", "019522", "019523", "019524", "019525", "019526", "019527", "019528", "019529", "019530", "019531", "019532", "019533", "019534", "019535"], "test_A": ["000533", "000534", "000535", "000536", "000537", "000538", "000539", "000540", "000541", "000542", "000543", "000544", "000545", "000546", "000547", "000548", "000549", "000550", "000551", "000552", "000553", "000554", "000555", "000556", "000557", "000558", "000559", "000560", "000561", "000562", "000563", "000564", "000565", "000566", "000567", "000568", "000569", "000570", "000571", "000572", "000573", "000574", "000575", "000576", "000577", "000578", "000579", "000580", "000581", "000582", "000583", "000584", "000585", "000586", "000587", "000588", "000589", "000590", "000591", "000592", "000593", "000594", "000595", "000596", "000597", "000598", "000599", "000600", "000601", "000602", "000603", "000604", "000605", "000606", "000607", "000608", "000609", "000610", "000611", "000612", "000613", "000614", "000615", "000616", "000617", "000618", "000619", "000620", "000621", "000622", "000623", "000624", "000625", "000626", "000627", "000628", "000629", "000630", "000631", "000632", "000633", "000634", "000635", "000636", "000637", "000638", "000639", "000640", "000641", "000642", "000643", "000644", "000645", "000646", "000647", "000648", "003658", "003659", "003660", "003661", "003662", "003663", "003664", "003665", "003666", "003667", "003668", "003669", "003670", "003671", "003672", "003673", "003674", "003675", "003676", "003677", "003678", "003679", "003680", "003681", "003682", "003683", "003684", "003685", "003686", "003687", "003688", "003689", "003690", "003691", "003692", "003693", "003694", "003695", "003696", "003697", "003698", "003699", "003700", "003701", "003702", "003703", "003704", "003705", "003706", "003707", "003708", "003709", "003710", "003711", "003712", "003713", "003714", "003715", "003716", "003717", "003718", "003719", "003720", "003721", "003722", "003723", "003724", "003725", "003726", "003727", "003728", "003729", "003730", "003731", "003732", "003733", "003734", "003735", "003736", "003737", "003738", "003739", "003740", "003741", "003742", "003743", "003744", "003745", "003746", "003747", "003748", "003749", "003750", "003751", "003752", "003753", "003754", "003755", "003756", "003757", "003758", "003759", "003760", "003761", "003762", "003763", "003764", "003765", "003766", "003767", "003768", "003769", "003770", "003771", "003772", "003773", "003774", "003775", "003776", "003777", "003778", "003779", "003780", "003781", "003782", "003783", "003784", "003785", "003786", "003787", "003788", "003789", "003790", "003791", "003792", "003793", "003794", "003795", "003796", "003797", "003798", "003799", "003800", "003801", "004943", "004944", "004945", "004946", "004947", "004948", "004949", "004950", "004951", "004952", "004953", "004954", "004955", "004956", "004957", "004958", "004959", "004960", "004961", "004962", "004963", "004964", "004965", "004966", "004967", "004968", "004969", "004970", "004971", "004972", "004973", "004974", "004975", "004976", "004977", "004978", "004979", "004980", "004981", "004982", "004983", "004984", "004985", "004986", "004987", "004988", "006153", "006154", "006155", "006156", "006157", "006158", "006159", "006160", "006161", "006162", "006163", "006164", "006165", "006166", "006167", "006168", "006169", "006170", "006171", "006172", "006173", "006174", "006175", "006176", "006177", "006178", "006179", "006180", "006181", "006182", "006183", "006184", "006185", "006186", "006187", "006188", "006189", "006190", "006191", "006192", "006193", "006194", "006195", "006196", "006197", "006198", "006199", "006200", "006201", "006202", "006203", "006204", "006205", "006206", "006207", "006208", "006209", "006210", "006211", "006212", "006213", "006214", "006215", "006216", "006217", "006218", "006219", "006220", "006221", "006222", "006223", "006224", "006225", "006226", "006227", "006228", "006229", "006230", "006231", "006232", "006233", "006234", "006235", "006236", "006237", "006238", "006239", "006240", "006241", "006242", "006243", "006244", "006245", "006246", "006247", "006248", "006249", "006250", "006251", "006252", "006253", "006254", "006255", "006256", "006257", "006258", "006259", "006260", "006261", "006262", "006263", "006264", "006265", "006266", "006267", "006268", "006269", "006270", "006271", "006272", "006273", "006274", "006275", "006276", "006277", "006278", "006279", "006280", "006281", "006282", "006283", "006284", "006285", "006286", "006287", "006288", "006289", "006290", "006291", "006292", "006293", "006294", "006295", "006296", "006297", "006298", "006299", "006300", "006301", "006302", "006303", "006304", "006305", "006306", "006307", "006308", "006309", "006310", "006311", "006312", "006313", "006314", "006315", "007985", "007986", "007987", "007988", "007989", "007990", "007991", "007992", "007993", "007994", "007995", "007996", "007997", "007998", "007999", "008000", "008001", "008002", "008003", "008004", "008005", "008006", "008007", "008008", "008009", "008010", "008011", "008012", "008013", "008014", "008015", "008016", "008017", "008018", "008019", "008020", "008021", "008022", "008023", "008024", "008025", "008026", "008027", "008028", "008029", "008030", "008031", "008032", "008033", "008034", "008035", "008036", "008037", "008038", "008039", "008040", "008041", "008042", "008043", "008044", "008045", "008046", "008047", "008048", "008049", "008050", "008051", "008052", "008053", "008054", "008055", "008056", "008057", "008058", "008059", "008060", "008061", "008062", "008063", "008064", "008065", "008066", "008067", "008068", "008069", "008070", "008071", "008072", "008073", "008074", "008075", "008076", "008077", "008078", "008079", "008080", "008081", "008082", "008083", "008084", "008085", "008086", "008087", "008088", "008089", "008090", "008091", "008092", "008093", "008094", "008095", "008096", "008097", "008098", "008099", "008100", "008101", "008102", "008103", "008104", "008105", "008106", "008107", "008108", "008109", "008110", "008111", "008112", "008113", "008114", "008115", "008116", "008117", "008118", "008119", "008120", "008121", "008122", "008123", "008124", "008125", "008126", "008127", "008128", "008129", "008130", "008131", "008132", "008133", "008134", "008135", "008136", "008137", "008138", "008139", "008140", "008141", "008142", "008143", "008144", "008145", "008146", "008147", "008148", "008149", "008150", "008151", "008152", "008153", "008154", "008155", "008156", "011822", "011823", "011824", "011825", "011826", "011827", "011828", "011829", "011830", "011831", "011832", "011833", "011834", "011835", "011836", "011837", "011838", "011839", "011840", "011841", "011842", "011843", "011844", "011845", "011846", "011847", "011848", "011849", "011850", "011851", "011852", "011853", "011854", "011855", "011856", "011857", "011858", "011859", "011860", "011861", "011862", "011863", "011864", "011865", "011866", "011867", "011868", "011869", "011870", "011871", "011872", "011873", "011874", "011875", "011876", "011877", "011878", "011879", "011880", "011881", "011882", "011883", "011884", "011885", "011886", "011887", "011888", "011889", "011890", "011891", "011892", "011893", "011894", "011895", "011896", "011897", "011898", "011899", "011900", "011901", "011902", "011903", "011904", "011905", "011906", "011907", "011908", "011909", "011910", "011911", "011912", "011913", "011914", "011915", "011916", "011917", "011918", "011919", "011920", "011921", "011922", "011923", "011924", "011925", "011926", "011927", "011928", "011929", "011930", "011931", "011932", "011933", "011934", "011935", "011936", "011937", "011938", "011939", "011940", "011941", "011942", "011943", "011944", "011945", "011946", "011947", "011948", "011949", "011950", "011951", "011952", "011953", "011954", "011955", "011956", "011957", "011958", "011959", "011960", "011961", "011962", "011963", "011964", "011965", "011966", "011967", "011968", "011969", "011970", "011971", "011972", "011973", "011974", "011975", "011976", "011977", "011978", "011979", "011980", "011981", "011982", "011983", "011984", "011985", "011986", "011987", "011988", "011989", "011990", "011991", "011992", "011993", "011994", "011995", "011996", "011997", "011998", "011999", "012000", "012001", "012002", "012003", "012966", "012967", "012968", "012969", "012970", "012971", "012972", "012973", "012974", "012975", "012976", "012977", "012978", "012979", "012980", "012981", "012982", "012983", "012984", "012985", "012986", "012987", "012988", "012989", "012990", "012991", "012992", "012993", "012994", "012995", "012996", "012997", "012998", "012999", "013000", "013001", "013002", "013003", "013004", "013005", "013006", "013007", "013008", "013009", "013010", "013011", "013012", "013013", "013014", "013015", "013016", "013017", "013018", "013019", "013020", "013021", "013022", "013023", "013024", "013025", "013026", "013027", "013028", "013029", "013030", "013031", "013032", "013033", "013034", "013035", "013036", "013037", "013038", "013039", "013040", "013041", "013042", "013043", "013044", "013045", "013046", "013047", "013048", "013049", "013050", "013051", "013052", "013053", "013054", "013055", "013056", "013057", "013058", "013059", "013060", "013061", "013062", "013063", "013064", "013065", "013066", "013067", "013068", "013069", "013070", "013071", "013072", "013073", "013074", "013075", "013076", "013077", "013078", "013079", "013080", "013081", "013082", "013083", "013084", "013085", "013086", "013087", "013088", "013089", "013090", "013091", "013092", "013093", "013094", "013095", "013096", "013097", "013098", "013099", "013100", "013101", "013102", "013103", "013104", "013105", "013106", "013107", "013108", "013109", "013110", "013111", "013112", "017496", "017497", "017498", "017499", "017500", "017501", "017502", "017503", "017504", "017505", "017506", "017507", "017508", "017509", "017510", "017511", "017512", "017513", "017514", "017515", "017516", "017517", "017518", "017519", "017520", "017521", "017522", "017523", "017524", "017525", "017526", "017527", "017528", "017529", "017530", "017531", "017532", "017533", "017534", "017535", "017536", "017537", "017538", "017539", "017540", "017541", "017542", "017543", "017544", "017545", "017546", "017547", "017548", "017549", "017550", "017551", "017552", "017553", "017554", "017555", "017556", "017557", "017558", "017559", "017560", "017561", "017562", "017563", "017564", "017565", "017566", "017567", "017568", "017569", "017570", "017571", "017572", "017573", "017574", "017575", "017576", "017577", "017578", "017579", "017580", "017581", "017582", "017583", "017584", "017585", "017586", "017587", "017588", "017589", "017590", "017591", "017592", "017593", "017594", "017595", "017596", "017597", "017598", "017599", "017600", "017601", "017602", "017603", "017604", "017605", "017606", "017607", "017608", "017609", "017610", "017611", "017612", "017613", "017614", "017615", "017616", "017617", "017618", "017619", "017620", "017621", "017622", "017623", "017624", "017625", "017626", "017627", "017628", "017629", "017630", "017631", "017632", "017633", "017634", "017635", "019346", "019347", "019348", "019349", "019350", "019351", "019352", "019353", "019354", "019355", "019356", "019357", "019358", "019359", "019360", "019361", "019362", "019363", "019364", "019365", "019366", "019367", "019368", "019369", "019370", "019371", "019372", "019373", "019374", "019375", "019376", "019377", "019378", "019379", "019380", "019381", "019382", "019383", "019384", "019385", "019386", "019387", "019388", "019389", "019390", "019391", "019392", "019393", "019394", "019395", "019396", "019397", "019398", "019399", "019400", "019401", "019402", "019403", "019404", "019405", "019406", "019407", "019408", "019409", "019410", "019411", "019412", "019413", "019414", "019415", "019416", "019417", "019418", "019419", "019420", "019421", "019422", "019423", "019424", "019425", "019426", "019427", "019428", "019429", "019430", "019431", "019432", "019433", "019434", "019435", "019436", "019437", "019438", "019439", "019440", "019441", "019442", "019443", "019444", "019445", "019446", "019447", "019448", "019449", "019450", "019451", "019452", "019453", "019454", "019455", "019456", "019457", "019458", "019459", "019460", "019461", "019462", "019463", "019464", "019465", "019466", "019467", "019468", "019469", "019470", "019471", "019472", "019473", "019474", "019475", "019476", "019477", "019478", "019479", "019480", "019481", "019482", "019483", "019484", "019485", "019486", "019487", "019488", "019489", "019490", "019491", "019492", "019493", "019494", "019495", "019496", "019497", "019498", "019499", "019500", "019501", "019502", "019503", "019504", "019505", "019506", "019507", "019508", "019509", "019510", "019511", "019512", "019513", "019514", "019515", "019516", "019517", "019518", "019519", "019520", "019521", "019522", "019523", "019524", "019525", "019526", "019527", "019528", "019529", "019530", "019531", "019532", "019533", "019534", "019535"]}, "cooperative_split": {"train": ["000010", "000011", "000013", "000015", "000016", "000017", "000018", "000019", "000020", "000023", "000024", "000025", "000026", "000027", "000028", "000029", "000030", "000032", "000033", "000034", "000035", "000036", "000037", "000041", "000042", "000043", "000051", "000053", "000055", "000056", "000059", "000060", "000062", "000066", "000067", "000068", "000070", "000071", "000072", "000073", "000077", "000078", "000079", "000080", "000081", "000082", "000083", "000084", "000085", "000086", "000087", "000088", "000089", "000090", "000091", "000092", "000095", "000096", "000099", "000101", "000102", "000103", "000104", "000105", "000106", "000107", "000108", "000109", "000110", "000111", "000112", "000113", "000114", "000116", "000118", "000119", "000132", "000139", "000143", "000145", "000148", "000154", "000157", "000159", "000160", "000161", "000163", "000165", "000166", "000167", "000168", "000169", "000170", "000174", "000175", "000177", "000179", "000181", "000183", "000184", "000185", "000186", "000187", "000188", "000189", "000190", "000191", "000192", "000194", "000200", "000201", "000205", "000206", "000207", "000211", "000212", "000214", "000215", "000216", "000217", "000218", "000220", "000222", "000223", "000224", "000225", "000227", "000228", "000229", "000231", "000232", "000233", "000234", "000236", "000237", "000238", "000239", "000240", "000244", "000247", "000248", "000249", "000250", "000253", "000254", "000255", "000256", "000257", "000260", "000261", "000262", "000263", "000264", "000265", "000266", "000267", "000268", "000269", "000271", "000272", "000273", "000274", "000275", "000278", "000279", "000282", "000283", "000286", "000287", "000288", "000289", "000299", "000300", "000301", "000302", "000304", "000305", "000306", "000308", "000310", "000313", "000315", "000316", "000317", "000321", "000322", "000325", "000326", "000327", "000328", "000329", "000330", "000333", "000334", "000337", "000338", "000339", "000340", "000341", "000342", "000344", "000348", "000349", "000350", "000351", "000355", "000356", "000357", "000360", "000361", "000362", "000365", "000367", "000369", "000370", "000372", "000373", "000374", "000375", "000377", "000378", "000379", "000381", "000390", "000391", "000392", "000396", "000399", "000400", "000401", "000402", "000405", "000406", "000407", "000409", "000419", "000424", "000425", "000426", "000430", "000431", "000432", "000433", "000434", "000435", "000437", "000438", "000439", "000444", "000446", "000449", "000453", "000456", "000457", "000459", "000461", "000462", "000463", "000465", "000466", "000467", "000468", "000470", "000472", "000473", "000474", "000477", "000478", "000479", "000480", "000481", "000483", "000484", "000485", "000486", "000487", "000488", "000490", "000492", "000493", "000498", "000507", "000508", "000509", "000515", "000517", "000518", "000519", "000520", "000522", "000526", "000536", "000537", "000538", "000540", "000541", "000542", "000543", "000544", "000546", "000547", "000548", "000549", "000551", "000552", "000553", "000554", "000556", "000558", "000559", "000560", "000561", "000562", "000563", "000564", "000566", "000567", "000568", "000569", "000570", "000584", "000587", "000589", "000591", "000592", "000593", "000594", "000595", "000596", "000597", "000598", "000599", "000600", "000601", "000602", "000603", "000604", "000605", "000606", "000607", "000608", "000609", "000610", "000611", "000613", "000615", "000616", "000618", "000619", "000620", "000621", "000622", "000623", "000624", "000625", "000626", "000627", "000628", "000629", "000630", "000631", "000632", "000633", "000634", "000635", "000636", "000637", "000638", "000641", "000642", "000643", "000644", "000645", "000648", "000653", "000659", "000661", "000662", "000673", "000676", "000677", "000680", "000681", "000682", "000683", "000684", "000685", "000686", "000687", "000688", "000689", "000690", "000693", "000694", "000695", "000696", "000697", "000698", "000699", "000700", "000701", "000702", "000703", "000704", "000705", "000706", "000707", "000708", "000709", "000710", "000711", "000712", "000713", "000714", "000715", "000716", "000717", "000718", "000719", "000720", "000721", "000722", "000723", "000725", "000726", "000728", "000749", "000759", "000762", "000763", "000765", "000767", "000768", "000769", "000771", "000772", "000773", "000774", "000775", "000776", "000777", "000778", "000779", "000780", "000781", "000782", "000783", "000784", "000785", "000786", "000787", "000788", "000789", "000790", "000791", "000792", "000793", "000794", "000795", "000796", "000798", "000799", "000800", "000801", "000802", "000803", "000804", "000805", "000807", "000808", "000810", "000816", "000820", "000840", "000843", "000845", "000849", "000850", "000851", "000852", "000853", "000855", "000856", "000857", "000858", "000859", "000860", "000861", "000862", "000863", "000864", "000865", "000866", "000867", "001083", "001084", "001085", "001086", "001087", "001088", "001089", "001090", "001092", "001093", "001094", "001095", "001096", "001097", "001098", "001099", "001100", "001101", "001102", "001103", "001104", "001105", "001108", "001109", "001110", "001111", "001116", "001117", "001118", "001119", "001128", "001129", "001137", "001143", "001146", "001147", "001149", "001150", "001151", "001158", "001160", "001161", "001164", "001166", "001167", "001168", "001169", "001170", "001177", "001181", "001182", "001184", "001185", "001186", "001187", "001188", "001189", "001190", "001191", "001192", "001193", "001194", "001195", "001196", "001197", "001198", "001199", "001201", "001202", "001205", "001206", "001207", "001209", "001210", "001211", "001217", "001220", "001221", "001223", "001226", "001227", "001228", "001230", "001231", "001232", "001234", "001235", "001236", "001238", "001239", "001241", "001242", "001243", "001244", "001245", "001246", "001247", "001248", "001249", "001250", "001251", "001252", "001253", "001255", "001257", "001258", "001259", "001260", "001261", "001262", "001267", "001268", "001270", "001271", "001272", "001273", "001274", "001275", "001280", "001283", "001284", "001285", "001286", "001287", "001288", "001289", "001291", "001292", "001293", "001295", "001296", "001302", "001303", "001304", "001306", "001307", "001308", "001309", "001310", "001311", "001312", "001313", "001314", "001315", "001316", "001317", "001318", "001321", "001324", "001325", "001326", "001330", "001332", "001334", "001336", "001337", "001338", "001339", "001340", "001341", "001344", "001348", "001351", "001352", "001353", "001354", "001356", "001361", "001362", "001363", "001364", "001365", "001366", "001367", "001370", "001371", "001372", "001373", "001374", "001376", "001377", "001379", "001380", "001381", "001382", "001383", "001385", "001386", "001390", "001393", "001394", "001396", "001397", "001398", "001401", "001404", "001405", "001406", "001410", "001411", "001412", "001419", "001422", "001425", "001430", "001431", "001432", "001433", "001434", "001436", "001438", "001440", "001443", "001445", "001446", "001447", "001448", "001449", "001450", "001451", "001452", "001453", "001454", "001455", "001456", "001457", "001458", "001459", "001460", "001461", "001462", "001463", "001464", "001465", "001466", "001467", "001468", "001469", "001470", "001471", "001472", "001473", "001474", "001475", "001866", "001867", "001870", "001871", "001872", "001875", "001876", "001878", "001881", "001882", "001883", "001884", "001886", "001887", "001888", "001889", "001890", "001891", "001892", "001893", "001897", "001903", "001907", "001915", "001916", "001919", "001920", "001922", "001927", "001930", "001932", "001933", "001936", "001937", "001942", "001944", "001946", "001947", "001949", "001953", "001954", "001955", "001956", "001957", "001958", "001959", "001960", "001961", "001962", "001964", "001965", "001966", "001967", "001968", "001970", "001971", "001972", "001973", "001974", "001976", "001977", "001981", "001983", "001988", "001990", "001997", "002006", "002007", "002011", "002012", "002013", "002014", "002015", "002016", "002017", "002018", "002019", "002020", "002021", "002023", "002024", "002025", "002026", "002027", "002028", "002029", "002030", "002031", "002032", "002034", "002035", "002036", "002039", "002040", "002041", "002042", "002043", "002045", "002046", "002047", "002048", "002049", "002050", "002235", "002236", "002237", "002238", "002239", "002240", "002241", "002242", "002243", "002451", "002453", "002454", "002455", "002456", "002457", "002458", "002459", "002460", "002461", "002462", "002478", "002479", "002482", "002483", "002484", "002485", "002486", "002487", "002488", "002489", "002490", "002491", "002492", "002493", "002494", "002495", "002496", "002497", "002498", "002499", "002500", "002501", "002502", "002503", "002504", "002505", "002506", "002507", "002508", "002509", "002510", "002511", "002512", "002513", "002514", "002515", "002516", "002517", "002518", "002520", "002522", "002523", "002561", "002562", "002563", "002564", "002565", "002566", "002567", "002568", "002569", "002570", "002571", "003400", "003401", "003402", "003403", "003404", "003405", "003406", "003407", "003408", "003409", "003410", "003411", "003412", "003413", "003414", "003415", "003416", "003417", "003418", "003419", "003420", "003421", "003422", "003423", "003424", "003425", "003426", "003427", "003428", "003429", "003430", "003431", "003432", "003433", "003434", "003435", "003436", "003437", "003438", "003439", "003440", "003441", "003442", "003443", "003444", "003445", "003446", "003447", "003448", "003449", "003450", "003482", "003497", "003498", "003499", "003501", "003502", "003503", "003504", "003505", "003506", "003507", "003508", "003509", "003510", "003511", "003512", "003513", "003514", "003515", "003516", "003517", "003518", "003519", "003520", "003521", "003522", "003523", "003524", "003525", "003526", "003527", "003528", "003529", "003530", "003531", "003532", "003533", "003534", "003535", "003536", "003537", "003538", "003539", "003540", "003541", "003542", "003543", "003544", "003545", "003546", "003547", "003548", "003549", "003550", "003551", "003552", "003553", "003554", "003555", "003556", "003557", "003558", "003559", "003723", "003724", "003725", "003726", "003727", "003728", "003729", "003730", "003731", "003732", "003733", "003734", "003735", "003736", "003737", "003738", "003739", "003740", "003741", "003742", "003743", "003744", "003745", "003746", "003747", "003748", "003749", "003750", "003751", "003752", "003753", "003754", "003755", "003756", "003757", "003758", "003759", "003760", "003761", "003762", "003763", "003764", "003765", "003766", "003767", "003768", "003769", "003770", "003771", "003772", "003773", "003774", "003775", "003776", "003777", "003778", "003779", "003780", "003781", "003782", "003783", "003784", "003786", "003825", "003826", "004482", "004485", "004486", "004487", "004488", "004489", "004490", "004491", "004493", "004494", "004495", "004496", "004497", "004498", "004499", "004500", "004501", "004502", "004503", "004504", "004505", "004506", "004507", "004508", "004509", "004510", "004511", "004512", "004513", "004514", "004515", "004516", "004517", "004518", "004519", "004520", "004521", "004522", "004523", "004524", "004525", "004526", "004527", "004528", "004529", "004530", "004531", "004532", "004533", "004534", "004535", "004536", "004537", "004538", "004539", "004540", "004542", "004543", "004544", "004545", "004563", "004581", "004582", "004583", "004584", "004585", "004586", "004587", "004588", "004589", "004590", "004591", "004592", "004593", "004594", "004595", "004596", "004597", "004598", "004599", "004600", "004601", "004602", "004603", "004604", "004605", "004606", "004607", "004608", "004609", "004610", "004611", "004612", "004613", "004614", "004615", "004616", "004617", "004618", "004619", "004620", "004621", "004622", "004623", "004624", "004625", "004626", "004627", "004628", "004629", "004630", "004631", "004632", "004633", "004634", "004635", "004636", "004637", "004638", "004639", "004640", "004641", "004642", "004643", "004644", "004688", "004689", "004690", "004691", "004692", "004693", "004694", "004695", "004696", "004697", "004698", "004699", "004700", "004701", "004702", "004703", "004704", "004705", "004706", "004707", "004708", "004709", "004710", "004711", "004712", "004713", "004714", "004715", "004716", "004717", "004718", "004719", "004720", "004721", "004722", "004723", "004724", "004725", "004726", "004727", "004728", "004729", "004730", "004731", "004732", "004733", "004734", "004735", "004736", "004737", "004738", "004739", "004740", "004741", "004742", "004884", "004885", "004886", "004887", "004888", "004889", "004890", "004891", "004893", "004894", "004895", "004896", "004897", "004898", "004899", "004900", "004901", "004902", "004903", "004904", "004905", "004906", "004907", "004908", "004909", "004910", "004911", "004913", "004956", "004958", "004960", "004961", "004962", "004963", "004964", "004965", "004966", "004967", "004968", "004969", "004970", "004971", "004972", "004973", "004974", "004975", "004976", "004977", "004978", "004979", "004980", "004981", "004982", "004983", "004984", "004985", "004986", "004987", "004988", "004989", "004990", "004991", "004992", "004993", "004994", "004995", "004996", "004997", "004998", "004999", "005000", "005001", "005002", "005003", "005004", "005005", "005006", "005007", "005008", "005009", "005010", "005011", "005012", "005013", "005014", "005015", "005016", "005017", "005018", "005019", "005020", "005025", "005058", "005060", "005062", "005063", "005064", "005065", "005066", "005067", "005068", "005069", "005071", "005072", "005073", "005604", "005605", "005606", "005607", "005608", "005609", "005610", "005611", "005612", "005613", "005614", "005615", "005616", "005617", "005618", "005619", "005620", "005621", "005622", "005623", "005624", "005625", "005626", "005627", "005628", "005629", "005630", "005631", "005632", "005633", "005634", "005635", "005636", "005637", "005638", "005639", "005640", "005641", "005642", "005643", "005644", "005645", "005646", "005647", "005648", "005686", "005690", "005692", "005696", "005698", "005699", "005701", "005702", "005703", "005704", "005705", "005706", "005707", "005708", "005709", "005710", "005711", "005712", "005713", "005714", "005715", "005716", "005717", "005718", "005719", "005720", "005721", "005722", "005723", "005724", "005725", "005726", "005727", "005728", "005729", "005730", "005731", "005732", "005733", "005734", "005735", "005736", "005737", "005738", "005739", "005740", "005741", "005742", "005743", "005744", "005745", "005746", "005747", "005748", "005749", "005750", "005751", "005757", "005766", "005767", "005785", "005786", "005787", "005788", "005789", "005790", "005791", "005792", "005793", "005794", "005795", "005796", "005797", "005798", "005799", "005800", "005801", "005802", "005803", "005804", "005805", "005806", "005807", "005808", "005852", "005854", "005855", "005856", "005857", "005858", "005859", "005860", "005861", "005862", "005863", "005864", "005865", "005866", "005867", "005868", "005869", "005870", "005871", "005872", "005873", "005874", "005875", "005876", "005877", "005878", "005879", "005880", "005881", "005882", "005883", "005884", "005885", "005886", "005887", "005888", "005889", "005890", "005891", "005892", "005893", "005894", "005895", "005896", "005897", "005898", "005899", "005900", "005901", "005902", "005903", "005904", "005905", "005906", "005907", "005908", "005909", "005910", "005911", "005912", "005913", "005914", "005915", "005916", "005917", "005918", "005919", "006108", "006109", "006110", "006111", "006112", "006113", "006114", "006115", "006116", "006117", "006118", "006121", "006165", "006166", "006168", "006169", "006171", "006172", "006173", "006174", "006175", "006176", "006177", "006178", "006179", "006180", "006181", "006182", "006183", "006184", "006185", "006186", "006187", "006188", "006189", "006190", "006191", "006192", "006193", "006194", "006195", "006196", "006197", "006198", "006199", "006200", "006201", "006202", "006203", "006204", "006205", "006206", "006207", "006208", "006209", "006210", "006211", "006212", "006213", "006214", "006215", "006216", "006217", "006218", "006219", "006220", "006221", "006222", "006223", "006224", "006225", "006228", "006231", "006269", "006270", "006271", "006272", "006273", "006274", "006275", "006276", "006277", "006278", "006279", "006280", "006281", "006282", "006283", "006284", "006285", "006286", "006287", "006288", "006289", "006290", "006291", "006292", "006293", "006294", "006295", "006296", "006297", "006298", "006299", "006300", "006301", "006302", "006303", "006304", "006305", "006306", "006307", "006308", "006309", "006310", "006311", "006312", "006313", "006314", "006315", "006316", "006317", "006318", "006319", "006320", "006321", "006322", "006323", "006324", "006325", "006326", "006327", "006328", "006329", "006330", "006331", "006332", "006372", "006373", "006376", "006378", "006379", "006380", "006381", "006382", "006383", "006384", "006385", "006386", "006387", "006388", "006389", "006390", "006391", "006392", "006393", "006394", "006396", "006397", "006398", "006399", "006400", "006401", "006402", "006403", "006404", "006405", "006406", "006407", "006408", "006409", "006410", "006411", "006412", "006413", "006414", "006415", "006416", "006417", "006418", "006419", "006420", "006421", "006422", "006423", "006424", "006425", "006426", "006427", "006428", "006429", "006430", "006431", "006432", "006433", "006434", "006435", "006437", "006438", "006439", "006440", "006441", "006442", "006443", "006444", "006445", "006446", "006447", "006448", "006449", "006450", "006451", "006452", "006453", "006454", "006455", "006456", "006457", "006458", "006459", "006460", "006461", "006462", "006463", "006464", "006465", "006466", "006467", "006468", "006469", "006470", "006471", "006472", "006473", "006474", "006475", "006476", "006477", "006478", "006479", "006480", "006481", "006484", "006485", "006488", "006489", "006527", "006530", "006532", "006533", "006534", "006535", "006536", "006537", "006538", "006539", "006540", "006541", "006542", "006543", "006544", "006545", "006546", "006547", "006548", "006549", "006550", "006552", "006553", "006554", "006555", "006556", "006557", "006558", "006559", "006560", "006561", "006562", "006563", "006564", "006565", "006566", "006567", "006568", "006569", "006570", "006571", "006572", "006573", "006574", "006575", "006576", "006577", "006578", "006579", "006580", "006581", "006582", "006583", "006584", "006585", "006589", "006590", "006591", "006592", "006593", "006594", "006595", "006596", "006597", "006598", "006599", "006600", "006601", "006602", "006603", "006604", "006605", "006606", "006607", "006608", "006609", "006610", "006611", "006612", "006613", "006614", "006618", "006619", "006620", "006622", "006623", "006632", "006633", "006664", "006665", "006666", "006667", "006668", "006669", "006670", "006671", "006672", "006673", "006674", "006675", "006676", "006677", "006678", "006679", "006680", "006681", "006682", "006683", "006684", "006685", "006686", "006687", "006688", "006689", "006690", "006691", "006692", "006693", "006694", "006695", "006696", "006697", "006698", "006699", "006700", "006701", "006702", "006703", "006704", "006705", "006708", "006709", "006710", "006711", "006712", "006713", "006714", "006715", "006716", "006717", "006718", "006719", "006720", "006721", "006722", "006723", "006724", "006725", "006726", "006727", "006728", "006729", "006730", "006731", "006732", "006733", "006734", "006735", "006736", "006737", "006738", "006739", "006740", "006741", "006742", "006743", "006744", "006745", "006746", "006747", "006748", "006749", "006750", "006751", "006752", "006753", "006754", "006755", "006756", "006757", "006758", "006759", "006760", "006761", "006762", "006763", "006764", "006765", "006766", "006767", "006768", "006769", "006770", "006771", "006772", "006773", "006774", "006775", "006776", "006777", "006778", "006779", "006780", "006781", "006782", "006783", "006784", "006785", "006786", "006787", "006788", "006789", "006790", "006791", "006792", "006793", "006794", "006795", "006796", "006797", "006798", "006799", "006800", "006801", "006802", "006803", "006804", "006805", "006806", "006807", "006808", "006809", "006810", "006811", "006812", "006813", "006814", "006815", "006816", "006817", "006818", "006821", "006822", "006823", "006825", "006826", "006828", "006829", "006831", "006840", "006841", "006887", "006888", "006889", "006890", "006891", "006892", "006893", "006894", "006895", "006896", "006897", "006898", "006899", "006900", "006901", "006902", "006903", "006904", "006905", "006906", "006907", "006908", "006909", "006910", "006911", "006912", "006913", "006914", "006915", "006916", "006917", "006918", "006919", "006920", "006921", "006922", "006923", "006924", "006925", "006926", "006927", "006928", "006929", "006930", "006931", "006932", "006933", "006934", "006935", "006936", "006937", "006938", "006939", "006940", "006941", "006942", "006943", "006944", "006945", "006946", "006947", "006948", "006949", "006950", "006951", "006952", "006953", "006954", "006955", "006956", "006957", "006958", "006959", "006960", "006961", "006962", "006963", "006964", "006965", "006966", "006967", "006968", "006969", "006970", "006971", "006972", "006973", "006974", "006975", "006976", "006977", "006978", "006979", "006980", "006981", "006982", "006983", "006984", "006985", "006986", "006987", "006988", "006989", "006990", "006991", "006992", "006993", "006994", "006995", "006996", "006997", "006998", "006999", "007000", "007001", "007002", "007003", "007004", "007005", "007457", "007458", "007459", "007477", "007478", "007479", "007487", "007488", "007489", "007490", "007495", "007499", "007500", "007501", "007504", "007505", "007506", "007507", "007508", "007509", "007510", "007511", "007512", "007513", "007515", "007516", "007517", "007518", "007519", "007520", "007521", "007522", "007523", "007524", "007525", "007526", "007527", "007528", "007529", "007531", "007532", "007533", "007534", "007535", "007536", "007538", "007539", "007541", "007542", "007543", "007544", "007545", "007546", "007547", "007548", "007549", "007550", "007552", "007553", "007554", "007555", "007556", "007557", "007558", "007559", "007560", "007561", "007562", "007563", "007564", "007565", "007572", "007573", "007574", "007575", "007576", "007577", "007578", "007579", "007580", "007581", "007582", "007583", "007584", "007585", "007586", "007587", "007588", "007590", "007591", "007593", "007594", "007595", "007596", "007597", "007598", "007599", "007600", "007601", "007602", "007603", "007604", "007605", "007606", "007607", "007608", "007609", "007610", "007611", "007612", "007613", "007614", "007615", "007616", "007617", "007618", "007619", "007620", "007621", "007622", "007623", "007624", "007625", "007626", "007627", "007628", "007629", "007630", "007631", "007632", "007633", "007634", "007635", "007636", "007638", "007639", "007640", "007641", "007642", "007643", "007644", "007716", "007737", "007740", "007741", "007750", "007751", "007753", "007754", "007755", "007756", "007757", "007768", "007769", "007770", "007771", "007772", "007773", "007774", "007775", "007777", "007782", "007783", "007784", "007785", "007786", "007787", "007788", "007789", "007790", "007791", "007792", "007793", "007794", "007795", "007796", "007797", "007798", "007799", "007800", "007801", "007802", "007803", "007804", "007805", "007806", "007807", "007808", "007809", "007810", "007811", "007812", "007813", "007814", "008796", "008797", "008798", "008799", "008800", "008801", "008802", "008803", "008804", "008805", "008806", "008807", "008808", "008809", "008810", "008811", "008812", "008813", "008814", "008815", "008816", "008817", "008818", "008819", "008820", "008821", "008822", "008823", "008824", "008825", "008826", "008827", "008828", "008829", "008830", "008831", "008832", "008833", "008834", "008835", "008836", "008837", "008838", "008839", "008840", "008841", "008842", "008843", "008844", "008845", "008846", "008847", "008848", "008849", "008850", "008851", "008852", "008853", "008854", "008855", "008856", "008857", "008858", "008859", "008860", "008861", "008862", "008863", "008864", "008865", "008866", "008867", "008868", "008869", "008870", "008871", "008872", "008873", "008874", "008875", "008876", "008877", "008878", "008879", "008880", "008881", "008882", "008883", "008884", "008885", "008886", "008887", "008888", "008889", "008890", "008891", "008892", "008893", "008894", "008895", "008896", "008897", "008898", "008899", "008900", "008901", "008902", "008903", "008904", "008905", "008906", "008907", "008908", "008909", "008910", "008911", "008912", "008913", "008914", "008915", "008916", "008917", "008918", "008919", "008920", "008921", "008922", "008923", "008924", "008925", "008926", "008927", "008928", "008929", "008930", "008931", "008932", "008933", "008934", "008944", "008954", "008960", "008963", "008964", "008965", "008970", "008975", "008976", "008980", "008981", "008984", "008985", "008986", "008989", "008990", "008991", "008993", "008994", "008995", "008996", "008997", "008998", "009000", "009001", "009003", "009004", "009005", "009007", "009008", "009009", "009010", "009011", "009012", "009013", "009014", "009016", "009017", "009018", "009021", "009022", "009023", "009025", "009026", "009027", "009028", "009029", "009030", "009031", "009032", "009033", "009034", "009035", "009036", "009037", "009038", "009039", "009040", "009041", "009042", "009043", "009044", "009045", "009046", "009047", "009048", "009049", "009050", "009051", "009052", "009053", "009054", "009055", "009056", "009057", "009058", "009059", "009060", "009061", "009062", "009063", "009064", "009065", "009066", "009067", "009068", "009069", "009070", "009071", "009072", "009073", "009074", "009075", "009076", "009077", "009078", "009079", "009080", "009081", "009082", "009083", "009084", "009085", "009086", "009087", "009088", "009089", "009090", "009091", "009092", "009093", "009094", "009095", "009096", "009097", "009098", "009099", "009100", "009101", "009102", "009103", "009104", "009105", "009106", "009107", "009108", "009109", "009113", "009114", "009115", "009116", "009117", "009118", "009119", "009120", "009121", "009122", "009123", "009124", "009125", "009127", "009128", "009129", "009130", "009131", "009132", "009133", "009134", "009135", "009137", "009138", "009139", "009140", "009141", "009142", "009143", "009144", "009145", "009147", "009148", "009149", "009151", "009152", "009153", "009154", "009156", "009157", "009158", "009161", "009162", "009163", "009164", "009166", "009167", "009168", "009169", "009171", "009172", "009174", "009176", "009177", "009178", "009181", "009182", "009183", "009187", "009192", "009196", "009198", "009216", "009217", "009220", "009225", "009264", "009301", "009302", "009303", "009304", "009305", "009306", "009307", "009308", "009309", "009310", "009311", "009312", "009313", "009314", "009315", "009316", "009317", "009318", "009319", "009320", "009321", "009322", "009323", "009324", "009325", "009326", "009327", "009328", "009329", "009330", "009331", "009332", "009333", "009334", "009335", "009336", "009337", "009338", "009339", "009340", "009341", "009342", "009343", "009344", "009345", "009346", "009347", "009348", "009349", "009350", "009351", "009352", "009353", "009354", "009355", "009356", "009357", "009358", "009359", "009360", "009361", "009362", "009363", "009364", "009365", "009366", "009367", "009368", "009369", "009370", "009371", "009372", "009373", "009374", "009375", "009376", "009377", "009378", "009379", "009380", "009381", "009382", "009383", "009384", "009385", "009386", "009387", "009388", "009389", "009390", "009391", "009392", "009393", "009394", "009395", "009396", "009397", "009398", "009399", "009400", "009401", "009402", "009403", "009404", "009405", "009406", "009407", "009408", "009409", "009410", "009411", "009412", "009413", "009414", "009415", "009416", "009417", "009418", "009419", "009420", "009421", "009422", "009423", "009424", "009425", "009426", "009427", "009428", "009429", "009430", "009431", "009432", "009433", "009434", "009435", "009436", "009437", "009438", "009439", "009440", "009441", "009442", "009443", "009444", "009445", "009446", "009447", "009448", "009449", "009450", "009451", "009452", "009453", "009454", "009455", "009456", "009457", "009458", "009459", "009460", "009461", "009462", "009463", "009464", "009465", "009466", "009467", "009468", "009469", "010021", "010022", "010138", "010141", "010144", "010147", "010150", "010153", "010159", "010162", "010165", "010168", "010171", "010174", "010176", "010177", "010178", "010180", "010181", "010183", "010184", "010186", "010187", "010188", "010189", "010190", "010192", "010193", "010196", "010198", "010199", "010202", "010204", "010205", "010206", "010207", "010208", "010209", "010210", "010211", "010212", "010215", "010217", "010218", "010219", "010221", "010222", "010223", "010224", "010225", "010226", "010227", "010228", "010230", "010231", "010232", "010233", "010234", "010235", "010236", "010237", "010238", "010239", "010240", "010241", "010242", "010243", "010244", "010245", "010246", "010247", "010248", "010249", "010250", "010251", "010252", "010253", "010254", "010255", "010256", "010257", "010258", "010259", "010260", "010261", "010262", "010263", "010264", "010265", "010266", "010267", "010268", "010269", "010270", "010271", "010272", "010273", "010274", "010275", "010276", "010277", "010278", "010279", "010280", "010281", "010282", "010283", "010284", "010285", "010286", "010287", "010288", "010289", "010290", "010291", "010292", "010293", "010294", "010295", "010296", "010297", "010298", "010299", "010300", "010301", "010302", "010303", "010304", "010305", "010306", "010307", "010308", "010309", "010310", "010311", "010312", "010313", "010314", "010315", "010316", "010317", "010318", "010319", "010320", "010321", "010322", "010323", "010324", "010325", "010326", "010327", "010328", "010329", "010330", "010331", "010332", "010333", "010334", "010335", "010336", "010337", "010338", "010339", "010340", "010341", "010342", "010343", "010344", "010345", "010346", "010347", "010348", "010349", "010350", "010351", "010352", "010353", "010354", "010355", "010356", "010357", "010358", "010359", "010360", "010361", "010362", "010363", "010364", "010365", "010366", "010367", "010368", "010369", "010370", "010371", "010372", "010373", "010374", "010375", "010376", "010377", "010378", "010379", "010380", "010381", "010382", "010383", "010384", "010385", "010386", "010387", "010388", "010389", "010390", "010391", "010392", "010393", "010394", "010395", "010396", "010397", "010398", "010399", "010400", "010401", "010402", "010403", "010404", "010405", "010406", "010407", "010408", "010409", "010410", "010411", "010412", "010413", "010414", "010415", "010416", "010417", "010418", "010419", "010421", "010422", "010423", "010424", "010426", "010427", "010428", "010429", "010430", "010431", "010432", "010433", "010434", "010435", "010436", "010437", "010438", "010439", "010440", "010441", "010442", "010443", "010444", "010445", "010446", "010447", "010448", "010449", "010450", "010451", "010452", "010453", "010454", "010455", "010456", "010457", "010458", "010459", "010460", "010461", "010462", "010463", "010464", "010465", "010466", "010467", "010468", "010469", "010470", "010471", "010472", "010473", "010474", "010475", "010476", "010477", "010478", "010479", "010480", "010481", "010482", "010483", "010484", "010485", "010486", "010487", "010488", "010489", "010490", "010491", "010492", "010493", "010494", "010495", "010496", "010497", "010498", "010499", "010500", "010501", "010502", "010503", "010504", "010505", "010506", "010507", "010508", "010509", "010510", "010511", "010512", "010513", "010514", "010515", "010516", "010517", "010518", "010519", "010520", "010521", "010522", "010523", "010524", "010525", "010526", "010527", "010528", "010529", "010530", "010531", "010532", "010533", "010534", "010535", "010536", "010537", "010538", "010539", "010540", "010541", "010542", "010543", "010544", "010545", "010546", "010547", "010548", "010549", "010550", "010551", "010552", "010553", "010554", "010555", "010556", "010557", "010558", "010559", "010560", "010561", "010562", "010563", "010564", "010565", "010566", "010567", "010568", "010569", "010570", "010571", "010572", "010573", "010574", "010575", "010576", "010577", "010578", "010579", "010580", "010581", "010582", "010583", "010584", "010585", "010586", "010587", "010588", "010589", "010590", "010591", "010592", "010593", "010594", "010595", "010596", "010597", "010598", "010599", "010600", "010601", "010602", "010603", "010604", "010605", "010606", "010607", "010608", "010609", "010612", "010614", "010616", "010617", "010618", "010619", "010620", "010621", "010622", "010623", "010624", "010625", "010626", "010627", "010628", "010629", "010630", "010631", "010632", "010633", "010634", "010635", "010636", "010637", "010638", "010639", "010640", "010641", "010642", "010643", "010644", "010645", "010646", "010647", "010648", "010649", "010650", "010652", "010653", "010654", "010655", "010656", "010657", "010658", "010659", "010660", "010661", "010662", "010663", "010664", "010665", "010666", "010667", "010668", "010669", "010670", "010671", "010672", "010673", "010674", "010675", "010676", "010677", "010678", "010679", "010680", "010681", "010682", "010683", "010684", "010685", "010686", "010687", "010688", "010689", "010690", "010691", "010692", "010693", "010694", "010695", "010696", "010697", "010698", "010699", "010700", "010701", "010702", "010703", "010704", "010705", "010706", "010707", "010708", "010709", "010710", "010711", "010712", "010713", "010714", "010715", "010716", "010717", "010718", "010719", "010720", "010721", "010722", "010723", "010724", "010725", "010726", "010727", "010728", "010729", "010730", "010737", "010738", "010739", "010740", "010741", "010742", "010743", "010744", "010745", "010746", "010747", "010748", "010749", "010750", "010751", "010752", "010753", "010754", "010757", "010758", "010759", "010760", "010761", "010762", "010763", "010764", "010765", "010766", "010767", "010768", "010769", "010770", "010771", "010772", "010773", "010774", "010775", "010776", "010777", "010778", "010779", "010780", "010781", "010782", "010783", "010785", "010786", "010787", "010788", "010789", "010790", "010791", "010792", "010793", "010794", "010795", "010796", "010797", "010798", "010799", "011266", "011275", "011277", "011279", "011280", "011281", "011282", "011283", "011284", "011286", "011288", "011289", "011290", "011291", "011292", "011293", "011294", "011295", "011296", "011297", "011298", "011299", "011300", "011301", "011302", "011303", "011304", "011305", "011306", "011307", "011308", "011309", "011310", "011311", "011312", "011313", "011314", "011315", "011316", "011317", "011318", "011319", "011320", "011321", "011322", "011323", "011326", "011345", "011347", "011348", "011349", "011351", "011352", "011353", "011354", "011355", "011356", "011357", "011358", "011359", "011360", "011361", "011362", "011363", "011364", "011365", "011366", "011367", "011368", "011369", "011370", "011371", "011372", "011373", "011374", "011375", "011376", "011377", "011378", "011379", "011380", "011381", "011382", "011383", "011384", "011390", "011391", "011405", "011416", "011417", "011418", "011419", "011420", "011422", "011423", "011424", "011425", "011426", "011427", "011428", "011429", "011430", "011431", "011432", "011433", "011434", "011435", "011436", "011437", "011438", "011439", "011440", "011441", "011442", "011443", "011444", "011445", "011446", "011447", "011448", "011449", "011450", "011451", "011452", "011594", "011598", "011599", "011600", "011601", "011602", "011603", "011604", "011605", "011606", "011607", "011608", "011609", "011610", "011611", "011612", "011613", "011614", "011616", "011617", "011618", "011619", "011620", "011621", "011622", "011623", "011624", "011625", "011626", "011627", "011628", "011629", "011630", "011632", "011633", "011655", "011656", "011657", "011658", "011659", "011660", "011661", "011662", "011663", "011664", "011665", "011666", "011667", "011669", "011670", "011671", "011672", "011673", "011674", "011675", "011676", "011677", "011678", "011679", "011680", "011681", "011682", "011683", "011684", "011685", "011686", "011687", "011688", "011695", "011696", "011704", "011705", "011706", "011712", "011713", "011715", "011717", "011721", "011723", "011724", "011725", "011726", "011727", "011728", "011729", "011730", "011731", "011732", "011733", "011734", "011735", "011736", "011737", "011738", "011739", "011740", "011741", "011742", "011743", "011744", "011745", "011746", "011747", "011748", "011749", "011750", "011751", "011752", "011753", "011754", "011755", "011756", "011757", "011765", "012411", "012412", "012414", "012433", "012438", "012440", "012442", "012443", "012444", "012445", "012446", "012447", "012448", "012449", "012450", "012451", "012452", "012453", "012454", "012455", "012456", "012457", "012458", "012459", "012460", "012461", "012462", "012463", "012464", "012465", "012466", "012467", "012468", "012469", "012470", "012471", "012473", "012474", "012475", "012476", "012477", "012478", "012479", "012480", "012481", "012482", "012483", "012485", "012487", "012488", "012500", "012503", "012504", "012505", "012506", "012508", "012509", "012510", "012511", "012513", "012514", "012515", "012516", "012517", "012518", "012519", "012520", "012521", "012522", "012523", "012524", "012525", "012526", "012527", "012528", "012529", "012530", "012531", "012532", "012533", "012534", "012535", "012537", "012539", "012540", "012541", "012547", "012558", "012560", "012561", "012562", "012563", "012564", "012565", "012567", "012568", "012569", "012570", "012571", "012572", "012573", "012574", "012575", "012577", "012579", "012581", "012582", "012585", "012587", "012589", "012590", "012591", "012592", "012593", "012594", "012595", "012596", "012597", "012598", "012599", "012600", "012601", "012602", "012603", "012604", "012607", "013056", "013059", "013063", "013065", "013066", "013067", "013068", "013069", "013070", "013071", "013072", "013073", "013074", "013075", "013076", "013077", "013078", "013079", "013080", "013081", "013082", "013083", "013084", "013085", "013086", "013087", "013088", "013089", "013090", "013091", "013092", "013093", "013094", "013095", "013096", "013098", "013099", "013101", "013116", "013118", "013120", "013121", "013122", "013123", "013124", "013125", "013126", "013127", "013128", "013129", "013130", "013131", "013132", "013133", "013134", "013135", "013136", "013137", "013138", "013139", "013140", "013141", "013143", "013144", "013145", "013146", "013147", "013148", "013149", "013150", "013151", "013152", "013153", "013154", "013155", "013156", "013157", "013158", "013159", "013160", "013161", "013163", "013164", "013182", "013185", "013187", "013188", "013189", "013190", "013191", "013192", "013193", "013195", "013196", "013197", "013198", "013199", "013513", "013536", "013539", "013540", "013542", "013543", "013545", "013546", "013547", "013548", "013549", "013550", "013552", "013553", "013554", "013555", "013556", "013557", "013558", "013559", "013560", "013561", "013562", "013563", "013564", "013565", "013566", "013567", "013568", "013569", "013570", "013571", "013572", "013573", "013574", "013575", "013576", "013577", "013578", "013579", "013581", "013599", "013600", "013601", "013604", "013605", "013606", "013607", "013608", "013609", "013610", "013611", "013612", "013613", "013614", "013615", "013616", "013617", "013618", "013619", "013620", "013621", "013622", "013623", "013624", "013625", "013626", "013627", "013628", "013629", "013630", "013631", "013632", "013633", "013635", "013638", "013640", "013658", "013659", "013661", "013662", "013663", "013664", "013665", "013666", "013667", "013668", "013669", "013670", "013671", "013672", "013673", "013674", "013675", "013676", "013677", "013678", "013679", "013680", "013681", "013682", "013683", "013684", "013685", "013686", "013687", "013688", "013689", "013690", "013691", "013692", "013693", "013694", "013695", "013696", "013697", "013698", "013713", "013716", "014062", "014088", "014090", "014091", "014092", "014093", "014095", "014096", "014097", "014098", "014099", "014100", "014101", "014102", "014103", "014104", "014105", "014106", "014107", "014108", "014109", "014110", "014111", "014112", "014113", "014114", "014115", "014116", "014117", "014118", "014119", "014120", "014121", "014122", "014123", "014126", "014139", "014145", "014148", "014149", "014150", "014151", "014152", "014153", "014154", "014155", "014156", "014157", "014158", "014159", "014160", "014161", "014162", "014163", "014164", "014165", "014166", "014167", "014168", "014169", "014170", "014171", "014172", "014173", "014174", "014175", "014176", "014177", "014178", "014179", "014180", "014182", "014183", "014199", "014203", "014206", "014667", "014678", "014679", "014680", "014681", "014682", "014683", "014684", "014685", "014686", "014687", "014688", "014689", "014690", "014691", "014692", "014693", "014694", "014705", "014706", "014707", "014708", "014709", "014710", "014711", "014712", "014713", "014714", "014715", "014716", "014717", "014718", "014719", "014720", "014721", "014731", "014733", "014734", "014735", "014736", "014737", "014738", "014739", "014740", "014741", "014742", "014743", "014744", "014745", "014746", "014747", "014945", "014946", "014947", "014948", "014949", "014950", "014951", "014952", "014953", "014954", "014966", "014967", "014968", "014969", "014970", "014971", "014972", "014973", "014974", "014975", "014976", "014977", "014978", "014979", "014980", "014981", "014986", "014987", "014988", "014989", "014990", "014991", "014992", "014993", "014994", "014995", "014996", "014997", "014998", "014999", "015009", "015010", "015011", "015012", "015013", "015014", "015015", "015016", "015017", "015018", "015019", "015020", "015021", "015022", "015023", "015024", "015025", "015036", "015037", "015038", "015039", "015040", "015041", "015042", "015043", "015044", "015045", "015046", "015047", "015048", "015049", "015050", "015051", "015063", "015064", "015065", "015066", "015067", "015068", "015069", "015070", "015071", "015072", "015073", "015074", "015075", "015076", "015077", "015078", "015086", "015087", "015088", "015089", "015090", "015091", "015092", "015093", "015094", "015095", "015096", "015097", "015098", "015099", "015109", "015110", "015111", "015112", "015113", "015114", "015115", "015116", "015117", "015118", "015119", "015120", "015121", "015122", "015123", "015135", "015136", "015137", "015138", "015139", "015140", "015141", "015142", "015143", "015144", "015145", "015146", "015147", "015148", "015149", "015150", "015152", "015162", "015163", "015164", "015165", "015166", "015167", "015168", "015169", "015170", "015171", "015172", "015173", "015174", "015175", "015176", "015177", "015178", "015189", "015190", "015191", "015192", "015193", "015194", "015195", "015196", "015197", "015198", "015199", "015200", "015201", "015202", "015203", "015204", "015205", "015215", "015216", "015217", "015218", "015219", "015220", "015221", "015222", "015223", "015224", "015225", "015226", "015227", "015228", "015229", "015230", "015372", "015373", "015374", "015375", "015376", "015377", "015378", "015379", "015380", "015381", "015382", "015383", "015384", "015385", "015386", "015387", "015388", "015400", "015401", "015402", "015403", "015404", "015405", "015406", "015407", "015408", "015409", "015410", "015411", "015412", "015413", "015414", "015426", "015427", "015428", "015429", "015430", "015431", "015432", "015433", "015434", "015435", "015436", "015437", "015438", "015439", "015440", "015441", "015442", "015453", "015454", "015455", "015456", "015457", "015458", "015459", "015460", "015461", "015462", "015463", "015464", "015465", "015466", "015467", "015469", "015479", "015480", "015481", "015482", "015483", "015484", "015485", "015486", "015487", "015488", "015489", "015490", "015491", "015492", "015493", "015494", "015505", "015507", "015508", "015509", "015510", "015511", "015512", "015513", "015514", "015515", "015516", "015517", "015518", "015519", "015520", "015521", "015522", "015532", "015533", "015534", "015535", "015536", "015537", "015538", "015539", "015540", "015541", "015542", "015543", "015544", "015545", "015546", "015547", "015548", "015550", "015560", "015561", "015562", "015563", "015564", "015565", "015566", "015567", "015568", "015569", "015570", "015571", "015572", "015573", "015574", "015575", "015576", "015586", "015587", "015588", "015589", "015590", "015591", "015592", "015593", "015594", "015595", "015596", "015597", "015598", "015599", "015856", "015857", "015858", "015859", "015860", "015861", "015862", "015863", "015874", "015875", "015876", "015877", "015878", "015879", "015880", "015881", "015882", "015883", "015884", "015885", "015886", "015887", "015888", "015889", "015891", "015899", "015901", "015902", "015903", "015904", "015905", "015906", "015907", "015908", "015909", "015910", "015911", "015912", "015913", "015914", "017595", "018075", "018076", "018077", "018078", "018079", "018080", "018081", "018082", "018083", "018084", "018085", "019996", "019997", "019998", "019999", "020000", "020001", "020002", "020003", "020004", "020005", "020006", "020007", "020008", "020009", "020018", "020030", "020048", "020050", "020051", "020053", "020054", "020055", "020056", "020057", "020058", "020059", "020060", "020061", "020062", "020063", "020064", "020065", "020066", "020067", "020068", "020069", "020070", "020071", "020072", "020073", "020074", "020075", "020076", "020077", "020078", "020079", "020080", "020081", "020082", "020083", "020084", "020085", "020086", "020087", "020088", "020089", "020090", "020091", "020092", "020093", "020094", "020095", "020096", "020097", "020098", "020099", "020100", "020101", "020102", "020103", "020104", "020105", "020106", "020107", "020109", "020111", "020148", "020151", "020152", "020153", "020154", "020155", "020156", "020157", "020158", "020159", "020160", "020161", "020162", "020163", "020165", "020166", "020167", "020168", "020169", "020170", "020171", "020172", "020173", "020174", "020176", "020177", "020178", "020179", "020180", "020183", "020184", "020185", "020186", "020187", "020188", "020189", "020191", "020192", "020193", "020194", "020195", "020196", "020197", "020198", "020200", "020202", "020205", "020206", "020210", "020230", "020231", "020234", "020235", "020236", "020237", "020238", "020239", "020240", "020241", "020242", "020243", "020244", "020245", "020246", "020247", "020248", "020249", "020250", "020251", "020252", "020253", "020254", "020255", "020256", "020257", "020258", "020259", "020260", "020261", "020262", "020263", "020264", "020265", "020266", "020267", "020268", "020269", "020270", "020271", "020272", "020273", "020274", "020275", "020276", "020277", "020278", "020279", "020280", "020281", "020282", "020283", "020284", "020285", "020286", "020287", "020288", "020289", "020290", "020291", "020292", "020293", "020295", "020296", "020298", "020333", "020336", "020338", "020339", "020340", "020341", "020342", "020343", "020344", "020345", "020346", "020347", "020348", "020349", "020350", "020351", "020352", "020353", "020354", "020355", "020356", "020357", "020358", "020359", "020360", "020361", "020362", "020363", "020364", "020365", "020366", "020367", "020368", "020369", "020370", "020371", "020372", "020373", "020374"], "val": ["000871", "000872", "000873", "000874", "000876", "000881", "000883", "000898", "000903", "000904", "000905", "000907", "000909", "000911", "000916", "000917", "000918", "000919", "000920", "000921", "000922", "000923", "000924", "000925", "000927", "000928", "000929", "000930", "000931", "000932", "000933", "000934", "000935", "000936", "000937", "000938", "000939", "000940", "000941", "000942", "000943", "000944", "000945", "000946", "000947", "000948", "000950", "000951", "000952", "000953", "000954", "000955", "000956", "000957", "000958", "000959", "000960", "000962", "000963", "000964", "000965", "000971", "000973", "000974", "000978", "000979", "000988", "000990", "000991", "000992", "000993", "000996", "000997", "000998", "000999", "001000", "001002", "001003", "001005", "001006", "001008", "001009", "001010", "001011", "001012", "001013", "001014", "001015", "001016", "001017", "001018", "001019", "001020", "001021", "001022", "001023", "001024", "001025", "001026", "001027", "001028", "001029", "001030", "001031", "001032", "001033", "001034", "001035", "001036", "001037", "001038", "001039", "001040", "001041", "001043", "001044", "001047", "001048", "001054", "001070", "001071", "001073", "001074", "001075", "001076", "001077", "001718", "001719", "001741", "001745", "001746", "001747", "001748", "001749", "001750", "001751", "001752", "001753", "001754", "001755", "001756", "001757", "001758", "001759", "001760", "001761", "001762", "001763", "001764", "001766", "001767", "001768", "001769", "001770", "001771", "001772", "001773", "001774", "001775", "001777", "001778", "001779", "001780", "001781", "001782", "001783", "001785", "001786", "001787", "001788", "001789", "001791", "001793", "001794", "001795", "001819", "001822", "001823", "001824", "001825", "001826", "001827", "001828", "001829", "001830", "001831", "001832", "001833", "001834", "001835", "001836", "001837", "001838", "001839", "001840", "001841", "001842", "001843", "001844", "001845", "001846", "001847", "001848", "001849", "001850", "001851", "001852", "001853", "001854", "001855", "001856", "001857", "001858", "001859", "001860", "001861", "003068", "003069", "003070", "003071", "003072", "003073", "003074", "003075", "003076", "003077", "003078", "003079", "003080", "003081", "003125", "003127", "003128", "003129", "003130", "003131", "003132", "003133", "003134", "003135", "003136", "003137", "003138", "003139", "003140", "003141", "003142", "003143", "003144", "003145", "003146", "003147", "003148", "003149", "003150", "003151", "003152", "003153", "003154", "003155", "003156", "003157", "003158", "003159", "003160", "003161", "003162", "003163", "003164", "003165", "003166", "003167", "003168", "003169", "003170", "003171", "003172", "003173", "003174", "003175", "003176", "003177", "003178", "003179", "003180", "003181", "003182", "003183", "003184", "003185", "003186", "003187", "003188", "003189", "003190", "003191", "003192", "003233", "003234", "003235", "003236", "003237", "003238", "003239", "003240", "003241", "003242", "003243", "003244", "003245", "003246", "003247", "003248", "003249", "003250", "003251", "003252", "003253", "003254", "003255", "003256", "003257", "003258", "003259", "003260", "003261", "003262", "003263", "003264", "003265", "003266", "003267", "003268", "003269", "003270", "003271", "003272", "003273", "003316", "003317", "003318", "003319", "003320", "003321", "003322", "003323", "003324", "003325", "003326", "003327", "003328", "003329", "003330", "003331", "003332", "003333", "003334", "003335", "003336", "003337", "003338", "003339", "003340", "003341", "003342", "003343", "003344", "003345", "003346", "003347", "003348", "003349", "003350", "003351", "003352", "003353", "003354", "003355", "003356", "003357", "003358", "003359", "003360", "003361", "003362", "003363", "003364", "003365", "003366", "003367", "003368", "003369", "003370", "003371", "003372", "003373", "003374", "003375", "003376", "003377", "003378", "003379", "003380", "003392", "003569", "003570", "003571", "003572", "003573", "003574", "003575", "003576", "003577", "003579", "003580", "003581", "003582", "003583", "003584", "003585", "003586", "003587", "003588", "003589", "003608", "003609", "003610", "003611", "003612", "003613", "003614", "003615", "003616", "003617", "003618", "003619", "003620", "003621", "003622", "003623", "003624", "003625", "003626", "003627", "003628", "003629", "003630", "003631", "003633", "003641", "003676", "003677", "003678", "003679", "004074", "004075", "004076", "004077", "004078", "004079", "004080", "004081", "004082", "004083", "004084", "004085", "004086", "004087", "004088", "004089", "004090", "004091", "004092", "004093", "004094", "004095", "004096", "004097", "004098", "004099", "004100", "004101", "004102", "004103", "004104", "004105", "004106", "004107", "004108", "004109", "004110", "004111", "004112", "004113", "004114", "004115", "004116", "004117", "004118", "004119", "004120", "004121", "004122", "004123", "004124", "004125", "004126", "004127", "004128", "004129", "004130", "004131", "004132", "004133", "004134", "004135", "004180", "004182", "004183", "004185", "004186", "004187", "004188", "004189", "004190", "004191", "004192", "004193", "004194", "004195", "004196", "004197", "004198", "004199", "004200", "004201", "004202", "004203", "004204", "004205", "004206", "004207", "004209", "004210", "004211", "004212", "004213", "004214", "004215", "004216", "004217", "004218", "004219", "004220", "004221", "004222", "004223", "004224", "004225", "004226", "004227", "004228", "004229", "004230", "004231", "004232", "004233", "004234", "004235", "004236", "004237", "004238", "004239", "004241", "004242", "004243", "004261", "004262", "004263", "004264", "004265", "004266", "004267", "004268", "004269", "004270", "004271", "004272", "004273", "004274", "004275", "004276", "004277", "004278", "004279", "004280", "004281", "004285", "004325", "004326", "004327", "004328", "004329", "004330", "004331", "004332", "004333", "004334", "004335", "004336", "004337", "004338", "004339", "004340", "004341", "004342", "004343", "004344", "004345", "004346", "004347", "004348", "004349", "004350", "004351", "004352", "004353", "004354", "004355", "004356", "004357", "004358", "004359", "004360", "004361", "004362", "004363", "004364", "004365", "004366", "004367", "004368", "004369", "004370", "004371", "004372", "004373", "004374", "004375", "004376", "004377", "004378", "004379", "004380", "004381", "004382", "004383", "004384", "004385", "004386", "004387", "004388", "004389", "004390", "004392", "004431", "004432", "004433", "004434", "004436", "004437", "004438", "004439", "004440", "004441", "004442", "004443", "004444", "004445", "004446", "004447", "004448", "004449", "007823", "007824", "007832", "009701", "010801", "010802", "010803", "010804", "010805", "010806", "010807", "010808", "010809", "010810", "010811", "010812", "010813", "010814", "010815", "010816", "010817", "010818", "010819", "010820", "010821", "010822", "010823", "010824", "010825", "010826", "010827", "010828", "010829", "010830", "010831", "010832", "010833", "010834", "010835", "010836", "010837", "010838", "010839", "010840", "010841", "010842", "010843", "010844", "010845", "010846", "010847", "010848", "010849", "010850", "010851", "010852", "010853", "010854", "010855", "010856", "010857", "010858", "010859", "010860", "010861", "010862", "010863", "010864", "010865", "010866", "010867", "010868", "010869", "010870", "010871", "010872", "010873", "010874", "010875", "010876", "010877", "010878", "010879", "010880", "010881", "010882", "010883", "010884", "010885", "010886", "010887", "010888", "010889", "010890", "010891", "010892", "010893", "010894", "010895", "010896", "010897", "010898", "010899", "010900", "010901", "010902", "010903", "010904", "010905", "010906", "010907", "010908", "010909", "010910", "010911", "010912", "010913", "010914", "010915", "010916", "010917", "010918", "010919", "010920", "010921", "010922", "010923", "010924", "010925", "010926", "010927", "010928", "010929", "010930", "010931", "010932", "010933", "010934", "010935", "010936", "010937", "010938", "010939", "010940", "010941", "010942", "010943", "010944", "010945", "010946", "010947", "010948", "010949", "010950", "010951", "010952", "010953", "010954", "010955", "010956", "010957", "010958", "010959", "010960", "010961", "010962", "010963", "010964", "010965", "010966", "010967", "010968", "010969", "010970", "010971", "010972", "010973", "010974", "010975", "010976", "010977", "010978", "010979", "010980", "010981", "010982", "010983", "010984", "010985", "010986", "010987", "010988", "010989", "010990", "010991", "010992", "010993", "010994", "010995", "010996", "010997", "010998", "010999", "011000", "011001", "011002", "011003", "011004", "011005", "011006", "011007", "011008", "011009", "011010", "011011", "011012", "011013", "011014", "011015", "011016", "011017", "011018", "011019", "011020", "011021", "011022", "011023", "011024", "011025", "011026", "011027", "011028", "011029", "011030", "011031", "011032", "011033", "011034", "011035", "011036", "011037", "011038", "011039", "011040", "011041", "011042", "011043", "011044", "011045", "011046", "011047", "011048", "011049", "011181", "011194", "011196", "011203", "011226", "011235", "011242", "011244", "011246", "011255", "011494", "011495", "011496", "011497", "011498", "011499", "011500", "011501", "011502", "011503", "011505", "011509", "011512", "011527", "011530", "011533", "011534", "011535", "011539", "011542", "011544", "011545", "011548", "011549", "011550", "011551", "011552", "011553", "011555", "011556", "011557", "011558", "011559", "011562", "011563", "011564", "011565", "011566", "011568", "011572", "011796", "011797", "011798", "011799", "011800", "011801", "011802", "011803", "011804", "011805", "011806", "011807", "011808", "011809", "011810", "011811", "011812", "011813", "011814", "011815", "011816", "011817", "011818", "011819", "011820", "011821", "011822", "011823", "011824", "011825", "011826", "011827", "011829", "011830", "011832", "011855", "011858", "011861", "011862", "011863", "011864", "011865", "011866", "011867", "011868", "011869", "011870", "011871", "011872", "011873", "011874", "011875", "011876", "011877", "011878", "011879", "011880", "011881", "011882", "011883", "011884", "011885", "011886", "011887", "011888", "011889", "011890", "011891", "011892", "011893", "011894", "011895", "011896", "011898", "011899", "011900", "011903", "011905", "011909", "011917", "011921", "011924", "011926", "011927", "011928", "011930", "011931", "011932", "011934", "011935", "011936", "011937", "011938", "011939", "011940", "011941", "011943", "011944", "011945", "011946", "011947", "011948", "011949", "011950", "011951", "011952", "011953", "011954", "011955", "011956", "011958", "011959", "013724", "013725", "013728", "013743", "013745", "013746", "013747", "013749", "013750", "013751", "013753", "013754", "013755", "013756", "013757", "013758", "013759", "013760", "013761", "013762", "013763", "013764", "013765", "013766", "013767", "013768", "013769", "013770", "013771", "013772", "013773", "013774", "013775", "013776", "013777", "013778", "013779", "013780", "013781", "013782", "013785", "013804", "013806", "013807", "013808", "013809", "013810", "013811", "013812", "013813", "013814", "013815", "013816", "013817", "013818", "013819", "013820", "013821", "013822", "013823", "013824", "013825", "013826", "013827", "013828", "013829", "013830", "013831", "013832", "013833", "013834", "013835", "013836", "013837", "013839", "013841", "013842", "013843", "013844", "013846", "013847", "013848", "013864", "013865", "013866", "013867", "013868", "013869", "013870", "013871", "013872", "013873", "013874", "013875", "013876", "013877", "013878", "013879", "013880", "013881", "013883", "013884", "013885", "013886", "013887", "013888", "013889", "013890", "013891", "013892", "013893", "013894", "013895", "013896", "013897", "013898", "013922", "013925", "014214", "014215", "014216", "014217", "014218", "014219", "014220", "014223", "014239", "014240", "014241", "014242", "014243", "014244", "014245", "014246", "014247", "014248", "014250", "014251", "014252", "014253", "014254", "014255", "014256", "014257", "014258", "014259", "014260", "014261", "014262", "014263", "014264", "014265", "014266", "014267", "014268", "014269", "014270", "014271", "014272", "014273", "014274", "014275", "014276", "014278", "014279", "014280", "014282", "014289", "014297", "014299", "014300", "014301", "014302", "014303", "014304", "014305", "014306", "014308", "014309", "014310", "014311", "014312", "014313", "014314", "014315", "014316", "014317", "014318", "014319", "014320", "014321", "014322", "014323", "014324", "014330", "014331", "014332", "014334", "014335", "014336", "014337", "014338", "014341", "014342", "014343", "014356", "014359", "014360", "014361", "014362", "014363", "014364", "014365", "014366", "014367", "014368", "014369", "014370", "014371", "014372", "014373", "014374", "014375", "014376", "014377", "014378", "014379", "014380", "014381", "014382", "014383", "014384", "014385", "014386", "014387", "014388", "014389", "014390", "014391", "014392", "014394", "014396", "014505", "014506", "014507", "014508", "014509", "014510", "014511", "014513", "014523", "014524", "014525", "014526", "014527", "014528", "014529", "014530", "014531", "014532", "014533", "014534", "014535", "014536", "014537", "014538", "014539", "017267", "017268", "017269", "017270", "017271", "017272", "017273", "017284", "017285", "017286", "017287", "017288", "017289", "017290", "017291", "017292", "017293", "017294", "017295", "017296", "017297", "017298", "017299", "017312", "017313", "017314", "017315", "017316", "017317", "017318", "017319", "017320", "017321", "017322", "017323", "017324", "017325", "017326", "017327", "017337", "017338", "017339", "017340", "017341", "017342", "017343", "017344", "017345", "017346", "017347", "017348", "017349", "017350", "017351", "017352", "017363", "017365", "017366", "017367", "017368", "017369", "017370", "017371", "017372", "017373", "017374", "017375", "017376", "017377", "017378", "017380", "017391", "017392", "017393", "017394", "017395", "017396", "017397", "017398", "017399", "017400", "017401", "017402", "017403", "017404", "017405", "017415", "017417", "017418", "017419", "017420", "017421", "017422", "017423", "017424", "017425", "017426", "017427", "017428", "017429", "017430", "017431", "017432", "017433", "017741", "017742", "017743", "017744", "017745", "017746", "017747", "017748", "017749", "017750", "017751", "017752", "017753", "017754", "017755", "017757", "017767", "017768", "017769", "017770", "017771", "017772", "017773", "017774", "017775", "017776", "017777", "017778", "017779", "017780", "017781", "017782", "017793", "017794", "018226", "018227", "018228", "018229", "018230", "018231", "018232", "018233", "018234", "018235", "018236", "018237", "018238", "018239", "018240", "018241", "018252", "018253", "018254", "018886", "018887", "018888", "018889", "018890", "018891", "018892", "018893", "018894", "018895", "018930", "018933", "018934", "018935", "018937", "018938", "018940", "018941", "018942", "018943", "018944", "018945", "018946", "018947", "018948", "018949", "018950", "018951", "018952", "018953", "018954", "018955", "018956", "018957", "018958", "018959", "018960", "018961", "018962", "018963", "018964", "018965", "018966", "018967", "018968", "018969", "018970", "018971", "018972", "018973", "018974", "018975", "018976", "018977", "018978", "018979", "018980", "018981", "018982", "018983", "018984", "018985", "018986", "018987", "018988", "018989", "018990", "018992", "018993", "018994", "019034", "019035", "019036", "019037", "019039", "019040", "019042", "019043", "019044", "019045", "019046", "019047", "019048", "019049", "019050", "019051", "019052", "019053", "019054", "019055", "019056", "019057", "019058", "019059", "019060", "019061", "019062", "019063", "019064", "019065", "019066", "019067", "019068", "019069", "019070", "019071", "019072", "019073", "019074", "019075", "019076", "019077", "019078", "019079", "019080", "019081", "019082", "019083", "019084", "019766", "019767", "019768", "019769", "019770", "019771", "019772", "019773", "019774", "019775", "019776", "019777", "019778", "019779", "019780", "019781", "019782", "019783", "019785", "019786", "019789", "019823", "019826", "019828", "019829", "019830", "019831", "019832", "019833", "019834", "019835", "019836", "019837", "019838", "019839", "019840", "019841", "019842", "019843", "019844", "019845", "019846", "019847", "019848", "019849", "019850", "019851", "019852", "019853", "019854", "019855", "019856", "019857", "019858", "019859", "019860", "019861", "019862", "019863", "019864", "019865", "019866", "019867", "019868", "019869", "019870", "019871", "019872", "019873", "019874", "019875", "019876", "019881", "019882", "019883", "019884", "019885", "019886", "019887", "019889", "019891", "019892", "019893", "019928", "019929", "019930", "019931", "019932", "019933", "019934", "019935", "019936", "019937", "019938", "019939", "019940", "019941", "019942", "019943", "019944", "019945", "019946", "019947", "019948", "019949", "019950", "019951", "019952", "019953", "019954", "019955", "019956", "019957", "019958", "019959", "019960", "019961", "019962", "019963", "019964", "019965", "019966", "019967", "019968", "019969", "019970", "019971", "019972", "019973", "019974", "019975", "019976", "019977", "019978", "019979", "019980", "019981", "019986", "019987", "019988", "019990", "019992"], "test": ["001482", "001484", "001485", "001486", "001487", "001500", "001501", "001502", "001506", "001512", "001513", "001522", "001524", "001525", "001526", "001530", "001531", "001532", "001533", "001536", "001537", "001538", "001539", "001540", "001541", "001542", "001543", "001546", "001547", "001550", "001551", "001552", "001554", "001555", "001556", "001557", "001558", "001560", "001565", "001566", "001567", "001576", "001579", "001580", "001582", "001583", "001585", "001586", "001591", "001592", "001593", "001597", "001598", "001600", "001601", "001602", "001603", "001605", "001606", "001609", "001610", "001611", "001612", "001613", "001616", "001617", "001618", "001619", "001620", "001621", "001622", "001623", "001624", "001633", "001637", "001639", "001642", "001647", "001648", "001650", "001652", "001654", "001656", "001657", "001659", "001660", "001665", "001669", "001671", "001672", "001675", "001678", "001679", "001680", "001681", "001683", "001685", "001688", "001689", "001690", "001691", "001692", "001693", "001694", "001695", "001696", "001697", "001698", "001699", "001700", "001702", "001703", "001704", "001705", "001707", "001709", "001712", "002075", "002076", "002078", "002079", "002080", "002081", "002082", "002083", "002084", "002085", "002086", "002087", "002088", "002089", "002090", "002091", "002092", "002093", "002094", "002095", "002096", "002097", "002098", "002113", "002125", "002131", "002132", "002135", "002137", "002139", "002140", "002141", "002143", "002144", "002145", "002146", "002147", "002148", "002149", "002150", "002151", "002152", "002153", "002154", "002155", "002156", "002157", "002158", "002159", "002160", "002161", "002165", "002166", "002167", "002168", "002169", "002170", "002171", "002173", "002176", "002177", "002178", "002180", "002183", "002195", "002199", "002204", "002206", "002209", "002210", "002211", "002212", "002213", "002214", "002215", "002217", "002218", "002219", "002220", "002221", "002222", "002223", "002224", "002225", "002226", "002227", "002228", "002229", "002230", "002231", "002232", "002233", "002603", "002604", "002605", "002607", "002609", "002610", "002611", "002613", "002614", "002615", "002616", "002617", "002618", "002619", "002620", "002621", "002623", "002624", "002625", "002626", "002627", "002628", "002629", "002630", "002631", "002632", "002633", "002634", "002635", "002636", "002637", "002638", "002639", "002640", "002641", "002642", "002643", "002644", "002645", "002646", "002647", "002648", "002649", "002650", "002651", "002652", "002653", "002654", "002655", "002656", "002657", "002658", "002659", "002660", "002661", "002662", "002663", "002664", "002665", "002666", "002667", "002668", "002669", "002670", "002671", "002679", "002710", "002712", "002714", "002715", "002716", "002718", "002719", "002720", "002721", "002722", "002723", "002724", "002725", "002726", "002727", "002728", "002729", "002730", "002731", "002732", "002733", "002734", "002735", "002736", "002737", "002738", "002739", "002740", "002741", "002742", "002743", "002744", "002745", "002748", "002749", "002752", "002754", "002755", "002756", "002757", "002758", "002759", "002760", "002761", "002762", "002763", "002764", "002765", "002766", "002767", "002768", "002769", "002770", "002771", "002773", "002774", "002775", "002776", "002778", "002779", "002780", "002781", "002782", "002783", "002784", "002785", "002786", "002787", "002788", "002789", "002790", "002791", "002792", "002793", "002794", "002795", "002796", "002797", "002798", "002799", "002800", "002801", "002802", "002803", "002805", "002806", "002807", "002809", "002850", "002851", "002852", "002853", "002854", "002855", "002856", "002857", "002858", "002859", "002860", "002861", "002862", "002863", "002864", "002865", "002866", "002867", "002868", "002869", "002870", "002871", "002872", "002873", "002874", "002875", "002876", "002877", "002878", "002879", "002880", "002881", "002882", "002883", "002884", "002885", "002886", "002887", "002888", "002889", "002890", "002891", "002892", "002893", "002894", "002895", "002896", "002897", "002898", "002899", "002900", "002901", "002902", "002903", "002904", "002905", "002906", "002907", "002908", "002909", "002910", "002911", "002912", "002913", "002914", "002915", "002916", "002917", "002918", "002919", "002920", "002921", "002922", "002923", "002924", "002925", "002926", "002927", "002928", "002929", "002930", "002931", "002932", "002933", "002956", "002973", "002977", "002978", "002980", "002981", "002982", "002983", "002984", "002985", "002986", "002987", "002988", "002989", "002990", "002991", "002992", "002993", "002994", "002995", "002996", "002997", "002998", "002999", "003000", "003001", "003002", "003003", "003004", "003005", "003006", "003007", "003008", "003009", "003010", "003011", "003012", "003013", "003014", "003015", "003016", "003017", "003018", "003019", "003020", "003021", "003022", "003023", "003024", "003025", "003026", "003027", "003028", "003029", "003030", "003031", "003033", "003830", "003831", "003832", "003833", "003834", "003835", "003836", "003837", "003838", "003839", "003840", "003841", "003842", "003843", "003844", "003845", "003846", "003847", "003848", "003849", "003850", "003851", "003852", "003853", "003854", "003855", "003856", "003857", "003858", "003859", "003860", "003861", "003862", "003863", "003864", "003865", "003866", "003867", "003868", "003869", "003870", "003871", "003874", "003913", "003914", "003915", "003916", "003917", "003918", "003919", "003920", "003921", "003922", "003923", "003924", "003925", "003926", "003927", "003928", "003929", "003930", "003931", "003932", "003933", "003934", "003935", "003936", "003937", "003938", "003939", "003940", "003941", "003942", "003943", "003944", "003945", "003946", "003947", "003948", "003949", "003950", "003951", "003952", "003953", "003954", "003955", "003956", "003957", "003958", "003959", "003960", "003961", "003962", "003963", "003964", "003965", "003966", "003967", "003968", "003969", "003970", "003971", "003972", "003973", "003974", "003975", "004019", "004021", "004022", "004023", "004024", "004025", "004026", "004027", "004028", "004029", "004030", "004031", "004032", "004033", "004034", "004035", "004036", "004037", "004038", "004039", "004040", "004041", "004042", "004043", "004044", "004045", "004046", "004047", "004048", "004049", "004745", "004746", "004747", "004748", "004749", "004750", "004751", "004752", "004753", "004754", "004755", "004758", "004764", "004798", "004799", "004800", "004801", "004802", "004803", "004804", "004805", "004806", "004807", "004808", "004809", "004810", "004811", "004812", "004813", "004814", "004815", "004816", "004817", "004818", "004819", "004820", "004821", "004822", "004823", "004824", "004825", "004826", "004827", "004828", "004829", "004830", "004831", "004832", "004833", "004834", "004835", "004836", "004837", "004838", "004839", "004840", "004841", "004842", "004843", "004844", "004845", "004846", "004847", "004848", "004849", "004850", "004851", "004852", "004853", "004854", "004855", "004856", "004857", "004858", "004859", "004860", "004861", "004862", "004864", "004865", "004870", "005075", "005076", "005077", "005078", "005079", "005080", "005081", "005082", "005083", "005084", "005085", "005086", "005087", "005088", "005089", "005090", "005091", "005092", "005093", "005094", "005095", "005096", "005097", "005098", "005099", "005100", "005101", "005102", "005103", "005104", "005105", "005106", "005107", "005108", "005109", "005112", "005152", "005153", "005154", "005155", "005156", "005157", "005158", "005160", "005161", "005162", "005163", "005164", "005165", "005166", "005167", "005168", "005169", "005170", "005171", "005172", "005173", "005174", "005175", "005176", "005177", "005178", "005179", "005180", "005181", "005182", "005183", "005184", "005185", "005186", "005187", "005188", "005189", "005190", "005191", "005192", "005193", "005194", "005195", "005196", "005197", "005198", "005199", "005200", "005201", "005202", "005203", "005204", "005205", "005206", "005207", "005208", "005209", "005210", "005211", "005212", "005213", "005214", "005215", "005216", "005217", "005234", "005282", "005283", "005284", "005285", "005286", "005288", "005289", "005290", "005291", "005292", "005293", "005294", "005295", "005296", "005297", "005298", "005300", "005301", "005302", "005303", "005304", "005305", "005306", "005307", "005308", "005309", "005310", "005311", "005312", "005313", "005314", "005315", "005316", "005317", "005318", "005319", "005320", "005321", "005322", "005323", "005324", "005325", "005326", "005327", "005328", "005329", "005330", "005331", "005332", "005333", "005334", "005335", "005336", "005337", "005338", "005339", "005340", "005341", "005342", "005343", "005344", "005345", "005354", "005391", "005393", "005394", "005395", "005396", "005397", "005398", "005399", "005401", "005402", "005403", "005404", "005405", "005406", "005407", "005408", "005409", "005410", "005411", "005412", "005413", "005414", "005415", "005416", "005417", "005418", "005419", "005420", "005421", "005422", "005423", "005424", "005425", "005426", "005427", "005428", "005429", "005430", "005431", "005432", "005435", "005436", "005437", "005438", "005439", "005440", "005441", "005442", "005443", "005444", "005445", "005446", "005447", "005448", "005449", "005450", "005451", "005452", "005453", "005454", "005455", "005456", "005457", "005459", "005460", "005501", "005502", "005503", "005504", "005505", "005506", "005507", "005508", "005509", "005510", "005511", "005512", "005513", "005514", "005515", "005516", "005517", "005518", "005519", "005520", "005521", "005522", "005523", "005524", "005525", "005526", "005527", "005528", "005529", "005530", "005531", "005532", "005533", "005534", "005535", "005536", "005537", "005538", "005539", "005540", "005541", "005542", "005543", "005544", "005545", "005546", "005547", "005548", "005549", "005550", "005551", "005552", "005553", "005554", "005555", "005556", "005557", "005558", "005559", "005560", "005561", "005562", "005563", "005564", "005567", "005569", "005934", "005935", "005936", "005937", "005938", "005939", "005940", "005941", "005942", "005943", "005944", "005945", "005946", "005947", "005948", "005949", "005950", "005951", "005952", "005953", "005954", "005955", "005956", "005957", "005958", "005959", "005960", "005961", "005962", "005963", "005964", "005965", "005966", "005967", "005968", "005969", "005970", "005971", "005972", "005973", "005974", "005975", "005976", "005977", "005978", "005979", "005980", "005981", "005982", "005983", "005984", "005985", "005986", "005987", "005988", "005989", "005990", "006032", "006033", "006034", "006035", "006036", "006038", "006039", "006040", "006041", "006042", "006043", "006044", "006045", "006046", "006047", "006048", "006049", "006050", "006051", "006052", "006053", "006054", "006055", "006056", "006057", "006058", "006059", "006060", "006061", "006062", "006063", "006064", "006065", "006066", "006067", "006068", "006069", "006070", "006071", "006072", "006073", "006074", "006075", "006076", "006077", "006078", "006079", "006080", "006081", "006082", "006083", "006084", "006085", "006086", "006087", "006088", "006089", "006090", "006091", "007008", "007009", "007010", "007011", "007012", "007013", "007014", "007015", "007016", "007017", "007018", "007019", "007032", "007034", "007035", "007036", "007037", "007038", "007039", "007040", "007042", "007043", "007044", "007045", "007046", "007047", "007048", "007049", "007050", "007051", "007054", "007056", "007057", "007058", "007059", "007060", "007061", "007062", "007063", "007064", "007065", "007066", "007067", "007068", "007069", "007070", "007071", "007072", "007073", "007074", "007075", "007076", "007077", "007078", "007079", "007080", "007081", "007082", "007083", "007084", "007085", "007086", "007087", "007088", "007089", "007090", "007091", "007092", "007093", "007094", "007095", "007096", "007097", "007098", "007099", "007100", "007101", "007102", "007103", "007104", "007105", "007106", "007107", "007108", "007109", "007110", "007111", "007112", "007113", "007114", "007115", "007116", "007117", "007118", "007119", "007120", "007121", "007122", "007123", "007124", "007125", "007126", "007128", "007129", "007130", "007131", "007132", "007133", "007134", "007135", "007136", "007137", "007138", "007139", "007140", "007141", "007142", "007143", "007144", "007145", "007146", "007147", "007148", "007149", "007150", "007151", "007152", "007153", "007154", "007155", "007156", "007157", "007158", "007159", "007160", "007161", "007162", "007163", "007164", "007165", "007166", "007167", "007168", "007169", "007170", "007171", "007172", "007173", "007174", "007175", "007176", "007177", "007178", "007179", "007180", "007181", "007182", "007183", "007184", "007185", "007186", "007187", "007188", "007189", "007190", "007191", "007192", "007193", "007194", "007344", "007354", "007355", "007356", "007364", "007365", "007366", "007375", "007376", "007377", "007378", "007379", "007380", "007386", "007387", "007388", "007389", "007390", "007391", "007392", "007393", "007394", "007395", "007396", "007397", "007398", "007399", "007400", "007401", "007402", "007403", "007404", "007405", "007406", "007407", "007408", "007409", "007410", "007411", "007412", "007413", "007414", "007415", "007416", "007417", "007418", "007419", "007420", "007421", "007423", "007424", "007425", "007426", "007427", "007428", "007429", "007430", "007431", "007432", "007433", "007434", "007435", "007436", "007437", "007438", "007439", "007440", "007441", "007442", "007443", "007444", "007987", "007988", "007989", "007990", "007992", "007993", "007994", "007997", "007998", "007999", "008000", "008002", "008003", "008004", "008005", "008007", "008008", "008009", "008012", "008013", "008014", "008016", "008018", "008019", "008020", "008023", "008024", "008028", "008034", "008046", "008070", "008080", "008129", "008156", "008157", "008158", "008159", "008160", "008161", "008162", "008163", "008164", "008165", "008166", "008167", "008168", "008169", "008170", "008171", "008172", "008173", "008174", "008175", "008176", "008177", "008178", "008179", "008180", "008181", "008182", "008183", "008184", "008185", "008186", "008187", "008188", "008189", "008190", "008191", "008192", "008193", "008194", "008195", "008196", "008197", "008198", "008199", "008200", "008201", "008202", "008203", "008204", "008205", "008206", "008207", "008208", "008209", "008210", "008211", "008212", "008213", "008214", "008215", "008216", "008217", "008218", "008219", "008220", "008221", "008222", "008223", "008224", "008225", "008226", "008227", "008228", "008229", "008230", "008231", "008232", "008233", "008234", "008235", "008236", "008237", "008238", "008239", "008240", "008241", "008242", "008243", "008244", "008245", "008246", "008247", "008248", "008249", "008250", "008251", "008252", "008253", "008254", "008255", "008256", "008257", "008258", "008259", "008260", "008261", "008262", "008263", "008264", "008265", "008266", "008267", "008268", "008269", "008270", "008271", "008272", "008273", "008274", "008291", "008306", "008321", "008326", "008330", "008334", "008335", "008340", "008344", "008348", "008349", "008352", "008353", "008354", "008357", "008358", "008359", "008361", "008362", "008363", "008364", "008366", "008367", "008368", "008369", "008371", "008372", "008373", "008374", "008375", "008376", "008378", "008379", "008381", "008382", "008383", "008384", "008385", "008386", "008387", "008388", "008389", "008390", "008392", "008393", "008394", "008395", "008396", "008397", "008398", "008399", "008400", "008401", "008402", "008403", "008404", "008405", "008406", "008407", "008408", "008409", "008410", "008411", "008412", "008413", "008414", "008415", "008416", "008417", "008418", "008419", "008420", "008421", "008422", "008423", "008424", "008425", "008426", "008427", "008428", "008429", "008430", "008431", "008432", "008433", "008434", "008435", "008436", "008437", "008438", "008439", "008440", "008441", "008442", "008443", "008444", "008445", "008446", "008447", "008448", "008449", "008450", "008451", "008452", "008453", "008454", "008455", "008466", "008467", "008468", "008469", "008470", "008471", "008472", "008473", "008474", "008478", "008479", "008483", "008484", "008488", "008489", "008490", "008493", "008494", "008495", "008498", "008499", "008500", "008501", "008507", "008508", "008509", "008510", "008511", "008512", "008513", "008514", "008516", "008518", "008519", "008520", "008521", "008522", "008523", "008524", "008525", "008526", "008527", "008528", "008529", "008530", "008531", "008533", "008534", "008535", "008536", "008537", "008538", "008539", "008540", "008541", "008542", "008543", "008544", "008545", "008546", "008547", "008548", "008549", "008550", "008551", "008552", "008553", "008554", "008555", "008556", "008557", "008558", "008559", "008560", "008561", "008562", "008563", "008564", "008565", "008566", "008567", "008568", "008569", "008570", "008571", "008572", "008573", "008574", "008576", "008577", "008578", "008579", "008580", "008581", "008582", "008583", "008584", "008585", "008586", "008587", "008588", "008589", "008590", "008591", "008592", "008593", "008594", "008595", "008596", "008597", "008598", "008599", "008600", "008601", "008602", "008603", "008604", "008605", "008606", "008607", "008608", "008609", "008610", "008611", "008612", "008613", "008614", "008615", "008616", "008617", "008618", "008619", "008620", "008621", "008622", "008623", "008624", "008625", "008626", "008627", "008628", "008629", "008630", "008631", "008632", "008633", "008634", "008635", "008636", "008637", "008638", "008639", "008640", "008641", "008642", "008643", "008644", "008645", "008646", "008647", "008648", "008649", "008650", "008651", "008652", "008653", "008654", "008655", "008656", "008657", "008658", "008659", "008660", "008661", "008662", "008663", "008664", "009634", "009642", "009646", "009647", "009651", "009655", "009657", "009658", "009659", "009662", "009663", "009664", "009665", "009666", "009667", "009669", "009670", "009671", "009672", "009674", "009675", "009676", "009679", "009888", "009891", "009897", "009900", "009902", "009903", "009905", "009906", "009909", "009920", "009926", "009937", "009939", "009940", "009943", "009945", "009946", "009948", "009950", "009951", "009953", "009954", "009956", "009957", "009958", "009959", "009960", "009961", "009962", "009963", "009965", "009966", "009967", "009968", "009969", "009970", "009971", "009972", "009973", "009974", "009975", "009976", "009977", "009979", "009980", "009981", "009982", "009983", "009984", "009985", "009986", "009987", "009988", "009989", "009990", "009991", "009992", "009993", "009994", "009995", "009996", "009997", "009998", "009999", "010000", "010001", "010002", "010003", "010004", "010005", "010006", "010007", "010008", "010009", "012066", "012067", "012068", "012069", "012072", "012074", "012075", "012077", "012078", "012080", "012081", "012082", "012083", "012084", "012085", "012086", "012087", "012088", "012089", "012090", "012091", "012092", "012093", "012094", "012095", "012096", "012097", "012098", "012099", "012100", "012101", "012102", "012103", "012104", "012105", "012108", "012112", "012132", "012133", "012134", "012135", "012136", "012137", "012138", "012139", "012140", "012141", "012142", "012143", "012144", "012145", "012146", "012147", "012148", "012149", "012152", "012153", "012154", "012155", "012159", "012160", "012162", "012163", "012164", "012165", "012166", "012167", "012168", "012169", "012170", "012171", "012172", "012174", "012175", "012176", "012184", "012203", "012204", "012205", "012206", "012207", "012208", "012209", "012210", "012211", "012212", "012213", "012214", "012215", "012216", "012217", "012218", "012219", "012220", "012221", "012222", "012223", "012224", "012225", "012226", "012227", "012228", "012229", "012230", "012231", "012232", "012233", "012234", "012235", "012238", "012246", "012260", "012261", "012262", "012263", "012264", "012265", "012266", "012267", "012268", "012269", "012270", "012271", "012272", "012273", "012274", "012275", "012276", "012277", "012278", "012279", "012280", "012281", "012282", "012283", "012284", "012285", "012286", "012287", "012288", "012289", "012290", "012291", "012292", "012293", "012294", "012295", "012296", "012297", "012300", "012301", "012302", "012303", "012306", "012312", "012319", "012322", "012323", "012325", "012327", "012328", "012329", "012330", "012331", "012332", "012333", "012334", "012335", "012336", "012337", "012338", "012339", "012340", "012341", "012342", "012343", "012344", "012345", "012346", "012347", "012348", "012349", "012350", "012351", "012352", "012353", "012354", "012355", "012356", "012357", "012358", "012359", "012360", "012364", "012381", "012383", "012385", "012386", "012387", "012388", "012389", "012390", "012391", "012392", "012393", "012394", "012395", "012396", "012397", "012398", "012399", "012400", "012401", "012402", "012403", "012404", "012405", "012406", "012407", "012408", "012409", "012806", "012807", "012809", "012814", "012817", "012820", "012821", "012822", "012823", "012836", "012837", "012838", "012839", "012840", "012842", "012843", "012844", "012845", "012846", "012847", "012848", "012849", "012850", "012851", "012852", "012853", "012854", "012855", "012856", "012857", "012858", "012859", "012860", "012861", "012862", "012863", "012864", "012865", "012866", "012867", "012869", "012891", "012892", "012894", "012895", "012896", "012897", "012898", "012899", "012900", "012901", "012902", "012903", "012904", "012905", "012906", "012907", "012908", "012909", "012910", "012911", "012912", "012913", "012914", "012915", "012916", "012917", "012918", "012919", "012920", "012921", "012922", "012923", "012924", "012925", "012926", "012927", "012928", "012929", "012930", "012931", "012933", "012939", "013328", "013329", "013330", "013331", "013332", "013333", "013334", "013335", "013336", "013337", "013338", "013339", "013340", "013341", "013342", "013343", "013344", "013345", "013346", "013347", "013348", "013349", "013358", "013368", "013370", "013371", "013372", "013375", "013376", "013377", "013378", "013379", "013380", "013381", "013382", "013383", "013384", "013385", "013386", "013387", "013388", "013389", "013390", "013391", "013392", "013393", "013394", "013395", "013396", "013397", "013398", "013399", "013400", "013401", "013402", "013403", "013404", "013405", "013406", "013407", "013408", "013409", "013410", "013412", "013418", "013420", "013434", "013437", "013438", "013439", "013441", "013442", "013443", "013446", "013447", "013448", "013449", "013450", "013451", "013452", "013453", "013454", "013455", "013456", "013457", "013458", "013459", "013460", "013461", "013462", "013463", "013464", "013465", "013466", "013468", "013469", "013471", "013493", "013496", "013498", "013500", "013502", "013505", "013506", "013507", "014397", "014398", "014400", "014410", "014411", "014412", "014413", "014414", "014415", "014416", "014417", "014418", "014419", "014420", "014421", "014422", "014423", "014424", "014425", "014426", "014436", "014438", "014439", "014440", "014441", "014442", "014443", "014444", "014555", "014556", "014557", "014558", "014559", "014560", "014561", "014562", "014563", "014564", "014565", "014575", "014576", "014577", "014578", "014579", "014580", "014581", "014582", "014583", "014584", "014585", "014586", "014587", "014588", "014589", "014590", "014591", "014603", "014604", "014605", "014606", "014607", "014608", "014609", "014610", "014611", "014612", "014613", "014614", "014615", "014616", "014617", "014618", "014630", "014631", "014632", "014633", "014634", "014635", "014636", "014637", "014638", "014639", "014640", "014641", "014642", "014643", "014645", "014655", "014656", "014657", "014658", "014659", "014660", "014661", "014662", "014663", "014664", "015732", "015733", "015734", "015735", "015736", "015737", "015738", "015739", "015740", "015741", "015742", "015743", "015744", "015745", "015746", "015747", "015748", "015749", "015759", "015760", "015761", "015762", "015763", "015764", "015765", "015766", "015767", "015768", "015769", "015770", "015771", "015772", "015773", "015775", "015786", "015787", "015788", "015789", "015790", "015791", "015792", "015793", "015794", "015795", "015796", "015797", "015798", "015799", "015800", "015802", "019105", "019106", "019108", "019109", "019110", "019111", "019112", "019113", "019114", "019115", "019116", "019117", "019118", "019119", "019120", "019121", "019122", "019123", "019124", "019125", "019126", "019127", "019128", "019129", "019130", "019131", "019132", "019133", "019134", "019135", "019136", "019137", "019138", "019139", "019140", "019141", "019142", "019143", "019144", "019145", "019146", "019147", "019148", "019149", "019150", "019151", "019152", "019153", "019154", "019155", "019156", "019157", "019158", "019159", "019160", "019161", "019162", "019163", "019164", "019165", "019203", "019204", "019211", "019212", "019213", "019214", "019215", "019216", "019217", "019219", "019220", "019221", "019222", "019223", "019227", "019230", "019231", "019232", "019233", "019235", "019238", "019239", "019240", "019241", "019242", "019243", "019244", "019245", "019246", "019247", "019248", "019249", "019250", "019253", "019254", "019256", "019257", "019258", "019259", "019260", "019261", "019262", "019263", "019264", "019265", "019266", "019267", "019268", "019269", "019270", "019275", "019276", "019308", "019309", "019310", "019311", "019312", "019313", "019314", "019315", "019316", "019317", "019318", "019319", "019320", "019321", "019322", "019323", "019324", "019326", "019327", "019328", "019329", "019330", "019331", "019332", "019333", "019334", "019335", "019336", "019337", "019338", "019339", "019340", "019341", "019342", "019343", "019344", "019345", "019346", "019347", "019348", "019349", "019350", "019351", "019352", "019353", "019354", "019355", "019356", "019357", "019358", "019359", "019360", "019361", "019362", "019363", "019364", "019368", "019369", "019405", "019408", "019409", "019410", "019411", "019413", "019414", "019415", "019417", "019418", "019419", "019420", "019421", "019422", "019423", "019424", "019425", "019426", "019427", "019428", "019429", "019430", "019431", "019432", "019433", "019434", "019435", "019436", "019437", "019438", "019439", "019440", "019441", "019442", "019443", "019444", "019445", "019446", "019447", "019448", "019449", "019450", "019451", "019452", "019453", "019454", "019455", "019456", "019457", "019458", "019459", "019460", "019461", "019462", "019463", "019465"], "test_A": ["001482", "001484", "001485", "001486", "001487", "001500", "001501", "001502", "001506", "001512", "001513", "002075", "002076", "002078", "002079", "002080", "002081", "002082", "002083", "002084", "002085", "002086", "002087", "002088", "002089", "002090", "002091", "002092", "002093", "002094", "002095", "002096", "002097", "002098", "002113", "002125", "002131", "002132", "002135", "002137", "002139", "002140", "002141", "002143", "002144", "002145", "002146", "002147", "002148", "002149", "002150", "002151", "002152", "002153", "002154", "002155", "002156", "002157", "002158", "002159", "002160", "002161", "002165", "002166", "002167", "002168", "002169", "002170", "002171", "002173", "002176", "002177", "002178", "002180", "002183", "002195", "002199", "002204", "002206", "002209", "002210", "002211", "002212", "002213", "002214", "002215", "002217", "002218", "002219", "002220", "002221", "002222", "002223", "002224", "002225", "002226", "002227", "002228", "002229", "002230", "002231", "002232", "002233", "002882", "002883", "002884", "002885", "002886", "002887", "002888", "002889", "002890", "002891", "002892", "002893", "002894", "002895", "002896", "002897", "002898", "002899", "002900", "002901", "002902", "002903", "002904", "002905", "002906", "002907", "002908", "002909", "002910", "002911", "002912", "002913", "002914", "002915", "002916", "002917", "002918", "002919", "002920", "002921", "002922", "002923", "002924", "002925", "002926", "002927", "002928", "002929", "002930", "002931", "002932", "002933", "002956", "002973", "002977", "002978", "002980", "002981", "002982", "002983", "002984", "002985", "002986", "002987", "002988", "002989", "002990", "002991", "002992", "002993", "002994", "002995", "002996", "002997", "002998", "002999", "003000", "003001", "003002", "003003", "003004", "003005", "003006", "003007", "003008", "003009", "003010", "003011", "003012", "003013", "003014", "003015", "003016", "003017", "003018", "003019", "003020", "003021", "003022", "003023", "003024", "003025", "003026", "003027", "003028", "003029", "003030", "003031", "003033", "005075", "005076", "005077", "005078", "005079", "005080", "005081", "005082", "005083", "005084", "005085", "005086", "005087", "005088", "005089", "005090", "005091", "005092", "005093", "005094", "005095", "005096", "005097", "005098", "005099", "005100", "005101", "005102", "005103", "005104", "005105", "005106", "005107", "005108", "005109", "005112", "005152", "005153", "005154", "005155", "005156", "005157", "005158", "005160", "005161", "005162", "005163", "005164", "005165", "005166", "005167", "005168", "005169", "005170", "005171", "005172", "005173", "005174", "005175", "005176", "005177", "005178", "005179", "005180", "005181", "005182", "005183", "005184", "005185", "005186", "005187", "005188", "005189", "005190", "005191", "005192", "005193", "005194", "005195", "005196", "005197", "005198", "005199", "005200", "005201", "005202", "005203", "005204", "005205", "005206", "005207", "005208", "005209", "005210", "005211", "005212", "005213", "005214", "005215", "005216", "005217", "005234", "007008", "007009", "007010", "007011", "007012", "007013", "007014", "007015", "007016", "007017", "007018", "007019", "007032", "007034", "007035", "007036", "007037", "007038", "007039", "007040", "007042", "007043", "007044", "007045", "007046", "007047", "007048", "007049", "007050", "007051", "007054", "007056", "007057", "007058", "007059", "007060", "007061", "007062", "007063", "007064", "007065", "007066", "007067", "007068", "007069", "007070", "007071", "007072", "007073", "007074", "007075", "007076", "007077", "007078", "007079", "007080", "007081", "007082", "007083", "007084", "007085", "007086", "007087", "007088", "007089", "007090", "007091", "007092", "007093", "007094", "007095", "007096", "007097", "007098", "007099", "007100", "007101", "007102", "007103", "007104", "007105", "007106", "007107", "007108", "007109", "007110", "007111", "007112", "007113", "007114", "007115", "007116", "007117", "007118", "007119", "007120", "007121", "007122", "007123", "007124", "007125", "007126", "007128", "007129", "007130", "007131", "007132", "007133", "007134", "007135", "007136", "007137", "007138", "007139", "007140", "007141", "007142", "007143", "007144", "007145", "007146", "007147", "007148", "007149", "007150", "007151", "007152", "007153", "007154", "007155", "007156", "007157", "007158", "007159", "007160", "007161", "007162", "007163", "007164", "007165", "007166", "007167", "007168", "007169", "007170", "007171", "007172", "007173", "007174", "007175", "007176", "007177", "007178", "007179", "007180", "007181", "007182", "007183", "007184", "007185", "007186", "007187", "007188", "007189", "007190", "007191", "007192", "007193", "007194", "008156", "008157", "008158", "008159", "008160", "008161", "008162", "008163", "008164", "008165", "008166", "008167", "008168", "008169", "008170", "008171", "008172", "008173", "008174", "008175", "008176", "008177", "008178", "008179", "008180", "008181", "008182", "008183", "008184", "008185", "008186", "008187", "008188", "008189", "008190", "008191", "008192", "008193", "008194", "008195", "008196", "008197", "008198", "008199", "008200", "008201", "008202", "008203", "008204", "008205", "008206", "008207", "008208", "008209", "008210", "008211", "008212", "008213", "008214", "008215", "008216", "008217", "008218", "008219", "008220", "008221", "008222", "008223", "008224", "008225", "008226", "008227", "008228", "008229", "008230", "008231", "008232", "008233", "008234", "008235", "008236", "008237", "008238", "008239", "008240", "008241", "008242", "008243", "008244", "008245", "008246", "008247", "008248", "008249", "008250", "008251", "008252", "008253", "008254", "008255", "008256", "008257", "008258", "008259", "008260", "008261", "008262", "008263", "008264", "008265", "008266", "008267", "008268", "008269", "008270", "008271", "008272", "008273", "008274", "012806", "012807", "012809", "012814", "012817", "012820", "012821", "012822", "012823", "012836", "012837", "012838", "012839", "012840", "012842", "012843", "012844", "012845", "012846", "012847", "012848", "012849", "012850", "012851", "012852", "012853", "012854", "012855", "012856", "012857", "012858", "012859", "012860", "012861", "012862", "012863", "012864", "012865", "012866", "012867", "012869", "012891", "012892", "012894", "012895", "012896", "012897", "012898", "012899", "012900", "012901", "012902", "012903", "012904", "012905", "012906", "012907", "012908", "012909", "012910", "012911", "012912", "012913", "012914", "012915", "012916", "012917", "012918", "012919", "012920", "012921", "012922", "012923", "012924", "012925", "012926", "012927", "012928", "012929", "012930", "012931", "012933", "012939", "014555", "014556", "014557", "014558", "014559", "014560", "014561", "014562", "014563", "014564", "014565", "014575", "014576", "014577", "014578", "014579", "014580", "014581", "014582", "014583", "014584", "014585", "014586", "014587", "014588", "014589", "014590", "014591", "014603", "014604", "014605", "014606", "014607", "014608", "014609", "014610", "014611", "014612", "014613", "014614", "014615", "014616", "014617", "014618", "014630", "014631", "014632", "014633", "014634", "014635", "014636", "014637", "014638", "014639", "014640", "014641", "014642", "014643", "014645", "014655", "014656", "014657", "014658", "014659", "014660", "014661", "014662", "014663", "014664", "019326", "019327", "019328", "019329", "019330", "019331", "019332", "019333", "019334", "019335", "019336", "019337", "019338", "019339", "019340", "019341", "019342", "019343", "019344", "019345", "019346", "019347", "019348", "019349", "019350", "019351", "019352", "019353", "019354", "019355", "019356", "019357", "019358", "019359", "019360", "019361", "019362", "019363", "019364", "019368", "019369", "019405", "019408", "019409", "019410", "019411", "019413", "019414", "019415", "019417", "019418", "019419", "019420", "019421", "019422", "019423", "019424", "019425", "019426", "019427", "019428", "019429", "019430", "019431", "019432", "019433", "019434", "019435", "019436", "019437", "019438", "019439", "019440", "019441", "019442", "019443", "019444", "019445", "019446", "019447", "019448", "019449", "019450", "019451", "019452", "019453", "019454", "019455", "019456", "019457", "019458", "019459", "019460", "019461", "019462", "019463", "019465"]}}

{"batch_split": {"train": ["0000", "0001", "0002", "0004", "0005", "0008", "0010", "0016", "0018", "0022", "0023", "0025", "0029", "0030", "0032", "0033", "0034", "0035", "0036", "0037", "0040", "0041", "0047", "0048", "0049", "0050", "0054", "0055", "0056", "0057", "0060", "0062", "0066", "0068", "0070", "0072", "0077", "0078", "0079", "0080", "0081", "0082", "0084", "0087", "0093", "0094"], "val": ["0003", "0007", "0014", "0015", "0017", "0020", "0021", "0042", "0052", "0058", "0059", "0061", "0063", "0071", "0073", "0075", "0085", "0086", "0088", "0089", "0092"], "test": ["0006", "0009", "0011", "0012", "0013", "0019", "0024", "0026", "0027", "0028", "0031", "0038", "0039", "0043", "0044", "0045", "0046", "0051", "0053", "0064", "0065", "0067", "0069", "0074", "0076", "0083", "0090", "0091"], "test_A": ["0009", "0013", "0026", "0038", "0044", "0067", "0076", "0091"]}, "vehicle_split": {"train": ["000000", "000001", "000002", "000003", "000004", "000005", "000006", "000007", "000008", "000009", "000010", "000011", "000012", "000013", "000014", "000015", "000016", "000017", "000018", "000019", "000020", "000021", "000022", "000023", "000024", "000025", "000026", "000027", "000028", "000029", "000030", "000031", "000032", "000033", "000034", "000035", "000036", "000037", "000038", "000039", "000040", "000041", "000042", "000043", "000044", "000045", "000046", "000047", "000048", "000049", "000050", "000051", "000052", "000053", "000054", "000055", "000056", "000057", "000058", "000059", "000060", "000061", "000062", "000063", "000064", "000065", "000066", "000067", "000068", "000069", "000070", "000071", "000072", "000073", "000074", "000075", "000076", "000077", "000078", "000079", "000080", "000081", "000082", "000083", "000084", "000085", "000086", "000087", "000088", "000089", "000090", "000091", "000092", "000093", "000094", "000095", "000096", "000097", "000098", "000099", "000100", "000101", "000102", "000103", "000104", "000105", "000106", "000107", "000108", "000109", "000110", "000111", "000112", "000113", "000114", "000115", "000116", "000117", "000118", "000119", "000120", "000121", "000122", "000123", "000124", "000125", "000126", "000127", "000128", "000129", "000130", "000131", "000132", "000133", "000134", "000135", "000136", "000137", "000138", "000139", "000140", "000141", "000142", "000143", "000144", "000145", "000146", "000147", "000148", "000149", "000150", "000151", "000152", "000153", "000154", "000155", "000156", "000157", "000158", "000159", "000160", "000161", "000162", "000163", "000164", "000165", "000166", "000167", "000168", "000169", "000170", "000171", "000172", "000173", "000174", "000175", "000176", "000177", "000178", "000179", "000180", "000181", "000182", "000183", "000184", "000185", "000186", "000187", "000188", "000189", "000190", "000191", "000192", "000193", "000194", "000195", "000196", "000197", "000198", "000199", "000200", "000201", "000202", "000203", "000204", "000205", "000206", "000207", "000208", "000209", "000210", "000211", "000212", "000213", "000214", "000215", "000216", "000217", "000218", "000219", "000220", "000221", "000222", "000223", "000224", "000225", "000226", "000227", "000228", "000229", "000230", "000231", "000232", "000233", "000234", "000235", "000236", "000237", "000238", "000239", "000240", "000241", "000242", "000243", "000244", "000245", "000246", "000247", "000248", "000249", "000250", "000251", "000252", "000253", "000254", "000255", "000256", "000257", "000258", "000259", "000260", "000261", "000262", "000263", "000264", "000265", "000266", "000267", "000268", "000269", "000270", "000271", "000272", "000273", "000274", "000275", "000276", "000277", "000278", "000279", "000280", "000281", "000282", "000283", "000284", "000285", "000286", "000287", "000288", "000289", "000290", "000291", "000292", "000293", "000294", "000295", "000296", "000297", "000298", "000299", "000300", "000301", "000302", "000303", "000304", "000305", "000306", "000307", "000308", "000309", "000310", "000311", "000312", "000313", "000314", "000315", "000316", "000317", "000318", "000319", "000320", "000321", "000322", "000323", "000324", "000325", "000326", "000327", "000328", "000329", "000330", "000331", "000332", "000333", "000334", "000335", "000336", "000337", "000338", "000339", "000340", "000341", "000342", "000343", "000344", "000345", "000346", "000347", "000348", "000349", "000350", "000351", "000352", "000353", "000354", "000355", "000356", "000357", "000358", "000359", "000360", "000361", "000362", "000363", "000364", "000365", "000366", "000367", "000368", "000369", "000370", "000371", "000372", "000373", "000374", "000375", "000376", "000377", "000378", "000379", "000380", "000381", "000382", "000383", "000384", "000385", "000386", "000387", "000388", "000389", "000390", "000391", "000392", "000393", "000394", "000395", "000396", "000397", "000398", "000399", "000400", "000401", "000402", "000403", "000404", "000405", "000406", "000407", "000408", "000409", "000410", "000411", "000412", "000413", "000414", "000415", "000416", "000417", "000418", "000419", "000420", "000421", "000422", "000423", "000424", "000425", "000426", "000427", "000428", "000429", "000430", "000431", "000432", "000433", "000434", "000435", "000436", "000437", "000438", "000439", "000440", "000441", "000442", "000443", "000444", "000445", "000446", "000447", "000448", "000449", "000450", "000451", "000452", "000453", "000454", "000455", "000456", "000457", "000458", "000459", "000460", "000461", "000462", "000463", "000464", "000465", "000466", "000467", "000468", "000469", "000470", "000471", "000472", "000473", "000474", "000475", "000476", "000477", "000478", "000479", "000480", "000481", "000482", "000483", "000484", "000485", "000486", "000487", "000488", "000489", "000490", "000491", "000492", "000493", "000494", "000495", "000496", "000497", "000498", "000499", "000500", "000501", "000502", "000503", "000504", "000505", "000506", "000507", "000508", "000509", "000510", "000511", "000512", "000513", "000514", "000515", "000516", "000517", "000518", "000519", "000520", "000521", "000522", "000523", "000524", "000525", "000526", "000527", "000528", "000529", "000530", "000531", "000532", "000533", "000534", "000535", "000536", "000537", "000538", "000539", "000540", "000541", "000542", "000543", "000544", "000545", "000546", "000547", "000548", "000549", "000550", "000551", "000552", "000553", "000554", "000555", "000556", "000557", "000558", "000559", "000560", "000561", "000562", "000563", "000564", "000565", "000566", "000567", "000568", "000569", "000570", "000571", "000572", "000573", "000574", "000575", "000576", "000577", "000578", "000579", "000580", "000581", "000582", "000583", "000584", "000585", "000586", "000587", "000588", "000589", "000590", "000591", "000592", "000593", "000594", "000595", "000596", "000597", "000598", "000599", "000600", "000601", "000602", "000603", "000604", "000605", "000606", "000607", "000608", "000609", "000610", "000611", "000612", "000613", "000614", "000615", "000616", "000617", "000618", "000619", "000620", "000621", "000622", "000623", "000624", "000625", "000626", "000627", "000628", "000629", "000630", "000631", "000632", "000633", "000634", "000635", "000636", "000637", "000638", "000639", "000640", "000641", "000642", "000643", "000644", "000645", "000646", "000647", "000648", "000649", "000650", "000651", "000652", "000653", "000654", "000655", "000656", "000657", "000658", "000659", "000660", "000661", "000662", "000663", "000664", "000665", "000666", "000667", "000668", "000669", "000670", "000671", "000672", "000673", "000674", "000675", "000676", "000677", "000678", "000679", "000680", "000681", "000682", "000683", "000684", "000685", "000686", "000687", "000688", "000689", "000690", "000691", "000692", "000693", "000694", "000695", "000696", "000697", "000698", "000699", "000700", "000701", "000702", "000703", "000704", "000705", "000706", "000707", "000708", "000709", "000710", "000711", "000712", "000713", "000714", "000715", "000716", "000717", "000718", "000719", "000720", "000721", "000722", "000723", "000724", "000725", "000726", "000727", "000728", "000729", "000730", "000731", "000732", "000733", "000734", "000735", "000736", "000737", "000738", "000739", "000740", "000741", "000742", "000743", "000744", "000745", "000746", "000747", "000748", "000749", "000750", "000751", "000752", "000753", "000754", "000755", "000756", "000757", "000758", "000759", "000760", "000761", "000762", "000763", "000764", "000765", "000766", "000767", "000768", "000769", "000770", "000771", "000772", "000773", "000774", "000775", "000776", "000777", "000778", "000779", "000780", "000781", "000782", "000783", "000784", "000785", "000786", "000787", "000788", "000789", "000790", "000791", "000792", "000793", "000794", "000795", "000796", "000797", "000798", "000799", "000800", "000801", "000802", "000803", "000804", "000805", "000806", "000807", "000808", "000809", "000810", "000811", "000812", "000813", "000814", "000815", "000816", "000817", "000818", "000819", "000820", "000821", "000822", "000823", "000824", "000825", "000826", "000827", "000828", "000829", "000830", "000831", "000832", "000833", "000834", "000835", "000836", "000837", "000838", "000839", "000840", "000841", "000842", "000843", "000844", "000845", "000846", "000847", "000848", "000849", "000850", "000851", "000852", "000853", "000854", "000855", "000856", "000857", "000858", "000859", "000860", "000861", "000862", "000863", "000864", "000865", "000866", "000867", "000868", "001078", "001079", "001080", "001081", "001082", "001083", "001084", "001085", "001086", "001087", "001088", "001089", "001090", "001091", "001092", "001093", "001094", "001095", "001096", "001097", "001098", "001099", "001100", "001101", "001102", "001103", "001104", "001105", "001106", "001107", "001108", "001109", "001110", "001111", "001112", "001113", "001114", "001115", "001116", "001117", "001118", "001119", "001120", "001121", "001122", "001123", "001124", "001125", "001126", "001127", "001128", "001129", "001130", "001131", "001132", "001133", "001134", "001135", "001136", "001137", "001138", "001139", "001140", "001141", "001142", "001143", "001144", "001145", "001146", "001147", "001148", "001149", "001150", "001151", "001152", "001153", "001154", "001155", "001156", "001157", "001158", "001159", "001160", "001161", "001162", "001163", "001164", "001165", "001166", "001167", "001168", "001169", "001170", "001171", "001172", "001173", "001174", "001175", "001176", "001177", "001178", "001179", "001180", "001181", "001182", "001183", "001184", "001185", "001186", "001187", "001188", "001189", "001190", "001191", "001192", "001193", "001194", "001195", "001196", "001197", "001198", "001199", "001200", "001201", "001202", "001203", "001204", "001205", "001206", "001207", "001208", "001209", "001210", "001211", "001212", "001213", "001214", "001215", "001216", "001217", "001218", "001219", "001220", "001221", "001222", "001223", "001224", "001225", "001226", "001227", "001228", "001229", "001230", "001231", "001232", "001233", "001234", "001235", "001236", "001237", "001238", "001239", "001240", "001241", "001242", "001243", "001244", "001245", "001246", "001247", "001248", "001249", "001250", "001251", "001252", "001253", "001254", "001255", "001256", "001257", "001258", "001259", "001260", "001261", "001262", "001263", "001264", "001265", "001266", "001267", "001268", "001269", "001270", "001271", "001272", "001273", "001274", "001275", "001276", "001277", "001278", "001279", "001280", "001281", "001282", "001283", "001284", "001285", "001286", "001287", "001288", "001289", "001290", "001291", "001292", "001293", "001294", "001295", "001296", "001297", "001298", "001299", "001300", "001301", "001302", "001303", "001304", "001305", "001306", "001307", "001308", "001309", "001310", "001311", "001312", "001313", "001314", "001315", "001316", "001317", "001318", "001319", "001320", "001321", "001322", "001323", "001324", "001325", "001326", "001327", "001328", "001329", "001330", "001331", "001332", "001333", "001334", "001335", "001336", "001337", "001338", "001339", "001340", "001341", "001342", "001343", "001344", "001345", "001346", "001347", "001348", "001349", "001350", "001351", "001352", "001353", "001354", "001355", "001356", "001357", "001358", "001359", "001360", "001361", "001362", "001363", "001364", "001365", "001366", "001367", "001368", "001369", "001370", "001371", "001372", "001373", "001374", "001375", "001376", "001377", "001378", "001379", "001380", "001381", "001382", "001383", "001384", "001385", "001386", "001387", "001388", "001389", "001390", "001391", "001392", "001393", "001394", "001395", "001396", "001397", "001398", "001399", "001400", "001401", "001402", "001403", "001404", "001405", "001406", "001407", "001408", "001409", "001410", "001411", "001412", "001413", "001414", "001415", "001416", "001417", "001418", "001419", "001420", "001421", "001422", "001423", "001424", "001425", "001426", "001427", "001428", "001429", "001430", "001431", "001432", "001433", "001434", "001435", "001436", "001437", "001438", "001439", "001440", "001441", "001442", "001443", "001444", "001445", "001446", "001447", "001448", "001449", "001450", "001451", "001452", "001453", "001454", "001455", "001456", "001457", "001458", "001459", "001460", "001461", "001462", "001463", "001464", "001465", "001466", "001467", "001468", "001469", "001470", "001471", "001472", "001473", "001474", "001475", "001476", "001477", "001478", "001479", "001480", "001481", "001482", "001483", "001484", "001485", "001486", "001487", "001488", "001489", "001490", "001491", "001492", "001493", "001494", "001495", "001496", "001497", "001498", "001499", "001500", "001501", "001502", "001503", "001504", "001505", "001506", "001507", "001508", "001509", "001510", "001511", "001512", "001513", "001514", "001515", "001865", "001866", "001867", "001868", "001869", "001870", "001871", "001872", "001873", "001874", "001875", "001876", "001877", "001878", "001879", "001880", "001881", "001882", "001883", "001884", "001885", "001886", "001887", "001888", "001889", "001890", "001891", "001892", "001893", "001894", "001895", "001896", "001897", "001898", "001899", "001900", "001901", "001902", "001903", "001904", "001905", "001906", "001907", "001908", "001909", "001910", "001911", "001912", "001913", "001914", "001915", "001916", "001917", "001918", "001919", "001920", "001921", "001922", "001923", "001924", "001925", "001926", "001927", "001928", "001929", "001930", "001931", "001932", "001933", "001934", "001935", "001936", "001937", "001938", "001939", "001940", "001941", "001942", "001943", "001944", "001945", "001946", "001947", "001948", "001949", "001950", "001951", "001952", "001953", "001954", "001955", "001956", "001957", "001958", "001959", "001960", "001961", "001962", "001963", "001964", "001965", "001966", "001967", "001968", "001969", "001970", "001971", "001972", "001973", "001974", "001975", "001976", "001977", "001978", "001979", "001980", "001981", "001982", "001983", "001984", "001985", "001986", "001987", "001988", "001989", "001990", "001991", "001992", "001993", "001994", "001995", "001996", "001997", "001998", "001999", "002000", "002001", "002002", "002003", "002004", "002005", "002006", "002007", "002008", "002009", "002010", "002011", "002012", "002013", "002014", "002015", "002016", "002017", "002018", "002019", "002020", "002021", "002022", "002023", "002024", "002025", "002026", "002027", "002028", "002029", "002030", "002031", "002032", "002033", "002034", "002035", "002036", "002037", "002038", "002039", "002040", "002041", "002042", "002043", "002044", "002045", "002046", "002047", "002048", "002049", "002050", "002051", "002052", "002053", "002054", "002055", "002056", "002057", "002058", "002059", "002060", "002061", "002062", "002063", "002064", "002244", "002245", "002246", "002247", "002248", "002249", "002250", "002251", "002252", "002253", "002254", "002255", "002256", "002257", "002258", "002259", "002260", "002261", "002262", "002263", "002264", "002265", "002266", "002267", "002268", "002269", "002270", "002271", "002272", "002273", "002274", "002275", "002276", "002277", "002278", "002279", "002280", "002281", "002282", "002283", "002284", "002285", "002286", "002287", "002288", "002289", "002290", "002291", "002292", "002293", "002294", "002295", "002296", "002297", "002298", "002299", "002300", "002301", "002302", "002303", "002304", "002305", "002306", "002307", "002308", "002309", "002310", "002311", "002312", "002313", "002314", "002315", "002316", "002317", "002318", "002319", "002320", "002321", "002322", "002323", "002324", "002325", "002326", "002327", "002328", "002329", "002330", "002331", "002332", "002333", "002334", "002335", "002336", "002337", "002338", "002339", "002340", "002341", "002342", "002343", "002344", "002345", "002346", "002347", "002348", "002349", "002350", "002351", "002352", "002353", "002354", "002355", "002356", "002357", "002358", "002359", "002360", "002361", "002362", "002363", "002364", "002365", "002366", "002367", "002368", "002369", "002370", "002371", "002372", "002373", "002374", "002375", "002376", "002377", "002378", "002379", "002380", "002381", "002382", "003211", "003212", "003213", "003214", "003215", "003216", "003217", "003218", "003219", "003220", "003221", "003222", "003223", "003224", "003225", "003226", "003227", "003228", "003229", "003230", "003231", "003232", "003233", "003234", "003235", "003236", "003237", "003238", "003239", "003240", "003241", "003242", "003243", "003244", "003245", "003246", "003247", "003248", "003249", "003250", "003251", "003252", "003253", "003254", "003255", "003256", "003257", "003258", "003259", "003260", "003261", "003262", "003263", "003264", "003265", "003266", "003267", "003268", "003269", "003270", "003271", "003272", "003273", "003274", "003275", "003276", "003277", "003278", "003279", "003280", "003281", "003282", "003283", "003284", "003285", "003286", "003287", "003288", "003289", "003290", "003291", "003292", "003293", "003294", "003295", "003296", "003297", "003298", "003299", "003300", "003301", "003302", "003303", "003304", "003305", "003306", "003307", "003308", "003309", "003310", "003311", "003312", "003313", "003314", "003315", "003316", "003317", "003318", "003319", "003320", "003321", "003322", "003323", "003324", "003325", "003326", "003327", "003328", "003329", "003330", "003331", "003332", "003333", "003334", "003335", "003336", "003337", "003338", "003339", "003340", "003341", "003342", "003343", "003344", "003345", "003346", "003347", "003348", "003349", "003350", "003351", "003352", "003353", "003354", "003355", "003356", "003357", "003358", "003359", "003360", "003361", "003362", "003363", "003364", "003365", "003366", "003367", "003368", "003369", "003370", "003491", "003492", "003493", "003494", "003495", "003496", "003497", "003498", "003499", "003500", "003501", "003502", "003503", "003504", "003505", "003506", "003507", "003508", "003509", "003510", "003511", "003512", "003513", "003514", "003515", "003516", "003517", "003518", "003519", "003520", "003521", "003522", "003523", "003524", "003525", "003526", "003527", "003528", "003529", "003530", "003531", "003532", "003533", "003534", "003535", "003536", "003537", "003538", "003539", "003540", "003541", "003542", "003543", "003544", "003545", "003546", "003547", "003548", "003549", "003550", "003551", "003552", "003553", "003554", "003555", "003556", "003557", "003558", "003559", "003560", "003561", "003562", "003563", "003564", "003565", "003566", "003567", "003568", "003569", "003570", "003571", "003572", "003573", "003574", "003575", "003576", "003577", "003578", "003579", "003580", "003581", "003582", "003583", "003584", "003585", "003586", "003587", "003588", "003589", "003590", "003591", "003592", "003593", "003594", "003595", "003596", "003597", "003598", "003599", "003600", "003601", "003602", "003603", "003604", "003605", "003606", "003607", "003608", "003609", "003610", "003611", "003612", "003613", "003614", "003615", "003616", "003617", "003618", "003619", "003620", "003621", "003622", "003623", "003624", "003625", "003626", "003627", "003628", "003629", "003630", "003631", "003632", "003633", "003634", "003635", "003636", "003637", "003638", "003639", "003640", "004261", "004262", "004263", "004264", "004265", "004266", "004267", "004268", "004269", "004270", "004271", "004272", "004273", "004274", "004275", "004276", "004277", "004278", "004279", "004280", "004281", "004282", "004283", "004284", "004285", "004286", "004287", "004288", "004289", "004290", "004291", "004292", "004293", "004294", "004295", "004296", "004297", "004298", "004299", "004300", "004301", "004302", "004303", "004304", "004305", "004306", "004307", "004308", "004309", "004310", "004311", "004312", "004313", "004314", "004315", "004316", "004317", "004318", "004319", "004320", "004321", "004322", "004323", "004324", "004325", "004326", "004327", "004328", "004329", "004330", "004331", "004332", "004333", "004334", "004335", "004336", "004337", "004338", "004339", "004340", "004341", "004342", "004343", "004344", "004345", "004346", "004347", "004348", "004349", "004350", "004351", "004352", "004353", "004354", "004355", "004356", "004357", "004358", "004359", "004360", "004361", "004362", "004363", "004364", "004365", "004366", "004367", "004368", "004369", "004370", "004371", "004372", "004373", "004374", "004375", "004376", "004377", "004378", "004379", "004380", "004381", "004382", "004383", "004384", "004385", "004386", "004387", "004388", "004389", "004390", "004391", "004392", "004393", "004394", "004395", "004396", "004397", "004398", "004399", "004400", "004401", "004402", "004403", "004404", "004405", "004406", "004407", "004408", "004409", "004410", "004411", "004412", "004413", "004414", "004415", "004416", "004417", "004418", "004419", "004420", "004421", "004422", "004423", "004424", "004425", "004426", "004427", "004428", "004429", "004430", "004431", "004432", "004433", "004434", "004435", "004436", "004437", "004438", "004439", "004440", "004441", "004442", "004443", "004444", "004445", "004446", "004447", "004448", "004449", "004450", "004451", "004452", "004453", "004454", "004455", "004456", "004457", "004458", "004459", "004460", "004461", "004462", "004463", "004464", "004465", "004466", "004467", "004468", "004469", "004470", "004471", "004472", "004473", "004474", "004475", "004476", "004477", "004478", "004479", "004480", "004481", "004482", "004483", "004484", "004485", "004486", "004487", "004488", "004489", "004490", "004491", "004492", "004493", "004494", "004495", "004496", "004497", "004498", "004499", "004500", "004501", "004502", "004503", "004504", "004505", "004506", "004507", "004508", "004509", "004510", "004511", "004512", "004513", "004514", "004515", "004516", "004517", "004518", "004519", "004520", "004521", "004522", "004523", "004524", "004525", "004526", "004527", "004528", "004529", "004530", "004531", "004532", "004533", "004534", "004535", "004536", "004537", "004538", "004539", "004540", "004541", "004542", "004543", "004544", "004545", "004546", "004547", "004548", "004549", "004550", "004551", "004552", "004553", "004694", "004695", "004696", "004697", "004698", "004699", "004700", "004701", "004702", "004703", "004704", "004705", "004706", "004707", "004708", "004709", "004710", "004711", "004712", "004713", "004714", "004715", "004716", "004717", "004718", "004719", "004720", "004721", "004722", "004723", "004724", "004725", "004726", "004727", "004728", "004729", "004730", "004731", "004732", "004733", "004734", "004735", "004736", "004737", "004738", "004739", "004740", "004741", "004742", "004743", "004744", "004745", "004746", "004747", "004748", "004749", "004750", "004751", "004752", "004753", "004754", "004755", "004756", "004757", "004758", "004759", "004760", "004761", "004762", "004763", "004764", "004765", "004766", "004767", "004768", "004769", "004770", "004771", "004772", "004773", "004774", "004775", "004776", "004777", "004778", "004779", "004780", "004781", "004782", "004783", "004784", "004785", "004786", "004787", "004788", "004789", "004790", "004791", "004792", "004793", "004794", "004795", "004796", "004797", "004798", "004799", "004800", "004801", "004802", "004803", "004804", "004805", "004806", "004807", "004808", "004809", "004810", "004811", "004812", "004813", "004814", "004815", "004816", "004817", "004818", "004819", "004820", "004821", "004822", "004823", "004824", "004825", "004826", "004827", "004828", "004829", "004830", "004831", "004832", "004833", "004834", "004835", "004836", "004837", "004838", "004839", "004840", "004841", "004842", "004843", "004844", "004845", "004846", "004847", "004848", "004849", "004850", "004851", "004852", "004853", "004854", "004855", "004856", "004857", "004858", "004859", "004860", "004861", "004862", "004863", "004864", "004865", "004866", "004867", "004868", "004869", "004870", "004871", "004872", "004873", "004874", "004875", "004876", "004877", "004878", "004879", "004880", "004881", "004882", "004883", "004884", "005414", "005415", "005416", "005417", "005418", "005419", "005420", "005421", "005422", "005423", "005424", "005425", "005426", "005427", "005428", "005429", "005430", "005431", "005432", "005433", "005434", "005435", "005436", "005437", "005438", "005439", "005440", "005441", "005442", "005443", "005444", "005445", "005446", "005447", "005448", "005449", "005450", "005451", "005452", "005453", "005454", "005455", "005456", "005457", "005458", "005459", "005460", "005461", "005462", "005463", "005464", "005465", "005466", "005467", "005468", "005469", "005470", "005471", "005472", "005473", "005474", "005475", "005476", "005477", "005478", "005479", "005480", "005481", "005482", "005483", "005484", "005485", "005486", "005487", "005488", "005489", "005490", "005491", "005492", "005493", "005494", "005495", "005496", "005497", "005498", "005499", "005500", "005501", "005502", "005503", "005504", "005505", "005506", "005507", "005508", "005509", "005510", "005511", "005512", "005513", "005514", "005515", "005516", "005517", "005518", "005519", "005520", "005521", "005522", "005523", "005524", "005525", "005526", "005527", "005528", "005529", "005530", "005531", "005532", "005533", "005534", "005535", "005536", "005537", "005538", "005539", "005540", "005541", "005542", "005543", "005544", "005545", "005546", "005547", "005548", "005549", "005550", "005551", "005552", "005553", "005554", "005555", "005556", "005557", "005558", "005559", "005560", "005561", "005562", "005563", "005564", "005565", "005566", "005567", "005568", "005569", "005570", "005571", "005572", "005573", "005574", "005575", "005576", "005577", "005578", "005579", "005580", "005581", "005582", "005583", "005584", "005585", "005586", "005587", "005588", "005589", "005590", "005591", "005592", "005593", "005594", "005595", "005596", "005597", "005598", "005599", "005600", "005601", "005602", "005603", "005604", "005605", "005606", "005607", "005608", "005609", "005610", "005611", "005612", "005613", "005614", "005615", "005616", "005617", "005618", "005619", "005620", "005621", "005622", "005623", "005624", "005625", "005626", "005627", "005628", "005629", "005630", "005631", "005632", "005633", "005634", "005635", "005636", "005637", "005638", "005639", "005640", "005641", "005642", "005643", "005644", "005645", "005646", "005647", "005648", "005649", "005650", "005651", "005652", "005653", "005654", "005655", "005656", "005657", "005658", "005659", "005660", "005661", "005662", "005663", "005664", "005665", "005666", "005667", "005668", "005669", "005670", "005671", "005672", "005673", "005674", "005675", "005676", "005677", "005678", "005679", "005680", "005681", "005682", "005683", "005684", "005685", "005686", "005687", "005688", "005689", "005690", "005691", "005692", "005693", "005694", "005695", "005696", "005697", "005698", "005699", "005700", "005701", "005702", "005703", "005704", "005705", "005706", "005707", "005708", "005709", "005710", "005711", "005712", "005713", "005714", "005715", "005716", "005717", "005718", "005719", "005720", "005721", "005722", "005723", "005724", "005725", "005726", "005727", "005728", "005729", "005730", "005731", "005732", "005733", "005734", "005735", "005736", "005737", "005738", "005739", "005740", "005741", "005742", "005743", "005917", "005918", "005919", "005920", "005921", "005922", "005923", "005924", "005925", "005926", "005927", "005928", "005929", "005930", "005931", "005932", "005933", "005934", "005935", "005936", "005937", "005938", "005939", "005940", "005941", "005942", "005943", "005944", "005945", "005946", "005947", "005948", "005949", "005950", "005951", "005952", "005953", "005954", "005955", "005956", "005957", "005958", "005959", "005960", "005961", "005962", "005963", "005964", "005965", "005966", "005967", "005968", "005969", "005970", "005971", "005972", "005973", "005974", "005975", "005976", "005977", "005978", "005979", "005980", "005981", "005982", "005983", "005984", "005985", "005986", "005987", "005988", "005989", "005990", "005991", "005992", "005993", "005994", "005995", "005996", "005997", "005998", "005999", "006000", "006001", "006002", "006003", "006004", "006005", "006006", "006007", "006008", "006009", "006010", "006011", "006012", "006013", "006014", "006015", "006016", "006017", "006018", "006019", "006020", "006021", "006022", "006023", "006024", "006025", "006026", "006027", "006028", "006029", "006030", "006031", "006032", "006033", "006034", "006035", "006036", "006037", "006038", "006039", "006040", "006041", "006042", "006043", "006044", "006045", "006046", "006047", "006048", "006049", "006050", "006051", "006052", "006053", "006054", "006055", "006056", "006057", "006058", "006059", "006060", "006061", "006062", "006063", "006064", "006065", "006066", "006067", "006068", "006069", "006070", "006071", "006072", "006073", "006074", "006075", "006076", "006077", "006078", "006079", "006080", "006081", "006082", "006083", "006084", "006085", "006086", "006087", "006088", "006089", "006090", "006091", "006092", "006093", "006094", "006095", "006096", "006097", "006098", "006099", "006100", "006101", "006102", "006103", "006104", "006105", "006106", "006107", "006108", "006109", "006110", "006111", "006112", "006113", "006114", "006115", "006116", "006117", "006118", "006119", "006120", "006121", "006122", "006123", "006124", "006125", "006126", "006127", "006128", "006129", "006130", "006131", "006132", "006133", "006134", "006135", "006136", "006137", "006138", "006139", "006140", "006141", "006142", "006143", "006144", "006145", "006146", "006147", "006148", "006149", "006150", "006151", "006152", "006153", "006154", "006155", "006156", "006157", "006158", "006159", "006160", "006161", "006162", "006163", "006164", "006165", "006166", "006167", "006168", "006169", "006170", "006171", "006172", "006173", "006174", "006175", "006176", "006177", "006178", "006179", "006180", "006181", "006182", "006183", "006184", "006185", "006186", "006187", "006188", "006189", "006190", "006191", "006192", "006193", "006194", "006195", "006196", "006197", "006198", "006199", "006200", "006201", "006202", "006203", "006204", "006205", "006206", "006207", "006208", "006209", "006210", "006211", "006212", "006213", "006214", "006215", "006216", "006217", "006218", "006219", "006220", "006221", "006222", "006223", "006224", "006225", "006226", "006227", "006228", "006229", "006230", "006231", "006232", "006233", "006234", "006235", "006236", "006237", "006238", "006239", "006240", "006241", "006242", "006243", "006244", "006245", "006246", "006247", "006248", "006249", "006250", "006251", "006252", "006253", "006254", "006255", "006256", "006257", "006258", "006259", "006260", "006261", "006262", "006263", "006264", "006265", "006266", "006267", "006268", "006269", "006270", "006271", "006272", "006273", "006274", "006275", "006276", "006277", "006278", "006279", "006280", "006281", "006282", "006283", "006284", "006285", "006286", "006287", "006288", "006289", "006290", "006291", "006292", "006293", "006294", "006295", "006296", "006297", "006298", "006299", "006300", "006301", "006302", "006303", "006304", "006305", "006306", "006307", "006308", "006309", "006310", "006311", "006312", "006313", "006314", "006315", "006316", "006317", "006318", "006319", "006320", "006321", "006322", "006323", "006324", "006325", "006326", "006327", "006328", "006329", "006330", "006331", "006332", "006333", "006334", "006335", "006336", "006337", "006338", "006339", "006340", "006341", "006342", "006343", "006344", "006345", "006346", "006347", "006348", "006349", "006350", "006351", "006352", "006353", "006354", "006355", "006356", "006357", "006358", "006359", "006360", "006361", "006362", "006363", "006364", "006365", "006366", "006367", "006368", "006369", "006370", "006371", "006372", "006373", "006374", "006375", "006376", "006377", "006378", "006379", "006380", "006381", "006382", "006383", "006384", "006385", "006386", "006387", "006388", "006389", "006390", "006391", "006392", "006393", "006394", "006395", "006396", "006397", "006398", "006399", "006400", "006401", "006402", "006403", "006404", "006405", "006406", "006407", "006408", "006409", "006410", "006411", "006412", "006413", "006414", "006415", "006416", "006417", "006418", "006419", "006420", "006421", "006422", "006423", "006424", "006425", "006426", "006427", "006428", "006429", "006430", "006431", "006432", "006433", "006434", "006435", "006436", "006437", "006438", "006439", "006440", "006441", "006442", "006443", "006444", "006445", "006446", "006447", "006448", "006449", "006450", "006451", "006452", "006453", "006454", "006455", "006456", "006457", "006458", "006459", "006460", "006461", "006462", "006463", "006464", "006465", "006466", "006467", "006468", "006469", "006470", "006471", "006472", "006473", "006474", "006475", "006476", "006477", "006478", "006479", "006480", "006481", "006482", "006483", "006484", "006485", "006486", "006487", "006488", "006489", "006490", "006491", "006492", "006493", "006494", "006495", "006496", "006497", "006498", "006499", "006500", "006501", "006502", "006503", "006504", "006505", "006506", "006507", "006508", "006509", "006510", "006511", "006512", "006513", "006514", "006515", "006516", "006517", "006518", "006519", "006520", "006521", "006522", "006523", "006524", "006525", "006526", "006527", "006528", "006529", "006530", "006531", "006532", "006533", "006534", "006535", "006536", "006537", "006538", "006539", "006540", "006541", "006542", "006543", "006544", "006545", "006546", "006547", "006548", "006549", "006550", "006551", "006552", "006553", "006554", "006555", "006556", "006557", "006558", "006559", "006560", "006561", "006562", "006563", "006564", "006565", "006566", "006567", "006568", "006569", "006570", "006571", "006572", "006573", "006574", "006575", "006576", "006577", "006578", "006579", "006580", "006581", "006582", "006583", "006584", "006585", "006586", "006587", "006588", "006589", "006590", "006591", "006592", "006593", "006594", "006595", "006596", "006597", "006598", "006599", "006600", "006601", "006602", "006603", "006604", "006605", "006606", "006607", "006608", "006609", "006610", "006611", "006612", "006613", "006614", "006615", "006616", "006617", "006618", "006619", "006620", "006621", "006622", "006623", "006624", "006625", "006626", "006627", "006628", "006629", "006630", "006631", "006632", "006633", "006634", "006635", "006636", "006637", "006638", "006639", "006640", "006641", "006642", "006643", "006644", "006645", "006646", "006647", "006648", "006649", "006650", "006651", "006652", "006653", "006654", "006655", "006656", "006657", "006658", "006659", "006660", "006661", "006662", "006663", "006664", "006665", "006666", "006667", "006668", "006669", "006670", "006671", "006672", "006673", "006674", "006675", "006676", "006677", "006678", "006679", "006680", "006681", "006682", "006683", "006684", "006685", "006686", "006687", "006688", "006689", "006690", "006691", "006692", "006693", "006694", "006695", "006696", "006697", "006698", "006699", "006700", "006701", "006702", "006703", "006704", "006705", "006706", "006707", "006708", "006709", "006710", "006711", "006712", "006713", "006714", "006715", "006716", "006717", "006718", "006719", "006720", "006721", "006722", "006723", "006724", "006725", "006726", "006727", "006728", "006729", "006730", "006731", "006732", "006733", "006734", "006735", "006736", "006737", "006738", "006739", "006740", "006741", "006742", "006743", "006744", "006745", "006746", "006747", "006748", "006749", "006750", "006751", "006752", "006753", "006754", "006755", "006756", "006757", "006758", "006759", "006760", "006761", "006762", "006763", "006764", "006765", "006766", "006767", "006768", "006769", "006770", "006771", "006772", "006773", "006774", "006775", "006776", "006777", "006778", "006779", "006780", "006781", "006782", "006783", "006784", "006785", "006786", "006787", "006788", "006789", "006790", "006791", "006792", "006793", "006794", "006795", "006796", "006797", "006798", "006799", "006800", "006801", "006802", "006803", "006804", "006805", "006806", "006807", "006808", "006809", "006810", "006811", "006812", "006813", "006814", "006815", "006816", "007256", "007257", "007258", "007259", "007260", "007261", "007262", "007263", "007264", "007265", "007266", "007267", "007268", "007269", "007270", "007271", "007272", "007273", "007274", "007275", "007276", "007277", "007278", "007279", "007280", "007281", "007282", "007283", "007284", "007285", "007286", "007287", "007288", "007289", "007290", "007291", "007292", "007293", "007294", "007295", "007296", "007297", "007298", "007299", "007300", "007301", "007302", "007303", "007304", "007305", "007306", "007307", "007308", "007309", "007310", "007311", "007312", "007313", "007314", "007315", "007316", "007317", "007318", "007319", "007320", "007321", "007322", "007323", "007324", "007325", "007326", "007327", "007328", "007329", "007330", "007331", "007332", "007333", "007334", "007335", "007336", "007337", "007338", "007339", "007340", "007341", "007342", "007343", "007344", "007345", "007346", "007347", "007348", "007349", "007350", "007351", "007352", "007353", "007354", "007355", "007356", "007357", "007358", "007359", "007360", "007361", "007362", "007363", "007364", "007365", "007366", "007367", "007368", "007369", "007370", "007371", "007372", "007373", "007374", "007375", "007376", "007377", "007378", "007379", "007380", "007381", "007382", "007383", "007384", "007385", "007386", "007387", "007388", "007389", "007390", "007391", "007392", "007393", "007394", "007395", "007396", "007397", "007398", "007399", "007400", "007401", "007402", "007403", "007404", "007405", "007406", "007407", "007408", "007409", "007410", "007411", "007412", "007413", "007414", "007415", "007416", "007417", "007418", "007419", "007420", "007421", "007422", "007423", "007424", "007425", "007426", "007427", "007428", "007429", "007430", "007431", "007432", "007433", "007434", "007435", "007436", "007437", "007438", "007439", "007440", "007441", "007442", "007443", "007444", "007445", "007446", "007447", "007448", "007449", "007450", "007451", "007452", "007453", "007454", "007455", "007456", "007457", "007458", "007459", "007460", "007461", "007462", "007463", "007464", "007465", "007466", "007467", "007468", "007469", "007470", "007471", "007472", "007473", "007474", "007475", "007476", "007477", "007478", "007479", "007480", "007481", "007482", "007483", "007484", "007485", "007486", "007487", "007488", "007489", "007490", "007491", "007492", "007493", "007494", "007495", "007496", "007497", "007498", "007499", "007500", "007501", "007502", "007503", "007504", "007505", "007506", "007507", "007508", "007509", "007510", "007511", "007512", "007513", "007514", "007515", "007516", "007517", "007518", "007519", "007520", "007521", "007522", "007523", "007524", "007525", "007526", "007527", "007528", "007529", "007530", "007531", "007532", "007533", "007534", "007535", "007536", "007537", "007538", "007539", "007540", "007541", "007542", "007543", "007544", "007545", "007546", "007547", "007548", "007549", "007550", "007551", "007552", "007553", "007554", "007555", "007556", "007557", "007558", "007559", "007560", "007561", "007562", "007563", "007564", "007565", "007566", "007567", "007568", "007569", "007570", "007571", "007572", "007573", "007574", "007575", "007576", "007577", "007578", "007579", "007580", "007581", "007582", "007583", "007584", "007585", "007586", "007587", "007588", "007589", "007590", "007591", "007592", "007593", "007594", "007595", "007596", "007597", "007598", "007599", "007600", "007601", "007602", "007603", "007604", "007605", "007606", "007607", "007608", "007609", "007610", "007611", "007612", "007613", "007614", "007615", "007616", "007617", "007618", "007619", "007620", "007621", "007622", "007623", "007624", "007625", "008476", "008477", "008478", "008479", "008480", "008481", "008482", "008483", "008484", "008485", "008486", "008487", "008488", "008489", "008490", "008491", "008492", "008493", "008494", "008495", "008496", "008497", "008498", "008499", "008500", "008501", "008502", "008503", "008504", "008505", "008506", "008507", "008508", "008509", "008510", "008511", "008512", "008513", "008514", "008515", "008516", "008517", "008518", "008519", "008520", "008521", "008522", "008523", "008524", "008525", "008526", "008527", "008528", "008529", "008530", "008531", "008532", "008533", "008534", "008535", "008536", "008537", "008538", "008539", "008540", "008541", "008542", "008543", "008544", "008545", "008546", "008547", "008548", "008549", "008550", "008551", "008552", "008553", "008554", "008555", "008556", "008557", "008558", "008559", "008560", "008561", "008562", "008563", "008564", "008565", "008566", "008567", "008568", "008569", "008570", "008571", "008572", "008573", "008574", "008575", "008576", "008577", "008578", "008579", "008580", "008581", "008582", "008583", "008584", "008585", "008586", "008587", "008588", "008589", "008590", "008591", "008592", "008593", "008594", "008595", "008596", "008597", "008598", "008599", "008600", "008601", "008602", "008603", "008604", "008605", "008606", "008607", "008608", "008609", "008610", "008611", "008612", "008613", "008614", "008615", "008616", "008617", "008618", "008619", "008620", "008621", "008622", "008623", "008624", "008625", "008626", "008627", "008628", "008629", "008630", "008631", "008632", "008633", "008634", "008635", "008636", "008637", "008638", "008639", "008640", "008641", "008642", "008643", "008644", "008645", "008646", "008647", "008648", "008649", "008650", "008651", "008652", "008653", "008654", "008655", "008656", "008657", "008658", "008659", "008660", "008661", "008662", "008663", "008664", "008665", "008666", "008667", "008668", "008669", "008670", "008671", "008672", "008673", "008674", "008675", "008676", "008677", "008678", "008679", "008680", "008681", "008682", "008683", "008684", "008685", "008686", "008687", "008688", "008689", "008690", "008691", "008692", "008693", "008694", "008695", "008696", "008697", "008698", "008699", "008700", "008701", "008702", "008703", "008704", "008705", "008706", "008707", "008708", "008709", "008710", "008711", "008712", "008713", "008714", "008715", "008716", "008717", "008718", "008719", "008720", "008721", "008722", "008723", "008724", "008725", "008726", "008727", "008728", "008729", "008730", "008731", "008732", "008733", "008734", "008735", "008736", "008737", "008738", "008739", "008740", "008741", "008742", "008743", "008744", "008745", "008746", "008747", "008748", "008749", "008750", "008751", "008752", "008753", "008754", "008755", "008756", "008757", "008758", "008759", "008760", "008761", "008762", "008763", "008764", "008765", "008766", "008767", "008768", "008769", "008770", "008771", "008772", "008773", "008774", "008775", "008776", "008777", "008778", "008779", "008780", "008781", "008782", "008783", "008784", "008785", "008786", "008787", "008788", "008789", "008790", "008791", "008792", "008793", "008794", "008795", "008796", "008797", "008798", "008799", "008800", "008801", "008802", "008803", "008804", "008805", "008806", "008807", "008808", "008809", "008810", "008811", "008812", "008813", "008814", "008815", "008816", "008817", "008818", "008819", "008820", "008821", "008822", "008823", "008824", "008825", "008826", "008827", "008828", "008829", "008830", "008831", "008832", "008833", "008834", "008835", "008836", "008837", "008838", "008839", "008840", "008841", "008842", "008843", "008844", "008845", "008846", "008847", "008848", "008849", "008850", "008851", "008852", "008853", "008854", "008855", "008856", "008857", "008858", "008859", "008860", "008861", "008862", "008863", "008864", "008865", "008866", "008867", "008868", "008869", "008870", "008871", "008872", "008873", "008874", "008875", "008876", "008877", "008878", "008879", "008880", "008881", "008882", "008883", "008884", "008885", "008886", "008887", "008888", "008889", "008890", "008891", "008892", "008893", "008894", "008895", "008896", "008897", "008898", "008899", "008900", "008901", "008902", "008903", "008904", "008905", "008906", "008907", "008908", "008909", "008910", "008911", "008912", "008913", "008914", "008915", "008916", "008917", "008918", "008919", "008920", "008921", "008922", "008923", "008924", "008925", "008926", "008927", "008928", "008929", "008930", "008931", "008932", "008933", "008934", "008935", "008936", "008937", "008938", "008939", "008940", "008941", "008942", "008943", "008944", "008945", "008946", "008947", "008948", "008949", "008950", "008951", "008952", "008953", "008954", "008955", "008956", "008957", "008958", "008959", "008960", "008961", "008962", "008963", "008964", "008965", "008966", "008967", "008968", "008969", "008970", "008971", "008972", "008973", "008974", "008975", "008976", "008977", "008978", "008979", "008980", "008981", "008982", "008983", "008984", "008985", "008986", "008987", "008988", "008989", "008990", "008991", "008992", "008993", "008994", "008995", "008996", "008997", "008998", "008999", "009000", "009001", "009002", "009003", "009004", "009005", "009006", "009007", "009008", "009009", "009010", "009011", "009012", "009013", "009014", "009015", "009016", "009017", "009018", "009019", "009020", "009021", "009022", "009023", "009024", "009025", "009026", "009027", "009028", "009029", "009030", "009031", "009032", "009033", "009034", "009035", "009036", "009037", "009038", "009039", "009040", "009041", "009042", "009043", "009044", "009045", "009046", "009047", "009048", "009049", "009050", "009051", "009052", "009053", "009054", "009055", "009056", "009057", "009058", "009059", "009060", "009061", "009062", "009063", "009064", "009065", "009066", "009067", "009068", "009069", "009070", "009071", "009072", "009073", "009074", "009075", "009076", "009077", "009078", "009079", "009080", "009081", "009082", "009083", "009084", "009085", "009086", "009087", "009088", "009089", "009090", "009091", "009092", "009093", "009094", "009095", "009096", "009097", "009098", "009099", "009100", "009101", "009102", "009103", "009104", "009105", "009106", "009107", "009108", "009109", "009110", "009111", "009112", "009113", "009114", "009115", "009116", "009117", "009118", "009119", "009120", "009121", "009122", "009123", "009124", "009125", "009126", "009127", "009128", "009129", "009130", "009131", "009132", "009133", "009134", "009135", "009136", "009137", "009138", "009139", "009140", "009141", "009142", "009143", "009144", "009145", "009146", "009147", "009148", "009149", "009150", "009691", "009692", "009693", "009694", "009695", "009696", "009697", "009698", "009699", "009700", "009701", "009702", "009703", "009704", "009705", "009706", "009707", "009708", "009709", "009710", "009711", "009712", "009713", "009714", "009715", "009716", "009717", "009718", "009719", "009720", "009721", "009722", "009723", "009724", "009725", "009726", "009727", "009728", "009729", "009730", "009731", "009732", "009733", "009734", "009735", "009736", "009737", "009738", "009739", "009740", "009741", "009742", "009743", "009744", "009745", "009746", "009747", "009748", "009749", "009750", "009751", "009752", "009753", "009754", "009755", "009756", "009757", "009758", "009759", "009760", "009761", "009762", "009763", "009764", "009765", "009766", "009767", "009768", "009769", "009770", "009771", "009772", "009773", "009774", "009775", "009776", "009777", "009778", "009779", "009780", "009781", "009782", "009783", "009784", "009785", "009786", "009787", "009788", "009789", "009790", "009791", "009792", "009793", "009794", "009795", "009796", "009797", "009798", "009799", "009800", "009801", "009802", "009803", "009804", "009805", "009806", "009807", "009808", "009809", "009810", "009811", "009812", "009813", "009814", "009815", "009816", "009817", "009818", "009819", "009820", "009821", "009822", "009823", "009824", "009825", "009826", "009827", "009828", "009829", "009830", "009831", "009832", "009833", "009834", "009835", "009836", "009837", "009838", "009839", "009840", "009841", "009842", "009843", "009844", "009845", "009846", "009847", "009848", "009849", "009850", "009851", "009852", "009853", "009854", "009855", "009856", "009857", "009858", "009859", "009860", "009861", "009862", "009863", "009864", "009865", "009866", "009867", "009868", "009869", "009870", "009871", "009872", "009873", "009874", "009875", "009876", "009877", "009878", "009879", "009880", "009881", "009882", "009883", "009884", "009885", "009886", "009887", "009888", "009889", "009890", "009891", "009892", "009893", "009894", "009895", "009896", "009897", "009898", "009899", "009900", "009901", "009902", "009903", "009904", "009905", "009906", "009907", "009908", "009909", "009910", "009911", "009912", "009913", "009914", "009915", "009916", "009917", "009918", "009919", "009920", "009921", "009922", "009923", "009924", "009925", "009926", "009927", "009928", "009929", "009930", "009931", "009932", "009933", "009934", "009935", "009936", "009937", "009938", "009939", "009940", "009941", "009942", "009943", "009944", "009945", "009946", "009947", "009948", "009949", "009950", "009951", "009952", "009953", "009954", "009955", "009956", "009957", "009958", "009959", "009960", "009961", "009962", "009963", "009964", "009965", "009966", "009967", "009968", "009969", "009970", "009971", "009972", "009973", "009974", "009975", "009976", "009977", "009978", "009979", "009980", "009981", "009982", "009983", "009984", "009985", "009986", "009987", "009988", "009989", "009990", "009991", "009992", "009993", "009994", "009995", "009996", "009997", "009998", "009999", "010000", "010001", "010002", "010003", "010004", "010005", "010006", "010007", "010008", "010009", "010010", "010011", "010012", "010013", "010014", "010015", "010016", "010017", "010018", "010019", "010020", "010021", "010022", "010023", "010024", "010025", "010026", "010027", "010028", "010029", "010030", "010031", "010032", "010033", "010034", "010035", "010036", "010037", "010038", "010039", "010040", "010041", "010042", "010043", "010044", "010045", "010046", "010047", "010048", "010049", "010050", "010051", "010052", "010053", "010054", "010055", "010056", "010057", "010058", "010059", "010060", "010061", "010062", "010063", "010064", "010065", "010066", "010067", "010068", "010069", "010070", "010071", "010072", "010073", "010074", "010075", "010076", "010077", "010078", "010079", "010080", "010081", "010082", "010083", "010084", "010085", "010086", "010087", "010088", "010089", "010090", "010091", "010092", "010093", "010094", "010095", "010096", "010097", "010098", "010099", "010100", "010101", "010102", "010103", "010104", "010105", "010106", "010107", "010108", "010109", "010110", "010111", "010112", "010113", "010114", "010115", "010116", "010117", "010118", "010119", "010120", "010121", "010122", "010123", "010124", "010125", "010126", "010127", "010128", "010129", "010130", "010131", "010132", "010133", "010134", "010135", "010136", "010137", "010138", "010139", "010140", "010141", "010142", "010143", "010144", "010145", "010146", "010147", "010148", "010149", "010150", "010151", "010152", "010153", "010154", "010155", "010156", "010157", "010158", "010159", "010160", "010161", "010162", "010163", "010164", "010165", "010166", "010167", "010168", "010169", "010170", "010171", "010172", "010173", "010174", "010175", "010176", "010177", "010178", "010179", "010180", "010181", "010182", "010183", "010184", "010185", "010186", "010187", "010188", "010189", "010190", "010191", "010192", "010193", "010194", "010195", "010196", "010197", "010198", "010199", "010200", "010201", "010202", "010203", "010204", "010205", "010206", "010207", "010208", "010209", "010210", "010211", "010212", "010213", "010214", "010215", "010216", "010217", "010218", "010219", "010220", "010221", "010222", "010223", "010224", "010225", "010226", "010227", "010228", "010229", "010230", "010231", "010232", "010233", "010234", "010235", "010236", "010237", "010238", "010239", "010240", "010241", "010242", "010243", "010244", "010245", "010246", "010247", "010248", "010249", "010250", "010251", "010252", "010253", "010254", "010255", "010256", "010257", "010258", "010259", "010260", "010261", "010262", "010263", "010264", "010265", "010266", "010267", "010268", "010269", "010270", "010271", "010272", "010273", "010274", "010275", "010276", "010277", "010278", "010279", "010280", "010281", "010282", "010283", "010284", "010285", "010286", "010287", "010288", "010289", "010290", "010291", "010292", "010293", "010294", "010295", "010296", "010297", "010298", "010299", "010300", "010301", "010302", "010303", "010304", "010305", "010306", "010307", "010308", "010309", "010310", "010311", "010312", "010313", "010314", "010315", "010316", "010317", "010318", "010319", "010320", "010321", "010322", "010323", "010324", "010325", "010326", "010327", "010328", "010329", "010330", "010331", "010332", "010333", "010334", "010335", "010336", "010337", "010338", "010339", "010340", "010341", "010342", "010343", "010344", "010345", "010346", "010347", "010348", "010349", "010350", "010351", "010352", "010353", "010354", "010355", "010356", "010357", "010358", "010359", "010360", "010361", "010362", "010363", "010364", "010365", "010366", "010367", "010368", "010369", "010370", "010371", "010372", "010373", "010374", "010375", "010376", "010377", "010378", "010379", "010380", "010381", "010382", "010383", "010384", "010385", "010386", "010387", "010388", "010389", "010390", "010391", "010392", "010393", "010394", "010395", "010396", "010397", "010398", "010399", "010400", "010401", "010402", "010403", "010404", "010405", "010406", "010407", "010408", "010409", "010410", "010411", "010412", "010413", "010414", "010415", "010416", "010417", "010418", "010419", "010420", "010421", "010422", "010423", "010424", "010425", "010426", "010427", "010428", "010429", "010430", "010431", "010432", "010433", "010434", "010435", "010436", "010437", "010438", "010439", "010440", "010441", "010442", "010443", "010444", "010445", "010446", "010447", "010448", "010449", "010450", "010451", "010452", "010453", "010454", "010455", "010456", "010457", "010458", "010459", "010460", "010461", "010462", "010463", "010464", "010465", "010466", "010467", "010468", "010469", "010470", "010471", "010472", "010473", "010474", "010475", "010476", "010477", "010478", "010479", "010480", "010941", "010942", "010943", "010944", "010945", "010946", "010947", "010948", "010949", "010950", "010951", "010952", "010953", "010954", "010955", "010956", "010957", "010958", "010959", "010960", "010961", "010962", "010963", "010964", "010965", "010966", "010967", "010968", "010969", "010970", "010971", "010972", "010973", "010974", "010975", "010976", "010977", "010978", "010979", "010980", "010981", "010982", "010983", "010984", "010985", "010986", "010987", "010988", "010989", "010990", "010991", "010992", "010993", "010994", "010995", "010996", "010997", "010998", "010999", "011000", "011001", "011002", "011003", "011004", "011005", "011006", "011007", "011008", "011009", "011010", "011011", "011012", "011013", "011014", "011015", "011016", "011017", "011018", "011019", "011020", "011021", "011022", "011023", "011024", "011025", "011026", "011027", "011028", "011029", "011030", "011031", "011032", "011033", "011034", "011035", "011036", "011037", "011038", "011039", "011040", "011041", "011042", "011043", "011044", "011045", "011046", "011047", "011048", "011049", "011050", "011051", "011052", "011053", "011054", "011055", "011056", "011057", "011058", "011059", "011060", "011061", "011062", "011063", "011064", "011065", "011066", "011067", "011068", "011069", "011070", "011071", "011072", "011073", "011074", "011075", "011076", "011077", "011078", "011079", "011080", "011081", "011082", "011083", "011084", "011085", "011086", "011087", "011088", "011089", "011090", "011091", "011092", "011093", "011094", "011095", "011096", "011097", "011098", "011099", "011100", "011101", "011102", "011103", "011104", "011105", "011106", "011107", "011108", "011109", "011110", "011111", "011112", "011113", "011114", "011115", "011116", "011117", "011118", "011119", "011120", "011121", "011122", "011123", "011124", "011125", "011126", "011127", "011128", "011129", "011130", "011131", "011132", "011133", "011134", "011135", "011136", "011137", "011138", "011139", "011140", "011141", "011142", "011143", "011144", "011145", "011146", "011147", "011148", "011149", "011150", "011261", "011262", "011263", "011264", "011265", "011266", "011267", "011268", "011269", "011270", "011271", "011272", "011273", "011274", "011275", "011276", "011277", "011278", "011279", "011280", "011281", "011282", "011283", "011284", "011285", "011286", "011287", "011288", "011289", "011290", "011291", "011292", "011293", "011294", "011295", "011296", "011297", "011298", "011299", "011300", "011301", "011302", "011303", "011304", "011305", "011306", "011307", "011308", "011309", "011310", "011311", "011312", "011313", "011314", "011315", "011316", "011317", "011318", "011319", "011320", "011321", "011322", "011323", "011324", "011325", "011326", "011327", "011328", "011329", "011330", "011331", "011332", "011333", "011334", "011335", "011336", "011337", "011338", "011339", "011340", "011341", "011342", "011343", "011344", "011345", "011346", "011347", "011348", "011349", "011350", "011351", "011352", "011353", "011354", "011355", "011356", "011357", "011358", "011359", "011360", "011361", "011362", "011363", "011364", "011365", "011366", "011367", "011368", "011369", "011370", "011371", "011372", "011373", "011374", "011375", "011376", "011377", "011378", "011379", "011380", "011381", "011382", "011383", "011384", "011385", "011386", "011387", "011388", "011389", "011390", "011391", "011392", "011393", "011394", "011395", "011396", "011397", "011398", "011399", "011400", "011401", "011402", "011403", "011404", "011405", "011406", "011407", "011408", "011409", "011410", "011411", "011412", "011413", "011414", "011415", "011416", "011417", "011418", "011419", "011420", "011421", "011422", "011423", "011424", "011425", "011426", "011427", "011428", "011429", "011430", "011431", "011432", "011433", "011434", "011435", "011436", "011437", "011438", "011439", "011440", "011441", "011442", "011443", "011444", "011445", "011446", "011447", "011448", "011449", "011450", "012091", "012092", "012093", "012094", "012095", "012096", "012097", "012098", "012099", "012100", "012101", "012102", "012103", "012104", "012105", "012106", "012107", "012108", "012109", "012110", "012111", "012112", "012113", "012114", "012115", "012116", "012117", "012118", "012119", "012120", "012121", "012122", "012123", "012124", "012125", "012126", "012127", "012128", "012129", "012130", "012131", "012132", "012133", "012134", "012135", "012136", "012137", "012138", "012139", "012140", "012141", "012142", "012143", "012144", "012145", "012146", "012147", "012148", "012149", "012150", "012151", "012152", "012153", "012154", "012155", "012156", "012157", "012158", "012159", "012160", "012161", "012162", "012163", "012164", "012165", "012166", "012167", "012168", "012169", "012170", "012171", "012172", "012173", "012174", "012175", "012176", "012177", "012178", "012179", "012180", "012181", "012182", "012183", "012184", "012185", "012186", "012187", "012188", "012189", "012190", "012191", "012192", "012193", "012194", "012195", "012196", "012197", "012198", "012199", "012200", "012201", "012202", "012203", "012204", "012205", "012206", "012207", "012208", "012209", "012210", "012211", "012212", "012213", "012214", "012215", "012216", "012217", "012218", "012219", "012220", "012221", "012222", "012223", "012224", "012225", "012226", "012227", "012228", "012229", "012230", "012231", "012232", "012233", "012234", "012235", "012236", "012237", "012238", "012239", "012240", "012241", "012242", "012243", "012244", "012245", "012246", "012247", "012248", "012249", "012250", "012251", "012252", "012253", "012254", "012255", "012256", "012257", "012258", "012259", "012260", "012261", "012262", "012263", "012264", "012265", "012266", "012267", "012268", "012269", "012270", "012271", "012272", "012273", "012274", "012275", "012276", "012277", "012278", "012279", "012280", "012281", "012282", "012283", "012284", "012285", "012286", "012287", "012288", "012289", "012290", "012511", "012512", "012513", "012514", "012515", "012516", "012517", "012518", "012519", "012520", "012521", "012522", "012523", "012524", "012525", "012526", "012527", "012528", "012529", "012530", "012531", "012532", "012533", "012534", "012535", "012536", "012537", "012538", "012539", "012540", "012541", "012542", "012543", "012544", "012545", "012546", "012547", "012548", "012549", "012550", "012551", "012552", "012553", "012554", "012555", "012556", "012557", "012558", "012559", "012560", "012561", "012562", "012563", "012564", "012565", "012566", "012567", "012568", "012569", "012570", "012571", "012572", "012573", "012574", "012575", "012576", "012577", "012578", "012579", "012580", "012581", "012582", "012583", "012584", "012585", "012586", "012587", "012588", "012589", "012590", "012591", "012592", "012593", "012594", "012595", "012596", "012597", "012598", "012599", "012600", "012601", "012602", "012603", "012604", "012605", "012606", "012607", "012608", "012609", "012610", "012611", "012612", "012613", "012614", "012615", "012616", "012617", "012618", "012619", "012620", "012621", "012622", "012623", "012624", "012625", "012626", "012627", "012628", "012629", "012630", "012631", "012632", "012633", "012634", "012635", "012636", "012637", "012638", "012639", "012640", "012641", "012642", "012643", "012644", "012645", "012646", "012647", "012648", "012649", "012650", "012651", "012652", "012653", "012654", "012655", "012656", "012657", "012658", "012659", "012660", "012661", "012662", "012663", "012664", "012665", "012666", "012667", "012668", "012669", "012670", "012671", "012672", "012673", "012674", "012675", "012676", "012677", "012678", "012679", "012680", "012681", "012682", "012683", "012684", "012685", "012686", "012687", "012688", "012689", "012690", "012691", "012692", "012693", "012694", "012695", "012696", "012697", "012698", "012699", "012700", "012701", "012702", "012703", "012704", "012705", "012706", "012707", "012708", "012709", "012710", "012711", "012712", "012713", "012714", "012715", "012716", "012717", "012718", "012719", "012720", "012721", "012722", "012723", "012724", "012725", "012726", "012727", "012728", "012729", "012730", "012731", "012732", "012733", "012734", "012735", "012736", "012737", "012738", "012739", "012740", "012741", "012742", "012743", "012744", "012745", "012746", "012747", "012748", "012749", "012750", "012751", "012752", "012753", "012754", "012755", "012756", "012757", "012758", "012759", "012760", "012761", "012762", "012763", "012764", "012765", "012766", "012767", "012768", "012769", "012770", "012771", "012772", "012773", "012774", "012775", "012776", "012777", "012778", "012779", "012780", "012781", "012782", "012783", "012784", "012785", "012786", "012787", "012788", "012789", "012790", "012791", "012792", "012793", "012794", "012795", "012796", "012797", "012798", "012799", "012800", "012801", "012802", "012803", "012804", "012805", "012806", "012807", "012808", "012809", "012810", "013001", "013002", "013003", "013004", "013005", "013006", "013007", "013008", "013009", "013010", "013011", "013012", "013013", "013014", "013015", "013016", "013017", "013018", "013019", "013020", "013021", "013022", "013023", "013024", "013025", "013026", "013027", "013028", "013029", "013030", "013031", "013032", "013033", "013034", "013035", "013036", "013037", "013038", "013039", "013040", "013041", "013042", "013043", "013044", "013045", "013046", "013047", "013048", "013049", "013050", "013051", "013052", "013053", "013054", "013055", "013056", "013057", "013058", "013059", "013060", "013061", "013062", "013063", "013064", "013065", "013066", "013067", "013068", "013069", "013070", "013071", "013072", "013073", "013074", "013075", "013076", "013077", "013078", "013079", "013080", "013081", "013082", "013083", "013084", "013085", "013086", "013087", "013088", "013089", "013090", "013091", "013092", "013093", "013094", "013095", "013096", "013097", "013098", "013099", "013100", "013101", "013102", "013103", "013104", "013105", "013106", "013107", "013108", "013109", "013110", "013111", "013112", "013113", "013114", "013115", "013116", "013117", "013118", "013119", "013120", "013121", "013122", "013123", "013124", "013125", "013126", "013127", "013128", "013129", "013130", "013131", "013132", "013133", "013134", "013135", "013136", "013137", "013138", "013139", "013140", "013141", "013142", "013143", "013144", "013145", "013146", "013147", "013148", "013149", "013150", "013151", "013152", "013153", "013154", "013155", "013156", "013157", "013158", "013159", "013160", "013161", "013162", "013163", "013164", "013165", "013166", "013167", "013168", "013169", "013170", "013171", "013172", "013173", "013174", "013175", "013176", "013177", "013178", "013179", "013180", "013181", "013182", "013183", "013184", "013185", "013186", "013187", "013188", "013189", "013190", "013191", "013192", "013193", "013194", "013195", "013196", "013197", "013198", "013199", "013200", "013201", "013202", "013203", "013204", "013205", "013206", "013207", "013208", "013209", "013420", "013421", "013422", "013423", "013424", "013425", "013426", "013427", "013428", "013429", "013430", "013431", "013432", "013433", "013434", "013435", "013436", "013437", "013438", "013439", "013440", "013441", "013442", "013443", "013444", "013445", "013446", "013447", "013448", "013449", "013450", "013451", "013452", "013453", "013454", "013455", "013456", "013457", "013458", "013459", "013460", "013461", "013462", "013463", "013464", "013465", "013466", "013467", "013468", "013469", "013470", "013471", "013472", "013473", "013474", "013475", "013476", "013477", "013478", "013479", "013480", "013481", "013482", "013483", "013484", "013485", "013486", "013487", "013488", "013489", "013490", "013491", "013492", "013493", "013494", "013495", "013496", "013497", "013498", "013499", "013500", "013501", "013502", "013503", "013504", "013505", "013506", "013507", "013508", "013509", "013510", "013511", "013512", "013513", "013514", "013515", "013516", "013517", "013518", "013519", "013520", "013521", "013522", "013523", "013524", "013525", "013526", "013527", "013528", "013529", "013530", "013531", "013532", "013533", "013534", "013535", "013536", "013537", "013538", "013539", "013540", "013541", "013542", "013543", "013544", "013545", "013546", "013547", "013548", "013549", "013550", "013551", "013552", "013553", "013554", "013555", "013556", "013557", "013558", "013559", "013560", "013561", "013562", "013563", "013564", "013565", "013566", "013567", "013568", "013569", "013570", "013571", "013572", "013573", "013574", "013575", "013576", "013577", "013578", "013579", "013580", "013581", "013582", "013583", "013584", "013585", "013586", "013587", "013588", "013589", "013590", "013591", "013592", "013593", "013594", "013595", "013596", "013597", "013598", "013599", "013600", "013601", "013602", "013603", "013604", "013605", "013606", "013607", "013608", "013609", "013610", "013611", "013612", "013613", "013614", "013615", "013616", "013617", "013618", "013619", "013620", "013621", "013622", "013623", "013624", "013625", "013626", "013627", "013628", "013629", "013630", "013631", "013632", "013633", "013634", "013635", "013636", "013637", "013638", "013639", "013640", "013641", "013642", "013643", "013644", "013645", "013646", "013647", "013648", "013649", "013650", "013651", "013652", "013653", "013654", "013655", "013656", "013657", "013658", "013659", "013660", "013661", "013662", "013663", "013664", "013665", "013666", "013667", "013668", "013669", "013670", "013671", "013672", "013673", "013674", "013675", "013676", "013677", "013678", "013679", "013680", "013681", "013682", "013683", "013684", "013685", "013686", "013687", "013688", "013689", "013690", "013691", "013692", "013693", "013694", "013695", "013696", "013697", "013698", "013699", "014158", "014159", "014160", "014161", "014162", "014163", "014164", "014165", "014166", "014167", "014168", "014169", "014170", "014171", "014172", "014173", "014174", "014175", "014176", "014177", "014178", "014179", "014180", "014181", "014182", "014183", "014184", "014185", "014186", "014187", "014188", "014189", "014190", "014191", "014192", "014193", "014194", "014195", "014196", "014197", "014198", "014199", "014200", "014201", "014202", "014203", "014204", "014205", "014206", "014207", "014208", "014209", "014210", "014211", "014212", "014213", "014214", "014215", "014216", "014217", "014218", "014219", "014220", "014221", "014222", "014223", "014224", "014225", "014226", "014227", "014228", "014229", "014230", "014231", "014232", "014233", "014234", "014235", "014236", "014237", "014238", "014239", "014240", "014241", "014242", "014243", "014244", "014245", "014246", "014247", "014248", "014249", "014250", "014251", "014252", "014253", "014254", "014255", "014256", "014257", "014258", "014259", "014260", "014261", "014262", "014263", "014264", "014265", "014266", "014267", "014268", "014269", "014270", "014271", "014272", "014273", "014274", "014275", "014276", "014277", "014278", "014279", "014280", "014281", "014282", "014283", "014284", "014285", "014286", "014287", "014288", "014289", "014290", "014291", "014292", "014293", "014294", "014295", "014296", "014297", "014298", "014299", "014300", "014301", "014302", "014303", "014304", "014305", "014306", "014307", "014308", "014309", "014310", "014311", "014312", "014313", "014314", "014315", "014316", "014317", "014318", "014319", "014320", "014321", "014322", "014323", "014324", "014325", "014326", "014327", "014328", "014329", "014330", "014331", "014332", "014333", "014334", "014335", "014336", "014337", "014338", "014339", "014340", "014341", "014342", "014343", "014344", "014345", "014346", "014347", "014348", "014349", "014350", "014351", "014352", "014353", "014354", "014355", "014356", "014357", "014358", "014359", "014360", "014361", "014362", "014363", "014364", "014365", "014366", "014367", "014368", "014369", "014370", "014371", "014372", "014373", "014374", "014375", "014376", "014377", "014378", "014379", "014380", "014381", "014382", "014383", "014384", "014385", "014386", "014387", "014388", "014389", "014390", "014391", "014392", "014393", "014394", "014395", "014396", "014397", "014398", "014399", "014400", "014401", "014402", "014403", "014404", "014405", "014406", "014407", "014408", "014409", "014410", "014411", "014412", "014413", "014414", "014415", "014416", "014417", "014418", "014419", "014420", "014421", "014422", "014423", "014424", "014425", "014426", "014427", "014428", "014429", "014430", "014431", "014432", "014433", "014434", "014435", "014436", "014437", "014438", "014439", "014440", "014441", "014442", "014443", "014444", "014445", "014446", "014447", "014448", "014449", "014450", "014451", "014452", "014453", "014454", "014455", "014456", "014457", "014458", "014459", "014460", "014461", "014462", "014463", "014464", "014465", "014466", "014467", "014468", "014469", "014470", "014471", "014472", "014473", "014474", "014475", "014476", "014477", "014478", "014479", "014480", "014481", "014482", "014483", "014484", "014485", "014486", "014487", "014488", "014489", "014490", "014491", "014492", "014493", "014494", "014495", "014496", "014497", "014498", "014499", "014500", "014501", "014502", "014503", "014504", "014505", "014506", "014507", "014508", "014509", "014510", "014511", "014512", "014513", "014514", "014515", "014516", "014517", "014518", "014519", "014520", "014521", "014522", "014523", "014524", "014525", "014526", "014527", "014528", "014529", "014530", "014531", "014532", "014533", "014534", "014535", "014536", "014537", "014538", "014539", "014540", "014541", "014542", "014543", "014544", "014545", "014546", "014547", "014548", "014549", "014550", "014551", "014552", "014553", "014554", "014555", "014556", "014557", "014558", "014559", "014560", "014561", "014562", "014563", "014564", "014565", "014566", "014567", "014568", "014569", "014570", "014571", "014572", "014573", "014574", "014575", "014576", "014577", "014578", "014579", "014580", "014581", "014582", "014583", "014584", "014585", "014586", "014587", "014588", "014589", "014590", "014591", "014592", "014593", "014594", "014595", "014596", "014597", "014598", "014599", "014600", "014601", "014602", "014603", "014604", "014605", "014606", "014607", "014608", "014609", "014610", "014611", "014612", "014613", "014614", "014615", "014616", "014617", "014618", "014619", "014620", "014621", "014622", "014623", "014624", "014625", "014626", "014627", "014628", "014629", "014630", "014631", "014632", "014633", "014634", "014635", "014636", "014637", "014638", "014639", "014640", "014641", "014642", "014643", "014644", "014645", "014646", "014647", "014648", "014649", "014650", "014651", "014652", "014653", "014654", "014655", "014656", "014657", "014658", "014659", "014660", "014661", "014662", "014663", "014664", "014665", "014666", "014667", "014668", "014669", "014670", "014671", "014672", "014673", "014674", "014675", "014676", "014677", "014678", "014679", "014680", "014681", "014682", "014683", "014684", "014685", "014686", "014687", "014688", "014689", "014690", "014691", "014692", "014693", "014694", "014695", "014696", "014697", "014698", "014699", "014700", "014701", "014702", "014703", "014704", "014705", "014706", "014707", "014708", "014709", "014710", "014711", "014712", "014713", "014714", "014715", "014716", "014717", "014718", "014719", "014720", "014721", "014722", "014723", "014724", "014725", "014726", "014727", "014728", "014729", "014730", "014731", "014732", "014733", "014734", "014735", "014736", "014737", "014738", "014739", "014740", "014741", "014742", "014743", "014744", "014745", "014746", "014747", "014748", "014749", "014750", "014751", "014752", "014753", "014754", "014755", "014756", "014757", "014758", "014759", "014760", "014761", "014762", "014763", "014764", "014765", "014766", "014767", "014768", "014769", "014770", "014771", "014772", "014773", "014774", "014775", "014776", "014777", "014778", "014779", "014780", "014781", "014782", "014783", "014784", "014785", "014786", "014787", "014788", "014789", "014790", "014791", "014792", "014793", "014794", "014795", "014796", "014797", "014798", "014799", "014800", "014801", "014802", "014803", "014804", "014805", "014806", "014807", "014808", "014809", "014810", "014811", "014812", "014813", "014814", "014815", "014816", "014817", "014818", "014819", "014820", "014821", "014822", "014823", "014824", "014825", "014826", "014827", "014828", "014829", "014830", "014831", "014832", "014833", "014834", "014835", "014836", "014837", "014838", "014839", "014840", "014841", "014842", "014843", "014844", "014845", "014846", "014847", "014848", "014849", "014850", "014851", "014852", "014853", "014854", "014855", "014856", "014857", "014858", "014859", "014860", "014861", "014862", "014863", "014864", "014865", "014866", "014867", "014868", "014869", "014870", "014871", "014872", "014873", "014874", "014875", "014876", "014877", "014878", "014879", "014880", "014881", "014882", "014883", "014884", "014885", "014886", "014887", "014888", "014889", "014890", "014891", "014892", "014893", "014894", "014895", "014896", "014897", "014898", "014899", "014900", "014901", "014902", "014903", "014904", "014905", "014906", "014907", "014908", "014909", "014910", "014911", "014912", "014913", "014914", "014915", "014916", "014917", "014918", "014919", "014920", "014921", "014922", "014923", "014924", "014925", "014926", "014927", "014928", "014929", "014930", "014931", "014932", "014933", "014934", "014935", "014936", "014937", "014938", "014939", "014940", "014941", "014942", "014943", "014944", "014945", "014946", "014947", "014948", "014949", "014950", "014951", "014952", "014953", "014954", "014955", "014956", "014957", "014958", "014959", "014960", "014961", "014962", "014963", "014964", "014965", "014966", "014967", "014968", "014969", "014970", "014971", "014972", "014973", "014974", "014975", "014976", "014977", "014978", "014979", "014980", "014981", "014982", "014983", "014984", "014985", "014986", "014987", "014988", "014989", "014990", "014991", "014992", "014993", "014994", "014995", "014996", "014997", "014998", "014999", "015000", "015001", "015002", "015003", "015004", "015005", "015006", "015007", "015008", "015009", "015010", "015011", "015012", "015013", "015014", "015015", "015016", "015017", "015018", "015019", "015020", "015021", "015022", "015023", "015024", "015025", "015026", "015027", "015028", "015029", "015030", "015031", "015032", "015033", "015034", "015035", "015036", "015037", "015038", "015039", "015040", "015041", "015042", "015043", "015044", "015045", "015046", "015047", "015048", "015049", "015050", "015051", "015052", "015053", "015054", "015055", "015056", "015057", "015058", "015059", "015060", "015061", "015062", "015063", "015064", "015065", "015066", "015067", "015068", "015069", "015070", "015071", "015072", "015073", "015074", "015075", "015076", "015077", "015078", "015079", "015080", "015081", "015082", "015083", "015084", "015085", "015086", "015087", "015088", "015089", "015090", "015091", "015092", "015093", "015094", "015095", "015096", "015097", "015098", "015099", "015100", "015101", "015102", "015103", "015104", "015105", "015106", "015107", "015108", "015109", "015110", "015111", "015112", "015113", "015114", "015115", "015116", "015117", "015118", "015119", "015120", "015121", "015122", "015123", "015124", "015125", "015126", "015127", "015128", "015129", "015130", "015131", "015132", "015133", "015134", "015135", "015136", "015137", "015298", "015299", "015300", "015301", "015302", "015303", "015304", "015305", "015306", "015307", "015308", "015309", "015310", "015311", "015312", "015313", "015314", "015315", "015316", "015317", "015318", "015319", "015320", "015321", "015322", "015323", "015324", "015325", "015326", "015327", "015328", "015329", "015330", "015331", "015332", "015333", "015334", "015335", "015336", "015337", "015338", "015339", "015340", "015341", "015342", "015343", "015344", "015345", "015346", "015347", "015348", "015349", "015350", "015351", "015352", "015353", "015354", "015355", "015356", "015357", "015358", "015359", "015360", "015361", "015362", "015363", "015364", "015365", "015366", "015367", "015368", "015369", "015370", "015371", "015372", "015373", "015374", "015375", "015376", "015377", "015378", "015379", "015380", "015381", "015382", "015383", "015384", "015385", "015386", "015387", "015388", "015389", "015390", "015391", "015392", "015393", "015394", "015395", "015396", "015397", "015398", "015399", "015400", "015401", "015402", "015403", "015404", "015405", "015406", "015407", "015768", "015769", "015770", "015771", "015772", "015773", "015774", "015775", "015776", "015777", "015778", "015779", "015780", "015781", "015782", "015783", "015784", "015785", "015786", "015787", "015788", "015789", "015790", "015791", "015792", "015793", "015794", "015795", "015796", "015797", "015798", "015799", "015800", "015801", "015802", "015803", "015804", "015805", "015806", "015807", "015808", "015809", "015810", "015811", "015812", "015813", "015814", "015815", "015816", "015817", "015818", "015819", "015820", "015821", "015822", "015823", "015824", "015825", "015826", "015827", "015828", "015829", "015830", "015831", "015832", "015833", "015834", "015835", "015836", "015837", "015838", "015839", "015840", "015841", "015842", "015843", "015844", "015845", "015846", "015847", "015848", "015849", "015850", "015851", "015852", "015853", "015854", "015855", "015856", "015857", "015858", "015859", "015860", "015861", "015862", "015863", "015864", "015865", "015866", "015867", "015868", "015869", "015870", "015871", "015872", "015873", "015874", "015875", "015876", "015877", "015878", "015879", "015880", "015881", "015882", "015883", "015884", "015885", "015886", "015887", "015888", "015889", "015890", "015891", "015892", "015893", "015894", "015895", "015896", "015897", "015898", "015899", "015900", "015901", "015902", "015903", "015904", "015905", "015906", "015907", "016928", "016929", "016930", "016931", "016932", "016933", "016934", "016935", "016936", "016937", "016938", "016939", "016940", "016941", "016942", "016943", "016944", "016945", "016946", "016947", "016948", "016949", "016950", "016951", "016952", "016953", "016954", "016955", "016956", "016957", "016958", "016959", "016960", "016961", "016962", "016963", "016964", "016965", "016966", "016967", "016968", "016969", "016970", "016971", "016972", "016973", "016974", "016975", "016976", "016977", "016978", "016979", "016980", "016981", "016982", "016983", "016984", "016985", "016986", "016987", "016988", "016989", "016990", "016991", "016992", "016993", "016994", "016995", "016996", "016997", "016998", "016999", "017000", "017001", "017002", "017003", "017004", "017005", "017006", "017007", "017008", "017009", "017010", "017011", "017012", "017013", "017014", "017015", "017016", "017017", "017018", "017019", "017020", "017021", "017022", "017023", "017024", "017025", "017026", "017027", "017028", "017029", "017030", "017031", "017032", "017033", "017034", "017035", "017036", "017037", "017038", "017039", "017040", "017041", "017042", "017043", "017044", "017045", "017046", "017047", "017048", "017049", "017050", "017051", "017052", "017053", "017054", "017055", "017056", "017057", "017058", "017059", "017060", "017061", "017062", "017063", "017064", "017065", "017066", "017067", "017068", "017069", "017070", "017071", "017072", "017073", "017074", "017075", "017076", "017077", "017078", "017079", "017080", "017081", "017082", "017083", "017084", "017085", "017086", "017087", "017088", "017089", "017090", "017091", "017092", "017093", "017094", "017095", "017096", "017097", "017098", "017099", "017100", "017101", "017102", "017103", "017104", "017105", "017106", "017107", "017108", "017109", "017110", "017111", "017112", "017113", "017114", "017115", "017116", "017117", "017118", "017119", "017120", "017121", "017122", "017123", "017124", "017125", "017126", "017127", "017128", "017129", "017130", "017131", "017132", "017133", "017134", "017135", "017136", "017137", "017138", "017139", "017140", "017141", "017142", "017143", "017144", "017145", "017146", "017147", "017148", "017149", "017150", "017151", "017152", "017153", "017154", "017155", "017156", "017157", "017158", "017159", "017160", "017161", "017162", "017163", "017164", "017165", "017166", "017167", "017168", "017169", "017170", "017171", "017172", "017173", "017174", "017175", "017176", "017177", "017178", "017179", "017180", "017181", "017182", "017183", "017184", "017185", "017186", "017187", "017188", "017189", "017190", "017191", "017192", "017193", "017194", "017195", "017196", "017197", "017198", "017199", "017200", "017201", "017202", "017203", "017204", "017205", "017206", "017207", "017208", "017209", "017210", "017211", "017212", "017213", "017214", "017215", "017216", "017217", "017218", "017219", "017220", "017221", "017222", "017223", "017224", "017225", "017226", "017227", "017228", "017229", "017230", "017231", "017232", "017233", "017234", "017235", "017236", "017237", "017238", "017239", "017240", "017241", "017242", "017243", "017244", "017245", "017246", "017247", "017248", "017249", "017250", "017251", "017252", "017253", "017254", "017255", "017256", "017257", "017258", "017259", "017260", "017261", "017262", "017263", "017264", "017265", "017266", "017267", "017268", "017269", "017270", "017271", "017272", "017273", "017274", "017275", "017276", "017277", "017278", "017279", "017280", "017281", "017282", "017283", "017284", "017285", "017286", "017287", "017288", "017289", "017290", "017291", "017292", "017293", "017294", "017295", "017296", "017297", "017298", "017299", "017300", "017301", "017302", "017303", "017304", "017305", "017306", "017307"], "val": ["000869", "000870", "000871", "000872", "000873", "000874", "000875", "000876", "000877", "000878", "000879", "000880", "000881", "000882", "000883", "000884", "000885", "000886", "000887", "000888", "000889", "000890", "000891", "000892", "000893", "000894", "000895", "000896", "000897", "000898", "000899", "000900", "000901", "000902", "000903", "000904", "000905", "000906", "000907", "000908", "000909", "000910", "000911", "000912", "000913", "000914", "000915", "000916", "000917", "000918", "000919", "000920", "000921", "000922", "000923", "000924", "000925", "000926", "000927", "000928", "000929", "000930", "000931", "000932", "000933", "000934", "000935", "000936", "000937", "000938", "000939", "000940", "000941", "000942", "000943", "000944", "000945", "000946", "000947", "000948", "000949", "000950", "000951", "000952", "000953", "000954", "000955", "000956", "000957", "000958", "000959", "000960", "000961", "000962", "000963", "000964", "000965", "000966", "000967", "000968", "000969", "000970", "000971", "000972", "000973", "000974", "000975", "000976", "000977", "000978", "000979", "000980", "000981", "000982", "000983", "000984", "000985", "000986", "000987", "000988", "000989", "000990", "000991", "000992", "000993", "000994", "000995", "000996", "000997", "000998", "000999", "001000", "001001", "001002", "001003", "001004", "001005", "001006", "001007", "001008", "001009", "001010", "001011", "001012", "001013", "001014", "001015", "001016", "001017", "001018", "001019", "001020", "001021", "001022", "001023", "001024", "001025", "001026", "001027", "001028", "001029", "001030", "001031", "001032", "001033", "001034", "001035", "001036", "001037", "001038", "001039", "001040", "001041", "001042", "001043", "001044", "001045", "001046", "001047", "001048", "001049", "001050", "001051", "001052", "001053", "001054", "001055", "001056", "001057", "001058", "001059", "001060", "001061", "001062", "001063", "001064", "001065", "001066", "001067", "001068", "001069", "001070", "001071", "001072", "001073", "001074", "001075", "001076", "001077", "001715", "001716", "001717", "001718", "001719", "001720", "001721", "001722", "001723", "001724", "001725", "001726", "001727", "001728", "001729", "001730", "001731", "001732", "001733", "001734", "001735", "001736", "001737", "001738", "001739", "001740", "001741", "001742", "001743", "001744", "001745", "001746", "001747", "001748", "001749", "001750", "001751", "001752", "001753", "001754", "001755", "001756", "001757", "001758", "001759", "001760", "001761", "001762", "001763", "001764", "001765", "001766", "001767", "001768", "001769", "001770", "001771", "001772", "001773", "001774", "001775", "001776", "001777", "001778", "001779", "001780", "001781", "001782", "001783", "001784", "001785", "001786", "001787", "001788", "001789", "001790", "001791", "001792", "001793", "001794", "001795", "001796", "001797", "001798", "001799", "001800", "001801", "001802", "001803", "001804", "001805", "001806", "001807", "001808", "001809", "001810", "001811", "001812", "001813", "001814", "001815", "001816", "001817", "001818", "001819", "001820", "001821", "001822", "001823", "001824", "001825", "001826", "001827", "001828", "001829", "001830", "001831", "001832", "001833", "001834", "001835", "001836", "001837", "001838", "001839", "001840", "001841", "001842", "001843", "001844", "001845", "001846", "001847", "001848", "001849", "001850", "001851", "001852", "001853", "001854", "001855", "001856", "001857", "001858", "001859", "001860", "001861", "001862", "001863", "001864", "002862", "002863", "002864", "002865", "002866", "002867", "002868", "002869", "002870", "002871", "002872", "002873", "002874", "002875", "002876", "002877", "002878", "002879", "002880", "002881", "002882", "002883", "002884", "002885", "002886", "002887", "002888", "002889", "002890", "002891", "002892", "002893", "002894", "002895", "002896", "002897", "002898", "002899", "002900", "002901", "002902", "002903", "002904", "002905", "002906", "002907", "002908", "002909", "002910", "002911", "002912", "002913", "002914", "002915", "002916", "002917", "002918", "002919", "002920", "002921", "002922", "002923", "002924", "002925", "002926", "002927", "002928", "002929", "002930", "002931", "002932", "002933", "002934", "002935", "002936", "002937", "002938", "002939", "002940", "002941", "002942", "002943", "002944", "002945", "002946", "002947", "002948", "002949", "002950", "002951", "002952", "002953", "002954", "002955", "002956", "002957", "002958", "002959", "002960", "002961", "002962", "002963", "002964", "002965", "002966", "002967", "002968", "002969", "002970", "002971", "002972", "002973", "002974", "002975", "002976", "002977", "002978", "002979", "002980", "002981", "002982", "002983", "002984", "002985", "002986", "002987", "002988", "002989", "002990", "002991", "002992", "002993", "002994", "002995", "002996", "002997", "002998", "002999", "003000", "003001", "003002", "003003", "003004", "003005", "003006", "003007", "003008", "003009", "003010", "003011", "003012", "003013", "003014", "003015", "003016", "003017", "003018", "003019", "003020", "003021", "003022", "003023", "003024", "003025", "003026", "003027", "003028", "003029", "003030", "003031", "003032", "003033", "003034", "003035", "003036", "003037", "003038", "003039", "003040", "003041", "003042", "003043", "003044", "003045", "003046", "003047", "003048", "003049", "003050", "003051", "003052", "003053", "003054", "003055", "003056", "003057", "003058", "003059", "003060", "003061", "003062", "003063", "003064", "003065", "003066", "003067", "003068", "003069", "003070", "003071", "003072", "003073", "003074", "003075", "003076", "003077", "003078", "003079", "003080", "003081", "003082", "003083", "003084", "003085", "003086", "003087", "003088", "003089", "003090", "003091", "003092", "003093", "003094", "003095", "003096", "003097", "003098", "003099", "003100", "003101", "003102", "003103", "003104", "003105", "003106", "003107", "003108", "003109", "003110", "003111", "003112", "003113", "003114", "003115", "003116", "003117", "003118", "003119", "003120", "003121", "003122", "003123", "003124", "003125", "003126", "003127", "003128", "003129", "003130", "003131", "003132", "003133", "003134", "003135", "003136", "003137", "003138", "003139", "003140", "003141", "003142", "003143", "003144", "003145", "003146", "003147", "003148", "003149", "003150", "003151", "003152", "003153", "003154", "003155", "003156", "003157", "003158", "003159", "003160", "003161", "003162", "003163", "003164", "003165", "003166", "003167", "003168", "003169", "003170", "003171", "003172", "003173", "003174", "003175", "003176", "003177", "003178", "003179", "003180", "003181", "003182", "003183", "003184", "003185", "003186", "003187", "003188", "003189", "003190", "003191", "003192", "003193", "003194", "003195", "003196", "003197", "003198", "003199", "003200", "003201", "003202", "003203", "003204", "003205", "003206", "003207", "003208", "003209", "003210", "003371", "003372", "003373", "003374", "003375", "003376", "003377", "003378", "003379", "003380", "003381", "003382", "003383", "003384", "003385", "003386", "003387", "003388", "003389", "003390", "003391", "003392", "003393", "003394", "003395", "003396", "003397", "003398", "003399", "003400", "003401", "003402", "003403", "003404", "003405", "003406", "003407", "003408", "003409", "003410", "003411", "003412", "003413", "003414", "003415", "003416", "003417", "003418", "003419", "003420", "003421", "003422", "003423", "003424", "003425", "003426", "003427", "003428", "003429", "003430", "003431", "003432", "003433", "003434", "003435", "003436", "003437", "003438", "003439", "003440", "003441", "003442", "003443", "003444", "003445", "003446", "003447", "003448", "003449", "003450", "003451", "003452", "003453", "003454", "003455", "003456", "003457", "003458", "003459", "003460", "003461", "003462", "003463", "003464", "003465", "003466", "003467", "003468", "003469", "003470", "003471", "003472", "003473", "003474", "003475", "003476", "003477", "003478", "003479", "003480", "003481", "003482", "003483", "003484", "003485", "003486", "003487", "003488", "003489", "003490", "003861", "003862", "003863", "003864", "003865", "003866", "003867", "003868", "003869", "003870", "003871", "003872", "003873", "003874", "003875", "003876", "003877", "003878", "003879", "003880", "003881", "003882", "003883", "003884", "003885", "003886", "003887", "003888", "003889", "003890", "003891", "003892", "003893", "003894", "003895", "003896", "003897", "003898", "003899", "003900", "003901", "003902", "003903", "003904", "003905", "003906", "003907", "003908", "003909", "003910", "003911", "003912", "003913", "003914", "003915", "003916", "003917", "003918", "003919", "003920", "003921", "003922", "003923", "003924", "003925", "003926", "003927", "003928", "003929", "003930", "003931", "003932", "003933", "003934", "003935", "003936", "003937", "003938", "003939", "003940", "003941", "003942", "003943", "003944", "003945", "003946", "003947", "003948", "003949", "003950", "003951", "003952", "003953", "003954", "003955", "003956", "003957", "003958", "003959", "003960", "003961", "003962", "003963", "003964", "003965", "003966", "003967", "003968", "003969", "003970", "003971", "003972", "003973", "003974", "003975", "003976", "003977", "003978", "003979", "003980", "003981", "003982", "003983", "003984", "003985", "003986", "003987", "003988", "003989", "003990", "003991", "003992", "003993", "003994", "003995", "003996", "003997", "003998", "003999", "004000", "004001", "004002", "004003", "004004", "004005", "004006", "004007", "004008", "004009", "004010", "004011", "004012", "004013", "004014", "004015", "004016", "004017", "004018", "004019", "004020", "004021", "004022", "004023", "004024", "004025", "004026", "004027", "004028", "004029", "004030", "004031", "004032", "004033", "004034", "004035", "004036", "004037", "004038", "004039", "004040", "004041", "004042", "004043", "004044", "004045", "004046", "004047", "004048", "004049", "004050", "004051", "004052", "004053", "004054", "004055", "004056", "004057", "004058", "004059", "004060", "004061", "004062", "004063", "004064", "004065", "004066", "004067", "004068", "004069", "004070", "004071", "004072", "004073", "004074", "004075", "004076", "004077", "004078", "004079", "004080", "004081", "004082", "004083", "004084", "004085", "004086", "004087", "004088", "004089", "004090", "004091", "004092", "004093", "004094", "004095", "004096", "004097", "004098", "004099", "004100", "004101", "004102", "004103", "004104", "004105", "004106", "004107", "004108", "004109", "004110", "004111", "004112", "004113", "004114", "004115", "004116", "004117", "004118", "004119", "004120", "004121", "004122", "004123", "004124", "004125", "004126", "004127", "004128", "004129", "004130", "004131", "004132", "004133", "004134", "004135", "004136", "004137", "004138", "004139", "004140", "004141", "004142", "004143", "004144", "004145", "004146", "004147", "004148", "004149", "004150", "004151", "004152", "004153", "004154", "004155", "004156", "004157", "004158", "004159", "004160", "004161", "004162", "004163", "004164", "004165", "004166", "004167", "004168", "004169", "004170", "004171", "004172", "004173", "004174", "004175", "004176", "004177", "004178", "004179", "004180", "004181", "004182", "004183", "004184", "004185", "004186", "004187", "004188", "004189", "004190", "004191", "004192", "004193", "004194", "004195", "004196", "004197", "004198", "004199", "004200", "004201", "004202", "004203", "004204", "004205", "004206", "004207", "004208", "004209", "004210", "004211", "004212", "004213", "004214", "004215", "004216", "004217", "004218", "004219", "004220", "004221", "004222", "004223", "004224", "004225", "004226", "004227", "004228", "004229", "004230", "004231", "004232", "004233", "004234", "004235", "004236", "004237", "004238", "004239", "004240", "004241", "004242", "004243", "004244", "004245", "004246", "004247", "004248", "004249", "004250", "004251", "004252", "004253", "004254", "004255", "004256", "004257", "004258", "004259", "004260", "007626", "007627", "007628", "007629", "007630", "007631", "007632", "007633", "007634", "007635", "007636", "007637", "007638", "007639", "007640", "007641", "007642", "007643", "007644", "007645", "007646", "007647", "007648", "007649", "007650", "007651", "007652", "007653", "007654", "007655", "007656", "007657", "007658", "007659", "007660", "007661", "007662", "007663", "007664", "007665", "007666", "007667", "007668", "007669", "007670", "007671", "007672", "007673", "007674", "007675", "007676", "007677", "007678", "007679", "007680", "007681", "007682", "007683", "007684", "007685", "007686", "007687", "007688", "007689", "007690", "007691", "007692", "007693", "007694", "007695", "007696", "007697", "007698", "007699", "007700", "007701", "007702", "007703", "007704", "007705", "007706", "007707", "007708", "007709", "007710", "007711", "007712", "007713", "007714", "007715", "007716", "007717", "007718", "007719", "007720", "007721", "007722", "007723", "007724", "007725", "007726", "007727", "007728", "007729", "007730", "007731", "007732", "007733", "007734", "007735", "007736", "007737", "007738", "007739", "007740", "007741", "007742", "007743", "007744", "007745", "007746", "007747", "007748", "007749", "007750", "007751", "007752", "007753", "007754", "007755", "007756", "007757", "007758", "007759", "007760", "007761", "007762", "007763", "007764", "007765", "007766", "007767", "007768", "007769", "007770", "007771", "007772", "007773", "007774", "007775", "007776", "007777", "007778", "007779", "007780", "007781", "007782", "007783", "007784", "007785", "007786", "007787", "007788", "007789", "007790", "007791", "007792", "007793", "007794", "007795", "009361", "009362", "009363", "009364", "009365", "009366", "009367", "009368", "009369", "009370", "009371", "009372", "009373", "009374", "009375", "009376", "009377", "009378", "009379", "009380", "009381", "009382", "009383", "009384", "009385", "009386", "009387", "009388", "009389", "009390", "009391", "009392", "009393", "009394", "009395", "009396", "009397", "009398", "009399", "009400", "009401", "009402", "009403", "009404", "009405", "009406", "009407", "009408", "009409", "009410", "009411", "009412", "009413", "009414", "009415", "009416", "009417", "009418", "009419", "009420", "009421", "009422", "009423", "009424", "009425", "009426", "009427", "009428", "009429", "009430", "009431", "009432", "009433", "009434", "009435", "009436", "009437", "009438", "009439", "009440", "009441", "009442", "009443", "009444", "009445", "009446", "009447", "009448", "009449", "009450", "009451", "009452", "009453", "009454", "009455", "009456", "009457", "009458", "009459", "009460", "009461", "009462", "009463", "009464", "009465", "009466", "009467", "009468", "009469", "009470", "009471", "009472", "009473", "009474", "009475", "009476", "009477", "009478", "009479", "009480", "009481", "009482", "009483", "009484", "009485", "009486", "009487", "009488", "009489", "009490", "009491", "009492", "009493", "009494", "009495", "009496", "009497", "009498", "009499", "009500", "010481", "010482", "010483", "010484", "010485", "010486", "010487", "010488", "010489", "010490", "010491", "010492", "010493", "010494", "010495", "010496", "010497", "010498", "010499", "010500", "010501", "010502", "010503", "010504", "010505", "010506", "010507", "010508", "010509", "010510", "010511", "010512", "010513", "010514", "010515", "010516", "010517", "010518", "010519", "010520", "010521", "010522", "010523", "010524", "010525", "010526", "010527", "010528", "010529", "010530", "010531", "010532", "010533", "010534", "010535", "010536", "010537", "010538", "010539", "010540", "010541", "010542", "010543", "010544", "010545", "010546", "010547", "010548", "010549", "010550", "010551", "010552", "010553", "010554", "010555", "010556", "010557", "010558", "010559", "010560", "010561", "010562", "010563", "010564", "010565", "010566", "010567", "010568", "010569", "010570", "010571", "010572", "010573", "010574", "010575", "010576", "010577", "010578", "010579", "010580", "010581", "010582", "010583", "010584", "010585", "010586", "010587", "010588", "010589", "010590", "010591", "010592", "010593", "010594", "010595", "010596", "010597", "010598", "010599", "010600", "010601", "010602", "010603", "010604", "010605", "010606", "010607", "010608", "010609", "010610", "010611", "010612", "010613", "010614", "010615", "010616", "010617", "010618", "010619", "010620", "010621", "010622", "010623", "010624", "010625", "010626", "010627", "010628", "010629", "010630", "010631", "010632", "010633", "010634", "010635", "010636", "010637", "010638", "010639", "010640", "010641", "010642", "010643", "010644", "010645", "010646", "010647", "010648", "010649", "010650", "010651", "010652", "010653", "010654", "010655", "010656", "010657", "010658", "010659", "010660", "010661", "010662", "010663", "010664", "010665", "010666", "010667", "010668", "010669", "010670", "010671", "010672", "010673", "010674", "010675", "010676", "010677", "010678", "010679", "010680", "010681", "010682", "010683", "010684", "010685", "010686", "010687", "010688", "010689", "010690", "010691", "010692", "010693", "010694", "010695", "010696", "010697", "010698", "010699", "010700", "010701", "010702", "010703", "010704", "010705", "010706", "010707", "010708", "010709", "010710", "010711", "010712", "010713", "010714", "010715", "010716", "010717", "010718", "010719", "010720", "010721", "010722", "010723", "010724", "010725", "010726", "010727", "010728", "010729", "010730", "010731", "010732", "010733", "010734", "010735", "010736", "010737", "010738", "010739", "010740", "010741", "010742", "010743", "010744", "010745", "010746", "010747", "010748", "010749", "010750", "010751", "010752", "010753", "010754", "010755", "010756", "010757", "010758", "010759", "010760", "010761", "010762", "010763", "010764", "010765", "010766", "010767", "010768", "010769", "010770", "010771", "010772", "010773", "010774", "010775", "010776", "010777", "010778", "010779", "010780", "010781", "010782", "010783", "010784", "010785", "010786", "010787", "010788", "010789", "010790", "010791", "010792", "010793", "010794", "010795", "010796", "010797", "010798", "010799", "010800", "010801", "010802", "010803", "010804", "010805", "010806", "010807", "010808", "010809", "010810", "010811", "010812", "010813", "010814", "010815", "010816", "010817", "010818", "010819", "010820", "010821", "010822", "010823", "010824", "010825", "010826", "010827", "010828", "010829", "010830", "010831", "010832", "010833", "010834", "010835", "010836", "010837", "010838", "010839", "010840", "010841", "010842", "010843", "010844", "010845", "010846", "010847", "010848", "010849", "010850", "010851", "010852", "010853", "010854", "010855", "010856", "010857", "010858", "010859", "010860", "010861", "010862", "010863", "010864", "010865", "010866", "010867", "010868", "010869", "010870", "010871", "010872", "010873", "010874", "010875", "010876", "010877", "010878", "010879", "010880", "010881", "010882", "010883", "010884", "010885", "010886", "010887", "010888", "010889", "010890", "010891", "010892", "010893", "010894", "010895", "010896", "010897", "010898", "010899", "010900", "010901", "010902", "010903", "010904", "010905", "010906", "010907", "010908", "010909", "010910", "010911", "010912", "010913", "010914", "010915", "010916", "010917", "010918", "010919", "010920", "010921", "010922", "010923", "010924", "010925", "010926", "010927", "010928", "010929", "010930", "010931", "010932", "010933", "010934", "010935", "010936", "010937", "010938", "010939", "010940", "011151", "011152", "011153", "011154", "011155", "011156", "011157", "011158", "011159", "011160", "011161", "011162", "011163", "011164", "011165", "011166", "011167", "011168", "011169", "011170", "011171", "011172", "011173", "011174", "011175", "011176", "011177", "011178", "011179", "011180", "011181", "011182", "011183", "011184", "011185", "011186", "011187", "011188", "011189", "011190", "011191", "011192", "011193", "011194", "011195", "011196", "011197", "011198", "011199", "011200", "011201", "011202", "011203", "011204", "011205", "011206", "011207", "011208", "011209", "011210", "011211", "011212", "011213", "011214", "011215", "011216", "011217", "011218", "011219", "011220", "011221", "011222", "011223", "011224", "011225", "011226", "011227", "011228", "011229", "011230", "011231", "011232", "011233", "011234", "011235", "011236", "011237", "011238", "011239", "011240", "011241", "011242", "011243", "011244", "011245", "011246", "011247", "011248", "011249", "011250", "011251", "011252", "011253", "011254", "011255", "011256", "011257", "011258", "011259", "011260", "011451", "011452", "011453", "011454", "011455", "011456", "011457", "011458", "011459", "011460", "011461", "011462", "011463", "011464", "011465", "011466", "011467", "011468", "011469", "011470", "011471", "011472", "011473", "011474", "011475", "011476", "011477", "011478", "011479", "011480", "011481", "011482", "011483", "011484", "011485", "011486", "011487", "011488", "011489", "011490", "011491", "011492", "011493", "011494", "011495", "011496", "011497", "011498", "011499", "011500", "011501", "011502", "011503", "011504", "011505", "011506", "011507", "011508", "011509", "011510", "011511", "011512", "011513", "011514", "011515", "011516", "011517", "011518", "011519", "011520", "011521", "011522", "011523", "011524", "011525", "011526", "011527", "011528", "011529", "011530", "011531", "011532", "011533", "011534", "011535", "011536", "011537", "011538", "011539", "011540", "011541", "011542", "011543", "011544", "011545", "011546", "011547", "011548", "011549", "011550", "011551", "011552", "011553", "011554", "011555", "011556", "011557", "011558", "011559", "011560", "011561", "011562", "011563", "011564", "011565", "011566", "011567", "011568", "011569", "011570", "011571", "011572", "011573", "011574", "011575", "011576", "011577", "011578", "011579", "011580", "011581", "011582", "011583", "011584", "011585", "011586", "011587", "011588", "011589", "011590", "011591", "011592", "011593", "011594", "011595", "011596", "011597", "011598", "011599", "011600", "011601", "011602", "011603", "011604", "011605", "011606", "011607", "011608", "011609", "011610", "011611", "011612", "011613", "011614", "011615", "011616", "011617", "011618", "011619", "011620", "011621", "011622", "011623", "011624", "011625", "011626", "011627", "011628", "011629", "011630", "011631", "011632", "011633", "011634", "011635", "011636", "011637", "011638", "011639", "011640", "013210", "013211", "013212", "013213", "013214", "013215", "013216", "013217", "013218", "013219", "013220", "013221", "013222", "013223", "013224", "013225", "013226", "013227", "013228", "013229", "013230", "013231", "013232", "013233", "013234", "013235", "013236", "013237", "013238", "013239", "013240", "013241", "013242", "013243", "013244", "013245", "013246", "013247", "013248", "013249", "013250", "013251", "013252", "013253", "013254", "013255", "013256", "013257", "013258", "013259", "013260", "013261", "013262", "013263", "013264", "013265", "013266", "013267", "013268", "013269", "013270", "013271", "013272", "013273", "013274", "013275", "013276", "013277", "013278", "013279", "013280", "013281", "013282", "013283", "013284", "013285", "013286", "013287", "013288", "013289", "013290", "013291", "013292", "013293", "013294", "013295", "013296", "013297", "013298", "013299", "013300", "013301", "013302", "013303", "013304", "013305", "013306", "013307", "013308", "013309", "013310", "013311", "013312", "013313", "013314", "013315", "013316", "013317", "013318", "013319", "013320", "013321", "013322", "013323", "013324", "013325", "013326", "013327", "013328", "013329", "013330", "013331", "013332", "013333", "013334", "013335", "013336", "013337", "013338", "013339", "013340", "013341", "013342", "013343", "013344", "013345", "013346", "013347", "013348", "013349", "013350", "013351", "013352", "013353", "013354", "013355", "013356", "013357", "013358", "013359", "013360", "013361", "013362", "013363", "013364", "013365", "013366", "013367", "013368", "013369", "013370", "013371", "013372", "013373", "013374", "013375", "013376", "013377", "013378", "013379", "013380", "013381", "013382", "013383", "013384", "013385", "013386", "013387", "013388", "013389", "013390", "013391", "013392", "013393", "013394", "013395", "013396", "013397", "013398", "013399", "013400", "013401", "013402", "013403", "013404", "013405", "013406", "013407", "013408", "013409", "013410", "013411", "013412", "013413", "013414", "013415", "013416", "013417", "013418", "013419", "013700", "013701", "013702", "013703", "013704", "013705", "013706", "013707", "013708", "013709", "013710", "013711", "013712", "013713", "013714", "013715", "013716", "013717", "013718", "013719", "013720", "013721", "013722", "013723", "013724", "013725", "013726", "013727", "013728", "013729", "013730", "013731", "013732", "013733", "013734", "013735", "013736", "013737", "013738", "013739", "013740", "013741", "013742", "013743", "013744", "013745", "013746", "013747", "013748", "013749", "013750", "013751", "013752", "013753", "013754", "013755", "013756", "013757", "013758", "013759", "013760", "013761", "013762", "013763", "013764", "013765", "013766", "013767", "013768", "013769", "013770", "013771", "013772", "013773", "013774", "013775", "013776", "013777", "013778", "013779", "013780", "013781", "013782", "013783", "013784", "013785", "013786", "013787", "013788", "013789", "013790", "013791", "013792", "013793", "013794", "013795", "013796", "013797", "013798", "013799", "013800", "013801", "013802", "013803", "013804", "013805", "013806", "013807", "013808", "013809", "013810", "013811", "013812", "013813", "013814", "013815", "013816", "013817", "013818", "013819", "013820", "013821", "013822", "013823", "013824", "013825", "013826", "013827", "013828", "013829", "013830", "013831", "013832", "013833", "013834", "013835", "013836", "013837", "013838", "013839", "013840", "013841", "013842", "013843", "013844", "013845", "013846", "013847", "013848", "013849", "013850", "013851", "013852", "013853", "013854", "013855", "013856", "013857", "013858", "013859", "013860", "013861", "013862", "013863", "013864", "013865", "013866", "013867", "013868", "013869", "013870", "013871", "013872", "013873", "013874", "013875", "013876", "013877", "013878", "013879", "013880", "013881", "013882", "013883", "013884", "013885", "013886", "013887", "013888", "013889", "013938", "013939", "013940", "013941", "013942", "013943", "013944", "013945", "013946", "013947", "013948", "013949", "013950", "013951", "013952", "013953", "013954", "013955", "013956", "013957", "013958", "013959", "013960", "013961", "013962", "013963", "013964", "013965", "013966", "013967", "013968", "013969", "013970", "013971", "013972", "013973", "013974", "013975", "013976", "013977", "013978", "013979", "013980", "013981", "013982", "013983", "013984", "013985", "013986", "013987", "013988", "013989", "013990", "013991", "013992", "013993", "013994", "013995", "013996", "013997", "013998", "013999", "014000", "014001", "014002", "014003", "014004", "014005", "014006", "014007", "014008", "014009", "014010", "014011", "014012", "014013", "014014", "014015", "014016", "014017", "014018", "014019", "014020", "014021", "014022", "014023", "014024", "014025", "014026", "014027", "014028", "014029", "014030", "014031", "014032", "014033", "014034", "014035", "014036", "014037", "015408", "015409", "015410", "015411", "015412", "015413", "015414", "015415", "015416", "015417", "015418", "015419", "015420", "015421", "015422", "015423", "015424", "015425", "015426", "015427", "015428", "015429", "015430", "015431", "015432", "015433", "015434", "015435", "015436", "015437", "015438", "015439", "015440", "015441", "015442", "015443", "015444", "015445", "015446", "015447", "015448", "015449", "015450", "015451", "015452", "015453", "015454", "015455", "015456", "015457", "015458", "015459", "015460", "015461", "015462", "015463", "015464", "015465", "015466", "015467", "015468", "015469", "015470", "015471", "015472", "015473", "015474", "015475", "015476", "015477", "015478", "015479", "015480", "015481", "015482", "015483", "015484", "015485", "015486", "015487", "015488", "015489", "015490", "015491", "015492", "015493", "015494", "015495", "015496", "015497", "015498", "015499", "015500", "015501", "015502", "015503", "015504", "015505", "015506", "015507", "015508", "015509", "015510", "015511", "015512", "015513", "015514", "015515", "015516", "015517", "015518", "015519", "015520", "015521", "015522", "015523", "015524", "015525", "015526", "015527", "015528", "015529", "015530", "015531", "015532", "015533", "015534", "015535", "015536", "015537", "015538", "015539", "015540", "015541", "015542", "015543", "015544", "015545", "015546", "015547", "015548", "015549", "015550", "015551", "015552", "015553", "015554", "015555", "015556", "015557", "015558", "015559", "015560", "015561", "015562", "015563", "015564", "015565", "015566", "015567", "015568", "015569", "015570", "015571", "015572", "015573", "015574", "015575", "015576", "015577", "015578", "015579", "015580", "015581", "015582", "015583", "015584", "015585", "015586", "015587", "015588", "015589", "015590", "015591", "015592", "015593", "015594", "015595", "015596", "015597", "015598", "015599", "015600", "015601", "015602", "015603", "015604", "015605", "015606", "015607", "015608", "015609", "015610", "015611", "015612", "015613", "015614", "015615", "015616", "015617", "015618", "015619", "015620", "015621", "015622", "015623", "015624", "015625", "015626", "015627", "015628", "015629", "015630", "015631", "015632", "015633", "015634", "015635", "015636", "015637", "015638", "015639", "015640", "015641", "015642", "015643", "015644", "015645", "015646", "015647", "015648", "015649", "015650", "015651", "015652", "015653", "015654", "015655", "015656", "015657", "015658", "015659", "015660", "015661", "015662", "015663", "015664", "015665", "015666", "015667", "015668", "015669", "015670", "015671", "015672", "015673", "015674", "015675", "015676", "015677", "015678", "015679", "015680", "015681", "015682", "015683", "015684", "015685", "015686", "015687", "015688", "015689", "015690", "015691", "015692", "015693", "015694", "015695", "015696", "015697", "015698", "015699", "015700", "015701", "015702", "015703", "015704", "015705", "015706", "015707", "015708", "015709", "015710", "015711", "015712", "015713", "015714", "015715", "015716", "015717", "015718", "015719", "015720", "015721", "015722", "015723", "015724", "015725", "015726", "015727", "015728", "015729", "015730", "015731", "015732", "015733", "015734", "015735", "015736", "015737", "015738", "015739", "015740", "015741", "015742", "015743", "015744", "015745", "015746", "015747", "015748", "015749", "015750", "015751", "015752", "015753", "015754", "015755", "015756", "015757", "015758", "015759", "015760", "015761", "015762", "015763", "015764", "015765", "015766", "015767", "015908", "015909", "015910", "015911", "015912", "015913", "015914", "015915", "015916", "015917", "015918", "015919", "015920", "015921", "015922", "015923", "015924", "015925", "015926", "015927", "015928", "015929", "015930", "015931", "015932", "015933", "015934", "015935", "015936", "015937", "015938", "015939", "015940", "015941", "015942", "015943", "015944", "015945", "015946", "015947", "015948", "015949", "015950", "015951", "015952", "015953", "015954", "015955", "015956", "015957", "015958", "015959", "015960", "015961", "015962", "015963", "015964", "015965", "015966", "015967", "015968", "015969", "015970", "015971", "015972", "015973", "015974", "015975", "015976", "015977", "015978", "015979", "015980", "015981", "015982", "015983", "015984", "015985", "015986", "015987", "015988", "015989", "015990", "015991", "015992", "015993", "015994", "015995", "015996", "015997", "015998", "015999", "016000", "016001", "016002", "016003", "016004", "016005", "016006", "016007", "016008", "016009", "016010", "016011", "016012", "016013", "016014", "016015", "016016", "016017", "016018", "016019", "016020", "016021", "016022", "016023", "016024", "016025", "016026", "016027", "016028", "016029", "016030", "016031", "016032", "016033", "016034", "016035", "016036", "016037", "016038", "016039", "016040", "016041", "016042", "016043", "016044", "016045", "016046", "016047", "016048", "016049", "016050", "016051", "016052", "016053", "016054", "016055", "016056", "016057", "016058", "016059", "016060", "016061", "016062", "016063", "016064", "016065", "016066", "016067", "016068", "016069", "016070", "016071", "016072", "016073", "016074", "016075", "016076", "016077", "016078", "016079", "016080", "016081", "016082", "016083", "016084", "016085", "016086", "016087", "016088", "016089", "016090", "016091", "016092", "016093", "016094", "016095", "016096", "016097", "016098", "016099", "016100", "016101", "016102", "016103", "016104", "016105", "016106", "016107", "016108", "016109", "016110", "016111", "016112", "016113", "016114", "016115", "016116", "016117", "016118", "016119", "016120", "016121", "016122", "016123", "016124", "016125", "016126", "016127", "016128", "016129", "016130", "016131", "016132", "016133", "016134", "016135", "016136", "016137", "016138", "016139", "016140", "016141", "016142", "016143", "016144", "016145", "016146", "016147", "016148", "016149", "016150", "016151", "016152", "016153", "016154", "016155", "016156", "016157", "016158", "016159", "016160", "016161", "016162", "016163", "016164", "016165", "016166", "016167", "016168", "016169", "016170", "016171", "016172", "016173", "016174", "016175", "016176", "016177", "016178", "016179", "016180", "016181", "016182", "016183", "016184", "016185", "016186", "016187", "016188", "016189", "016190", "016191", "016192", "016193", "016194", "016195", "016196", "016197", "016198", "016199", "016200", "016201", "016202", "016203", "016204", "016205", "016206", "016207", "016208", "016209", "016210", "016211", "016212", "016213", "016214", "016215", "016216", "016217", "016218", "016219", "016220", "016221", "016222", "016223", "016224", "016225", "016226", "016227", "016228", "016229", "016230", "016231", "016232", "016233", "016234", "016235", "016236", "016237", "016238", "016239", "016240", "016241", "016242", "016243", "016244", "016245", "016246", "016247", "016248", "016249", "016250", "016251", "016252", "016253", "016254", "016255", "016256", "016257", "016258", "016259", "016260", "016261", "016262", "016263", "016264", "016265", "016266", "016267", "016698", "016699", "016700", "016701", "016702", "016703", "016704", "016705", "016706", "016707", "016708", "016709", "016710", "016711", "016712", "016713", "016714", "016715", "016716", "016717", "016718", "016719", "016720", "016721", "016722", "016723", "016724", "016725", "016726", "016727", "016728", "016729", "016730", "016731", "016732", "016733", "016734", "016735", "016736", "016737", "016738", "016739", "016740", "016741", "016742", "016743", "016744", "016745", "016746", "016747", "016748", "016749", "016750", "016751", "016752", "016753", "016754", "016755", "016756", "016757", "016758", "016759", "016760", "016761", "016762", "016763", "016764", "016765", "016766", "016767", "016768", "016769", "016770", "016771", "016772", "016773", "016774", "016775", "016776", "016777", "016778", "016779", "016780", "016781", "016782", "016783", "016784", "016785", "016786", "016787", "016788", "016789", "016790", "016791", "016792", "016793", "016794", "016795", "016796", "016797", "016798", "016799", "016800", "016801", "016802", "016803", "016804", "016805", "016806", "016807", "016808", "016809", "016810", "016811", "016812", "016813", "016814", "016815", "016816", "016817", "016818", "016819", "016820", "016821", "016822", "016823", "016824", "016825", "016826", "016827", "016828", "016829", "016830", "016831", "016832", "016833", "016834", "016835", "016836", "016837", "016838", "016839", "016840", "016841", "016842", "016843", "016844", "016845", "016846", "016847", "016848", "016849", "016850", "016851", "016852", "016853", "016854", "016855", "016856", "016857", "016858", "016859", "016860", "016861", "016862", "016863", "016864", "016865", "016866", "016867", "016868", "016869", "016870", "016871", "016872", "016873", "016874", "016875", "016876", "016877", "016878", "016879", "016880", "016881", "016882", "016883", "016884", "016885", "016886", "016887", "016888", "016889", "016890", "016891", "016892", "016893", "016894", "016895", "016896", "016897", "016898", "016899", "016900", "016901", "016902", "016903", "016904", "016905", "016906", "016907", "016908", "016909", "016910", "016911", "016912", "016913", "016914", "016915", "016916", "016917", "016918", "016919", "016920", "016921", "016922", "016923", "016924", "016925", "016926", "016927"], "test": ["001516", "001517", "001518", "001519", "001520", "001521", "001522", "001523", "001524", "001525", "001526", "001527", "001528", "001529", "001530", "001531", "001532", "001533", "001534", "001535", "001536", "001537", "001538", "001539", "001540", "001541", "001542", "001543", "001544", "001545", "001546", "001547", "001548", "001549", "001550", "001551", "001552", "001553", "001554", "001555", "001556", "001557", "001558", "001559", "001560", "001561", "001562", "001563", "001564", "001565", "001566", "001567", "001568", "001569", "001570", "001571", "001572", "001573", "001574", "001575", "001576", "001577", "001578", "001579", "001580", "001581", "001582", "001583", "001584", "001585", "001586", "001587", "001588", "001589", "001590", "001591", "001592", "001593", "001594", "001595", "001596", "001597", "001598", "001599", "001600", "001601", "001602", "001603", "001604", "001605", "001606", "001607", "001608", "001609", "001610", "001611", "001612", "001613", "001614", "001615", "001616", "001617", "001618", "001619", "001620", "001621", "001622", "001623", "001624", "001625", "001626", "001627", "001628", "001629", "001630", "001631", "001632", "001633", "001634", "001635", "001636", "001637", "001638", "001639", "001640", "001641", "001642", "001643", "001644", "001645", "001646", "001647", "001648", "001649", "001650", "001651", "001652", "001653", "001654", "001655", "001656", "001657", "001658", "001659", "001660", "001661", "001662", "001663", "001664", "001665", "001666", "001667", "001668", "001669", "001670", "001671", "001672", "001673", "001674", "001675", "001676", "001677", "001678", "001679", "001680", "001681", "001682", "001683", "001684", "001685", "001686", "001687", "001688", "001689", "001690", "001691", "001692", "001693", "001694", "001695", "001696", "001697", "001698", "001699", "001700", "001701", "001702", "001703", "001704", "001705", "001706", "001707", "001708", "001709", "001710", "001711", "001712", "001713", "001714", "002065", "002066", "002067", "002068", "002069", "002070", "002071", "002072", "002073", "002074", "002075", "002076", "002077", "002078", "002079", "002080", "002081", "002082", "002083", "002084", "002085", "002086", "002087", "002088", "002089", "002090", "002091", "002092", "002093", "002094", "002095", "002096", "002097", "002098", "002099", "002100", "002101", "002102", "002103", "002104", "002105", "002106", "002107", "002108", "002109", "002110", "002111", "002112", "002113", "002114", "002115", "002116", "002117", "002118", "002119", "002120", "002121", "002122", "002123", "002124", "002125", "002126", "002127", "002128", "002129", "002130", "002131", "002132", "002133", "002134", "002135", "002136", "002137", "002138", "002139", "002140", "002141", "002142", "002143", "002144", "002145", "002146", "002147", "002148", "002149", "002150", "002151", "002152", "002153", "002154", "002155", "002156", "002157", "002158", "002159", "002160", "002161", "002162", "002163", "002164", "002165", "002166", "002167", "002168", "002169", "002170", "002171", "002172", "002173", "002174", "002175", "002176", "002177", "002178", "002179", "002180", "002181", "002182", "002183", "002184", "002185", "002186", "002187", "002188", "002189", "002190", "002191", "002192", "002193", "002194", "002195", "002196", "002197", "002198", "002199", "002200", "002201", "002202", "002203", "002204", "002205", "002206", "002207", "002208", "002209", "002210", "002211", "002212", "002213", "002214", "002215", "002216", "002217", "002218", "002219", "002220", "002221", "002222", "002223", "002224", "002225", "002226", "002227", "002228", "002229", "002230", "002231", "002232", "002233", "002234", "002235", "002236", "002237", "002238", "002239", "002240", "002241", "002242", "002243", "002383", "002384", "002385", "002386", "002387", "002388", "002389", "002390", "002391", "002392", "002393", "002394", "002395", "002396", "002397", "002398", "002399", "002400", "002401", "002402", "002403", "002404", "002405", "002406", "002407", "002408", "002409", "002410", "002411", "002412", "002413", "002414", "002415", "002416", "002417", "002418", "002419", "002420", "002421", "002422", "002423", "002424", "002425", "002426", "002427", "002428", "002429", "002430", "002431", "002432", "002433", "002434", "002435", "002436", "002437", "002438", "002439", "002440", "002441", "002442", "002443", "002444", "002445", "002446", "002447", "002448", "002449", "002450", "002451", "002452", "002453", "002454", "002455", "002456", "002457", "002458", "002459", "002460", "002461", "002462", "002463", "002464", "002465", "002466", "002467", "002468", "002469", "002470", "002471", "002472", "002473", "002474", "002475", "002476", "002477", "002478", "002479", "002480", "002481", "002482", "002483", "002484", "002485", "002486", "002487", "002488", "002489", "002490", "002491", "002492", "002493", "002494", "002495", "002496", "002497", "002498", "002499", "002500", "002501", "002502", "002503", "002504", "002505", "002506", "002507", "002508", "002509", "002510", "002511", "002512", "002513", "002514", "002515", "002516", "002517", "002518", "002519", "002520", "002521", "002522", "002523", "002524", "002525", "002526", "002527", "002528", "002529", "002530", "002531", "002532", "002533", "002534", "002535", "002536", "002537", "002538", "002539", "002540", "002541", "002542", "002543", "002544", "002545", "002546", "002547", "002548", "002549", "002550", "002551", "002552", "002553", "002554", "002555", "002556", "002557", "002558", "002559", "002560", "002561", "002562", "002563", "002564", "002565", "002566", "002567", "002568", "002569", "002570", "002571", "002572", "002573", "002574", "002575", "002576", "002577", "002578", "002579", "002580", "002581", "002582", "002583", "002584", "002585", "002586", "002587", "002588", "002589", "002590", "002591", "002592", "002593", "002594", "002595", "002596", "002597", "002598", "002599", "002600", "002601", "002602", "002603", "002604", "002605", "002606", "002607", "002608", "002609", "002610", "002611", "002612", "002613", "002614", "002615", "002616", "002617", "002618", "002619", "002620", "002621", "002622", "002623", "002624", "002625", "002626", "002627", "002628", "002629", "002630", "002631", "002632", "002633", "002634", "002635", "002636", "002637", "002638", "002639", "002640", "002641", "002642", "002643", "002644", "002645", "002646", "002647", "002648", "002649", "002650", "002651", "002652", "002653", "002654", "002655", "002656", "002657", "002658", "002659", "002660", "002661", "002662", "002663", "002664", "002665", "002666", "002667", "002668", "002669", "002670", "002671", "002672", "002673", "002674", "002675", "002676", "002677", "002678", "002679", "002680", "002681", "002682", "002683", "002684", "002685", "002686", "002687", "002688", "002689", "002690", "002691", "002692", "002693", "002694", "002695", "002696", "002697", "002698", "002699", "002700", "002701", "002702", "002703", "002704", "002705", "002706", "002707", "002708", "002709", "002710", "002711", "002712", "002713", "002714", "002715", "002716", "002717", "002718", "002719", "002720", "002721", "002722", "002723", "002724", "002725", "002726", "002727", "002728", "002729", "002730", "002731", "002732", "002733", "002734", "002735", "002736", "002737", "002738", "002739", "002740", "002741", "002742", "002743", "002744", "002745", "002746", "002747", "002748", "002749", "002750", "002751", "002752", "002753", "002754", "002755", "002756", "002757", "002758", "002759", "002760", "002761", "002762", "002763", "002764", "002765", "002766", "002767", "002768", "002769", "002770", "002771", "002772", "002773", "002774", "002775", "002776", "002777", "002778", "002779", "002780", "002781", "002782", "002783", "002784", "002785", "002786", "002787", "002788", "002789", "002790", "002791", "002792", "002793", "002794", "002795", "002796", "002797", "002798", "002799", "002800", "002801", "002802", "002803", "002804", "002805", "002806", "002807", "002808", "002809", "002810", "002811", "002812", "002813", "002814", "002815", "002816", "002817", "002818", "002819", "002820", "002821", "002822", "002823", "002824", "002825", "002826", "002827", "002828", "002829", "002830", "002831", "002832", "002833", "002834", "002835", "002836", "002837", "002838", "002839", "002840", "002841", "002842", "002843", "002844", "002845", "002846", "002847", "002848", "002849", "002850", "002851", "002852", "002853", "002854", "002855", "002856", "002857", "002858", "002859", "002860", "002861", "003641", "003642", "003643", "003644", "003645", "003646", "003647", "003648", "003649", "003650", "003651", "003652", "003653", "003654", "003655", "003656", "003657", "003658", "003659", "003660", "003661", "003662", "003663", "003664", "003665", "003666", "003667", "003668", "003669", "003670", "003671", "003672", "003673", "003674", "003675", "003676", "003677", "003678", "003679", "003680", "003681", "003682", "003683", "003684", "003685", "003686", "003687", "003688", "003689", "003690", "003691", "003692", "003693", "003694", "003695", "003696", "003697", "003698", "003699", "003700", "003701", "003702", "003703", "003704", "003705", "003706", "003707", "003708", "003709", "003710", "003711", "003712", "003713", "003714", "003715", "003716", "003717", "003718", "003719", "003720", "003721", "003722", "003723", "003724", "003725", "003726", "003727", "003728", "003729", "003730", "003731", "003732", "003733", "003734", "003735", "003736", "003737", "003738", "003739", "003740", "003741", "003742", "003743", "003744", "003745", "003746", "003747", "003748", "003749", "003750", "003751", "003752", "003753", "003754", "003755", "003756", "003757", "003758", "003759", "003760", "003761", "003762", "003763", "003764", "003765", "003766", "003767", "003768", "003769", "003770", "003771", "003772", "003773", "003774", "003775", "003776", "003777", "003778", "003779", "003780", "003781", "003782", "003783", "003784", "003785", "003786", "003787", "003788", "003789", "003790", "003791", "003792", "003793", "003794", "003795", "003796", "003797", "003798", "003799", "003800", "003801", "003802", "003803", "003804", "003805", "003806", "003807", "003808", "003809", "003810", "003811", "003812", "003813", "003814", "003815", "003816", "003817", "003818", "003819", "003820", "003821", "003822", "003823", "003824", "003825", "003826", "003827", "003828", "003829", "003830", "003831", "003832", "003833", "003834", "003835", "003836", "003837", "003838", "003839", "003840", "003841", "003842", "003843", "003844", "003845", "003846", "003847", "003848", "003849", "003850", "003851", "003852", "003853", "003854", "003855", "003856", "003857", "003858", "003859", "003860", "004554", "004555", "004556", "004557", "004558", "004559", "004560", "004561", "004562", "004563", "004564", "004565", "004566", "004567", "004568", "004569", "004570", "004571", "004572", "004573", "004574", "004575", "004576", "004577", "004578", "004579", "004580", "004581", "004582", "004583", "004584", "004585", "004586", "004587", "004588", "004589", "004590", "004591", "004592", "004593", "004594", "004595", "004596", "004597", "004598", "004599", "004600", "004601", "004602", "004603", "004604", "004605", "004606", "004607", "004608", "004609", "004610", "004611", "004612", "004613", "004614", "004615", "004616", "004617", "004618", "004619", "004620", "004621", "004622", "004623", "004624", "004625", "004626", "004627", "004628", "004629", "004630", "004631", "004632", "004633", "004634", "004635", "004636", "004637", "004638", "004639", "004640", "004641", "004642", "004643", "004644", "004645", "004646", "004647", "004648", "004649", "004650", "004651", "004652", "004653", "004654", "004655", "004656", "004657", "004658", "004659", "004660", "004661", "004662", "004663", "004664", "004665", "004666", "004667", "004668", "004669", "004670", "004671", "004672", "004673", "004674", "004675", "004676", "004677", "004678", "004679", "004680", "004681", "004682", "004683", "004684", "004685", "004686", "004687", "004688", "004689", "004690", "004691", "004692", "004693", "004885", "004886", "004887", "004888", "004889", "004890", "004891", "004892", "004893", "004894", "004895", "004896", "004897", "004898", "004899", "004900", "004901", "004902", "004903", "004904", "004905", "004906", "004907", "004908", "004909", "004910", "004911", "004912", "004913", "004914", "004915", "004916", "004917", "004918", "004919", "004920", "004921", "004922", "004923", "004924", "004925", "004926", "004927", "004928", "004929", "004930", "004931", "004932", "004933", "004934", "004935", "004936", "004937", "004938", "004939", "004940", "004941", "004942", "004943", "004944", "004945", "004946", "004947", "004948", "004949", "004950", "004951", "004952", "004953", "004954", "004955", "004956", "004957", "004958", "004959", "004960", "004961", "004962", "004963", "004964", "004965", "004966", "004967", "004968", "004969", "004970", "004971", "004972", "004973", "004974", "004975", "004976", "004977", "004978", "004979", "004980", "004981", "004982", "004983", "004984", "004985", "004986", "004987", "004988", "004989", "004990", "004991", "004992", "004993", "004994", "004995", "004996", "004997", "004998", "004999", "005000", "005001", "005002", "005003", "005004", "005005", "005006", "005007", "005008", "005009", "005010", "005011", "005012", "005013", "005014", "005015", "005016", "005017", "005018", "005019", "005020", "005021", "005022", "005023", "005024", "005025", "005026", "005027", "005028", "005029", "005030", "005031", "005032", "005033", "005034", "005035", "005036", "005037", "005038", "005039", "005040", "005041", "005042", "005043", "005044", "005045", "005046", "005047", "005048", "005049", "005050", "005051", "005052", "005053", "005054", "005055", "005056", "005057", "005058", "005059", "005060", "005061", "005062", "005063", "005064", "005065", "005066", "005067", "005068", "005069", "005070", "005071", "005072", "005073", "005074", "005075", "005076", "005077", "005078", "005079", "005080", "005081", "005082", "005083", "005084", "005085", "005086", "005087", "005088", "005089", "005090", "005091", "005092", "005093", "005094", "005095", "005096", "005097", "005098", "005099", "005100", "005101", "005102", "005103", "005104", "005105", "005106", "005107", "005108", "005109", "005110", "005111", "005112", "005113", "005114", "005115", "005116", "005117", "005118", "005119", "005120", "005121", "005122", "005123", "005124", "005125", "005126", "005127", "005128", "005129", "005130", "005131", "005132", "005133", "005134", "005135", "005136", "005137", "005138", "005139", "005140", "005141", "005142", "005143", "005144", "005145", "005146", "005147", "005148", "005149", "005150", "005151", "005152", "005153", "005154", "005155", "005156", "005157", "005158", "005159", "005160", "005161", "005162", "005163", "005164", "005165", "005166", "005167", "005168", "005169", "005170", "005171", "005172", "005173", "005174", "005175", "005176", "005177", "005178", "005179", "005180", "005181", "005182", "005183", "005184", "005185", "005186", "005187", "005188", "005189", "005190", "005191", "005192", "005193", "005194", "005195", "005196", "005197", "005198", "005199", "005200", "005201", "005202", "005203", "005204", "005205", "005206", "005207", "005208", "005209", "005210", "005211", "005212", "005213", "005214", "005215", "005216", "005217", "005218", "005219", "005220", "005221", "005222", "005223", "005224", "005225", "005226", "005227", "005228", "005229", "005230", "005231", "005232", "005233", "005234", "005235", "005236", "005237", "005238", "005239", "005240", "005241", "005242", "005243", "005244", "005245", "005246", "005247", "005248", "005249", "005250", "005251", "005252", "005253", "005254", "005255", "005256", "005257", "005258", "005259", "005260", "005261", "005262", "005263", "005264", "005265", "005266", "005267", "005268", "005269", "005270", "005271", "005272", "005273", "005274", "005275", "005276", "005277", "005278", "005279", "005280", "005281", "005282", "005283", "005284", "005285", "005286", "005287", "005288", "005289", "005290", "005291", "005292", "005293", "005294", "005295", "005296", "005297", "005298", "005299", "005300", "005301", "005302", "005303", "005304", "005305", "005306", "005307", "005308", "005309", "005310", "005311", "005312", "005313", "005314", "005315", "005316", "005317", "005318", "005319", "005320", "005321", "005322", "005323", "005324", "005325", "005326", "005327", "005328", "005329", "005330", "005331", "005332", "005333", "005334", "005335", "005336", "005337", "005338", "005339", "005340", "005341", "005342", "005343", "005344", "005345", "005346", "005347", "005348", "005349", "005350", "005351", "005352", "005353", "005354", "005355", "005356", "005357", "005358", "005359", "005360", "005361", "005362", "005363", "005364", "005365", "005366", "005367", "005368", "005369", "005370", "005371", "005372", "005373", "005374", "005375", "005376", "005377", "005378", "005379", "005380", "005381", "005382", "005383", "005384", "005385", "005386", "005387", "005388", "005389", "005390", "005391", "005392", "005393", "005394", "005395", "005396", "005397", "005398", "005399", "005400", "005401", "005402", "005403", "005404", "005405", "005406", "005407", "005408", "005409", "005410", "005411", "005412", "005413", "005744", "005745", "005746", "005747", "005748", "005749", "005750", "005751", "005752", "005753", "005754", "005755", "005756", "005757", "005758", "005759", "005760", "005761", "005762", "005763", "005764", "005765", "005766", "005767", "005768", "005769", "005770", "005771", "005772", "005773", "005774", "005775", "005776", "005777", "005778", "005779", "005780", "005781", "005782", "005783", "005784", "005785", "005786", "005787", "005788", "005789", "005790", "005791", "005792", "005793", "005794", "005795", "005796", "005797", "005798", "005799", "005800", "005801", "005802", "005803", "005804", "005805", "005806", "005807", "005808", "005809", "005810", "005811", "005812", "005813", "005814", "005815", "005816", "005817", "005818", "005819", "005820", "005821", "005822", "005823", "005824", "005825", "005826", "005827", "005828", "005829", "005830", "005831", "005832", "005833", "005834", "005835", "005836", "005837", "005838", "005839", "005840", "005841", "005842", "005843", "005844", "005845", "005846", "005847", "005848", "005849", "005850", "005851", "005852", "005853", "005854", "005855", "005856", "005857", "005858", "005859", "005860", "005861", "005862", "005863", "005864", "005865", "005866", "005867", "005868", "005869", "005870", "005871", "005872", "005873", "005874", "005875", "005876", "005877", "005878", "005879", "005880", "005881", "005882", "005883", "005884", "005885", "005886", "005887", "005888", "005889", "005890", "005891", "005892", "005893", "005894", "005895", "005896", "005897", "005898", "005899", "005900", "005901", "005902", "005903", "005904", "005905", "005906", "005907", "005908", "005909", "005910", "005911", "005912", "005913", "005914", "005915", "005916", "006817", "006818", "006819", "006820", "006821", "006822", "006823", "006824", "006825", "006826", "006827", "006828", "006829", "006830", "006831", "006832", "006833", "006834", "006835", "006836", "006837", "006838", "006839", "006840", "006841", "006842", "006843", "006844", "006845", "006846", "006847", "006848", "006849", "006850", "006851", "006852", "006853", "006854", "006855", "006856", "006857", "006858", "006859", "006860", "006861", "006862", "006863", "006864", "006865", "006866", "006867", "006868", "006869", "006870", "006871", "006872", "006873", "006874", "006875", "006876", "006877", "006878", "006879", "006880", "006881", "006882", "006883", "006884", "006885", "006886", "006887", "006888", "006889", "006890", "006891", "006892", "006893", "006894", "006895", "006896", "006897", "006898", "006899", "006900", "006901", "006902", "006903", "006904", "006905", "006906", "006907", "006908", "006909", "006910", "006911", "006912", "006913", "006914", "006915", "006916", "006917", "006918", "006919", "006920", "006921", "006922", "006923", "006924", "006925", "006926", "006927", "006928", "006929", "006930", "006931", "006932", "006933", "006934", "006935", "006936", "006937", "006938", "006939", "006940", "006941", "006942", "006943", "006944", "006945", "006946", "006947", "006948", "006949", "006950", "006951", "006952", "006953", "006954", "006955", "006956", "006957", "006958", "006959", "006960", "006961", "006962", "006963", "006964", "006965", "006966", "006967", "006968", "006969", "006970", "006971", "006972", "006973", "006974", "006975", "006976", "006977", "006978", "006979", "006980", "006981", "006982", "006983", "006984", "006985", "006986", "006987", "006988", "006989", "006990", "006991", "006992", "006993", "006994", "006995", "006996", "006997", "006998", "006999", "007000", "007001", "007002", "007003", "007004", "007005", "007006", "007007", "007008", "007009", "007010", "007011", "007012", "007013", "007014", "007015", "007016", "007017", "007018", "007019", "007020", "007021", "007022", "007023", "007024", "007025", "007026", "007027", "007028", "007029", "007030", "007031", "007032", "007033", "007034", "007035", "007036", "007037", "007038", "007039", "007040", "007041", "007042", "007043", "007044", "007045", "007046", "007047", "007048", "007049", "007050", "007051", "007052", "007053", "007054", "007055", "007056", "007057", "007058", "007059", "007060", "007061", "007062", "007063", "007064", "007065", "007066", "007067", "007068", "007069", "007070", "007071", "007072", "007073", "007074", "007075", "007076", "007077", "007078", "007079", "007080", "007081", "007082", "007083", "007084", "007085", "007086", "007087", "007088", "007089", "007090", "007091", "007092", "007093", "007094", "007095", "007096", "007097", "007098", "007099", "007100", "007101", "007102", "007103", "007104", "007105", "007106", "007107", "007108", "007109", "007110", "007111", "007112", "007113", "007114", "007115", "007116", "007117", "007118", "007119", "007120", "007121", "007122", "007123", "007124", "007125", "007126", "007127", "007128", "007129", "007130", "007131", "007132", "007133", "007134", "007135", "007136", "007137", "007138", "007139", "007140", "007141", "007142", "007143", "007144", "007145", "007146", "007147", "007148", "007149", "007150", "007151", "007152", "007153", "007154", "007155", "007156", "007157", "007158", "007159", "007160", "007161", "007162", "007163", "007164", "007165", "007166", "007167", "007168", "007169", "007170", "007171", "007172", "007173", "007174", "007175", "007176", "007177", "007178", "007179", "007180", "007181", "007182", "007183", "007184", "007185", "007186", "007187", "007188", "007189", "007190", "007191", "007192", "007193", "007194", "007195", "007196", "007197", "007198", "007199", "007200", "007201", "007202", "007203", "007204", "007205", "007206", "007207", "007208", "007209", "007210", "007211", "007212", "007213", "007214", "007215", "007216", "007217", "007218", "007219", "007220", "007221", "007222", "007223", "007224", "007225", "007226", "007227", "007228", "007229", "007230", "007231", "007232", "007233", "007234", "007235", "007236", "007237", "007238", "007239", "007240", "007241", "007242", "007243", "007244", "007245", "007246", "007247", "007248", "007249", "007250", "007251", "007252", "007253", "007254", "007255", "007796", "007797", "007798", "007799", "007800", "007801", "007802", "007803", "007804", "007805", "007806", "007807", "007808", "007809", "007810", "007811", "007812", "007813", "007814", "007815", "007816", "007817", "007818", "007819", "007820", "007821", "007822", "007823", "007824", "007825", "007826", "007827", "007828", "007829", "007830", "007831", "007832", "007833", "007834", "007835", "007836", "007837", "007838", "007839", "007840", "007841", "007842", "007843", "007844", "007845", "007846", "007847", "007848", "007849", "007850", "007851", "007852", "007853", "007854", "007855", "007856", "007857", "007858", "007859", "007860", "007861", "007862", "007863", "007864", "007865", "007866", "007867", "007868", "007869", "007870", "007871", "007872", "007873", "007874", "007875", "007876", "007877", "007878", "007879", "007880", "007881", "007882", "007883", "007884", "007885", "007886", "007887", "007888", "007889", "007890", "007891", "007892", "007893", "007894", "007895", "007896", "007897", "007898", "007899", "007900", "007901", "007902", "007903", "007904", "007905", "007906", "007907", "007908", "007909", "007910", "007911", "007912", "007913", "007914", "007915", "007916", "007917", "007918", "007919", "007920", "007921", "007922", "007923", "007924", "007925", "007926", "007927", "007928", "007929", "007930", "007931", "007932", "007933", "007934", "007935", "007936", "007937", "007938", "007939", "007940", "007941", "007942", "007943", "007944", "007945", "007946", "007947", "007948", "007949", "007950", "007951", "007952", "007953", "007954", "007955", "007956", "007957", "007958", "007959", "007960", "007961", "007962", "007963", "007964", "007965", "007966", "007967", "007968", "007969", "007970", "007971", "007972", "007973", "007974", "007975", "007976", "007977", "007978", "007979", "007980", "007981", "007982", "007983", "007984", "007985", "007986", "007987", "007988", "007989", "007990", "007991", "007992", "007993", "007994", "007995", "007996", "007997", "007998", "007999", "008000", "008001", "008002", "008003", "008004", "008005", "008006", "008007", "008008", "008009", "008010", "008011", "008012", "008013", "008014", "008015", "008016", "008017", "008018", "008019", "008020", "008021", "008022", "008023", "008024", "008025", "008026", "008027", "008028", "008029", "008030", "008031", "008032", "008033", "008034", "008035", "008036", "008037", "008038", "008039", "008040", "008041", "008042", "008043", "008044", "008045", "008046", "008047", "008048", "008049", "008050", "008051", "008052", "008053", "008054", "008055", "008056", "008057", "008058", "008059", "008060", "008061", "008062", "008063", "008064", "008065", "008066", "008067", "008068", "008069", "008070", "008071", "008072", "008073", "008074", "008075", "008076", "008077", "008078", "008079", "008080", "008081", "008082", "008083", "008084", "008085", "008086", "008087", "008088", "008089", "008090", "008091", "008092", "008093", "008094", "008095", "008096", "008097", "008098", "008099", "008100", "008101", "008102", "008103", "008104", "008105", "008106", "008107", "008108", "008109", "008110", "008111", "008112", "008113", "008114", "008115", "008116", "008117", "008118", "008119", "008120", "008121", "008122", "008123", "008124", "008125", "008126", "008127", "008128", "008129", "008130", "008131", "008132", "008133", "008134", "008135", "008136", "008137", "008138", "008139", "008140", "008141", "008142", "008143", "008144", "008145", "008146", "008147", "008148", "008149", "008150", "008151", "008152", "008153", "008154", "008155", "008156", "008157", "008158", "008159", "008160", "008161", "008162", "008163", "008164", "008165", "008166", "008167", "008168", "008169", "008170", "008171", "008172", "008173", "008174", "008175", "008176", "008177", "008178", "008179", "008180", "008181", "008182", "008183", "008184", "008185", "008186", "008187", "008188", "008189", "008190", "008191", "008192", "008193", "008194", "008195", "008196", "008197", "008198", "008199", "008200", "008201", "008202", "008203", "008204", "008205", "008206", "008207", "008208", "008209", "008210", "008211", "008212", "008213", "008214", "008215", "008216", "008217", "008218", "008219", "008220", "008221", "008222", "008223", "008224", "008225", "008226", "008227", "008228", "008229", "008230", "008231", "008232", "008233", "008234", "008235", "008236", "008237", "008238", "008239", "008240", "008241", "008242", "008243", "008244", "008245", "008246", "008247", "008248", "008249", "008250", "008251", "008252", "008253", "008254", "008255", "008256", "008257", "008258", "008259", "008260", "008261", "008262", "008263", "008264", "008265", "008266", "008267", "008268", "008269", "008270", "008271", "008272", "008273", "008274", "008275", "008276", "008277", "008278", "008279", "008280", "008281", "008282", "008283", "008284", "008285", "008286", "008287", "008288", "008289", "008290", "008291", "008292", "008293", "008294", "008295", "008296", "008297", "008298", "008299", "008300", "008301", "008302", "008303", "008304", "008305", "008306", "008307", "008308", "008309", "008310", "008311", "008312", "008313", "008314", "008315", "008316", "008317", "008318", "008319", "008320", "008321", "008322", "008323", "008324", "008325", "008326", "008327", "008328", "008329", "008330", "008331", "008332", "008333", "008334", "008335", "008336", "008337", "008338", "008339", "008340", "008341", "008342", "008343", "008344", "008345", "008346", "008347", "008348", "008349", "008350", "008351", "008352", "008353", "008354", "008355", "008356", "008357", "008358", "008359", "008360", "008361", "008362", "008363", "008364", "008365", "008366", "008367", "008368", "008369", "008370", "008371", "008372", "008373", "008374", "008375", "008376", "008377", "008378", "008379", "008380", "008381", "008382", "008383", "008384", "008385", "008386", "008387", "008388", "008389", "008390", "008391", "008392", "008393", "008394", "008395", "008396", "008397", "008398", "008399", "008400", "008401", "008402", "008403", "008404", "008405", "008406", "008407", "008408", "008409", "008410", "008411", "008412", "008413", "008414", "008415", "008416", "008417", "008418", "008419", "008420", "008421", "008422", "008423", "008424", "008425", "008426", "008427", "008428", "008429", "008430", "008431", "008432", "008433", "008434", "008435", "008436", "008437", "008438", "008439", "008440", "008441", "008442", "008443", "008444", "008445", "008446", "008447", "008448", "008449", "008450", "008451", "008452", "008453", "008454", "008455", "008456", "008457", "008458", "008459", "008460", "008461", "008462", "008463", "008464", "008465", "008466", "008467", "008468", "008469", "008470", "008471", "008472", "008473", "008474", "008475", "009151", "009152", "009153", "009154", "009155", "009156", "009157", "009158", "009159", "009160", "009161", "009162", "009163", "009164", "009165", "009166", "009167", "009168", "009169", "009170", "009171", "009172", "009173", "009174", "009175", "009176", "009177", "009178", "009179", "009180", "009181", "009182", "009183", "009184", "009185", "009186", "009187", "009188", "009189", "009190", "009191", "009192", "009193", "009194", "009195", "009196", "009197", "009198", "009199", "009200", "009201", "009202", "009203", "009204", "009205", "009206", "009207", "009208", "009209", "009210", "009211", "009212", "009213", "009214", "009215", "009216", "009217", "009218", "009219", "009220", "009221", "009222", "009223", "009224", "009225", "009226", "009227", "009228", "009229", "009230", "009231", "009232", "009233", "009234", "009235", "009236", "009237", "009238", "009239", "009240", "009241", "009242", "009243", "009244", "009245", "009246", "009247", "009248", "009249", "009250", "009251", "009252", "009253", "009254", "009255", "009256", "009257", "009258", "009259", "009260", "009261", "009262", "009263", "009264", "009265", "009266", "009267", "009268", "009269", "009270", "009271", "009272", "009273", "009274", "009275", "009276", "009277", "009278", "009279", "009280", "009281", "009282", "009283", "009284", "009285", "009286", "009287", "009288", "009289", "009290", "009291", "009292", "009293", "009294", "009295", "009296", "009297", "009298", "009299", "009300", "009301", "009302", "009303", "009304", "009305", "009306", "009307", "009308", "009309", "009310", "009311", "009312", "009313", "009314", "009315", "009316", "009317", "009318", "009319", "009320", "009321", "009322", "009323", "009324", "009325", "009326", "009327", "009328", "009329", "009330", "009331", "009332", "009333", "009334", "009335", "009336", "009337", "009338", "009339", "009340", "009341", "009342", "009343", "009344", "009345", "009346", "009347", "009348", "009349", "009350", "009351", "009352", "009353", "009354", "009355", "009356", "009357", "009358", "009359", "009360", "009501", "009502", "009503", "009504", "009505", "009506", "009507", "009508", "009509", "009510", "009511", "009512", "009513", "009514", "009515", "009516", "009517", "009518", "009519", "009520", "009521", "009522", "009523", "009524", "009525", "009526", "009527", "009528", "009529", "009530", "009531", "009532", "009533", "009534", "009535", "009536", "009537", "009538", "009539", "009540", "009541", "009542", "009543", "009544", "009545", "009546", "009547", "009548", "009549", "009550", "009551", "009552", "009553", "009554", "009555", "009556", "009557", "009558", "009559", "009560", "009561", "009562", "009563", "009564", "009565", "009566", "009567", "009568", "009569", "009570", "009571", "009572", "009573", "009574", "009575", "009576", "009577", "009578", "009579", "009580", "009581", "009582", "009583", "009584", "009585", "009586", "009587", "009588", "009589", "009590", "009591", "009592", "009593", "009594", "009595", "009596", "009597", "009598", "009599", "009600", "009601", "009602", "009603", "009604", "009605", "009606", "009607", "009608", "009609", "009610", "009611", "009612", "009613", "009614", "009615", "009616", "009617", "009618", "009619", "009620", "009621", "009622", "009623", "009624", "009625", "009626", "009627", "009628", "009629", "009630", "009631", "009632", "009633", "009634", "009635", "009636", "009637", "009638", "009639", "009640", "009641", "009642", "009643", "009644", "009645", "009646", "009647", "009648", "009649", "009650", "009651", "009652", "009653", "009654", "009655", "009656", "009657", "009658", "009659", "009660", "009661", "009662", "009663", "009664", "009665", "009666", "009667", "009668", "009669", "009670", "009671", "009672", "009673", "009674", "009675", "009676", "009677", "009678", "009679", "009680", "009681", "009682", "009683", "009684", "009685", "009686", "009687", "009688", "009689", "009690", "011641", "011642", "011643", "011644", "011645", "011646", "011647", "011648", "011649", "011650", "011651", "011652", "011653", "011654", "011655", "011656", "011657", "011658", "011659", "011660", "011661", "011662", "011663", "011664", "011665", "011666", "011667", "011668", "011669", "011670", "011671", "011672", "011673", "011674", "011675", "011676", "011677", "011678", "011679", "011680", "011681", "011682", "011683", "011684", "011685", "011686", "011687", "011688", "011689", "011690", "011691", "011692", "011693", "011694", "011695", "011696", "011697", "011698", "011699", "011700", "011701", "011702", "011703", "011704", "011705", "011706", "011707", "011708", "011709", "011710", "011711", "011712", "011713", "011714", "011715", "011716", "011717", "011718", "011719", "011720", "011721", "011722", "011723", "011724", "011725", "011726", "011727", "011728", "011729", "011730", "011731", "011732", "011733", "011734", "011735", "011736", "011737", "011738", "011739", "011740", "011741", "011742", "011743", "011744", "011745", "011746", "011747", "011748", "011749", "011750", "011751", "011752", "011753", "011754", "011755", "011756", "011757", "011758", "011759", "011760", "011761", "011762", "011763", "011764", "011765", "011766", "011767", "011768", "011769", "011770", "011771", "011772", "011773", "011774", "011775", "011776", "011777", "011778", "011779", "011780", "011781", "011782", "011783", "011784", "011785", "011786", "011787", "011788", "011789", "011790", "011791", "011792", "011793", "011794", "011795", "011796", "011797", "011798", "011799", "011800", "011801", "011802", "011803", "011804", "011805", "011806", "011807", "011808", "011809", "011810", "011811", "011812", "011813", "011814", "011815", "011816", "011817", "011818", "011819", "011820", "011821", "011822", "011823", "011824", "011825", "011826", "011827", "011828", "011829", "011830", "011831", "011832", "011833", "011834", "011835", "011836", "011837", "011838", "011839", "011840", "011841", "011842", "011843", "011844", "011845", "011846", "011847", "011848", "011849", "011850", "011851", "011852", "011853", "011854", "011855", "011856", "011857", "011858", "011859", "011860", "011861", "011862", "011863", "011864", "011865", "011866", "011867", "011868", "011869", "011870", "011871", "011872", "011873", "011874", "011875", "011876", "011877", "011878", "011879", "011880", "011881", "011882", "011883", "011884", "011885", "011886", "011887", "011888", "011889", "011890", "011891", "011892", "011893", "011894", "011895", "011896", "011897", "011898", "011899", "011900", "011901", "011902", "011903", "011904", "011905", "011906", "011907", "011908", "011909", "011910", "011911", "011912", "011913", "011914", "011915", "011916", "011917", "011918", "011919", "011920", "011921", "011922", "011923", "011924", "011925", "011926", "011927", "011928", "011929", "011930", "011931", "011932", "011933", "011934", "011935", "011936", "011937", "011938", "011939", "011940", "011941", "011942", "011943", "011944", "011945", "011946", "011947", "011948", "011949", "011950", "011951", "011952", "011953", "011954", "011955", "011956", "011957", "011958", "011959", "011960", "011961", "011962", "011963", "011964", "011965", "011966", "011967", "011968", "011969", "011970", "011971", "011972", "011973", "011974", "011975", "011976", "011977", "011978", "011979", "011980", "011981", "011982", "011983", "011984", "011985", "011986", "011987", "011988", "011989", "011990", "011991", "011992", "011993", "011994", "011995", "011996", "011997", "011998", "011999", "012000", "012001", "012002", "012003", "012004", "012005", "012006", "012007", "012008", "012009", "012010", "012011", "012012", "012013", "012014", "012015", "012016", "012017", "012018", "012019", "012020", "012021", "012022", "012023", "012024", "012025", "012026", "012027", "012028", "012029", "012030", "012031", "012032", "012033", "012034", "012035", "012036", "012037", "012038", "012039", "012040", "012041", "012042", "012043", "012044", "012045", "012046", "012047", "012048", "012049", "012050", "012051", "012052", "012053", "012054", "012055", "012056", "012057", "012058", "012059", "012060", "012061", "012062", "012063", "012064", "012065", "012066", "012067", "012068", "012069", "012070", "012071", "012072", "012073", "012074", "012075", "012076", "012077", "012078", "012079", "012080", "012081", "012082", "012083", "012084", "012085", "012086", "012087", "012088", "012089", "012090", "012291", "012292", "012293", "012294", "012295", "012296", "012297", "012298", "012299", "012300", "012301", "012302", "012303", "012304", "012305", "012306", "012307", "012308", "012309", "012310", "012311", "012312", "012313", "012314", "012315", "012316", "012317", "012318", "012319", "012320", "012321", "012322", "012323", "012324", "012325", "012326", "012327", "012328", "012329", "012330", "012331", "012332", "012333", "012334", "012335", "012336", "012337", "012338", "012339", "012340", "012341", "012342", "012343", "012344", "012345", "012346", "012347", "012348", "012349", "012350", "012351", "012352", "012353", "012354", "012355", "012356", "012357", "012358", "012359", "012360", "012361", "012362", "012363", "012364", "012365", "012366", "012367", "012368", "012369", "012370", "012371", "012372", "012373", "012374", "012375", "012376", "012377", "012378", "012379", "012380", "012381", "012382", "012383", "012384", "012385", "012386", "012387", "012388", "012389", "012390", "012391", "012392", "012393", "012394", "012395", "012396", "012397", "012398", "012399", "012400", "012401", "012402", "012403", "012404", "012405", "012406", "012407", "012408", "012409", "012410", "012411", "012412", "012413", "012414", "012415", "012416", "012417", "012418", "012419", "012420", "012421", "012422", "012423", "012424", "012425", "012426", "012427", "012428", "012429", "012430", "012431", "012432", "012433", "012434", "012435", "012436", "012437", "012438", "012439", "012440", "012441", "012442", "012443", "012444", "012445", "012446", "012447", "012448", "012449", "012450", "012451", "012452", "012453", "012454", "012455", "012456", "012457", "012458", "012459", "012460", "012461", "012462", "012463", "012464", "012465", "012466", "012467", "012468", "012469", "012470", "012471", "012472", "012473", "012474", "012475", "012476", "012477", "012478", "012479", "012480", "012481", "012482", "012483", "012484", "012485", "012486", "012487", "012488", "012489", "012490", "012491", "012492", "012493", "012494", "012495", "012496", "012497", "012498", "012499", "012500", "012501", "012502", "012503", "012504", "012505", "012506", "012507", "012508", "012509", "012510", "012811", "012812", "012813", "012814", "012815", "012816", "012817", "012818", "012819", "012820", "012821", "012822", "012823", "012824", "012825", "012826", "012827", "012828", "012829", "012830", "012831", "012832", "012833", "012834", "012835", "012836", "012837", "012838", "012839", "012840", "012841", "012842", "012843", "012844", "012845", "012846", "012847", "012848", "012849", "012850", "012851", "012852", "012853", "012854", "012855", "012856", "012857", "012858", "012859", "012860", "012861", "012862", "012863", "012864", "012865", "012866", "012867", "012868", "012869", "012870", "012871", "012872", "012873", "012874", "012875", "012876", "012877", "012878", "012879", "012880", "012881", "012882", "012883", "012884", "012885", "012886", "012887", "012888", "012889", "012890", "012891", "012892", "012893", "012894", "012895", "012896", "012897", "012898", "012899", "012900", "012901", "012902", "012903", "012904", "012905", "012906", "012907", "012908", "012909", "012910", "012911", "012912", "012913", "012914", "012915", "012916", "012917", "012918", "012919", "012920", "012921", "012922", "012923", "012924", "012925", "012926", "012927", "012928", "012929", "012930", "012931", "012932", "012933", "012934", "012935", "012936", "012937", "012938", "012939", "012940", "012941", "012942", "012943", "012944", "012945", "012946", "012947", "012948", "012949", "012950", "012951", "012952", "012953", "012954", "012955", "012956", "012957", "012958", "012959", "012960", "012961", "012962", "012963", "012964", "012965", "012966", "012967", "012968", "012969", "012970", "012971", "012972", "012973", "012974", "012975", "012976", "012977", "012978", "012979", "012980", "012981", "012982", "012983", "012984", "012985", "012986", "012987", "012988", "012989", "012990", "012991", "012992", "012993", "012994", "012995", "012996", "012997", "012998", "012999", "013000", "013890", "013891", "013892", "013893", "013894", "013895", "013896", "013897", "013898", "013899", "013900", "013901", "013902", "013903", "013904", "013905", "013906", "013907", "013908", "013909", "013910", "013911", "013912", "013913", "013914", "013915", "013916", "013917", "013918", "013919", "013920", "013921", "013922", "013923", "013924", "013925", "013926", "013927", "013928", "013929", "013930", "013931", "013932", "013933", "013934", "013935", "013936", "013937", "014038", "014039", "014040", "014041", "014042", "014043", "014044", "014045", "014046", "014047", "014048", "014049", "014050", "014051", "014052", "014053", "014054", "014055", "014056", "014057", "014058", "014059", "014060", "014061", "014062", "014063", "014064", "014065", "014066", "014067", "014068", "014069", "014070", "014071", "014072", "014073", "014074", "014075", "014076", "014077", "014078", "014079", "014080", "014081", "014082", "014083", "014084", "014085", "014086", "014087", "014088", "014089", "014090", "014091", "014092", "014093", "014094", "014095", "014096", "014097", "014098", "014099", "014100", "014101", "014102", "014103", "014104", "014105", "014106", "014107", "014108", "014109", "014110", "014111", "014112", "014113", "014114", "014115", "014116", "014117", "014118", "014119", "014120", "014121", "014122", "014123", "014124", "014125", "014126", "014127", "014128", "014129", "014130", "014131", "014132", "014133", "014134", "014135", "014136", "014137", "014138", "014139", "014140", "014141", "014142", "014143", "014144", "014145", "014146", "014147", "014148", "014149", "014150", "014151", "014152", "014153", "014154", "014155", "014156", "014157", "015138", "015139", "015140", "015141", "015142", "015143", "015144", "015145", "015146", "015147", "015148", "015149", "015150", "015151", "015152", "015153", "015154", "015155", "015156", "015157", "015158", "015159", "015160", "015161", "015162", "015163", "015164", "015165", "015166", "015167", "015168", "015169", "015170", "015171", "015172", "015173", "015174", "015175", "015176", "015177", "015178", "015179", "015180", "015181", "015182", "015183", "015184", "015185", "015186", "015187", "015188", "015189", "015190", "015191", "015192", "015193", "015194", "015195", "015196", "015197", "015198", "015199", "015200", "015201", "015202", "015203", "015204", "015205", "015206", "015207", "015208", "015209", "015210", "015211", "015212", "015213", "015214", "015215", "015216", "015217", "015218", "015219", "015220", "015221", "015222", "015223", "015224", "015225", "015226", "015227", "015228", "015229", "015230", "015231", "015232", "015233", "015234", "015235", "015236", "015237", "015238", "015239", "015240", "015241", "015242", "015243", "015244", "015245", "015246", "015247", "015248", "015249", "015250", "015251", "015252", "015253", "015254", "015255", "015256", "015257", "015258", "015259", "015260", "015261", "015262", "015263", "015264", "015265", "015266", "015267", "015268", "015269", "015270", "015271", "015272", "015273", "015274", "015275", "015276", "015277", "015278", "015279", "015280", "015281", "015282", "015283", "015284", "015285", "015286", "015287", "015288", "015289", "015290", "015291", "015292", "015293", "015294", "015295", "015296", "015297", "016268", "016269", "016270", "016271", "016272", "016273", "016274", "016275", "016276", "016277", "016278", "016279", "016280", "016281", "016282", "016283", "016284", "016285", "016286", "016287", "016288", "016289", "016290", "016291", "016292", "016293", "016294", "016295", "016296", "016297", "016298", "016299", "016300", "016301", "016302", "016303", "016304", "016305", "016306", "016307", "016308", "016309", "016310", "016311", "016312", "016313", "016314", "016315", "016316", "016317", "016318", "016319", "016320", "016321", "016322", "016323", "016324", "016325", "016326", "016327", "016328", "016329", "016330", "016331", "016332", "016333", "016334", "016335", "016336", "016337", "016338", "016339", "016340", "016341", "016342", "016343", "016344", "016345", "016346", "016347", "016348", "016349", "016350", "016351", "016352", "016353", "016354", "016355", "016356", "016357", "016358", "016359", "016360", "016361", "016362", "016363", "016364", "016365", "016366", "016367", "016368", "016369", "016370", "016371", "016372", "016373", "016374", "016375", "016376", "016377", "016378", "016379", "016380", "016381", "016382", "016383", "016384", "016385", "016386", "016387", "016388", "016389", "016390", "016391", "016392", "016393", "016394", "016395", "016396", "016397", "016398", "016399", "016400", "016401", "016402", "016403", "016404", "016405", "016406", "016407", "016408", "016409", "016410", "016411", "016412", "016413", "016414", "016415", "016416", "016417", "016418", "016419", "016420", "016421", "016422", "016423", "016424", "016425", "016426", "016427", "016428", "016429", "016430", "016431", "016432", "016433", "016434", "016435", "016436", "016437", "016438", "016439", "016440", "016441", "016442", "016443", "016444", "016445", "016446", "016447", "016448", "016449", "016450", "016451", "016452", "016453", "016454", "016455", "016456", "016457", "016458", "016459", "016460", "016461", "016462", "016463", "016464", "016465", "016466", "016467", "016468", "016469", "016470", "016471", "016472", "016473", "016474", "016475", "016476", "016477", "016478", "016479", "016480", "016481", "016482", "016483", "016484", "016485", "016486", "016487", "016488", "016489", "016490", "016491", "016492", "016493", "016494", "016495", "016496", "016497", "016498", "016499", "016500", "016501", "016502", "016503", "016504", "016505", "016506", "016507", "016508", "016509", "016510", "016511", "016512", "016513", "016514", "016515", "016516", "016517", "016518", "016519", "016520", "016521", "016522", "016523", "016524", "016525", "016526", "016527", "016528", "016529", "016530", "016531", "016532", "016533", "016534", "016535", "016536", "016537", "016538", "016539", "016540", "016541", "016542", "016543", "016544", "016545", "016546", "016547", "016548", "016549", "016550", "016551", "016552", "016553", "016554", "016555", "016556", "016557", "016558", "016559", "016560", "016561", "016562", "016563", "016564", "016565", "016566", "016567", "016568", "016569", "016570", "016571", "016572", "016573", "016574", "016575", "016576", "016577", "016578", "016579", "016580", "016581", "016582", "016583", "016584", "016585", "016586", "016587", "016588", "016589", "016590", "016591", "016592", "016593", "016594", "016595", "016596", "016597", "016598", "016599", "016600", "016601", "016602", "016603", "016604", "016605", "016606", "016607", "016608", "016609", "016610", "016611", "016612", "016613", "016614", "016615", "016616", "016617", "016618", "016619", "016620", "016621", "016622", "016623", "016624", "016625", "016626", "016627", "016628", "016629", "016630", "016631", "016632", "016633", "016634", "016635", "016636", "016637", "016638", "016639", "016640", "016641", "016642", "016643", "016644", "016645", "016646", "016647", "016648", "016649", "016650", "016651", "016652", "016653", "016654", "016655", "016656", "016657", "016658", "016659", "016660", "016661", "016662", "016663", "016664", "016665", "016666", "016667", "016668", "016669", "016670", "016671", "016672", "016673", "016674", "016675", "016676", "016677", "016678", "016679", "016680", "016681", "016682", "016683", "016684", "016685", "016686", "016687", "016688", "016689", "016690", "016691", "016692", "016693", "016694", "016695", "016696", "016697"], "test_A": ["002065", "002066", "002067", "002068", "002069", "002070", "002071", "002072", "002073", "002074", "002075", "002076", "002077", "002078", "002079", "002080", "002081", "002082", "002083", "002084", "002085", "002086", "002087", "002088", "002089", "002090", "002091", "002092", "002093", "002094", "002095", "002096", "002097", "002098", "002099", "002100", "002101", "002102", "002103", "002104", "002105", "002106", "002107", "002108", "002109", "002110", "002111", "002112", "002113", "002114", "002115", "002116", "002117", "002118", "002119", "002120", "002121", "002122", "002123", "002124", "002125", "002126", "002127", "002128", "002129", "002130", "002131", "002132", "002133", "002134", "002135", "002136", "002137", "002138", "002139", "002140", "002141", "002142", "002143", "002144", "002145", "002146", "002147", "002148", "002149", "002150", "002151", "002152", "002153", "002154", "002155", "002156", "002157", "002158", "002159", "002160", "002161", "002162", "002163", "002164", "002165", "002166", "002167", "002168", "002169", "002170", "002171", "002172", "002173", "002174", "002175", "002176", "002177", "002178", "002179", "002180", "002181", "002182", "002183", "002184", "002185", "002186", "002187", "002188", "002189", "002190", "002191", "002192", "002193", "002194", "002195", "002196", "002197", "002198", "002199", "002200", "002201", "002202", "002203", "002204", "002205", "002206", "002207", "002208", "002209", "002210", "002211", "002212", "002213", "002214", "002215", "002216", "002217", "002218", "002219", "002220", "002221", "002222", "002223", "002224", "002225", "002226", "002227", "002228", "002229", "002230", "002231", "002232", "002233", "002234", "002235", "002236", "002237", "002238", "002239", "002240", "002241", "002242", "002243", "002693", "002694", "002695", "002696", "002697", "002698", "002699", "002700", "002701", "002702", "002703", "002704", "002705", "002706", "002707", "002708", "002709", "002710", "002711", "002712", "002713", "002714", "002715", "002716", "002717", "002718", "002719", "002720", "002721", "002722", "002723", "002724", "002725", "002726", "002727", "002728", "002729", "002730", "002731", "002732", "002733", "002734", "002735", "002736", "002737", "002738", "002739", "002740", "002741", "002742", "002743", "002744", "002745", "002746", "002747", "002748", "002749", "002750", "002751", "002752", "002753", "002754", "002755", "002756", "002757", "002758", "002759", "002760", "002761", "002762", "002763", "002764", "002765", "002766", "002767", "002768", "002769", "002770", "002771", "002772", "002773", "002774", "002775", "002776", "002777", "002778", "002779", "002780", "002781", "002782", "002783", "002784", "002785", "002786", "002787", "002788", "002789", "002790", "002791", "002792", "002793", "002794", "002795", "002796", "002797", "002798", "002799", "002800", "002801", "002802", "002803", "002804", "002805", "002806", "002807", "002808", "002809", "002810", "002811", "002812", "002813", "002814", "002815", "002816", "002817", "002818", "002819", "002820", "002821", "002822", "002823", "002824", "002825", "002826", "002827", "002828", "002829", "002830", "002831", "002832", "002833", "002834", "002835", "002836", "002837", "002838", "002839", "002840", "002841", "002842", "002843", "002844", "002845", "002846", "002847", "002848", "002849", "002850", "002851", "002852", "002853", "002854", "002855", "002856", "002857", "002858", "002859", "002860", "002861", "004885", "004886", "004887", "004888", "004889", "004890", "004891", "004892", "004893", "004894", "004895", "004896", "004897", "004898", "004899", "004900", "004901", "004902", "004903", "004904", "004905", "004906", "004907", "004908", "004909", "004910", "004911", "004912", "004913", "004914", "004915", "004916", "004917", "004918", "004919", "004920", "004921", "004922", "004923", "004924", "004925", "004926", "004927", "004928", "004929", "004930", "004931", "004932", "004933", "004934", "004935", "004936", "004937", "004938", "004939", "004940", "004941", "004942", "004943", "004944", "004945", "004946", "004947", "004948", "004949", "004950", "004951", "004952", "004953", "004954", "004955", "004956", "004957", "004958", "004959", "004960", "004961", "004962", "004963", "004964", "004965", "004966", "004967", "004968", "004969", "004970", "004971", "004972", "004973", "004974", "004975", "004976", "004977", "004978", "004979", "004980", "004981", "004982", "004983", "004984", "004985", "004986", "004987", "004988", "004989", "004990", "004991", "004992", "004993", "004994", "004995", "004996", "004997", "004998", "004999", "005000", "005001", "005002", "005003", "005004", "005005", "005006", "005007", "005008", "005009", "005010", "005011", "005012", "005013", "005014", "005015", "005016", "005017", "005018", "005019", "005020", "005021", "005022", "005023", "005024", "005025", "005026", "005027", "005028", "005029", "005030", "005031", "005032", "005033", "005034", "005035", "005036", "005037", "005038", "005039", "005040", "005041", "005042", "005043", "005044", "005045", "005046", "005047", "005048", "005049", "005050", "005051", "005052", "005053", "005054", "005055", "005056", "005057", "005058", "005059", "005060", "005061", "005062", "005063", "006817", "006818", "006819", "006820", "006821", "006822", "006823", "006824", "006825", "006826", "006827", "006828", "006829", "006830", "006831", "006832", "006833", "006834", "006835", "006836", "006837", "006838", "006839", "006840", "006841", "006842", "006843", "006844", "006845", "006846", "006847", "006848", "006849", "006850", "006851", "006852", "006853", "006854", "006855", "006856", "006857", "006858", "006859", "006860", "006861", "006862", "006863", "006864", "006865", "006866", "006867", "006868", "006869", "006870", "006871", "006872", "006873", "006874", "006875", "006876", "006877", "006878", "006879", "006880", "006881", "006882", "006883", "006884", "006885", "006886", "006887", "006888", "006889", "006890", "006891", "006892", "006893", "006894", "006895", "006896", "006897", "006898", "006899", "006900", "006901", "006902", "006903", "006904", "006905", "006906", "006907", "006908", "006909", "006910", "006911", "006912", "006913", "006914", "006915", "006916", "006917", "006918", "006919", "006920", "006921", "006922", "006923", "006924", "006925", "006926", "006927", "006928", "006929", "006930", "006931", "006932", "006933", "006934", "006935", "006936", "006937", "006938", "006939", "006940", "006941", "006942", "006943", "006944", "006945", "006946", "006947", "006948", "006949", "006950", "006951", "006952", "006953", "006954", "006955", "006956", "006957", "006958", "006959", "006960", "006961", "006962", "006963", "006964", "006965", "006966", "006967", "006968", "006969", "006970", "006971", "006972", "006973", "006974", "006975", "006976", "006977", "006978", "006979", "006980", "006981", "006982", "006983", "006984", "006985", "006986", "006987", "006988", "006989", "006990", "006991", "006992", "006993", "006994", "006995", "006996", "006997", "006998", "006999", "007000", "007001", "007002", "007003", "007004", "007005", "007966", "007967", "007968", "007969", "007970", "007971", "007972", "007973", "007974", "007975", "007976", "007977", "007978", "007979", "007980", "007981", "007982", "007983", "007984", "007985", "007986", "007987", "007988", "007989", "007990", "007991", "007992", "007993", "007994", "007995", "007996", "007997", "007998", "007999", "008000", "008001", "008002", "008003", "008004", "008005", "008006", "008007", "008008", "008009", "008010", "008011", "008012", "008013", "008014", "008015", "008016", "008017", "008018", "008019", "008020", "008021", "008022", "008023", "008024", "008025", "008026", "008027", "008028", "008029", "008030", "008031", "008032", "008033", "008034", "008035", "008036", "008037", "008038", "008039", "008040", "008041", "008042", "008043", "008044", "008045", "008046", "008047", "008048", "008049", "008050", "008051", "008052", "008053", "008054", "008055", "008056", "008057", "008058", "008059", "008060", "008061", "008062", "008063", "008064", "008065", "008066", "008067", "008068", "008069", "008070", "008071", "008072", "008073", "008074", "008075", "008076", "008077", "008078", "008079", "008080", "008081", "008082", "008083", "008084", "008085", "012291", "012292", "012293", "012294", "012295", "012296", "012297", "012298", "012299", "012300", "012301", "012302", "012303", "012304", "012305", "012306", "012307", "012308", "012309", "012310", "012311", "012312", "012313", "012314", "012315", "012316", "012317", "012318", "012319", "012320", "012321", "012322", "012323", "012324", "012325", "012326", "012327", "012328", "012329", "012330", "012331", "012332", "012333", "012334", "012335", "012336", "012337", "012338", "012339", "012340", "012341", "012342", "012343", "012344", "012345", "012346", "012347", "012348", "012349", "012350", "012351", "012352", "012353", "012354", "012355", "012356", "012357", "012358", "012359", "012360", "012361", "012362", "012363", "012364", "012365", "012366", "012367", "012368", "012369", "012370", "012371", "012372", "012373", "012374", "012375", "012376", "012377", "012378", "012379", "012380", "012381", "012382", "012383", "012384", "012385", "012386", "012387", "012388", "012389", "012390", "012391", "012392", "012393", "012394", "012395", "012396", "012397", "012398", "012399", "012400", "012401", "012402", "012403", "012404", "012405", "012406", "012407", "012408", "012409", "012410", "012411", "012412", "012413", "012414", "012415", "012416", "012417", "012418", "012419", "012420", "012421", "012422", "012423", "012424", "012425", "012426", "012427", "012428", "012429", "012430", "012431", "012432", "012433", "012434", "012435", "012436", "012437", "012438", "012439", "012440", "012441", "012442", "012443", "012444", "012445", "012446", "012447", "012448", "012449", "012450", "012451", "012452", "012453", "012454", "012455", "012456", "012457", "012458", "012459", "012460", "012461", "012462", "012463", "012464", "012465", "012466", "012467", "012468", "012469", "012470", "012471", "012472", "012473", "012474", "012475", "012476", "012477", "012478", "012479", "012480", "012481", "012482", "012483", "012484", "012485", "012486", "012487", "012488", "012489", "012490", "012491", "012492", "012493", "012494", "012495", "012496", "012497", "012498", "012499", "012500", "012501", "012502", "012503", "012504", "012505", "012506", "012507", "012508", "012509", "012510", "014038", "014039", "014040", "014041", "014042", "014043", "014044", "014045", "014046", "014047", "014048", "014049", "014050", "014051", "014052", "014053", "014054", "014055", "014056", "014057", "014058", "014059", "014060", "014061", "014062", "014063", "014064", "014065", "014066", "014067", "014068", "014069", "014070", "014071", "014072", "014073", "014074", "014075", "014076", "014077", "014078", "014079", "014080", "014081", "014082", "014083", "014084", "014085", "014086", "014087", "014088", "014089", "014090", "014091", "014092", "014093", "014094", "014095", "014096", "014097", "014098", "014099", "014100", "014101", "014102", "014103", "014104", "014105", "014106", "014107", "014108", "014109", "014110", "014111", "014112", "014113", "014114", "014115", "014116", "014117", "014118", "014119", "014120", "014121", "014122", "014123", "014124", "014125", "014126", "014127", "014128", "014129", "014130", "014131", "014132", "014133", "014134", "014135", "014136", "014137", "014138", "014139", "014140", "014141", "014142", "014143", "014144", "014145", "014146", "014147", "014148", "014149", "014150", "014151", "014152", "014153", "014154", "014155", "014156", "014157", "016508", "016509", "016510", "016511", "016512", "016513", "016514", "016515", "016516", "016517", "016518", "016519", "016520", "016521", "016522", "016523", "016524", "016525", "016526", "016527", "016528", "016529", "016530", "016531", "016532", "016533", "016534", "016535", "016536", "016537", "016538", "016539", "016540", "016541", "016542", "016543", "016544", "016545", "016546", "016547", "016548", "016549", "016550", "016551", "016552", "016553", "016554", "016555", "016556", "016557", "016558", "016559", "016560", "016561", "016562", "016563", "016564", "016565", "016566", "016567", "016568", "016569", "016570", "016571", "016572", "016573", "016574", "016575", "016576", "016577", "016578", "016579", "016580", "016581", "016582", "016583", "016584", "016585", "016586", "016587", "016588", "016589", "016590", "016591", "016592", "016593", "016594", "016595", "016596", "016597", "016598", "016599", "016600", "016601", "016602", "016603", "016604", "016605", "016606", "016607", "016608", "016609", "016610", "016611", "016612", "016613", "016614", "016615", "016616", "016617", "016618", "016619", "016620", "016621", "016622", "016623", "016624", "016625", "016626", "016627", "016628", "016629", "016630", "016631", "016632", "016633", "016634", "016635", "016636", "016637", "016638", "016639", "016640", "016641", "016642", "016643", "016644", "016645", "016646", "016647", "016648", "016649", "016650", "016651", "016652", "016653", "016654", "016655", "016656", "016657", "016658", "016659", "016660", "016661", "016662", "016663", "016664", "016665", "016666", "016667", "016668", "016669", "016670", "016671", "016672", "016673", "016674", "016675", "016676", "016677", "016678", "016679", "016680", "016681", "016682", "016683", "016684", "016685", "016686", "016687", "016688", "016689", "016690", "016691", "016692", "016693", "016694", "016695", "016696", "016697"]}, "infrastructure_split": {"train": ["000000", "000001", "000002", "000003", "000004", "000005", "000006", "000007", "000008", "000009", "000010", "000011", "000012", "000013", "000014", "000015", "000016", "000017", "000018", "000019", "000020", "000021", "000022", "000023", "000024", "000025", "000026", "000027", "000028", "000029", "000030", "000031", "000032", "000033", "000034", "000035", "000036", "000037", "000038", "000039", "000040", "000041", "000042", "000043", "000044", "000045", "000046", "000047", "000048", "000049", "000050", "000051", "000052", "000053", "000054", "000055", "000056", "000057", "000058", "000059", "000060", "000061", "000062", "000063", "000064", "000065", "000066", "000067", "000068", "000069", "000070", "000071", "000072", "000073", "000074", "000075", "000076", "000077", "000078", "000079", "000080", "000081", "000082", "000083", "000084", "000085", "000086", "000087", "000088", "000089", "000090", "000091", "000092", "000093", "000094", "000095", "000096", "000097", "000098", "000099", "000100", "000101", "000102", "000103", "000104", "000105", "000106", "000107", "000108", "000109", "000110", "000111", "000112", "000113", "000114", "000115", "000116", "000117", "000118", "000119", "000120", "000121", "000122", "000123", "000124", "000125", "000126", "000127", "000128", "000129", "000130", "000131", "000132", "000133", "000134", "000135", "000136", "000137", "000138", "000139", "000140", "000141", "000142", "000143", "000144", "000145", "000146", "000147", "000148", "000149", "000150", "000151", "000152", "000153", "000154", "000155", "000156", "000157", "000158", "000159", "000160", "000161", "000162", "000163", "000164", "000165", "000166", "000167", "000168", "000169", "000170", "000171", "000172", "000173", "000174", "000175", "000176", "000177", "000178", "000179", "000180", "000181", "000182", "000183", "000184", "000185", "000186", "000187", "000188", "000189", "000190", "000191", "000192", "000193", "000194", "000195", "000196", "000197", "000198", "000199", "000200", "000201", "000202", "000203", "000204", "000205", "000206", "000207", "000208", "000209", "000210", "000211", "000212", "000213", "000214", "000215", "000216", "000217", "000218", "000219", "000220", "000221", "000222", "000223", "000224", "000225", "000226", "000227", "000228", "000229", "000230", "000231", "000232", "000233", "000234", "000235", "000236", "000237", "000238", "000239", "000240", "000241", "000242", "000243", "000244", "000245", "000246", "000247", "000248", "000249", "000250", "000251", "000252", "000253", "000254", "000255", "000256", "000257", "000258", "000259", "000260", "000261", "000262", "000263", "000264", "000265", "000266", "000267", "000268", "000269", "000270", "000271", "000272", "000273", "000274", "000275", "000276", "000277", "000278", "000279", "000280", "000281", "000282", "000283", "000284", "000285", "000286", "000287", "000288", "000289", "000290", "000291", "000292", "000293", "000294", "000295", "000296", "000297", "000298", "000299", "000300", "000301", "000302", "000303", "000304", "000305", "000306", "000307", "000308", "000309", "000310", "000311", "000312", "000313", "000314", "000315", "000316", "000317", "000318", "000319", "000320", "000321", "000322", "000323", "000324", "000325", "000326", "000327", "000328", "000329", "000330", "000331", "000332", "000333", "000334", "000335", "000336", "000337", "000338", "000339", "000340", "000341", "000342", "000343", "000344", "000345", "000346", "000347", "000348", "000349", "000350", "000351", "000352", "000353", "000354", "000355", "000356", "000357", "000358", "000359", "000360", "000361", "000362", "000363", "000364", "000365", "000366", "000367", "000368", "000369", "000370", "000371", "000372", "000373", "000374", "000375", "000376", "000377", "000378", "000379", "000380", "000381", "000382", "000383", "000384", "000385", "000386", "000387", "000388", "000389", "000390", "000391", "000392", "000393", "000394", "000395", "000396", "000397", "000398", "000399", "000400", "000401", "000402", "000403", "000404", "000405", "000406", "000407", "000408", "000409", "000410", "000411", "000412", "000413", "000414", "000415", "000416", "000417", "000418", "000419", "000420", "000421", "000422", "000423", "000424", "000425", "000426", "000427", "000428", "000429", "000430", "000431", "000432", "000433", "000434", "000435", "000436", "000437", "000438", "000439", "000440", "000441", "000442", "000443", "000444", "000445", "000446", "000447", "000448", "000449", "000450", "000451", "000452", "000453", "000454", "000455", "000456", "000457", "000458", "000459", "000460", "000461", "000462", "000463", "000464", "000465", "000466", "000467", "000468", "000469", "000470", "000471", "000472", "000473", "000474", "000475", "000476", "000477", "000478", "000479", "000480", "000481", "000482", "000483", "000484", "000485", "000486", "000487", "000488", "000489", "000490", "000491", "000492", "000493", "000494", "000495", "000496", "000497", "000498", "000499", "000500", "000501", "000502", "000503", "000504", "000505", "000506", "000507", "000508", "000509", "000510", "000511", "000512", "000513", "000514", "000515", "000516", "000517", "000518", "000519", "000520", "000521", "000522", "000523", "000524", "000525", "000526", "000527", "000528", "000529", "000530", "000531", "000532", "000533", "000534", "000535", "000536", "000537", "000538", "000539", "000540", "000541", "000542", "000543", "000544", "000545", "000546", "000547", "000548", "000549", "000550", "000551", "000552", "000553", "000554", "000555", "000556", "000557", "000558", "000559", "000560", "000561", "000562", "000563", "000564", "000565", "000566", "000567", "000568", "000569", "000570", "000571", "000572", "000573", "000574", "000575", "000576", "000577", "000578", "000579", "000580", "000581", "000582", "000583", "000584", "000585", "000586", "000587", "000588", "000589", "000590", "000591", "000592", "000593", "000594", "000595", "000596", "000597", "000598", "000599", "000600", "000601", "000602", "000603", "000604", "000605", "000606", "000607", "000608", "000609", "000610", "000611", "000612", "000613", "000614", "000615", "000616", "000617", "000618", "000619", "000620", "000621", "000622", "000623", "000624", "000625", "000626", "000627", "000628", "000629", "000630", "000631", "000632", "000633", "000634", "000635", "000636", "000637", "000638", "000639", "000640", "000641", "000642", "000643", "000644", "000645", "000646", "000647", "000648", "000649", "000650", "000651", "000652", "000653", "000654", "000655", "000656", "000657", "000658", "000659", "000660", "000661", "000662", "000663", "000664", "000665", "000666", "000667", "000668", "000669", "000670", "000671", "000672", "000673", "000674", "000675", "000676", "000677", "000678", "000679", "000680", "000681", "000682", "000683", "000684", "000685", "000686", "000687", "000688", "000689", "000690", "000691", "000692", "000693", "000694", "000695", "000696", "000697", "000698", "000699", "000700", "000701", "000702", "000703", "000704", "000705", "000706", "000707", "000708", "000709", "000710", "000711", "000712", "000713", "000714", "000715", "000716", "000717", "000718", "000719", "000720", "000721", "000722", "000723", "000724", "000725", "000726", "000727", "000728", "000729", "000730", "000731", "000732", "000733", "000734", "000735", "000736", "000737", "000738", "000739", "000740", "000741", "000742", "000743", "000744", "000745", "000746", "000747", "000748", "000749", "000750", "000751", "000752", "000753", "000754", "000755", "000756", "000757", "000758", "000759", "000760", "000761", "000762", "000763", "000764", "000765", "000766", "000767", "000768", "000769", "000770", "000771", "000772", "000773", "000774", "000775", "000776", "000777", "000778", "000779", "000780", "000781", "000782", "000783", "000784", "000785", "000786", "000787", "000788", "000789", "000790", "000791", "000792", "000793", "000794", "000795", "000796", "000797", "000798", "000799", "000800", "000801", "000802", "000803", "000804", "000805", "000806", "000807", "000808", "000809", "000810", "000811", "000812", "000813", "000814", "000815", "000816", "000817", "000818", "000819", "000820", "000821", "000822", "000823", "000824", "000825", "000826", "000827", "000828", "000829", "000830", "000831", "000832", "000833", "000834", "000835", "000836", "000837", "000838", "000839", "000840", "000841", "000842", "000843", "000844", "000845", "000846", "000847", "000848", "000849", "000850", "000851", "000852", "000853", "000854", "000855", "000856", "000857", "000858", "000859", "000860", "000861", "000862", "000863", "000864", "000865", "000866", "000867", "000868", "000869", "000870", "000871", "000872", "000873", "000874", "000875", "000876", "000877", "000878", "000879", "000880", "000881", "000882", "000883", "000884", "000885", "000886", "000887", "000888", "000889", "000890", "000891", "000892", "000893", "000894", "000895", "000896", "000897", "000898", "000899", "000900", "000901", "001124", "001125", "001126", "001127", "001128", "001129", "001130", "001131", "001132", "001133", "001134", "001135", "001136", "001137", "001138", "001139", "001140", "001141", "001142", "001143", "001144", "001145", "001146", "001147", "001149", "001150", "001151", "001152", "001153", "001154", "001155", "001156", "001157", "001158", "001159", "001160", "001161", "001162", "001163", "001164", "001165", "001166", "001167", "001168", "001169", "001170", "001171", "001172", "001173", "001174", "001175", "001176", "001177", "001178", "001179", "001180", "001181", "001182", "001183", "001184", "001185", "001186", "001187", "001188", "001189", "001190", "001191", "001192", "001193", "001194", "001195", "001196", "001197", "001198", "001199", "001200", "001201", "001202", "001203", "001204", "001205", "001206", "001207", "001208", "001209", "001210", "001211", "001212", "001213", "001214", "001215", "001216", "001217", "001218", "001219", "001220", "001221", "001222", "001223", "001224", "001225", "001226", "001227", "001228", "001229", "001230", "001231", "001232", "001233", "001234", "001235", "001236", "001237", "001238", "001239", "001240", "001241", "001242", "001243", "001244", "001245", "001246", "001247", "001248", "001249", "001250", "001251", "001252", "001253", "001254", "001255", "001256", "001257", "001258", "001259", "001260", "001261", "001262", "001263", "001264", "001265", "001266", "001267", "001268", "001269", "001270", "001271", "001272", "001273", "001274", "001275", "001276", "001277", "001278", "001279", "001280", "001281", "001282", "001283", "001284", "001285", "001286", "001287", "001288", "001289", "001290", "001291", "001292", "001293", "001294", "001295", "001296", "001297", "001298", "001299", "001300", "001301", "001302", "001303", "001304", "001305", "001306", "001307", "001308", "001309", "001310", "001311", "001312", "001313", "001314", "001315", "001316", "001317", "001318", "001319", "001320", "001321", "001322", "001323", "001324", "001325", "001326", "001327", "001328", "001329", "001330", "001331", "001332", "001333", "001334", "001335", "001336", "001337", "001338", "001339", "001340", "001341", "001342", "001343", "001344", "001345", "001346", "001347", "001348", "001349", "001350", "001351", "001352", "001353", "001354", "001355", "001356", "001357", "001358", "001359", "001360", "001361", "001362", "001363", "001364", "001365", "001366", "001367", "001368", "001369", "001370", "001371", "001372", "001373", "001374", "001375", "001376", "001377", "001378", "001379", "001380", "001381", "001382", "001383", "001384", "001385", "001386", "001387", "001388", "001389", "001390", "001391", "001392", "001393", "001394", "001395", "001396", "001397", "001398", "001399", "001400", "001401", "001402", "001403", "001404", "001405", "001406", "001407", "001408", "001409", "001410", "001411", "001412", "001413", "001414", "001415", "001416", "001417", "001418", "001419", "001420", "001421", "001422", "001423", "001424", "001425", "001426", "001427", "001428", "001429", "001430", "001431", "001432", "001433", "001434", "001435", "001436", "001437", "001438", "001439", "001440", "001441", "001442", "001443", "001444", "001445", "001446", "001447", "001448", "001449", "001450", "001451", "001452", "001453", "001454", "001455", "001456", "001457", "001458", "001459", "001460", "001461", "001462", "001463", "001464", "001465", "001466", "001467", "001468", "001469", "001470", "001471", "001472", "001473", "001474", "001475", "001476", "001477", "001478", "001479", "001480", "001481", "001482", "001483", "001484", "001485", "001486", "001487", "001488", "001489", "001490", "001491", "001492", "001493", "001494", "001495", "001496", "001497", "001498", "001499", "001500", "001501", "001502", "001503", "001504", "001505", "001506", "001507", "001508", "001509", "001510", "001511", "001512", "001513", "001514", "001515", "001516", "001517", "001518", "001519", "001520", "001521", "001522", "001523", "001524", "001525", "001526", "001527", "001528", "001529", "001535", "001536", "001537", "001538", "001539", "001540", "001541", "001542", "001543", "001544", "001545", "001546", "001547", "001548", "001549", "001550", "001551", "001552", "001553", "001554", "001555", "001556", "001557", "001558", "001559", "001560", "001561", "001562", "001563", "001564", "001565", "001566", "001567", "001568", "001569", "001570", "001571", "001572", "001573", "001574", "001575", "001576", "001577", "001578", "001579", "001580", "001947", "001948", "001949", "001950", "001951", "001952", "001953", "001954", "001955", "001956", "001957", "001958", "001959", "001960", "001961", "001962", "001963", "001964", "001965", "001966", "001967", "001968", "001969", "001970", "001971", "001972", "001973", "001974", "001975", "001976", "001977", "001978", "001979", "001980", "001981", "001982", "001983", "001984", "001985", "001986", "001987", "001988", "001989", "001990", "001991", "001992", "001993", "001994", "001995", "001996", "001997", "001998", "001999", "002000", "002001", "002002", "002003", "002004", "002005", "002006", "002007", "002008", "002009", "002010", "002011", "002012", "002013", "002014", "002015", "002016", "002017", "002018", "002019", "002020", "002021", "002022", "002023", "002024", "002025", "002026", "002027", "002028", "002029", "002030", "002031", "002032", "002033", "002034", "002035", "002036", "002037", "002038", "002039", "002040", "002041", "002042", "002043", "002044", "002045", "002046", "002047", "002048", "002049", "002050", "002051", "002052", "002053", "002054", "002055", "002056", "002057", "002058", "002059", "002060", "002061", "002062", "002063", "002064", "002065", "002066", "002067", "002068", "002069", "002070", "002071", "002072", "002073", "002074", "002075", "002076", "002077", "002078", "002079", "002080", "002081", "002082", "002083", "002084", "002085", "002086", "002087", "002088", "002089", "002090", "002091", "002092", "002093", "002094", "002095", "002096", "002097", "002098", "002099", "002100", "002101", "002102", "002103", "002104", "002105", "002106", "002107", "002108", "002109", "002110", "002111", "002112", "002113", "002114", "002115", "002116", "002117", "002118", "002119", "002120", "002121", "002122", "002123", "002124", "002125", "002126", "002127", "002128", "002129", "002130", "002131", "002132", "002133", "002134", "002135", "002136", "002137", "002138", "002139", "002140", "002141", "002142", "002143", "002144", "002145", "002146", "002147", "002148", "002149", "002150", "002151", "002152", "002153", "002154", "002155", "002156", "002157", "002158", "002159", "002343", "002344", "002345", "002346", "002347", "002348", "002349", "002350", "002351", "002352", "002353", "002354", "002355", "002356", "002357", "002358", "002359", "002360", "002361", "002362", "002363", "002364", "002365", "002366", "002367", "002368", "002369", "002370", "002371", "002372", "002373", "002374", "002375", "002376", "002377", "002378", "002379", "002380", "002381", "002382", "002383", "002384", "002385", "002386", "002387", "002388", "002389", "002390", "002391", "002392", "002393", "002394", "002395", "002396", "002397", "002398", "002399", "002400", "002401", "002402", "002403", "002404", "002405", "002406", "002407", "002408", "002409", "002410", "002411", "002412", "002413", "002414", "002415", "002416", "002417", "002418", "002419", "002420", "002421", "002422", "002423", "002439", "002440", "002441", "002442", "002443", "002444", "002445", "002446", "002447", "002448", "002449", "002450", "002451", "002452", "002453", "002454", "002455", "002456", "002457", "002458", "002459", "002460", "002461", "002462", "002463", "002464", "002465", "002466", "002467", "002468", "002469", "002470", "002471", "002472", "002473", "002474", "002475", "002476", "002477", "002478", "002479", "002480", "002481", "002482", "002483", "002484", "002485", "002486", "002487", "002488", "002489", "002490", "002491", "002492", "002493", "002494", "002495", "002496", "002497", "002498", "002499", "002500", "002501", "002502", "002503", "002504", "002505", "002506", "002507", "002508", "002509", "002510", "002511", "002512", "002513", "002514", "002515", "002516", "002517", "002518", "002519", "002520", "002521", "002522", "002523", "002524", "002525", "002526", "002527", "002528", "002529", "002530", "002531", "002532", "002533", "003356", "003357", "003358", "003359", "003360", "003361", "003362", "003363", "003364", "003365", "003366", "003367", "003368", "003369", "003370", "003371", "003372", "003373", "003374", "003375", "003376", "003377", "003378", "003379", "003380", "003381", "003382", "003383", "003384", "003385", "003386", "003387", "003388", "003389", "003390", "003391", "003392", "003393", "003394", "003395", "003396", "003397", "003398", "003399", "003400", "003401", "003402", "003403", "003404", "003405", "003406", "003424", "003425", "003426", "003427", "003428", "003429", "003430", "003431", "003432", "003433", "003434", "003435", "003436", "003437", "003438", "003439", "003440", "003441", "003442", "003443", "003444", "003445", "003446", "003447", "003448", "003449", "003450", "003451", "003452", "003453", "003454", "003455", "003456", "003457", "003458", "003459", "003460", "003461", "003462", "003463", "003464", "003465", "003466", "003467", "003468", "003469", "003470", "003471", "003472", "003473", "003474", "003475", "003476", "003477", "003478", "003479", "003480", "003481", "003482", "003483", "003484", "003485", "003486", "003487", "003488", "003489", "003490", "003491", "003492", "003493", "003494", "003495", "003496", "003497", "003498", "003499", "003500", "003501", "003502", "003503", "003504", "003505", "003506", "003507", "003508", "003509", "003510", "003511", "003512", "003513", "003514", "003515", "003516", "003517", "003639", "003640", "003641", "003642", "003643", "003644", "003645", "003646", "003647", "003648", "003649", "003650", "003651", "003652", "003653", "003654", "003655", "003656", "003657", "003658", "003659", "003660", "003661", "003662", "003663", "003664", "003665", "003666", "003667", "003668", "003669", "003670", "003671", "003672", "003673", "003674", "003675", "003676", "003677", "003678", "003679", "003680", "003681", "003682", "003683", "003684", "003685", "003686", "003687", "003688", "003689", "003690", "003691", "003692", "003693", "003694", "003695", "003696", "003697", "003698", "003699", "003700", "003701", "003702", "003703", "003704", "003705", "003706", "003707", "003708", "003709", "003710", "003711", "003712", "003713", "003714", "003715", "003716", "003717", "003718", "003719", "003720", "003721", "003722", "003723", "003724", "003725", "003726", "003727", "003728", "003729", "003730", "003731", "003732", "003733", "003734", "003735", "003736", "003737", "003738", "003739", "003740", "003741", "003742", "003743", "003744", "003745", "003746", "003747", "003748", "003749", "003750", "003751", "003752", "003753", "003754", "003755", "003756", "003757", "003758", "003759", "003760", "003761", "003762", "003763", "003764", "003765", "003766", "003767", "003768", "003769", "003770", "003771", "003772", "003773", "003774", "003775", "003776", "003777", "003778", "003779", "003780", "003781", "003782", "003783", "003784", "003785", "003786", "003787", "003788", "003789", "004416", "004417", "004418", "004419", "004420", "004421", "004422", "004423", "004424", "004425", "004426", "004427", "004428", "004429", "004430", "004431", "004432", "004433", "004434", "004435", "004436", "004437", "004438", "004439", "004440", "004441", "004442", "004443", "004444", "004445", "004446", "004447", "004448", "004449", "004450", "004451", "004452", "004453", "004454", "004455", "004456", "004457", "004458", "004459", "004460", "004461", "004462", "004463", "004464", "004465", "004466", "004467", "004468", "004469", "004470", "004471", "004472", "004473", "004474", "004475", "004476", "004477", "004478", "004479", "004480", "004481", "004482", "004483", "004484", "004485", "004486", "004487", "004488", "004489", "004490", "004491", "004492", "004493", "004494", "004495", "004496", "004497", "004498", "004499", "004500", "004501", "004502", "004503", "004504", "004505", "004506", "004507", "004508", "004509", "004510", "004511", "004512", "004513", "004514", "004515", "004516", "004517", "004518", "004519", "004520", "004521", "004522", "004523", "004524", "004525", "004526", "004527", "004528", "004529", "004530", "004531", "004532", "004533", "004534", "004535", "004536", "004537", "004538", "004539", "004540", "004541", "004542", "004543", "004544", "004545", "004546", "004547", "004548", "004549", "004550", "004551", "004552", "004553", "004554", "004555", "004556", "004557", "004558", "004559", "004560", "004561", "004562", "004563", "004564", "004565", "004566", "004567", "004568", "004569", "004570", "004571", "004572", "004573", "004574", "004575", "004576", "004577", "004578", "004579", "004580", "004581", "004582", "004583", "004584", "004585", "004586", "004587", "004588", "004589", "004590", "004591", "004592", "004593", "004594", "004595", "004596", "004597", "004598", "004599", "004600", "004601", "004602", "004603", "004604", "004605", "004606", "004607", "004608", "004609", "004610", "004611", "004612", "004613", "004614", "004615", "004616", "004617", "004618", "004619", "004620", "004621", "004622", "004623", "004624", "004625", "004626", "004627", "004628", "004629", "004630", "004631", "004632", "004633", "004634", "004635", "004636", "004637", "004638", "004639", "004640", "004641", "004642", "004643", "004644", "004645", "004646", "004647", "004648", "004649", "004650", "004651", "004652", "004653", "004654", "004655", "004656", "004657", "004658", "004659", "004660", "004661", "004662", "004663", "004664", "004665", "004666", "004667", "004668", "004669", "004670", "004671", "004672", "004673", "004674", "004675", "004676", "004677", "004678", "004679", "004680", "004681", "004682", "004683", "004684", "004685", "004686", "004687", "004688", "004689", "004690", "004691", "004692", "004693", "004694", "004695", "004696", "004697", "004698", "004699", "004700", "004701", "004702", "004703", "004704", "004705", "004706", "004707", "004708", "004709", "004710", "004711", "004712", "004713", "004714", "004715", "004716", "004717", "004718", "004860", "004861", "004862", "004863", "004864", "004865", "004866", "004867", "004868", "004869", "004870", "004871", "004872", "004873", "004874", "004875", "004876", "004877", "004878", "004879", "004880", "004881", "004882", "004883", "004884", "004885", "004886", "004887", "004888", "004889", "004890", "004891", "004892", "004893", "004894", "004895", "004896", "004897", "004898", "004899", "004900", "004920", "004921", "004922", "004923", "004924", "004925", "004926", "004927", "004928", "004929", "004930", "004931", "004932", "004933", "004934", "004935", "004936", "004937", "004938", "004939", "004940", "004941", "004942", "004943", "004944", "004945", "004946", "004947", "004948", "004949", "004950", "004951", "004952", "004953", "004954", "004955", "004956", "004957", "004958", "004959", "004960", "004961", "004962", "004963", "004964", "004965", "004966", "004967", "004968", "004969", "004970", "004971", "004972", "004973", "004974", "004975", "004976", "004977", "004978", "004979", "004980", "004981", "004982", "004983", "004984", "004985", "004986", "004987", "004988", "004989", "004990", "004991", "004992", "004993", "004994", "004995", "004996", "004997", "004998", "004999", "005000", "005001", "005002", "005003", "005004", "005005", "005006", "005007", "005008", "005009", "005010", "005011", "005012", "005013", "005014", "005015", "005016", "005017", "005018", "005019", "005020", "005021", "005022", "005023", "005024", "005025", "005026", "005027", "005028", "005029", "005030", "005031", "005032", "005033", "005034", "005035", "005036", "005037", "005038", "005039", "005040", "005041", "005042", "005043", "005044", "005045", "005046", "005047", "005048", "005049", "005050", "005051", "005587", "005588", "005589", "005590", "005591", "005592", "005593", "005594", "005595", "005596", "005597", "005598", "005599", "005600", "005601", "005602", "005603", "005604", "005605", "005606", "005607", "005608", "005609", "005610", "005611", "005612", "005613", "005614", "005615", "005616", "005617", "005618", "005619", "005620", "005621", "005622", "005623", "005624", "005625", "005626", "005627", "005628", "005629", "005630", "005631", "005632", "005633", "005634", "005635", "005636", "005637", "005638", "005639", "005640", "005641", "005642", "005643", "005644", "005645", "005646", "005647", "005648", "005649", "005650", "005651", "005652", "005653", "005654", "005655", "005656", "005657", "005658", "005659", "005660", "005661", "005662", "005663", "005664", "005665", "005666", "005667", "005668", "005669", "005670", "005671", "005672", "005673", "005674", "005675", "005676", "005677", "005678", "005679", "005680", "005681", "005682", "005683", "005684", "005685", "005686", "005687", "005688", "005689", "005690", "005691", "005692", "005693", "005694", "005695", "005696", "005697", "005698", "005699", "005700", "005701", "005702", "005703", "005704", "005705", "005706", "005707", "005708", "005709", "005710", "005711", "005712", "005713", "005714", "005715", "005716", "005717", "005718", "005719", "005720", "005721", "005722", "005723", "005724", "005725", "005726", "005727", "005728", "005729", "005730", "005731", "005732", "005733", "005734", "005735", "005736", "005737", "005738", "005739", "005740", "005741", "005742", "005743", "005744", "005745", "005746", "005747", "005748", "005749", "005750", "005751", "005752", "005753", "005754", "005755", "005756", "005757", "005758", "005759", "005760", "005761", "005762", "005763", "005764", "005765", "005766", "005767", "005768", "005769", "005770", "005771", "005772", "005773", "005774", "005775", "005776", "005777", "005778", "005779", "005780", "005781", "005782", "005783", "005784", "005785", "005786", "005787", "005788", "005789", "005790", "005791", "005792", "005793", "005794", "005795", "005796", "005797", "005798", "005799", "005800", "005801", "005802", "005803", "005804", "005805", "005806", "005807", "005808", "005809", "005810", "005811", "005812", "005813", "005814", "005815", "005816", "005817", "005818", "005819", "005820", "005821", "005822", "005823", "005824", "005825", "005826", "005827", "005828", "005829", "005830", "005831", "005832", "005833", "005834", "005835", "005836", "005837", "005838", "005839", "005840", "005841", "005842", "005843", "005844", "005845", "005846", "005847", "005848", "005849", "005850", "005851", "005852", "005853", "005854", "005855", "005856", "005857", "005858", "005859", "005860", "005861", "005862", "005863", "005864", "005865", "005866", "005867", "005868", "005869", "005870", "005871", "005872", "005873", "005874", "005875", "005876", "005877", "005878", "005879", "005880", "005881", "005882", "005883", "005884", "005885", "005886", "005887", "005888", "005889", "005890", "005891", "005892", "005893", "005894", "005895", "005896", "005897", "005898", "005899", "005900", "005901", "005902", "005903", "005904", "005905", "005906", "005907", "005908", "005909", "005910", "005911", "005912", "005913", "005914", "005915", "005916", "005917", "005918", "005919", "006102", "006103", "006104", "006105", "006106", "006107", "006108", "006109", "006110", "006111", "006112", "006113", "006114", "006115", "006116", "006117", "006118", "006119", "006120", "006121", "006122", "006123", "006124", "006125", "006126", "006127", "006128", "006129", "006130", "006131", "006132", "006133", "006134", "006135", "006136", "006137", "006138", "006139", "006140", "006141", "006142", "006143", "006144", "006145", "006146", "006147", "006148", "006149", "006150", "006151", "006152", "006153", "006154", "006155", "006156", "006157", "006158", "006159", "006160", "006161", "006162", "006163", "006164", "006165", "006166", "006167", "006168", "006169", "006170", "006171", "006172", "006173", "006174", "006175", "006176", "006177", "006178", "006179", "006180", "006181", "006182", "006183", "006184", "006185", "006186", "006187", "006188", "006189", "006190", "006191", "006192", "006193", "006194", "006195", "006196", "006197", "006198", "006199", "006200", "006201", "006202", "006203", "006204", "006205", "006206", "006207", "006208", "006209", "006210", "006211", "006212", "006213", "006214", "006215", "006216", "006217", "006218", "006219", "006220", "006221", "006222", "006223", "006224", "006225", "006226", "006227", "006228", "006229", "006230", "006231", "006232", "006233", "006234", "006235", "006236", "006237", "006238", "006239", "006240", "006241", "006242", "006243", "006244", "006245", "006246", "006247", "006248", "006249", "006250", "006251", "006252", "006253", "006254", "006255", "006256", "006257", "006258", "006259", "006260", "006261", "006262", "006263", "006264", "006265", "006266", "006267", "006268", "006269", "006270", "006271", "006272", "006273", "006274", "006275", "006276", "006277", "006278", "006279", "006280", "006281", "006282", "006283", "006284", "006285", "006286", "006287", "006288", "006289", "006290", "006291", "006292", "006293", "006294", "006295", "006296", "006297", "006298", "006299", "006300", "006301", "006302", "006303", "006304", "006305", "006306", "006307", "006308", "006309", "006310", "006311", "006312", "006313", "006314", "006315", "006316", "006317", "006318", "006319", "006320", "006321", "006322", "006323", "006324", "006325", "006326", "006327", "006328", "006329", "006330", "006331", "006332", "006333", "006334", "006335", "006336", "006337", "006338", "006339", "006340", "006341", "006342", "006343", "006344", "006345", "006346", "006347", "006348", "006349", "006350", "006351", "006352", "006353", "006354", "006355", "006356", "006357", "006358", "006359", "006360", "006361", "006362", "006363", "006364", "006365", "006366", "006367", "006368", "006369", "006370", "006371", "006372", "006373", "006374", "006375", "006376", "006377", "006378", "006379", "006380", "006381", "006382", "006383", "006384", "006385", "006386", "006387", "006388", "006389", "006390", "006391", "006392", "006393", "006394", "006395", "006396", "006397", "006398", "006399", "006400", "006401", "006402", "006403", "006404", "006405", "006406", "006407", "006408", "006409", "006410", "006411", "006412", "006413", "006414", "006415", "006416", "006417", "006418", "006419", "006420", "006421", "006422", "006423", "006424", "006425", "006426", "006427", "006428", "006429", "006430", "006431", "006432", "006433", "006434", "006435", "006436", "006437", "006438", "006439", "006440", "006441", "006442", "006443", "006444", "006445", "006446", "006447", "006448", "006449", "006450", "006451", "006452", "006453", "006454", "006455", "006456", "006457", "006458", "006459", "006460", "006461", "006462", "006463", "006464", "006465", "006466", "006467", "006468", "006469", "006470", "006471", "006472", "006473", "006474", "006475", "006476", "006477", "006478", "006479", "006480", "006481", "006482", "006483", "006484", "006485", "006486", "006487", "006488", "006489", "006490", "006491", "006492", "006493", "006494", "006495", "006496", "006497", "006498", "006499", "006500", "006501", "006502", "006503", "006504", "006505", "006506", "006507", "006508", "006509", "006510", "006511", "006512", "006513", "006514", "006515", "006516", "006517", "006518", "006519", "006520", "006521", "006522", "006523", "006524", "006525", "006526", "006527", "006528", "006529", "006530", "006531", "006532", "006533", "006534", "006535", "006536", "006537", "006538", "006539", "006540", "006541", "006542", "006543", "006544", "006545", "006546", "006547", "006548", "006549", "006550", "006551", "006552", "006553", "006554", "006555", "006556", "006557", "006558", "006559", "006560", "006561", "006562", "006563", "006564", "006565", "006566", "006567", "006568", "006569", "006570", "006571", "006572", "006573", "006574", "006575", "006576", "006577", "006578", "006579", "006580", "006581", "006582", "006583", "006584", "006585", "006586", "006587", "006588", "006589", "006590", "006591", "006592", "006593", "006594", "006595", "006596", "006597", "006598", "006599", "006600", "006601", "006602", "006603", "006604", "006605", "006606", "006607", "006608", "006609", "006610", "006611", "006612", "006613", "006614", "006615", "006616", "006617", "006618", "006619", "006620", "006621", "006622", "006623", "006624", "006625", "006626", "006627", "006628", "006629", "006630", "006631", "006632", "006633", "006634", "006635", "006636", "006637", "006638", "006639", "006640", "006641", "006642", "006643", "006644", "006645", "006646", "006647", "006648", "006649", "006650", "006651", "006652", "006653", "006654", "006655", "006656", "006657", "006658", "006659", "006660", "006661", "006662", "006663", "006664", "006665", "006666", "006667", "006668", "006669", "006670", "006671", "006672", "006673", "006674", "006675", "006676", "006677", "006678", "006679", "006680", "006681", "006682", "006683", "006684", "006685", "006686", "006687", "006688", "006689", "006690", "006691", "006692", "006693", "006694", "006695", "006696", "006697", "006698", "006699", "006700", "006701", "006702", "006703", "006704", "006705", "006706", "006707", "006708", "006709", "006710", "006711", "006712", "006713", "006714", "006715", "006716", "006717", "006718", "006719", "006720", "006721", "006722", "006723", "006724", "006725", "006726", "006727", "006728", "006729", "006730", "006731", "006732", "006733", "006734", "006735", "006736", "006737", "006738", "006739", "006740", "006741", "006742", "006743", "006744", "006745", "006746", "006747", "006748", "006749", "006750", "006751", "006752", "006753", "006754", "006755", "006756", "006757", "006758", "006759", "006760", "006761", "006762", "006763", "006764", "006765", "006766", "006767", "006768", "006769", "006770", "006771", "006772", "006773", "006774", "006775", "006776", "006777", "006778", "006779", "006780", "006781", "006782", "006783", "006784", "006785", "006786", "006787", "006788", "006789", "006790", "006791", "006792", "006793", "006794", "006795", "006796", "006797", "006798", "006799", "006800", "006801", "006802", "006803", "006804", "006805", "006806", "006807", "006808", "006809", "006810", "006811", "006812", "006813", "006814", "006815", "006816", "006817", "006818", "006819", "006820", "006821", "006822", "006823", "006824", "006825", "006826", "006827", "006828", "006829", "006830", "006831", "006832", "006833", "006834", "006835", "006836", "006837", "006838", "006839", "006840", "006841", "006842", "006843", "006844", "006845", "006846", "006847", "006848", "006849", "006850", "006851", "006852", "006853", "006854", "006855", "006856", "006857", "006858", "006859", "006860", "006861", "006862", "006863", "006864", "006865", "006866", "006867", "006868", "006869", "006870", "006871", "006872", "006873", "006874", "006875", "006876", "006877", "006878", "006879", "006880", "006881", "006882", "006883", "006884", "006885", "006886", "006887", "006888", "006889", "006890", "006891", "006892", "006893", "006894", "006895", "006896", "006897", "006898", "006899", "006900", "006901", "006902", "006903", "006904", "006905", "006906", "006907", "006908", "006909", "006910", "006911", "006912", "006913", "006914", "006915", "006916", "006917", "006918", "006919", "006920", "006921", "006922", "006923", "006924", "006925", "006926", "006927", "006928", "006929", "006930", "006931", "006932", "006933", "006934", "006935", "006936", "006937", "006938", "006939", "006940", "006941", "006942", "006943", "006944", "006945", "006946", "006947", "006948", "006949", "006950", "006951", "006952", "006953", "006954", "006955", "006956", "006957", "006958", "006959", "006960", "006961", "006962", "006963", "006964", "006965", "006966", "006967", "006968", "006969", "006970", "006971", "006972", "006973", "006974", "006975", "006976", "006977", "006978", "006979", "006980", "006981", "006982", "006983", "006984", "006985", "006986", "006987", "006988", "006989", "006990", "006991", "006992", "006993", "006994", "006995", "006996", "006997", "006998", "006999", "007000", "007001", "007002", "007003", "007004", "007005", "007006", "007007", "007448", "007449", "007450", "007451", "007452", "007453", "007454", "007455", "007456", "007457", "007458", "007459", "007460", "007461", "007462", "007463", "007464", "007465", "007466", "007467", "007468", "007469", "007470", "007471", "007472", "007473", "007474", "007475", "007476", "007477", "007478", "007479", "007480", "007481", "007482", "007483", "007484", "007485", "007486", "007487", "007488", "007489", "007490", "007491", "007492", "007493", "007494", "007495", "007496", "007497", "007498", "007499", "007500", "007501", "007502", "007503", "007504", "007505", "007506", "007507", "007508", "007509", "007510", "007511", "007512", "007513", "007514", "007515", "007516", "007517", "007518", "007519", "007520", "007521", "007522", "007523", "007524", "007525", "007526", "007527", "007528", "007529", "007530", "007531", "007532", "007533", "007534", "007535", "007536", "007537", "007538", "007539", "007540", "007541", "007542", "007543", "007544", "007545", "007546", "007547", "007548", "007549", "007550", "007551", "007552", "007553", "007554", "007555", "007556", "007557", "007558", "007559", "007560", "007561", "007562", "007563", "007564", "007565", "007566", "007567", "007574", "007575", "007576", "007577", "007578", "007579", "007580", "007581", "007582", "007583", "007584", "007585", "007586", "007587", "007588", "007589", "007590", "007591", "007592", "007593", "007594", "007595", "007596", "007597", "007598", "007599", "007600", "007601", "007602", "007603", "007604", "007605", "007606", "007607", "007608", "007609", "007610", "007611", "007612", "007613", "007614", "007615", "007616", "007617", "007618", "007619", "007620", "007621", "007622", "007623", "007624", "007625", "007626", "007627", "007628", "007629", "007630", "007631", "007632", "007633", "007634", "007635", "007636", "007637", "007638", "007639", "007640", "007641", "007642", "007643", "007644", "007645", "007646", "007647", "007648", "007649", "007650", "007651", "007652", "007653", "007654", "007655", "007656", "007657", "007658", "007659", "007660", "007661", "007662", "007663", "007664", "007665", "007666", "007667", "007668", "007669", "007670", "007671", "007672", "007673", "007674", "007675", "007676", "007677", "007678", "007679", "007680", "007681", "007682", "007683", "007684", "007685", "007686", "007687", "007688", "007689", "007690", "007691", "007692", "007693", "007694", "007695", "007696", "007697", "007698", "007699", "007700", "007701", "007702", "007703", "007704", "007705", "007706", "007707", "007708", "007709", "007710", "007711", "007712", "007713", "007714", "007715", "007716", "007717", "007718", "007719", "007720", "007721", "007722", "007723", "007724", "007725", "007726", "007727", "007728", "007729", "007730", "007731", "007732", "007733", "007734", "007735", "007736", "007737", "007738", "007739", "007740", "007741", "007742", "007743", "007744", "007745", "007746", "007747", "007748", "007749", "007750", "007751", "007752", "007753", "007754", "007755", "007756", "007757", "007758", "007759", "007760", "007761", "007762", "007763", "007764", "007765", "007766", "007767", "007768", "007769", "007770", "007771", "007772", "007773", "007774", "007775", "007776", "007777", "007778", "007779", "007780", "007781", "007782", "007783", "007784", "007785", "007786", "007787", "007788", "007789", "007790", "007791", "007792", "007793", "007794", "007795", "007796", "007797", "007798", "007799", "007800", "007801", "007802", "007803", "007804", "007805", "007806", "007807", "007808", "007809", "007810", "007811", "007812", "007813", "007814", "007815", "007816", "007817", "008688", "008689", "008690", "008691", "008692", "008693", "008694", "008695", "008696", "008697", "008698", "008699", "008700", "008701", "008702", "008703", "008704", "008705", "008706", "008707", "008708", "008709", "008710", "008711", "008712", "008713", "008714", "008715", "008716", "008717", "008718", "008719", "008720", "008721", "008722", "008723", "008724", "008725", "008726", "008727", "008728", "008729", "008730", "008731", "008732", "008733", "008734", "008735", "008736", "008737", "008738", "008739", "008740", "008741", "008742", "008743", "008744", "008745", "008746", "008747", "008748", "008749", "008750", "008751", "008752", "008753", "008754", "008755", "008756", "008757", "008758", "008759", "008760", "008761", "008762", "008763", "008764", "008765", "008766", "008767", "008768", "008769", "008770", "008771", "008772", "008773", "008774", "008775", "008776", "008777", "008778", "008779", "008780", "008781", "008782", "008783", "008784", "008785", "008786", "008787", "008788", "008789", "008790", "008791", "008792", "008793", "008794", "008795", "008796", "008797", "008798", "008799", "008800", "008801", "008802", "008803", "008804", "008805", "008806", "008807", "008808", "008809", "008810", "008811", "008812", "008813", "008814", "008815", "008816", "008817", "008818", "008819", "008820", "008821", "008822", "008823", "008824", "008825", "008826", "008827", "008828", "008829", "008830", "008831", "008832", "008833", "008834", "008835", "008836", "008837", "008838", "008839", "008840", "008841", "008842", "008843", "008844", "008845", "008846", "008847", "008848", "008849", "008850", "008851", "008852", "008853", "008854", "008855", "008856", "008857", "008858", "008859", "008860", "008861", "008862", "008863", "008864", "008865", "008866", "008867", "008868", "008869", "008870", "008871", "008872", "008873", "008874", "008875", "008876", "008877", "008878", "008879", "008880", "008881", "008882", "008883", "008884", "008885", "008886", "008887", "008888", "008889", "008890", "008891", "008892", "008893", "008894", "008895", "008896", "008897", "008898", "008899", "008900", "008901", "008902", "008903", "008904", "008905", "008906", "008907", "008908", "008909", "008910", "008911", "008912", "008913", "008914", "008915", "008916", "008917", "008918", "008919", "008920", "008921", "008922", "008923", "008924", "008925", "008926", "008927", "008928", "008929", "008930", "008931", "008932", "008933", "008934", "008935", "008936", "008937", "008938", "008939", "008940", "008941", "008942", "008943", "008944", "008945", "008946", "008947", "008948", "008949", "008950", "008951", "008952", "008953", "008954", "008955", "008956", "008957", "008958", "008959", "008960", "008961", "008962", "008963", "008964", "008965", "008966", "008967", "008968", "008969", "008970", "008971", "008972", "008973", "008974", "008975", "008976", "008977", "008978", "008979", "008980", "008981", "008982", "008983", "008984", "008985", "008986", "008987", "008988", "008989", "008990", "008991", "008992", "008993", "008994", "008995", "008996", "008997", "008998", "008999", "009000", "009001", "009002", "009003", "009004", "009005", "009006", "009007", "009008", "009009", "009010", "009011", "009012", "009013", "009014", "009015", "009016", "009017", "009018", "009019", "009020", "009021", "009022", "009023", "009024", "009025", "009026", "009027", "009028", "009029", "009030", "009031", "009032", "009033", "009034", "009035", "009036", "009037", "009038", "009039", "009040", "009041", "009042", "009043", "009044", "009045", "009046", "009047", "009048", "009049", "009050", "009051", "009052", "009053", "009054", "009055", "009056", "009057", "009058", "009059", "009060", "009061", "009062", "009063", "009064", "009065", "009066", "009067", "009068", "009069", "009070", "009071", "009072", "009073", "009074", "009075", "009076", "009077", "009078", "009079", "009080", "009081", "009082", "009083", "009084", "009085", "009086", "009087", "009088", "009089", "009090", "009091", "009092", "009093", "009094", "009095", "009096", "009097", "009098", "009099", "009100", "009101", "009102", "009103", "009104", "009105", "009106", "009107", "009108", "009109", "009110", "009111", "009112", "009113", "009114", "009115", "009116", "009117", "009118", "009119", "009120", "009121", "009122", "009123", "009124", "009125", "009126", "009127", "009128", "009129", "009130", "009131", "009132", "009133", "009134", "009135", "009136", "009137", "009138", "009139", "009140", "009141", "009142", "009143", "009144", "009145", "009146", "009147", "009148", "009149", "009150", "009151", "009152", "009153", "009154", "009155", "009156", "009157", "009158", "009159", "009160", "009161", "009162", "009163", "009164", "009165", "009166", "009167", "009168", "009169", "009170", "009171", "009172", "009173", "009174", "009175", "009176", "009177", "009178", "009179", "009180", "009181", "009182", "009183", "009184", "009185", "009186", "009187", "009188", "009189", "009190", "009191", "009192", "009193", "009194", "009195", "009196", "009197", "009198", "009199", "009200", "009201", "009202", "009203", "009204", "009205", "009206", "009207", "009208", "009209", "009210", "009211", "009212", "009213", "009214", "009215", "009216", "009217", "009218", "009219", "009220", "009221", "009222", "009223", "009224", "009225", "009226", "009227", "009228", "009229", "009230", "009231", "009232", "009233", "009234", "009235", "009236", "009237", "009238", "009239", "009240", "009241", "009242", "009243", "009244", "009245", "009246", "009247", "009248", "009249", "009250", "009251", "009252", "009253", "009254", "009255", "009256", "009257", "009258", "009259", "009260", "009261", "009262", "009263", "009264", "009265", "009266", "009267", "009268", "009269", "009270", "009271", "009272", "009273", "009274", "009275", "009276", "009277", "009278", "009279", "009280", "009281", "009282", "009283", "009284", "009285", "009286", "009287", "009288", "009289", "009290", "009291", "009292", "009293", "009294", "009295", "009296", "009297", "009298", "009299", "009300", "009301", "009302", "009303", "009304", "009305", "009306", "009307", "009308", "009309", "009310", "009311", "009312", "009313", "009314", "009315", "009316", "009317", "009318", "009319", "009320", "009321", "009322", "009323", "009324", "009325", "009326", "009327", "009328", "009329", "009330", "009331", "009332", "009333", "009334", "009335", "009336", "009337", "009338", "009339", "009340", "009341", "009342", "009343", "009344", "009345", "009346", "009347", "009348", "009349", "009350", "009351", "009352", "009353", "009354", "009355", "009356", "009357", "009358", "009359", "009360", "009361", "009362", "009363", "009364", "009365", "009366", "009367", "009368", "009909", "009910", "009911", "009912", "009913", "009914", "009915", "009916", "009917", "009918", "009919", "009920", "009921", "009922", "009923", "009924", "009925", "009926", "009927", "009928", "009929", "009930", "009931", "009932", "009933", "009934", "009935", "009936", "009937", "009938", "009939", "009940", "009941", "009942", "009943", "009944", "009945", "009946", "009947", "009948", "009949", "009950", "009951", "009952", "009953", "009954", "009955", "009956", "009957", "009958", "009959", "009960", "009961", "009962", "009963", "009964", "009965", "009966", "009967", "009968", "009969", "009970", "009971", "009972", "009973", "009974", "009975", "009976", "009977", "009978", "009979", "009980", "009981", "009982", "009983", "009984", "009985", "009986", "009987", "009988", "009989", "009990", "009991", "009992", "009993", "009994", "009995", "009996", "009997", "009998", "009999", "010000", "010001", "010002", "010003", "010004", "010005", "010006", "010007", "010008", "010009", "010010", "010011", "010012", "010013", "010014", "010015", "010016", "010017", "010018", "010019", "010020", "010021", "010022", "010023", "010024", "010025", "010026", "010027", "010028", "010029", "010030", "010031", "010032", "010033", "010034", "010035", "010036", "010037", "010038", "010039", "010040", "010041", "010042", "010043", "010044", "010045", "010046", "010047", "010048", "010049", "010050", "010051", "010052", "010053", "010054", "010055", "010056", "010057", "010058", "010059", "010060", "010061", "010062", "010063", "010064", "010065", "010066", "010067", "010068", "010069", "010070", "010071", "010072", "010073", "010074", "010075", "010076", "010077", "010078", "010079", "010080", "010081", "010082", "010083", "010084", "010085", "010086", "010087", "010088", "010089", "010090", "010091", "010092", "010093", "010094", "010095", "010096", "010097", "010098", "010099", "010100", "010101", "010102", "010103", "010104", "010105", "010106", "010107", "010108", "010109", "010110", "010111", "010112", "010113", "010114", "010115", "010116", "010117", "010118", "010119", "010120", "010121", "010122", "010123", "010124", "010125", "010126", "010127", "010128", "010129", "010130", "010131", "010132", "010133", "010134", "010135", "010136", "010137", "010138", "010139", "010140", "010141", "010142", "010143", "010144", "010145", "010146", "010147", "010148", "010149", "010150", "010151", "010152", "010153", "010154", "010155", "010156", "010157", "010158", "010159", "010160", "010161", "010162", "010163", "010164", "010165", "010166", "010167", "010168", "010169", "010170", "010171", "010172", "010173", "010174", "010175", "010176", "010177", "010178", "010179", "010180", "010181", "010182", "010183", "010184", "010185", "010186", "010187", "010188", "010189", "010190", "010191", "010192", "010193", "010194", "010195", "010196", "010197", "010198", "010199", "010200", "010201", "010202", "010203", "010204", "010205", "010206", "010207", "010208", "010209", "010210", "010211", "010212", "010213", "010214", "010215", "010216", "010217", "010218", "010219", "010220", "010221", "010222", "010223", "010224", "010225", "010226", "010227", "010228", "010229", "010230", "010231", "010232", "010233", "010234", "010235", "010236", "010237", "010238", "010239", "010240", "010241", "010242", "010243", "010244", "010245", "010246", "010247", "010248", "010249", "010250", "010251", "010252", "010253", "010254", "010255", "010256", "010257", "010258", "010259", "010260", "010261", "010262", "010263", "010264", "010265", "010266", "010267", "010268", "010269", "010270", "010271", "010272", "010273", "010274", "010275", "010276", "010277", "010278", "010279", "010280", "010281", "010282", "010283", "010284", "010285", "010286", "010287", "010288", "010289", "010290", "010291", "010292", "010293", "010294", "010295", "010296", "010297", "010298", "010299", "010300", "010301", "010302", "010303", "010304", "010305", "010306", "010307", "010308", "010309", "010310", "010311", "010312", "010313", "010314", "010315", "010316", "010317", "010318", "010319", "010320", "010321", "010322", "010323", "010324", "010325", "010326", "010327", "010328", "010329", "010330", "010331", "010332", "010333", "010334", "010335", "010336", "010337", "010338", "010339", "010340", "010341", "010342", "010343", "010344", "010345", "010346", "010347", "010348", "010349", "010350", "010351", "010352", "010353", "010354", "010355", "010356", "010357", "010358", "010359", "010360", "010361", "010362", "010363", "010364", "010365", "010366", "010367", "010368", "010369", "010370", "010371", "010372", "010373", "010374", "010375", "010376", "010377", "010378", "010379", "010380", "010381", "010382", "010383", "010384", "010385", "010386", "010387", "010388", "010389", "010390", "010391", "010392", "010393", "010394", "010395", "010396", "010397", "010398", "010399", "010400", "010401", "010402", "010403", "010404", "010405", "010406", "010407", "010408", "010409", "010410", "010411", "010412", "010413", "010414", "010415", "010416", "010417", "010418", "010419", "010420", "010421", "010422", "010423", "010424", "010425", "010426", "010427", "010428", "010429", "010430", "010431", "010432", "010433", "010434", "010435", "010436", "010437", "010438", "010439", "010440", "010441", "010442", "010443", "010444", "010445", "010446", "010447", "010448", "010449", "010450", "010451", "010452", "010453", "010454", "010455", "010456", "010457", "010458", "010459", "010460", "010461", "010462", "010463", "010464", "010465", "010466", "010467", "010468", "010469", "010470", "010471", "010472", "010473", "010474", "010475", "010476", "010477", "010478", "010479", "010480", "010481", "010482", "010483", "010484", "010485", "010486", "010487", "010488", "010489", "010490", "010491", "010492", "010493", "010494", "010495", "010496", "010497", "010498", "010499", "010500", "010501", "010502", "010503", "010504", "010505", "010506", "010507", "010508", "010509", "010510", "010511", "010512", "010513", "010514", "010515", "010516", "010517", "010518", "010519", "010520", "010521", "010522", "010523", "010524", "010525", "010526", "010527", "010528", "010529", "010530", "010531", "010532", "010533", "010534", "010535", "010536", "010537", "010538", "010539", "010540", "010541", "010542", "010543", "010544", "010545", "010546", "010547", "010548", "010549", "010550", "010551", "010552", "010553", "010554", "010555", "010556", "010557", "010558", "010559", "010560", "010561", "010562", "010563", "010564", "010565", "010566", "010567", "010568", "010569", "010570", "010571", "010572", "010573", "010574", "010575", "010576", "010577", "010578", "010579", "010580", "010581", "010582", "010583", "010584", "010585", "010586", "010587", "010588", "010589", "010590", "010591", "010592", "010593", "010594", "010595", "010596", "010597", "010598", "010599", "010600", "010601", "010602", "010603", "010604", "010605", "010606", "010607", "010608", "010609", "010610", "010611", "010612", "010613", "010614", "010615", "010616", "010617", "010618", "010619", "010620", "010621", "010622", "010623", "010624", "010625", "010626", "010627", "010628", "010635", "010636", "010637", "010638", "010639", "010640", "010641", "010642", "010643", "010644", "010645", "010646", "010647", "010648", "010649", "010650", "010651", "010652", "010653", "010654", "010655", "010656", "010657", "010658", "010659", "010660", "010661", "010662", "010663", "010664", "010665", "010666", "010667", "010668", "010669", "010670", "010671", "010672", "010673", "010674", "010675", "010676", "010677", "010678", "010679", "010680", "010681", "010682", "010683", "010684", "010685", "010686", "010687", "010688", "010689", "010690", "010691", "010692", "010693", "010694", "010695", "010696", "010697", "010698", "011160", "011161", "011162", "011163", "011164", "011165", "011166", "011167", "011168", "011169", "011170", "011171", "011172", "011173", "011174", "011176", "011177", "011178", "011179", "011180", "011181", "011182", "011183", "011184", "011185", "011186", "011187", "011188", "011189", "011190", "011191", "011192", "011193", "011194", "011195", "011196", "011197", "011198", "011199", "011200", "011201", "011202", "011203", "011204", "011205", "011206", "011207", "011208", "011209", "011210", "011211", "011212", "011213", "011214", "011215", "011216", "011217", "011218", "011219", "011220", "011221", "011222", "011223", "011224", "011225", "011226", "011227", "011228", "011229", "011230", "011231", "011232", "011233", "011234", "011235", "011236", "011237", "011238", "011239", "011240", "011241", "011242", "011243", "011244", "011245", "011246", "011247", "011248", "011249", "011250", "011251", "011252", "011253", "011254", "011255", "011256", "011257", "011258", "011259", "011260", "011261", "011262", "011263", "011264", "011265", "011266", "011267", "011268", "011269", "011270", "011271", "011272", "011273", "011274", "011275", "011276", "011277", "011278", "011279", "011280", "011281", "011282", "011283", "011284", "011285", "011286", "011287", "011288", "011289", "011290", "011291", "011292", "011293", "011294", "011295", "011296", "011297", "011298", "011299", "011300", "011301", "011302", "011303", "011304", "011305", "011306", "011307", "011308", "011309", "011310", "011311", "011312", "011313", "011314", "011315", "011316", "011317", "011318", "011319", "011320", "011321", "011322", "011323", "011324", "011325", "011326", "011327", "011328", "011329", "011330", "011331", "011332", "011333", "011334", "011335", "011336", "011337", "011338", "011339", "011340", "011341", "011342", "011343", "011344", "011345", "011346", "011347", "011348", "011349", "011350", "011351", "011352", "011353", "011354", "011355", "011356", "011357", "011358", "011359", "011360", "011361", "011362", "011363", "011364", "011365", "011366", "011367", "011368", "011369", "011370", "011371", "011372", "011373", "011374", "011375", "011376", "011377", "011378", "011379", "011468", "011469", "011470", "011471", "011472", "011473", "011474", "011475", "011476", "011477", "011478", "011479", "011480", "011481", "011482", "011483", "011484", "011485", "011486", "011487", "011488", "011489", "011490", "011491", "011492", "011493", "011494", "011495", "011496", "011497", "011498", "011499", "011500", "011501", "011502", "011503", "011504", "011505", "011506", "011507", "011508", "011509", "011510", "011511", "011512", "011513", "011514", "011515", "011516", "011517", "011518", "011519", "011520", "011521", "011522", "011523", "011524", "011525", "011526", "011527", "011528", "011529", "011530", "011531", "011532", "011533", "011534", "011535", "011536", "011537", "011538", "011539", "011540", "011541", "011542", "011543", "011544", "011545", "011546", "011547", "011548", "011549", "011550", "011551", "011552", "011553", "011554", "011555", "011556", "011557", "011558", "011559", "011560", "011561", "011562", "011563", "011564", "011565", "011566", "011567", "011568", "011569", "011570", "011571", "011572", "011573", "011574", "011575", "011580", "011581", "011582", "011583", "011584", "011585", "011586", "011587", "011588", "011589", "011590", "011591", "011592", "011593", "011594", "011595", "011596", "011597", "011598", "011599", "011600", "011601", "011602", "011603", "011604", "011605", "011606", "011607", "011608", "011609", "011610", "011611", "011612", "011613", "011614", "011615", "011616", "011617", "011618", "011619", "011620", "011621", "011622", "011623", "011624", "011625", "011626", "011627", "011628", "011629", "011630", "011631", "011632", "011633", "011634", "011635", "011636", "011637", "011638", "011639", "011640", "011641", "011642", "011643", "011644", "011645", "011646", "011647", "011648", "011649", "011650", "011651", "011652", "011653", "011654", "011655", "011656", "011657", "011658", "011659", "011660", "011661", "011662", "011663", "011664", "011665", "011666", "012229", "012230", "012231", "012232", "012233", "012234", "012235", "012236", "012237", "012238", "012239", "012240", "012241", "012242", "012243", "012244", "012245", "012246", "012247", "012248", "012249", "012250", "012251", "012252", "012253", "012254", "012255", "012256", "012257", "012258", "012259", "012260", "012261", "012262", "012263", "012264", "012265", "012266", "012267", "012268", "012269", "012270", "012271", "012272", "012273", "012274", "012275", "012276", "012277", "012278", "012279", "012280", "012281", "012282", "012283", "012284", "012285", "012286", "012287", "012288", "012289", "012290", "012291", "012292", "012293", "012294", "012295", "012296", "012297", "012298", "012299", "012300", "012301", "012302", "012303", "012304", "012305", "012306", "012307", "012308", "012309", "012310", "012311", "012312", "012313", "012314", "012315", "012316", "012317", "012318", "012319", "012320", "012321", "012322", "012323", "012324", "012325", "012326", "012327", "012328", "012329", "012330", "012331", "012332", "012333", "012334", "012335", "012336", "012337", "012338", "012339", "012340", "012341", "012342", "012343", "012344", "012345", "012346", "012347", "012348", "012349", "012350", "012351", "012352", "012353", "012354", "012355", "012356", "012357", "012358", "012359", "012360", "012361", "012362", "012363", "012364", "012365", "012366", "012367", "012368", "012369", "012370", "012371", "012372", "012373", "012374", "012375", "012376", "012377", "012378", "012379", "012380", "012381", "012382", "012383", "012384", "012385", "012386", "012387", "012388", "012389", "012390", "012391", "012392", "012393", "012394", "012395", "012396", "012397", "012398", "012399", "012400", "012401", "012402", "012403", "012404", "012405", "012406", "012407", "012408", "012409", "012410", "012411", "012412", "012413", "012414", "012415", "012416", "012417", "012418", "012419", "012420", "012421", "012422", "012423", "012424", "012425", "012426", "012427", "012428", "012429", "012430", "012431", "012432", "012433", "012434", "012435", "012436", "012437", "012438", "012439", "012440", "012441", "012589", "012590", "012591", "012592", "012593", "012594", "012595", "012596", "012597", "012598", "012599", "012600", "012601", "012602", "012603", "012604", "012605", "012606", "012607", "012608", "012609", "012610", "012611", "012612", "012613", "012614", "012615", "012616", "012617", "012618", "012619", "012620", "012621", "012622", "012623", "012624", "012625", "012626", "012627", "012628", "012629", "012630", "012631", "012632", "012633", "012634", "012635", "012636", "012637", "012638", "012639", "012640", "012641", "012642", "012643", "012644", "012645", "012646", "012647", "012648", "012649", "012650", "012651", "012652", "012653", "012654", "012655", "012656", "012657", "012658", "012659", "012660", "012661", "012662", "012663", "012664", "012665", "012666", "012667", "012668", "012669", "012670", "012671", "012672", "012673", "012674", "012675", "012676", "012677", "012678", "012679", "012680", "012681", "012682", "012683", "012684", "012685", "012686", "012687", "012688", "012689", "012690", "012691", "012692", "012693", "012694", "012695", "012696", "012697", "012698", "012699", "012700", "012701", "012702", "012703", "012704", "012705", "012706", "012707", "012708", "012709", "012710", "012711", "012712", "012713", "012714", "012715", "012716", "012717", "012718", "012719", "012720", "012721", "012722", "012723", "012724", "012725", "012726", "012727", "012728", "012729", "012730", "012731", "012732", "012733", "012734", "012735", "012736", "012737", "012738", "012739", "012740", "012741", "012742", "012937", "012938", "012939", "012940", "012941", "012942", "012943", "012944", "012945", "012946", "012947", "012948", "012949", "012950", "012951", "012952", "012953", "012954", "012955", "012956", "012957", "012958", "012959", "012960", "012961", "012962", "012963", "012964", "012965", "012966", "012967", "012968", "012969", "012970", "012971", "012972", "012973", "012974", "012975", "012976", "012977", "012978", "012979", "012980", "012981", "012982", "012983", "012984", "012985", "012986", "012987", "012988", "012989", "012990", "012991", "012992", "012993", "012994", "012995", "012996", "012997", "012998", "012999", "013000", "013001", "013002", "013003", "013004", "013005", "013006", "013007", "013008", "013009", "013010", "013011", "013012", "013013", "013014", "013015", "013016", "013017", "013018", "013019", "013020", "013021", "013022", "013023", "013024", "013025", "013026", "013027", "013028", "013029", "013030", "013031", "013032", "013033", "013034", "013035", "013036", "013037", "013038", "013039", "013040", "013041", "013042", "013043", "013044", "013045", "013046", "013047", "013048", "013049", "013050", "013051", "013052", "013053", "013054", "013055", "013056", "013057", "013058", "013059", "013060", "013061", "013062", "013063", "013064", "013065", "013066", "013067", "013068", "013069", "013070", "013071", "013072", "013073", "013074", "013075", "013076", "013077", "013078", "013079", "013080", "013081", "013082", "013083", "013084", "013085", "013086", "013087", "013088", "013089", "013090", "013091", "013092", "013093", "013094", "013095", "013096", "013097", "013098", "013099", "013100", "013101", "013102", "013103", "013104", "013105", "013106", "013107", "013108", "013109", "013110", "013111", "013112", "013113", "013114", "013115", "013116", "013117", "013118", "013119", "013120", "013121", "013122", "013123", "013124", "013125", "013126", "013127", "013128", "013129", "013130", "013131", "013132", "013133", "013134", "013135", "013136", "013137", "013138", "013139", "013140", "013141", "013142", "013143", "013144", "013145", "013146", "013147", "013148", "013149", "013150", "013151", "013152", "013153", "013154", "013155", "013156", "013375", "013376", "013377", "013378", "013379", "013380", "013381", "013382", "013383", "013384", "013385", "013386", "013387", "013388", "013389", "013390", "013391", "013392", "013393", "013394", "013395", "013396", "013397", "013398", "013399", "013400", "013401", "013402", "013403", "013404", "013405", "013406", "013407", "013408", "013409", "013410", "013411", "013412", "013413", "013414", "013415", "013416", "013417", "013418", "013419", "013420", "013421", "013422", "013423", "013424", "013425", "013426", "013427", "013428", "013429", "013430", "013431", "013432", "013433", "013434", "013435", "013436", "013437", "013438", "013439", "013440", "013441", "013442", "013443", "013444", "013445", "013446", "013447", "013448", "013449", "013450", "013451", "013452", "013453", "013454", "013455", "013456", "013457", "013458", "013459", "013460", "013461", "013462", "013463", "013464", "013465", "013466", "013467", "013468", "013469", "013470", "013471", "013472", "013473", "013474", "013475", "013476", "013477", "013478", "013479", "013480", "013481", "013482", "013483", "013484", "013485", "013486", "013487", "013488", "013489", "013490", "013491", "013492", "013493", "013494", "013495", "013496", "013497", "013498", "013499", "013500", "013501", "013502", "013503", "013504", "013505", "013506", "013507", "013508", "013509", "013510", "013511", "013512", "013513", "013514", "013515", "013516", "013517", "013518", "013519", "013520", "013521", "013522", "013974", "013975", "013976", "013977", "013978", "013979", "013980", "013981", "013982", "013983", "013984", "013985", "013986", "013987", "013988", "013989", "013990", "013991", "013992", "013993", "013994", "013995", "013996", "013997", "013998", "013999", "014000", "014001", "014002", "014003", "014004", "014005", "014006", "014007", "014008", "014009", "014010", "014011", "014012", "014013", "014014", "014015", "014016", "014017", "014018", "014019", "014020", "014021", "014022", "014023", "014024", "014025", "014026", "014027", "014028", "014029", "014030", "014031", "014032", "014033", "014034", "014035", "014036", "014037", "014038", "014039", "014040", "014041", "014042", "014043", "014044", "014045", "014046", "014047", "014048", "014049", "014050", "014051", "014052", "014053", "014054", "014055", "014056", "014057", "014058", "014059", "014060", "014061", "014062", "014063", "014064", "014065", "014066", "014067", "014068", "014069", "014070", "014071", "014072", "014073", "014074", "014075", "014076", "014077", "014078", "014079", "014080", "014081", "014082", "014083", "014084", "014085", "014086", "014087", "014088", "014089", "014090", "014091", "014092", "014093", "014094", "014095", "014096", "014097", "014098", "014099", "014100", "014101", "014102", "014103", "014104", "014105", "014106", "014107", "014108", "014109", "014110", "014111", "014112", "014113", "014114", "014115", "014116", "014117", "014118", "014119", "014120", "014121", "014122", "014123", "014124", "014125", "014126", "014127", "014128", "014129", "014130", "014131", "014132", "014133", "014134", "014135", "014136", "014137", "014138", "014139", "014140", "014141", "014142", "014143", "014144", "014145", "014146", "014147", "014148", "014149", "014150", "014151", "014152", "014153", "014154", "014155", "014156", "014157", "014158", "014159", "014160", "014161", "014162", "014163", "014164", "014165", "014166", "014167", "014168", "014169", "014170", "014171", "014172", "014173", "014174", "014175", "014176", "014177", "014178", "014179", "014180", "014181", "014182", "014183", "014184", "014185", "014186", "014187", "014188", "014189", "014190", "014191", "014192", "014193", "014194", "014195", "014196", "014197", "014198", "014199", "014200", "014201", "014202", "014203", "014204", "014205", "014206", "014207", "014208", "014209", "014210", "014211", "014212", "014213", "014214", "014215", "014216", "014217", "014218", "014219", "014220", "014221", "014222", "014223", "014224", "014225", "014226", "014227", "014228", "014229", "014230", "014231", "014232", "014233", "014234", "014235", "014236", "014237", "014238", "014239", "014240", "014241", "014242", "014243", "014244", "014245", "014246", "014247", "014248", "014249", "014250", "014251", "014252", "014253", "014254", "014255", "014256", "014257", "014258", "014259", "014260", "014261", "014262", "014263", "014264", "014265", "014266", "014267", "014268", "014269", "014270", "014271", "014272", "014273", "014274", "014275", "014276", "014277", "014278", "014279", "014280", "014281", "014282", "014283", "014284", "014285", "014286", "014287", "014288", "014289", "014290", "014291", "014292", "014293", "014294", "014295", "014296", "014297", "014298", "014299", "014300", "014301", "014302", "014303", "014304", "014305", "014306", "014307", "014308", "014309", "014310", "014311", "014312", "014313", "014314", "014315", "014316", "014317", "014318", "014319", "014320", "014321", "014322", "014323", "014324", "014325", "014326", "014327", "014328", "014329", "014330", "014331", "014332", "014333", "014334", "014335", "014336", "014337", "014338", "014339", "014340", "014341", "014342", "014343", "014344", "014345", "014346", "014347", "014348", "014349", "014350", "014351", "014352", "014353", "014354", "014355", "014356", "014357", "014358", "014359", "014360", "014361", "014362", "014363", "014364", "014365", "014366", "014367", "014368", "014369", "014370", "014371", "014372", "014373", "014374", "014375", "014376", "014377", "014378", "014379", "014380", "014381", "014382", "014383", "014384", "014385", "014386", "014387", "014388", "014389", "014390", "014391", "014392", "014393", "014394", "014395", "014396", "014397", "014398", "014399", "014400", "014401", "014402", "014403", "014404", "014405", "014406", "014407", "014408", "014409", "014410", "014411", "014412", "014413", "014414", "014415", "014416", "014417", "014418", "014419", "014420", "014421", "014422", "014423", "014424", "014425", "014426", "014427", "014428", "014429", "014430", "014431", "014432", "014433", "014434", "014435", "014436", "014437", "014438", "014439", "014440", "014441", "014442", "014443", "014444", "014445", "014446", "014447", "014448", "014449", "014450", "014451", "014452", "014453", "014454", "014455", "014456", "014457", "014458", "014459", "014460", "014461", "014462", "014463", "014464", "014465", "014466", "014467", "014468", "014469", "014470", "014471", "014472", "014473", "014474", "014475", "014476", "014477", "014478", "014479", "014480", "014481", "014482", "014483", "014484", "014485", "014486", "014487", "014488", "014489", "014490", "014491", "014492", "014493", "014494", "014495", "014496", "014497", "014498", "014499", "014500", "014501", "014502", "014503", "014504", "014505", "014506", "014507", "014508", "014509", "014510", "014511", "014512", "014513", "014514", "014515", "014516", "014517", "014518", "014519", "014520", "014521", "014522", "014523", "014524", "014525", "014526", "014527", "014528", "014529", "014530", "014531", "014532", "014533", "014534", "014535", "014536", "014537", "014538", "014539", "014540", "014541", "014542", "014543", "014544", "014545", "014546", "014547", "014548", "014549", "014550", "014551", "014552", "014553", "014554", "014555", "014556", "014557", "014558", "014559", "014560", "014561", "014562", "014563", "014564", "014565", "014566", "014567", "014568", "014569", "014570", "014571", "014572", "014573", "014574", "014575", "014576", "014577", "014578", "014579", "014580", "014581", "014582", "014583", "014584", "014585", "014586", "014587", "014588", "014589", "014590", "014591", "014592", "014593", "014594", "014595", "014596", "014597", "014598", "014599", "014600", "014601", "014602", "014603", "014604", "014605", "014606", "014607", "014693", "014694", "014695", "014696", "014697", "014698", "014699", "014700", "014701", "014702", "014703", "014704", "014705", "014706", "014707", "014708", "014709", "014710", "014711", "014712", "014713", "014714", "014715", "014716", "014717", "014718", "014719", "014720", "014721", "014722", "014723", "014724", "014725", "014726", "014727", "014728", "014729", "014730", "014731", "014732", "014733", "014734", "014735", "014736", "014737", "014738", "014739", "014740", "014741", "014742", "014743", "014744", "014745", "014746", "014747", "014748", "014749", "014750", "014751", "014752", "014753", "014754", "014755", "014996", "014997", "014998", "014999", "015000", "015001", "015002", "015003", "015004", "015005", "015006", "015007", "015008", "015009", "015010", "015011", "015012", "015013", "015014", "015015", "015016", "015017", "015873", "015874", "015875", "015876", "015877", "015878", "015879", "015880", "015881", "015882", "015883", "015884", "015885", "015886", "015887", "015888", "015889", "015890", "015891", "015892", "015893", "015894", "015895", "015896", "015897", "015898", "015899", "015900", "015901", "015902", "015903", "015904", "015905", "015906", "015907", "015908", "015909", "015910", "015911", "015912", "015913", "015914", "015915", "015916", "015917", "015918", "015919", "015920", "015921", "015922", "015923", "015924", "015925", "015926", "015927", "015928", "015929", "015930", "015931", "015932", "015933", "015934", "015935", "015936", "015937", "015938", "015939", "015940", "015941", "015942", "015943", "015944", "015945", "015946", "015947", "015948", "015949", "015950", "015951", "015952", "015953", "015954", "015955", "015956", "015957", "015958", "015959", "015960", "015961", "015962", "015963", "015964", "015965", "015966", "015967", "015968", "015969", "015970", "015971", "015972", "015973", "015974", "015975", "015976", "015977", "015978", "015979", "015980", "015981", "015982", "015983", "015984", "015985", "015986", "015987", "015988", "015989", "015990", "015991", "015992", "015993", "015994", "015995", "015996", "015997", "015998", "015999", "016000", "016001", "016002", "016003", "016004", "016005", "016006", "016007", "016008", "016009", "016010", "016011", "016012", "016013", "016014", "016015", "016016", "016017", "016018", "016019", "016020", "016021", "016022", "016023", "016024", "016025", "016026", "016027", "016028", "016029", "016030", "016031", "016032", "016033", "016034", "016035", "016036", "016037", "016038", "016039", "016040", "016041", "016042", "016043", "016044", "016045", "016046", "016047", "016048", "016049", "016050", "016051", "016052", "016053", "016054", "016055", "016056", "016057", "016058", "016059", "016060", "016061", "016062", "016063", "016064", "016065", "016066", "016067", "016068", "016069", "016070", "016071", "016072", "016073", "016074", "016075", "016076", "016077", "016078", "016079", "016080", "016081", "016082", "016083", "016084", "016085", "016086", "016087", "016088", "016089", "016090", "016091", "016092", "016093", "016094", "016095", "016096", "016097", "016098", "016099", "016100", "016101", "016102", "016103", "016104", "016105", "016106", "016107", "016108", "016109", "016110", "016111", "016112", "016113", "016114", "016115", "016116", "016117", "016118", "016119", "016120", "016121", "016122", "016123", "016124", "016125", "016126", "016127", "016128", "016129", "016130", "016131", "016132", "016133", "016134", "016135", "016136", "016137", "016138", "016139", "016140", "016141", "016142", "016143", "016144", "016145", "016146", "016147", "016148", "016149", "016150", "016151", "016152", "016153", "016154", "016155", "016156", "016157", "016158", "016159", "016160", "016161", "016162", "016163", "016164", "016165", "016166", "016167", "016168", "016169", "016170", "016171", "016172", "016173", "016174", "016175", "016176", "016177", "016178", "016179", "016180", "016181", "016182", "016183", "016184", "016185", "016186", "016187", "016188", "016189", "016190", "016191", "016192", "016193", "016194", "016195", "016196", "016197", "016198", "016199", "016200", "016201", "016202", "016203", "016204", "016205", "016206", "016207", "016208", "016209", "016210", "016211", "016212", "016213", "016214", "016215", "016216", "016217", "016218", "016219", "016220", "016221", "016222", "016223", "016224", "016225", "016226", "016227", "016228", "016229", "016230", "016231", "016232", "016233", "016234", "016235", "016236", "016237", "016238", "016239", "016240", "016241", "016242", "016243", "016244", "016245", "016246", "016247", "016248", "016249", "016250", "016251", "016252", "016253", "016254", "016255", "016256"], "val": ["000902", "000903", "000904", "000905", "000906", "000907", "000908", "000909", "000910", "000911", "000912", "000913", "000914", "000915", "000916", "000917", "000918", "000919", "000920", "000921", "000922", "000923", "000924", "000925", "000926", "000927", "000928", "000929", "000930", "000931", "000932", "000933", "000934", "000935", "000936", "000937", "000938", "000939", "000940", "000941", "000942", "000943", "000944", "000945", "000946", "000947", "000948", "000949", "000950", "000951", "000952", "000953", "000954", "000955", "000956", "000957", "000958", "000959", "000960", "000961", "000962", "000963", "000964", "000965", "000966", "000967", "000968", "000969", "000970", "000971", "000972", "000973", "000974", "000975", "000976", "000977", "000978", "000979", "000980", "000981", "000982", "000983", "000984", "000985", "000986", "000987", "000988", "000989", "000990", "000991", "000992", "000993", "000994", "000995", "000996", "000997", "000998", "000999", "001000", "001001", "001002", "001003", "001004", "001005", "001006", "001007", "001008", "001009", "001010", "001011", "001012", "001013", "001014", "001015", "001016", "001017", "001018", "001019", "001020", "001021", "001022", "001023", "001024", "001025", "001026", "001027", "001028", "001029", "001030", "001031", "001032", "001033", "001034", "001035", "001036", "001037", "001038", "001039", "001040", "001041", "001042", "001043", "001044", "001045", "001046", "001047", "001048", "001049", "001050", "001051", "001052", "001053", "001054", "001055", "001056", "001057", "001058", "001059", "001060", "001061", "001062", "001063", "001064", "001065", "001066", "001067", "001068", "001069", "001070", "001071", "001072", "001073", "001074", "001075", "001076", "001077", "001078", "001079", "001080", "001081", "001082", "001083", "001084", "001085", "001086", "001087", "001088", "001089", "001090", "001091", "001092", "001093", "001094", "001095", "001096", "001097", "001098", "001099", "001100", "001101", "001102", "001103", "001104", "001105", "001106", "001107", "001108", "001109", "001110", "001111", "001112", "001113", "001114", "001115", "001116", "001117", "001118", "001119", "001120", "001121", "001122", "001123", "001787", "001788", "001789", "001790", "001791", "001792", "001793", "001794", "001795", "001796", "001797", "001798", "001799", "001800", "001801", "001802", "001803", "001804", "001805", "001806", "001807", "001808", "001809", "001810", "001811", "001812", "001813", "001814", "001815", "001816", "001817", "001818", "001819", "001820", "001821", "001822", "001823", "001824", "001825", "001826", "001827", "001828", "001829", "001830", "001831", "001832", "001833", "001834", "001835", "001836", "001837", "001838", "001839", "001840", "001841", "001842", "001843", "001844", "001845", "001846", "001847", "001848", "001849", "001850", "001851", "001852", "001853", "001854", "001855", "001856", "001857", "001858", "001859", "001860", "001861", "001862", "001863", "001864", "001865", "001866", "001867", "001868", "001869", "001870", "001871", "001872", "001873", "001874", "001875", "001876", "001877", "001878", "001879", "001880", "001881", "001882", "001883", "001884", "001885", "001889", "001890", "001891", "001892", "001893", "001894", "001895", "001896", "001897", "001898", "001899", "001900", "001901", "001902", "001903", "001904", "001905", "001906", "001907", "001908", "001909", "001910", "001911", "001912", "001913", "001914", "001915", "001916", "001917", "001918", "001919", "001920", "001921", "001922", "001923", "001924", "001925", "001926", "001927", "001928", "001929", "001930", "001931", "001932", "001933", "001934", "001935", "001936", "001937", "001938", "001939", "001940", "001941", "001942", "001943", "001944", "001945", "001946", "003019", "003020", "003021", "003022", "003023", "003024", "003025", "003026", "003027", "003028", "003029", "003030", "003031", "003032", "003033", "003034", "003035", "003036", "003037", "003038", "003039", "003040", "003041", "003042", "003043", "003044", "003045", "003046", "003047", "003048", "003049", "003050", "003051", "003052", "003053", "003054", "003055", "003056", "003057", "003058", "003059", "003060", "003061", "003062", "003063", "003064", "003065", "003066", "003067", "003068", "003069", "003070", "003071", "003072", "003073", "003074", "003075", "003076", "003077", "003078", "003079", "003080", "003081", "003082", "003083", "003084", "003085", "003086", "003087", "003088", "003089", "003090", "003091", "003092", "003093", "003094", "003095", "003096", "003097", "003098", "003099", "003100", "003101", "003102", "003103", "003104", "003105", "003106", "003107", "003108", "003109", "003110", "003111", "003112", "003113", "003114", "003115", "003116", "003117", "003118", "003119", "003120", "003121", "003122", "003123", "003124", "003125", "003126", "003127", "003128", "003129", "003130", "003131", "003132", "003133", "003134", "003135", "003136", "003137", "003138", "003139", "003140", "003141", "003142", "003143", "003144", "003145", "003146", "003147", "003148", "003149", "003150", "003151", "003152", "003153", "003154", "003155", "003156", "003157", "003158", "003159", "003160", "003161", "003162", "003163", "003164", "003165", "003166", "003167", "003168", "003169", "003170", "003171", "003172", "003173", "003174", "003175", "003176", "003177", "003178", "003179", "003180", "003181", "003182", "003183", "003184", "003185", "003186", "003187", "003188", "003189", "003190", "003191", "003192", "003193", "003194", "003195", "003196", "003197", "003198", "003199", "003200", "003201", "003202", "003203", "003204", "003205", "003206", "003207", "003208", "003209", "003210", "003211", "003212", "003213", "003214", "003215", "003216", "003217", "003218", "003219", "003220", "003221", "003222", "003223", "003224", "003225", "003226", "003227", "003228", "003229", "003230", "003231", "003232", "003233", "003234", "003235", "003236", "003237", "003238", "003239", "003240", "003241", "003242", "003243", "003244", "003245", "003246", "003247", "003248", "003249", "003250", "003251", "003252", "003253", "003254", "003255", "003256", "003257", "003258", "003259", "003260", "003261", "003262", "003263", "003264", "003265", "003266", "003267", "003268", "003269", "003270", "003271", "003272", "003273", "003274", "003275", "003276", "003277", "003278", "003279", "003280", "003281", "003282", "003283", "003284", "003285", "003286", "003287", "003288", "003289", "003290", "003291", "003292", "003293", "003294", "003295", "003296", "003297", "003298", "003299", "003300", "003301", "003302", "003303", "003304", "003305", "003306", "003307", "003308", "003309", "003310", "003311", "003312", "003313", "003314", "003315", "003316", "003317", "003318", "003319", "003320", "003321", "003322", "003323", "003324", "003325", "003326", "003327", "003328", "003329", "003330", "003331", "003332", "003333", "003334", "003335", "003336", "003337", "003338", "003339", "003340", "003341", "003342", "003343", "003344", "003345", "003346", "003347", "003348", "003349", "003350", "003351", "003352", "003353", "003354", "003355", "003518", "003519", "003520", "003521", "003522", "003523", "003524", "003525", "003526", "003527", "003528", "003529", "003530", "003531", "003532", "003533", "003534", "003535", "003536", "003537", "003538", "003539", "003540", "003541", "003542", "003543", "003544", "003545", "003546", "003547", "003565", "003566", "003567", "003568", "003569", "003570", "003571", "003572", "003573", "003574", "003575", "003576", "003577", "003578", "003579", "003580", "003581", "003582", "003583", "003584", "003585", "003586", "003587", "003588", "003589", "003590", "003591", "003592", "003593", "003594", "003595", "003596", "003597", "003598", "003599", "003600", "003601", "003602", "003603", "003604", "003605", "003606", "003607", "003608", "003609", "003610", "003611", "003612", "003613", "003614", "003615", "003616", "003617", "003618", "003619", "003620", "003621", "003622", "003623", "003624", "003625", "003626", "003627", "003628", "003629", "003630", "003631", "003632", "003633", "003634", "003635", "003636", "003637", "003638", "004013", "004014", "004015", "004016", "004017", "004018", "004019", "004020", "004021", "004022", "004023", "004024", "004025", "004026", "004027", "004028", "004029", "004030", "004031", "004032", "004033", "004034", "004035", "004036", "004037", "004038", "004039", "004040", "004041", "004042", "004043", "004044", "004045", "004046", "004047", "004048", "004049", "004050", "004051", "004052", "004053", "004054", "004055", "004056", "004057", "004058", "004059", "004060", "004061", "004062", "004063", "004064", "004065", "004066", "004067", "004068", "004069", "004070", "004071", "004072", "004073", "004074", "004075", "004076", "004077", "004078", "004079", "004080", "004081", "004082", "004083", "004084", "004085", "004086", "004087", "004088", "004089", "004090", "004091", "004092", "004093", "004094", "004095", "004096", "004097", "004098", "004099", "004100", "004101", "004102", "004103", "004104", "004105", "004106", "004107", "004108", "004109", "004110", "004111", "004112", "004113", "004114", "004115", "004116", "004117", "004118", "004119", "004120", "004121", "004122", "004123", "004124", "004125", "004126", "004127", "004128", "004129", "004130", "004131", "004132", "004133", "004134", "004135", "004136", "004137", "004138", "004139", "004140", "004141", "004142", "004143", "004144", "004145", "004146", "004147", "004148", "004149", "004150", "004151", "004152", "004153", "004154", "004155", "004156", "004157", "004158", "004159", "004160", "004161", "004162", "004163", "004164", "004165", "004166", "004167", "004168", "004169", "004170", "004171", "004172", "004173", "004174", "004175", "004176", "004177", "004178", "004179", "004180", "004181", "004182", "004183", "004184", "004185", "004186", "004187", "004188", "004189", "004190", "004191", "004192", "004193", "004194", "004195", "004196", "004197", "004198", "004199", "004200", "004201", "004202", "004203", "004204", "004205", "004206", "004207", "004208", "004209", "004210", "004211", "004212", "004213", "004214", "004215", "004216", "004217", "004218", "004219", "004220", "004221", "004222", "004223", "004224", "004225", "004226", "004227", "004228", "004229", "004230", "004231", "004232", "004233", "004234", "004235", "004236", "004237", "004238", "004239", "004240", "004241", "004242", "004243", "004244", "004245", "004246", "004247", "004248", "004249", "004250", "004251", "004252", "004253", "004254", "004255", "004256", "004257", "004258", "004259", "004260", "004261", "004262", "004263", "004264", "004265", "004266", "004267", "004268", "004269", "004270", "004271", "004272", "004273", "004274", "004275", "004276", "004277", "004278", "004279", "004280", "004281", "004282", "004283", "004284", "004285", "004286", "004287", "004288", "004289", "004290", "004291", "004292", "004293", "004294", "004295", "004296", "004297", "004298", "004299", "004300", "004301", "004302", "004303", "004304", "004305", "004306", "004307", "004308", "004309", "004310", "004311", "004312", "004313", "004314", "004315", "004316", "004317", "004318", "004319", "004320", "004321", "004322", "004323", "004324", "004325", "004326", "004327", "004328", "004329", "004330", "004331", "004332", "004333", "004334", "004335", "004336", "004337", "004338", "004339", "004340", "004341", "004342", "004343", "004344", "004345", "004346", "004347", "004348", "004349", "004350", "004351", "004352", "004353", "004354", "004355", "004356", "004357", "004358", "004359", "004360", "004361", "004362", "004363", "004364", "004365", "004366", "004367", "004368", "004369", "004370", "004371", "004372", "004373", "004374", "004375", "004376", "004377", "004378", "004379", "004380", "004381", "004382", "004383", "004384", "004385", "004386", "004387", "004388", "004389", "004390", "004391", "004392", "004393", "004394", "004395", "004396", "004397", "004398", "004399", "004400", "004401", "004402", "004403", "004404", "004405", "004406", "004407", "004408", "004409", "004410", "004411", "004412", "004413", "004414", "004415", "007818", "007819", "007820", "007821", "007822", "007823", "007824", "007825", "007826", "007827", "007828", "007829", "007830", "007831", "007832", "007833", "007834", "007835", "007836", "007837", "007838", "007839", "007840", "007841", "007842", "007843", "007844", "007845", "007846", "007847", "007848", "007849", "007850", "007851", "007852", "007853", "007854", "007855", "007856", "007857", "007858", "007859", "007860", "007861", "007862", "007863", "007864", "007865", "007866", "007867", "007868", "007869", "007870", "007871", "007872", "007873", "007874", "007875", "007876", "007877", "007878", "007879", "007880", "007881", "007882", "007883", "007884", "007885", "007886", "007887", "007888", "007889", "007890", "007891", "007892", "007893", "007894", "007895", "007896", "007897", "007898", "007899", "007900", "007901", "007902", "007903", "007904", "007905", "007906", "007907", "007908", "007909", "007910", "007911", "007912", "007913", "007914", "007915", "007916", "007917", "007918", "007919", "007920", "007921", "007922", "007923", "007924", "007925", "007926", "007927", "007928", "007929", "007930", "007931", "007932", "007933", "007934", "007935", "007936", "007937", "007938", "007939", "007940", "007941", "007942", "007943", "007944", "007945", "007946", "007947", "007948", "007949", "007950", "007951", "007952", "007953", "007954", "007955", "007956", "007957", "007958", "007959", "007960", "007961", "007962", "007963", "007964", "007965", "007966", "007967", "007968", "007969", "007970", "007971", "007972", "007973", "007974", "007975", "007976", "007977", "007978", "007979", "007980", "007981", "007982", "007983", "007984", "007985", "007986", "007987", "009579", "009580", "009581", "009582", "009583", "009584", "009585", "009586", "009587", "009588", "009589", "009590", "009591", "009592", "009593", "009594", "009595", "009596", "009597", "009598", "009599", "009600", "009601", "009602", "009603", "009604", "009605", "009606", "009607", "009608", "009609", "009610", "009611", "009612", "009613", "009614", "009615", "009616", "009617", "009618", "009619", "009620", "009621", "009622", "009623", "009624", "009625", "009626", "009627", "009628", "009629", "009630", "009631", "009632", "009633", "009634", "009635", "009636", "009637", "009638", "009639", "009640", "009641", "009642", "009643", "009644", "009645", "009646", "009647", "009648", "009649", "009650", "009651", "009652", "009653", "009654", "009655", "009656", "009657", "009658", "009659", "009660", "009661", "009662", "009663", "009664", "009665", "009666", "009667", "009668", "009669", "009670", "009671", "009672", "009673", "009674", "009675", "009676", "009677", "009678", "009679", "009680", "009681", "009682", "009683", "009684", "009685", "009686", "009687", "009688", "009689", "009690", "009691", "009692", "009693", "009694", "009695", "009696", "009697", "009698", "009701", "009702", "009703", "009704", "009705", "009706", "009707", "009708", "009709", "009710", "009711", "009712", "009713", "009714", "009715", "009716", "009717", "009718", "010699", "010700", "010701", "010702", "010703", "010704", "010705", "010706", "010707", "010708", "010709", "010710", "010711", "010712", "010713", "010714", "010715", "010716", "010717", "010718", "010719", "010720", "010721", "010722", "010723", "010724", "010725", "010726", "010727", "010728", "010729", "010730", "010731", "010732", "010733", "010734", "010735", "010736", "010737", "010738", "010739", "010740", "010741", "010742", "010743", "010744", "010745", "010746", "010747", "010748", "010749", "010750", "010751", "010752", "010753", "010754", "010755", "010756", "010757", "010758", "010759", "010760", "010761", "010762", "010763", "010764", "010765", "010766", "010767", "010768", "010769", "010770", "010771", "010772", "010773", "010774", "010775", "010776", "010777", "010778", "010779", "010780", "010781", "010782", "010783", "010784", "010785", "010786", "010787", "010788", "010789", "010790", "010791", "010792", "010793", "010794", "010795", "010796", "010797", "010798", "010799", "010800", "010801", "010802", "010803", "010804", "010805", "010806", "010807", "010808", "010809", "010810", "010811", "010812", "010813", "010814", "010815", "010816", "010817", "010818", "010819", "010820", "010821", "010822", "010823", "010824", "010825", "010826", "010827", "010828", "010829", "010830", "010831", "010832", "010833", "010834", "010835", "010836", "010837", "010838", "010839", "010840", "010841", "010842", "010843", "010844", "010845", "010846", "010847", "010848", "010849", "010850", "010851", "010852", "010853", "010854", "010855", "010856", "010857", "010858", "010859", "010860", "010861", "010862", "010863", "010864", "010865", "010866", "010867", "010868", "010869", "010870", "010871", "010872", "010873", "010874", "010875", "010876", "010877", "010878", "010879", "010880", "010881", "010882", "010883", "010884", "010885", "010886", "010887", "010888", "010889", "010890", "010891", "010892", "010893", "010894", "010895", "010896", "010897", "010898", "010899", "010900", "010901", "010902", "010903", "010904", "010905", "010906", "010907", "010908", "010909", "010910", "010911", "010912", "010913", "010914", "010915", "010916", "010917", "010918", "010919", "010920", "010921", "010922", "010923", "010924", "010925", "010926", "010927", "010928", "010929", "010930", "010931", "010932", "010933", "010934", "010935", "010936", "010937", "010938", "010939", "010940", "010941", "010942", "010943", "010944", "010945", "010946", "010947", "010948", "010949", "010950", "010951", "010952", "010953", "010954", "010955", "010956", "010957", "010958", "010959", "010960", "010961", "010962", "010963", "010964", "010965", "010966", "010967", "010968", "010969", "010970", "010971", "010972", "010973", "010974", "010975", "010976", "010977", "010978", "010979", "010980", "010981", "010982", "010983", "010984", "010985", "010986", "010987", "010988", "010989", "010990", "010991", "010992", "010993", "010994", "010995", "010996", "010997", "010998", "010999", "011000", "011001", "011002", "011003", "011004", "011005", "011006", "011007", "011008", "011009", "011010", "011011", "011012", "011013", "011014", "011015", "011016", "011017", "011018", "011019", "011020", "011021", "011022", "011023", "011024", "011025", "011026", "011027", "011028", "011029", "011030", "011031", "011032", "011033", "011034", "011035", "011036", "011037", "011038", "011039", "011040", "011041", "011042", "011043", "011044", "011045", "011046", "011047", "011048", "011049", "011050", "011051", "011052", "011053", "011054", "011055", "011056", "011057", "011058", "011059", "011060", "011061", "011062", "011063", "011064", "011065", "011066", "011067", "011068", "011069", "011070", "011071", "011072", "011073", "011074", "011075", "011076", "011077", "011078", "011079", "011080", "011081", "011082", "011083", "011084", "011085", "011086", "011087", "011088", "011089", "011090", "011091", "011092", "011093", "011094", "011095", "011096", "011097", "011098", "011099", "011100", "011101", "011102", "011103", "011104", "011105", "011106", "011107", "011108", "011109", "011110", "011111", "011112", "011113", "011114", "011115", "011116", "011117", "011118", "011119", "011120", "011121", "011122", "011123", "011124", "011125", "011126", "011127", "011128", "011129", "011130", "011131", "011132", "011133", "011134", "011135", "011136", "011137", "011138", "011139", "011140", "011141", "011142", "011143", "011144", "011145", "011146", "011147", "011148", "011149", "011150", "011151", "011152", "011153", "011154", "011155", "011156", "011157", "011158", "011159", "011380", "011381", "011382", "011383", "011384", "011385", "011386", "011387", "011388", "011389", "011390", "011391", "011392", "011393", "011394", "011395", "011396", "011397", "011398", "011399", "011400", "011401", "011402", "011403", "011404", "011405", "011406", "011407", "011408", "011409", "011410", "011411", "011412", "011413", "011414", "011415", "011416", "011417", "011418", "011419", "011420", "011421", "011422", "011423", "011424", "011425", "011426", "011427", "011428", "011429", "011430", "011431", "011432", "011433", "011434", "011435", "011436", "011437", "011438", "011439", "011440", "011441", "011442", "011443", "011444", "011445", "011446", "011447", "011448", "011449", "011450", "011451", "011452", "011453", "011454", "011455", "011456", "011457", "011458", "011459", "011460", "011461", "011462", "011463", "011464", "011465", "011466", "011467", "011667", "011668", "011669", "011670", "011671", "011672", "011673", "011674", "011675", "011676", "011677", "011678", "011679", "011680", "011681", "011682", "011683", "011684", "011685", "011686", "011687", "011688", "011689", "011690", "011691", "011692", "011693", "011694", "011695", "011696", "011697", "011698", "011699", "011700", "011701", "011702", "011703", "011704", "011705", "011706", "011707", "011708", "011709", "011710", "011711", "011712", "011713", "011714", "011715", "011716", "011717", "011718", "011719", "011720", "011721", "011722", "011723", "011724", "011725", "011726", "011727", "011728", "011729", "011730", "011731", "011732", "011733", "011734", "011735", "011736", "011737", "011738", "011739", "011740", "011741", "011742", "011743", "011744", "011745", "011746", "011747", "011748", "011749", "011750", "011751", "011752", "011753", "011754", "011755", "011756", "011757", "011758", "011759", "011760", "011761", "011762", "011763", "011764", "011765", "011766", "011767", "011768", "011769", "011770", "011771", "011772", "011773", "011774", "011775", "011776", "011777", "011778", "011779", "011780", "011781", "011782", "011783", "011784", "011785", "011786", "011787", "011788", "011789", "011790", "011791", "011792", "011793", "011794", "011795", "011796", "011797", "011798", "011799", "011800", "011801", "011802", "011803", "011804", "011805", "011806", "011807", "011808", "011809", "011810", "011811", "011812", "011813", "011814", "011815", "011816", "011817", "011818", "011819", "011820", "011821", "011822", "011823", "011824", "011825", "011826", "011827", "011828", "011829", "011830", "011831", "011832", "011833", "011834", "011835", "011836", "011837", "011838", "011839", "011840", "011841", "011842", "011843", "011844", "011845", "011846", "011847", "011848", "011849", "011850", "011851", "011852", "011853", "011854", "011855", "011856", "011857", "011858", "011859", "011860", "011861", "011862", "011863", "011864", "013157", "013158", "013159", "013160", "013161", "013162", "013163", "013164", "013165", "013166", "013167", "013168", "013169", "013170", "013171", "013172", "013173", "013174", "013175", "013176", "013177", "013178", "013179", "013180", "013181", "013182", "013183", "013184", "013185", "013186", "013187", "013188", "013189", "013190", "013191", "013192", "013193", "013194", "013195", "013196", "013197", "013198", "013199", "013200", "013201", "013202", "013203", "013204", "013205", "013206", "013207", "013208", "013209", "013210", "013211", "013212", "013213", "013214", "013215", "013216", "013217", "013218", "013219", "013220", "013221", "013222", "013223", "013224", "013225", "013226", "013227", "013228", "013229", "013230", "013231", "013232", "013233", "013234", "013235", "013236", "013237", "013238", "013239", "013240", "013241", "013242", "013243", "013244", "013245", "013246", "013247", "013248", "013249", "013250", "013251", "013252", "013253", "013254", "013255", "013256", "013257", "013258", "013259", "013260", "013261", "013262", "013263", "013264", "013265", "013266", "013267", "013268", "013269", "013270", "013271", "013272", "013273", "013274", "013275", "013276", "013277", "013278", "013279", "013280", "013281", "013282", "013283", "013284", "013285", "013286", "013287", "013288", "013289", "013290", "013291", "013292", "013293", "013294", "013295", "013296", "013297", "013298", "013299", "013300", "013301", "013302", "013303", "013304", "013305", "013306", "013307", "013308", "013309", "013310", "013311", "013312", "013313", "013314", "013315", "013316", "013317", "013318", "013319", "013320", "013321", "013322", "013323", "013324", "013325", "013326", "013327", "013328", "013329", "013330", "013331", "013332", "013333", "013334", "013335", "013336", "013337", "013338", "013339", "013340", "013341", "013342", "013343", "013344", "013345", "013346", "013347", "013348", "013349", "013350", "013351", "013352", "013353", "013354", "013355", "013356", "013357", "013358", "013359", "013360", "013361", "013362", "013363", "013364", "013365", "013366", "013367", "013368", "013369", "013370", "013371", "013372", "013373", "013374", "013523", "013524", "013525", "013526", "013527", "013528", "013529", "013530", "013531", "013532", "013533", "013534", "013535", "013536", "013537", "013538", "013539", "013540", "013541", "013542", "013543", "013544", "013545", "013546", "013547", "013548", "013549", "013550", "013551", "013552", "013553", "013554", "013555", "013556", "013557", "013558", "013559", "013560", "013561", "013562", "013563", "013564", "013565", "013566", "013567", "013568", "013569", "013570", "013571", "013572", "013573", "013574", "013575", "013576", "013577", "013578", "013579", "013580", "013581", "013582", "013583", "013584", "013585", "013586", "013587", "013588", "013589", "013590", "013591", "013592", "013593", "013594", "013595", "013596", "013597", "013598", "013599", "013600", "013601", "013602", "013603", "013604", "013605", "013606", "013607", "013608", "013609", "013610", "013611", "013612", "013613", "013614", "013615", "013616", "013617", "013618", "013619", "013620", "013621", "013622", "013623", "013624", "013625", "013626", "013627", "013628", "013629", "013630", "013631", "013632", "013633", "013634", "013635", "013636", "013637", "013638", "013639", "013640", "013641", "013642", "013643", "013644", "013645", "013646", "013647", "013648", "013649", "013650", "013651", "013652", "013653", "013654", "013655", "013656", "013657", "013658", "013659", "013660", "013661", "013662", "013663", "013664", "013665", "013666", "013667", "013668", "013669", "013670", "013671", "013672", "013673", "013674", "013675", "013676", "013677", "013678", "013679", "013680", "013681", "013682", "013683", "013684", "013685", "013686", "013687", "013688", "013689", "013690", "013691", "013692", "013693", "013694", "013695", "013696", "013697", "013698", "013699", "013700", "013701", "013702", "013703", "013704", "013705", "013706", "013707", "013708", "013709", "013710", "013711", "013712", "013713", "013714", "013715", "013716", "013717", "013718", "013719", "013815", "013816", "013817", "013818", "013819", "013820", "013821", "013822", "013823", "013824", "013825", "013826", "013827", "013828", "013829", "013830", "013831", "013832", "013833", "013834", "013835", "013836", "013837", "013838", "013839", "013840", "013841", "013842", "013843", "013844", "013845", "013846", "013847", "013848", "013849", "013850", "013851", "013852", "013853", "013854", "013855", "013856", "013857", "014756", "014757", "014758", "014759", "014760", "014761", "014762", "014763", "014764", "014765", "014766", "014767", "014768", "014769", "014770", "014771", "014772", "014773", "014774", "014775", "014776", "014777", "014778", "014779", "014780", "014781", "014782", "014783", "014784", "014785", "014786", "014787", "014788", "014789", "014790", "014791", "014792", "014793", "014794", "014795", "014796", "014797", "014798", "014799", "014800", "014801", "014802", "014803", "014804", "014805", "014806", "014807", "014808", "014809", "014810", "014811", "014812", "014813", "014814", "014815", "014816", "014817", "014818", "014819", "014820", "014821", "014822", "014823", "014824", "014825", "014826", "014827", "014828", "014829", "014830", "014831", "014832", "014833", "014834", "014835", "014836", "014837", "014838", "014839", "014840", "014841", "014842", "014843", "014844", "014845", "014846", "014847", "014848", "014849", "014850", "014851", "014852", "014853", "014854", "014855", "014856", "014857", "014858", "014859", "014860", "014861", "014862", "014863", "014864", "014865", "014866", "014867", "014868", "014869", "014870", "014871", "014872", "014873", "014874", "014875", "014876", "014877", "014878", "014879", "014880", "014881", "014882", "014883", "014884", "014885", "014886", "014887", "014888", "014889", "014890", "014891", "014892", "014893", "014894", "014895", "014896", "014897", "014898", "014899", "014900", "014901", "014902", "014903", "014904", "014905", "014906", "014907", "014908", "014909", "014910", "014911", "014912", "014913", "014914", "014915", "014916", "014917", "014918", "014919", "014920", "014921", "014922", "014923", "014924", "014925", "014926", "014927", "014928", "014929", "014930", "014931", "014932", "014933", "014934", "014935", "014936", "014937", "014938", "014939", "014940", "014941", "014942", "014943", "014944", "014945", "014946", "014947", "014948", "014949", "014950", "014951", "014952", "014953", "014954", "014955", "014956", "014957", "014958", "014959", "014960", "014961", "014962", "014963", "014964", "014965", "014966", "014967", "014968", "014969", "014970", "014971", "014972", "014973", "014974", "014975", "014976", "014977", "014978", "014979", "014980", "014981", "014982", "014983", "014984", "014985", "014986", "014987", "014988", "014989", "014990", "014991", "014992", "014993", "014994", "014995", "015018", "015019", "015020", "015021", "015022", "015023", "015024", "015025", "015026", "015027", "015028", "015029", "015030", "015031", "015032", "015033", "015034", "015035", "015036", "015037", "015038", "015039", "015040", "015041", "015042", "015043", "015044", "015045", "015046", "015047", "015048", "015049", "015050", "015051", "015052", "015053", "015054", "015055", "015056", "015057", "015058", "015059", "015060", "015061", "015062", "015063", "015064", "015065", "015066", "015067", "015068", "015069", "015070", "015071", "015072", "015073", "015074", "015075", "015076", "015077", "015078", "015079", "015080", "015081", "015082", "015083", "015084", "015085", "015086", "015087", "015088", "015089", "015090", "015091", "015092", "015093", "015094", "015095", "015096", "015097", "015098", "015099", "015100", "015101", "015102", "015103", "015104", "015105", "015106", "015107", "015108", "015109", "015110", "015111", "015112", "015113", "015114", "015115", "015116", "015117", "015118", "015119", "015120", "015121", "015122", "015123", "015124", "015125", "015126", "015127", "015128", "015129", "015130", "015131", "015132", "015133", "015134", "015135", "015136", "015137", "015138", "015139", "015140", "015141", "015142", "015143", "015144", "015145", "015146", "015147", "015148", "015149", "015150", "015151", "015152", "015153", "015154", "015155", "015156", "015157", "015158", "015159", "015160", "015161", "015162", "015163", "015164", "015165", "015166", "015167", "015168", "015169", "015170", "015171", "015172", "015173", "015174", "015175", "015176", "015177", "015178", "015179", "015180", "015181", "015182", "015183", "015184", "015185", "015186", "015187", "015188", "015189", "015190", "015191", "015192", "015193", "015194", "015195", "015196", "015197", "015198", "015199", "015200", "015201", "015202", "015203", "015204", "015205", "015206", "015207", "015208", "015209", "015210", "015211", "015212", "015213", "015214", "015215", "015216", "015217", "015218", "015219", "015220", "015221", "015222", "015223", "015224", "015225", "015226", "015227", "015228", "015229", "015230", "015231", "015232", "015233", "015234", "015235", "015236", "015237", "015238", "015239", "015240", "015241", "015242", "015243", "015244", "015245", "015246", "015247", "015248", "015249", "015250", "015251", "015252", "015253", "015640", "015641", "015642", "015643", "015644", "015645", "015646", "015647", "015648", "015649", "015650", "015651", "015652", "015653", "015654", "015655", "015656", "015657", "015658", "015659", "015660", "015661", "015662", "015663", "015664", "015665", "015666", "015667", "015668", "015669", "015670", "015671", "015672", "015673", "015674", "015675", "015676", "015677", "015678", "015679", "015680", "015681", "015682", "015683", "015684", "015685", "015686", "015687", "015688", "015689", "015690", "015691", "015692", "015693", "015694", "015695", "015696", "015697", "015698", "015699", "015700", "015701", "015702", "015703", "015704", "015705", "015706", "015707", "015708", "015709", "015710", "015711", "015712", "015713", "015714", "015715", "015716", "015717", "015718", "015719", "015720", "015721", "015722", "015723", "015724", "015725", "015726", "015727", "015728", "015729", "015730", "015731", "015732", "015733", "015734", "015735", "015736", "015737", "015738", "015739", "015740", "015741", "015742", "015743", "015744", "015745", "015746", "015747", "015748", "015749", "015750", "015751", "015756", "015757", "015758", "015759", "015760", "015761", "015762", "015763", "015764", "015765", "015766", "015767", "015768", "015769", "015770", "015771", "015772", "015773", "015774", "015775", "015776", "015777", "015778", "015779", "015780", "015781", "015782", "015783", "015784", "015785", "015786", "015787", "015788", "015789", "015790", "015791", "015792", "015793", "015794", "015795", "015796", "015797", "015798", "015799", "015800", "015801", "015802", "015803", "015804", "015805", "015806", "015807", "015808", "015809", "015810", "015811", "015812", "015813", "015814", "015815", "015816", "015817", "015818", "015819", "015820", "015821", "015822", "015823", "015824", "015825", "015826", "015827", "015828", "015829", "015830", "015831", "015832", "015833", "015834", "015835", "015836", "015837", "015838", "015839", "015840", "015841", "015842", "015843", "015844", "015845", "015846", "015847", "015848", "015849", "015850", "015851", "015852", "015853", "015854", "015855", "015856", "015857", "015858", "015859", "015860", "015861", "015862", "015863", "015864", "015865", "015866", "015867", "015868", "015869", "015870", "015871", "015872"], "test": ["001581", "001582", "001583", "001584", "001585", "001586", "001587", "001588", "001589", "001590", "001591", "001592", "001593", "001594", "001595", "001596", "001597", "001598", "001599", "001600", "001601", "001602", "001603", "001605", "001606", "001607", "001608", "001609", "001610", "001611", "001612", "001614", "001615", "001616", "001617", "001618", "001619", "001620", "001621", "001622", "001623", "001624", "001625", "001626", "001627", "001628", "001629", "001630", "001631", "001632", "001633", "001634", "001635", "001636", "001637", "001638", "001639", "001640", "001641", "001642", "001643", "001644", "001645", "001646", "001647", "001648", "001649", "001650", "001651", "001652", "001653", "001654", "001655", "001656", "001657", "001658", "001659", "001661", "001662", "001663", "001664", "001665", "001666", "001667", "001668", "001669", "001670", "001671", "001672", "001673", "001674", "001675", "001676", "001677", "001678", "001679", "001680", "001681", "001682", "001683", "001684", "001685", "001686", "001687", "001688", "001689", "001690", "001691", "001692", "001693", "001694", "001695", "001696", "001697", "001698", "001699", "001700", "001701", "001702", "001703", "001704", "001705", "001706", "001707", "001708", "001709", "001710", "001711", "001712", "001713", "001714", "001715", "001716", "001717", "001718", "001719", "001720", "001721", "001722", "001723", "001724", "001725", "001726", "001727", "001728", "001729", "001730", "001731", "001732", "001733", "001734", "001735", "001736", "001737", "001738", "001739", "001740", "001741", "001742", "001743", "001744", "001745", "001746", "001747", "001748", "001749", "001750", "001751", "001752", "001753", "001754", "001755", "001756", "001757", "001758", "001759", "001760", "001761", "001762", "001763", "001764", "001765", "001766", "001767", "001768", "001769", "001770", "001771", "001772", "001773", "001774", "001775", "001776", "001777", "001778", "001779", "001780", "001781", "001782", "001783", "001784", "001785", "001786", "002160", "002161", "002162", "002163", "002164", "002165", "002166", "002167", "002168", "002169", "002170", "002171", "002172", "002173", "002174", "002175", "002176", "002177", "002178", "002179", "002180", "002181", "002182", "002183", "002184", "002185", "002186", "002187", "002188", "002189", "002190", "002191", "002192", "002193", "002194", "002195", "002196", "002197", "002198", "002199", "002200", "002201", "002202", "002203", "002204", "002205", "002206", "002207", "002208", "002209", "002210", "002211", "002212", "002213", "002214", "002215", "002216", "002217", "002218", "002219", "002220", "002221", "002222", "002223", "002224", "002225", "002226", "002227", "002228", "002229", "002230", "002231", "002232", "002233", "002234", "002235", "002236", "002237", "002238", "002239", "002240", "002241", "002242", "002243", "002244", "002245", "002246", "002247", "002248", "002249", "002250", "002251", "002252", "002253", "002254", "002255", "002256", "002257", "002258", "002259", "002260", "002261", "002262", "002263", "002264", "002265", "002266", "002267", "002268", "002269", "002270", "002271", "002272", "002273", "002274", "002275", "002276", "002277", "002278", "002279", "002280", "002281", "002282", "002283", "002284", "002285", "002286", "002287", "002288", "002289", "002290", "002291", "002292", "002293", "002294", "002295", "002296", "002297", "002298", "002299", "002300", "002301", "002302", "002303", "002304", "002305", "002306", "002307", "002308", "002309", "002310", "002311", "002312", "002313", "002314", "002315", "002316", "002317", "002318", "002319", "002320", "002321", "002322", "002323", "002324", "002325", "002326", "002327", "002328", "002329", "002330", "002331", "002332", "002333", "002334", "002335", "002336", "002337", "002338", "002339", "002340", "002341", "002342", "002534", "002535", "002536", "002537", "002538", "002539", "002540", "002541", "002542", "002543", "002544", "002545", "002546", "002547", "002548", "002549", "002550", "002551", "002552", "002553", "002554", "002555", "002556", "002557", "002558", "002559", "002560", "002561", "002562", "002563", "002564", "002565", "002566", "002567", "002568", "002569", "002570", "002571", "002572", "002573", "002574", "002575", "002576", "002577", "002578", "002579", "002580", "002581", "002582", "002583", "002584", "002585", "002586", "002587", "002588", "002589", "002590", "002591", "002592", "002593", "002594", "002595", "002596", "002597", "002598", "002599", "002600", "002601", "002602", "002603", "002604", "002605", "002606", "002607", "002608", "002609", "002610", "002611", "002612", "002613", "002614", "002615", "002616", "002617", "002618", "002619", "002620", "002621", "002622", "002623", "002624", "002625", "002626", "002627", "002628", "002629", "002630", "002631", "002632", "002633", "002634", "002635", "002636", "002637", "002638", "002639", "002640", "002641", "002642", "002643", "002644", "002645", "002646", "002647", "002648", "002649", "002650", "002651", "002652", "002653", "002654", "002655", "002656", "002657", "002658", "002659", "002660", "002661", "002662", "002663", "002664", "002665", "002666", "002667", "002668", "002669", "002670", "002671", "002672", "002673", "002674", "002675", "002676", "002677", "002678", "002679", "002680", "002681", "002682", "002683", "002684", "002685", "002686", "002687", "002688", "002689", "002690", "002691", "002692", "002693", "002694", "002695", "002696", "002697", "002698", "002699", "002700", "002701", "002702", "002703", "002704", "002705", "002706", "002707", "002708", "002709", "002710", "002711", "002712", "002713", "002715", "002716", "002717", "002718", "002719", "002720", "002721", "002722", "002723", "002724", "002725", "002726", "002727", "002728", "002729", "002730", "002731", "002732", "002733", "002734", "002735", "002736", "002737", "002738", "002739", "002740", "002741", "002742", "002743", "002744", "002745", "002746", "002747", "002748", "002749", "002750", "002751", "002752", "002753", "002754", "002755", "002756", "002757", "002758", "002759", "002760", "002761", "002762", "002763", "002764", "002765", "002766", "002767", "002768", "002769", "002770", "002771", "002772", "002773", "002774", "002775", "002776", "002777", "002778", "002779", "002780", "002781", "002782", "002783", "002784", "002785", "002786", "002787", "002788", "002789", "002790", "002791", "002792", "002793", "002794", "002795", "002796", "002797", "002798", "002799", "002800", "002801", "002802", "002803", "002804", "002805", "002806", "002807", "002808", "002809", "002810", "002811", "002812", "002813", "002814", "002815", "002816", "002817", "002818", "002819", "002820", "002821", "002822", "002823", "002824", "002825", "002826", "002827", "002828", "002829", "002830", "002831", "002832", "002833", "002834", "002835", "002836", "002837", "002838", "002839", "002840", "002841", "002842", "002843", "002844", "002845", "002846", "002847", "002848", "002849", "002850", "002851", "002852", "002853", "002854", "002855", "002856", "002857", "002858", "002859", "002860", "002861", "002862", "002863", "002864", "002865", "002866", "002867", "002868", "002869", "002870", "002871", "002872", "002873", "002874", "002875", "002876", "002877", "002878", "002879", "002880", "002881", "002882", "002883", "002884", "002885", "002886", "002887", "002888", "002889", "002890", "002891", "002892", "002893", "002894", "002895", "002896", "002897", "002898", "002899", "002900", "002901", "002902", "002903", "002904", "002905", "002906", "002907", "002908", "002909", "002910", "002911", "002912", "002913", "002914", "002915", "002916", "002917", "002918", "002919", "002920", "002921", "002922", "002923", "002924", "002925", "002926", "002927", "002928", "002929", "002930", "002931", "002932", "002933", "002934", "002935", "002936", "002937", "002938", "002939", "002940", "002941", "002942", "002943", "002944", "002945", "002946", "002947", "002948", "002949", "002950", "002951", "002952", "002953", "002954", "002955", "002956", "002957", "002958", "002959", "002960", "002961", "002962", "002963", "002964", "002965", "002966", "002967", "002968", "002969", "002970", "002971", "002972", "002973", "002974", "002975", "002976", "002977", "002978", "002979", "002980", "002981", "002982", "002983", "002984", "002985", "002986", "002987", "002988", "002989", "002990", "002991", "002992", "002993", "002994", "002995", "002996", "002997", "002998", "002999", "003000", "003001", "003002", "003003", "003004", "003005", "003006", "003007", "003008", "003009", "003010", "003011", "003012", "003013", "003014", "003015", "003016", "003017", "003018", "003790", "003791", "003792", "003793", "003794", "003795", "003796", "003797", "003798", "003799", "003800", "003801", "003802", "003803", "003804", "003805", "003806", "003807", "003808", "003809", "003810", "003811", "003812", "003813", "003814", "003815", "003816", "003817", "003818", "003819", "003820", "003821", "003822", "003823", "003824", "003825", "003826", "003827", "003828", "003829", "003830", "003831", "003832", "003833", "003834", "003835", "003836", "003837", "003838", "003839", "003840", "003841", "003842", "003843", "003844", "003845", "003846", "003847", "003848", "003849", "003850", "003851", "003852", "003853", "003854", "003855", "003856", "003857", "003858", "003859", "003860", "003861", "003862", "003863", "003864", "003865", "003866", "003867", "003868", "003869", "003870", "003871", "003872", "003873", "003874", "003875", "003876", "003877", "003878", "003879", "003880", "003881", "003882", "003883", "003884", "003885", "003886", "003887", "003888", "003889", "003890", "003891", "003892", "003893", "003894", "003895", "003896", "003897", "003898", "003899", "003900", "003901", "003902", "003903", "003904", "003905", "003906", "003907", "003908", "003909", "003910", "003911", "003912", "003913", "003914", "003915", "003916", "003917", "003918", "003919", "003920", "003921", "003922", "003923", "003924", "003925", "003926", "003927", "003928", "003929", "003930", "003931", "003932", "003933", "003934", "003935", "003936", "003937", "003938", "003939", "003940", "003941", "003942", "003943", "003944", "003945", "003946", "003947", "003948", "003949", "003950", "003951", "003952", "003953", "003954", "003955", "003956", "003957", "003958", "003959", "003960", "003961", "003962", "003963", "003964", "003965", "003966", "003967", "003968", "003969", "003970", "003971", "003972", "003973", "003974", "003975", "003976", "003977", "003978", "003979", "003980", "003981", "003982", "003983", "003984", "003985", "003986", "003987", "003988", "003989", "003990", "003991", "003992", "003993", "003994", "003995", "003996", "003997", "003998", "003999", "004000", "004001", "004002", "004003", "004004", "004005", "004006", "004007", "004008", "004009", "004010", "004011", "004012", "004719", "004720", "004721", "004722", "004723", "004724", "004725", "004726", "004727", "004728", "004729", "004730", "004731", "004732", "004733", "004734", "004735", "004736", "004737", "004738", "004739", "004740", "004741", "004742", "004743", "004744", "004745", "004746", "004747", "004748", "004749", "004750", "004751", "004752", "004753", "004754", "004755", "004756", "004757", "004758", "004759", "004760", "004761", "004762", "004763", "004764", "004765", "004766", "004767", "004768", "004769", "004770", "004771", "004772", "004773", "004774", "004775", "004776", "004777", "004778", "004779", "004780", "004781", "004782", "004783", "004784", "004785", "004786", "004787", "004788", "004789", "004790", "004791", "004792", "004793", "004794", "004795", "004796", "004797", "004798", "004799", "004800", "004801", "004802", "004803", "004804", "004805", "004806", "004807", "004808", "004809", "004810", "004811", "004812", "004813", "004814", "004815", "004816", "004817", "004818", "004819", "004820", "004821", "004822", "004823", "004824", "004825", "004826", "004827", "004828", "004829", "004830", "004831", "004832", "004833", "004834", "004835", "004836", "004837", "004838", "004839", "004840", "004841", "004842", "004843", "004844", "004845", "004846", "004847", "004848", "004849", "004850", "004851", "004852", "004853", "004854", "004855", "004856", "004857", "004858", "004859", "005052", "005053", "005054", "005055", "005056", "005057", "005058", "005059", "005060", "005061", "005062", "005063", "005064", "005065", "005066", "005067", "005068", "005069", "005070", "005071", "005072", "005073", "005074", "005075", "005076", "005077", "005078", "005079", "005080", "005081", "005082", "005083", "005084", "005085", "005086", "005087", "005088", "005089", "005090", "005091", "005092", "005093", "005094", "005095", "005096", "005097", "005098", "005099", "005100", "005101", "005102", "005103", "005104", "005105", "005106", "005107", "005108", "005109", "005110", "005111", "005112", "005113", "005114", "005115", "005116", "005117", "005118", "005119", "005120", "005121", "005122", "005123", "005124", "005125", "005126", "005127", "005128", "005129", "005130", "005131", "005132", "005133", "005134", "005135", "005136", "005137", "005138", "005139", "005140", "005141", "005142", "005143", "005144", "005145", "005146", "005147", "005148", "005149", "005150", "005151", "005152", "005153", "005154", "005155", "005156", "005157", "005158", "005159", "005160", "005161", "005162", "005163", "005164", "005165", "005166", "005167", "005168", "005169", "005170", "005171", "005172", "005173", "005174", "005175", "005176", "005177", "005178", "005179", "005180", "005181", "005182", "005183", "005184", "005185", "005186", "005187", "005188", "005189", "005190", "005191", "005192", "005193", "005194", "005195", "005196", "005197", "005198", "005199", "005200", "005201", "005202", "005203", "005204", "005205", "005206", "005207", "005208", "005209", "005210", "005211", "005212", "005213", "005214", "005215", "005216", "005217", "005218", "005219", "005220", "005221", "005222", "005223", "005224", "005225", "005226", "005227", "005228", "005229", "005230", "005231", "005232", "005233", "005234", "005235", "005236", "005237", "005238", "005239", "005240", "005241", "005242", "005243", "005244", "005245", "005246", "005247", "005248", "005249", "005250", "005251", "005252", "005253", "005254", "005255", "005256", "005257", "005258", "005259", "005260", "005261", "005262", "005263", "005264", "005265", "005266", "005267", "005268", "005269", "005270", "005271", "005272", "005273", "005274", "005275", "005276", "005277", "005278", "005279", "005280", "005281", "005282", "005283", "005284", "005285", "005286", "005287", "005288", "005289", "005290", "005291", "005292", "005293", "005294", "005295", "005296", "005297", "005298", "005299", "005300", "005301", "005302", "005303", "005304", "005305", "005306", "005307", "005308", "005309", "005310", "005311", "005312", "005313", "005314", "005315", "005316", "005317", "005318", "005319", "005320", "005321", "005322", "005323", "005324", "005325", "005326", "005327", "005328", "005329", "005330", "005331", "005332", "005333", "005334", "005335", "005336", "005337", "005338", "005339", "005340", "005341", "005342", "005343", "005344", "005345", "005346", "005347", "005348", "005349", "005350", "005351", "005352", "005353", "005354", "005355", "005356", "005357", "005358", "005359", "005360", "005361", "005362", "005363", "005364", "005365", "005366", "005367", "005368", "005369", "005370", "005371", "005372", "005373", "005374", "005375", "005376", "005377", "005378", "005379", "005380", "005381", "005382", "005383", "005384", "005385", "005386", "005387", "005388", "005389", "005390", "005391", "005392", "005393", "005394", "005395", "005396", "005397", "005398", "005399", "005400", "005401", "005402", "005403", "005404", "005405", "005406", "005407", "005408", "005409", "005410", "005411", "005412", "005413", "005414", "005415", "005416", "005417", "005418", "005419", "005420", "005421", "005422", "005423", "005424", "005425", "005426", "005427", "005428", "005429", "005430", "005431", "005432", "005433", "005434", "005435", "005436", "005437", "005438", "005439", "005440", "005441", "005442", "005443", "005444", "005445", "005446", "005447", "005448", "005449", "005450", "005451", "005452", "005453", "005454", "005455", "005456", "005457", "005458", "005459", "005460", "005461", "005462", "005463", "005464", "005465", "005466", "005467", "005468", "005469", "005470", "005471", "005472", "005473", "005474", "005475", "005476", "005477", "005478", "005479", "005480", "005481", "005482", "005483", "005484", "005485", "005486", "005487", "005488", "005489", "005490", "005491", "005492", "005493", "005494", "005495", "005496", "005497", "005498", "005499", "005500", "005501", "005502", "005503", "005504", "005505", "005506", "005507", "005508", "005509", "005510", "005511", "005512", "005513", "005514", "005515", "005516", "005517", "005518", "005519", "005520", "005521", "005522", "005523", "005524", "005525", "005526", "005527", "005528", "005529", "005530", "005531", "005532", "005533", "005534", "005535", "005536", "005537", "005538", "005539", "005540", "005541", "005542", "005543", "005544", "005545", "005546", "005547", "005548", "005549", "005550", "005551", "005552", "005553", "005554", "005555", "005556", "005557", "005558", "005559", "005560", "005561", "005562", "005563", "005564", "005565", "005566", "005567", "005568", "005569", "005570", "005571", "005572", "005573", "005574", "005575", "005576", "005577", "005578", "005579", "005580", "005581", "005582", "005583", "005584", "005585", "005586", "005920", "005921", "005922", "005923", "005924", "005925", "005926", "005927", "005928", "005929", "005930", "005931", "005932", "005933", "005934", "005935", "005936", "005937", "005938", "005939", "005940", "005941", "005942", "005943", "005944", "005945", "005946", "005947", "005948", "005949", "005950", "005951", "005952", "005953", "005954", "005955", "005956", "005957", "005958", "005959", "005960", "005961", "005962", "005963", "005964", "005965", "005966", "005967", "005968", "005969", "005970", "005971", "005972", "005973", "005974", "005975", "005976", "005977", "005978", "005979", "005980", "005981", "005982", "005983", "005984", "005985", "005986", "005987", "005988", "005989", "005990", "005991", "005992", "005993", "005994", "005995", "005996", "005997", "005998", "005999", "006000", "006001", "006002", "006003", "006004", "006005", "006006", "006007", "006008", "006009", "006010", "006011", "006012", "006013", "006014", "006015", "006016", "006017", "006018", "006019", "006020", "006021", "006022", "006023", "006024", "006025", "006026", "006027", "006028", "006029", "006030", "006031", "006032", "006033", "006034", "006035", "006036", "006037", "006038", "006039", "006040", "006041", "006042", "006043", "006044", "006045", "006046", "006047", "006048", "006049", "006050", "006051", "006052", "006053", "006054", "006055", "006056", "006057", "006058", "006059", "006060", "006061", "006062", "006063", "006064", "006065", "006066", "006067", "006068", "006069", "006070", "006071", "006072", "006073", "006074", "006075", "006076", "006077", "006078", "006079", "006080", "006081", "006082", "006083", "006084", "006085", "006086", "006087", "006088", "006089", "006090", "006091", "006092", "006093", "006094", "006095", "006096", "006097", "006098", "006099", "006100", "006101", "007008", "007009", "007010", "007011", "007012", "007013", "007014", "007015", "007016", "007017", "007018", "007019", "007020", "007021", "007022", "007023", "007024", "007025", "007026", "007027", "007028", "007029", "007030", "007031", "007032", "007033", "007034", "007035", "007036", "007037", "007038", "007039", "007040", "007041", "007042", "007043", "007044", "007045", "007046", "007047", "007048", "007049", "007050", "007051", "007052", "007053", "007054", "007055", "007056", "007057", "007058", "007059", "007060", "007061", "007062", "007063", "007064", "007065", "007066", "007067", "007068", "007069", "007070", "007071", "007072", "007073", "007074", "007075", "007076", "007077", "007078", "007079", "007080", "007081", "007082", "007083", "007084", "007085", "007086", "007087", "007088", "007089", "007090", "007091", "007092", "007093", "007094", "007095", "007096", "007097", "007098", "007099", "007100", "007101", "007102", "007103", "007104", "007105", "007106", "007107", "007108", "007109", "007110", "007111", "007112", "007113", "007114", "007115", "007116", "007117", "007118", "007119", "007120", "007121", "007122", "007123", "007124", "007125", "007126", "007127", "007128", "007129", "007130", "007131", "007132", "007133", "007134", "007135", "007136", "007137", "007138", "007139", "007140", "007141", "007142", "007143", "007144", "007145", "007146", "007147", "007148", "007149", "007150", "007151", "007152", "007153", "007154", "007155", "007156", "007157", "007158", "007159", "007160", "007161", "007162", "007163", "007164", "007165", "007166", "007167", "007168", "007169", "007170", "007171", "007172", "007173", "007174", "007175", "007176", "007177", "007178", "007179", "007180", "007181", "007182", "007183", "007184", "007185", "007186", "007187", "007188", "007189", "007190", "007191", "007192", "007193", "007194", "007195", "007196", "007197", "007198", "007199", "007200", "007201", "007202", "007203", "007204", "007205", "007206", "007207", "007208", "007209", "007210", "007211", "007212", "007213", "007214", "007215", "007216", "007217", "007218", "007219", "007220", "007221", "007222", "007223", "007224", "007225", "007226", "007227", "007228", "007229", "007230", "007231", "007232", "007233", "007234", "007235", "007236", "007237", "007238", "007239", "007240", "007241", "007242", "007243", "007244", "007245", "007246", "007247", "007248", "007249", "007250", "007251", "007252", "007253", "007254", "007255", "007256", "007257", "007258", "007259", "007260", "007261", "007262", "007263", "007264", "007265", "007266", "007267", "007268", "007269", "007270", "007271", "007272", "007273", "007274", "007275", "007276", "007277", "007278", "007279", "007280", "007281", "007282", "007283", "007284", "007285", "007286", "007287", "007288", "007289", "007290", "007291", "007292", "007293", "007294", "007295", "007296", "007297", "007298", "007299", "007300", "007301", "007302", "007303", "007304", "007305", "007306", "007307", "007308", "007309", "007310", "007311", "007312", "007313", "007314", "007315", "007316", "007317", "007318", "007319", "007320", "007321", "007322", "007323", "007324", "007325", "007326", "007327", "007328", "007329", "007330", "007331", "007332", "007333", "007334", "007335", "007336", "007337", "007338", "007339", "007340", "007341", "007342", "007343", "007344", "007345", "007346", "007347", "007348", "007349", "007350", "007351", "007352", "007353", "007354", "007355", "007356", "007357", "007358", "007359", "007360", "007361", "007362", "007363", "007364", "007365", "007366", "007367", "007368", "007369", "007370", "007371", "007372", "007373", "007374", "007375", "007376", "007377", "007378", "007379", "007380", "007381", "007382", "007383", "007384", "007385", "007386", "007387", "007388", "007389", "007390", "007391", "007392", "007393", "007394", "007395", "007396", "007397", "007398", "007399", "007400", "007401", "007402", "007403", "007404", "007405", "007406", "007407", "007408", "007409", "007410", "007411", "007412", "007413", "007414", "007415", "007416", "007417", "007418", "007419", "007420", "007421", "007422", "007423", "007424", "007425", "007426", "007427", "007428", "007429", "007430", "007431", "007432", "007433", "007434", "007435", "007436", "007437", "007438", "007439", "007440", "007441", "007442", "007443", "007444", "007445", "007446", "007447", "007988", "007989", "007990", "007991", "007992", "007993", "007994", "007995", "007996", "007997", "007998", "007999", "008000", "008001", "008002", "008003", "008004", "008005", "008006", "008007", "008008", "008009", "008010", "008011", "008012", "008013", "008014", "008015", "008016", "008017", "008018", "008019", "008020", "008021", "008022", "008023", "008024", "008025", "008026", "008027", "008028", "008029", "008030", "008031", "008032", "008033", "008034", "008035", "008036", "008037", "008038", "008039", "008040", "008041", "008042", "008043", "008044", "008045", "008046", "008047", "008048", "008049", "008050", "008051", "008052", "008053", "008054", "008055", "008056", "008057", "008058", "008059", "008060", "008061", "008062", "008063", "008064", "008065", "008066", "008067", "008068", "008069", "008070", "008071", "008072", "008073", "008074", "008075", "008076", "008077", "008078", "008079", "008080", "008081", "008082", "008083", "008084", "008085", "008086", "008087", "008088", "008089", "008090", "008091", "008092", "008093", "008094", "008095", "008096", "008097", "008098", "008099", "008100", "008101", "008102", "008103", "008104", "008105", "008106", "008107", "008108", "008109", "008110", "008111", "008112", "008113", "008114", "008115", "008116", "008117", "008118", "008119", "008120", "008121", "008122", "008123", "008124", "008125", "008126", "008127", "008128", "008129", "008130", "008131", "008132", "008133", "008134", "008135", "008136", "008137", "008138", "008139", "008140", "008141", "008142", "008143", "008144", "008145", "008146", "008147", "008148", "008149", "008150", "008151", "008152", "008153", "008154", "008155", "008156", "008157", "008158", "008159", "008160", "008161", "008162", "008163", "008164", "008165", "008166", "008167", "008168", "008169", "008170", "008171", "008172", "008173", "008174", "008175", "008176", "008177", "008178", "008179", "008180", "008181", "008182", "008183", "008184", "008185", "008186", "008187", "008188", "008189", "008190", "008191", "008192", "008193", "008194", "008195", "008196", "008197", "008198", "008199", "008200", "008201", "008202", "008203", "008204", "008205", "008206", "008207", "008208", "008209", "008210", "008211", "008212", "008213", "008214", "008215", "008216", "008217", "008218", "008219", "008220", "008221", "008222", "008223", "008224", "008225", "008226", "008227", "008228", "008229", "008230", "008231", "008232", "008233", "008234", "008235", "008236", "008237", "008238", "008239", "008240", "008241", "008242", "008243", "008244", "008245", "008246", "008247", "008248", "008249", "008250", "008251", "008252", "008253", "008254", "008255", "008256", "008257", "008258", "008259", "008260", "008261", "008262", "008263", "008264", "008265", "008266", "008267", "008268", "008269", "008270", "008271", "008272", "008273", "008274", "008275", "008276", "008277", "008278", "008279", "008280", "008281", "008282", "008283", "008284", "008285", "008286", "008287", "008288", "008289", "008290", "008291", "008292", "008293", "008294", "008295", "008296", "008297", "008298", "008299", "008300", "008301", "008302", "008303", "008304", "008305", "008306", "008307", "008308", "008309", "008310", "008311", "008312", "008313", "008314", "008315", "008316", "008317", "008318", "008319", "008320", "008321", "008322", "008323", "008324", "008325", "008326", "008327", "008328", "008329", "008330", "008331", "008332", "008333", "008334", "008335", "008336", "008337", "008338", "008339", "008340", "008341", "008342", "008343", "008344", "008345", "008346", "008347", "008348", "008349", "008350", "008351", "008352", "008353", "008354", "008355", "008356", "008357", "008358", "008359", "008360", "008361", "008362", "008363", "008364", "008365", "008366", "008367", "008368", "008369", "008370", "008371", "008372", "008373", "008374", "008375", "008376", "008377", "008378", "008379", "008380", "008381", "008382", "008383", "008384", "008385", "008386", "008387", "008388", "008389", "008390", "008391", "008392", "008393", "008394", "008395", "008396", "008397", "008398", "008399", "008400", "008401", "008402", "008403", "008404", "008405", "008406", "008407", "008408", "008409", "008410", "008411", "008412", "008413", "008414", "008415", "008416", "008417", "008418", "008419", "008420", "008421", "008422", "008423", "008424", "008425", "008426", "008427", "008428", "008429", "008430", "008431", "008432", "008433", "008434", "008435", "008436", "008437", "008438", "008439", "008440", "008441", "008442", "008443", "008444", "008445", "008446", "008447", "008448", "008449", "008450", "008451", "008452", "008453", "008454", "008455", "008456", "008457", "008458", "008459", "008460", "008461", "008462", "008463", "008464", "008465", "008466", "008467", "008468", "008469", "008470", "008471", "008472", "008473", "008474", "008475", "008476", "008477", "008488", "008489", "008490", "008491", "008492", "008493", "008494", "008495", "008496", "008497", "008498", "008499", "008500", "008501", "008502", "008503", "008504", "008505", "008506", "008507", "008508", "008509", "008510", "008511", "008512", "008513", "008514", "008515", "008516", "008517", "008518", "008519", "008520", "008521", "008522", "008523", "008524", "008525", "008526", "008527", "008528", "008529", "008530", "008531", "008532", "008533", "008534", "008535", "008536", "008537", "008538", "008539", "008540", "008541", "008542", "008543", "008544", "008545", "008546", "008547", "008548", "008549", "008550", "008551", "008552", "008553", "008554", "008555", "008556", "008557", "008558", "008559", "008560", "008561", "008562", "008563", "008564", "008565", "008566", "008567", "008568", "008569", "008570", "008571", "008572", "008573", "008574", "008575", "008576", "008577", "008578", "008579", "008580", "008581", "008582", "008583", "008584", "008585", "008586", "008587", "008588", "008589", "008590", "008591", "008592", "008593", "008594", "008595", "008596", "008597", "008598", "008599", "008600", "008601", "008602", "008603", "008604", "008605", "008606", "008607", "008608", "008609", "008610", "008611", "008612", "008613", "008614", "008615", "008616", "008617", "008618", "008619", "008620", "008621", "008622", "008623", "008624", "008625", "008626", "008627", "008628", "008629", "008630", "008631", "008632", "008633", "008634", "008635", "008636", "008637", "008638", "008639", "008640", "008641", "008642", "008643", "008644", "008645", "008646", "008647", "008648", "008649", "008650", "008651", "008652", "008653", "008654", "008655", "008656", "008657", "008658", "008659", "008660", "008661", "008662", "008663", "008664", "008665", "008666", "008667", "008668", "008669", "008670", "008671", "008672", "008673", "008674", "008675", "008676", "008677", "008678", "008679", "008680", "008681", "008682", "008683", "008684", "008685", "008686", "008687", "009369", "009370", "009371", "009372", "009373", "009374", "009375", "009376", "009377", "009378", "009379", "009380", "009381", "009382", "009383", "009384", "009385", "009386", "009387", "009388", "009389", "009390", "009391", "009392", "009393", "009394", "009395", "009396", "009397", "009398", "009399", "009400", "009401", "009402", "009403", "009404", "009405", "009406", "009407", "009408", "009409", "009410", "009411", "009412", "009413", "009414", "009415", "009416", "009417", "009418", "009419", "009420", "009421", "009422", "009423", "009424", "009425", "009426", "009427", "009428", "009429", "009430", "009431", "009432", "009433", "009434", "009435", "009436", "009437", "009438", "009439", "009440", "009441", "009442", "009443", "009444", "009445", "009446", "009447", "009448", "009449", "009450", "009451", "009452", "009453", "009454", "009455", "009456", "009457", "009458", "009459", "009460", "009461", "009462", "009463", "009464", "009465", "009466", "009467", "009468", "009469", "009470", "009471", "009472", "009473", "009474", "009475", "009476", "009477", "009478", "009479", "009480", "009481", "009482", "009483", "009484", "009485", "009486", "009487", "009488", "009489", "009490", "009491", "009492", "009493", "009494", "009495", "009496", "009497", "009498", "009499", "009500", "009501", "009502", "009503", "009504", "009505", "009506", "009507", "009508", "009509", "009510", "009511", "009512", "009513", "009514", "009515", "009516", "009517", "009518", "009519", "009520", "009521", "009522", "009523", "009524", "009525", "009526", "009527", "009528", "009529", "009530", "009531", "009532", "009533", "009534", "009535", "009536", "009537", "009538", "009539", "009540", "009541", "009542", "009543", "009544", "009545", "009546", "009547", "009548", "009549", "009550", "009551", "009552", "009553", "009554", "009555", "009556", "009557", "009558", "009559", "009560", "009561", "009562", "009563", "009564", "009565", "009566", "009567", "009568", "009569", "009570", "009571", "009572", "009573", "009574", "009575", "009576", "009577", "009578", "009719", "009720", "009721", "009722", "009723", "009724", "009725", "009726", "009727", "009728", "009729", "009730", "009731", "009732", "009733", "009734", "009735", "009736", "009737", "009738", "009739", "009740", "009741", "009742", "009743", "009744", "009745", "009746", "009747", "009748", "009749", "009750", "009751", "009752", "009753", "009754", "009755", "009756", "009757", "009758", "009759", "009760", "009761", "009762", "009763", "009764", "009765", "009766", "009767", "009768", "009769", "009770", "009771", "009772", "009773", "009774", "009775", "009776", "009777", "009778", "009779", "009780", "009781", "009782", "009783", "009784", "009785", "009786", "009787", "009788", "009789", "009790", "009791", "009792", "009793", "009794", "009795", "009796", "009797", "009798", "009799", "009800", "009801", "009802", "009803", "009804", "009805", "009806", "009807", "009808", "009811", "009812", "009813", "009814", "009815", "009816", "009817", "009818", "009819", "009820", "009821", "009822", "009823", "009824", "009825", "009826", "009827", "009828", "009829", "009830", "009831", "009832", "009833", "009834", "009835", "009836", "009837", "009838", "009839", "009840", "009841", "009842", "009843", "009844", "009845", "009846", "009847", "009848", "009849", "009850", "009851", "009852", "009853", "009854", "009855", "009856", "009857", "009858", "009859", "009860", "009861", "009862", "009863", "009864", "009865", "009866", "009867", "009868", "009869", "009870", "009871", "009872", "009873", "009874", "009875", "009876", "009877", "009878", "009879", "009880", "009881", "009882", "009883", "009884", "009885", "009886", "009887", "009888", "009889", "009890", "009891", "009892", "009893", "009894", "009895", "009896", "009897", "009898", "009899", "009900", "009901", "009902", "009903", "009904", "009905", "009906", "009907", "009908", "011865", "011866", "011867", "011868", "011869", "011870", "011871", "011872", "011873", "011874", "011875", "011876", "011877", "011878", "011879", "011880", "011881", "011882", "011883", "011884", "011885", "011886", "011887", "011888", "011889", "011890", "011891", "011892", "011893", "011894", "011895", "011896", "011897", "011898", "011899", "011900", "011901", "011902", "011903", "011904", "011905", "011906", "011907", "011908", "011909", "011910", "011911", "011912", "011913", "011914", "011915", "011916", "011917", "011918", "011919", "011920", "011921", "011922", "011923", "011924", "011925", "011926", "011927", "011928", "011929", "011930", "011931", "011932", "011933", "011934", "011935", "011936", "011937", "011938", "011939", "011940", "011941", "011942", "011943", "011944", "011945", "011946", "011947", "011948", "011949", "011950", "011951", "011952", "011953", "011954", "011955", "011956", "011957", "011958", "011959", "011960", "011961", "011962", "011963", "011964", "011965", "011966", "011967", "011968", "011969", "011970", "011971", "011972", "011973", "011974", "011975", "011976", "011977", "011978", "011979", "011980", "011981", "011982", "011983", "011984", "011985", "011986", "011987", "011988", "011989", "011990", "011991", "011992", "011993", "011994", "011995", "011996", "011997", "011998", "011999", "012000", "012001", "012002", "012003", "012004", "012005", "012006", "012007", "012008", "012009", "012010", "012011", "012012", "012013", "012014", "012015", "012016", "012017", "012018", "012019", "012020", "012021", "012022", "012023", "012024", "012025", "012026", "012027", "012028", "012029", "012030", "012031", "012032", "012033", "012034", "012035", "012036", "012037", "012038", "012039", "012040", "012041", "012042", "012043", "012044", "012045", "012046", "012047", "012048", "012049", "012050", "012051", "012052", "012053", "012054", "012055", "012056", "012057", "012058", "012059", "012060", "012061", "012062", "012063", "012064", "012065", "012066", "012067", "012068", "012069", "012070", "012071", "012072", "012073", "012074", "012075", "012076", "012077", "012078", "012079", "012080", "012081", "012082", "012083", "012084", "012085", "012086", "012087", "012088", "012089", "012090", "012091", "012092", "012093", "012094", "012095", "012096", "012097", "012098", "012099", "012100", "012101", "012102", "012103", "012104", "012105", "012106", "012107", "012108", "012109", "012110", "012111", "012112", "012113", "012114", "012115", "012116", "012117", "012118", "012119", "012120", "012121", "012122", "012123", "012124", "012125", "012126", "012127", "012128", "012129", "012130", "012131", "012132", "012133", "012134", "012135", "012136", "012137", "012138", "012139", "012140", "012141", "012142", "012143", "012144", "012145", "012146", "012147", "012148", "012149", "012150", "012151", "012152", "012153", "012154", "012155", "012156", "012157", "012158", "012159", "012160", "012161", "012162", "012163", "012164", "012165", "012166", "012167", "012168", "012169", "012170", "012171", "012172", "012173", "012174", "012175", "012176", "012177", "012178", "012179", "012180", "012181", "012182", "012183", "012184", "012185", "012186", "012187", "012188", "012189", "012190", "012191", "012192", "012193", "012194", "012195", "012196", "012197", "012198", "012199", "012200", "012201", "012202", "012203", "012204", "012205", "012206", "012207", "012208", "012209", "012210", "012211", "012212", "012213", "012214", "012215", "012216", "012217", "012218", "012219", "012220", "012221", "012222", "012223", "012224", "012225", "012226", "012227", "012228", "012442", "012443", "012444", "012445", "012446", "012447", "012448", "012449", "012450", "012451", "012452", "012453", "012454", "012455", "012456", "012457", "012458", "012459", "012460", "012461", "012462", "012463", "012464", "012465", "012466", "012467", "012468", "012469", "012470", "012471", "012472", "012473", "012474", "012475", "012476", "012477", "012478", "012479", "012480", "012481", "012482", "012483", "012484", "012485", "012486", "012487", "012488", "012489", "012490", "012491", "012492", "012493", "012494", "012495", "012496", "012497", "012498", "012499", "012500", "012501", "012502", "012503", "012504", "012505", "012506", "012507", "012508", "012509", "012510", "012511", "012512", "012513", "012514", "012515", "012516", "012517", "012518", "012519", "012520", "012521", "012522", "012523", "012524", "012525", "012526", "012527", "012528", "012529", "012530", "012531", "012532", "012533", "012534", "012535", "012536", "012537", "012538", "012539", "012540", "012541", "012542", "012543", "012544", "012545", "012546", "012547", "012548", "012549", "012550", "012551", "012552", "012553", "012554", "012555", "012556", "012557", "012558", "012559", "012560", "012561", "012562", "012563", "012564", "012565", "012566", "012567", "012568", "012569", "012570", "012571", "012572", "012573", "012574", "012575", "012576", "012577", "012578", "012579", "012580", "012581", "012582", "012583", "012584", "012585", "012586", "012587", "012588", "012743", "012744", "012745", "012746", "012747", "012748", "012749", "012750", "012751", "012752", "012753", "012754", "012755", "012756", "012757", "012758", "012759", "012760", "012761", "012762", "012763", "012764", "012765", "012766", "012767", "012768", "012769", "012770", "012771", "012772", "012773", "012774", "012775", "012776", "012777", "012778", "012779", "012780", "012781", "012782", "012783", "012784", "012785", "012786", "012787", "012788", "012789", "012790", "012791", "012792", "012793", "012794", "012795", "012796", "012797", "012798", "012799", "012800", "012801", "012802", "012803", "012804", "012805", "012806", "012807", "012808", "012809", "012810", "012811", "012812", "012813", "012814", "012815", "012816", "012817", "012818", "012819", "012820", "012821", "012822", "012823", "012824", "012825", "012826", "012827", "012828", "012829", "012830", "012831", "012832", "012833", "012834", "012835", "012836", "012837", "012838", "012839", "012840", "012841", "012842", "012843", "012844", "012845", "012846", "012847", "012848", "012849", "012850", "012851", "012852", "012853", "012854", "012855", "012856", "012857", "012858", "012859", "012860", "012861", "012862", "012863", "012864", "012865", "012866", "012867", "012868", "012869", "012870", "012871", "012872", "012873", "012874", "012875", "012876", "012877", "012878", "012879", "012880", "012881", "012882", "012883", "012884", "012885", "012886", "012887", "012888", "012889", "012890", "012891", "012892", "012893", "012894", "012895", "012896", "012897", "012898", "012899", "012900", "012901", "012902", "012903", "012904", "012905", "012906", "012907", "012908", "012909", "012910", "012911", "012912", "012913", "012914", "012915", "012916", "012917", "012918", "012919", "012920", "012921", "012922", "012923", "012924", "012925", "012926", "012927", "012928", "012929", "012930", "012931", "012932", "012933", "012934", "012935", "012936", "013720", "013721", "013722", "013723", "013724", "013725", "013726", "013727", "013728", "013729", "013730", "013731", "013732", "013733", "013734", "013735", "013736", "013737", "013738", "013739", "013740", "013741", "013742", "013743", "013744", "013745", "013746", "013747", "013748", "013749", "013750", "013751", "013752", "013753", "013754", "013755", "013756", "013757", "013758", "013759", "013760", "013761", "013762", "013763", "013764", "013765", "013766", "013767", "013768", "013769", "013770", "013771", "013772", "013773", "013774", "013775", "013776", "013777", "013778", "013779", "013780", "013781", "013782", "013783", "013784", "013785", "013786", "013787", "013788", "013789", "013790", "013791", "013792", "013793", "013794", "013795", "013796", "013797", "013798", "013799", "013800", "013801", "013802", "013803", "013804", "013805", "013806", "013807", "013808", "013809", "013810", "013811", "013812", "013813", "013814", "013858", "013859", "013860", "013861", "013862", "013863", "013864", "013865", "013866", "013867", "013868", "013869", "013870", "013871", "013872", "013873", "013874", "013875", "013876", "013877", "013878", "013879", "013880", "013881", "013882", "013883", "013884", "013885", "013886", "013887", "013888", "013889", "013890", "013891", "013892", "013893", "013894", "013895", "013896", "013897", "013898", "013899", "013900", "013901", "013902", "013903", "013904", "013905", "013906", "013907", "013908", "013909", "013910", "013911", "013912", "013913", "013914", "013915", "013916", "013917", "013918", "013919", "013920", "013921", "013922", "013923", "013924", "013925", "013926", "013927", "013928", "013929", "013930", "013931", "013932", "013933", "013934", "013935", "013936", "013937", "013938", "013939", "013940", "013941", "013942", "013943", "013944", "013945", "013946", "013947", "013948", "013949", "013950", "013951", "013952", "013953", "013954", "013955", "013956", "013957", "013958", "013959", "013960", "013961", "013962", "013963", "013964", "013965", "013966", "013967", "013968", "013969", "013970", "013971", "013972", "013973", "014608", "014609", "014610", "014611", "014612", "014613", "014614", "014615", "014616", "014617", "014618", "014619", "014620", "014621", "014622", "014623", "014624", "014625", "014626", "014627", "014628", "014629", "014630", "014631", "014632", "014633", "014634", "014635", "014636", "014637", "014638", "014639", "014640", "014641", "014642", "014643", "014644", "014645", "014646", "014647", "014648", "014649", "014650", "014651", "014652", "014653", "014654", "014655", "014656", "014657", "014658", "014659", "014660", "014661", "014662", "014663", "014664", "014665", "014666", "014667", "014668", "014669", "014670", "014671", "014672", "014673", "014674", "014675", "014676", "014677", "014678", "014679", "014680", "014681", "014682", "014683", "014684", "014685", "014686", "014687", "014688", "014689", "014690", "014691", "014692", "015254", "015255", "015256", "015257", "015258", "015259", "015260", "015261", "015262", "015263", "015264", "015265", "015266", "015267", "015268", "015269", "015270", "015271", "015272", "015273", "015274", "015275", "015276", "015277", "015278", "015279", "015280", "015281", "015282", "015283", "015284", "015285", "015286", "015287", "015288", "015289", "015290", "015291", "015292", "015293", "015294", "015295", "015296", "015297", "015298", "015299", "015300", "015301", "015302", "015303", "015304", "015305", "015306", "015307", "015308", "015309", "015310", "015311", "015312", "015313", "015314", "015315", "015316", "015317", "015318", "015319", "015320", "015321", "015322", "015323", "015324", "015325", "015326", "015327", "015328", "015329", "015330", "015331", "015332", "015333", "015334", "015335", "015336", "015337", "015338", "015339", "015340", "015341", "015342", "015343", "015344", "015345", "015346", "015347", "015348", "015349", "015350", "015351", "015352", "015353", "015354", "015355", "015356", "015357", "015358", "015359", "015360", "015361", "015362", "015363", "015364", "015365", "015366", "015367", "015368", "015369", "015370", "015371", "015372", "015373", "015374", "015379", "015380", "015381", "015382", "015383", "015384", "015385", "015386", "015387", "015388", "015389", "015390", "015391", "015392", "015393", "015394", "015395", "015396", "015397", "015398", "015399", "015400", "015401", "015402", "015403", "015404", "015405", "015406", "015407", "015408", "015409", "015410", "015411", "015412", "015413", "015414", "015415", "015416", "015417", "015418", "015419", "015420", "015421", "015422", "015423", "015424", "015425", "015426", "015427", "015428", "015429", "015430", "015431", "015432", "015433", "015434", "015435", "015436", "015437", "015438", "015439", "015440", "015441", "015442", "015443", "015444", "015445", "015446", "015447", "015448", "015449", "015450", "015451", "015452", "015453", "015454", "015455", "015456", "015457", "015458", "015459", "015460", "015461", "015462", "015463", "015464", "015465", "015466", "015467", "015468", "015469", "015470", "015471", "015472", "015473", "015474", "015475", "015476", "015477", "015478", "015479", "015480", "015481", "015482", "015483", "015484", "015485", "015486", "015487", "015488", "015489", "015490", "015491", "015492", "015493", "015494", "015495", "015496", "015497", "015498", "015499", "015500", "015501", "015502", "015503", "015504", "015505", "015506", "015507", "015508", "015509", "015510", "015511", "015512", "015513", "015514", "015515", "015516", "015517", "015518", "015519", "015520", "015521", "015522", "015523", "015524", "015525", "015526", "015527", "015528", "015529", "015530", "015531", "015532", "015533", "015534", "015535", "015536", "015537", "015538", "015539", "015540", "015541", "015542", "015543", "015544", "015545", "015546", "015547", "015548", "015549", "015550", "015551", "015552", "015553", "015554", "015555", "015556", "015557", "015558", "015559", "015560", "015561", "015562", "015563", "015564", "015565", "015566", "015567", "015568", "015569", "015570", "015571", "015572", "015573", "015574", "015575", "015576", "015577", "015578", "015579", "015580", "015581", "015582", "015583", "015584", "015585", "015586", "015587", "015588", "015589", "015590", "015591", "015592", "015593", "015594", "015595", "015596", "015597", "015598", "015599", "015600", "015601", "015602", "015603", "015604", "015605", "015606", "015607", "015608", "015609", "015610", "015611", "015612", "015613", "015614", "015615", "015616", "015617", "015618", "015619", "015620", "015621", "015622", "015623", "015624", "015625", "015626", "015627", "015628", "015629", "015630", "015631", "015632", "015633", "015634", "015635", "015636", "015637", "015638", "015639"], "test_A": ["002160", "002161", "002162", "002163", "002164", "002165", "002166", "002167", "002168", "002169", "002170", "002171", "002172", "002173", "002174", "002175", "002176", "002177", "002178", "002179", "002180", "002181", "002182", "002183", "002184", "002185", "002186", "002187", "002188", "002189", "002190", "002191", "002192", "002193", "002194", "002195", "002196", "002197", "002198", "002199", "002200", "002201", "002202", "002203", "002204", "002205", "002206", "002207", "002208", "002209", "002210", "002211", "002212", "002213", "002214", "002215", "002216", "002217", "002218", "002219", "002220", "002221", "002222", "002223", "002224", "002225", "002226", "002227", "002228", "002229", "002230", "002231", "002232", "002233", "002234", "002235", "002236", "002237", "002238", "002239", "002240", "002241", "002242", "002243", "002244", "002245", "002246", "002247", "002248", "002249", "002250", "002251", "002252", "002253", "002254", "002255", "002256", "002257", "002258", "002259", "002260", "002261", "002262", "002263", "002264", "002265", "002266", "002267", "002268", "002269", "002270", "002271", "002272", "002273", "002274", "002275", "002276", "002277", "002278", "002279", "002280", "002281", "002282", "002283", "002284", "002285", "002286", "002287", "002288", "002289", "002290", "002291", "002292", "002293", "002294", "002295", "002296", "002297", "002298", "002299", "002300", "002301", "002302", "002303", "002304", "002305", "002306", "002307", "002308", "002309", "002310", "002311", "002312", "002313", "002314", "002315", "002316", "002317", "002318", "002319", "002320", "002321", "002322", "002323", "002324", "002325", "002326", "002327", "002328", "002329", "002330", "002331", "002332", "002333", "002334", "002335", "002336", "002337", "002338", "002339", "002340", "002341", "002342", "002847", "002848", "002849", "002850", "002851", "002852", "002853", "002854", "002855", "002856", "002857", "002858", "002859", "002860", "002861", "002862", "002863", "002864", "002865", "002866", "002867", "002868", "002869", "002870", "002871", "002872", "002873", "002874", "002875", "002876", "002877", "002878", "002879", "002880", "002881", "002882", "002883", "002884", "002885", "002886", "002887", "002888", "002889", "002890", "002891", "002892", "002893", "002894", "002895", "002896", "002897", "002898", "002899", "002900", "002901", "002902", "002903", "002904", "002905", "002906", "002907", "002908", "002909", "002910", "002911", "002912", "002913", "002914", "002915", "002916", "002917", "002918", "002919", "002920", "002921", "002922", "002923", "002924", "002925", "002926", "002927", "002928", "002929", "002930", "002931", "002932", "002933", "002934", "002935", "002936", "002937", "002938", "002939", "002940", "002941", "002942", "002943", "002944", "002945", "002946", "002947", "002948", "002949", "002950", "002951", "002952", "002953", "002954", "002955", "002956", "002957", "002958", "002959", "002960", "002961", "002962", "002963", "002964", "002965", "002966", "002967", "002968", "002969", "002970", "002971", "002972", "002973", "002974", "002975", "002976", "002977", "002978", "002979", "002980", "002981", "002982", "002983", "002984", "002985", "002986", "002987", "002988", "002989", "002990", "002991", "002992", "002993", "002994", "002995", "002996", "002997", "002998", "002999", "003000", "003001", "003002", "003003", "003004", "003005", "003006", "003007", "003008", "003009", "003010", "003011", "003012", "003013", "003014", "003015", "003016", "003017", "003018", "005052", "005053", "005054", "005055", "005056", "005057", "005058", "005059", "005060", "005061", "005062", "005063", "005064", "005065", "005066", "005067", "005068", "005069", "005070", "005071", "005072", "005073", "005074", "005075", "005076", "005077", "005078", "005079", "005080", "005081", "005082", "005083", "005084", "005085", "005086", "005087", "005088", "005089", "005090", "005091", "005092", "005093", "005094", "005095", "005096", "005097", "005098", "005099", "005100", "005101", "005102", "005103", "005104", "005105", "005106", "005107", "005108", "005109", "005110", "005111", "005112", "005113", "005114", "005115", "005116", "005117", "005118", "005119", "005120", "005121", "005122", "005123", "005124", "005125", "005126", "005127", "005128", "005129", "005130", "005131", "005132", "005133", "005134", "005135", "005136", "005137", "005138", "005139", "005140", "005141", "005142", "005143", "005144", "005145", "005146", "005147", "005148", "005149", "005150", "005151", "005152", "005153", "005154", "005155", "005156", "005157", "005158", "005159", "005160", "005161", "005162", "005163", "005164", "005165", "005166", "005167", "005168", "005169", "005170", "005171", "005172", "005173", "005174", "005175", "005176", "005177", "005178", "005179", "005180", "005181", "005182", "005183", "005184", "005185", "005186", "005187", "005188", "005189", "005190", "005191", "005192", "005193", "005194", "005195", "005196", "005197", "005198", "005199", "005200", "005201", "005202", "005203", "005204", "005205", "005206", "005207", "005208", "005209", "005210", "005211", "005212", "005213", "005214", "005215", "005216", "005217", "005218", "005219", "005220", "005221", "005222", "005223", "005224", "005225", "005226", "005227", "005228", "005229", "005230", "005231", "005232", "005233", "007008", "007009", "007010", "007011", "007012", "007013", "007014", "007015", "007016", "007017", "007018", "007019", "007020", "007021", "007022", "007023", "007024", "007025", "007026", "007027", "007028", "007029", "007030", "007031", "007032", "007033", "007034", "007035", "007036", "007037", "007038", "007039", "007040", "007041", "007042", "007043", "007044", "007045", "007046", "007047", "007048", "007049", "007050", "007051", "007052", "007053", "007054", "007055", "007056", "007057", "007058", "007059", "007060", "007061", "007062", "007063", "007064", "007065", "007066", "007067", "007068", "007069", "007070", "007071", "007072", "007073", "007074", "007075", "007076", "007077", "007078", "007079", "007080", "007081", "007082", "007083", "007084", "007085", "007086", "007087", "007088", "007089", "007090", "007091", "007092", "007093", "007094", "007095", "007096", "007097", "007098", "007099", "007100", "007101", "007102", "007103", "007104", "007105", "007106", "007107", "007108", "007109", "007110", "007111", "007112", "007113", "007114", "007115", "007116", "007117", "007118", "007119", "007120", "007121", "007122", "007123", "007124", "007125", "007126", "007127", "007128", "007129", "007130", "007131", "007132", "007133", "007134", "007135", "007136", "007137", "007138", "007139", "007140", "007141", "007142", "007143", "007144", "007145", "007146", "007147", "007148", "007149", "007150", "007151", "007152", "007153", "007154", "007155", "007156", "007157", "007158", "007159", "007160", "007161", "007162", "007163", "007164", "007165", "007166", "007167", "007168", "007169", "007170", "007171", "007172", "007173", "007174", "007175", "007176", "007177", "007178", "007179", "007180", "007181", "007182", "007183", "007184", "007185", "007186", "007187", "007188", "007189", "007190", "007191", "007192", "007193", "007194", "007195", "007196", "007197", "008158", "008159", "008160", "008161", "008162", "008163", "008164", "008165", "008166", "008167", "008168", "008169", "008170", "008171", "008172", "008173", "008174", "008175", "008176", "008177", "008178", "008179", "008180", "008181", "008182", "008183", "008184", "008185", "008186", "008187", "008188", "008189", "008190", "008191", "008192", "008193", "008194", "008195", "008196", "008197", "008198", "008199", "008200", "008201", "008202", "008203", "008204", "008205", "008206", "008207", "008208", "008209", "008210", "008211", "008212", "008213", "008214", "008215", "008216", "008217", "008218", "008219", "008220", "008221", "008222", "008223", "008224", "008225", "008226", "008227", "008228", "008229", "008230", "008231", "008232", "008233", "008234", "008235", "008236", "008237", "008238", "008239", "008240", "008241", "008242", "008243", "008244", "008245", "008246", "008247", "008248", "008249", "008250", "008251", "008252", "008253", "008254", "008255", "008256", "008257", "008258", "008259", "008260", "008261", "008262", "008263", "008264", "008265", "008266", "008267", "008268", "008269", "008270", "008271", "008272", "008273", "008274", "008275", "008276", "008277", "008278", "008279", "008280", "008281", "008282", "008283", "008284", "008285", "008286", "008287", "008288", "008289", "008290", "008291", "008292", "008293", "008294", "008295", "008296", "008297", "012442", "012443", "012444", "012445", "012446", "012447", "012448", "012449", "012450", "012451", "012452", "012453", "012454", "012455", "012456", "012457", "012458", "012459", "012460", "012461", "012462", "012463", "012464", "012465", "012466", "012467", "012468", "012469", "012470", "012471", "012472", "012473", "012474", "012475", "012476", "012477", "012478", "012479", "012480", "012481", "012482", "012483", "012484", "012485", "012486", "012487", "012488", "012489", "012490", "012491", "012492", "012493", "012494", "012495", "012496", "012497", "012498", "012499", "012500", "012501", "012502", "012503", "012504", "012505", "012506", "012507", "012508", "012509", "012510", "012511", "012512", "012513", "012514", "012515", "012516", "012517", "012518", "012519", "012520", "012521", "012522", "012523", "012524", "012525", "012526", "012527", "012528", "012529", "012530", "012531", "012532", "012533", "012534", "012535", "012536", "012537", "012538", "012539", "012540", "012541", "012542", "012543", "012544", "012545", "012546", "012547", "012548", "012549", "012550", "012551", "012552", "012553", "012554", "012555", "012556", "012557", "012558", "012559", "012560", "012561", "012562", "012563", "012564", "012565", "012566", "012567", "012568", "012569", "012570", "012571", "012572", "012573", "012574", "012575", "012576", "012577", "012578", "012579", "012580", "012581", "012582", "012583", "012584", "012585", "012586", "012587", "012588", "013858", "013859", "013860", "013861", "013862", "013863", "013864", "013865", "013866", "013867", "013868", "013869", "013870", "013871", "013872", "013873", "013874", "013875", "013876", "013877", "013878", "013879", "013880", "013881", "013882", "013883", "013884", "013885", "013886", "013887", "013888", "013889", "013890", "013891", "013892", "013893", "013894", "013895", "013896", "013897", "013898", "013899", "013900", "013901", "013902", "013903", "013904", "013905", "013906", "013907", "013908", "013909", "013910", "013911", "013912", "013913", "013914", "013915", "013916", "013917", "013918", "013919", "013920", "013921", "013922", "013923", "013924", "013925", "013926", "013927", "013928", "013929", "013930", "013931", "013932", "013933", "013934", "013935", "013936", "013937", "013938", "013939", "013940", "013941", "013942", "013943", "013944", "013945", "013946", "013947", "013948", "013949", "013950", "013951", "013952", "013953", "013954", "013955", "013956", "013957", "013958", "013959", "013960", "013961", "013962", "013963", "013964", "013965", "013966", "013967", "013968", "013969", "013970", "013971", "013972", "013973", "015496", "015497", "015498", "015499", "015500", "015501", "015502", "015503", "015504", "015505", "015506", "015507", "015508", "015509", "015510", "015511", "015512", "015513", "015514", "015515", "015516", "015517", "015518", "015519", "015520", "015521", "015522", "015523", "015524", "015525", "015526", "015527", "015528", "015529", "015530", "015531", "015532", "015533", "015534", "015535", "015536", "015537", "015538", "015539", "015540", "015541", "015542", "015543", "015544", "015545", "015546", "015547", "015548", "015549", "015550", "015551", "015552", "015553", "015554", "015555", "015556", "015557", "015558", "015559", "015560", "015561", "015562", "015563", "015564", "015565", "015566", "015567", "015568", "015569", "015570", "015571", "015572", "015573", "015574", "015575", "015576", "015577", "015578", "015579", "015580", "015581", "015582", "015583", "015584", "015585", "015586", "015587", "015588", "015589", "015590", "015591", "015592", "015593", "015594", "015595", "015596", "015597", "015598", "015599", "015600", "015601", "015602", "015603", "015604", "015605", "015606", "015607", "015608", "015609", "015610", "015611", "015612", "015613", "015614", "015615", "015616", "015617", "015618", "015619", "015620", "015621", "015622", "015623", "015624", "015625", "015626", "015627", "015628", "015629", "015630", "015631", "015632", "015633", "015634", "015635", "015636", "015637", "015638", "015639"]}, "cooperative_split": {"train": ["000009", "000010", "000011", "000013", "000014", "000015", "000016", "000017", "000018", "000019", "000020", "000021", "000022", "000023", "000024", "000025", "000026", "000027", "000028", "000029", "000030", "000031", "000032", "000033", "000034", "000035", "000036", "000037", "000038", "000039", "000040", "000041", "000042", "000043", "000044", "000045", "000046", "000047", "000048", "000049", "000050", "000051", "000053", "000054", "000055", "000056", "000057", "000058", "000059", "000060", "000061", "000062", "000063", "000064", "000065", "000066", "000067", "000068", "000069", "000070", "000071", "000072", "000073", "000074", "000075", "000077", "000078", "000079", "000080", "000081", "000082", "000083", "000084", "000085", "000086", "000087", "000088", "000089", "000090", "000091", "000092", "000093", "000095", "000096", "000097", "000098", "000099", "000100", "000101", "000102", "000103", "000104", "000105", "000106", "000107", "000108", "000109", "000110", "000111", "000112", "000113", "000114", "000115", "000116", "000117", "000118", "000119", "000120", "000121", "000122", "000123", "000124", "000125", "000126", "000127", "000128", "000129", "000130", "000131", "000132", "000133", "000134", "000135", "000136", "000137", "000138", "000139", "000140", "000141", "000142", "000143", "000144", "000145", "000146", "000147", "000148", "000149", "000150", "000151", "000152", "000153", "000154", "000155", "000156", "000157", "000158", "000159", "000160", "000161", "000162", "000163", "000164", "000165", "000166", "000167", "000168", "000169", "000170", "000172", "000174", "000175", "000176", "000177", "000178", "000179", "000180", "000181", "000182", "000183", "000184", "000185", "000186", "000187", "000188", "000189", "000190", "000191", "000192", "000193", "000194", "000195", "000196", "000197", "000198", "000199", "000200", "000201", "000202", "000203", "000204", "000205", "000206", "000207", "000208", "000209", "000211", "000212", "000213", "000214", "000215", "000216", "000217", "000218", "000219", "000220", "000221", "000222", "000223", "000224", "000225", "000226", "000227", "000228", "000229", "000230", "000231", "000232", "000233", "000234", "000235", "000236", "000237", "000238", "000239", "000240", "000244", "000245", "000246", "000247", "000248", "000249", "000250", "000251", "000252", "000253", "000254", "000255", "000256", "000257", "000258", "000259", "000260", "000261", "000262", "000263", "000264", "000265", "000266", "000267", "000268", "000269", "000270", "000271", "000272", "000273", "000274", "000275", "000276", "000277", "000278", "000279", "000280", "000282", "000283", "000284", "000285", "000286", "000287", "000288", "000289", "000290", "000291", "000292", "000293", "000294", "000295", "000296", "000299", "000300", "000301", "000302", "000304", "000305", "000306", "000307", "000308", "000309", "000310", "000311", "000312", "000313", "000314", "000315", "000316", "000317", "000318", "000319", "000320", "000321", "000322", "000323", "000324", "000325", "000326", "000327", "000328", "000329", "000330", "000331", "000332", "000333", "000334", "000336", "000337", "000338", "000339", "000340", "000341", "000342", "000343", "000344", "000346", "000348", "000349", "000350", "000351", "000352", "000354", "000355", "000356", "000357", "000358", "000359", "000360", "000361", "000362", "000363", "000364", "000365", "000366", "000368", "000369", "000370", "000372", "000373", "000375", "000377", "000378", "000379", "000380", "000381", "000382", "000383", "000384", "000385", "000386", "000387", "000388", "000390", "000391", "000392", "000393", "000394", "000395", "000396", "000397", "000398", "000399", "000400", "000401", "000402", "000403", "000404", "000405", "000406", "000407", "000408", "000409", "000410", "000411", "000412", "000413", "000414", "000415", "000416", "000417", "000418", "000419", "000420", "000421", "000422", "000423", "000424", "000425", "000426", "000427", "000428", "000429", "000430", "000431", "000432", "000433", "000434", "000435", "000436", "000437", "000438", "000439", "000441", "000442", "000443", "000444", "000445", "000446", "000447", "000448", "000449", "000452", "000453", "000454", "000456", "000457", "000458", "000459", "000460", "000461", "000462", "000463", "000464", "000465", "000466", "000467", "000468", "000470", "000471", "000472", "000473", "000474", "000475", "000476", "000477", "000478", "000479", "000480", "000481", "000483", "000484", "000485", "000486", "000487", "000488", "000489", "000490", "000491", "000492", "000493", "000494", "000495", "000496", "000497", "000498", "000499", "000500", "000501", "000502", "000503", "000504", "000505", "000506", "000507", "000508", "000509", "000510", "000511", "000512", "000513", "000514", "000515", "000516", "000517", "000518", "000519", "000520", "000521", "000522", "000523", "000524", "000525", "000526", "000527", "000528", "000529", "000530", "000531", "000532", "000533", "000534", "000535", "000536", "000537", "000538", "000539", "000540", "000541", "000542", "000543", "000544", "000546", "000547", "000548", "000549", "000550", "000551", "000552", "000553", "000554", "000555", "000556", "000557", "000558", "000559", "000560", "000561", "000562", "000563", "000564", "000565", "000566", "000567", "000568", "000569", "000570", "000571", "000572", "000573", "000574", "000575", "000576", "000577", "000578", "000579", "000580", "000581", "000582", "000583", "000584", "000585", "000586", "000587", "000588", "000589", "000590", "000591", "000592", "000593", "000594", "000595", "000596", "000597", "000598", "000599", "000600", "000601", "000602", "000603", "000604", "000605", "000606", "000607", "000608", "000609", "000610", "000611", "000612", "000613", "000614", "000615", "000616", "000617", "000618", "000619", "000620", "000621", "000622", "000623", "000624", "000625", "000626", "000627", "000628", "000629", "000630", "000631", "000632", "000633", "000634", "000635", "000636", "000637", "000638", "000639", "000640", "000641", "000642", "000643", "000644", "000645", "000646", "000647", "000648", "000649", "000650", "000651", "000652", "000653", "000654", "000655", "000656", "000657", "000658", "000659", "000660", "000661", "000662", "000663", "000664", "000665", "000666", "000667", "000668", "000669", "000670", "000671", "000672", "000673", "000674", "000675", "000676", "000677", "000678", "000679", "000680", "000681", "000682", "000683", "000684", "000685", "000686", "000687", "000688", "000689", "000690", "000691", "000692", "000693", "000694", "000695", "000696", "000697", "000698", "000699", "000700", "000701", "000702", "000703", "000704", "000705", "000706", "000707", "000708", "000709", "000710", "000711", "000712", "000713", "000714", "000715", "000716", "000717", "000718", "000719", "000720", "000721", "000722", "000723", "000724", "000725", "000726", "000727", "000728", "000729", "000730", "000731", "000732", "000733", "000734", "000735", "000736", "000737", "000738", "000739", "000740", "000741", "000742", "000743", "000744", "000745", "000746", "000747", "000748", "000749", "000750", "000751", "000752", "000753", "000754", "000755", "000756", "000757", "000758", "000759", "000760", "000761", "000762", "000763", "000764", "000765", "000766", "000767", "000768", "000769", "000770", "000771", "000772", "000773", "000774", "000775", "000776", "000777", "000778", "000779", "000780", "000781", "000782", "000783", "000784", "000785", "000786", "000787", "000788", "000789", "000790", "000791", "000792", "000793", "000794", "000795", "000796", "000797", "000798", "000799", "000800", "000801", "000802", "000803", "000804", "000805", "000806", "000807", "000808", "000809", "000810", "000811", "000812", "000813", "000814", "000815", "000816", "000817", "000818", "000819", "000820", "000821", "000822", "000823", "000824", "000825", "000826", "000827", "000828", "000829", "000830", "000831", "000832", "000833", "000834", "000835", "000836", "000837", "000838", "000839", "000840", "000841", "000842", "000843", "000844", "000845", "000846", "000847", "000848", "000849", "000850", "000851", "000852", "000853", "000854", "000855", "000856", "000857", "000858", "000859", "000860", "000861", "000862", "000863", "000864", "000865", "000866", "000867", "000868", "001083", "001084", "001085", "001086", "001087", "001088", "001089", "001090", "001091", "001092", "001093", "001094", "001095", "001096", "001097", "001098", "001099", "001100", "001101", "001102", "001103", "001104", "001105", "001106", "001108", "001109", "001110", "001111", "001112", "001113", "001114", "001115", "001116", "001117", "001118", "001119", "001120", "001121", "001122", "001123", "001124", "001125", "001126", "001127", "001128", "001129", "001130", "001131", "001132", "001133", "001134", "001135", "001136", "001137", "001138", "001139", "001140", "001141", "001143", "001144", "001145", "001146", "001147", "001148", "001149", "001150", "001151", "001153", "001154", "001155", "001156", "001157", "001158", "001159", "001160", "001161", "001162", "001163", "001164", "001165", "001166", "001167", "001168", "001169", "001170", "001171", "001172", "001174", "001176", "001177", "001178", "001179", "001180", "001181", "001182", "001183", "001184", "001185", "001186", "001187", "001188", "001189", "001190", "001191", "001192", "001193", "001194", "001195", "001196", "001197", "001198", "001199", "001200", "001201", "001202", "001204", "001205", "001206", "001207", "001208", "001209", "001210", "001211", "001212", "001213", "001214", "001215", "001216", "001217", "001219", "001220", "001221", "001223", "001224", "001226", "001227", "001228", "001229", "001230", "001231", "001232", "001233", "001234", "001235", "001236", "001237", "001238", "001239", "001240", "001241", "001242", "001243", "001244", "001245", "001246", "001247", "001248", "001249", "001250", "001251", "001252", "001253", "001254", "001255", "001257", "001258", "001259", "001260", "001261", "001262", "001263", "001264", "001265", "001266", "001267", "001268", "001270", "001271", "001272", "001273", "001274", "001275", "001276", "001277", "001278", "001279", "001280", "001281", "001283", "001284", "001285", "001286", "001287", "001288", "001289", "001290", "001291", "001292", "001293", "001295", "001296", "001302", "001303", "001304", "001305", "001306", "001307", "001308", "001309", "001310", "001311", "001312", "001313", "001314", "001315", "001316", "001317", "001318", "001319", "001320", "001321", "001322", "001323", "001324", "001325", "001326", "001327", "001328", "001329", "001330", "001332", "001333", "001334", "001335", "001336", "001337", "001338", "001339", "001340", "001341", "001342", "001343", "001344", "001345", "001346", "001348", "001349", "001350", "001351", "001352", "001353", "001354", "001355", "001356", "001357", "001358", "001359", "001361", "001362", "001363", "001364", "001365", "001366", "001367", "001369", "001370", "001371", "001372", "001373", "001374", "001375", "001376", "001377", "001378", "001379", "001380", "001381", "001382", "001383", "001384", "001385", "001386", "001387", "001388", "001389", "001390", "001391", "001392", "001393", "001394", "001395", "001396", "001397", "001398", "001399", "001400", "001401", "001402", "001403", "001404", "001405", "001406", "001407", "001408", "001409", "001410", "001411", "001412", "001413", "001414", "001415", "001416", "001417", "001418", "001419", "001420", "001421", "001422", "001423", "001424", "001425", "001426", "001427", "001428", "001429", "001430", "001431", "001432", "001433", "001434", "001435", "001436", "001437", "001438", "001439", "001440", "001441", "001443", "001444", "001445", "001446", "001447", "001448", "001449", "001450", "001451", "001452", "001453", "001454", "001455", "001456", "001457", "001458", "001459", "001460", "001461", "001462", "001463", "001464", "001465", "001466", "001467", "001468", "001469", "001470", "001471", "001472", "001473", "001474", "001475", "001476", "001482", "001483", "001484", "001485", "001486", "001487", "001488", "001489", "001490", "001491", "001492", "001493", "001494", "001495", "001496", "001497", "001498", "001499", "001500", "001501", "001502", "001503", "001504", "001505", "001506", "001507", "001508", "001509", "001510", "001511", "001512", "001513", "001514", "001515", "001865", "001866", "001867", "001869", "001870", "001871", "001872", "001873", "001874", "001875", "001876", "001877", "001878", "001879", "001880", "001881", "001882", "001883", "001884", "001885", "001886", "001887", "001888", "001889", "001890", "001891", "001892", "001893", "001894", "001895", "001896", "001897", "001899", "001900", "001901", "001902", "001903", "001904", "001905", "001906", "001907", "001908", "001909", "001910", "001911", "001912", "001913", "001914", "001915", "001916", "001917", "001918", "001919", "001920", "001921", "001922", "001923", "001924", "001925", "001926", "001927", "001928", "001930", "001931", "001932", "001933", "001934", "001935", "001936", "001937", "001938", "001939", "001940", "001941", "001942", "001943", "001944", "001946", "001947", "001948", "001949", "001950", "001951", "001952", "001953", "001954", "001955", "001956", "001957", "001958", "001959", "001960", "001961", "001962", "001963", "001964", "001965", "001966", "001967", "001968", "001969", "001970", "001971", "001972", "001973", "001974", "001975", "001976", "001977", "001978", "001979", "001980", "001981", "001982", "001983", "001984", "001985", "001986", "001987", "001988", "001989", "001990", "001991", "001992", "001993", "001994", "001995", "001996", "001997", "001998", "001999", "002000", "002001", "002002", "002003", "002004", "002005", "002006", "002007", "002008", "002009", "002010", "002011", "002012", "002013", "002014", "002015", "002016", "002017", "002018", "002019", "002020", "002021", "002022", "002023", "002024", "002025", "002026", "002027", "002028", "002029", "002030", "002031", "002032", "002033", "002034", "002035", "002036", "002037", "002038", "002039", "002040", "002041", "002042", "002043", "002044", "002045", "002046", "002047", "002048", "002049", "002050", "002051", "002052", "002053", "002054", "002055", "002056", "002057", "002058", "002059", "002060", "002061", "002062", "002063", "002064", "002244", "002245", "002246", "002247", "002248", "002249", "002250", "002251", "002252", "002253", "002254", "002255", "002256", "002257", "002258", "002259", "002260", "002261", "002262", "002263", "002264", "002265", "002266", "002267", "002268", "002269", "002270", "002271", "002272", "002273", "002289", "002290", "002291", "002292", "002293", "002294", "002295", "002296", "002297", "002298", "002299", "002300", "002301", "002302", "002303", "002304", "002305", "002306", "002307", "002308", "002309", "002310", "002311", "002312", "002313", "002314", "002315", "002316", "002317", "002318", "002319", "002320", "002321", "002322", "002323", "002324", "002325", "002326", "002327", "002328", "002329", "002330", "002331", "002332", "002333", "002334", "002335", "002336", "002337", "002338", "002339", "002340", "002341", "002342", "002343", "002344", "002345", "002346", "002347", "002348", "002349", "002350", "002351", "002352", "002353", "002354", "002355", "002356", "002357", "002358", "002359", "002360", "002361", "002362", "002363", "002364", "002365", "002366", "002367", "002368", "002369", "002370", "002371", "002372", "002373", "002374", "002375", "002376", "002377", "002378", "002379", "002380", "002381", "002382", "003211", "003212", "003213", "003214", "003215", "003216", "003217", "003218", "003219", "003220", "003221", "003222", "003223", "003224", "003225", "003226", "003227", "003228", "003229", "003230", "003231", "003232", "003233", "003234", "003235", "003236", "003237", "003238", "003239", "003240", "003241", "003242", "003243", "003244", "003245", "003246", "003247", "003248", "003249", "003250", "003251", "003252", "003253", "003254", "003255", "003256", "003257", "003258", "003259", "003260", "003261", "003279", "003280", "003281", "003282", "003283", "003284", "003285", "003286", "003287", "003288", "003289", "003290", "003291", "003292", "003293", "003294", "003295", "003296", "003297", "003298", "003299", "003300", "003301", "003302", "003303", "003304", "003305", "003306", "003307", "003308", "003309", "003310", "003311", "003312", "003313", "003314", "003315", "003316", "003317", "003318", "003319", "003320", "003321", "003322", "003323", "003324", "003325", "003326", "003327", "003328", "003329", "003330", "003331", "003332", "003333", "003334", "003335", "003336", "003337", "003338", "003339", "003340", "003341", "003342", "003343", "003344", "003345", "003346", "003347", "003348", "003349", "003350", "003351", "003352", "003353", "003354", "003355", "003356", "003357", "003358", "003359", "003360", "003361", "003362", "003363", "003364", "003365", "003366", "003367", "003368", "003369", "003370", "003492", "003493", "003494", "003495", "003496", "003497", "003498", "003499", "003500", "003501", "003502", "003503", "003504", "003505", "003506", "003507", "003508", "003509", "003510", "003511", "003512", "003513", "003514", "003515", "003516", "003517", "003518", "003519", "003520", "003521", "003522", "003523", "003524", "003525", "003526", "003527", "003528", "003529", "003530", "003531", "003532", "003533", "003534", "003535", "003536", "003537", "003538", "003539", "003540", "003541", "003542", "003543", "003544", "003545", "003546", "003547", "003548", "003549", "003550", "003551", "003552", "003553", "003554", "003555", "003556", "003557", "003558", "003559", "003560", "003561", "003562", "003563", "003564", "003565", "003566", "003567", "003568", "003569", "003570", "003571", "003572", "003573", "003574", "003575", "003576", "003577", "003578", "003579", "003580", "003581", "003582", "003583", "003584", "003585", "003586", "003587", "003588", "003589", "003590", "003591", "003592", "003593", "003594", "003595", "003596", "003597", "003598", "003599", "003600", "003601", "003602", "003603", "003604", "003605", "003606", "003607", "003608", "003609", "003610", "003611", "003612", "003613", "003614", "003615", "003616", "003617", "003618", "003619", "003620", "003621", "003622", "003623", "003624", "003625", "003626", "003627", "003628", "003629", "003630", "003631", "003632", "003633", "003634", "003635", "003636", "003637", "003638", "003639", "003640", "004262", "004263", "004264", "004265", "004266", "004267", "004268", "004269", "004270", "004271", "004272", "004273", "004274", "004275", "004276", "004277", "004278", "004279", "004280", "004281", "004282", "004283", "004284", "004285", "004286", "004287", "004288", "004289", "004290", "004291", "004292", "004293", "004294", "004295", "004296", "004297", "004298", "004299", "004300", "004301", "004302", "004303", "004304", "004305", "004306", "004307", "004308", "004309", "004310", "004311", "004312", "004313", "004314", "004315", "004316", "004317", "004318", "004319", "004320", "004321", "004322", "004323", "004324", "004325", "004326", "004327", "004328", "004329", "004330", "004331", "004332", "004333", "004334", "004335", "004336", "004337", "004338", "004339", "004340", "004341", "004342", "004343", "004344", "004345", "004346", "004347", "004348", "004349", "004350", "004351", "004352", "004353", "004354", "004355", "004356", "004357", "004358", "004359", "004360", "004361", "004362", "004363", "004364", "004365", "004366", "004367", "004368", "004369", "004370", "004371", "004372", "004373", "004374", "004375", "004376", "004377", "004378", "004379", "004380", "004381", "004382", "004383", "004386", "004388", "004389", "004394", "004395", "004396", "004397", "004398", "004399", "004400", "004401", "004402", "004403", "004404", "004405", "004406", "004407", "004408", "004409", "004410", "004411", "004412", "004413", "004414", "004415", "004416", "004417", "004418", "004419", "004420", "004421", "004422", "004423", "004424", "004425", "004426", "004427", "004428", "004429", "004430", "004431", "004432", "004433", "004434", "004435", "004436", "004437", "004438", "004439", "004440", "004441", "004442", "004443", "004444", "004445", "004446", "004447", "004448", "004449", "004450", "004451", "004452", "004453", "004454", "004455", "004456", "004457", "004458", "004459", "004460", "004461", "004462", "004463", "004464", "004465", "004466", "004467", "004468", "004469", "004470", "004471", "004472", "004473", "004474", "004475", "004476", "004477", "004478", "004479", "004480", "004481", "004482", "004483", "004484", "004485", "004486", "004487", "004488", "004489", "004490", "004491", "004492", "004493", "004494", "004495", "004496", "004497", "004498", "004499", "004500", "004501", "004502", "004503", "004504", "004505", "004506", "004507", "004508", "004509", "004510", "004511", "004512", "004513", "004514", "004515", "004516", "004517", "004518", "004519", "004520", "004521", "004522", "004523", "004524", "004525", "004526", "004527", "004528", "004529", "004530", "004531", "004532", "004533", "004534", "004535", "004536", "004537", "004538", "004539", "004540", "004541", "004542", "004543", "004544", "004545", "004546", "004547", "004548", "004549", "004550", "004551", "004552", "004553", "004695", "004696", "004697", "004698", "004699", "004700", "004701", "004702", "004703", "004704", "004705", "004706", "004707", "004708", "004709", "004710", "004711", "004712", "004713", "004714", "004715", "004716", "004717", "004718", "004719", "004720", "004721", "004722", "004723", "004724", "004725", "004726", "004727", "004728", "004729", "004730", "004731", "004732", "004733", "004734", "004735", "004754", "004755", "004756", "004757", "004758", "004759", "004760", "004761", "004762", "004763", "004764", "004765", "004766", "004767", "004768", "004769", "004770", "004771", "004772", "004773", "004774", "004775", "004776", "004777", "004778", "004779", "004780", "004781", "004782", "004783", "004784", "004785", "004786", "004787", "004788", "004789", "004790", "004791", "004792", "004793", "004794", "004795", "004796", "004797", "004798", "004799", "004800", "004801", "004802", "004803", "004804", "004805", "004806", "004807", "004808", "004809", "004810", "004811", "004812", "004813", "004814", "004815", "004816", "004817", "004818", "004819", "004820", "004821", "004822", "004823", "004824", "004825", "004826", "004827", "004828", "004829", "004830", "004831", "004832", "004833", "004834", "004835", "004836", "004837", "004838", "004839", "004840", "004841", "004842", "004843", "004844", "004845", "004846", "004847", "004848", "004849", "004850", "004851", "004852", "004853", "004854", "004855", "004856", "004857", "004858", "004859", "004860", "004861", "004862", "004863", "004864", "004865", "004866", "004867", "004868", "004869", "004870", "004871", "004872", "004873", "004874", "004875", "004876", "004877", "004878", "004879", "004880", "004881", "004882", "004883", "004884", "005415", "005416", "005417", "005418", "005419", "005420", "005421", "005422", "005423", "005424", "005425", "005426", "005427", "005428", "005429", "005430", "005431", "005432", "005433", "005434", "005435", "005436", "005437", "005438", "005439", "005440", "005441", "005442", "005443", "005444", "005445", "005446", "005447", "005448", "005449", "005450", "005451", "005452", "005453", "005454", "005455", "005456", "005457", "005458", "005459", "005460", "005461", "005462", "005463", "005464", "005465", "005466", "005467", "005468", "005469", "005470", "005471", "005472", "005473", "005474", "005475", "005476", "005477", "005478", "005479", "005480", "005481", "005482", "005483", "005484", "005485", "005486", "005487", "005488", "005489", "005490", "005491", "005492", "005493", "005494", "005495", "005496", "005497", "005498", "005499", "005500", "005501", "005502", "005503", "005504", "005505", "005506", "005507", "005508", "005509", "005510", "005511", "005512", "005513", "005514", "005515", "005516", "005517", "005518", "005519", "005520", "005521", "005522", "005523", "005524", "005525", "005526", "005527", "005528", "005529", "005530", "005531", "005532", "005533", "005534", "005535", "005536", "005537", "005538", "005539", "005540", "005541", "005542", "005543", "005544", "005545", "005546", "005547", "005548", "005549", "005550", "005551", "005552", "005553", "005554", "005555", "005556", "005557", "005558", "005559", "005560", "005561", "005562", "005563", "005564", "005565", "005566", "005567", "005568", "005569", "005570", "005571", "005572", "005573", "005574", "005576", "005577", "005578", "005579", "005580", "005581", "005582", "005583", "005584", "005585", "005586", "005587", "005588", "005589", "005590", "005591", "005592", "005593", "005596", "005597", "005598", "005599", "005600", "005601", "005602", "005603", "005604", "005605", "005606", "005607", "005608", "005609", "005610", "005611", "005612", "005613", "005614", "005615", "005616", "005617", "005618", "005619", "005620", "005621", "005622", "005623", "005624", "005625", "005626", "005627", "005628", "005629", "005630", "005631", "005632", "005633", "005634", "005635", "005636", "005637", "005638", "005639", "005640", "005641", "005642", "005643", "005644", "005645", "005646", "005647", "005648", "005649", "005650", "005651", "005652", "005653", "005654", "005655", "005656", "005657", "005658", "005659", "005660", "005661", "005662", "005663", "005664", "005665", "005666", "005667", "005668", "005669", "005670", "005671", "005672", "005673", "005674", "005675", "005676", "005677", "005678", "005679", "005680", "005681", "005682", "005683", "005684", "005685", "005686", "005687", "005688", "005689", "005690", "005691", "005692", "005693", "005694", "005695", "005696", "005697", "005698", "005699", "005700", "005701", "005702", "005703", "005704", "005705", "005706", "005707", "005708", "005709", "005710", "005711", "005712", "005713", "005714", "005715", "005716", "005717", "005718", "005719", "005720", "005721", "005722", "005723", "005724", "005725", "005726", "005727", "005728", "005729", "005730", "005731", "005732", "005733", "005734", "005735", "005736", "005737", "005738", "005739", "005740", "005741", "005742", "005743", "005919", "005920", "005921", "005922", "005923", "005924", "005925", "005926", "005927", "005928", "005929", "005930", "005931", "005932", "005933", "005934", "005935", "005936", "005937", "005938", "005939", "005940", "005941", "005942", "005943", "005944", "005945", "005946", "005947", "005948", "005949", "005950", "005951", "005952", "005953", "005954", "005955", "005956", "005957", "005958", "005959", "005960", "005961", "005962", "005963", "005964", "005965", "005966", "005967", "005968", "005969", "005970", "005971", "005972", "005973", "005974", "005975", "005976", "005977", "005978", "005979", "005980", "005981", "005982", "005983", "005984", "005985", "005986", "005987", "005988", "005989", "005990", "005991", "005992", "005993", "005994", "005995", "005996", "005997", "005998", "005999", "006000", "006001", "006002", "006003", "006004", "006005", "006006", "006007", "006008", "006009", "006010", "006011", "006012", "006013", "006014", "006015", "006016", "006017", "006018", "006019", "006020", "006021", "006022", "006023", "006024", "006025", "006026", "006027", "006028", "006029", "006030", "006031", "006032", "006033", "006034", "006035", "006036", "006037", "006038", "006039", "006040", "006041", "006042", "006043", "006044", "006045", "006046", "006047", "006048", "006049", "006050", "006051", "006052", "006053", "006054", "006055", "006056", "006058", "006059", "006060", "006061", "006062", "006063", "006064", "006065", "006066", "006067", "006068", "006069", "006070", "006071", "006072", "006073", "006074", "006075", "006076", "006077", "006078", "006079", "006080", "006081", "006082", "006083", "006084", "006085", "006086", "006087", "006088", "006089", "006090", "006091", "006092", "006093", "006094", "006095", "006096", "006097", "006098", "006099", "006100", "006101", "006102", "006103", "006104", "006105", "006106", "006107", "006108", "006109", "006110", "006111", "006112", "006113", "006114", "006115", "006116", "006117", "006118", "006119", "006120", "006121", "006122", "006123", "006124", "006125", "006126", "006127", "006128", "006129", "006130", "006131", "006132", "006133", "006134", "006135", "006136", "006137", "006138", "006139", "006140", "006141", "006142", "006143", "006144", "006145", "006146", "006147", "006148", "006149", "006150", "006151", "006152", "006153", "006154", "006155", "006156", "006157", "006158", "006159", "006160", "006161", "006162", "006163", "006164", "006165", "006166", "006167", "006168", "006169", "006170", "006171", "006172", "006173", "006174", "006175", "006176", "006177", "006178", "006179", "006180", "006181", "006182", "006183", "006184", "006185", "006186", "006187", "006188", "006189", "006190", "006191", "006192", "006193", "006194", "006195", "006196", "006197", "006198", "006199", "006200", "006201", "006202", "006203", "006204", "006205", "006206", "006207", "006208", "006209", "006210", "006211", "006212", "006213", "006214", "006215", "006216", "006217", "006218", "006219", "006220", "006221", "006222", "006223", "006224", "006225", "006226", "006227", "006228", "006229", "006230", "006231", "006232", "006233", "006234", "006235", "006236", "006237", "006238", "006239", "006240", "006241", "006242", "006243", "006244", "006245", "006246", "006248", "006249", "006250", "006251", "006252", "006253", "006254", "006255", "006256", "006257", "006258", "006259", "006260", "006261", "006262", "006263", "006264", "006265", "006266", "006267", "006268", "006269", "006270", "006271", "006272", "006273", "006274", "006275", "006276", "006277", "006278", "006279", "006280", "006281", "006282", "006283", "006284", "006285", "006286", "006287", "006288", "006289", "006290", "006291", "006292", "006293", "006294", "006295", "006296", "006297", "006298", "006299", "006300", "006301", "006302", "006303", "006304", "006305", "006306", "006307", "006308", "006309", "006310", "006311", "006312", "006313", "006314", "006315", "006316", "006317", "006318", "006319", "006320", "006321", "006322", "006323", "006324", "006325", "006326", "006327", "006328", "006329", "006330", "006331", "006332", "006333", "006334", "006335", "006336", "006337", "006338", "006339", "006340", "006341", "006342", "006343", "006344", "006345", "006346", "006347", "006348", "006349", "006350", "006351", "006352", "006353", "006354", "006355", "006356", "006357", "006358", "006359", "006360", "006361", "006362", "006363", "006364", "006365", "006366", "006367", "006368", "006369", "006370", "006371", "006372", "006373", "006374", "006375", "006376", "006377", "006378", "006379", "006380", "006381", "006382", "006383", "006384", "006385", "006386", "006387", "006388", "006389", "006390", "006391", "006392", "006393", "006394", "006395", "006396", "006400", "006401", "006402", "006403", "006404", "006405", "006406", "006407", "006408", "006409", "006410", "006411", "006412", "006413", "006414", "006415", "006416", "006417", "006418", "006419", "006420", "006421", "006422", "006423", "006424", "006425", "006426", "006427", "006428", "006429", "006430", "006431", "006432", "006433", "006434", "006435", "006436", "006437", "006438", "006439", "006440", "006441", "006442", "006443", "006444", "006445", "006446", "006447", "006448", "006449", "006450", "006451", "006452", "006453", "006454", "006455", "006456", "006457", "006458", "006459", "006460", "006461", "006462", "006463", "006464", "006465", "006466", "006467", "006468", "006469", "006470", "006471", "006472", "006473", "006474", "006475", "006476", "006477", "006478", "006479", "006480", "006481", "006482", "006483", "006484", "006485", "006486", "006487", "006488", "006489", "006490", "006491", "006492", "006493", "006494", "006495", "006496", "006497", "006498", "006499", "006500", "006501", "006502", "006503", "006504", "006505", "006506", "006507", "006508", "006509", "006510", "006511", "006512", "006513", "006514", "006515", "006516", "006519", "006520", "006521", "006522", "006523", "006524", "006525", "006526", "006527", "006528", "006529", "006530", "006531", "006532", "006533", "006534", "006535", "006536", "006537", "006538", "006539", "006540", "006541", "006542", "006543", "006544", "006545", "006546", "006547", "006548", "006549", "006550", "006551", "006552", "006553", "006554", "006555", "006556", "006557", "006558", "006559", "006560", "006561", "006562", "006563", "006564", "006565", "006566", "006567", "006568", "006569", "006570", "006571", "006572", "006573", "006574", "006575", "006576", "006577", "006578", "006579", "006580", "006581", "006582", "006583", "006584", "006585", "006586", "006587", "006588", "006589", "006590", "006591", "006592", "006593", "006594", "006595", "006596", "006597", "006598", "006600", "006602", "006603", "006604", "006605", "006606", "006607", "006608", "006609", "006610", "006611", "006612", "006613", "006614", "006615", "006616", "006617", "006618", "006619", "006620", "006621", "006622", "006623", "006624", "006625", "006626", "006627", "006628", "006629", "006630", "006631", "006632", "006633", "006634", "006635", "006636", "006637", "006638", "006639", "006640", "006641", "006642", "006643", "006644", "006645", "006646", "006647", "006648", "006649", "006650", "006651", "006652", "006653", "006654", "006655", "006656", "006657", "006658", "006659", "006660", "006661", "006662", "006663", "006664", "006665", "006666", "006667", "006668", "006669", "006670", "006671", "006672", "006673", "006674", "006675", "006676", "006677", "006678", "006679", "006680", "006681", "006682", "006683", "006684", "006685", "006686", "006687", "006688", "006689", "006690", "006691", "006692", "006693", "006694", "006695", "006696", "006698", "006699", "006700", "006701", "006702", "006703", "006704", "006705", "006706", "006707", "006708", "006709", "006710", "006711", "006712", "006713", "006714", "006715", "006716", "006717", "006718", "006719", "006720", "006721", "006722", "006723", "006724", "006725", "006726", "006727", "006728", "006729", "006730", "006731", "006732", "006733", "006734", "006735", "006736", "006737", "006738", "006739", "006740", "006741", "006742", "006743", "006744", "006745", "006746", "006747", "006748", "006749", "006750", "006751", "006752", "006753", "006754", "006755", "006756", "006757", "006758", "006759", "006760", "006761", "006762", "006763", "006764", "006765", "006766", "006767", "006768", "006769", "006770", "006771", "006772", "006773", "006774", "006775", "006776", "006777", "006778", "006779", "006780", "006781", "006782", "006783", "006784", "006785", "006786", "006787", "006788", "006789", "006790", "006791", "006792", "006793", "006794", "006795", "006796", "006797", "006798", "006799", "006800", "006801", "006802", "006803", "006804", "006805", "006806", "006807", "006808", "006809", "006810", "006811", "006812", "006813", "006814", "006815", "006816", "007257", "007258", "007259", "007260", "007261", "007262", "007263", "007264", "007265", "007266", "007267", "007268", "007269", "007270", "007271", "007272", "007273", "007274", "007275", "007276", "007277", "007278", "007279", "007280", "007281", "007282", "007283", "007284", "007285", "007286", "007287", "007288", "007289", "007290", "007291", "007292", "007293", "007294", "007295", "007296", "007297", "007298", "007299", "007300", "007301", "007302", "007303", "007304", "007305", "007306", "007307", "007308", "007309", "007310", "007311", "007312", "007313", "007314", "007315", "007316", "007317", "007318", "007319", "007320", "007321", "007322", "007323", "007324", "007325", "007326", "007327", "007328", "007329", "007330", "007331", "007332", "007333", "007334", "007335", "007336", "007337", "007338", "007339", "007340", "007341", "007342", "007343", "007344", "007345", "007346", "007347", "007348", "007349", "007350", "007351", "007352", "007353", "007354", "007355", "007356", "007357", "007358", "007359", "007360", "007361", "007362", "007363", "007364", "007365", "007366", "007367", "007368", "007369", "007370", "007371", "007372", "007373", "007374", "007375", "007376", "007383", "007384", "007385", "007386", "007387", "007388", "007389", "007390", "007391", "007392", "007393", "007394", "007395", "007396", "007397", "007398", "007399", "007400", "007401", "007402", "007403", "007404", "007405", "007406", "007407", "007408", "007409", "007410", "007411", "007412", "007413", "007414", "007415", "007416", "007417", "007418", "007419", "007420", "007421", "007422", "007423", "007424", "007425", "007426", "007427", "007428", "007429", "007430", "007431", "007432", "007433", "007434", "007435", "007436", "007437", "007438", "007439", "007440", "007441", "007442", "007443", "007444", "007445", "007446", "007447", "007448", "007449", "007450", "007451", "007452", "007453", "007454", "007455", "007457", "007458", "007459", "007460", "007461", "007462", "007463", "007464", "007465", "007466", "007467", "007468", "007469", "007470", "007471", "007472", "007473", "007474", "007475", "007476", "007477", "007478", "007479", "007480", "007481", "007482", "007483", "007484", "007485", "007486", "007487", "007488", "007489", "007490", "007491", "007492", "007493", "007494", "007495", "007496", "007497", "007498", "007499", "007500", "007501", "007502", "007503", "007504", "007505", "007506", "007507", "007508", "007509", "007510", "007511", "007512", "007513", "007514", "007515", "007516", "007517", "007518", "007519", "007520", "007521", "007522", "007523", "007524", "007525", "007526", "007527", "007528", "007529", "007530", "007531", "007532", "007533", "007534", "007535", "007536", "007537", "007538", "007539", "007540", "007541", "007542", "007543", "007544", "007545", "007546", "007547", "007548", "007549", "007550", "007551", "007552", "007553", "007554", "007555", "007556", "007557", "007558", "007559", "007560", "007561", "007562", "007563", "007564", "007565", "007566", "007567", "007568", "007569", "007570", "007571", "007572", "007573", "007574", "007575", "007576", "007577", "007578", "007579", "007580", "007581", "007582", "007583", "007584", "007585", "007586", "007587", "007588", "007589", "007590", "007591", "007592", "007593", "007594", "007595", "007596", "007597", "007598", "007599", "007600", "007601", "007602", "007603", "007604", "007605", "007606", "007607", "007608", "007609", "007610", "007611", "007612", "007613", "007614", "007615", "007616", "007617", "007618", "007619", "007620", "007621", "007622", "007623", "007624", "007625", "008477", "008478", "008479", "008480", "008481", "008482", "008483", "008484", "008485", "008486", "008487", "008488", "008489", "008490", "008491", "008492", "008493", "008494", "008495", "008496", "008497", "008498", "008499", "008500", "008501", "008502", "008503", "008504", "008505", "008506", "008507", "008508", "008509", "008510", "008511", "008512", "008513", "008514", "008515", "008516", "008517", "008518", "008519", "008520", "008521", "008522", "008523", "008524", "008525", "008526", "008527", "008528", "008529", "008530", "008531", "008532", "008533", "008534", "008535", "008536", "008537", "008538", "008539", "008540", "008541", "008542", "008543", "008544", "008545", "008546", "008547", "008548", "008549", "008550", "008551", "008552", "008553", "008554", "008555", "008556", "008557", "008558", "008559", "008560", "008561", "008562", "008563", "008564", "008565", "008566", "008567", "008568", "008569", "008570", "008571", "008572", "008573", "008574", "008575", "008576", "008577", "008578", "008579", "008580", "008581", "008582", "008583", "008584", "008585", "008586", "008587", "008588", "008589", "008590", "008591", "008592", "008593", "008594", "008595", "008596", "008597", "008598", "008599", "008600", "008601", "008602", "008603", "008604", "008605", "008606", "008607", "008608", "008609", "008610", "008611", "008612", "008613", "008614", "008615", "008617", "008618", "008619", "008620", "008621", "008622", "008623", "008624", "008625", "008626", "008627", "008628", "008629", "008630", "008631", "008632", "008633", "008634", "008635", "008636", "008637", "008638", "008639", "008640", "008641", "008642", "008643", "008644", "008645", "008646", "008647", "008648", "008649", "008650", "008651", "008652", "008653", "008654", "008655", "008656", "008657", "008658", "008659", "008660", "008661", "008662", "008663", "008664", "008665", "008666", "008667", "008668", "008669", "008670", "008671", "008672", "008673", "008674", "008675", "008676", "008677", "008678", "008679", "008680", "008681", "008682", "008683", "008684", "008685", "008686", "008687", "008688", "008689", "008690", "008691", "008692", "008693", "008694", "008695", "008696", "008697", "008698", "008699", "008700", "008701", "008702", "008703", "008704", "008705", "008706", "008707", "008708", "008709", "008710", "008711", "008712", "008713", "008714", "008715", "008716", "008717", "008718", "008720", "008721", "008722", "008723", "008724", "008725", "008726", "008727", "008732", "008733", "008734", "008735", "008736", "008737", "008738", "008739", "008740", "008741", "008742", "008743", "008744", "008745", "008754", "008755", "008757", "008758", "008759", "008760", "008761", "008762", "008763", "008764", "008765", "008766", "008767", "008768", "008769", "008770", "008771", "008772", "008773", "008774", "008775", "008776", "008777", "008778", "008786", "008787", "008788", "008789", "008790", "008793", "008794", "008795", "008796", "008797", "008798", "008799", "008800", "008801", "008802", "008803", "008804", "008805", "008806", "008807", "008808", "008809", "008810", "008811", "008812", "008813", "008814", "008815", "008816", "008817", "008818", "008819", "008820", "008821", "008822", "008823", "008824", "008825", "008826", "008827", "008828", "008829", "008830", "008831", "008832", "008833", "008834", "008835", "008836", "008837", "008838", "008839", "008840", "008841", "008842", "008843", "008844", "008845", "008846", "008847", "008848", "008849", "008850", "008851", "008852", "008853", "008854", "008855", "008856", "008857", "008858", "008859", "008860", "008861", "008862", "008863", "008864", "008865", "008866", "008867", "008868", "008869", "008870", "008871", "008872", "008873", "008874", "008875", "008876", "008877", "008878", "008879", "008880", "008881", "008882", "008883", "008884", "008885", "008886", "008887", "008888", "008889", "008890", "008891", "008892", "008893", "008894", "008895", "008896", "008897", "008898", "008899", "008900", "008901", "008902", "008903", "008904", "008905", "008906", "008907", "008908", "008909", "008910", "008911", "008912", "008913", "008914", "008915", "008916", "008917", "008918", "008919", "008920", "008921", "008922", "008923", "008924", "008925", "008926", "008927", "008928", "008929", "008930", "008931", "008932", "008933", "008934", "008935", "008936", "008937", "008938", "008939", "008940", "008941", "008942", "008943", "008944", "008945", "008946", "008947", "008948", "008949", "008950", "008951", "008952", "008953", "008954", "008955", "008956", "008957", "008958", "008959", "008960", "008961", "008962", "008963", "008964", "008965", "008966", "008967", "008968", "008969", "008970", "008971", "008972", "008973", "008974", "008975", "008976", "008977", "008978", "008979", "008980", "008982", "008983", "008984", "008985", "008986", "008987", "008988", "008989", "008990", "008991", "008992", "008993", "008994", "008995", "008996", "008997", "008998", "008999", "009000", "009001", "009002", "009003", "009004", "009005", "009006", "009007", "009008", "009009", "009010", "009011", "009012", "009013", "009014", "009015", "009016", "009017", "009018", "009019", "009020", "009021", "009022", "009023", "009024", "009025", "009026", "009027", "009028", "009029", "009030", "009031", "009032", "009033", "009034", "009035", "009036", "009037", "009038", "009039", "009040", "009041", "009042", "009043", "009044", "009045", "009046", "009047", "009048", "009049", "009050", "009051", "009052", "009053", "009054", "009055", "009056", "009057", "009058", "009059", "009060", "009061", "009062", "009063", "009064", "009065", "009066", "009067", "009068", "009069", "009070", "009071", "009072", "009073", "009074", "009075", "009076", "009077", "009078", "009079", "009080", "009081", "009082", "009083", "009084", "009085", "009086", "009087", "009088", "009089", "009090", "009091", "009092", "009093", "009094", "009095", "009096", "009097", "009098", "009099", "009100", "009101", "009102", "009103", "009104", "009105", "009106", "009107", "009108", "009109", "009110", "009111", "009112", "009113", "009114", "009115", "009116", "009117", "009118", "009119", "009120", "009121", "009122", "009123", "009124", "009125", "009126", "009127", "009128", "009129", "009130", "009131", "009132", "009133", "009134", "009135", "009136", "009137", "009138", "009139", "009140", "009141", "009142", "009143", "009144", "009145", "009146", "009147", "009148", "009149", "009150", "009692", "009693", "009694", "009695", "009696", "009697", "009698", "009699", "009702", "009703", "009704", "009705", "009706", "009707", "009708", "009709", "009710", "009711", "009712", "009713", "009714", "009715", "009716", "009717", "009718", "009719", "009720", "009721", "009722", "009723", "009724", "009725", "009726", "009727", "009728", "009729", "009730", "009731", "009732", "009733", "009734", "009735", "009736", "009737", "009738", "009739", "009740", "009741", "009742", "009743", "009744", "009745", "009746", "009747", "009748", "009749", "009750", "009751", "009752", "009753", "009754", "009755", "009756", "009757", "009758", "009759", "009760", "009761", "009762", "009763", "009764", "009765", "009766", "009767", "009768", "009769", "009770", "009771", "009772", "009773", "009774", "009775", "009776", "009777", "009778", "009779", "009780", "009781", "009782", "009783", "009784", "009785", "009786", "009787", "009788", "009789", "009790", "009791", "009792", "009793", "009794", "009795", "009796", "009797", "009798", "009799", "009800", "009801", "009802", "009803", "009804", "009805", "009806", "009807", "009808", "009809", "009810", "009811", "009812", "009813", "009814", "009815", "009816", "009817", "009818", "009819", "009820", "009821", "009822", "009823", "009824", "009825", "009826", "009827", "009828", "009829", "009830", "009831", "009832", "009833", "009834", "009835", "009836", "009837", "009838", "009839", "009840", "009841", "009842", "009843", "009844", "009845", "009846", "009847", "009848", "009849", "009850", "009851", "009852", "009853", "009854", "009855", "009856", "009857", "009858", "009859", "009860", "009861", "009862", "009863", "009864", "009865", "009866", "009867", "009868", "009869", "009870", "009871", "009872", "009873", "009874", "009875", "009876", "009877", "009878", "009879", "009880", "009881", "009882", "009883", "009884", "009885", "009886", "009887", "009888", "009889", "009890", "009891", "009892", "009893", "009894", "009895", "009896", "009897", "009898", "009899", "009900", "009902", "009903", "009904", "009905", "009906", "009907", "009908", "009909", "009910", "009911", "009912", "009913", "009914", "009915", "009916", "009917", "009918", "009919", "009920", "009921", "009922", "009923", "009924", "009925", "009926", "009927", "009928", "009929", "009930", "009931", "009932", "009933", "009934", "009935", "009936", "009937", "009938", "009939", "009940", "009941", "009942", "009943", "009944", "009945", "009946", "009947", "009948", "009949", "009950", "009951", "009952", "009953", "009954", "009955", "009956", "009957", "009958", "009959", "009960", "009961", "009962", "009963", "009964", "009965", "009966", "009967", "009968", "009969", "009970", "009971", "009972", "009973", "009974", "009975", "009976", "009977", "009978", "009979", "009980", "009981", "009982", "009983", "009984", "009985", "009986", "009987", "009988", "009989", "009990", "009991", "009992", "009993", "009994", "009995", "009996", "009997", "009998", "009999", "010000", "010001", "010002", "010003", "010004", "010005", "010006", "010007", "010008", "010009", "010010", "010011", "010012", "010013", "010014", "010015", "010016", "010017", "010018", "010019", "010020", "010021", "010022", "010023", "010024", "010025", "010026", "010027", "010028", "010029", "010030", "010031", "010032", "010033", "010034", "010035", "010036", "010037", "010038", "010039", "010040", "010041", "010042", "010043", "010044", "010045", "010046", "010047", "010048", "010049", "010050", "010051", "010052", "010053", "010054", "010055", "010056", "010057", "010058", "010059", "010060", "010061", "010062", "010063", "010064", "010065", "010066", "010067", "010068", "010069", "010070", "010071", "010072", "010073", "010074", "010075", "010076", "010077", "010078", "010079", "010080", "010081", "010082", "010083", "010084", "010085", "010086", "010087", "010088", "010089", "010090", "010091", "010092", "010093", "010094", "010095", "010096", "010097", "010098", "010099", "010100", "010102", "010103", "010104", "010105", "010107", "010108", "010109", "010110", "010111", "010112", "010113", "010114", "010115", "010116", "010117", "010118", "010119", "010120", "010121", "010122", "010123", "010124", "010125", "010126", "010127", "010128", "010129", "010130", "010131", "010132", "010133", "010134", "010135", "010136", "010137", "010138", "010139", "010140", "010141", "010142", "010143", "010144", "010145", "010146", "010147", "010148", "010149", "010150", "010151", "010152", "010153", "010154", "010155", "010156", "010157", "010158", "010159", "010160", "010161", "010162", "010163", "010164", "010165", "010166", "010167", "010168", "010169", "010170", "010171", "010172", "010173", "010174", "010175", "010176", "010177", "010178", "010179", "010180", "010181", "010182", "010183", "010184", "010185", "010186", "010187", "010188", "010189", "010190", "010191", "010192", "010193", "010194", "010195", "010196", "010197", "010198", "010199", "010200", "010201", "010202", "010203", "010204", "010205", "010206", "010207", "010208", "010209", "010210", "010211", "010212", "010213", "010214", "010215", "010216", "010217", "010218", "010219", "010220", "010221", "010222", "010223", "010224", "010225", "010226", "010227", "010228", "010229", "010230", "010231", "010232", "010233", "010234", "010235", "010236", "010237", "010238", "010239", "010240", "010241", "010242", "010243", "010244", "010245", "010246", "010247", "010248", "010249", "010250", "010251", "010252", "010253", "010254", "010255", "010256", "010257", "010258", "010259", "010260", "010261", "010262", "010263", "010264", "010265", "010266", "010267", "010268", "010269", "010270", "010271", "010272", "010273", "010274", "010275", "010276", "010277", "010278", "010279", "010280", "010281", "010282", "010283", "010284", "010285", "010286", "010287", "010288", "010289", "010290", "010292", "010293", "010294", "010295", "010296", "010297", "010298", "010299", "010300", "010301", "010302", "010303", "010304", "010305", "010306", "010307", "010308", "010309", "010310", "010311", "010312", "010313", "010314", "010315", "010316", "010317", "010318", "010319", "010320", "010321", "010322", "010323", "010324", "010325", "010326", "010327", "010328", "010329", "010330", "010331", "010332", "010333", "010334", "010335", "010336", "010337", "010338", "010339", "010340", "010341", "010342", "010343", "010344", "010345", "010346", "010347", "010348", "010349", "010350", "010351", "010352", "010353", "010354", "010355", "010356", "010357", "010358", "010359", "010360", "010361", "010362", "010363", "010364", "010365", "010366", "010367", "010368", "010369", "010370", "010371", "010372", "010373", "010374", "010375", "010376", "010377", "010378", "010379", "010380", "010381", "010382", "010383", "010384", "010385", "010386", "010387", "010388", "010389", "010390", "010391", "010392", "010393", "010394", "010395", "010396", "010397", "010398", "010399", "010400", "010401", "010402", "010403", "010404", "010405", "010406", "010407", "010408", "010409", "010410", "010411", "010418", "010419", "010420", "010421", "010422", "010423", "010424", "010425", "010426", "010427", "010428", "010429", "010430", "010431", "010432", "010433", "010434", "010435", "010436", "010437", "010438", "010439", "010440", "010441", "010442", "010443", "010444", "010445", "010446", "010447", "010448", "010449", "010450", "010451", "010452", "010453", "010454", "010455", "010456", "010457", "010458", "010459", "010460", "010461", "010462", "010463", "010464", "010465", "010466", "010467", "010468", "010469", "010470", "010471", "010472", "010473", "010474", "010475", "010476", "010477", "010478", "010479", "010480", "010946", "010947", "010948", "010949", "010950", "010951", "010952", "010955", "010956", "010957", "010958", "010959", "010960", "010961", "010962", "010963", "010964", "010965", "010966", "010967", "010968", "010969", "010970", "010971", "010972", "010973", "010974", "010975", "010976", "010977", "010978", "010979", "010980", "010981", "010982", "010983", "010984", "010985", "010986", "010987", "010988", "010989", "010990", "010991", "010992", "010993", "010994", "010995", "010996", "010997", "010998", "010999", "011000", "011001", "011002", "011003", "011004", "011005", "011006", "011007", "011008", "011009", "011010", "011011", "011012", "011013", "011014", "011015", "011016", "011017", "011018", "011019", "011020", "011021", "011022", "011023", "011024", "011025", "011026", "011027", "011028", "011029", "011030", "011031", "011032", "011033", "011034", "011035", "011036", "011037", "011038", "011039", "011040", "011041", "011042", "011043", "011044", "011045", "011046", "011047", "011048", "011049", "011050", "011051", "011052", "011053", "011054", "011055", "011056", "011057", "011058", "011059", "011060", "011061", "011062", "011063", "011064", "011065", "011066", "011067", "011068", "011069", "011070", "011071", "011072", "011073", "011074", "011075", "011076", "011077", "011078", "011079", "011080", "011081", "011082", "011083", "011084", "011085", "011086", "011087", "011088", "011089", "011090", "011091", "011092", "011093", "011094", "011095", "011096", "011097", "011098", "011099", "011100", "011101", "011102", "011103", "011104", "011105", "011106", "011107", "011108", "011109", "011110", "011111", "011112", "011113", "011114", "011115", "011116", "011117", "011118", "011119", "011120", "011121", "011122", "011123", "011124", "011125", "011126", "011127", "011128", "011129", "011130", "011131", "011132", "011133", "011134", "011135", "011136", "011137", "011138", "011139", "011140", "011141", "011142", "011143", "011144", "011145", "011146", "011147", "011148", "011149", "011150", "011265", "011266", "011267", "011268", "011269", "011270", "011271", "011272", "011273", "011274", "011275", "011276", "011277", "011278", "011279", "011280", "011281", "011282", "011283", "011284", "011285", "011286", "011287", "011288", "011289", "011290", "011291", "011292", "011293", "011294", "011295", "011296", "011297", "011298", "011299", "011300", "011301", "011302", "011303", "011304", "011305", "011306", "011307", "011308", "011309", "011310", "011311", "011312", "011313", "011314", "011315", "011316", "011317", "011318", "011319", "011320", "011321", "011322", "011323", "011324", "011325", "011326", "011327", "011328", "011329", "011330", "011331", "011332", "011333", "011334", "011335", "011336", "011337", "011338", "011339", "011340", "011341", "011342", "011343", "011344", "011345", "011346", "011347", "011348", "011349", "011350", "011351", "011352", "011353", "011354", "011355", "011356", "011357", "011358", "011359", "011360", "011361", "011362", "011363", "011364", "011365", "011366", "011367", "011368", "011369", "011370", "011371", "011376", "011377", "011378", "011379", "011380", "011381", "011382", "011383", "011384", "011385", "011386", "011387", "011388", "011389", "011390", "011391", "011392", "011393", "011394", "011395", "011396", "011397", "011398", "011399", "011400", "011401", "011402", "011403", "011404", "011405", "011406", "011407", "011408", "011409", "011410", "011411", "011412", "011413", "011414", "011415", "011416", "011417", "011418", "011419", "011420", "011421", "011422", "011423", "011424", "011425", "011426", "011427", "011428", "011429", "011430", "011431", "011432", "011433", "011434", "011435", "011436", "011437", "011438", "011439", "011440", "011441", "011442", "011443", "011444", "011445", "011446", "011447", "011448", "011449", "011450", "012092", "012093", "012094", "012095", "012096", "012097", "012098", "012099", "012100", "012101", "012102", "012103", "012104", "012105", "012106", "012107", "012108", "012109", "012110", "012111", "012112", "012113", "012114", "012115", "012116", "012117", "012118", "012119", "012120", "012121", "012122", "012123", "012124", "012125", "012126", "012127", "012128", "012129", "012130", "012131", "012132", "012133", "012134", "012135", "012136", "012137", "012138", "012139", "012140", "012141", "012142", "012143", "012144", "012145", "012146", "012147", "012148", "012149", "012150", "012151", "012152", "012153", "012154", "012155", "012156", "012157", "012158", "012159", "012160", "012161", "012162", "012163", "012164", "012165", "012166", "012167", "012168", "012169", "012170", "012171", "012172", "012173", "012174", "012175", "012176", "012177", "012178", "012179", "012180", "012181", "012182", "012183", "012184", "012185", "012186", "012187", "012188", "012189", "012190", "012191", "012192", "012193", "012194", "012195", "012196", "012197", "012198", "012199", "012200", "012201", "012202", "012203", "012204", "012205", "012206", "012207", "012208", "012209", "012210", "012211", "012212", "012213", "012214", "012215", "012216", "012217", "012218", "012219", "012220", "012221", "012222", "012223", "012224", "012225", "012226", "012227", "012228", "012229", "012230", "012231", "012232", "012233", "012234", "012235", "012236", "012237", "012238", "012239", "012240", "012241", "012242", "012243", "012244", "012245", "012246", "012247", "012248", "012249", "012250", "012251", "012252", "012253", "012254", "012255", "012256", "012257", "012258", "012260", "012261", "012262", "012263", "012264", "012265", "012266", "012268", "012269", "012270", "012271", "012272", "012273", "012274", "012275", "012276", "012277", "012278", "012279", "012280", "012281", "012282", "012283", "012284", "012285", "012286", "012287", "012288", "012289", "012290", "012541", "012542", "012543", "012544", "012545", "012546", "012547", "012548", "012549", "012550", "012551", "012552", "012553", "012554", "012555", "012556", "012557", "012558", "012559", "012560", "012561", "012562", "012563", "012564", "012565", "012566", "012567", "012568", "012569", "012570", "012571", "012572", "012573", "012574", "012575", "012576", "012577", "012578", "012579", "012580", "012581", "012582", "012583", "012584", "012585", "012586", "012587", "012588", "012589", "012590", "012591", "012592", "012593", "012594", "012595", "012596", "012597", "012598", "012599", "012600", "012601", "012602", "012603", "012604", "012605", "012606", "012607", "012608", "012609", "012610", "012611", "012612", "012613", "012614", "012615", "012616", "012617", "012618", "012619", "012620", "012621", "012622", "012623", "012624", "012625", "012626", "012627", "012628", "012629", "012630", "012631", "012632", "012633", "012634", "012635", "012636", "012637", "012638", "012639", "012640", "012641", "012642", "012643", "012644", "012645", "012646", "012647", "012648", "012649", "012650", "012651", "012652", "012653", "012654", "012655", "012656", "012657", "012658", "012659", "012660", "012661", "012662", "012663", "012664", "012665", "012666", "012667", "012668", "012669", "012670", "012671", "012672", "012673", "012674", "012675", "012676", "012677", "012678", "012679", "012680", "012681", "012682", "012683", "012684", "012685", "012686", "012687", "012688", "012689", "012690", "012691", "012692", "013006", "013007", "013008", "013009", "013010", "013011", "013012", "013013", "013014", "013015", "013016", "013017", "013018", "013019", "013020", "013021", "013022", "013023", "013024", "013025", "013026", "013027", "013028", "013029", "013030", "013031", "013032", "013033", "013034", "013035", "013036", "013037", "013038", "013039", "013040", "013041", "013042", "013043", "013044", "013045", "013046", "013047", "013048", "013049", "013050", "013051", "013052", "013053", "013054", "013055", "013056", "013057", "013058", "013059", "013060", "013061", "013062", "013063", "013064", "013065", "013066", "013067", "013068", "013069", "013070", "013071", "013072", "013073", "013074", "013075", "013076", "013077", "013078", "013079", "013080", "013081", "013082", "013083", "013084", "013085", "013086", "013087", "013088", "013089", "013090", "013091", "013092", "013093", "013094", "013095", "013096", "013097", "013098", "013099", "013100", "013101", "013102", "013103", "013104", "013105", "013106", "013107", "013108", "013109", "013110", "013111", "013112", "013113", "013114", "013115", "013116", "013117", "013118", "013119", "013120", "013121", "013122", "013123", "013124", "013125", "013126", "013127", "013128", "013129", "013130", "013131", "013132", "013134", "013135", "013136", "013141", "013143", "013144", "013145", "013146", "013147", "013148", "013149", "013150", "013151", "013152", "013153", "013154", "013155", "013156", "013157", "013158", "013159", "013160", "013161", "013162", "013163", "013164", "013165", "013166", "013167", "013168", "013169", "013170", "013171", "013172", "013173", "013174", "013175", "013176", "013177", "013178", "013179", "013180", "013181", "013182", "013183", "013184", "013185", "013186", "013187", "013188", "013189", "013190", "013191", "013192", "013193", "013194", "013195", "013196", "013197", "013198", "013199", "013200", "013201", "013202", "013203", "013204", "013205", "013206", "013207", "013208", "013209", "013555", "013556", "013557", "013558", "013559", "013560", "013561", "013562", "013563", "013564", "013565", "013566", "013567", "013568", "013569", "013570", "013571", "013572", "013573", "013574", "013575", "013576", "013577", "013578", "013579", "013580", "013581", "013582", "013583", "013584", "013585", "013586", "013587", "013588", "013589", "013590", "013591", "013592", "013593", "013594", "013595", "013596", "013597", "013598", "013599", "013600", "013601", "013602", "013603", "013604", "013605", "013606", "013607", "013608", "013609", "013610", "013611", "013612", "013613", "013614", "013615", "013616", "013617", "013618", "013619", "013620", "013621", "013622", "013623", "013624", "013625", "013626", "013627", "013628", "013629", "013630", "013631", "013632", "013633", "013634", "013635", "013636", "013637", "013638", "013639", "013640", "013641", "013642", "013643", "013644", "013645", "013646", "013647", "013648", "013649", "013650", "013651", "013652", "013653", "013654", "013655", "013656", "013657", "013658", "013659", "013660", "013661", "013662", "013663", "013664", "013665", "013666", "013667", "013668", "013669", "013670", "013671", "013672", "013673", "013674", "013675", "013676", "013677", "013678", "013679", "013680", "013681", "013682", "013683", "013684", "013685", "013686", "013687", "013688", "013689", "013690", "013692", "013693", "013694", "013695", "013696", "013697", "013699", "014160", "014161", "014162", "014163", "014164", "014165", "014166", "014167", "014168", "014169", "014170", "014171", "014172", "014173", "014174", "014175", "014176", "014177", "014178", "014179", "014180", "014181", "014182", "014183", "014184", "014185", "014186", "014187", "014188", "014189", "014190", "014191", "014192", "014193", "014194", "014195", "014196", "014197", "014198", "014199", "014200", "014201", "014202", "014203", "014204", "014205", "014206", "014207", "014208", "014209", "014210", "014211", "014212", "014213", "014214", "014215", "014216", "014217", "014218", "014219", "014220", "014221", "014222", "014223", "014224", "014225", "014226", "014227", "014228", "014229", "014230", "014231", "014232", "014233", "014234", "014235", "014236", "014237", "014238", "014239", "014240", "014241", "014242", "014243", "014244", "014245", "014246", "014247", "014248", "014249", "014438", "014439", "014440", "014441", "014442", "014443", "014444", "014445", "014446", "014447", "014448", "014449", "014450", "014451", "014452", "014453", "014454", "014455", "014456", "014457", "014458", "014459", "014460", "014461", "014462", "014463", "014464", "014465", "014466", "014467", "014468", "014469", "014470", "014471", "014472", "014473", "014474", "014475", "014476", "014477", "014479", "014480", "014481", "014482", "014483", "014484", "014485", "014486", "014487", "014488", "014489", "014490", "014491", "014492", "014493", "014494", "014495", "014496", "014497", "014498", "014499", "014500", "014501", "014502", "014503", "014504", "014505", "014506", "014507", "014508", "014509", "014510", "014511", "014512", "014513", "014514", "014515", "014516", "014517", "014518", "014519", "014520", "014521", "014522", "014523", "014524", "014525", "014526", "014527", "014528", "014529", "014530", "014531", "014532", "014533", "014534", "014535", "014536", "014537", "014538", "014539", "014540", "014541", "014542", "014543", "014544", "014545", "014546", "014547", "014548", "014549", "014550", "014551", "014552", "014553", "014554", "014555", "014556", "014557", "014558", "014559", "014560", "014561", "014562", "014563", "014564", "014565", "014566", "014567", "014568", "014569", "014570", "014571", "014572", "014573", "014574", "014575", "014576", "014577", "014579", "014580", "014581", "014582", "014583", "014584", "014585", "014586", "014587", "014588", "014589", "014590", "014591", "014592", "014593", "014594", "014595", "014596", "014597", "014598", "014599", "014600", "014601", "014602", "014603", "014604", "014605", "014606", "014607", "014608", "014609", "014610", "014611", "014612", "014613", "014614", "014615", "014616", "014617", "014618", "014619", "014620", "014621", "014622", "014623", "014624", "014625", "014626", "014627", "014628", "014629", "014630", "014631", "014632", "014633", "014634", "014635", "014636", "014637", "014638", "014639", "014640", "014641", "014642", "014643", "014644", "014645", "014646", "014647", "014648", "014649", "014650", "014651", "014652", "014653", "014654", "014655", "014656", "014657", "014658", "014659", "014660", "014661", "014662", "014663", "014664", "014665", "014666", "014667", "014668", "014669", "014670", "014671", "014672", "014673", "014674", "014675", "014676", "014677", "014678", "014679", "014680", "014681", "014682", "014683", "014684", "014685", "014686", "014687", "014688", "014689", "014690", "014691", "014692", "014693", "014694", "014695", "014696", "014697", "014698", "014699", "014700", "014701", "014702", "014703", "014704", "014705", "014706", "014707", "014708", "014709", "014710", "014711", "014712", "014713", "014714", "014715", "014716", "014717", "014718", "014719", "014720", "014721", "014722", "014723", "014858", "014859", "014860", "014861", "014862", "014863", "014864", "014865", "014866", "014867", "014868", "014869", "014870", "014871", "014872", "014873", "014874", "014875", "014876", "014877", "014878", "014879", "014880", "014881", "014882", "014883", "014884", "014885", "014886", "014887", "014888", "014889", "014890", "014891", "014892", "014893", "014894", "014895", "014896", "014897", "014898", "014899", "014900", "014901", "014902", "014903", "014904", "014905", "014906", "014907", "014908", "014909", "014910", "014911", "014912", "014913", "014914", "014915", "014916", "014917", "014918", "014919", "014920", "014921", "014922", "014923", "014924", "014925", "014926", "014927", "014928", "014929", "014930", "014931", "014932", "014933", "014934", "014935", "014936", "014937", "014939", "014940", "014941", "014942", "014943", "014944", "014945", "014946", "014947", "014948", "014949", "014950", "014951", "014952", "014953", "014954", "014955", "014956", "014957", "014958", "014959", "014960", "014961", "014962", "014963", "014964", "014965", "014966", "014967", "014968", "014969", "014970", "014971", "014972", "014973", "014974", "014975", "014976", "014977", "014978", "014979", "014980", "014981", "014982", "014983", "014984", "014985", "014986", "014987", "014988", "014989", "014990", "014991", "014992", "014993", "014994", "014995", "014996", "014997", "014998", "014999", "015000", "015001", "015002", "015003", "015004", "015005", "015006", "015007", "015008", "015009", "015010", "015011", "015012", "015013", "015014", "015015", "015016", "015017", "015018", "015019", "015020", "015021", "015022", "015023", "015024", "015025", "015026", "015027", "015028", "015029", "015030", "015031", "015032", "015033", "015034", "015035", "015036", "015037", "015038", "015039", "015040", "015041", "015042", "015043", "015044", "015045", "015046", "015047", "015048", "015049", "015050", "015051", "015052", "015053", "015054", "015055", "015056", "015057", "015058", "015059", "015060", "015061", "015062", "015063", "015064", "015065", "015066", "015067", "015068", "015069", "015070", "015071", "015072", "015073", "015074", "015075", "015076", "015077", "015078", "015079", "015080", "015081", "015082", "015083", "015084", "015085", "015086", "015087", "015088", "015089", "015090", "015091", "015092", "015349", "015350", "015351", "015352", "015353", "015354", "015355", "015356", "015357", "015358", "015359", "015360", "015361", "015362", "015363", "015364", "015365", "015366", "015367", "015368", "015369", "015370", "015371", "015372", "015373", "015374", "015375", "015376", "015377", "015378", "015379", "015380", "015381", "015382", "015383", "015384", "015385", "015386", "015387", "015388", "015389", "015390", "015391", "015392", "015393", "015394", "015395", "015396", "015397", "015398", "015399", "015400", "015401", "015402", "015403", "015404", "015405", "015406", "015407", "015888", "015889", "015890", "015891", "015892", "015893", "015894", "015895", "015896", "015897", "015898", "015899", "015900", "015901", "015902", "015903", "015904", "015905", "015906", "015907", "016929", "016930", "016931", "016932", "016933", "016934", "016935", "016936", "016937", "016938", "016939", "016940", "016941", "016942", "016943", "016944", "016945", "016946", "016947", "016948", "016949", "016950", "016951", "016952", "016953", "016954", "016955", "016956", "016957", "016958", "016959", "016960", "016961", "016962", "016963", "016964", "016965", "016966", "016967", "016968", "016969", "016970", "016971", "016972", "016973", "016974", "016975", "016976", "016977", "016978", "016979", "016980", "016981", "016982", "016983", "016984", "016985", "016986", "016987", "016988", "016989", "016990", "016991", "016992", "016993", "016994", "016995", "016996", "016997", "016998", "016999", "017000", "017001", "017002", "017003", "017004", "017005", "017006", "017007", "017008", "017009", "017010", "017011", "017012", "017013", "017014", "017015", "017016", "017017", "017018", "017019", "017020", "017021", "017022", "017023", "017024", "017025", "017026", "017027", "017028", "017029", "017030", "017031", "017032", "017033", "017034", "017035", "017036", "017037", "017038", "017039", "017040", "017041", "017042", "017043", "017044", "017045", "017046", "017047", "017048", "017049", "017050", "017051", "017052", "017053", "017054", "017055", "017056", "017057", "017058", "017059", "017060", "017061", "017062", "017063", "017064", "017065", "017066", "017067", "017068", "017069", "017070", "017071", "017072", "017073", "017074", "017075", "017076", "017077", "017078", "017079", "017080", "017081", "017082", "017083", "017084", "017085", "017086", "017087", "017088", "017089", "017090", "017091", "017092", "017093", "017094", "017095", "017096", "017097", "017098", "017099", "017100", "017101", "017102", "017103", "017104", "017105", "017106", "017107", "017109", "017110", "017111", "017112", "017113", "017114", "017115", "017116", "017117", "017118", "017119", "017120", "017121", "017122", "017124", "017125", "017126", "017127", "017128", "017129", "017130", "017131", "017132", "017133", "017134", "017135", "017136", "017137", "017138", "017139", "017140", "017141", "017142", "017143", "017144", "017145", "017146", "017147", "017148", "017149", "017150", "017151", "017152", "017153", "017154", "017155", "017156", "017157", "017158", "017159", "017160", "017161", "017162", "017163", "017164", "017165", "017166", "017167", "017168", "017169", "017170", "017171", "017172", "017173", "017174", "017175", "017176", "017177", "017178", "017179", "017180", "017181", "017182", "017183", "017184", "017185", "017186", "017187", "017188", "017189", "017190", "017191", "017192", "017193", "017194", "017195", "017196", "017197", "017198", "017199", "017200", "017201", "017202", "017203", "017204", "017205", "017206", "017207", "017208", "017209", "017210", "017211", "017212", "017213", "017214", "017215", "017216", "017217", "017218", "017219", "017220", "017221", "017222", "017223", "017224", "017225", "017226", "017227", "017228", "017229", "017230", "017231", "017232", "017233", "017234", "017235", "017236", "017237", "017238", "017239", "017240", "017241", "017242", "017243", "017244", "017245", "017246", "017247", "017248", "017249", "017250", "017251", "017252", "017253", "017254", "017255", "017256", "017257", "017258", "017259", "017260", "017261", "017262", "017263", "017264", "017265", "017266", "017267", "017268", "017269", "017270", "017271", "017272", "017273", "017274", "017275", "017276", "017277", "017278", "017279", "017280", "017281", "017282", "017283", "017284", "017285", "017286", "017287", "017288", "017289", "017290", "017291", "017292", "017293", "017294", "017295", "017296", "017297", "017298", "017299", "017300", "017301", "017302", "017303", "017304", "017305", "017306", "017307"], "val": ["000870", "000871", "000872", "000873", "000874", "000875", "000876", "000877", "000878", "000879", "000880", "000881", "000882", "000883", "000884", "000885", "000886", "000887", "000888", "000889", "000890", "000891", "000892", "000893", "000894", "000895", "000896", "000897", "000898", "000899", "000900", "000901", "000902", "000903", "000904", "000905", "000906", "000907", "000908", "000909", "000910", "000911", "000912", "000913", "000914", "000915", "000916", "000917", "000918", "000919", "000920", "000921", "000922", "000923", "000924", "000925", "000926", "000927", "000928", "000929", "000930", "000931", "000932", "000933", "000934", "000935", "000936", "000937", "000938", "000939", "000940", "000941", "000942", "000943", "000944", "000945", "000946", "000947", "000948", "000949", "000950", "000951", "000952", "000953", "000954", "000955", "000956", "000957", "000958", "000959", "000960", "000961", "000962", "000963", "000964", "000965", "000966", "000967", "000968", "000969", "000970", "000971", "000972", "000973", "000974", "000975", "000976", "000977", "000978", "000979", "000980", "000981", "000982", "000983", "000984", "000985", "000986", "000987", "000988", "000989", "000990", "000991", "000992", "000993", "000994", "000995", "000996", "000997", "000998", "000999", "001000", "001002", "001003", "001004", "001005", "001006", "001007", "001008", "001009", "001010", "001011", "001012", "001013", "001014", "001015", "001016", "001017", "001018", "001019", "001020", "001021", "001022", "001023", "001024", "001025", "001026", "001027", "001028", "001029", "001030", "001031", "001032", "001033", "001034", "001035", "001036", "001037", "001038", "001039", "001040", "001041", "001042", "001043", "001044", "001045", "001046", "001047", "001048", "001049", "001050", "001051", "001052", "001053", "001054", "001055", "001056", "001057", "001058", "001059", "001060", "001061", "001062", "001063", "001064", "001065", "001066", "001067", "001068", "001069", "001070", "001071", "001072", "001073", "001074", "001075", "001076", "001077", "001718", "001719", "001720", "001721", "001722", "001723", "001724", "001725", "001726", "001727", "001728", "001729", "001730", "001731", "001732", "001733", "001734", "001735", "001736", "001737", "001738", "001739", "001740", "001741", "001742", "001743", "001744", "001745", "001746", "001747", "001748", "001749", "001750", "001751", "001752", "001753", "001754", "001755", "001756", "001757", "001758", "001759", "001760", "001761", "001762", "001763", "001764", "001765", "001766", "001767", "001768", "001769", "001770", "001771", "001772", "001773", "001774", "001775", "001776", "001777", "001778", "001779", "001780", "001781", "001782", "001783", "001784", "001785", "001786", "001787", "001788", "001789", "001790", "001791", "001792", "001793", "001794", "001795", "001796", "001797", "001798", "001799", "001800", "001801", "001802", "001803", "001804", "001805", "001806", "001807", "001808", "001809", "001810", "001811", "001812", "001814", "001815", "001818", "001819", "001820", "001821", "001822", "001823", "001824", "001825", "001826", "001827", "001828", "001829", "001830", "001831", "001832", "001833", "001834", "001835", "001836", "001837", "001838", "001839", "001840", "001841", "001842", "001843", "001844", "001845", "001846", "001847", "001848", "001849", "001850", "001851", "001852", "001853", "001854", "001855", "001856", "001857", "001858", "001859", "001860", "001861", "001862", "001863", "001864", "002879", "002880", "002881", "002882", "002883", "002884", "002885", "002886", "002887", "002888", "002889", "002890", "002891", "002892", "002893", "002894", "002895", "002896", "002897", "002898", "002899", "002900", "002901", "002902", "002903", "002904", "002905", "002906", "002907", "002908", "002909", "002910", "002911", "002912", "002913", "002914", "002915", "002916", "002917", "002918", "002919", "002920", "002921", "002922", "002923", "002924", "002925", "002926", "002927", "002928", "002929", "002930", "002931", "002932", "002933", "002934", "002935", "002936", "002937", "002938", "002939", "002940", "002941", "002942", "002943", "002944", "002945", "002946", "002947", "002948", "002949", "002950", "002951", "002952", "002953", "002954", "002955", "002956", "002957", "002958", "002959", "002960", "002961", "002962", "002963", "002964", "002965", "002966", "002967", "002968", "002969", "002970", "002971", "002972", "002973", "002974", "002975", "002976", "002977", "002978", "002979", "002980", "002981", "002982", "002983", "002984", "002985", "002986", "002987", "002988", "002989", "002990", "002991", "002992", "002993", "002994", "002995", "002996", "002997", "002998", "002999", "003000", "003001", "003002", "003003", "003004", "003005", "003006", "003007", "003008", "003009", "003010", "003011", "003012", "003013", "003014", "003015", "003016", "003017", "003018", "003019", "003020", "003021", "003022", "003023", "003024", "003025", "003026", "003027", "003028", "003029", "003030", "003031", "003032", "003033", "003034", "003035", "003036", "003037", "003038", "003039", "003040", "003041", "003044", "003045", "003046", "003047", "003048", "003049", "003050", "003051", "003052", "003053", "003054", "003055", "003056", "003057", "003058", "003059", "003060", "003061", "003062", "003063", "003064", "003065", "003066", "003067", "003068", "003069", "003070", "003071", "003072", "003073", "003074", "003075", "003076", "003077", "003078", "003079", "003080", "003081", "003082", "003083", "003084", "003085", "003086", "003087", "003088", "003089", "003090", "003091", "003092", "003093", "003094", "003095", "003096", "003097", "003098", "003099", "003100", "003101", "003102", "003103", "003104", "003105", "003106", "003107", "003108", "003109", "003110", "003111", "003112", "003113", "003114", "003115", "003116", "003117", "003118", "003119", "003120", "003121", "003122", "003123", "003124", "003125", "003126", "003127", "003128", "003129", "003130", "003131", "003132", "003133", "003134", "003135", "003136", "003137", "003138", "003139", "003140", "003141", "003142", "003143", "003144", "003145", "003146", "003147", "003148", "003149", "003150", "003151", "003152", "003153", "003154", "003155", "003156", "003157", "003158", "003159", "003160", "003161", "003162", "003163", "003164", "003165", "003166", "003167", "003168", "003169", "003170", "003171", "003172", "003173", "003174", "003175", "003176", "003177", "003178", "003179", "003180", "003181", "003182", "003183", "003184", "003185", "003186", "003187", "003188", "003189", "003190", "003191", "003192", "003193", "003194", "003195", "003196", "003197", "003198", "003199", "003200", "003201", "003202", "003203", "003204", "003205", "003206", "003207", "003208", "003209", "003210", "003371", "003372", "003373", "003374", "003375", "003376", "003377", "003378", "003379", "003380", "003381", "003382", "003383", "003384", "003385", "003386", "003387", "003388", "003389", "003390", "003391", "003392", "003393", "003394", "003395", "003396", "003397", "003398", "003399", "003400", "003418", "003419", "003420", "003421", "003422", "003423", "003424", "003425", "003426", "003427", "003428", "003429", "003430", "003431", "003432", "003433", "003434", "003435", "003436", "003437", "003438", "003439", "003440", "003441", "003442", "003443", "003444", "003445", "003446", "003447", "003448", "003449", "003450", "003451", "003452", "003453", "003454", "003455", "003456", "003457", "003458", "003459", "003460", "003461", "003462", "003463", "003464", "003465", "003466", "003467", "003468", "003469", "003470", "003471", "003472", "003473", "003474", "003475", "003477", "003478", "003479", "003481", "003482", "003483", "003484", "003485", "003486", "003487", "003488", "003489", "003490", "003861", "003862", "003863", "003864", "003865", "003866", "003867", "003868", "003869", "003870", "003871", "003872", "003873", "003874", "003875", "003876", "003877", "003878", "003879", "003880", "003881", "003882", "003883", "003884", "003885", "003886", "003887", "003888", "003889", "003890", "003891", "003892", "003893", "003894", "003895", "003896", "003897", "003898", "003899", "003900", "003901", "003902", "003903", "003904", "003905", "003906", "003907", "003908", "003909", "003910", "003911", "003912", "003913", "003914", "003915", "003916", "003917", "003918", "003919", "003920", "003921", "003922", "003923", "003924", "003925", "003926", "003927", "003928", "003929", "003930", "003931", "003932", "003933", "003934", "003935", "003936", "003937", "003938", "003939", "003940", "003941", "003942", "003943", "003944", "003945", "003946", "003947", "003948", "003949", "003950", "003951", "003952", "003953", "003954", "003955", "003956", "003957", "003958", "003959", "003960", "003961", "003962", "003963", "003964", "003965", "003966", "003967", "003968", "003969", "003970", "003971", "003972", "003973", "003974", "003975", "003976", "003977", "003978", "003979", "003980", "003981", "003982", "003983", "003984", "003985", "003986", "003987", "003988", "003989", "003990", "003991", "003992", "003993", "003994", "003995", "003996", "003997", "003998", "003999", "004000", "004001", "004002", "004003", "004004", "004005", "004006", "004007", "004008", "004009", "004010", "004011", "004012", "004013", "004014", "004015", "004016", "004017", "004018", "004019", "004020", "004021", "004022", "004023", "004024", "004025", "004026", "004027", "004028", "004029", "004030", "004031", "004032", "004033", "004034", "004035", "004036", "004037", "004038", "004039", "004040", "004041", "004042", "004043", "004044", "004045", "004046", "004047", "004048", "004049", "004050", "004051", "004052", "004053", "004054", "004055", "004056", "004057", "004058", "004059", "004060", "004061", "004062", "004063", "004064", "004065", "004066", "004067", "004068", "004069", "004070", "004072", "004073", "004074", "004075", "004076", "004077", "004078", "004079", "004080", "004081", "004082", "004083", "004084", "004085", "004086", "004087", "004088", "004089", "004090", "004091", "004092", "004093", "004094", "004095", "004096", "004097", "004098", "004099", "004100", "004101", "004102", "004103", "004104", "004105", "004106", "004107", "004108", "004109", "004110", "004111", "004112", "004113", "004114", "004115", "004116", "004117", "004118", "004119", "004120", "004121", "004122", "004123", "004124", "004125", "004126", "004127", "004128", "004129", "004130", "004131", "004132", "004133", "004134", "004135", "004136", "004137", "004138", "004139", "004140", "004141", "004142", "004143", "004144", "004145", "004146", "004147", "004148", "004149", "004150", "004151", "004152", "004153", "004154", "004155", "004156", "004157", "004158", "004159", "004160", "004161", "004162", "004163", "004164", "004165", "004166", "004167", "004168", "004169", "004170", "004171", "004172", "004173", "004174", "004175", "004176", "004177", "004178", "004179", "004180", "004181", "004182", "004183", "004184", "004185", "004186", "004187", "004188", "004189", "004190", "004191", "004192", "004193", "004194", "004195", "004196", "004197", "004198", "004199", "004200", "004201", "004202", "004203", "004204", "004205", "004206", "004207", "004208", "004209", "004210", "004211", "004212", "004213", "004214", "004215", "004216", "004217", "004218", "004219", "004220", "004221", "004222", "004223", "004224", "004225", "004226", "004227", "004228", "004229", "004230", "004231", "004232", "004233", "004234", "004235", "004236", "004237", "004238", "004239", "004240", "004241", "004242", "004243", "004244", "004245", "004246", "004247", "004248", "004249", "004250", "004251", "004252", "004253", "004254", "004255", "004256", "004257", "004258", "004259", "004260", "007628", "007629", "007630", "007631", "007632", "007633", "007634", "007635", "007636", "007637", "007638", "007639", "007640", "007641", "007642", "007643", "007644", "007645", "007646", "007647", "007648", "007649", "007650", "007651", "007652", "007653", "007654", "007655", "007656", "007657", "007658", "007659", "007660", "007661", "007662", "007663", "007664", "007665", "007666", "007667", "007668", "007669", "007670", "007671", "007672", "007673", "007674", "007675", "007676", "007677", "007678", "007679", "007680", "007681", "007682", "007683", "007684", "007685", "007686", "007687", "007688", "007689", "007690", "007691", "007692", "007693", "007694", "007695", "007696", "007697", "007698", "007699", "007700", "007701", "007702", "007703", "007704", "007705", "007706", "007707", "007708", "007709", "007710", "007711", "007712", "007713", "007714", "007715", "007716", "007717", "007718", "007719", "007720", "007721", "007722", "007723", "007724", "007725", "007726", "007727", "007728", "007729", "007730", "007731", "007732", "007733", "007734", "007735", "007736", "007737", "007738", "007739", "007740", "007741", "007742", "007743", "007744", "007745", "007746", "007747", "007748", "007749", "007750", "007751", "007752", "007753", "007754", "007755", "007756", "007757", "007758", "007759", "007760", "007761", "007762", "007763", "007764", "007765", "007766", "007767", "007768", "007769", "007770", "007771", "007772", "007773", "007774", "007775", "007776", "007777", "007778", "007779", "007780", "007781", "007782", "007783", "007784", "007785", "007786", "007787", "007788", "007789", "007790", "007791", "007792", "007793", "007794", "007795", "009363", "009364", "009365", "009366", "009367", "009368", "009369", "009370", "009371", "009372", "009373", "009374", "009375", "009376", "009377", "009378", "009379", "009380", "009381", "009382", "009383", "009384", "009385", "009386", "009387", "009388", "009389", "009390", "009391", "009392", "009393", "009394", "009395", "009396", "009397", "009398", "009399", "009400", "009401", "009402", "009403", "009404", "009405", "009406", "009407", "009408", "009409", "009410", "009411", "009412", "009413", "009414", "009415", "009416", "009417", "009418", "009419", "009420", "009421", "009422", "009423", "009424", "009425", "009426", "009427", "009428", "009429", "009430", "009431", "009432", "009433", "009434", "009435", "009436", "009437", "009438", "009439", "009440", "009441", "009442", "009443", "009444", "009445", "009446", "009447", "009448", "009449", "009450", "009451", "009452", "009453", "009454", "009455", "009456", "009457", "009458", "009459", "009460", "009461", "009462", "009463", "009464", "009465", "009466", "009467", "009468", "009469", "009470", "009471", "009472", "009473", "009474", "009475", "009476", "009477", "009478", "009479", "009480", "009481", "009482", "009484", "009485", "009486", "009487", "009488", "009489", "009490", "009491", "009492", "009493", "009494", "009495", "009496", "009497", "009498", "009499", "009500", "010482", "010483", "010484", "010485", "010486", "010487", "010488", "010489", "010490", "010491", "010492", "010493", "010494", "010495", "010496", "010497", "010498", "010499", "010500", "010501", "010502", "010503", "010504", "010505", "010506", "010507", "010508", "010509", "010510", "010511", "010512", "010513", "010514", "010515", "010516", "010517", "010518", "010519", "010520", "010521", "010522", "010523", "010524", "010525", "010526", "010527", "010528", "010529", "010530", "010531", "010532", "010533", "010534", "010535", "010536", "010537", "010538", "010539", "010540", "010541", "010542", "010543", "010544", "010545", "010546", "010547", "010548", "010549", "010550", "010551", "010552", "010553", "010554", "010555", "010556", "010557", "010558", "010559", "010560", "010561", "010562", "010563", "010564", "010565", "010566", "010567", "010568", "010569", "010570", "010571", "010572", "010573", "010574", "010575", "010576", "010577", "010578", "010579", "010580", "010581", "010582", "010583", "010584", "010585", "010586", "010587", "010588", "010589", "010590", "010591", "010592", "010593", "010594", "010595", "010596", "010597", "010598", "010599", "010600", "010601", "010602", "010603", "010604", "010605", "010606", "010607", "010608", "010609", "010610", "010611", "010612", "010613", "010614", "010615", "010616", "010617", "010618", "010619", "010620", "010621", "010622", "010623", "010624", "010625", "010626", "010627", "010628", "010629", "010630", "010631", "010632", "010633", "010634", "010635", "010636", "010637", "010638", "010639", "010640", "010641", "010642", "010643", "010644", "010645", "010646", "010647", "010648", "010649", "010650", "010651", "010652", "010653", "010654", "010655", "010656", "010657", "010658", "010659", "010660", "010661", "010662", "010663", "010664", "010665", "010666", "010667", "010668", "010669", "010670", "010671", "010672", "010673", "010674", "010675", "010676", "010677", "010678", "010679", "010680", "010681", "010682", "010683", "010684", "010685", "010686", "010687", "010688", "010689", "010690", "010691", "010692", "010693", "010694", "010695", "010696", "010697", "010698", "010699", "010700", "010701", "010702", "010703", "010704", "010705", "010706", "010707", "010708", "010709", "010710", "010711", "010712", "010713", "010714", "010715", "010716", "010717", "010718", "010719", "010720", "010721", "010722", "010723", "010724", "010725", "010726", "010727", "010728", "010729", "010730", "010732", "010733", "010734", "010735", "010736", "010737", "010738", "010739", "010740", "010741", "010742", "010743", "010744", "010745", "010746", "010747", "010748", "010749", "010750", "010751", "010752", "010753", "010754", "010755", "010756", "010757", "010758", "010759", "010760", "010761", "010762", "010763", "010764", "010765", "010766", "010767", "010768", "010769", "010770", "010771", "010772", "010773", "010774", "010775", "010776", "010777", "010778", "010779", "010780", "010781", "010782", "010783", "010784", "010785", "010786", "010787", "010788", "010789", "010790", "010791", "010792", "010793", "010794", "010795", "010796", "010797", "010798", "010799", "010800", "010801", "010802", "010803", "010804", "010805", "010806", "010807", "010808", "010809", "010810", "010811", "010812", "010813", "010814", "010815", "010816", "010817", "010818", "010819", "010820", "010821", "010822", "010823", "010824", "010825", "010826", "010827", "010828", "010829", "010830", "010831", "010832", "010833", "010834", "010835", "010836", "010837", "010838", "010839", "010840", "010841", "010842", "010843", "010844", "010845", "010846", "010847", "010848", "010849", "010850", "010851", "010852", "010853", "010854", "010855", "010856", "010857", "010858", "010859", "010860", "010861", "010862", "010863", "010864", "010865", "010866", "010867", "010868", "010869", "010870", "010871", "010872", "010873", "010874", "010875", "010876", "010877", "010878", "010879", "010880", "010881", "010882", "010883", "010884", "010885", "010886", "010887", "010888", "010889", "010890", "010891", "010892", "010893", "010894", "010895", "010896", "010897", "010898", "010899", "010900", "010901", "010902", "010903", "010904", "010905", "010906", "010907", "010908", "010909", "010910", "010911", "010912", "010913", "010914", "010915", "010916", "010917", "010918", "010919", "010920", "010921", "010922", "010923", "010924", "010925", "010926", "010927", "010928", "010929", "010930", "010931", "010932", "010933", "010934", "010935", "010936", "010937", "010938", "010939", "010940", "011175", "011176", "011177", "011178", "011179", "011180", "011181", "011182", "011183", "011184", "011185", "011186", "011187", "011188", "011189", "011190", "011191", "011192", "011193", "011194", "011195", "011196", "011197", "011198", "011199", "011200", "011201", "011202", "011203", "011204", "011205", "011206", "011207", "011208", "011209", "011210", "011211", "011212", "011213", "011214", "011215", "011216", "011218", "011220", "011221", "011222", "011223", "011225", "011226", "011227", "011228", "011229", "011230", "011231", "011232", "011233", "011234", "011235", "011236", "011237", "011238", "011239", "011240", "011241", "011242", "011243", "011244", "011245", "011246", "011247", "011248", "011249", "011250", "011251", "011252", "011253", "011254", "011255", "011256", "011257", "011258", "011259", "011260", "011457", "011458", "011459", "011460", "011461", "011462", "011463", "011464", "011465", "011466", "011467", "011468", "011469", "011470", "011471", "011472", "011473", "011474", "011475", "011476", "011477", "011478", "011479", "011480", "011481", "011482", "011483", "011484", "011485", "011486", "011487", "011488", "011489", "011490", "011491", "011492", "011493", "011494", "011495", "011496", "011497", "011498", "011499", "011500", "011501", "011502", "011503", "011504", "011505", "011506", "011507", "011508", "011509", "011510", "011511", "011512", "011513", "011514", "011515", "011516", "011517", "011518", "011519", "011520", "011521", "011522", "011523", "011524", "011525", "011526", "011527", "011528", "011529", "011530", "011531", "011532", "011533", "011534", "011535", "011536", "011537", "011538", "011539", "011540", "011541", "011542", "011543", "011544", "011545", "011546", "011547", "011548", "011549", "011550", "011551", "011552", "011553", "011554", "011555", "011556", "011557", "011558", "011559", "011560", "011561", "011562", "011563", "011564", "011565", "011566", "011567", "011568", "011569", "011570", "011571", "011572", "011573", "011574", "011575", "011576", "011577", "011578", "011579", "011580", "011581", "011582", "011583", "011584", "011585", "011586", "011587", "011588", "011589", "011590", "011591", "011592", "011593", "011594", "011595", "011597", "011598", "011599", "011600", "011601", "011602", "011603", "011604", "011605", "011606", "011607", "011608", "011609", "011611", "011612", "011613", "011614", "011615", "011616", "011617", "011618", "011619", "011620", "011621", "011622", "011623", "011624", "011625", "011626", "011627", "011628", "011629", "011630", "011631", "011632", "011633", "011634", "011635", "011636", "011637", "011638", "011639", "011640", "013216", "013217", "013218", "013219", "013220", "013221", "013222", "013223", "013224", "013225", "013226", "013227", "013228", "013229", "013230", "013231", "013232", "013233", "013234", "013235", "013236", "013237", "013238", "013239", "013240", "013241", "013242", "013243", "013244", "013245", "013246", "013247", "013248", "013249", "013250", "013251", "013252", "013253", "013254", "013255", "013256", "013257", "013258", "013259", "013260", "013261", "013262", "013263", "013264", "013265", "013266", "013267", "013268", "013269", "013270", "013271", "013272", "013273", "013274", "013275", "013276", "013277", "013278", "013279", "013280", "013281", "013282", "013283", "013284", "013285", "013286", "013287", "013288", "013289", "013290", "013291", "013292", "013293", "013294", "013295", "013296", "013297", "013298", "013299", "013300", "013301", "013302", "013303", "013304", "013305", "013306", "013307", "013308", "013309", "013310", "013311", "013312", "013313", "013314", "013315", "013316", "013317", "013318", "013319", "013320", "013321", "013322", "013323", "013324", "013325", "013326", "013327", "013328", "013329", "013330", "013331", "013332", "013333", "013334", "013335", "013336", "013337", "013338", "013339", "013340", "013341", "013342", "013343", "013344", "013345", "013346", "013347", "013348", "013349", "013350", "013351", "013352", "013353", "013354", "013355", "013356", "013357", "013358", "013359", "013360", "013361", "013362", "013363", "013364", "013365", "013366", "013367", "013368", "013369", "013370", "013371", "013372", "013373", "013374", "013375", "013376", "013377", "013378", "013379", "013380", "013381", "013382", "013383", "013384", "013385", "013386", "013387", "013388", "013389", "013390", "013391", "013392", "013393", "013394", "013395", "013396", "013397", "013398", "013399", "013400", "013401", "013402", "013403", "013404", "013405", "013406", "013407", "013408", "013409", "013410", "013411", "013412", "013413", "013414", "013415", "013416", "013417", "013418", "013419", "013707", "013708", "013709", "013710", "013711", "013712", "013713", "013714", "013715", "013716", "013717", "013718", "013719", "013720", "013721", "013722", "013723", "013724", "013725", "013726", "013727", "013728", "013729", "013730", "013731", "013732", "013733", "013734", "013735", "013736", "013737", "013738", "013739", "013740", "013741", "013742", "013743", "013744", "013745", "013746", "013747", "013748", "013749", "013750", "013751", "013752", "013753", "013754", "013755", "013756", "013757", "013758", "013759", "013760", "013761", "013762", "013763", "013764", "013765", "013766", "013767", "013768", "013769", "013770", "013771", "013772", "013773", "013774", "013775", "013776", "013777", "013778", "013779", "013780", "013781", "013782", "013783", "013784", "013785", "013786", "013787", "013788", "013789", "013790", "013791", "013792", "013793", "013794", "013795", "013796", "013797", "013798", "013799", "013800", "013801", "013802", "013803", "013804", "013805", "013806", "013807", "013808", "013809", "013810", "013811", "013812", "013813", "013814", "013815", "013816", "013817", "013820", "013821", "013822", "013823", "013824", "013825", "013826", "013827", "013828", "013829", "013830", "013831", "013832", "013833", "013834", "013835", "013836", "013837", "013838", "013839", "013840", "013841", "013842", "013843", "013844", "013845", "013846", "013847", "013848", "013849", "013850", "013851", "013852", "013853", "013854", "013855", "013856", "013857", "013858", "013859", "013860", "013861", "013862", "013863", "013864", "013865", "013866", "013867", "013868", "013869", "013870", "013871", "013872", "013873", "013874", "013875", "013876", "013877", "013878", "013879", "013880", "013881", "013882", "013883", "013884", "013885", "013886", "013887", "013888", "013889", "013998", "013999", "014000", "014001", "014002", "014003", "014004", "014005", "014006", "014007", "014008", "014009", "014010", "014011", "014012", "014013", "014014", "014015", "014016", "014017", "014018", "014019", "014020", "014021", "014022", "014023", "014024", "014025", "014026", "014027", "014028", "014029", "014030", "014031", "014032", "014033", "014034", "014035", "014036", "014037", "015410", "015411", "015412", "015413", "015414", "015415", "015416", "015417", "015418", "015419", "015420", "015421", "015422", "015423", "015424", "015425", "015426", "015427", "015428", "015429", "015430", "015431", "015432", "015433", "015434", "015435", "015436", "015437", "015438", "015439", "015440", "015441", "015442", "015443", "015444", "015445", "015446", "015447", "015448", "015449", "015450", "015451", "015452", "015453", "015454", "015455", "015456", "015457", "015458", "015459", "015460", "015461", "015462", "015463", "015464", "015465", "015466", "015467", "015468", "015469", "015470", "015471", "015472", "015473", "015474", "015475", "015476", "015477", "015478", "015479", "015480", "015481", "015482", "015483", "015484", "015485", "015486", "015487", "015488", "015489", "015490", "015491", "015492", "015493", "015494", "015495", "015496", "015497", "015498", "015499", "015500", "015501", "015502", "015503", "015504", "015505", "015506", "015507", "015508", "015509", "015510", "015511", "015512", "015513", "015514", "015515", "015516", "015517", "015518", "015519", "015520", "015521", "015522", "015523", "015524", "015525", "015526", "015527", "015528", "015529", "015530", "015531", "015532", "015533", "015534", "015535", "015536", "015537", "015538", "015539", "015540", "015541", "015542", "015543", "015544", "015545", "015546", "015547", "015548", "015549", "015550", "015551", "015552", "015553", "015554", "015555", "015556", "015557", "015558", "015559", "015560", "015561", "015562", "015563", "015564", "015565", "015566", "015567", "015568", "015569", "015570", "015571", "015572", "015573", "015574", "015575", "015576", "015577", "015707", "015708", "015709", "015710", "015711", "015712", "015713", "015714", "015715", "015716", "015717", "015718", "015719", "015720", "015721", "015722", "015723", "015724", "015725", "015726", "015727", "015728", "015729", "015730", "015731", "015732", "015733", "015734", "015735", "015736", "015737", "015738", "015739", "015740", "015741", "015742", "015743", "015744", "015745", "015746", "015747", "015748", "015749", "015750", "015751", "015752", "015753", "015754", "015755", "015756", "015757", "015758", "015759", "015760", "015761", "015762", "015763", "015764", "015765", "015766", "015767", "016037", "016038", "016039", "016040", "016041", "016042", "016043", "016044", "016045", "016046", "016047", "016048", "016049", "016050", "016051", "016052", "016053", "016054", "016055", "016056", "016057", "016058", "016059", "016060", "016061", "016062", "016063", "016064", "016065", "016066", "016067", "016069", "016070", "016071", "016072", "016073", "016074", "016075", "016076", "016077", "016078", "016079", "016080", "016081", "016082", "016083", "016084", "016085", "016086", "016087", "016088", "016089", "016090", "016091", "016092", "016093", "016094", "016095", "016096", "016097", "016098", "016099", "016100", "016101", "016102", "016103", "016104", "016105", "016106", "016107", "016108", "016109", "016110", "016111", "016112", "016113", "016114", "016115", "016116", "016117", "016118", "016119", "016120", "016121", "016122", "016123", "016124", "016125", "016126", "016127", "016128", "016129", "016130", "016131", "016132", "016133", "016134", "016135", "016136", "016137", "016138", "016139", "016140", "016141", "016142", "016143", "016144", "016145", "016146", "016147", "016148", "016149", "016150", "016151", "016152", "016153", "016154", "016155", "016156", "016157", "016158", "016159", "016160", "016161", "016162", "016163", "016164", "016165", "016166", "016167", "016168", "016169", "016170", "016171", "016172", "016173", "016174", "016175", "016176", "016177", "016178", "016179", "016180", "016181", "016182", "016183", "016184", "016185", "016186", "016187", "016188", "016189", "016190", "016191", "016192", "016193", "016194", "016195", "016196", "016197", "016198", "016199", "016200", "016201", "016202", "016203", "016204", "016205", "016206", "016207", "016208", "016209", "016210", "016211", "016212", "016213", "016214", "016215", "016216", "016217", "016218", "016219", "016220", "016221", "016222", "016223", "016224", "016225", "016226", "016227", "016228", "016229", "016230", "016231", "016232", "016233", "016234", "016235", "016236", "016237", "016238", "016239", "016240", "016241", "016242", "016243", "016244", "016245", "016246", "016247", "016248", "016249", "016250", "016251", "016252", "016253", "016254", "016255", "016256", "016257", "016258", "016259", "016260", "016261", "016262", "016263", "016264", "016265", "016266", "016267", "016699", "016700", "016701", "016702", "016703", "016704", "016705", "016706", "016707", "016708", "016709", "016710", "016711", "016712", "016713", "016714", "016715", "016716", "016717", "016718", "016719", "016720", "016721", "016722", "016723", "016724", "016725", "016726", "016727", "016728", "016729", "016730", "016731", "016732", "016733", "016734", "016735", "016736", "016737", "016738", "016739", "016740", "016741", "016742", "016743", "016744", "016745", "016746", "016747", "016748", "016749", "016750", "016751", "016752", "016753", "016754", "016755", "016756", "016757", "016758", "016759", "016760", "016761", "016762", "016763", "016764", "016765", "016766", "016767", "016768", "016769", "016770", "016771", "016772", "016773", "016774", "016775", "016776", "016777", "016778", "016779", "016780", "016781", "016782", "016783", "016784", "016785", "016786", "016787", "016788", "016789", "016790", "016791", "016792", "016793", "016794", "016795", "016796", "016797", "016798", "016799", "016800", "016801", "016802", "016803", "016804", "016805", "016806", "016807", "016808", "016809", "016814", "016815", "016816", "016817", "016818", "016819", "016820", "016821", "016822", "016823", "016824", "016825", "016826", "016827", "016828", "016829", "016830", "016831", "016832", "016833", "016834", "016835", "016836", "016837", "016838", "016839", "016840", "016841", "016842", "016843", "016844", "016845", "016846", "016847", "016848", "016849", "016850", "016851", "016852", "016853", "016854", "016855", "016856", "016857", "016858", "016859", "016860", "016861", "016862", "016863", "016864", "016865", "016866", "016867", "016868", "016869", "016870", "016871", "016872", "016873", "016874", "016875", "016876", "016877", "016878", "016879", "016880", "016881", "016882", "016883", "016884", "016885", "016886", "016887", "016888", "016889", "016890", "016891", "016892", "016893", "016894", "016895", "016896", "016897", "016898", "016899", "016900", "016901", "016902", "016903", "016904", "016905", "016906", "016907", "016908", "016909", "016910", "016911", "016912", "016913", "016914", "016917", "016918", "016919", "016920", "016921", "016922", "016923", "016924", "016925", "016926", "016927"], "test": ["001521", "001522", "001523", "001524", "001525", "001526", "001527", "001528", "001529", "001530", "001531", "001532", "001533", "001534", "001535", "001536", "001537", "001538", "001539", "001540", "001541", "001542", "001543", "001545", "001546", "001547", "001548", "001549", "001550", "001551", "001552", "001554", "001555", "001556", "001557", "001558", "001559", "001560", "001561", "001562", "001563", "001564", "001565", "001566", "001567", "001568", "001569", "001570", "001571", "001572", "001573", "001574", "001575", "001576", "001578", "001579", "001580", "001581", "001582", "001583", "001584", "001585", "001586", "001587", "001588", "001589", "001590", "001591", "001592", "001593", "001594", "001596", "001597", "001598", "001599", "001600", "001601", "001602", "001603", "001604", "001605", "001606", "001607", "001608", "001609", "001610", "001611", "001612", "001613", "001614", "001615", "001616", "001617", "001618", "001619", "001620", "001621", "001622", "001623", "001624", "001625", "001626", "001627", "001628", "001629", "001630", "001631", "001632", "001633", "001634", "001635", "001636", "001637", "001638", "001639", "001640", "001641", "001642", "001643", "001644", "001645", "001646", "001647", "001648", "001649", "001650", "001651", "001652", "001653", "001654", "001655", "001656", "001657", "001658", "001659", "001660", "001664", "001665", "001667", "001668", "001669", "001671", "001672", "001673", "001674", "001675", "001676", "001677", "001678", "001679", "001680", "001681", "001682", "001683", "001684", "001685", "001687", "001688", "001689", "001690", "001691", "001692", "001693", "001694", "001695", "001696", "001697", "001698", "001699", "001700", "001701", "001702", "001703", "001704", "001705", "001706", "001707", "001708", "001709", "001710", "001711", "001712", "001713", "001714", "002075", "002076", "002077", "002078", "002079", "002080", "002081", "002082", "002083", "002084", "002085", "002086", "002087", "002088", "002089", "002090", "002091", "002092", "002093", "002094", "002095", "002096", "002097", "002098", "002099", "002100", "002101", "002102", "002103", "002104", "002105", "002106", "002107", "002108", "002109", "002110", "002111", "002112", "002113", "002114", "002115", "002116", "002117", "002118", "002119", "002120", "002121", "002122", "002123", "002124", "002125", "002126", "002127", "002128", "002129", "002130", "002131", "002132", "002133", "002134", "002135", "002136", "002137", "002138", "002139", "002140", "002141", "002142", "002143", "002144", "002145", "002146", "002147", "002148", "002149", "002150", "002151", "002152", "002153", "002154", "002155", "002156", "002157", "002158", "002159", "002160", "002161", "002162", "002163", "002164", "002165", "002166", "002167", "002168", "002169", "002170", "002171", "002172", "002173", "002174", "002175", "002176", "002177", "002178", "002179", "002180", "002181", "002182", "002183", "002184", "002185", "002186", "002187", "002188", "002189", "002190", "002191", "002192", "002193", "002194", "002195", "002196", "002197", "002198", "002199", "002200", "002201", "002202", "002203", "002204", "002205", "002206", "002207", "002208", "002209", "002210", "002211", "002212", "002213", "002214", "002231", "002233", "002235", "002236", "002237", "002238", "002239", "002240", "002241", "002242", "002243", "002384", "002385", "002386", "002387", "002388", "002389", "002390", "002391", "002392", "002393", "002394", "002395", "002396", "002397", "002398", "002399", "002400", "002401", "002402", "002403", "002404", "002405", "002406", "002407", "002408", "002409", "002410", "002411", "002412", "002413", "002414", "002415", "002416", "002417", "002418", "002419", "002420", "002421", "002422", "002423", "002424", "002425", "002426", "002427", "002428", "002429", "002430", "002431", "002432", "002433", "002434", "002435", "002436", "002437", "002438", "002439", "002440", "002441", "002442", "002443", "002444", "002445", "002446", "002447", "002448", "002449", "002450", "002451", "002452", "002453", "002454", "002455", "002456", "002457", "002458", "002459", "002460", "002461", "002462", "002463", "002464", "002465", "002466", "002467", "002468", "002469", "002470", "002471", "002472", "002473", "002474", "002475", "002476", "002477", "002478", "002479", "002480", "002481", "002482", "002483", "002484", "002485", "002486", "002487", "002488", "002489", "002490", "002491", "002492", "002493", "002494", "002495", "002496", "002497", "002498", "002499", "002500", "002501", "002502", "002503", "002504", "002505", "002506", "002507", "002508", "002509", "002510", "002511", "002512", "002513", "002514", "002515", "002516", "002517", "002518", "002519", "002520", "002521", "002522", "002523", "002524", "002525", "002526", "002527", "002528", "002529", "002530", "002531", "002532", "002533", "002534", "002535", "002536", "002537", "002538", "002539", "002540", "002541", "002542", "002543", "002544", "002545", "002546", "002547", "002548", "002549", "002550", "002551", "002552", "002553", "002554", "002555", "002556", "002559", "002560", "002563", "002564", "002565", "002566", "002567", "002568", "002569", "002570", "002571", "002572", "002573", "002574", "002575", "002576", "002577", "002578", "002579", "002580", "002581", "002582", "002584", "002585", "002586", "002587", "002588", "002589", "002590", "002591", "002592", "002593", "002594", "002595", "002596", "002597", "002598", "002599", "002600", "002601", "002602", "002603", "002604", "002605", "002606", "002607", "002608", "002609", "002610", "002611", "002612", "002613", "002614", "002615", "002616", "002617", "002618", "002619", "002620", "002621", "002622", "002623", "002624", "002625", "002626", "002627", "002628", "002629", "002630", "002631", "002632", "002633", "002634", "002635", "002636", "002637", "002638", "002639", "002640", "002641", "002642", "002643", "002644", "002645", "002646", "002647", "002648", "002649", "002650", "002651", "002652", "002653", "002654", "002655", "002656", "002657", "002658", "002659", "002660", "002661", "002662", "002663", "002664", "002665", "002666", "002667", "002668", "002669", "002670", "002671", "002672", "002673", "002674", "002675", "002676", "002677", "002678", "002679", "002680", "002681", "002682", "002683", "002684", "002685", "002686", "002687", "002688", "002689", "002690", "002691", "002692", "002693", "002694", "002695", "002696", "002697", "002698", "002699", "002700", "002701", "002702", "002703", "002704", "002705", "002706", "002707", "002708", "002709", "002710", "002711", "002712", "002713", "002714", "002715", "002716", "002717", "002718", "002719", "002720", "002721", "002722", "002723", "002724", "002725", "002726", "002727", "002728", "002729", "002730", "002731", "002732", "002733", "002734", "002735", "002736", "002737", "002738", "002739", "002740", "002741", "002742", "002743", "002744", "002745", "002746", "002747", "002748", "002749", "002750", "002751", "002752", "002753", "002754", "002755", "002756", "002757", "002758", "002759", "002760", "002761", "002762", "002763", "002764", "002765", "002766", "002767", "002768", "002769", "002770", "002771", "002772", "002773", "002774", "002775", "002776", "002777", "002778", "002779", "002780", "002781", "002782", "002784", "002785", "002786", "002787", "002788", "002789", "002790", "002791", "002792", "002793", "002794", "002795", "002796", "002797", "002798", "002799", "002800", "002801", "002802", "002803", "002804", "002805", "002806", "002807", "002808", "002809", "002810", "002811", "002812", "002813", "002814", "002815", "002816", "002817", "002818", "002819", "002820", "002821", "002822", "002823", "002824", "002825", "002826", "002827", "002828", "002829", "002830", "002831", "002832", "002833", "002834", "002835", "002836", "002837", "002838", "002839", "002840", "002841", "002842", "002843", "002844", "002845", "002846", "002847", "002848", "002849", "002850", "002851", "002852", "002853", "002854", "002855", "002856", "002857", "002858", "002859", "002860", "002861", "003641", "003642", "003643", "003644", "003645", "003646", "003647", "003648", "003649", "003650", "003651", "003652", "003653", "003654", "003655", "003656", "003657", "003658", "003659", "003660", "003661", "003662", "003663", "003664", "003665", "003666", "003667", "003668", "003669", "003670", "003671", "003672", "003673", "003674", "003675", "003676", "003677", "003678", "003679", "003680", "003681", "003682", "003683", "003684", "003685", "003686", "003687", "003688", "003689", "003690", "003691", "003692", "003693", "003694", "003695", "003696", "003697", "003698", "003699", "003700", "003701", "003702", "003703", "003704", "003705", "003706", "003707", "003708", "003709", "003710", "003711", "003712", "003713", "003714", "003715", "003716", "003717", "003718", "003719", "003720", "003721", "003722", "003723", "003724", "003725", "003726", "003727", "003728", "003729", "003730", "003731", "003732", "003733", "003734", "003735", "003736", "003737", "003738", "003739", "003740", "003741", "003742", "003743", "003744", "003745", "003746", "003747", "003748", "003749", "003750", "003751", "003752", "003753", "003754", "003755", "003756", "003757", "003758", "003759", "003760", "003761", "003762", "003763", "003764", "003765", "003766", "003767", "003768", "003769", "003770", "003771", "003772", "003773", "003774", "003775", "003776", "003777", "003778", "003779", "003780", "003781", "003782", "003783", "003784", "003785", "003786", "003787", "003788", "003789", "003790", "003791", "003792", "003793", "003794", "003795", "003796", "003797", "003798", "003799", "003800", "003801", "003802", "003803", "003804", "003805", "003806", "003807", "003808", "003809", "003810", "003811", "003812", "003813", "003814", "003815", "003816", "003817", "003818", "003819", "003820", "003821", "003822", "003823", "003824", "003825", "003826", "003827", "003828", "003829", "003830", "003831", "003832", "003833", "003834", "003835", "003836", "003837", "003838", "003839", "003840", "003841", "003842", "003843", "003844", "003845", "003846", "003847", "003848", "003849", "003850", "003851", "003852", "003853", "003854", "003855", "003856", "003857", "003858", "003859", "003860", "004556", "004557", "004558", "004559", "004560", "004561", "004562", "004563", "004564", "004565", "004566", "004567", "004568", "004569", "004570", "004571", "004572", "004573", "004574", "004575", "004576", "004577", "004578", "004579", "004580", "004581", "004582", "004583", "004584", "004585", "004586", "004587", "004588", "004589", "004590", "004591", "004592", "004593", "004594", "004595", "004596", "004597", "004598", "004599", "004600", "004601", "004602", "004603", "004604", "004605", "004606", "004607", "004608", "004609", "004610", "004611", "004612", "004613", "004614", "004615", "004616", "004617", "004618", "004619", "004620", "004621", "004622", "004623", "004624", "004625", "004626", "004627", "004628", "004629", "004630", "004631", "004632", "004633", "004634", "004635", "004636", "004637", "004638", "004639", "004640", "004641", "004642", "004643", "004644", "004645", "004646", "004647", "004648", "004649", "004650", "004651", "004652", "004653", "004654", "004655", "004656", "004657", "004658", "004659", "004660", "004661", "004662", "004663", "004664", "004665", "004666", "004667", "004668", "004669", "004670", "004671", "004672", "004673", "004674", "004675", "004676", "004677", "004678", "004680", "004681", "004683", "004684", "004685", "004686", "004687", "004688", "004689", "004692", "004693", "004886", "004887", "004888", "004889", "004890", "004891", "004892", "004893", "004894", "004895", "004896", "004897", "004898", "004899", "004900", "004901", "004902", "004903", "004904", "004905", "004906", "004907", "004908", "004909", "004910", "004911", "004912", "004913", "004914", "004915", "004916", "004917", "004918", "004919", "004920", "004921", "004922", "004923", "004924", "004925", "004926", "004927", "004928", "004929", "004930", "004931", "004932", "004933", "004934", "004935", "004936", "004937", "004938", "004939", "004940", "004941", "004942", "004943", "004944", "004945", "004946", "004947", "004948", "004949", "004950", "004951", "004952", "004953", "004954", "004955", "004956", "004957", "004958", "004959", "004960", "004961", "004962", "004963", "004964", "004965", "004966", "004967", "004968", "004969", "004970", "004971", "004972", "004973", "004974", "004975", "004976", "004977", "004978", "004979", "004980", "004981", "004982", "004983", "004984", "004985", "004986", "004987", "004988", "004989", "004990", "004991", "004992", "004993", "004994", "004995", "004996", "004997", "004998", "004999", "005000", "005001", "005002", "005003", "005004", "005005", "005006", "005007", "005008", "005009", "005010", "005011", "005012", "005013", "005014", "005015", "005016", "005017", "005018", "005019", "005020", "005021", "005022", "005023", "005024", "005025", "005026", "005027", "005028", "005029", "005030", "005031", "005032", "005033", "005034", "005035", "005036", "005037", "005038", "005039", "005040", "005041", "005042", "005043", "005044", "005045", "005046", "005047", "005048", "005049", "005050", "005051", "005052", "005053", "005054", "005055", "005056", "005057", "005058", "005059", "005060", "005061", "005062", "005063", "005066", "005067", "005068", "005069", "005070", "005071", "005072", "005073", "005074", "005075", "005076", "005077", "005078", "005079", "005080", "005081", "005082", "005083", "005084", "005085", "005086", "005087", "005088", "005089", "005090", "005091", "005092", "005093", "005094", "005095", "005096", "005097", "005098", "005099", "005100", "005101", "005102", "005103", "005104", "005105", "005106", "005107", "005108", "005109", "005110", "005111", "005112", "005113", "005114", "005115", "005116", "005117", "005118", "005119", "005120", "005121", "005122", "005123", "005124", "005125", "005126", "005127", "005128", "005129", "005130", "005131", "005132", "005133", "005134", "005135", "005136", "005137", "005138", "005139", "005140", "005141", "005142", "005143", "005144", "005145", "005146", "005147", "005148", "005149", "005150", "005151", "005152", "005153", "005154", "005155", "005156", "005157", "005158", "005159", "005160", "005161", "005162", "005163", "005164", "005165", "005166", "005167", "005168", "005169", "005170", "005171", "005172", "005173", "005174", "005175", "005176", "005177", "005178", "005179", "005180", "005181", "005182", "005183", "005184", "005185", "005186", "005187", "005188", "005189", "005190", "005191", "005192", "005193", "005194", "005195", "005196", "005197", "005198", "005199", "005200", "005201", "005202", "005203", "005204", "005205", "005206", "005207", "005208", "005209", "005210", "005211", "005212", "005213", "005214", "005215", "005216", "005217", "005218", "005219", "005220", "005221", "005222", "005223", "005224", "005225", "005226", "005227", "005228", "005229", "005230", "005231", "005232", "005233", "005234", "005235", "005236", "005237", "005238", "005239", "005240", "005241", "005242", "005243", "005246", "005247", "005248", "005249", "005250", "005251", "005252", "005253", "005254", "005255", "005256", "005257", "005258", "005259", "005260", "005261", "005262", "005263", "005264", "005265", "005266", "005267", "005268", "005269", "005270", "005271", "005272", "005273", "005274", "005275", "005276", "005277", "005278", "005279", "005280", "005281", "005282", "005283", "005284", "005285", "005286", "005287", "005288", "005289", "005290", "005291", "005292", "005293", "005294", "005295", "005296", "005297", "005298", "005299", "005300", "005301", "005302", "005303", "005304", "005305", "005306", "005307", "005308", "005309", "005310", "005311", "005312", "005313", "005314", "005315", "005316", "005317", "005318", "005319", "005320", "005321", "005322", "005323", "005324", "005325", "005326", "005327", "005328", "005329", "005330", "005331", "005332", "005333", "005334", "005335", "005336", "005337", "005338", "005339", "005340", "005341", "005342", "005343", "005344", "005345", "005346", "005347", "005348", "005349", "005350", "005351", "005352", "005353", "005354", "005355", "005356", "005357", "005358", "005359", "005360", "005361", "005362", "005363", "005364", "005365", "005366", "005367", "005368", "005369", "005370", "005371", "005372", "005373", "005374", "005375", "005376", "005377", "005378", "005379", "005380", "005381", "005382", "005383", "005384", "005385", "005386", "005387", "005388", "005389", "005390", "005391", "005392", "005393", "005394", "005395", "005396", "005397", "005398", "005399", "005400", "005401", "005402", "005403", "005404", "005405", "005406", "005407", "005408", "005409", "005410", "005411", "005412", "005413", "005745", "005746", "005747", "005748", "005749", "005750", "005751", "005752", "005753", "005754", "005755", "005756", "005757", "005758", "005759", "005760", "005761", "005762", "005763", "005764", "005765", "005766", "005767", "005768", "005769", "005770", "005771", "005772", "005773", "005774", "005775", "005776", "005777", "005778", "005779", "005780", "005781", "005782", "005783", "005784", "005785", "005786", "005787", "005788", "005789", "005790", "005791", "005792", "005793", "005794", "005795", "005796", "005797", "005798", "005799", "005800", "005801", "005802", "005803", "005804", "005805", "005806", "005807", "005808", "005809", "005810", "005811", "005812", "005813", "005814", "005815", "005816", "005817", "005818", "005819", "005820", "005821", "005822", "005823", "005824", "005825", "005826", "005827", "005828", "005829", "005830", "005831", "005832", "005833", "005834", "005835", "005836", "005837", "005838", "005839", "005840", "005841", "005842", "005843", "005844", "005845", "005846", "005847", "005848", "005849", "005850", "005851", "005852", "005853", "005854", "005855", "005856", "005857", "005858", "005859", "005860", "005861", "005862", "005863", "005864", "005865", "005866", "005867", "005868", "005869", "005870", "005871", "005872", "005873", "005874", "005875", "005876", "005877", "005878", "005879", "005880", "005881", "005882", "005883", "005884", "005885", "005886", "005887", "005888", "005889", "005890", "005891", "005892", "005893", "005894", "005895", "005905", "005907", "005908", "005910", "005911", "005912", "005913", "005914", "005915", "005916", "006818", "006819", "006820", "006821", "006822", "006823", "006824", "006825", "006826", "006827", "006828", "006829", "006830", "006831", "006832", "006833", "006834", "006835", "006836", "006837", "006838", "006839", "006840", "006841", "006842", "006843", "006844", "006845", "006846", "006847", "006848", "006849", "006850", "006851", "006852", "006853", "006854", "006855", "006856", "006857", "006858", "006859", "006860", "006861", "006862", "006863", "006864", "006865", "006866", "006867", "006868", "006869", "006870", "006871", "006872", "006873", "006874", "006875", "006876", "006877", "006878", "006879", "006880", "006881", "006882", "006883", "006884", "006885", "006886", "006887", "006888", "006889", "006890", "006891", "006892", "006893", "006894", "006895", "006896", "006897", "006898", "006899", "006900", "006901", "006902", "006903", "006904", "006905", "006906", "006907", "006908", "006909", "006910", "006911", "006912", "006913", "006914", "006915", "006916", "006917", "006918", "006919", "006920", "006921", "006922", "006923", "006924", "006925", "006926", "006927", "006928", "006929", "006930", "006931", "006932", "006933", "006934", "006935", "006936", "006937", "006938", "006939", "006940", "006941", "006942", "006943", "006944", "006945", "006946", "006947", "006948", "006949", "006950", "006951", "006952", "006953", "006954", "006955", "006956", "006957", "006958", "006959", "006960", "006961", "006962", "006963", "006964", "006965", "006966", "006967", "006968", "006969", "006970", "006971", "006972", "006973", "006974", "006975", "006976", "006977", "006978", "006979", "006980", "006981", "006982", "006983", "006984", "006985", "006986", "006987", "006988", "006989", "006990", "006991", "006992", "006993", "006994", "006995", "006996", "006997", "006998", "006999", "007000", "007001", "007002", "007003", "007004", "007005", "007007", "007008", "007009", "007010", "007011", "007012", "007013", "007014", "007015", "007016", "007017", "007018", "007019", "007020", "007021", "007022", "007023", "007024", "007025", "007026", "007027", "007028", "007029", "007030", "007031", "007032", "007033", "007034", "007035", "007036", "007037", "007038", "007039", "007040", "007041", "007042", "007043", "007044", "007045", "007046", "007047", "007048", "007049", "007050", "007051", "007052", "007053", "007054", "007055", "007056", "007057", "007058", "007059", "007060", "007061", "007062", "007063", "007064", "007065", "007066", "007067", "007068", "007069", "007070", "007071", "007072", "007073", "007074", "007075", "007076", "007077", "007078", "007079", "007080", "007081", "007082", "007083", "007084", "007085", "007086", "007087", "007088", "007089", "007090", "007091", "007092", "007093", "007094", "007095", "007096", "007097", "007098", "007099", "007100", "007101", "007102", "007103", "007104", "007105", "007106", "007107", "007108", "007109", "007110", "007111", "007112", "007113", "007114", "007115", "007116", "007117", "007118", "007119", "007120", "007121", "007122", "007123", "007124", "007125", "007126", "007127", "007128", "007129", "007130", "007131", "007132", "007133", "007134", "007135", "007136", "007137", "007138", "007139", "007140", "007141", "007142", "007143", "007144", "007145", "007146", "007147", "007148", "007149", "007150", "007151", "007152", "007153", "007154", "007155", "007156", "007157", "007158", "007159", "007160", "007161", "007162", "007163", "007164", "007165", "007166", "007167", "007168", "007169", "007170", "007171", "007172", "007173", "007174", "007175", "007176", "007177", "007178", "007179", "007180", "007181", "007182", "007183", "007184", "007185", "007186", "007187", "007188", "007189", "007190", "007191", "007192", "007193", "007194", "007195", "007196", "007197", "007198", "007199", "007200", "007201", "007202", "007203", "007204", "007205", "007206", "007207", "007208", "007209", "007210", "007211", "007212", "007213", "007214", "007215", "007216", "007217", "007218", "007219", "007220", "007221", "007222", "007223", "007224", "007225", "007226", "007227", "007228", "007229", "007230", "007231", "007232", "007233", "007234", "007235", "007236", "007237", "007238", "007239", "007240", "007241", "007242", "007243", "007244", "007245", "007246", "007247", "007248", "007249", "007250", "007251", "007252", "007253", "007254", "007255", "007798", "007799", "007800", "007801", "007802", "007803", "007804", "007805", "007806", "007807", "007808", "007809", "007810", "007811", "007812", "007813", "007814", "007815", "007816", "007817", "007818", "007819", "007820", "007821", "007822", "007823", "007824", "007825", "007826", "007827", "007828", "007829", "007830", "007831", "007832", "007833", "007834", "007835", "007836", "007837", "007838", "007839", "007840", "007841", "007842", "007843", "007844", "007845", "007846", "007847", "007848", "007849", "007850", "007851", "007852", "007853", "007854", "007855", "007856", "007857", "007858", "007859", "007860", "007861", "007862", "007863", "007864", "007865", "007866", "007867", "007868", "007869", "007870", "007871", "007872", "007873", "007874", "007875", "007876", "007877", "007878", "007879", "007880", "007881", "007882", "007883", "007884", "007885", "007886", "007887", "007888", "007889", "007890", "007891", "007892", "007893", "007894", "007895", "007896", "007897", "007898", "007899", "007900", "007901", "007902", "007903", "007904", "007905", "007906", "007907", "007908", "007909", "007910", "007911", "007912", "007913", "007914", "007915", "007916", "007917", "007918", "007919", "007920", "007921", "007922", "007923", "007924", "007925", "007926", "007927", "007928", "007929", "007930", "007931", "007932", "007933", "007934", "007935", "007936", "007937", "007938", "007939", "007940", "007941", "007942", "007943", "007944", "007945", "007946", "007947", "007948", "007949", "007950", "007951", "007952", "007953", "007954", "007955", "007956", "007957", "007958", "007959", "007960", "007961", "007962", "007963", "007964", "007965", "007967", "007968", "007969", "007970", "007971", "007972", "007973", "007974", "007975", "007976", "007977", "007978", "007979", "007980", "007981", "007982", "007983", "007984", "007985", "007986", "007987", "007988", "007989", "007990", "007991", "007992", "007993", "007994", "007995", "007996", "007997", "007998", "007999", "008000", "008001", "008002", "008003", "008004", "008005", "008006", "008007", "008008", "008009", "008010", "008011", "008012", "008013", "008014", "008015", "008016", "008017", "008018", "008019", "008020", "008021", "008022", "008023", "008024", "008025", "008026", "008027", "008028", "008029", "008030", "008031", "008032", "008033", "008034", "008035", "008036", "008037", "008038", "008039", "008040", "008041", "008042", "008043", "008044", "008045", "008046", "008047", "008048", "008049", "008050", "008051", "008052", "008053", "008054", "008055", "008056", "008057", "008058", "008060", "008061", "008062", "008063", "008064", "008065", "008066", "008073", "008087", "008088", "008089", "008090", "008091", "008092", "008093", "008094", "008095", "008096", "008097", "008098", "008099", "008100", "008101", "008102", "008103", "008104", "008105", "008106", "008107", "008108", "008109", "008110", "008111", "008112", "008113", "008114", "008115", "008116", "008117", "008118", "008119", "008120", "008121", "008122", "008123", "008124", "008125", "008126", "008127", "008128", "008129", "008130", "008131", "008132", "008133", "008134", "008135", "008136", "008137", "008138", "008139", "008140", "008141", "008142", "008143", "008144", "008145", "008146", "008147", "008148", "008149", "008150", "008151", "008152", "008153", "008154", "008155", "008156", "008157", "008158", "008159", "008160", "008161", "008162", "008163", "008164", "008165", "008166", "008167", "008168", "008169", "008170", "008171", "008172", "008173", "008174", "008175", "008176", "008177", "008178", "008179", "008180", "008181", "008182", "008183", "008184", "008185", "008186", "008187", "008188", "008189", "008190", "008191", "008192", "008193", "008194", "008195", "008196", "008197", "008198", "008199", "008200", "008201", "008202", "008203", "008204", "008205", "008206", "008207", "008208", "008209", "008210", "008211", "008212", "008213", "008214", "008215", "008216", "008217", "008218", "008219", "008220", "008221", "008222", "008223", "008224", "008225", "008226", "008227", "008228", "008229", "008230", "008231", "008232", "008233", "008234", "008235", "008236", "008237", "008238", "008239", "008240", "008241", "008242", "008243", "008244", "008245", "008246", "008247", "008248", "008249", "008250", "008251", "008252", "008253", "008254", "008255", "008256", "008257", "008258", "008259", "008260", "008261", "008262", "008263", "008264", "008265", "008266", "008277", "008278", "008279", "008280", "008281", "008282", "008283", "008284", "008285", "008287", "008288", "008289", "008290", "008291", "008292", "008293", "008294", "008295", "008296", "008297", "008298", "008299", "008300", "008301", "008302", "008303", "008304", "008305", "008306", "008307", "008308", "008309", "008310", "008311", "008312", "008313", "008314", "008315", "008316", "008317", "008318", "008319", "008320", "008321", "008322", "008323", "008324", "008325", "008326", "008327", "008328", "008329", "008330", "008331", "008332", "008333", "008334", "008335", "008336", "008337", "008338", "008339", "008340", "008341", "008342", "008343", "008344", "008345", "008346", "008347", "008348", "008349", "008350", "008351", "008352", "008353", "008354", "008355", "008356", "008357", "008358", "008359", "008360", "008361", "008362", "008363", "008364", "008365", "008366", "008367", "008368", "008369", "008370", "008371", "008372", "008373", "008374", "008375", "008376", "008377", "008378", "008379", "008380", "008381", "008382", "008383", "008384", "008385", "008386", "008387", "008388", "008389", "008390", "008391", "008392", "008393", "008394", "008395", "008396", "008397", "008398", "008399", "008400", "008401", "008402", "008403", "008404", "008405", "008406", "008407", "008408", "008409", "008410", "008411", "008412", "008413", "008414", "008415", "008416", "008417", "008418", "008419", "008420", "008421", "008422", "008423", "008424", "008425", "008426", "008427", "008428", "008429", "008430", "008431", "008432", "008433", "008434", "008435", "008436", "008437", "008438", "008439", "008440", "008441", "008442", "008443", "008444", "008445", "008446", "008447", "008448", "008449", "008450", "008451", "008452", "008453", "008454", "008455", "008456", "008457", "008458", "008459", "008460", "008461", "008462", "008463", "008464", "008465", "008466", "008467", "008468", "008469", "008470", "008471", "008472", "008473", "008474", "008475", "009152", "009153", "009154", "009155", "009156", "009157", "009158", "009159", "009160", "009161", "009162", "009163", "009164", "009165", "009166", "009167", "009168", "009169", "009170", "009171", "009172", "009173", "009174", "009175", "009176", "009177", "009178", "009179", "009180", "009181", "009182", "009183", "009184", "009185", "009186", "009187", "009188", "009189", "009190", "009191", "009192", "009193", "009194", "009195", "009196", "009197", "009198", "009199", "009200", "009201", "009202", "009203", "009204", "009205", "009206", "009207", "009208", "009209", "009210", "009211", "009212", "009213", "009214", "009215", "009216", "009217", "009218", "009219", "009220", "009221", "009222", "009223", "009224", "009225", "009226", "009227", "009228", "009229", "009230", "009231", "009232", "009233", "009234", "009235", "009236", "009237", "009238", "009239", "009240", "009241", "009242", "009243", "009244", "009245", "009246", "009247", "009248", "009249", "009250", "009251", "009252", "009253", "009254", "009255", "009256", "009257", "009258", "009259", "009260", "009261", "009262", "009263", "009264", "009265", "009266", "009267", "009268", "009269", "009270", "009271", "009272", "009273", "009274", "009275", "009276", "009277", "009278", "009279", "009280", "009281", "009282", "009283", "009284", "009285", "009286", "009287", "009288", "009289", "009290", "009291", "009292", "009293", "009294", "009295", "009296", "009297", "009298", "009299", "009300", "009301", "009302", "009303", "009304", "009305", "009306", "009307", "009308", "009309", "009310", "009311", "009312", "009313", "009314", "009315", "009316", "009317", "009318", "009319", "009320", "009321", "009322", "009323", "009324", "009325", "009326", "009327", "009328", "009329", "009330", "009331", "009332", "009333", "009334", "009335", "009336", "009337", "009338", "009339", "009340", "009341", "009342", "009343", "009344", "009345", "009346", "009347", "009348", "009349", "009350", "009351", "009352", "009353", "009354", "009355", "009356", "009357", "009358", "009359", "009360", "009502", "009503", "009504", "009505", "009506", "009507", "009508", "009509", "009510", "009511", "009512", "009513", "009514", "009515", "009516", "009517", "009518", "009519", "009520", "009521", "009522", "009523", "009524", "009525", "009526", "009527", "009528", "009529", "009530", "009531", "009532", "009533", "009534", "009535", "009536", "009537", "009538", "009539", "009540", "009541", "009542", "009543", "009544", "009545", "009546", "009547", "009548", "009549", "009550", "009551", "009552", "009553", "009554", "009555", "009556", "009557", "009558", "009559", "009560", "009561", "009562", "009563", "009564", "009565", "009566", "009567", "009568", "009569", "009570", "009571", "009572", "009573", "009574", "009575", "009576", "009577", "009578", "009579", "009580", "009581", "009582", "009583", "009584", "009585", "009586", "009587", "009588", "009589", "009590", "009591", "009594", "009595", "009596", "009597", "009598", "009599", "009600", "009601", "009602", "009603", "009604", "009605", "009606", "009607", "009608", "009609", "009610", "009611", "009612", "009613", "009614", "009615", "009616", "009617", "009618", "009619", "009620", "009621", "009622", "009623", "009624", "009625", "009626", "009627", "009628", "009629", "009630", "009631", "009632", "009633", "009634", "009635", "009636", "009637", "009638", "009639", "009640", "009641", "009642", "009643", "009644", "009645", "009646", "009647", "009648", "009649", "009650", "009651", "009652", "009653", "009654", "009655", "009656", "009657", "009658", "009659", "009660", "009661", "009662", "009663", "009664", "009665", "009666", "009667", "009668", "009669", "009670", "009671", "009672", "009673", "009674", "009675", "009676", "009677", "009678", "009679", "009680", "009681", "009682", "009683", "009684", "009685", "009686", "009687", "009688", "009689", "009690", "011742", "011743", "011744", "011745", "011746", "011747", "011748", "011749", "011750", "011751", "011752", "011753", "011754", "011755", "011756", "011757", "011758", "011759", "011760", "011761", "011762", "011763", "011764", "011765", "011766", "011767", "011768", "011769", "011770", "011771", "011772", "011773", "011774", "011775", "011776", "011777", "011778", "011779", "011780", "011781", "011782", "011783", "011784", "011785", "011786", "011787", "011788", "011789", "011790", "011791", "011792", "011793", "011794", "011795", "011796", "011797", "011798", "011799", "011800", "011801", "011802", "011803", "011804", "011805", "011806", "011807", "011808", "011809", "011810", "011811", "011812", "011813", "011814", "011815", "011816", "011817", "011818", "011819", "011820", "011821", "011822", "011823", "011824", "011825", "011826", "011827", "011828", "011829", "011830", "011833", "011834", "011835", "011836", "011837", "011838", "011839", "011840", "011841", "011842", "011843", "011844", "011845", "011846", "011847", "011848", "011849", "011850", "011851", "011852", "011853", "011854", "011855", "011856", "011857", "011858", "011859", "011860", "011861", "011862", "011863", "011864", "011865", "011866", "011867", "011868", "011869", "011870", "011871", "011872", "011873", "011874", "011875", "011876", "011877", "011878", "011879", "011880", "011881", "011882", "011883", "011884", "011885", "011886", "011887", "011888", "011889", "011890", "011891", "011892", "011893", "011894", "011895", "011896", "011897", "011898", "011899", "011900", "011901", "011902", "011903", "011904", "011905", "011906", "011907", "011908", "011909", "011910", "011911", "011912", "011913", "011914", "011915", "011916", "011917", "011918", "011919", "011920", "011921", "011922", "011923", "011924", "011925", "011926", "011927", "011928", "011929", "011930", "011931", "011932", "011933", "011934", "011935", "011936", "011937", "011938", "011939", "011940", "011941", "011942", "011943", "011944", "011945", "011946", "011947", "011948", "011949", "011950", "011951", "011952", "011953", "011954", "011955", "011956", "011957", "011958", "011959", "011960", "011961", "011962", "011963", "011964", "011965", "011966", "011967", "011968", "011969", "011970", "011971", "011972", "011973", "011974", "011975", "011976", "011977", "011978", "011979", "011980", "011981", "011982", "011983", "011984", "011985", "011986", "011987", "011988", "011989", "011990", "011991", "011992", "011993", "011994", "011995", "011996", "011997", "011998", "011999", "012000", "012001", "012002", "012003", "012004", "012005", "012006", "012007", "012008", "012009", "012010", "012011", "012012", "012013", "012014", "012015", "012016", "012017", "012018", "012019", "012020", "012021", "012022", "012023", "012024", "012025", "012026", "012027", "012028", "012029", "012030", "012031", "012032", "012033", "012034", "012035", "012036", "012037", "012038", "012039", "012040", "012041", "012042", "012043", "012044", "012045", "012046", "012047", "012048", "012049", "012050", "012051", "012052", "012053", "012054", "012055", "012056", "012057", "012058", "012059", "012060", "012061", "012062", "012063", "012064", "012065", "012066", "012067", "012068", "012069", "012070", "012071", "012072", "012073", "012074", "012075", "012076", "012077", "012078", "012079", "012080", "012081", "012082", "012083", "012084", "012085", "012086", "012087", "012088", "012089", "012090", "012299", "012300", "012301", "012302", "012303", "012304", "012305", "012306", "012307", "012308", "012309", "012310", "012311", "012312", "012313", "012314", "012315", "012316", "012317", "012318", "012319", "012320", "012321", "012322", "012323", "012324", "012325", "012326", "012327", "012328", "012329", "012330", "012331", "012332", "012333", "012334", "012335", "012336", "012337", "012338", "012339", "012340", "012341", "012342", "012343", "012344", "012345", "012346", "012347", "012348", "012349", "012350", "012351", "012352", "012353", "012354", "012355", "012356", "012357", "012358", "012359", "012360", "012361", "012362", "012363", "012364", "012365", "012366", "012367", "012368", "012369", "012370", "012371", "012372", "012373", "012374", "012375", "012376", "012377", "012378", "012379", "012380", "012381", "012382", "012383", "012384", "012385", "012386", "012387", "012388", "012389", "012390", "012391", "012392", "012393", "012394", "012395", "012396", "012397", "012398", "012399", "012400", "012401", "012402", "012403", "012404", "012405", "012406", "012407", "012408", "012409", "012410", "012411", "012412", "012413", "012414", "012415", "012416", "012417", "012418", "012419", "012420", "012421", "012422", "012423", "012424", "012425", "012426", "012427", "012428", "012429", "012430", "012431", "012432", "012433", "012434", "012435", "012436", "012437", "012438", "012439", "012440", "012441", "012442", "012821", "012822", "012823", "012824", "012825", "012826", "012827", "012828", "012829", "012830", "012831", "012832", "012833", "012834", "012835", "012836", "012837", "012838", "012839", "012840", "012841", "012842", "012843", "012844", "012845", "012846", "012847", "012848", "012849", "012850", "012851", "012852", "012853", "012854", "012855", "012856", "012857", "012858", "012859", "012860", "012861", "012862", "012863", "012864", "012865", "012866", "012867", "012868", "012869", "012870", "012871", "012872", "012873", "012874", "012875", "012876", "012877", "012878", "012879", "012880", "012881", "012882", "012883", "012884", "012885", "012886", "012887", "012888", "012889", "012890", "012891", "012892", "012893", "012894", "012895", "012896", "012897", "012898", "012899", "012900", "012901", "012902", "012903", "012904", "012905", "012906", "012907", "012908", "012909", "012910", "012911", "012912", "012913", "012914", "012915", "012916", "012917", "012918", "012919", "012920", "012921", "012922", "012923", "012924", "012925", "012927", "012928", "012929", "012930", "012931", "012932", "012933", "012934", "012935", "012936", "012937", "012938", "012939", "012940", "012941", "012942", "012943", "012944", "012945", "012946", "012947", "012948", "012949", "012950", "012951", "012952", "012953", "012954", "012955", "012956", "012957", "012958", "012959", "012960", "012961", "012962", "012963", "012964", "012965", "012966", "012967", "012968", "012969", "012970", "012971", "012972", "012973", "012974", "012975", "012976", "012977", "012978", "012979", "012980", "012981", "012982", "012983", "012984", "012985", "012986", "012987", "012988", "012989", "012990", "012991", "012992", "012993", "012995", "012996", "012997", "012998", "012999", "013000", "013890", "013891", "013892", "013893", "013894", "013895", "013896", "013897", "013898", "013899", "013900", "013901", "013902", "013903", "013904", "013905", "013906", "013907", "013908", "013909", "013910", "013911", "013912", "013913", "013914", "013915", "013916", "013917", "013918", "013919", "013920", "013921", "013922", "013923", "013924", "013925", "013926", "013927", "013928", "013929", "013930", "013931", "013932", "013933", "013934", "013935", "013936", "013937", "014048", "014049", "014050", "014051", "014052", "014053", "014054", "014055", "014056", "014057", "014058", "014059", "014060", "014061", "014062", "014063", "014064", "014065", "014066", "014067", "014068", "014069", "014070", "014071", "014072", "014073", "014074", "014075", "014076", "014077", "014078", "014079", "014080", "014081", "014082", "014083", "014084", "014085", "014086", "014087", "014088", "014089", "014090", "014091", "014092", "014093", "014094", "014095", "014096", "014097", "014098", "014099", "014100", "014101", "014102", "014103", "014104", "014105", "014106", "014107", "014108", "014109", "014110", "014111", "014112", "014113", "014114", "014115", "014116", "014117", "014118", "014119", "014120", "014121", "014122", "014123", "014124", "014125", "014126", "014127", "014128", "014129", "014130", "014131", "014132", "014133", "014134", "014135", "014136", "014137", "014138", "014139", "014140", "014141", "014142", "014143", "014144", "014145", "014146", "014147", "014148", "014149", "014150", "014151", "014152", "014153", "014154", "014155", "014156", "014157", "015217", "015218", "015219", "015220", "015221", "015222", "015223", "015224", "015225", "015226", "015227", "015228", "015229", "015230", "015231", "015232", "015233", "015234", "015235", "015236", "015237", "015238", "015239", "015240", "015241", "015242", "015243", "015244", "015245", "015246", "015247", "015248", "015249", "015250", "015251", "015252", "015253", "015254", "015255", "015256", "015257", "015258", "015259", "015260", "015261", "015262", "015263", "015264", "015265", "015266", "015267", "015268", "015269", "015270", "015271", "015272", "015273", "015274", "015275", "015276", "015277", "015278", "015279", "015280", "015281", "015282", "015283", "015284", "015285", "015286", "015287", "015288", "015289", "015290", "015291", "015292", "015293", "015294", "015295", "015296", "015297", "016269", "016270", "016271", "016272", "016273", "016274", "016275", "016276", "016277", "016278", "016279", "016280", "016281", "016282", "016283", "016284", "016285", "016286", "016287", "016288", "016289", "016290", "016291", "016292", "016293", "016294", "016295", "016296", "016297", "016298", "016299", "016300", "016301", "016302", "016303", "016304", "016305", "016306", "016307", "016308", "016309", "016310", "016311", "016312", "016313", "016314", "016315", "016316", "016317", "016318", "016319", "016320", "016321", "016322", "016323", "016324", "016325", "016326", "016327", "016328", "016329", "016330", "016331", "016332", "016333", "016334", "016335", "016336", "016337", "016338", "016339", "016340", "016341", "016342", "016343", "016344", "016345", "016346", "016347", "016348", "016349", "016350", "016351", "016352", "016353", "016354", "016355", "016356", "016357", "016358", "016359", "016360", "016361", "016362", "016363", "016364", "016365", "016366", "016367", "016368", "016369", "016370", "016371", "016372", "016373", "016374", "016375", "016376", "016377", "016378", "016379", "016380", "016381", "016382", "016383", "016384", "016385", "016386", "016387", "016388", "016393", "016394", "016395", "016396", "016397", "016398", "016399", "016400", "016401", "016402", "016403", "016404", "016405", "016406", "016408", "016409", "016410", "016411", "016412", "016413", "016414", "016415", "016416", "016417", "016418", "016419", "016420", "016421", "016422", "016423", "016424", "016425", "016426", "016427", "016428", "016429", "016430", "016431", "016432", "016433", "016434", "016435", "016436", "016437", "016438", "016439", "016440", "016441", "016442", "016443", "016444", "016445", "016446", "016447", "016448", "016449", "016450", "016451", "016452", "016453", "016454", "016455", "016456", "016457", "016458", "016459", "016460", "016461", "016462", "016463", "016464", "016465", "016466", "016467", "016468", "016469", "016470", "016471", "016472", "016473", "016474", "016475", "016476", "016477", "016478", "016479", "016480", "016481", "016482", "016483", "016484", "016485", "016486", "016487", "016488", "016489", "016490", "016491", "016492", "016493", "016494", "016495", "016496", "016497", "016498", "016499", "016500", "016501", "016502", "016503", "016504", "016505", "016506", "016507", "016509", "016510", "016511", "016512", "016513", "016514", "016515", "016516", "016517", "016518", "016519", "016520", "016521", "016522", "016523", "016524", "016525", "016526", "016527", "016528", "016529", "016530", "016531", "016532", "016533", "016534", "016535", "016536", "016537", "016538", "016539", "016540", "016541", "016542", "016543", "016544", "016545", "016546", "016547", "016548", "016549", "016550", "016551", "016552", "016553", "016554", "016555", "016556", "016557", "016558", "016559", "016560", "016561", "016562", "016563", "016564", "016565", "016566", "016567", "016568", "016569", "016570", "016571", "016572", "016573", "016574", "016575", "016576", "016577", "016578", "016579", "016580", "016581", "016582", "016583", "016584", "016585", "016586", "016587", "016588", "016589", "016590", "016591", "016592", "016593", "016594", "016595", "016596", "016597", "016598", "016599", "016600", "016601", "016602", "016603", "016604", "016605", "016606", "016607", "016608", "016609", "016610", "016611", "016612", "016613", "016614", "016615", "016616", "016617", "016618", "016619", "016620", "016621", "016622", "016623", "016624", "016625", "016626", "016627", "016628", "016629", "016630", "016631", "016632", "016633", "016634", "016635", "016636", "016637", "016638", "016639", "016640", "016641", "016642", "016643", "016644", "016645", "016646", "016647", "016648", "016649", "016650", "016651"], "test_A": ["002075", "002076", "002077", "002078", "002079", "002080", "002081", "002082", "002083", "002084", "002085", "002086", "002087", "002088", "002089", "002090", "002091", "002092", "002093", "002094", "002095", "002096", "002097", "002098", "002099", "002100", "002101", "002102", "002103", "002104", "002105", "002106", "002107", "002108", "002109", "002110", "002111", "002112", "002113", "002114", "002115", "002116", "002117", "002118", "002119", "002120", "002121", "002122", "002123", "002124", "002125", "002126", "002127", "002128", "002129", "002130", "002131", "002132", "002133", "002134", "002135", "002136", "002137", "002138", "002139", "002140", "002141", "002142", "002143", "002144", "002145", "002146", "002147", "002148", "002149", "002150", "002151", "002152", "002153", "002154", "002155", "002156", "002157", "002158", "002159", "002160", "002161", "002162", "002163", "002164", "002165", "002166", "002167", "002168", "002169", "002170", "002171", "002172", "002173", "002174", "002175", "002176", "002177", "002178", "002179", "002180", "002181", "002182", "002183", "002184", "002185", "002186", "002187", "002188", "002189", "002190", "002191", "002192", "002193", "002194", "002195", "002196", "002197", "002198", "002199", "002200", "002201", "002202", "002203", "002204", "002205", "002206", "002207", "002208", "002209", "002210", "002211", "002212", "002213", "002214", "002231", "002233", "002235", "002236", "002237", "002238", "002239", "002240", "002241", "002242", "002243", "002693", "002694", "002695", "002696", "002697", "002698", "002699", "002700", "002701", "002702", "002703", "002704", "002705", "002706", "002707", "002708", "002709", "002710", "002711", "002712", "002713", "002714", "002715", "002716", "002717", "002718", "002719", "002720", "002721", "002722", "002723", "002724", "002725", "002726", "002727", "002728", "002729", "002730", "002731", "002732", "002733", "002734", "002735", "002736", "002737", "002738", "002739", "002740", "002741", "002742", "002743", "002744", "002745", "002746", "002747", "002748", "002749", "002750", "002751", "002752", "002753", "002754", "002755", "002756", "002757", "002758", "002759", "002760", "002761", "002762", "002763", "002764", "002765", "002766", "002767", "002768", "002769", "002770", "002771", "002772", "002773", "002774", "002775", "002776", "002777", "002778", "002779", "002780", "002781", "002782", "002784", "002785", "002786", "002787", "002788", "002789", "002790", "002791", "002792", "002793", "002794", "002795", "002796", "002797", "002798", "002799", "002800", "002801", "002802", "002803", "002804", "002805", "002806", "002807", "002808", "002809", "002810", "002811", "002812", "002813", "002814", "002815", "002816", "002817", "002818", "002819", "002820", "002821", "002822", "002823", "002824", "002825", "002826", "002827", "002828", "002829", "002830", "002831", "002832", "002833", "002834", "002835", "002836", "002837", "002838", "002839", "002840", "002841", "002842", "002843", "002844", "002845", "002846", "002847", "002848", "002849", "002850", "002851", "002852", "002853", "002854", "002855", "002856", "002857", "002858", "002859", "002860", "002861", "004886", "004887", "004888", "004889", "004890", "004891", "004892", "004893", "004894", "004895", "004896", "004897", "004898", "004899", "004900", "004901", "004902", "004903", "004904", "004905", "004906", "004907", "004908", "004909", "004910", "004911", "004912", "004913", "004914", "004915", "004916", "004917", "004918", "004919", "004920", "004921", "004922", "004923", "004924", "004925", "004926", "004927", "004928", "004929", "004930", "004931", "004932", "004933", "004934", "004935", "004936", "004937", "004938", "004939", "004940", "004941", "004942", "004943", "004944", "004945", "004946", "004947", "004948", "004949", "004950", "004951", "004952", "004953", "004954", "004955", "004956", "004957", "004958", "004959", "004960", "004961", "004962", "004963", "004964", "004965", "004966", "004967", "004968", "004969", "004970", "004971", "004972", "004973", "004974", "004975", "004976", "004977", "004978", "004979", "004980", "004981", "004982", "004983", "004984", "004985", "004986", "004987", "004988", "004989", "004990", "004991", "004992", "004993", "004994", "004995", "004996", "004997", "004998", "004999", "005000", "005001", "005002", "005003", "005004", "005005", "005006", "005007", "005008", "005009", "005010", "005011", "005012", "005013", "005014", "005015", "005016", "005017", "005018", "005019", "005020", "005021", "005022", "005023", "005024", "005025", "005026", "005027", "005028", "005029", "005030", "005031", "005032", "005033", "005034", "005035", "005036", "005037", "005038", "005039", "005040", "005041", "005042", "005043", "005044", "005045", "005046", "005047", "005048", "005049", "005050", "005051", "005052", "005053", "005054", "005055", "005056", "005057", "005058", "005059", "005060", "005061", "005062", "005063", "006818", "006819", "006820", "006821", "006822", "006823", "006824", "006825", "006826", "006827", "006828", "006829", "006830", "006831", "006832", "006833", "006834", "006835", "006836", "006837", "006838", "006839", "006840", "006841", "006842", "006843", "006844", "006845", "006846", "006847", "006848", "006849", "006850", "006851", "006852", "006853", "006854", "006855", "006856", "006857", "006858", "006859", "006860", "006861", "006862", "006863", "006864", "006865", "006866", "006867", "006868", "006869", "006870", "006871", "006872", "006873", "006874", "006875", "006876", "006877", "006878", "006879", "006880", "006881", "006882", "006883", "006884", "006885", "006886", "006887", "006888", "006889", "006890", "006891", "006892", "006893", "006894", "006895", "006896", "006897", "006898", "006899", "006900", "006901", "006902", "006903", "006904", "006905", "006906", "006907", "006908", "006909", "006910", "006911", "006912", "006913", "006914", "006915", "006916", "006917", "006918", "006919", "006920", "006921", "006922", "006923", "006924", "006925", "006926", "006927", "006928", "006929", "006930", "006931", "006932", "006933", "006934", "006935", "006936", "006937", "006938", "006939", "006940", "006941", "006942", "006943", "006944", "006945", "006946", "006947", "006948", "006949", "006950", "006951", "006952", "006953", "006954", "006955", "006956", "006957", "006958", "006959", "006960", "006961", "006962", "006963", "006964", "006965", "006966", "006967", "006968", "006969", "006970", "006971", "006972", "006973", "006974", "006975", "006976", "006977", "006978", "006979", "006980", "006981", "006982", "006983", "006984", "006985", "006986", "006987", "006988", "006989", "006990", "006991", "006992", "006993", "006994", "006995", "006996", "006997", "006998", "006999", "007000", "007001", "007002", "007003", "007004", "007005", "007967", "007968", "007969", "007970", "007971", "007972", "007973", "007974", "007975", "007976", "007977", "007978", "007979", "007980", "007981", "007982", "007983", "007984", "007985", "007986", "007987", "007988", "007989", "007990", "007991", "007992", "007993", "007994", "007995", "007996", "007997", "007998", "007999", "008000", "008001", "008002", "008003", "008004", "008005", "008006", "008007", "008008", "008009", "008010", "008011", "008012", "008013", "008014", "008015", "008016", "008017", "008018", "008019", "008020", "008021", "008022", "008023", "008024", "008025", "008026", "008027", "008028", "008029", "008030", "008031", "008032", "008033", "008034", "008035", "008036", "008037", "008038", "008039", "008040", "008041", "008042", "008043", "008044", "008045", "008046", "008047", "008048", "008049", "008050", "008051", "008052", "008053", "008054", "008055", "008056", "008057", "008058", "008060", "008061", "008062", "008063", "008064", "008065", "008066", "008073", "012299", "012300", "012301", "012302", "012303", "012304", "012305", "012306", "012307", "012308", "012309", "012310", "012311", "012312", "012313", "012314", "012315", "012316", "012317", "012318", "012319", "012320", "012321", "012322", "012323", "012324", "012325", "012326", "012327", "012328", "012329", "012330", "012331", "012332", "012333", "012334", "012335", "012336", "012337", "012338", "012339", "012340", "012341", "012342", "012343", "012344", "012345", "012346", "012347", "012348", "012349", "012350", "012351", "012352", "012353", "012354", "012355", "012356", "012357", "012358", "012359", "012360", "012361", "012362", "012363", "012364", "012365", "012366", "012367", "012368", "012369", "012370", "012371", "012372", "012373", "012374", "012375", "012376", "012377", "012378", "012379", "012380", "012381", "012382", "012383", "012384", "012385", "012386", "012387", "012388", "012389", "012390", "012391", "012392", "012393", "012394", "012395", "012396", "012397", "012398", "012399", "012400", "012401", "012402", "012403", "012404", "012405", "012406", "012407", "012408", "012409", "012410", "012411", "012412", "012413", "012414", "012415", "012416", "012417", "012418", "012419", "012420", "012421", "012422", "012423", "012424", "012425", "012426", "012427", "012428", "012429", "012430", "012431", "012432", "012433", "012434", "012435", "012436", "012437", "012438", "012439", "012440", "012441", "012442", "014048", "014049", "014050", "014051", "014052", "014053", "014054", "014055", "014056", "014057", "014058", "014059", "014060", "014061", "014062", "014063", "014064", "014065", "014066", "014067", "014068", "014069", "014070", "014071", "014072", "014073", "014074", "014075", "014076", "014077", "014078", "014079", "014080", "014081", "014082", "014083", "014084", "014085", "014086", "014087", "014088", "014089", "014090", "014091", "014092", "014093", "014094", "014095", "014096", "014097", "014098", "014099", "014100", "014101", "014102", "014103", "014104", "014105", "014106", "014107", "014108", "014109", "014110", "014111", "014112", "014113", "014114", "014115", "014116", "014117", "014118", "014119", "014120", "014121", "014122", "014123", "014124", "014125", "014126", "014127", "014128", "014129", "014130", "014131", "014132", "014133", "014134", "014135", "014136", "014137", "014138", "014139", "014140", "014141", "014142", "014143", "014144", "014145", "014146", "014147", "014148", "014149", "014150", "014151", "014152", "014153", "014154", "014155", "014156", "014157", "016509", "016510", "016511", "016512", "016513", "016514", "016515", "016516", "016517", "016518", "016519", "016520", "016521", "016522", "016523", "016524", "016525", "016526", "016527", "016528", "016529", "016530", "016531", "016532", "016533", "016534", "016535", "016536", "016537", "016538", "016539", "016540", "016541", "016542", "016543", "016544", "016545", "016546", "016547", "016548", "016549", "016550", "016551", "016552", "016553", "016554", "016555", "016556", "016557", "016558", "016559", "016560", "016561", "016562", "016563", "016564", "016565", "016566", "016567", "016568", "016569", "016570", "016571", "016572", "016573", "016574", "016575", "016576", "016577", "016578", "016579", "016580", "016581", "016582", "016583", "016584", "016585", "016586", "016587", "016588", "016589", "016590", "016591", "016592", "016593", "016594", "016595", "016596", "016597", "016598", "016599", "016600", "016601", "016602", "016603", "016604", "016605", "016606", "016607", "016608", "016609", "016610", "016611", "016612", "016613", "016614", "016615", "016616", "016617", "016618", "016619", "016620", "016621", "016622", "016623", "016624", "016625", "016626", "016627", "016628", "016629", "016630", "016631", "016632", "016633", "016634", "016635", "016636", "016637", "016638", "016639", "016640", "016641", "016642", "016643", "016644", "016645", "016646", "016647", "016648", "016649", "016650", "016651"]}}

{"train": ["000000", "000001", "000002", "000003", "000004", "000005", "000006", "000007", "000008", "000009", "000010", "000011", "000012", "000013", "000014", "000015", "000016", "000017", "000019", "000020", "000022", "000024", "000025", "000026", "000027", "000028", "000029", "000031", "000033", "000034", "000036", "000037", "000038", "000039", "000040", "000041", "000044", "000047", "000048", "000049", "000051", "000053", "000054", "000058", "000059", "000065", "000066", "000068", "000069", "000072", "000073", "000078", "000081", "000088", "000097"], "val": ["000018", "000021", "000032", "000043", "000045", "000046", "000050", "000052", "000056", "000057", "000062", "000063", "000071", "000076", "000092", "000093"], "test": ["000023", "000030", "000035", "000042", "000055", "000060", "000061", "000064", "000067", "000070", "000074", "000075", "000077", "000079", "000080", "000082", "000083", "000084", "000085", "000086", "000087", "000089", "000090", "000091", "000094", "000095", "000096", "000098", "000099"]}


{"train": ["000000", "000001", "000002", "000003", "000004", "000005", "000006", "000007", "000008", "000009", "000010", "000011", "000013", "000014", "000015", "000016", "000017", "000018", "000019", "000020", "000022", "000023", "000024", "000025", "000026", "000027", "000028", "000030", "000032", "000035", "000036", "000037", "000038", "000039", "000042", "000043", "000044", "000045", "000047", "000049", "000051", "000054", "000055", "000057", "000058", "000063", "000064", "000067", "000068", "000070", "000074", "000078", "000083", "000084", "000091", "000110", "000111", "000112", "000113", "000114", "000115", "000116", "000117", "000118", "000119", "000120", "000121", "000122", "000123", "000124", "000125", "000126", "000127", "000129", "000130", "000131", "000132", "000134", "000136", "000137", "000138", "000139", "000140", "000141", "000143", "000145", "000146", "000148", "000149", "000150", "000151", "000152", "000155", "000158", "000159", "000161", "000164", "000165", "000166", "000167", "000174", "000175", "000176", "000177", "000183", "000184", "000187", "000195", "000197", "000206", "000220", "000221", "000222", "000223", "000224", "000225", "000226", "000227", "000228", "000229", "000230", "000231", "000232", "000233", "000234", "000235", "000236", "000237", "000238", "000241", "000242", "000243", "000244", "000245", "000246", "000247", "000248", "000250", "000252", "000253", "000255", "000256", "000257", "000259", "000260", "000261", "000262", "000264", "000265", "000267", "000270", "000273", "000274", "000275", "000276", "000284", "000286", "000288", "000289", "000291", "000292", "000293", "000304", "000309", "000313", "000330", "000331", "000332", "000333", "000334", "000335", "000336", "000337", "000338", "000339", "000340", "000341", "000343", "000344", "000345", "000346", "000347", "000348", "000349", "000350", "000351", "000352", "000353", "000355", "000357", "000358", "000359", "000360", "000361", "000362", "000365", "000366", "000367", "000368", "000371", "000372", "000374", "000376", "000378", "000379", "000380", "000382", "000385", "000386", "000387", "000390", "000392", "000397", "000398", "000404", "000406", "000409", "000416", "000417", "000428", "000440", "000441", "000442", "000443", "000444", "000445", "000446", "000447", "000448", "000449", "000450", "000451", "000452", "000454", "000455", "000456", "000457", "000458", "000459", "000460", "000461", "000463", "000464", "000466", "000467", "000468", "000469", "000470", "000473", "000474", "000475", "000476", "000477", "000478", "000480", "000482", "000483", "000484", "000485", "000487", "000492", "000493", "000494", "000496", "000497", "000501", "000502", "000505", "000508", "000511", "000512", "000519", "000526", "000528", "000536", "000550", "000551", "000552", "000553", "000554", "000555", "000556", "000557", "000558", "000559", "000561", "000562", "000563", "000564", "000565", "000566", "000567", "000568", "000569", "000572", "000573", "000574", "000575", "000576", "000577", "000578", "000579", "000580", "000581", "000582", "000583", "000585", "000587", "000589", "000590", "000591", "000593", "000596", "000597", "000598", "000601", "000602", "000604", "000605", "000607", "000612", "000614", "000616", "000619", "000620", "000621", "000624", "000631", "000637", "000642", "000660", "000661", "000662", "000663", "000664", "000665", "000666", "000667", "000668", "000669", "000670", "000671", "000673", "000674", "000675", "000676", "000677", "000678", "000679", "000680", "000681", "000682", "000685", "000686", "000687", "000688", "000689", "000690", "000692", "000693", "000694", "000696", "000698", "000699", "000701", "000705", "000706", "000707", "000708", "000709", "000711", "000712", "000714", "000716", "000718", "000722", "000725", "000727", "000728", "000731", "000733", "000734", "000747", "000748", "000754", "000770", "000771", "000772", "000773", "000774", "000775", "000776", "000777", "000778", "000779", "000780", "000781", "000782", "000783", "000784", "000785", "000786", "000787", "000789", "000790", "000791", "000792", "000793", "000794", "000795", "000796", "000799", "000801", "000802", "000803", "000804", "000805", "000808", "000809", "000810", "000811", "000813", "000817", "000818", "000819", "000820", "000823", "000825", "000826", "000829", "000834", "000836", "000838", "000839", "000843", "000845", "000847", "000854", "000856", "000864", "000880", "000881", "000882", "000883", "000884", "000885", "000886", "000887", "000888", "000889", "000890", "000892", "000893", "000894", "000895", "000896", "000897", "000898", "000899", "000900", "000901", "000904", "000905", "000906", "000907", "000908", "000909", "000912", "000913", "000914", "000915", "000916", "000917", "000919", "000920", "000921", "000922", "000924", "000925", "000927", "000930", "000932", "000935", "000937", "000939", "000940", "000941", "000944", "000948", "000951", "000953", "000958", "000963", "000969", "000977", "000990", "000991", "000992", "000993", "000994", "000995", "000996", "000997", "000998", "000999", "001001", "001002", "001003", "001004", "001005", "001006", "001007", "001008", "001009", "001010", "001011", "001012", "001015", "001016", "001017", "001018", "001019", "001021", "001022", "001024", "001025", "001027", "001028", "001029", "001030", "001031", "001033", "001036", "001038", "001039", "001040", "001042", "001043", "001045", "001047", "001052", "001053", "001055", "001059", "001063", "001066", "001067", "001074", "001076", "001088", "001100", "001101", "001102", "001103", "001104", "001105", "001106", "001107", "001108", "001109", "001110", "001111", "001112", "001113", "001114", "001115", "001116", "001117", "001118", "001120", "001121", "001122", "001123", "001124", "001125", "001126", "001128", "001130", "001133", "001135", "001136", "001137", "001138", "001139", "001140", "001141", "001145", "001146", "001147", "001149", "001150", "001151", "001152", "001155", "001158", "001163", "001166", "001168", "001169", "001170", "001171", "001179", "001182", "001186", "001192", "001210", "001211", "001212", "001213", "001214", "001215", "001216", "001217", "001218", "001219", "001220", "001221", "001222", "001223", "001224", "001225", "001226", "001227", "001229", "001230", "001232", "001234", "001235", "001236", "001237", "001238", "001239", "001240", "001241", "001244", "001245", "001247", "001248", "001249", "001250", "001252", "001253", "001256", "001257", "001259", "001260", "001261", "001264", "001266", "001268", "001271", "001274", "001276", "001277", "001281", "001287", "001288", "001294", "001296", "001302", "001320", "001321", "001322", "001323", "001324", "001325", "001326", "001327", "001328", "001329", "001330", "001331", "001332", "001333", "001335", "001336", "001337", "001338", "001339", "001340", "001341", "001342", "001343", "001345", "001346", "001347", "001349", "001351", "001352", "001355", "001356", "001357", "001358", "001359", "001361", "001362", "001364", "001366", "001367", "001369", "001370", "001371", "001376", "001377", "001378", "001380", "001382", "001387", "001389", "001390", "001393", "001396", "001400", "001405", "001415", "001430", "001431", "001432", "001433", "001434", "001435", "001436", "001437", "001438", "001439", "001441", "001442", "001443", "001444", "001445", "001446", "001447", "001448", "001449", "001450", "001451", "001452", "001455", "001456", "001457", "001458", "001459", "001460", "001461", "001463", "001465", "001466", "001468", "001469", "001471", "001472", "001473", "001474", "001475", "001477", "001481", "001484", "001485", "001488", "001489", "001490", "001494", "001495", "001497", "001501", "001503", "001506", "001511", "001514", "001525", "001540", "001541", "001542", "001543", "001544", "001545", "001546", "001547", "001548", "001549", "001551", "001552", "001553", "001554", "001555", "001556", "001557", "001558", "001559", "001560", "001561", "001563", "001564", "001565", "001567", "001568", "001569", "001571", "001572", "001573", "001574", "001575", "001577", "001578", "001580", "001581", "001582", "001584", "001585", "001587", "001591", "001592", "001593", "001594", "001598", "001602", "001604", "001607", "001609", "001615", "001616", "001619", "001624", "001629", "001634", "001650", "001651", "001652", "001653", "001654", "001655", "001656", "001657", "001658", "001659", "001660", "001661", "001662", "001664", "001665", "001666", "001667", "001668", "001669", "001670", "001671", "001672", "001673", "001674", "001675", "001678", "001679", "001680", "001681", "001682", "001683", "001684", "001687", "001688", "001690", "001692", "001693", "001695", "001696", "001698", "001700", "001702", "001704", "001705", "001709", "001710", "001712", "001716", "001717", "001723", "001724", "001726", "001731", "001736", "001747", "001760", "001761", "001762", "001763", "001764", "001765", "001766", "001767", "001768", "001769", "001770", "001771", "001772", "001773", "001775", "001776", "001777", "001778", "001779", "001780", "001781", "001782", "001783", "001784", "001785", "001786", "001787", "001792", "001793", "001795", "001796", "001797", "001798", "001799", "001800", "001802", "001803", "001806", "001808", "001809", "001811", "001812", "001815", "001816", "001817", "001820", "001822", "001824", "001829", "001833", "001835", "001836", "001843", "001849", "001852", "001870", "001871", "001872", "001873", "001874", "001875", "001876", "001877", "001878", "001879", "001880", "001881", "001882", "001883", "001885", "001886", "001887", "001888", "001889", "001890", "001891", "001892", "001893", "001895", "001896", "001898", "001899", "001900", "001901", "001902", "001904", "001905", "001906", "001908", "001912", "001913", "001915", "001917", "001918", "001919", "001920", "001923", "001927", "001928", "001929", "001930", "001933", "001936", "001938", "001945", "001947", "001949", "001950", "001955", "001964", "001980", "001981", "001982", "001983", "001984", "001985", "001986", "001987", "001988", "001989", "001990", "001991", "001992", "001993", "001994", "001995", "001996", "001997", "001999", "002000", "002001", "002002", "002004", "002005", "002006", "002008", "002009", "002010", "002011", "002012", "002014", "002015", "002017", "002019", "002021", "002022", "002023", "002026", "002028", "002029", "002031", "002032", "002034", "002038", "002039", "002041", "002043", "002045", "002048", "002050", "002054", "002057", "002064", "002066", "002079", "002090", "002091", "002092", "002093", "002094", "002095", "002096", "002097", "002098", "002099", "002100", "002101", "002102", "002103", "002105", "002106", "002107", "002108", "002109", "002110", "002111", "002112", "002114", "002115", "002116", "002118", "002119", "002120", "002121", "002122", "002123", "002124", "002125", "002129", "002131", "002132", "002135", "002136", "002137", "002139", "002142", "002143", "002146", "002148", "002149", "002152", "002153", "002154", "002159", "002160", "002166", "002167", "002174", "002175", "002186", "002200", "002201", "002202", "002203", "002204", "002205", "002206", "002207", "002208", "002209", "002210", "002212", "002213", "002214", "002215", "002216", "002217", "002218", "002219", "002220", "002221", "002222", "002224", "002225", "002227", "002228", "002229", "002231", "002233", "002234", "002236", "002237", "002238", "002239", "002240", "002242", "002243", "002244", "002246", "002248", "002253", "002255", "002257", "002258", "002259", "002261", "002265", "002266", "002267", "002270", "002272", "002273", "002285", "002286", "002291", "002310", "002311", "002312", "002313", "002314", "002315", "002316", "002317", "002318", "002319", "002320", "002321", "002322", "002323", "002325", "002326", "002327", "002328", "002329", "002330", "002332", "002333", "002334", "002335", "002336", "002337", "002338", "002341", "002343", "002344", "002345", "002347", "002348", "002349", "002351", "002352", "002353", "002356", "002358", "002359", "002360", "002362", "002366", "002367", "002369", "002371", "002372", "002375", "002376", "002386", "002387", "002388", "002394", "002398", "002401", "002420", "002421", "002422", "002423", "002424", "002425", "002426", "002427", "002428", "002429", "002430", "002432", "002433", "002434", "002435", "002436", "002437", "002438", "002439", "002440", "002441", "002442", "002444", "002445", "002446", "002447", "002448", "002450", "002451", "002453", "002456", "002457", "002458", "002459", "002460", "002464", "002466", "002467", "002468", "002469", "002470", "002472", "002475", "002476", "002477", "002481", "002485", "002486", "002489", "002493", "002495", "002498", "002506", "002507", "002512", "002530", "002531", "002532", "002533", "002534", "002535", "002536", "002537", "002538", "002539", "002541", "002542", "002543", "002544", "002545", "002546", "002547", "002548", "002549", "002550", "002552", "002553", "002554", "002556", "002557", "002558", "002559", "002560", "002561", "002562", "002563", "002565", "002566", "002568", "002571", "002572", "002574", "002576", "002578", "002579", "002582", "002584", "002585", "002588", "002589", "002591", "002593", "002595", "002598", "002603", "002604", "002606", "002612", "002615", "002626", "002640", "002641", "002642", "002643", "002644", "002645", "002646", "002647", "002648", "002649", "002650", "002651", "002652", "002653", "002654", "002655", "002656", "002658", "002659", "002660", "002661", "002662", "002663", "002664", "002665", "002667", "002668", "002671", "002672", "002675", "002676", "002677", "002678", "002679", "002681", "002684", "002685", "002686", "002688", "002689", "002690", "002691", "002692", "002693", "002699", "002701", "002703", "002704", "002707", "002715", "002717", "002719", "002722", "002723", "002739", "002750", "002751", "002752", "002753", "002754", "002755", "002756", "002757", "002758", "002759", "002760", "002761", "002762", "002763", "002765", "002766", "002767", "002768", "002769", "002770", "002771", "002772", "002774", "002775", "002776", "002777", "002778", "002780", "002781", "002783", "002785", "002786", "002787", "002789", "002790", "002793", "002794", "002795", "002796", "002798", "002802", "002804", "002805", "002807", "002809", "002810", "002811", "002814", "002819", "002825", "002827", "002829", "002832", "002833", "002843", "002860", "002861", "002862", "002863", "002864", "002865", "002866", "002867", "002868", "002869", "002870", "002871", "002872", "002873", "002875", "002876", "002877", "002878", "002879", "002880", "002883", "002884", "002885", "002886", "002887", "002888", "002889", "002891", "002892", "002893", "002894", "002897", "002898", "002899", "002900", "002902", "002904", "002906", "002907", "002908", "002910", "002911", "002912", "002915", "002917", "002920", "002923", "002925", "002926", "002932", "002938", "002939", "002943", "002947", "002950", "002970", "002971", "002972", "002973", "002974", "002975", "002976", "002977", "002978", "002979", "002981", "002982", "002983", "002984", "002985", "002986", "002987", "002988", "002989", "002990", "002991", "002992", "002993", "002994", "002996", "002997", "002999", "003002", "003003", "003005", "003006", "003007", "003008", "003009", "003012", "003013", "003015", "003016", "003017", "003018", "003022", "003023", "003024", "003027", "003028", "003032", "003034", "003035", "003036", "003041", "003043", "003047", "003052", "003054", "003068", "003080", "003081", "003082", "003083", "003084", "003085", "003086", "003087", "003088", "003089", "003090", "003091", "003092", "003093", "003094", "003095", "003096", "003097", "003099", "003100", "003101", "003104", "003105", "003106", "003107", "003108", "003109", "003110", "003111", "003112", "003113", "003114", "003116", "003117", "003120", "003121", "003122", "003125", "003127", "003128", "003130", "003133", "003136", "003138", "003139", "003140", "003144", "003148", "003149", "003150", "003151", "003155", "003160", "003162", "003178", "003190", "003191", "003192", "003193", "003194", "003195", "003196", "003197", "003198", "003199", "003200", "003201", "003202", "003204", "003205", "003206", "003207", "003208", "003209", "003211", "003212", "003213", "003214", "003215", "003216", "003217", "003218", "003221", "003222", "003224", "003225", "003227", "003228", "003229", "003231", "003233", "003234", "003235", "003238", "003239", "003240", "003244", "003247", "003248", "003249", "003252", "003254", "003258", "003259", "003262", "003265", "003269", "003270", "003279", "003288", "003300", "003301", "003302", "003303", "003304", "003305", "003306", "003307", "003308", "003309", "003310", "003311", "003312", "003313", "003314", "003316", "003317", "003318", "003319", "003321", "003322", "003323", "003325", "003326", "003327", "003328", "003329", "003330", "003333", "003334", "003335", "003337", "003338", "003339", "003342", "003343", "003345", "003346", "003348", "003349", "003353", "003355", "003356", "003358", "003359", "003361", "003364", "003366", "003367", "003371", "003375", "003377", "003385", "003388", "003392", "003410", "003411", "003412", "003413", "003414", "003415", "003416", "003417", "003418", "003419", "003420", "003421", "003423", "003424", "003425", "003426", "003427", "003428", "003429", "003431", "003432", "003433", "003434", "003435", "003436", "003437", "003438", "003440", "003441", "003442", "003445", "003446", "003448", "003449", "003451", "003452", "003454", "003455", "003458", "003459", "003460", "003461", "003463", "003464", "003465", "003470", "003473", "003476", "003478", "003483", "003484", "003489", "003492", "003498", "003508", "003520", "003521", "003522", "003523", "003524", "003525", "003526", "003527", "003528", "003529", "003530", "003531", "003532", "003534", "003535", "003536", "003537", "003538", "003539", "003540", "003543", "003544", "003545", "003546", "003547", "003548", "003549", "003550", "003552", "003553", "003555", "003556", "003558", "003559", "003560", "003561", "003562", "003564", "003565", "003566", "003570", "003571", "003572", "003574", "003579", "003580", "003583", "003586", "003589", "003593", "003598", "003599", "003605", "003606", "003614", "003630", "003631", "003632", "003633", "003634", "003635", "003636", "003637", "003638", "003639", "003640", "003641", "003642", "003643", "003644", "003645", "003646", "003647", "003649", "003651", "003653", "003654", "003655", "003656", "003657", "003658", "003659", "003661", "003663", "003664", "003665", "003666", "003667", "003668", "003670", "003671", "003672", "003676", "003677", "003678", "003680", "003685", "003686", "003688", "003689", "003691", "003695", "003697", "003698", "003700", "003705", "003707", "003714", "003715", "003720", "003740", "003741", "003742", "003743", "003744", "003745", "003746", "003747", "003748", "003749", "003751", "003752", "003753", "003754", "003755", "003756", "003757", "003758", "003759", "003760", "003761", "003763", "003764", "003765", "003766", "003767", "003769", "003771", "003773", "003774", "003775", "003776", "003777", "003778", "003780", "003783", "003784", "003785", "003786", "003789", "003790", "003791", "003792", "003793", "003799", "003803", "003806", "003807", "003808", "003812", "003813", "003814", "003821", "003828", "003831", "003850", "003851", "003852", "003853", "003854", "003855", "003856", "003857", "003858", "003859", "003861", "003862", "003863", "003864", "003865", "003866", "003867", "003868", "003869", "003870", "003871", "003873", "003874", "003875", "003876", "003877", "003878", "003881", "003882", "003883", "003884", "003885", "003886", "003888", "003890", "003891", "003892", "003893", "003896", "003898", "003900", "003901", "003904", "003908", "003909", "003911", "003916", "003918", "003919", "003920", "003926", "003928", "003938", "003939", "003944", "003960", "003961", "003962", "003963", "003964", "003965", "003966", "003967", "003968", "003969", "003970", "003972", "003973", "003974", "003975", "003976", "003977", "003978", "003979", "003981", "003982", "003983", "003984", "003985", "003986", "003988", "003989", "003992", "003993", "003994", "003995", "003996", "003997", "003999", "004004", "004005", "004006", "004007", "004008", "004009", "004011", "004012", "004013", "004017", "004019", "004022", "004025", "004027", "004028", "004032", "004036", "004037", "004042", "004047", "004058", "004070", "004071", "004072", "004073", "004074", "004075", "004076", "004077", "004078", "004079", "004080", "004081", "004082", "004083", "004084", "004085", "004086", "004087", "004089", "004090", "004092", "004093", "004094", "004095", "004096", "004098", "004099", "004101", "004102", "004104", "004105", "004106", "004107", "004108", "004110", "004112", "004114", "004115", "004117", "004118", "004120", "004122", "004125", "004126", "004127", "004130", "004133", "004134", "004135", "004140", "004145", "004147", "004150", "004152", "004165", "004180", "004181", "004182", "004183", "004184", "004185", "004186", "004187", "004188", "004189", "004190", "004191", "004192", "004194", "004195", "004196", "004197", "004198", "004199", "004200", "004201", "004203", "004204", "004205", "004206", "004207", "004208", "004211", "004212", "004214", "004215", "004216", "004217", "004218", "004221", "004222", "004223", "004226", "004227", "004229", "004231", "004232", "004236", "004238", "004239", "004241", "004243", "004244", "004247", "004251", "004253", "004259", "004262", "004269", "004277", "004290", "004291", "004292", "004293", "004294", "004295", "004296", "004297", "004298", "004299", "004300", "004301", "004302", "004303", "004304", "004305", "004307", "004308", "004309", "004310", "004311", "004312", "004314", "004315", "004317", "004318", "004319", "004320", "004322", "004323", "004324", "004326", "004328", "004329", "004330", "004331", "004334", "004336", "004338", "004339", "004340", "004343", "004345", "004347", "004349", "004351", "004352", "004353", "004359", "004360", "004361", "004364", "004371", "004379", "004381", "004400", "004401", "004402", "004403", "004404", "004405", "004406", "004407", "004408", "004409", "004411", "004412", "004413", "004414", "004415", "004416", "004417", "004418", "004419", "004420", "004422", "004423", "004424", "004425", "004426", "004427", "004428", "004430", "004432", "004433", "004434", "004435", "004437", "004439", "004440", "004441", "004442", "004443", "004445", "004448", "004450", "004451", "004456", "004457", "004459", "004461", "004463", "004464", "004466", "004472", "004474", "004479", "004487", "004488", "004491", "004510", "004511", "004512", "004513", "004514", "004515", "004516", "004517", "004518", "004519", "004520", "004521", "004522", "004524", "004525", "004526", "004527", "004528", "004529", "004530", "004532", "004533", "004534", "004536", "004537", "004538", "004539", "004540", "004541", "004542", "004545", "004547", "004548", "004549", "004551", "004552", "004553", "004556", "004557", "004559", "004560", "004561", "004565", "004567", "004569", "004571", "004573", "004576", "004577", "004580", "004583", "004585", "004597", "004599", "004600", "004620", "004621", "004622", "004623", "004624", "004625", "004626", "004627", "004628", "004629", "004630", "004631", "004632", "004634", "004635", "004636", "004637", "004638", "004639", "004640", "004641", "004642", "004644", "004645", "004646", "004648", "004649", "004650", "004651", "004652", "004653", "004656", "004658", "004659", "004660", "004662", "004663", "004665", "004666", "004667", "004670", "004672", "004674", "004675", "004677", "004680", "004684", "004685", "004688", "004690", "004694", "004697", "004704", "004708", "004717", "004730", "004731", "004732", "004733", "004734", "004735", "004736", "004737", "004738", "004739", "004740", "004741", "004742", "004743", "004744", "004746", "004747", "004748", "004749", "004750", "004751", "004752", "004753", "004754", "004755", "004757", "004758", "004760", "004761", "004762", "004766", "004767", "004768", "004769", "004770", "004772", "004773", "004774", "004775", "004779", "004780", "004784", "004785", "004787", "004789", "004792", "004795", "004797", "004798", "004801", "004802", "004805", "004813", "004816", "004826", "004840", "004841", "004842", "004843", "004844", "004845", "004846", "004847", "004848", "004849", "004850", "004851", "004852", "004853", "004854", "004855", "004856", "004858", "004859", "004860", "004861", "004863", "004864", "004865", "004866", "004867", "004868", "004870", "004872", "004873", "004874", "004875", "004876", "004877", "004880", "004882", "004884", "004885", "004887", "004888", "004891", "004893", "004894", "004895", "004899", "004903", "004904", "004905", "004908", "004912", "004913", "004918", "004921", "004927", "004930", "004950", "004951", "004952", "004953", "004954", "004955", "004956", "004957", "004958", "004959", "004960", "004961", "004962", "004963", "004964", "004965", "004966", "004968", "004969", "004970", "004973", "004974", "004975", "004976", "004977", "004978", "004979", "004981", "004982", "004983", "004984", "004986", "004988", "004989", "004990", "004993", "004995", "004996", "004997", "004999", "005000", "005001", "005002", "005007", "005009", "005012", "005013", "005018", "005019", "005024", "005028", "005029", "005036", "005039", "005040", "005060", "005061", "005062", "005063", "005064", "005065", "005066", "005067", "005068", "005069", "005070", "005071", "005072", "005073", "005074", "005075", "005076", "005077", "005079", "005080", "005081", "005083", "005084", "005085", "005086", "005087", "005088", "005090", "005091", "005092", "005093", "005096", "005097", "005098", "005102", "005103", "005104", "005105", "005107", "005108", "005110", "005112", "005115", "005116", "005119", "005120", "005125", "005128", "005129", "005133", "005135", "005137", "005140", "005149", "005152", "005170", "005171", "005172", "005173", "005174", "005175", "005176", "005177", "005178", "005179", "005180", "005181", "005183", "005184", "005185", "005186", "005187", "005188", "005189", "005190", "005191", "005193", "005194", "005195", "005196", "005198", "005199", "005200", "005201", "005202", "005203", "005204", "005205", "005209", "005211", "005212", "005214", "005215", "005216", "005217", "005222", "005224", "005226", "005227", "005228", "005231", "005234", "005238", "005239", "005243", "005245", "005249", "005256", "005257", "005263", "005280", "005281", "005282", "005283", "005284", "005285", "005286", "005287", "005288", "005289", "005290", "005291", "005292", "005293", "005294", "005295", "005297", "005298", "005299", "005300", "005302", "005304", "005305", "005306", "005307", "005308", "005309", "005310", "005311", "005313", "005314", "005316", "005318", "005319", "005322", "005323", "005324", "005325", "005326", "005327", "005331", "005332", "005334", "005336", "005338", "005340", "005343", "005344", "005347", "005353", "005354", "005357", "005363", "005368", "005372", "005390", "005391", "005392", "005393", "005394", "005395", "005396", "005397", "005398", "005399", "005400", "005401", "005402", "005403", "005404", "005405", "005406", "005407", "005408", "005410", "005411", "005412", "005413", "005414", "005415", "005416", "005418", "005420", "005423", "005424", "005426", "005427", "005428", "005429", "005430", "005433", "005434", "005436", "005437", "005438", "005443", "005446", "005447", "005448", "005449", "005451", "005454", "005457", "005458", "005465", "005467", "005468", "005474", "005475", "005481", "005500", "005501", "005502", "005503", "005504", "005505", "005506", "005507", "005508", "005509", "005510", "005511", "005512", "005513", "005515", "005516", "005517", "005518", "005519", "005520", "005522", "005523", "005524", "005525", "005526", "005527", "005529", "005531", "005532", "005533", "005535", "005536", "005538", "005539", "005540", "005541", "005543", "005545", "005548", "005549", "005550", "005551", "005552", "005555", "005556", "005564", "005565", "005566", "005567", "005571", "005573", "005578", "005585", "005588", "005592", "005610", "005611", "005612", "005613", "005614", "005615", "005616", "005617", "005618", "005619", "005620", "005621", "005622", "005623", "005624", "005625", "005627", "005628", "005629", "005630", "005631", "005633", "005634", "005635", "005636", "005638", "005639", "005640", "005642", "005643", "005645", "005646", "005648", "005649", "005650", "005653", "005656", "005657", "005658", "005659", "005661", "005663", "005665", "005666", "005667", "005670", "005671", "005675", "005679", "005683", "005687", "005688", "005693", "005695", "005709", "005720", "005721", "005722", "005723", "005724", "005725", "005726", "005727", "005728", "005729", "005730", "005731", "005732", "005733", "005734", "005735", "005737", "005738", "005739", "005741", "005742", "005743", "005744", "005745", "005746", "005747", "005749", "005750", "005753", "005754", "005755", "005756", "005758", "005759", "005760", "005761", "005763", "005764", "005765", "005769", "005771", "005772", "005774", "005777", "005778", "005782", "005784", "005786", "005789", "005792", "005795", "005797", "005807", "005808", "005819", "005830", "005831", "005832", "005833", "005834", "005835", "005836", "005837", "005838", "005839", "005840", "005841", "005842", "005843", "005844", "005845", "005846", "005847", "005848", "005851", "005852", "005853", "005854", "005855", "005856", "005857", "005858", "005860", "005861", "005862", "005865", "005866", "005868", "005869", "005870", "005871", "005876", "005877", "005878", "005879", "005880", "005881", "005884", "005886", "005889", "005891", "005895", "005896", "005897", "005904", "005905", "005907", "005913", "005916", "005926", "005940", "005941", "005942", "005943", "005944", "005945", "005946", "005947", "005948", "005949", "005950", "005951", "005953", "005954", "005955", "005956", "005957", "005958", "005959", "005960", "005961", "005962", "005963", "005964", "005965", "005967", "005968", "005970", "005973", "005974", "005975", "005976", "005978", "005979", "005981", "005982", "005985", "005986", "005987", "005988", "005991", "005993", "005994", "005997", "005999", "006001", "006003", "006004", "006005", "006011", "006015", "006016", "006025", "006029", "006034", "006050", "006051", "006052", "006053", "006054", "006055", "006056", "006057", "006058", "006059", "006061", "006062", "006063", "006064", "006065", "006066", "006067", "006068", "006069", "006070", "006071", "006073", "006074", "006075", "006077", "006078", "006079", "006081", "006082", "006083", "006085", "006086", "006088", "006089", "006090", "006091", "006093", "006095", "006097", "006098", "006100", "006101", "006107", "006108", "006109", "006110", "006111", "006112", "006113", "006120", "006121", "006129", "006130", "006137", "006140", "006160", "006161", "006162", "006163", "006164", "006165", "006166", "006167", "006168", "006169", "006170", "006171", "006173", "006174", "006175", "006176", "006177", "006178", "006179", "006180", "006181", "006182", "006183", "006184", "006186", "006188", "006189", "006190", "006192", "006193", "006195", "006196", "006198", "006199", "006202", "006203", "006206", "006207", "006208", "006209", "006210", "006212", "006213", "006217", "006219", "006220", "006223", "006227", "006228", "006230", "006235", "006237", "006241", "006243", "006251", "006270", "006271", "006272", "006273", "006274", "006275", "006276", "006277", "006278", "006279", "006280", "006281", "006282", "006283", "006285", "006286", "006287", "006288", "006289", "006290", "006293", "006294", "006295", "006296", "006297", "006298", "006299", "006300", "006303", "006304", "006305", "006306", "006308", "006309", "006310", "006311", "006312", "006314", "006315", "006319", "006321", "006322", "006323", "006324", "006327", "006330", "006331", "006332", "006335", "006343", "006346", "006347", "006351", "006355", "006362", "006380", "006381", "006382", "006383", "006384", "006385", "006386", "006387", "006388", "006389", "006390", "006391", "006392", "006393", "006394", "006396", "006397", "006398", "006399", "006400", "006401", "006402", "006403", "006405", "006406", "006408", "006409", "006410", "006411", "006414", "006415", "006416", "006418", "006419", "006421", "006422", "006423", "006425", "006426", "006428", "006432", "006433", "006434", "006436", "006437", "006440", "006442", "006446", "006447", "006451", "006455", "006457", "006460", "006464", "006474", "006490", "006491", "006492", "006493", "006494", "006495", "006496", "006497", "006498", "006499", "006500", "006501", "006502", "006503", "006504", "006505", "006506", "006507", "006508", "006510", "006512", "006513", "006514", "006515", "006516", "006517", "006518", "006520", "006521", "006524", "006525", "006526", "006527", "006528", "006531", "006533", "006534", "006535", "006536", "006539", "006541", "006544", "006546", "006547", "006548", "006550", "006555", "006557", "006559", "006563", "006565", "006567", "006575", "006577", "006586", "006600", "006601", "006602", "006603", "006604", "006605", "006606", "006607", "006608", "006609", "006610", "006611", "006612", "006613", "006614", "006615", "006616", "006618", "006619", "006620", "006621", "006622", "006624", "006625", "006626", "006627", "006629", "006631", "006632", "006633", "006634", "006635", "006638", "006639", "006640", "006641", "006642", "006646", "006647", "006649", "006651", "006652", "006656", "006658", "006659", "006661", "006663", "006666", "006668", "006670", "006673", "006678", "006681", "006689", "006693", "006710", "006711", "006712", "006713", "006714", "006715", "006716", "006717", "006718", "006719", "006720", "006721", "006722", "006723", "006725", "006726", "006727", "006728", "006729", "006730", "006732", "006734", "006735", "006736", "006737", "006738", "006739", "006742", "006743", "006744", "006746", "006747", "006748", "006749", "006750", "006752", "006756", "006757", "006758", "006759", "006761", "006762", "006765", "006767", "006769", "006771", "006772", "006778", "006779", "006783", "006785", "006788", "006798", "006799", "006804", "006820", "006821", "006822", "006823", "006824", "006825", "006826", "006827", "006828", "006829", "006830", "006831", "006833", "006834", "006835", "006836", "006837", "006838", "006839", "006840", "006841", "006843", "006845", "006846", "006847", "006848", "006849", "006850", "006852", "006853", "006854", "006857", "006858", "006859", "006860", "006861", "006863", "006865", "006866", "006867", "006870", "006873", "006874", "006875", "006877", "006880", "006884", "006887", "006889", "006892", "006894", "006897", "006903", "006904", "006915", "006930", "006931", "006932", "006933", "006934", "006935", "006936", "006937", "006938", "006939", "006940", "006941", "006942", "006943", "006944", "006945", "006946", "006948", "006949", "006950", "006951", "006952", "006953", "006955", "006956", "006957", "006959", "006960", "006961", "006962", "006963", "006965", "006967", "006969", "006970", "006973", "006974", "006975", "006977", "006978", "006980", "006983", "006984", "006985", "006986", "006990", "006992", "006994", "006998", "007002", "007008", "007009", "007013", "007017", "007029", "007040", "007041", "007042", "007043", "007044", "007045", "007046", "007047", "007048", "007049", "007050", "007051", "007052", "007053", "007054", "007055", "007056", "007057", "007058", "007062", "007063", "007064", "007065", "007066", "007067", "007068", "007069", "007071", "007072", "007073", "007074", "007076", "007077", "007079", "007080", "007081", "007082", "007083", "007084", "007086", "007090", "007094", "007095", "007096", "007099", "007102", "007103", "007104", "007106", "007110", "007113", "007119", "007121", "007128", "007138", "007150", "007151", "007152", "007153", "007154", "007155", "007156", "007157", "007158", "007159", "007160", "007161", "007162", "007163", "007164", "007166", "007167", "007168", "007169", "007170", "007171", "007172", "007173", "007175", "007177", "007178", "007179", "007180", "007183", "007184", "007186", "007187", "007188", "007189", "007191", "007192", "007193", "007196", "007197", "007198", "007200", "007201", "007204", "007206", "007207", "007212", "007216", "007218", "007219", "007222", "007224", "007227", "007230", "007235", "007240", "007260", "007261", "007262", "007263", "007264", "007265", "007266", "007267", "007268", "007269", "007270", "007271", "007272", "007273", "007274", "007276", "007277", "007278", "007279", "007280", "007281", "007282", "007283", "007284", "007286", "007288", "007289", "007290", "007292", "007293", "007294", "007295", "007296", "007299", "007300", "007302", "007303", "007305", "007306", "007307", "007310", "007312", "007315", "007316", "007318", "007320", "007322", "007324", "007327", "007336", "007338", "007339", "007343", "007346", "007354", "007370", "007371", "007372", "007373", "007374", "007375", "007376", "007377", "007378", "007379", "007380", "007381", "007382", "007383", "007384", "007385", "007386", "007388", "007389", "007390", "007391", "007392", "007393", "007395", "007396", "007397", "007399", "007402", "007403", "007405", "007406", "007407", "007408", "007409", "007411", "007412", "007413", "007414", "007416", "007417", "007422", "007423", "007426", "007427", "007428", "007430", "007434", "007437", "007439", "007440", "007442", "007448", "007455", "007457", "007462", "007480", "007481", "007482", "007483", "007484", "007485", "007486", "007487", "007488", "007489", "007490", "007491", "007492", "007494", "007495", "007496", "007497", "007498", "007499", "007500", "007502", "007503", "007504", "007505", "007507", "007508", "007509", "007510", "007511", "007512", "007514", "007516", "007517", "007519", "007520", "007523", "007525", "007526", "007527", "007529", "007533", "007534", "007536", "007537", "007538", "007540", "007541", "007544", "007548", "007550", "007558", "007559", "007560", "007567", "007573", "007590", "007591", "007592", "007593", "007594", "007595", "007596", "007597", "007598", "007599", "007600", "007601", "007602", "007603", "007604", "007605", "007606", "007607", "007609", "007610", "007612", "007613", "007614", "007615", "007616", "007618", "007619", "007620", "007621", "007622", "007623", "007624", "007627", "007629", "007630", "007631", "007634", "007636", "007637", "007638", "007640", "007643", "007646", "007647", "007649", "007652", "007654", "007657", "007658", "007660", "007664", "007665", "007670", "007675", "007687", "007700", "007701", "007702", "007703", "007704", "007705", "007706", "007707", "007708", "007709", "007710", "007711", "007712", "007714", "007715", "007716", "007717", "007718", "007719", "007720", "007721", "007723", "007724", "007725", "007726", "007727", "007728", "007730", "007731", "007732", "007733", "007734", "007737", "007738", "007740", "007742", "007743", "007745", "007747", "007748", "007751", "007753", "007754", "007755", "007757", "007760", "007767", "007768", "007769", "007773", "007774", "007776", "007780", "007783", "007794", "007810", "007811", "007812", "007813", "007814", "007815", "007816", "007817", "007818", "007819", "007820", "007821", "007822", "007824", "007825", "007826", "007827", "007828", "007829", "007830", "007831", "007833", "007835", "007836", "007837", "007838", "007839", "007841", "007842", "007844", "007846", "007847", "007848", "007849", "007852", "007853", "007854", "007856", "007857", "007858", "007860", "007863", "007864", "007867", "007869", "007870", "007871", "007874", "007876", "007880", "007885", "007886", "007890", "007896", "007901", "007920", "007921", "007922", "007923", "007924", "007925", "007926", "007927", "007928", "007929", "007930", "007932", "007933", "007934", "007935", "007936", "007937", "007938", "007939", "007940", "007941", "007943", "007944", "007946", "007947", "007948", "007949", "007950", "007951", "007953", "007954", "007956", "007957", "007959", "007963", "007964", "007965", "007966", "007968", "007969", "007971", "007972", "007977", "007978", "007979", "007980", "007984", "007985", "007988", "007992", "007997", "007999", "008002", "008006", "008012", "008030", "008031", "008032", "008033", "008034", "008035", "008036", "008037", "008038", "008039", "008040", "008041", "008042", "008043", "008044", "008045", "008046", "008047", "008048", "008050", "008051", "008052", "008053", "008054", "008056", "008057", "008059", "008061", "008062", "008063", "008066", "008067", "008068", "008069", "008070", "008071", "008072", "008074", "008076", "008077", "008081", "008082", "008083", "008084", "008085", "008090", "008094", "008096", "008099", "008101", "008102", "008107", "008116", "008118", "008126", "008140", "008141", "008142", "008143", "008144", "008145", "008146", "008147", "008148", "008149", "008150", "008151", "008152", "008153", "008154", "008155", "008156", "008158", "008159", "008160", "008162", "008164", "008165", "008166", "008167", "008168", "008169", "008170", "008171", "008173", "008174", "008176", "008178", "008179", "008181", "008182", "008183", "008185", "008186", "008187", "008191", "008192", "008193", "008195", "008196", "008200", "008202", "008205", "008208", "008211", "008217", "008218", "008220", "008228", "008230", "008250", "008251", "008252", "008253", "008254", "008255", "008256", "008257", "008258", "008259", "008260", "008261", "008262", "008263", "008264", "008265", "008266", "008267", "008268", "008270", "008271", "008272", "008273", "008275", "008276", "008278", "008279", "008280", "008281", "008282", "008285", "008286", "008288", "008289", "008290", "008291", "008292", "008293", "008296", "008298", "008301", "008303", "008305", "008307", "008309", "008311", "008313", "008314", "008318", "008321", "008323", "008325", "008337", "008339", "008348", "008360", "008361", "008362", "008363", "008364", "008365", "008366", "008367", "008368", "008369", "008370", "008371", "008372", "008373", "008374", "008376", "008377", "008378", "008379", "008380", "008381", "008382", "008383", "008385", "008387", "008388", "008389", "008391", "008392", "008393", "008395", "008396", "008397", "008399", "008401", "008402", "008405", "008407", "008408", "008409", "008410", "008412", "008413", "008418", "008419", "008420", "008421", "008422", "008427", "008434", "008435", "008439", "008446", "008447", "008450", "008470", "008471", "008472", "008473", "008474", "008475", "008476", "008477", "008478", "008479", "008480", "008481", "008482", "008483", "008484", "008486", "008487", "008488", "008489", "008490", "008491", "008492", "008493", "008494", "008495", "008497", "008499", "008500", "008501", "008502", "008503", "008505", "008506", "008509", "008510", "008511", "008512", "008513", "008517", "008519", "008520", "008521", "008522", "008523", "008525", "008530", "008536", "008537", "008539", "008540", "008541", "008547", "008557", "008558", "008565", "008580", "008581", "008582", "008583", "008584", "008585", "008586", "008587", "008588", "008589", "008590", "008591", "008592", "008594", "008595", "008596", "008597", "008598", "008599", "008600", "008601", "008602", "008603", "008604", "008605", "008607", "008608", "008610", "008611", "008612", "008613", "008614", "008615", "008618", "008622", "008623", "008624", "008625", "008626", "008628", "008632", "008634", "008635", "008636", "008638", "008643", "008644", "008646", "008647", "008653", "008654", "008655", "008663", "008667", "008675", "008690", "008691", "008692", "008693", "008694", "008695", "008696", "008697", "008698", "008699", "008700", "008701", "008702", "008703", "008705", "008706", "008707", "008708", "008709", "008711", "008712", "008713", "008714", "008716", "008717", "008718", "008719", "008721", "008722", "008724", "008725", "008726", "008727", "008728", "008730", "008731", "008735", "008736", "008737", "008738", "008741", "008742", "008743", "008745", "008747", "008752", "008755", "008758", "008759", "008760", "008764", "008769", "008775", "008779", "008783", "008800", "008801", "008802", "008803", "008804", "008805", "008806", "008807", "008808", "008809", "008810", "008811", "008812", "008813", "008814", "008815", "008816", "008817", "008818", "008820", "008821", "008823", "008824", "008826", "008827", "008828", "008829", "008830", "008831", "008833", "008834", "008835", "008836", "008837", "008840", "008842", "008846", "008847", "008848", "008849", "008851", "008852", "008853", "008855", "008858", "008861", "008863", "008864", "008866", "008870", "008872", "008877", "008881", "008886", "008894", "008910", "008911", "008912", "008913", "008914", "008915", "008916", "008917", "008918", "008919", "008920", "008922", "008923", "008924", "008925", "008926", "008927", "008928", "008929", "008930", "008931", "008932", "008933", "008935", "008936", "008937", "008938", "008940", "008941", "008945", "008946", "008947", "008948", "008949", "008950", "008952", "008953", "008956", "008957", "008958", "008961", "008964", "008965", "008967", "008969", "008970", "008975", "008976", "008979", "008982", "008983", "008988", "008992", "008998", "009001", "009020", "009021", "009022", "009023", "009024", "009025", "009026", "009027", "009028", "009029", "009031", "009032", "009033", "009034", "009035", "009036", "009037", "009038", "009039", "009040", "009042", "009043", "009044", "009045", "009046", "009047", "009049", "009051", "009052", "009053", "009054", "009055", "009056", "009059", "009061", "009062", "009064", "009067", "009068", "009069", "009071", "009072", "009077", "009078", "009079", "009080", "009083", "009085", "009089", "009090", "009095", "009097", "009102", "009108", "009112", "009130", "009131", "009132", "009133", "009134", "009135", "009136", "009137", "009138", "009139", "009141", "009142", "009143", "009144", "009145", "009146", "009147", "009148", "009149", "009150", "009151", "009153", "009154", "009155", "009156", "009158", "009159", "009160", "009161", "009162", "009163", "009164", "009165", "009169", "009170", "009172", "009174", "009175", "009178", "009179", "009180", "009182", "009183", "009187", "009189", "009190", "009191", "009195", "009198", "009200", "009201", "009207", "009216", "009217", "009223", "009240", "009241", "009242", "009243", "009244", "009245", "009246", "009247", "009248", "009249", "009250", "009251", "009252", "009253", "009254", "009255", "009256", "009258", "009259", "009260", "009262", "009263", "009264", "009266", "009267", "009268", "009269", "009270", "009271", "009272", "009275", "009276", "009278", "009279", "009280", "009282", "009286", "009287", "009288", "009289", "009290", "009291", "009292", "009297", "009298", "009300", "009303", "009305", "009309", "009314", "009315", "009318", "009324", "009328", "009331", "009350", "009351", "009352", "009353", "009354", "009355", "009356", "009357", "009358", "009359", "009361", "009362", "009363", "009364", "009365", "009366", "009367", "009368", "009369", "009370", "009371", "009372", "009373", "009374", "009376", "009378", "009379", "009380", "009381", "009382", "009383", "009384", "009387", "009388", "009390", "009392", "009393", "009394", "009395", "009397", "009401", "009403", "009404", "009405", "009409", "009412", "009415", "009417", "009418", "009422", "009426", "009428", "009431", "009437", "009440", "009460", "009461", "009462", "009463", "009464", "009465", "009466", "009467", "009468", "009469", "009470", "009471", "009472", "009473", "009474", "009475", "009477", "009478", "009479", "009481", "009482", "009483", "009484", "009485", "009487", "009488", "009489", "009490", "009493", "009494", "009495", "009496", "009497", "009498", "009500", "009502", "009504", "009505", "009508", "009509", "009510", "009512", "009514", "009516", "009517", "009520", "009521", "009523", "009524", "009536", "009537", "009539", "009543", "009544", "009550", "009570", "009571", "009572", "009573", "009574", "009575", "009576", "009577", "009578", "009579", "009580", "009581", "009582", "009584", "009585", "009586", "009587", "009588", "009589", "009590", "009591", "009592", "009593", "009594", "009595", "009596", "009598", "009600", "009601", "009602", "009605", "009606", "009608", "009609", "009610", "009612", "009613", "009614", "009615", "009616", "009620", "009623", "009626", "009627", "009629", "009631", "009633", "009634", "009637", "009641", "009642", "009649", "009652", "009658", "009667", "009680", "009681", "009682", "009683", "009684", "009685", "009686", "009687", "009688", "009689", "009690", "009691", "009692", "009693", "009694", "009696", "009697", "009698", "009699", "009701", "009702", "009703", "009705", "009706", "009707", "009708", "009709", "009710", "009711", "009713", "009715", "009717", "009718", "009719", "009720", "009722", "009723", "009725", "009726", "009728", "009731", "009733", "009736", "009737", "009738", "009741", "009743", "009745", "009749", "009754", "009757", "009758", "009761", "009769", "009775", "009790", "009791", "009792", "009793", "009794", "009795", "009796", "009797", "009798", "009799", "009800", "009801", "009802", "009803", "009804", "009805", "009806", "009807", "009809", "009810", "009812", "009813", "009814", "009815", "009817", "009818", "009819", "009820", "009821", "009823", "009826", "009827", "009828", "009829", "009831", "009832", "009834", "009836", "009837", "009839", "009841", "009843", "009844", "009846", "009848", "009850", "009851", "009853", "009856", "009863", "009866", "009868", "009873", "009878", "009882", "009900", "009901", "009902", "009903", "009904", "009905", "009906", "009907", "009908", "009909", "009910", "009911", "009912", "009913", "009914", "009915", "009916", "009918", "009919", "009920", "009921", "009922", "009923", "009924", "009926", "009928", "009929", "009931", "009933", "009934", "009936", "009937", "009938", "009939", "009941", "009942", "009943", "009944", "009945", "009946", "009950", "009951", "009952", "009953", "009959", "009962", "009964", "009965", "009968", "009971", "009972", "009979", "009980", "009989", "009992", "010010", "010011", "010012", "010013", "010014", "010015", "010016", "010017", "010018", "010019", "010020", "010021", "010022", "010023", "010024", "010025", "010026", "010028", "010029", "010030", "010031", "010033", "010034", "010035", "010036", "010038", "010039", "010040", "010041", "010042", "010043", "010045", "010046", "010048", "010050", "010053", "010054", "010055", "010056", "010057", "010060", "010062", "010064", "010068", "010069", "010072", "010076", "010077", "010079", "010086", "010088", "010089", "010096", "010099", "010101", "010120", "010121", "010122", "010123", "010124", "010125", "010126", "010127", "010128", "010129", "010130", "010131", "010132", "010134", "010135", "010136", "010137", "010138", "010139", "010140", "010142", "010143", "010144", "010145", "010146", "010147", "010148", "010150", "010151", "010152", "010154", "010155", "010156", "010158", "010160", "010161", "010166", "010167", "010168", "010169", "010170", "010171", "010174", "010177", "010178", "010180", "010183", "010187", "010188", "010190", "010193", "010196", "010200", "010203", "010214", "010230", "010231", "010232", "010233", "010234", "010235", "010236", "010237", "010238", "010239", "010240", "010241", "010242", "010243", "010245", "010246", "010247", "010248", "010249", "010250", "010251", "010254", "010255", "010256", "010257", "010258", "010259", "010260", "010261", "010262", "010264", "010265", "010266", "010268", "010270", "010273", "010274", "010277", "010278", "010279", "010280", "010282", "010283", "010286", "010288", "010292", "010294", "010298", "010299", "010303", "010305", "010306", "010316", "010319", "010326", "010340", "010341", "010342", "010343", "010344", "010345", "010346", "010347", "010348", "010349", "010350", "010351", "010352", "010353", "010354", "010355", "010356", "010357", "010358", "010360", "010361", "010362", "010363", "010364", "010365", "010366", "010369", "010370", "010371", "010372", "010373", "010374", "010375", "010378", "010380", "010382", "010385", "010386", "010388", "010389", "010393", "010394", "010397", "010398", "010399", "010402", "010403", "010406", "010409", "010414", "010417", "010419", "010422", "010428", "010435", "010450", "010451", "010452", "010453", "010454", "010455", "010456", "010457", "010458", "010459", "010460", "010462", "010463", "010464", "010465", "010466", "010467", "010468", "010469", "010470", "010471", "010472", "010475", "010476", "010477", "010478", "010479", "010480", "010482", "010483", "010484", "010485", "010486", "010489", "010490", "010491", "010492", "010493", "010494", "010499", "010500", "010501", "010502", "010508", "010509", "010510", "010511", "010512", "010515", "010520", "010527", "010529", "010531", "010535", "010541", "010560", "010561", "010562", "010563", "010564", "010565", "010566", "010567", "010568", "010569", "010570", "010571", "010572", "010573", "010574", "010575", "010576", "010577", "010579", "010580", "010582", "010583", "010584", "010585", "010586", "010587", "010588", "010590", "010591", "010592", "010593", "010594", "010595", "010597", "010600", "010601", "010602", "010604", "010605", "010607", "010612", "010613", "010614", "010615", "010618", "010621", "010625", "010626", "010628", "010631", "010632", "010635", "010644", "010647", "010656", "010670", "010671", "010672", "010673", "010674", "010675", "010676", "010677", "010678", "010679", "010680", "010681", "010682", "010684", "010685", "010686", "010687", "010688", "010689", "010690", "010691", "010692", "010693", "010694", "010696", "010697", "010699", "010701", "010702", "010703", "010706", "010707", "010708", "010709", "010710", "010711", "010712", "010713", "010715", "010719", "010724", "010726", "010727", "010728", "010729", "010732", "010733", "010735", "010738", "010740", "010747", "010748", "010753", "010755", "010764", "010780", "010781", "010782", "010783", "010784", "010785", "010786", "010787", "010788", "010789", "010790", "010791", "010792", "010793", "010794", "010795", "010796", "010797", "010799", "010801", "010802", "010803", "010805", "010806", "010807", "010808", "010809", "010810", "010811", "010812", "010813", "010814", "010815", "010816", "010821", "010822", "010823", "010825", "010826", "010828", "010831", "010833", "010837", "010838", "010839", "010840", "010843", "010847", "010848", "010852", "010854", "010855", "010860", "010861", "010874", "010890", "010891", "010892", "010893", "010894", "010895", "010896", "010897", "010898", "010899", "010900", "010902", "010903", "010904", "010905", "010906", "010907", "010908", "010909", "010910", "010911", "010913", "010914", "010915", "010916", "010918", "010919", "010920", "010921", "010922", "010923", "010924", "010925", "010928", "010930", "010933", "010934", "010935", "010938", "010939", "010943", "010944", "010946", "010947", "010949", "010950", "010952", "010956", "010958", "010960", "010962", "010963", "010973", "010974", "010986", "011000", "011001", "011002", "011003", "011004", "011005", "011006", "011007", "011008", "011009", "011010", "011012", "011013", "011014", "011015", "011016", "011017", "011018", "011019", "011020", "011021", "011022", "011024", "011025", "011026", "011027", "011028", "011030", "011031", "011032", "011033", "011037", "011038", "011039", "011041", "011042", "011045", "011046", "011047", "011048", "011050", "011052", "011054", "011055", "011058", "011062", "011063", "011064", "011066", "011072", "011075", "011077", "011080", "011084", "011099", "011110", "011111", "011112", "011113", "011114", "011115", "011116", "011117", "011118", "011119", "011120", "011121", "011122", "011124", "011125", "011126", "011127", "011128", "011129", "011131", "011132", "011133", "011134", "011135", "011136", "011137", "011138", "011140", "011141", "011143", "011144", "011146", "011147", "011149", "011151", "011152", "011153", "011155", "011157", "011159", "011162", "011163", "011167", "011168", "011169", "011174", "011175", "011178", "011179", "011181", "011182", "011183", "011193", "011194", "011205", "011220", "011221", "011222", "011223", "011224", "011225", "011226", "011227", "011228", "011229", "011230", "011231", "011232", "011233", "011234", "011235", "011237", "011238", "011239", "011240", "011242", "011243", "011244", "011245", "011246", "011247", "011249", "011250", "011251", "011252", "011255", "011257", "011258", "011259", "011260", "011262", "011263", "011267", "011268", "011269", "011270", "011271", "011272", "011275", "011279", "011281", "011282", "011283", "011288", "011292", "011297", "011299", "011305", "011309", "011317", "011330", "011331", "011332", "011333", "011334", "011335", "011336", "011337", "011338", "011339", "011340", "011341", "011342", "011343", "011344", "011345", "011346", "011347", "011348", "011351", "011353", "011354", "011355", "011356", "011357", "011358", "011359", "011360", "011361", "011362", "011365", "011366", "011367", "011368", "011370", "011372", "011373", "011374", "011376", "011379", "011381", "011382", "011383", "011386", "011389", "011390", "011392", "011394", "011396", "011401", "011404", "011409", "011413", "011415", "011420", "011440", "011441", "011442", "011443", "011444", "011445", "011446", "011447", "011448", "011449", "011450", "011451", "011452", "011454", "011455", "011456", "011457", "011458", "011459", "011460", "011462", "011464", "011465", "011466", "011467", "011468", "011469", "011472", "011473", "011474", "011475", "011476", "011477", "011479", "011483", "011484", "011486", "011487", "011488", "011489", "011490", "011493", "011494", "011496", "011499", "011500", "011501", "011502", "011503", "011512", "011513", "011517", "011520", "011522", "011532", "011550", "011551", "011552", "011553", "011554", "011555", "011556", "011557", "011558", "011559", "011560", "011561", "011562", "011563", "011564", "011565", "011567", "011568", "011569", "011570", "011571", "011572", "011573", "011574", "011575", "011576", "011579", "011580", "011581", "011583", "011584", "011586", "011587", "011588", "011592", "011593", "011596", "011597", "011598", "011599", "011600", "011601", "011604", "011606", "011607", "011611", "011613", "011615", "011618", "011622", "011624", "011627", "011631", "011634", "011646", "011660", "011661", "011662", "011663", "011664", "011665", "011666", "011667", "011668", "011669", "011670", "011671", "011672", "011674", "011675", "011676", "011677", "011678", "011679", "011681", "011682", "011684", "011685", "011686", "011687", "011688", "011689", "011690", "011692", "011693", "011695", "011697", "011698", "011699", "011700", "011701", "011702", "011703", "011704", "011708", "011710", "011712", "011716", "011717", "011718", "011723", "011724", "011726", "011729", "011732", "011738", "011739", "011741", "011749", "011751", "011770", "011771", "011772", "011773", "011774", "011775", "011776", "011777", "011778", "011779", "011780", "011782", "011783", "011784", "011785", "011786", "011787", "011788", "011789", "011792", "011793", "011794", "011795", "011796", "011797", "011798", "011799", "011800", "011801", "011802", "011803", "011804", "011806", "011808", "011811", "011815", "011816", "011817", "011818", "011819", "011821", "011822", "011826", "011827", "011828", "011831", "011834", "011835", "011837", "011842", "011847", "011848", "011851", "011858", "011868", "011880", "011881", "011882", "011883", "011884", "011885", "011886", "011887", "011888", "011889", "011890", "011891", "011892", "011893", "011894", "011895", "011897", "011898", "011899", "011902", "011903", "011904", "011905", "011906", "011907", "011908", "011909", "011910", "011913", "011914", "011915", "011916", "011917", "011918", "011923", "011924", "011925", "011926", "011927", "011929", "011930", "011931", "011934", "011937", "011938", "011942", "011947", "011948", "011949", "011951", "011956", "011959", "011961", "011964", "011975", "011990", "011991", "011992", "011993", "011994", "011995", "011996", "011997", "011998", "011999", "012000", "012001", "012003", "012004", "012005", "012006", "012007", "012008", "012009", "012010", "012011", "012012", "012013", "012014", "012015", "012017", "012018", "012020", "012021", "012022", "012025", "012026", "012027", "012029", "012030", "012031", "012032", "012033", "012037", "012038", "012040", "012041", "012043", "012044", "012049", "012052", "012053", "012058", "012059", "012062", "012067", "012068", "012071", "012073", "012086", "012100", "012101", "012102", "012103", "012104", "012105", "012106", "012107", "012108", "012109", "012110", "012111", "012112", "012114", "012115", "012116", "012117", "012118", "012119", "012120", "012121", "012122", "012123", "012124", "012125", "012128", "012129", "012130", "012132", "012134", "012135", "012137", "012138", "012139", "012140", "012141", "012143", "012145", "012146", "012147", "012151", "012154", "012155", "012156", "012159", "012160", "012163", "012164", "012167", "012174", "012176", "012178", "012184", "012187", "012192", "012210", "012211", "012212", "012213", "012214", "012215", "012216", "012217", "012218", "012219", "012220", "012221", "012223", "012224", "012225", "012226", "012227", "012228", "012229", "012230", "012231", "012232", "012233", "012234", "012235", "012236", "012237", "012240", "012242", "012243", "012245", "012246", "012247", "012248", "012251", "012253", "012254", "012255", "012257", "012258", "012261", "012262", "012263", "012264", "012267", "012271", "012276", "012278", "012279", "012280", "012287", "012289", "012292", "012295", "012306", "012320", "012321", "012322", "012323", "012324", "012325", "012326", "012327", "012328", "012329", "012331", "012332", "012333", "012334", "012335", "012336", "012337", "012338", "012339", "012340", "012341", "012342", "012343", "012344", "012346", "012347", "012348", "012350", "012351", "012352", "012353", "012355", "012356", "012359", "012360", "012362", "012364", "012365", "012367", "012368", "012370", "012371", "012372", "012375", "012376", "012382", "012385", "012386", "012388", "012390", "012396", "012398", "012405", "012409", "012416", "012430", "012431", "012432", "012433", "012434", "012435", "012436", "012437", "012438", "012439", "012440", "012441", "012442", "012444", "012445", "012446", "012447", "012448", "012449", "012450", "012451", "012452", "012453", "012454", "012455", "012457", "012459", "012461", "012464", "012465", "012466", "012467", "012468", "012469", "012471", "012473", "012474", "012475", "012477", "012478", "012480", "012484", "012485", "012486", "012489", "012494", "012496", "012497", "012499", "012500", "012501", "012502", "012514", "012517", "012525", "012540", "012541", "012542", "012543", "012544", "012545", "012546", "012547", "012548", "012549", "012550", "012551", "012552", "012553", "012554", "012555", "012556", "012558", "012559", "012561", "012562", "012564", "012565", "012566", "012567", "012568", "012569", "012570", "012572", "012574", "012575", "012576", "012577", "012578", "012580", "012581", "012582", "012585", "012588", "012589", "012591", "012592", "012594", "012595", "012596", "012601", "012603", "012606", "012608", "012610", "012611", "012614", "012625", "012628", "012637", "012650", "012651", "012652", "012653", "012654", "012655", "012656", "012657", "012658", "012659", "012660", "012661", "012663", "012664", "012665", "012666", "012667", "012668", "012669", "012670", "012672", "012673", "012674", "012675", "012676", "012677", "012679", "012681", "012682", "012683", "012684", "012686", "012688", "012689", "012690", "012692", "012695", "012696", "012697", "012698", "012702", "012703", "012704", "012707", "012708", "012711", "012715", "012717", "012719", "012722", "012724", "012729", "012731", "012736", "012742", "012760", "012761", "012762", "012763", "012764", "012765", "012766", "012767", "012768", "012769", "012771", "012772", "012773", "012774", "012775", "012776", "012777", "012778", "012779", "012780", "012781", "012782", "012783", "012785", "012786", "012787", "012789", "012790", "012792", "012794", "012795", "012796", "012797", "012799", "012800", "012802", "012804", "012807", "012808", "012809", "012810", "012811", "012813", "012816", "012818", "012822", "012825", "012827", "012828", "012834", "012837", "012838", "012848", "012849", "012859", "012870", "012871", "012872", "012873", "012874", "012875", "012876", "012877", "012878", "012879", "012880", "012881", "012882", "012883", "012884", "012886", "012887", "012888", "012889", "012890", "012891", "012892", "012893", "012894", "012896", "012898", "012899", "012902", "012904", "012905", "012906", "012907", "012908", "012909", "012910", "012911", "012914", "012915", "012916", "012919", "012920", "012921", "012925", "012927", "012928", "012931", "012932", "012936", "012939", "012940", "012944", "012945", "012951", "012956", "012964", "012980", "012981", "012982", "012983", "012984", "012985", "012986", "012987", "012988", "012989", "012990", "012991", "012992", "012994", "012995", "012996", "012997", "012998", "012999", "013000", "013002", "013003", "013005", "013006", "013007", "013008", "013009", "013010", "013012", "013013", "013015", "013016", "013017", "013018", "013020", "013022", "013023", "013024", "013025", "013026", "013032", "013034", "013035", "013037", "013039", "013040", "013043", "013046", "013047", "013051", "013054", "013056", "013063", "013065", "013077", "013090", "013091", "013092", "013093", "013094", "013095", "013096", "013097", "013098", "013099", "013100", "013102", "013103", "013104", "013105", "013106", "013107", "013108", "013109", "013111", "013112", "013113", "013114", "013116", "013117", "013118", "013119", "013121", "013123", "013125", "013126", "013127", "013128", "013129", "013131", "013133", "013134", "013135", "013136", "013137", "013141", "013143", "013144", "013147", "013148", "013152", "013154", "013156", "013157", "013160", "013163", "013168", "013172", "013176", "013180", "013200", "013201", "013202", "013203", "013204", "013205", "013206", "013207", "013208", "013209", "013210", "013211", "013212", "013213", "013214", "013215", "013217", "013218", "013219", "013220", "013221", "013222", "013223", "013224", "013225", "013228", "013229", "013230", "013231", "013234", "013235", "013236", "013237", "013239", "013241", "013243", "013244", "013246", "013247", "013248", "013251", "013253", "013256", "013257", "013259", "013261", "013262", "013263", "013267", "013271", "013275", "013279", "013284", "013286", "013295", "013310", "013311", "013312", "013313", "013314", "013315", "013316", "013317", "013318", "013319", "013320", "013321", "013323", "013324", "013325", "013326", "013327", "013328", "013329", "013330", "013331", "013333", "013335", "013336", "013337", "013338", "013339", "013340", "013341", "013343", "013344", "013345", "013346", "013348", "013353", "013355", "013356", "013357", "013358", "013359", "013363", "013365", "013367", "013368", "013369", "013370", "013371", "013375", "013376", "013382", "013386", "013389", "013390", "013391", "013400", "013420", "013421", "013422", "013423", "013424", "013425", "013426", "013427", "013428", "013429", "013430", "013431", "013432", "013433", "013434", "013435", "013436", "013437", "013438", "013440", "013442", "013443", "013444", "013445", "013446", "013447", "013449", "013451", "013452", "013454", "013456", "013457", "013458", "013459", "013461", "013463", "013464", "013465", "013466", "013469", "013470", "013471", "013473", "013475", "013476", "013481", "013484", "013486", "013488", "013492", "013493", "013497", "013505", "013506", "013519", "013530", "013531", "013532", "013533", "013534", "013535", "013536", "013537", "013538", "013539", "013540", "013541", "013542", "013543", "013544", "013546", "013547", "013548", "013549", "013550", "013551", "013553", "013554", "013555", "013556", "013557", "013559", "013563", "013564", "013565", "013566", "013567", "013568", "013569", "013571", "013572", "013573", "013574", "013577", "013579", "013582", "013584", "013586", "013587", "013588", "013590", "013594", "013595", "013597", "013600", "013606", "013609", "013614", "013615", "013620", "013640", "013641", "013642", "013643", "013644", "013645", "013646", "013647", "013648", "013649", "013650", "013651", "013652", "013653", "013654", "013655", "013656", "013658", "013659", "013660", "013661", "013662", "013663", "013665", "013666", "013667", "013669", "013671", "013672", "013673", "013675", "013676", "013677", "013678", "013680", "013681", "013683", "013684", "013685", "013687", "013690", "013692", "013695", "013696", "013699", "013701", "013704", "013705", "013707", "013710", "013711", "013717", "013720", "013728", "013736", "013750", "013751", "013752", "013753", "013754", "013755", "013756", "013757", "013758", "013759", "013760", "013761", "013763", "013764", "013765", "013766", "013767", "013768", "013769", "013770", "013772", "013773", "013774", "013775", "013776", "013777", "013779", "013780", "013782", "013783", "013785", "013786", "013788", "013789", "013791", "013792", "013795", "013796", "013798", "013799", "013800", "013801", "013804", "013805", "013807", "013810", "013811", "013814", "013817", "013826", "013828", "013829", "013832", "013836", "013849", "013860", "013861", "013862", "013863", "013864", "013865", "013866", "013867", "013868", "013869", "013870", "013871", "013872", "013873", "013874", "013875", "013876", "013877", "013878", "013881", "013882", "013884", "013885", "013886", "013887", "013888", "013889", "013891", "013892", "013893", "013894", "013895", "013896", "013899", "013900", "013901", "013905", "013906", "013908", "013909", "013910", "013913", "013914", "013917", "013919", "013923", "013926", "013927", "013929", "013930", "013938", "013939", "013946", "013949", "013953", "013970", "013971", "013972", "013973", "013974", "013975", "013976", "013977", "013978", "013979", "013980", "013982", "013983", "013984", "013985", "013986", "013987", "013988", "013989", "013990", "013992", "013993", "013994", "013995", "013996", "013998", "013999", "014000", "014002", "014003", "014004", "014005", "014008", "014009", "014010", "014014", "014015", "014016", "014017", "014018", "014021", "014022", "014025", "014026", "014028", "014031", "014037", "014038", "014039", "014041", "014044", "014047", "014055", "014059", "014067", "014080", "014081", "014082", "014083", "014084", "014085", "014086", "014087", "014088", "014089", "014090", "014091", "014092", "014093", "014094", "014095", "014096", "014097", "014098", "014101", "014103", "014104", "014105", "014106", "014107", "014108", "014109", "014110", "014111", "014113", "014115", "014117", "014118", "014119", "014120", "014122", "014123", "014124", "014126", "014129", "014130", "014131", "014134", "014135", "014139", "014140", "014144", "014145", "014149", "014153", "014157", "014159", "014161", "014164", "014179", "014190", "014191", "014192", "014193", "014194", "014195", "014196", "014197", "014198", "014199", "014200", "014202", "014203", "014204", "014205", "014206", "014207", "014208", "014209", "014211", "014212", "014213", "014214", "014215", "014217", "014218", "014219", "014220", "014221", "014223", "014225", "014226", "014228", "014229", "014230", "014231", "014232", "014235", "014236", "014237", "014242", "014243", "014245", "014247", "014249", "014251", "014253", "014254", "014255", "014260", "014261", "014266", "014271", "014275", "014280", "014300", "014301", "014302", "014303", "014304", "014305", "014306", "014307", "014308", "014309", "014310", "014312", "014313", "014314", "014315", "014316", "014317", "014318", "014319", "014320", "014321", "014322", "014323", "014324", "014326", "014328", "014329", "014330", "014333", "014335", "014336", "014337", "014338", "014339", "014340", "014341", "014342", "014343", "014344", "014349", "014351", "014352", "014354", "014355", "014356", "014360", "014362", "014363", "014367", "014375", "014376", "014379", "014385", "014387", "014394", "014410", "014411", "014412", "014413", "014414", "014415", "014416", "014417", "014418", "014419", "014420", "014422", "014423", "014424", "014425", "014426", "014427", "014428", "014429", "014431", "014432", "014434", "014435", "014436", "014437", "014438", "014439", "014440", "014441", "014442", "014444", "014447", "014448", "014449", "014450", "014451", "014452", "014455", "014456", "014458", "014460", "014463", "014464", "014465", "014466", "014470", "014471", "014472", "014479", "014480", "014481", "014485", "014494", "014496", "014502", "014520", "014521", "014522", "014523", "014524", "014525", "014526", "014527", "014528", "014529", "014530", "014531", "014532", "014533", "014534", "014535", "014537", "014538", "014539", "014540", "014541", "014542", "014543", "014544", "014545", "014547", "014549", "014551", "014552", "014553", "014554", "014556", "014557", "014559", "014560", "014562", "014563", "014564", "014566", "014568", "014570", "014572", "014576", "014577", "014579", "014580", "014582", "014587", "014588", "014590", "014593", "014595", "014602", "014608", "014613", "014630", "014631", "014632", "014633", "014634", "014635", "014636", "014637", "014638", "014639", "014640", "014641", "014642", "014643", "014645", "014646", "014647", "014648", "014649", "014650", "014651", "014652", "014653", "014654", "014655", "014656", "014657", "014660", "014663", "014664", "014665", "014666", "014668", "014669", "014670", "014671", "014673", "014677", "014678", "014679", "014680", "014681", "014682", "014683", "014686", "014692", "014694", "014695", "014697", "014700", "014703", "014709", "014711", "014713", "014721", "014740", "014741", "014742", "014743", "014744", "014745", "014746", "014747", "014748", "014749", "014750", "014751", "014753", "014754", "014755", "014756", "014757", "014758", "014759", "014760", "014761", "014762", "014764", "014765", "014766", "014767", "014769", "014770", "014772", "014774", "014775", "014776", "014778", "014779", "014780", "014781", "014782", "014785", "014786", "014789", "014792", "014793", "014794", "014795", "014797", "014803", "014806", "014807", "014808", "014810", "014812", "014818", "014824", "014828", "014833", "014850", "014851", "014852", "014853", "014854", "014855", "014856", "014857", "014858", "014859", "014860", "014861", "014862", "014864", "014865", "014866", "014867", "014868", "014869", "014871", "014872", "014873", "014874", "014875", "014877", "014878", "014879", "014880", "014881", "014884", "014885", "014886", "014888", "014889", "014891", "014893", "014894", "014896", "014897", "014898", "014901", "014906", "014907", "014908", "014909", "014911", "014913", "014916", "014919", "014921", "014922", "014929", "014930", "014931", "014945", "014960", "014961", "014962", "014963", "014964", "014965", "014966", "014967", "014968", "014969", "014970", "014971", "014973", "014974", "014975", "014976", "014977", "014978", "014979", "014980", "014981", "014983", "014984", "014985", "014986", "014988", "014989", "014990", "014991", "014992", "014993", "014994", "014996", "014997", "015001", "015002", "015005", "015006", "015008", "015009", "015010", "015012", "015016", "015017", "015018", "015020", "015024", "015026", "015028", "015030", "015032", "015038", "015043", "015048", "015056", "015070", "015071", "015072", "015073", "015074", "015075", "015076", "015077", "015078", "015079", "015080", "015081", "015082", "015083", "015084", "015085", "015086", "015088", "015089", "015090", "015091", "015092", "015095", "015096", "015097", "015098", "015099", "015100", "015101", "015103", "015104", "015105", "015107", "015108", "015110", "015111", "015112", "015113", "015117", "015118", "015121", "015122", "015123", "015125", "015127", "015130", "015133", "015135", "015139", "015142", "015143", "015147", "015150", "015154", "015161", "015180", "015181", "015182", "015183", "015184", "015185", "015186", "015187", "015188", "015189", "015190", "015191", "015192", "015193", "015194", "015196", "015197", "015198", "015199", "015200", "015201", "015202", "015203", "015204", "015205", "015207", "015209", "015210", "015213", "015214", "015216", "015217", "015218", "015219", "015221", "015222", "015225", "015226", "015228", "015229", "015230", "015232", "015234", "015235", "015239", "015242", "015246", "015247", "015248", "015252", "015253", "015257", "015262", "015263", "015271", "015290", "015291", "015292", "015293", "015294", "015295", "015296", "015297", "015298", "015299", "015300", "015301", "015302", "015303", "015304", "015305", "015306", "015308", "015309", "015310", "015311", "015312", "015313", "015315", "015316", "015317", "015318", "015320", "015321", "015322", "015323", "015324", "015325", "015327", "015331", "015333", "015334", "015336", "015337", "015339", "015343", "015346", "015347", "015348", "015349", "015350", "015352", "015355", "015356", "015360", "015364", "015366", "015371", "015372", "015380", "015400", "015401", "015402", "015403", "015404", "015405", "015406", "015407", "015408", "015409", "015410", "015411", "015412", "015413", "015414", "015415", "015417", "015418", "015419", "015420", "015421", "015422", "015424", "015425", "015427", "015428", "015429", "015431", "015432", "015433", "015434", "015435", "015436", "015437", "015440", "015441", "015442", "015444", "015445", "015447", "015451", "015453", "015456", "015457", "015459", "015460", "015461", "015464", "015468", "015472", "015476", "015478", "015484", "015488", "015495", "015510", "015511", "015512", "015513", "015514", "015515", "015516", "015517", "015518", "015519", "015520", "015521", "015522", "015524", "015525", "015526", "015527", "015528", "015529", "015530", "015531", "015532", "015533", "015535", "015536", "015537", "015539", "015540", "015542", "015543", "015545", "015547", "015548", "015549", "015551", "015553", "015555", "015556", "015557", "015558", "015561", "015562", "015563", "015564", "015568", "015571", "015572", "015574", "015578", "015583", "015586", "015588", "015591", "015594", "015601", "015620", "015621", "015622", "015623", "015624", "015625", "015626", "015627", "015628", "015629", "015630", "015631", "015633", "015634", "015635", "015636", "015637", "015638", "015639", "015640", "015641", "015642", "015643", "015645", "015646", "015648", "015649", "015652", "015654", "015655", "015656", "015657", "015658", "015659", "015660", "015662", "015663", "015665", "015667", "015669", "015671", "015673", "015674", "015678", "015679", "015682", "015683", "015685", "015686", "015690", "015697", "015699", "015700", "015705", "015713", "015730", "015731", "015732", "015733", "015734", "015735", "015736", "015737", "015738", "015739", "015740", "015742", "015743", "015744", "015745", "015746", "015747", "015748", "015749", "015750", "015751", "015752", "015754", "015755", "015756", "015757", "015758", "015761", "015762", "015763", "015765", "015766", "015767", "015769", "015770", "015771", "015772", "015773", "015775", "015777", "015780", "015782", "015783", "015784", "015785", "015790", "015791", "015792", "015796", "015806", "015807", "015809", "015813", "015815", "015826", "015840", "015841", "015842", "015843", "015844", "015845", "015846", "015847", "015848", "015849", "015850", "015851", "015852", "015853", "015854", "015855", "015857", "015858", "015859", "015860", "015861", "015862", "015863", "015864", "015865", "015866", "015867", "015871", "015872", "015874", "015876", "015877", "015878", "015879", "015880", "015881", "015883", "015884", "015886", "015888", "015891", "015892", "015893", "015897", "015899", "015905", "015906", "015908", "015909", "015910", "015914", "015919", "015923", "015926", "015934", "015950", "015951", "015952", "015953", "015954", "015955", "015956", "015957", "015958", "015959", "015960", "015961", "015962", "015963", "015965", "015966", "015967", "015968", "015969", "015970", "015971", "015972", "015973", "015974", "015977", "015978", "015979", "015980", "015982", "015984", "015985", "015986", "015987", "015989", "015990", "015991", "015993", "015994", "015995", "015998", "016000", "016002", "016004", "016007", "016009", "016013", "016015", "016016", "016017", "016024", "016028", "016029", "016030", "016032", "016045", "016060", "016061", "016062", "016063", "016064", "016065", "016066", "016067", "016068", "016069", "016070", "016071", "016072", "016073", "016074", "016076", "016077", "016078", "016079", "016080", "016081", "016083", "016084", "016085", "016086", "016087", "016088", "016090", "016091", "016092", "016093", "016094", "016096", "016098", "016100", "016101", "016104", "016105", "016107", "016108", "016110", "016111", "016114", "016116", "016117", "016120", "016124", "016128", "016129", "016130", "016135", "016138", "016143", "016147", "016153", "016170", "016171", "016172", "016173", "016174", "016175", "016176", "016177", "016178", "016179", "016180", "016181", "016182", "016183", "016184", "016185", "016186", "016188", "016189", "016190", "016191", "016192", "016193", "016195", "016196", "016197", "016198", "016200", "016201", "016202", "016203", "016205", "016206", "016209", "016213", "016214", "016215", "016217", "016218", "016219", "016224", "016225", "016227", "016228", "016229", "016231", "016234", "016235", "016237", "016241", "016244", "016248", "016256", "016259", "016265", "016280", "016281", "016282", "016283", "016284", "016285", "016286", "016287", "016288", "016289", "016290", "016292", "016293", "016294", "016295", "016296", "016297", "016298", "016299", "016300", "016302", "016303", "016304", "016305", "016306", "016308", "016309", "016312", "016313", "016315", "016316", "016317", "016318", "016319", "016320", "016322", "016323", "016325", "016326", "016328", "016330", "016331", "016333", "016337", "016339", "016341", "016342", "016344", "016346", "016353", "016354", "016356", "016361", "016365", "016375", "016390", "016391", "016392", "016393", "016394", "016395", "016396", "016397", "016398", "016399", "016401", "016402", "016403", "016404", "016405", "016406", "016407", "016408", "016409", "016410", "016412", "016413", "016414", "016415", "016416", "016417", "016419", "016420", "016421", "016422", "016423", "016424", "016426", "016427", "016431", "016432", "016434", "016436", "016437", "016438", "016440", "016441", "016443", "016444", "016447", "016450", "016455", "016456", "016457", "016465", "016466", "016468", "016471", "016473", "016483", "016500", "016501", "016502", "016503", "016504", "016505", "016506", "016507", "016508", "016509", "016510", "016511", "016512", "016513", "016514", "016515", "016516", "016518", "016519", "016520", "016522", "016523", "016524", "016526", "016527", "016528", "016529", "016531", "016532", "016534", "016535", "016536", "016537", "016539", "016540", "016542", "016544", "016545", "016547", "016549", "016550", "016551", "016556", "016558", "016559", "016563", "016566", "016568", "016569", "016571", "016573", "016575", "016582", "016585", "016591", "016610", "016611", "016612", "016613", "016614", "016615", "016616", "016617", "016618", "016619", "016620", "016621", "016622", "016623", "016625", "016626", "016627", "016628", "016629", "016630", "016631", "016632", "016633", "016635", "016636", "016637", "016639", "016641", "016642", "016643", "016645", "016646", "016647", "016648", "016651", "016653", "016654", "016656", "016657", "016658", "016660", "016664", "016665", "016666", "016668", "016672", "016675", "016676", "016678", "016684", "016688", "016689", "016693", "016694", "016705", "016720", "016721", "016722", "016723", "016724", "016725", "016726", "016727", "016728", "016729", "016730", "016731", "016732", "016733", "016734", "016735", "016736", "016737", "016739", "016740", "016741", "016744", "016745", "016746", "016747", "016748", "016749", "016750", "016751", "016753", "016754", "016755", "016756", "016757", "016761", "016763", "016764", "016765", "016767", "016768", "016772", "016773", "016776", "016778", "016779", "016780", "016783", "016784", "016789", "016790", "016793", "016795", "016805", "016806", "016817", "016830", "016831", "016832", "016833", "016834", "016835", "016836", "016837", "016838", "016839", "016840", "016841", "016842", "016844", "016845", "016846", "016847", "016848", "016849", "016850", "016851", "016853", "016854", "016855", "016856", "016857", "016859", "016860", "016864", "016865", "016866", "016867", "016868", "016869", "016870", "016872", "016873", "016874", "016877", "016879", "016880", "016881", "016884", "016885", "016887", "016890", "016894", "016898", "016899", "016906", "016907", "016908", "016911", "016912", "016920", "016940", "016941", "016942", "016943", "016944", "016945", "016946", "016947", "016948", "016949", "016950", "016951", "016952", "016953", "016954", "016956", "016957", "016958", "016959", "016960", "016961", "016963", "016965", "016966", "016967", "016968", "016969", "016970", "016972", "016973", "016975", "016976", "016978", "016979", "016984", "016985", "016986", "016987", "016988", "016989", "016990", "016994", "016995", "016997", "016998", "017000", "017001", "017006", "017007", "017012", "017013", "017018", "017028", "017029", "017034", "017050", "017051", "017052", "017053", "017054", "017055", "017056", "017057", "017058", "017059", "017060", "017061", "017062", "017063", "017064", "017065", "017066", "017068", "017069", "017070", "017071", "017072", "017073", "017074", "017076", "017078", "017079", "017080", "017081", "017083", "017084", "017085", "017087", "017089", "017093", "017094", "017095", "017096", "017097", "017098", "017101", "017102", "017103", "017107", "017108", "017111", "017113", "017114", "017119", "017121", "017123", "017125", "017130", "017131", "017142", "017160", "017161", "017162", "017163", "017164", "017165", "017166", "017167", "017168", "017169", "017170", "017171", "017172", "017173", "017174", "017175", "017176", "017177", "017179", "017180", "017181", "017182", "017183", "017185", "017186", "017187", "017188", "017191", "017192", "017193", "017194", "017195", "017197", "017199", "017203", "017205", "017206", "017207", "017208", "017209", "017210", "017211", "017215", "017216", "017219", "017224", "017227", "017228", "017229", "017232", "017233", "017234", "017241", "017245", "017253", "017270", "017271", "017272", "017273", "017274", "017275", "017276", "017277", "017278", "017279", "017280", "017281", "017283", "017284", "017285", "017286", "017287", "017288", "017289", "017290", "017291", "017294", "017295", "017296", "017297", "017298", "017299", "017301", "017302", "017303", "017306", "017307", "017308", "017309", "017310", "017312", "017314", "017315", "017316", "017318", "017320", "017323", "017324", "017325", "017329", "017330", "017334", "017335", "017336", "017344", "017347", "017349", "017353", "017358", "017366", "017380", "017381", "017382", "017383", "017384", "017385", "017386", "017387", "017388", "017389", "017390", "017391", "017392", "017393", "017394", "017395", "017397", "017398", "017399", "017400", "017401", "017402", "017403", "017404", "017407", "017408", "017409", "017410", "017411", "017412", "017413", "017417", "017418", "017419", "017420", "017423", "017424", "017426", "017427", "017429", "017432", "017434", "017436", "017437", "017438", "017442", "017444", "017446", "017448", "017451", "017452", "017455", "017461", "017466", "017473", "017490", "017491", "017492", "017493", "017494", "017495", "017496", "017497", "017498", "017499", "017500", "017501", "017502", "017504", "017505", "017506", "017507", "017508", "017509", "017510", "017512", "017513", "017514", "017515", "017516", "017517", "017518", "017520", "017521", "017522", "017524", "017527", "017528", "017529", "017530", "017533", "017534", "017535", "017536", "017538", "017543", "017544", "017545", "017546", "017549", "017553", "017555", "017557", "017559", "017562", "017564", "017569", "017574", "017579", "017586", "017600", "017601", "017602", "017603", "017604", "017605", "017606", "017607", "017608", "017609", "017610", "017611", "017613", "017614", "017615", "017616", "017617", "017618", "017619", "017620", "017621", "017622", "017623", "017625", "017626", "017628", "017629", "017631", "017632", "017633", "017634", "017635", "017638", "017639", "017640", "017641", "017642", "017647", "017648", "017649", "017651", "017654", "017655", "017657", "017659", "017661", "017664", "017665", "017666", "017673", "017676", "017678", "017683", "017686", "017694", "017710", "017711", "017712", "017713", "017714", "017715", "017716", "017717", "017718", "017719", "017720", "017721", "017722", "017724", "017725", "017726", "017727", "017728", "017729", "017730", "017732", "017733", "017734", "017735", "017736", "017737", "017739", "017741", "017742", "017743", "017744", "017746", "017747", "017748", "017750", "017752", "017753", "017756", "017757", "017758", "017761", "017763", "017765", "017766", "017769", "017771", "017773", "017777", "017779", "017781", "017783", "017785", "017791", "017799", "017806", "017820", "017821", "017822", "017823", "017824", "017825", "017826", "017827", "017828", "017829", "017830", "017831", "017832", "017833", "017834", "017835", "017836", "017837", "017838", "017840", "017841", "017842", "017845", "017846", "017847", "017848", "017849", "017850", "017851", "017853", "017854", "017856", "017857", "017858", "017863", "017864", "017865", "017866", "017867", "017869", "017870", "017874", "017875", "017878", "017879", "017880", "017881", "017884", "017889", "017895", "017896", "017898", "017907", "017908", "017916", "017930", "017931", "017932", "017933", "017934", "017935", "017936", "017937", "017938", "017939", "017940", "017941", "017942", "017943", "017945", "017946", "017947", "017948", "017949", "017950", "017952", "017954", "017955", "017956", "017957", "017958", "017959", "017960", "017962", "017963", "017965", "017967", "017968", "017969", "017972", "017973", "017974", "017975", "017976", "017977", "017982", "017983", "017984", "017986", "017987", "017990", "017991", "017992", "017999", "018002", "018004", "018007", "018013", "018014", "018020", "018040", "018041", "018042", "018043", "018044", "018045", "018046", "018047", "018048", "018049", "018051", "018052", "018053", "018054", "018055", "018056", "018057", "018058", "018059", "018060", "018063", "018064", "018065", "018066", "018067", "018068", "018069", "018071", "018073", "018074", "018075", "018077", "018078", "018079", "018080", "018081", "018083", "018084", "018088", "018089", "018092", "018093", "018094", "018098", "018099", "018102", "018103", "018104", "018105", "018111", "018114", "018117", "018120", "018129", "018136", "018150", "018151", "018152", "018153", "018154", "018155", "018156", "018157", "018158", "018159", "018160", "018161", "018162", "018163", "018164", "018165", "018166", "018168", "018169", "018170", "018171", "018172", "018173", "018174", "018175", "018177", "018178", "018180", "018181", "018182", "018183", "018186", "018187", "018188", "018191", "018193", "018194", "018195", "018196", "018197", "018200", "018201", "018203", "018205", "018207", "018212", "018214", "018217", "018218", "018221", "018227", "018229", "018232", "018237", "018240", "018260", "018261", "018262", "018263", "018264", "018265", "018266", "018267", "018268", "018269", "018270", "018271", "018272", "018273", "018274", "018275", "018276", "018278", "018279", "018281", "018282", "018283", "018284", "018285", "018286", "018288", "018289", "018290", "018293", "018294", "018295", "018296", "018297", "018298", "018300", "018302", "018304", "018306", "018307", "018308", "018310", "018311", "018312", "018316", "018317", "018320", "018321", "018322", "018328", "018332", "018334", "018335", "018340", "018345", "018358", "018370", "018371", "018372", "018373", "018374", "018375", "018376", "018377", "018378", "018379", "018380", "018381", "018382", "018383", "018384", "018385", "018386", "018388", "018389", "018391", "018392", "018393", "018394", "018395", "018397", "018398", "018399", "018400", "018402", "018404", "018405", "018406", "018407", "018409", "018413", "018414", "018415", "018416", "018417", "018419", "018424", "018425", "018426", "018427", "018428", "018430", "018434", "018435", "018437", "018441", "018442", "018445", "018451", "018457", "018465", "018480", "018481", "018482", "018483", "018484", "018485", "018486", "018487", "018488", "018489", "018490", "018491", "018493", "018494", "018495", "018496", "018497", "018498", "018499", "018500", "018501", "018502", "018504", "018505", "018507", "018508", "018509", "018510", "018512", "018514", "018515", "018516", "018517", "018518", "018522", "018523", "018524", "018527", "018528", "018529", "018530", "018531", "018533", "018535", "018537", "018543", "018544", "018545", "018548", "018550", "018554", "018559", "018568", "018569", "018572", "018590", "018591", "018592", "018593", "018594", "018595", "018596", "018597", "018598", "018599", "018600", "018601", "018602", "018604", "018605", "018606", "018607", "018608", "018609", "018610", "018611", "018612", "018613", "018614", "018616", "018617", "018618", "018620", "018622", "018623", "018625", "018627", "018628", "018629", "018631", "018632", "018634", "018636", "018637", "018639", "018640", "018641", "018642", "018644", "018648", "018650", "018655", "018656", "018657", "018660", "018665", "018666", "018670", "018674", "018681", "018700", "018701", "018702", "018703", "018704", "018705", "018706", "018707", "018708", "018709", "018710", "018711", "018712", "018713", "018714", "018715", "018716", "018717", "018718", "018720", "018721", "018723", "018724", "018725", "018727", "018728", "018729", "018730", "018731", "018732", "018734", "018735", "018736", "018738", "018741", "018742", "018743", "018744", "018745", "018746", "018751", "018752", "018753", "018755", "018759", "018761", "018762", "018766", "018767", "018770", "018772", "018778", "018782", "018783", "018790", "018810", "018811", "018812", "018813", "018814", "018815", "018816", "018817", "018818", "018819", "018820", "018821", "018823", "018824", "018825", "018826", "018827", "018828", "018829", "018830", "018831", "018832", "018833", "018835", "018836", "018837", "018839", "018841", "018844", "018845", "018846", "018847", "018848", "018849", "018850", "018851", "018852", "018855", "018857", "018859", "018861", "018864", "018865", "018867", "018869", "018872", "018873", "018874", "018878", "018886", "018887", "018888", "018893", "018898", "018909", "018920", "018921", "018922", "018923", "018924", "018925", "018926", "018927", "018928", "018929", "018930", "018931", "018932", "018933", "018935", "018936", "018937", "018938", "018939", "018941", "018942", "018943", "018944", "018945", "018947", "018948", "018949", "018950", "018951", "018953", "018954", "018955", "018957", "018958", "018960", "018961", "018966", "018967", "018968", "018969", "018970", "018972", "018974", "018976", "018979", "018981", "018982", "018987", "018989", "018992", "018993", "018995", "019005", "019008", "019010", "019030", "019031", "019032", "019033", "019034", "019035", "019036", "019037", "019038", "019039", "019040", "019041", "019042", "019044", "019045", "019046", "019047", "019048", "019049", "019050", "019051", "019052", "019053", "019054", "019056", "019057", "019058", "019060", "019061", "019062", "019063", "019064", "019067", "019069", "019070", "019073", "019074", "019075", "019076", "019077", "019082", "019084", "019087", "019088", "019089", "019091", "019093", "019095", "019097", "019102", "019106", "019109", "019115", "019116", "019122", "019140", "019141", "019142", "019143", "019144", "019145", "019146", "019147", "019148", "019149", "019150", "019152", "019153", "019154", "019155", "019156", "019157", "019158", "019159", "019160", "019162", "019163", "019165", "019166", "019167", "019168", "019169", "019170", "019172", "019173", "019174", "019175", "019178", "019179", "019180", "019181", "019182", "019183", "019186", "019188", "019190", "019192", "019193", "019195", "019199", "019203", "019206", "019207", "019209", "019214", "019215", "019218", "019220", "019222", "019233", "019250", "019251", "019252", "019253", "019254", "019255", "019256", "019257", "019258", "019259", "019260", "019261", "019262", "019263", "019264", "019266", "019267", "019268", "019269", "019271", "019272", "019273", "019274", "019275", "019277", "019278", "019279", "019280", "019281", "019284", "019285", "019286", "019287", "019289", "019290", "019291", "019295", "019297", "019298", "019299", "019301", "019303", "019304", "019307", "019309", "019310", "019316", "019317", "019318", "019320", "019326", "019329", "019333", "019334", "019349", "019360", "019361", "019362", "019363", "019364", "019365", "019366", "019367", "019368", "019369", "019370", "019371", "019372", "019373", "019374", "019375", "019377", "019378", "019379", "019380", "019381", "019382", "019383", "019384", "019386", "019387", "019389", "019391", "019393", "019394", "019395", "019397", "019398", "019399", "019400", "019402", "019403", "019404", "019408", "019409", "019411", "019412", "019415", "019416", "019418", "019421", "019423", "019427", "019428", "019434", "019435", "019436", "019440", "019448", "019450", "019470", "019471", "019472", "019473", "019474", "019475", "019476", "019477", "019478", "019479", "019480", "019481", "019482", "019483", "019484", "019485", "019487", "019488", "019489", "019491", "019492", "019493", "019494", "019495", "019497", "019498", "019499", "019501", "019502", "019503", "019504", "019505", "019507", "019509", "019510", "019512", "019514", "019515", "019516", "019519", "019521", "019524", "019525", "019526", "019529", "019531", "019533", "019536", "019538", "019543", "019544", "019545", "019553", "019559", "019569", "019580", "019581", "019582", "019583", "019584", "019585", "019586", "019587", "019588", "019589", "019590", "019591", "019592", "019593", "019595", "019596", "019597", "019598", "019599", "019602", "019603", "019604", "019605", "019606", "019607", "019608", "019609", "019611", "019612", "019613", "019614", "019615", "019616", "019618", "019620", "019621", "019622", "019623", "019625", "019628", "019630", "019633", "019634", "019635", "019639", "019644", "019646", "019647", "019649", "019651", "019653", "019658", "019663", "019667", "019676", "019690", "019691", "019692", "019693", "019694", "019695", "019696", "019697", "019698", "019699", "019700", "019701", "019702", "019703", "019705", "019706", "019707", "019708", "019709", "019710", "019711", "019712", "019714", "019715", "019716", "019717", "019718", "019721", "019722", "019723", "019724", "019725", "019727", "019729", "019731", "019732", "019733", "019734", "019735", "019736", "019742", "019745", "019746", "019747", "019748", "019750", "019756", "019757", "019759", "019764", "019766", "019768", "019777", "019779", "019787", "019800", "019801", "019802", "019803", "019804", "019805", "019806", "019807", "019808", "019809", "019810", "019811", "019812", "019813", "019814", "019815", "019816", "019818", "019819", "019821", "019822", "019824", "019825", "019826", "019827", "019828", "019829", "019830", "019831", "019832", "019833", "019834", "019835", "019839", "019841", "019842", "019844", "019847", "019848", "019849", "019850", "019851", "019856", "019858", "019859", "019862", "019865", "019867", "019868", "019871", "019872", "019878", "019887", "019889", "019895", "019910", "019911", "019912", "019913", "019914", "019915", "019916", "019917", "019918", "019919", "019920", "019921", "019922", "019923", "019924", "019926", "019927", "019928", "019929", "019931", "019932", "019933", "019935", "019936", "019937", "019938", "019939", "019941", "019942", "019943", "019944", "019945", "019947", "019949", "019951", "019952", "019953", "019955", "019957", "019959", "019960", "019961", "019963", "019964", "019969", "019970", "019972", "019973", "019979", "019982", "019983", "019985", "019992", "019999", "020001", "020020", "020021", "020022", "020023", "020024", "020025", "020026", "020027", "020028", "020029", "020030", "020032", "020033", "020034", "020035", "020036", "020037", "020038", "020039", "020040", "020041", "020042", "020043", "020044", "020045", "020047", "020049", "020050", "020052", "020053", "020054", "020055", "020057", "020059", "020061", "020062", "020063", "020065", "020066", "020068", "020072", "020073", "020074", "020075", "020076", "020080", "020083", "020084", "020089", "020090", "020098", "020099", "020105", "020107", "020112", "020130", "020131", "020132", "020133", "020134", "020135", "020136", "020137", "020138", "020139", "020140", "020142", "020143", "020144", "020145", "020146", "020147", "020148", "020149", "020151", "020152", "020153", "020154", "020155", "020157", "020158", "020159", "020160", "020161", "020162", "020163", "020166", "020168", "020169", "020171", "020172", "020173", "020174", "020176", "020178", "020182", "020183", "020186", "020187", "020188", "020191", "020192", "020195", "020196", "020202", "020206", "020207", "020211", "020213", "020228", "020240", "020241", "020242", "020243", "020244", "020245", "020246", "020247", "020248", "020249", "020250", "020251", "020253", "020254", "020255", "020256", "020257", "020258", "020259", "020260", "020261", "020262", "020264", "020265", "020267", "020268", "020269", "020270", "020272", "020273", "020275", "020276", "020277", "020279", "020282", "020283", "020284", "020285", "020286", "020287", "020291", "020294", "020297", "020298", "020299", "020300", "020303", "020304", "020309", "020310", "020313", "020318", "020321", "020326", "020335", "020350", "020351", "020352", "020353", "020354", "020355", "020356", "020357", "020358", "020359", "020361", "020362", "020363", "020364", "020365", "020366", "020367", "020368", "020369", "020370", "020371", "020372", "020373", "020375", "020377", "020378", "020379", "020381", "020382", "020383", "020385", "020386", "020388", "020389", "020391", "020393", "020395", "020396", "020397", "020399", "020400", "020403", "020407", "020408", "020409", "020410", "020413", "020414", "020419", "020421", "020422", "020425", "020433", "020437", "020442", "020460", "020461", "020462", "020463", "020464", "020465", "020466", "020467", "020468", "020469", "020470", "020472", "020473", "020474", "020475", "020476", "020477", "020478", "020479", "020480", "020481", "020482", "020483", "020484", "020485", "020488", "020489", "020490", "020493", "020494", "020495", "020496", "020497", "020498", "020500", "020501", "020504", "020506", "020507", "020508", "020510", "020512", "020513", "020515", "020518", "020523", "020524", "020525", "020526", "020535", "020538", "020539", "020543", "020549", "020550", "020570", "020571", "020572", "020573", "020574", "020575", "020576", "020577", "020578", "020579", "020580", "020581", "020582", "020583", "020584", "020585", "020586", "020588", "020589", "020590", "020591", "020592", "020594", "020596", "020597", "020598", "020599", "020600", "020601", "020604", "020605", "020607", "020608", "020609", "020611", "020614", "020615", "020616", "020617", "020618", "020620", "020622", "020623", "020624", "020625", "020631", "020634", "020636", "020639", "020647", "020648", "020649", "020650", "020653", "020667", "020680", "020681", "020682", "020683", "020684", "020685", "020686", "020687", "020688", "020689", "020690", "020692", "020693", "020694", "020695", "020696", "020697", "020698", "020699", "020700", "020701", "020703", "020704", "020705", "020706", "020707", "020709", "020710", "020712", "020713", "020715", "020716", "020717", "020718", "020720", "020721", "020723", "020724", "020725", "020726", "020730", "020732", "020735", "020737", "020739", "020741", "020743", "020745", "020748", "020750", "020752", "020758", "020765", "020767", "020776", "020790", "020791", "020792", "020793", "020794", "020795", "020796", "020797", "020798", "020799", "020800", "020801", "020802", "020803", "020805", "020806", "020807", "020808", "020809", "020810", "020811", "020812", "020814", "020815", "020816", "020817", "020818", "020821", "020822", "020823", "020824", "020825", "020828", "020829", "020830", "020831", "020832", "020833", "020835", "020839", "020840", "020842", "020843", "020847", "020849", "020850", "020852", "020858", "020859", "020862", "020865", "020869", "020870", "020873", "020888", "020900", "020901", "020902", "020903", "020904", "020905", "020906", "020907", "020908", "020909", "020910", "020911", "020912", "020913", "020914", "020915", "020916", "020917", "020919", "020920", "020921", "020922", "020923", "020924", "020925", "020926", "020928", "020930", "020931", "020933", "020934", "020935", "020938", "020939", "020941", "020942", "020944", "020945", "020946", "020948", "020950", "020955", "020956", "020957", "020959", "020963", "020966", "020967", "020968", "020971", "020972", "020978", "020986", "020988", "020999", "021010", "021011", "021012", "021013", "021014", "021015", "021016", "021017", "021018", "021019", "021020", "021021", "021022", "021023", "021024", "021025", "021027", "021028", "021029", "021030", "021031", "021034", "021035", "021036", "021037", "021038", "021039", "021040", "021041", "021042", "021043", "021045", "021046", "021047", "021051", "021052", "021053", "021054", "021055", "021058", "021060", "021062", "021065", "021068", "021069", "021070", "021071", "021072", "021073", "021081", "021084", "021086", "021091", "021093", "021106", "021120", "021121", "021122", "021123", "021124", "021125", "021126", "021127", "021128", "021129", "021130", "021131", "021132", "021133", "021134", "021135", "021137", "021138", "021139", "021140", "021141", "021143", "021144", "021145", "021146", "021148", "021149", "021150", "021151", "021152", "021153", "021154", "021155", "021157", "021161", "021162", "021163", "021164", "021165", "021166", "021171", "021175", "021176", "021177", "021178", "021180", "021182", "021184", "021187", "021193", "021196", "021199", "021203", "021208", "021212", "021230", "021231", "021232", "021233", "021234", "021235", "021236", "021237", "021238", "021239", "021240", "021241", "021242", "021243", "021244", "021245", "021246", "021247", "021249", "021250", "021251", "021252", "021254", "021255", "021256", "021258", "021259", "021260", "021261", "021263", "021264", "021265", "021266", "021268", "021271", "021272", "021273", "021277", "021278", "021279", "021281", "021284", "021286", "021288", "021289", "021294", "021295", "021298", "021299", "021304", "021306", "021308", "021312", "021318", "021328", "021340", "021341", "021342", "021343", "021344", "021345", "021346", "021347", "021348", "021349", "021350", "021351", "021352", "021353", "021354", "021355", "021356", "021358", "021359", "021360", "021361", "021362", "021363", "021364", "021365", "021366", "021367", "021370", "021373", "021375", "021376", "021377", "021378", "021379", "021381", "021382", "021386", "021387", "021388", "021389", "021392", "021395", "021396", "021398", "021399", "021402", "021403", "021405", "021407", "021412", "021416", "021419", "021420", "021424", "021432", "021450", "021451", "021452", "021453", "021454", "021455", "021456", "021457", "021458", "021459", "021460", "021461", "021462", "021463", "021464", "021465", "021466", "021468", "021469", "021470", "021471", "021472", "021474", "021475", "021477", "021478", "021479", "021480", "021481", "021482", "021483", "021484", "021487", "021488", "021490", "021491", "021492", "021493", "021494", "021498", "021500", "021503", "021504", "021506", "021507", "021511", "021514", "021515", "021519", "021524", "021525", "021527", "021535", "021538", "021543", "021560", "021561", "021562", "021563", "021564", "021565", "021566", "021567", "021568", "021569", "021570", "021571", "021572", "021573", "021574", "021575", "021577", "021578", "021579", "021580", "021581", "021583", "021584", "021585", "021586", "021587", "021588", "021591", "021592", "021593", "021594", "021595", "021597", "021598", "021601", "021602", "021603", "021606", "021607", "021608", "021610", "021615", "021616", "021617", "021618", "021621", "021624", "021625", "021628", "021633", "021635", "021636", "021640", "021644", "021657", "021670", "021671", "021672", "021673", "021674", "021675", "021676", "021677", "021678", "021679", "021680", "021681", "021682", "021683", "021684", "021685", "021686", "021687", "021689", "021690", "021691", "021692", "021693", "021695", "021696", "021697", "021698", "021701", "021702", "021703", "021704", "021706", "021707", "021709", "021710", "021711", "021713", "021714", "021718", "021719", "021722", "021723", "021725", "021727", "021729", "021731", "021732", "021733", "021734", "021743", "021744", "021747", "021751", "021756", "021761", "021780", "021781", "021782", "021783", "021784", "021785", "021786", "021787", "021788", "021789", "021791", "021792", "021793", "021794", "021795", "021796", "021797", "021798", "021799", "021800", "021801", "021802", "021803", "021804", "021806", "021807", "021809", "021810", "021811", "021812", "021814", "021815", "021817", "021818", "021820", "021823", "021824", "021826", "021828", "021829", "021830", "021832", "021833", "021837", "021839", "021842", "021844", "021848", "021849", "021853", "021854", "021858", "021866", "021868", "021870", "021890", "021891", "021892", "021893", "021894", "021895", "021896", "021897", "021898", "021899", "021900", "021901", "021902", "021903", "021904", "021905", "021906", "021907", "021908", "021910", "021911", "021912", "021913", "021914", "021916", "021917", "021918", "021920", "021921", "021922", "021924", "021925", "021927", "021928", "021931", "021932", "021933", "021934", "021936", "021937", "021940", "021941", "021946", "021948", "021949", "021951", "021954", "021956", "021958", "021960", "021962", "021969", "021973", "021978", "021989", "022000", "022001", "022002", "022003", "022004", "022005", "022006", "022007", "022008", "022009", "022010", "022011", "022012", "022013", "022014", "022015", "022017", "022018", "022019", "022020", "022022", "022023", "022024", "022025", "022026", "022027", "022029", "022030", "022031", "022034", "022036", "022037", "022038", "022039", "022040", "022042", "022044", "022045", "022047", "022048", "022050", "022052", "022053", "022054", "022057", "022060", "022064", "022066", "022067", "022070", "022075", "022079", "022080", "022086", "022092", "022110", "022111", "022112", "022113", "022114", "022115", "022116", "022117", "022118", "022119", "022120", "022121", "022122", "022123", "022124", "022125", "022126", "022127", "022128", "022130", "022132", "022133", "022134", "022135", "022136", "022137", "022138", "022140", "022143", "022144", "022145", "022146", "022147", "022148", "022151", "022152", "022153", "022155", "022156", "022157", "022160", "022163", "022164", "022166", "022169", "022172", "022173", "022175", "022179", "022184", "022187", "022189", "022192", "022197", "022204", "022220", "022227", "022228", "022229", "022233", "022234", "022235", "022236", "022237", "022238", "022239", "022240", "022241", "022246", "022247", "022248", "022252", "022253", "022254", "022255", "022258", "022260", "022261", "022262", "022264", "022265", "022266", "022267", "022269", "022270", "022273", "022277", "022278", "022282", "022284", "022285", "022287", "022288", "022291", "022292", "022294", "022297", "022298", "022299", "022300", "022304", "022307", "022308", "022314", "022315", "022316", "022320", "022324"], "val": ["000012", "000029", "000031", "000033", "000041", "000050", "000056", "000060", "000062", "000065", "000066", "000069", "000071", "000079", "000086", "000089", "000092", "000100", "000101", "000103", "000105", "000128", "000133", "000147", "000162", "000163", "000168", "000181", "000182", "000186", "000192", "000196", "000204", "000205", "000207", "000208", "000213", "000214", "000217", "000218", "000219", "000249", "000258", "000266", "000268", "000269", "000272", "000277", "000278", "000280", "000285", "000290", "000296", "000298", "000302", "000305", "000310", "000311", "000312", "000314", "000315", "000318", "000319", "000320", "000321", "000322", "000324", "000328", "000342", "000356", "000373", "000383", "000396", "000399", "000405", "000412", "000420", "000421", "000423", "000426", "000429", "000432", "000433", "000438", "000453", "000462", "000471", "000472", "000481", "000499", "000503", "000504", "000506", "000510", "000514", "000515", "000517", "000521", "000524", "000527", "000530", "000532", "000533", "000534", "000538", "000540", "000541", "000546", "000560", "000584", "000592", "000595", "000600", "000606", "000608", "000610", "000611", "000615", "000636", "000639", "000644", "000646", "000650", "000652", "000653", "000654", "000655", "000700", "000703", "000719", "000720", "000721", "000723", "000726", "000729", "000735", "000739", "000743", "000745", "000749", "000752", "000755", "000757", "000764", "000766", "000769", "000800", "000814", "000816", "000830", "000837", "000840", "000857", "000858", "000862", "000865", "000868", "000870", "000875", "000876", "000878", "000879", "000902", "000903", "000910", "000918", "000926", "000929", "000931", "000943", "000954", "000955", "000959", "000961", "000964", "000971", "000978", "000981", "000985", "000988", "001000", "001013", "001014", "001023", "001035", "001037", "001044", "001056", "001057", "001058", "001061", "001069", "001070", "001071", "001075", "001077", "001078", "001079", "001086", "001087", "001091", "001094", "001096", "001099", "001119", "001127", "001131", "001132", "001134", "001142", "001156", "001160", "001161", "001165", "001167", "001174", "001176", "001177", "001181", "001184", "001187", "001190", "001199", "001201", "001204", "001208", "001209", "001228", "001254", "001258", "001262", "001267", "001269", "001285", "001289", "001292", "001293", "001297", "001299", "001300", "001306", "001307", "001309", "001311", "001313", "001317", "001350", "001353", "001354", "001363", "001368", "001373", "001379", "001391", "001392", "001399", "001401", "001406", "001407", "001412", "001417", "001420", "001425", "001427", "001428", "001440", "001453", "001454", "001478", "001479", "001480", "001482", "001483", "001487", "001492", "001499", "001504", "001505", "001518", "001519", "001524", "001527", "001529", "001533", "001535", "001537", "001566", "001586", "001589", "001590", "001601", "001603", "001606", "001611", "001617", "001618", "001621", "001622", "001623", "001627", "001630", "001631", "001636", "001640", "001641", "001643", "001644", "001646", "001649", "001676", "001677", "001685", "001689", "001703", "001706", "001713", "001718", "001719", "001720", "001725", "001733", "001734", "001735", "001737", "001738", "001739", "001744", "001749", "001750", "001759", "001790", "001804", "001807", "001826", "001837", "001840", "001841", "001842", "001845", "001850", "001853", "001859", "001860", "001861", "001862", "001867", "001868", "001869", "001894", "001910", "001924", "001931", "001934", "001942", "001943", "001944", "001946", "001952", "001957", "001958", "001961", "001963", "001965", "001969", "001970", "001972", "001973", "001976", "001978", "001979", "001998", "002003", "002013", "002020", "002024", "002025", "002036", "002040", "002042", "002051", "002052", "002055", "002056", "002060", "002062", "002063", "002067", "002068", "002073", "002074", "002075", "002077", "002082", "002086", "002089", "002117", "002128", "002130", "002144", "002145", "002147", "002170", "002171", "002176", "002179", "002180", "002182", "002183", "002189", "002194", "002195", "002197", "002199", "002223", "002226", "002235", "002245", "002247", "002250", "002252", "002260", "002262", "002264", "002271", "002274", "002275", "002276", "002277", "002278", "002282", "002283", "002287", "002289", "002292", "002293", "002294", "002295", "002297", "002299", "002305", "002306", "002307", "002308", "002339", "002342", "002350", "002354", "002365", "002368", "002378", "002380", "002381", "002383", "002384", "002385", "002389", "002390", "002392", "002393", "002400", "002402", "002403", "002406", "002407", "002412", "002413", "002414", "002431", "002443", "002452", "002461", "002463", "002465", "002473", "002474", "002479", "002487", "002491", "002496", "002499", "002501", "002504", "002508", "002510", "002517", "002521", "002522", "002524", "002525", "002526", "002564", "002569", "002570", "002573", "002580", "002581", "002587", "002594", "002601", "002602", "002610", "002611", "002613", "002614", "002617", "002620", "002623", "002628", "002629", "002630", "002631", "002636", "002637", "002638", "002639", "002669", "002670", "002680", "002696", "002697", "002698", "002706", "002709", "002712", "002713", "002718", "002721", "002724", "002725", "002730", "002734", "002738", "002740", "002748", "002779", "002784", "002797", "002803", "002813", "002823", "002828", "002835", "002837", "002839", "002840", "002844", "002846", "002850", "002854", "002856", "002857", "002882", "002890", "002895", "002896", "002901", "002914", "002916", "002919", "002927", "002928", "002930", "002931", "002934", "002936", "002940", "002942", "002944", "002953", "002954", "002956", "002957", "002958", "002959", "002961", "002965", "002966", "002968", "002969", "002995", "002998", "003010", "003029", "003030", "003031", "003033", "003038", "003042", "003046", "003053", "003057", "003060", "003063", "003064", "003066", "003067", "003073", "003074", "003077", "003103", "003115", "003118", "003123", "003124", "003134", "003137", "003142", "003146", "003147", "003153", "003156", "003159", "003163", "003166", "003168", "003170", "003174", "003175", "003176", "003179", "003181", "003185", "003219", "003223", "003232", "003236", "003243", "003255", "003261", "003264", "003267", "003272", "003274", "003275", "003276", "003278", "003280", "003281", "003284", "003285", "003286", "003292", "003294", "003297", "003298", "003299", "003320", "003336", "003344", "003360", "003363", "003365", "003368", "003372", "003374", "003376", "003378", "003381", "003382", "003383", "003384", "003386", "003387", "003391", "003394", "003395", "003396", "003397", "003399", "003402", "003405", "003443", "003444", "003447", "003453", "003456", "003462", "003466", "003467", "003468", "003471", "003472", "003474", "003485", "003495", "003501", "003503", "003504", "003514", "003515", "003533", "003554", "003557", "003569", "003573", "003575", "003578", "003581", "003591", "003592", "003594", "003595", "003601", "003602", "003603", "003608", "003611", "003613", "003615", "003618", "003619", "003624", "003627", "003652", "003662", "003669", "003673", "003682", "003692", "003701", "003702", "003704", "003710", "003711", "003712", "003716", "003722", "003723", "003724", "003728", "003733", "003735", "003737", "003738", "003750", "003781", "003782", "003797", "003800", "003801", "003805", "003809", "003810", "003825", "003829", "003835", "003836", "003843", "003844", "003845", "003847", "003872", "003879", "003887", "003889", "003899", "003905", "003907", "003912", "003921", "003922", "003923", "003933", "003934", "003936", "003937", "003948", "003956", "003971", "004001", "004015", "004016", "004026", "004031", "004034", "004038", "004040", "004041", "004043", "004045", "004049", "004050", "004061", "004062", "004065", "004066", "004088", "004091", "004103", "004111", "004119", "004121", "004128", "004131", "004138", "004141", "004144", "004146", "004149", "004154", "004155", "004157", "004160", "004162", "004164", "004168", "004169", "004170", "004171", "004172", "004175", "004179", "004193", "004202", "004220", "004224", "004228", "004230", "004233", "004234", "004237", "004240", "004242", "004249", "004254", "004255", "004256", "004257", "004258", "004260", "004263", "004267", "004271", "004273", "004275", "004276", "004285", "004306", "004316", "004321", "004327", "004333", "004335", "004341", "004344", "004348", "004350", "004362", "004363", "004365", "004366", "004367", "004369", "004373", "004375", "004377", "004382", "004384", "004385", "004389", "004390", "004392", "004395", "004397", "004399", "004410", "004436", "004438", "004444", "004458", "004470", "004471", "004480", "004482", "004483", "004484", "004485", "004496", "004499", "004504", "004507", "004508", "004509", "004523", "004535", "004555", "004558", "004562", "004563", "004572", "004579", "004586", "004587", "004594", "004601", "004602", "004603", "004604", "004608", "004610", "004611", "004613", "004615", "004617", "004618", "004643", "004654", "004668", "004678", "004683", "004686", "004689", "004691", "004692", "004699", "004703", "004705", "004706", "004709", "004710", "004711", "004712", "004720", "004722", "004725", "004764", "004771", "004778", "004781", "004782", "004783", "004788", "004791", "004796", "004799", "004800", "004804", "004806", "004807", "004812", "004819", "004828", "004831", "004832", "004837", "004839", "004869", "004883", "004889", "004892", "004897", "004898", "004902", "004907", "004910", "004911", "004914", "004915", "004917", "004919", "004924", "004925", "004926", "004929", "004932", "004935", "004937", "004938", "004942", "004943", "004944", "004946", "004947", "004948", "004971", "004980", "004985", "005004", "005010", "005014", "005017", "005020", "005025", "005031", "005032", "005037", "005042", "005043", "005051", "005054", "005057", "005058", "005059", "005095", "005099", "005100", "005101", "005106", "005109", "005111", "005118", "005121", "005122", "005123", "005127", "005132", "005138", "005141", "005143", "005147", "005150", "005153", "005154", "005158", "005160", "005161", "005162", "005164", "005166", "005167", "005168", "005169", "005182", "005192", "005206", "005213", "005220", "005221", "005232", "005236", "005237", "005240", "005241", "005244", "005248", "005250", "005251", "005255", "005264", "005265", "005267", "005270", "005271", "005272", "005273", "005274", "005276", "005279", "005296", "005315", "005321", "005330", "005333", "005335", "005345", "005348", "005350", "005352", "005360", "005362", "005367", "005370", "005371", "005373", "005375", "005379", "005380", "005384", "005385", "005387", "005388", "005389", "005421", "005425", "005431", "005440", "005444", "005445", "005450", "005452", "005453", "005456", "005461", "005463", "005464", "005466", "005469", "005472", "005478", "005483", "005485", "005486", "005488", "005489", "005493", "005496", "005528", "005530", "005546", "005553", "005562", "005568", "005570", "005574", "005575", "005579", "005581", "005584", "005586", "005590", "005593", "005594", "005598", "005599", "005600", "005601", "005602", "005605", "005626", "005632", "005637", "005651", "005654", "005662", "005664", "005668", "005672", "005674", "005676", "005680", "005684", "005685", "005689", "005692", "005694", "005699", "005701", "005702", "005703", "005705", "005707", "005711", "005714", "005715", "005716", "005718", "005719", "005736", "005751", "005752", "005757", "005766", "005770", "005775", "005780", "005781", "005783", "005785", "005787", "005790", "005791", "005793", "005796", "005804", "005809", "005810", "005811", "005812", "005813", "005815", "005817", "005822", "005824", "005827", "005829", "005849", "005859", "005864", "005874", "005875", "005883", "005888", "005890", "005892", "005893", "005894", "005899", "005908", "005911", "005914", "005922", "005923", "005928", "005937", "005984", "006006", "006007", "006010", "006014", "006019", "006023", "006026", "006027", "006030", "006031", "006033", "006035", "006036", "006037", "006038", "006040", "006041", "006048", "006060", "006076", "006080", "006084", "006099", "006104", "006105", "006106", "006115", "006119", "006128", "006138", "006139", "006146", "006150", "006151", "006152", "006154", "006155", "006158", "006172", "006191", "006194", "006197", "006204", "006214", "006215", "006218", "006221", "006224", "006231", "006234", "006239", "006247", "006255", "006258", "006264", "006291", "006302", "006313", "006318", "006325", "006329", "006333", "006334", "006337", "006338", "006341", "006342", "006345", "006348", "006350", "006352", "006353", "006358", "006364", "006366", "006367", "006368", "006370", "006375", "006378", "006379", "006395", "006417", "006420", "006430", "006431", "006438", "006441", "006445", "006450", "006452", "006454", "006456", "006458", "006461", "006463", "006465", "006468", "006472", "006473", "006476", "006479", "006487", "006488", "006511", "006529", "006532", "006537", "006542", "006552", "006556", "006558", "006560", "006562", "006564", "006568", "006569", "006570", "006572", "006576", "006579", "006588", "006590", "006591", "006596", "006597", "006598", "006599", "006623", "006628", "006636", "006637", "006643", "006645", "006648", "006655", "006657", "006660", "006664", "006671", "006677", "006680", "006683", "006685", "006686", "006687", "006688", "006690", "006692", "006695", "006696", "006697", "006700", "006703", "006709", "006733", "006754", "006763", "006773", "006774", "006776", "006780", "006781", "006782", "006786", "006787", "006792", "006793", "006795", "006802", "006803", "006805", "006809", "006815", "006818", "006819", "006842", "006879", "006883", "006886", "006890", "006899", "006901", "006902", "006905", "006912", "006916", "006917", "006918", "006919", "006921", "006922", "006923", "006924", "006926", "006929", "006958", "006966", "006971", "006972", "006981", "006987", "006989", "006993", "006996", "006997", "007000", "007003", "007007", "007010", "007015", "007016", "007018", "007020", "007027", "007031", "007033", "007034", "007035", "007038", "007060", "007061", "007070", "007075", "007085", "007087", "007089", "007093", "007098", "007107", "007112", "007116", "007118", "007122", "007126", "007127", "007132", "007133", "007134", "007137", "007141", "007143", "007144", "007146", "007147", "007148", "007149", "007174", "007182", "007202", "007203", "007205", "007208", "007209", "007210", "007223", "007246", "007253", "007254", "007255", "007257", "007259", "007275", "007291", "007298", "007313", "007317", "007321", "007328", "007334", "007342", "007344", "007345", "007347", "007350", "007351", "007353", "007355", "007359", "007361", "007362", "007366", "007367", "007368", "007401", "007410", "007415", "007418", "007420", "007421", "007435", "007438", "007445", "007447", "007452", "007453", "007454", "007456", "007459", "007460", "007463", "007468", "007469", "007470", "007471", "007473", "007474", "007478", "007515", "007518", "007521", "007524", "007531", "007547", "007551", "007552", "007553", "007555", "007556", "007563", "007564", "007565", "007568", "007571", "007579", "007583", "007586", "007589", "007608", "007611", "007626", "007632", "007635", "007639", "007644", "007645", "007648", "007661", "007663", "007669", "007671", "007673", "007678", "007679", "007680", "007681", "007682", "007683", "007684", "007685", "007689", "007693", "007694", "007698", "007699", "007713", "007722", "007736", "007739", "007749", "007756", "007763", "007766", "007772", "007775", "007778", "007782", "007785", "007790", "007801", "007805", "007807", "007808", "007834", "007843", "007845", "007850", "007866", "007868", "007875", "007881", "007883", "007888", "007889", "007892", "007894", "007895", "007898", "007902", "007903", "007904", "007905", "007906", "007907", "007912", "007913", "007914", "007915", "007916", "007931", "007942", "007955", "007958", "007962", "007974", "007975", "007976", "007981", "007982", "007987", "007990", "007994", "007995", "008003", "008005", "008008", "008009", "008020", "008021", "008023", "008024", "008025", "008026", "008027", "008029", "008058", "008075", "008086", "008089", "008091", "008097", "008106", "008112", "008113", "008119", "008130", "008131", "008135", "008137", "008157", "008163", "008172", "008175", "008177", "008184", "008188", "008190", "008197", "008198", "008199", "008206", "008213", "008214", "008215", "008216", "008219", "008225", "008226", "008232", "008233", "008235", "008236", "008238", "008244", "008245", "008246", "008277", "008284", "008287", "008294", "008304", "008315", "008319", "008320", "008328", "008329", "008330", "008331", "008335", "008342", "008343", "008346", "008347", "008352", "008354", "008355", "008358", "008390", "008400", "008406", "008411", "008416", "008424", "008425", "008426", "008429", "008430", "008433", "008436", "008438", "008440", "008441", "008442", "008443", "008444", "008449", "008451", "008457", "008458", "008466", "008469", "008496", "008498", "008507", "008514", "008515", "008518", "008526", "008527", "008529", "008532", "008533", "008543", "008545", "008550", "008551", "008553", "008555", "008559", "008563", "008568", "008574", "008576", "008606", "008609", "008617", "008619", "008629", "008630", "008631", "008642", "008656", "008660", "008661", "008668", "008671", "008673", "008678", "008679", "008680", "008682", "008683", "008684", "008685", "008720", "008733", "008739", "008740", "008748", "008749", "008750", "008757", "008761", "008765", "008766", "008768", "008770", "008774", "008777", "008780", "008785", "008787", "008790", "008792", "008796", "008797", "008822", "008825", "008832", "008838", "008839", "008860", "008875", "008883", "008884", "008888", "008889", "008899", "008900", "008902", "008906", "008907", "008909", "008934", "008939", "008951", "008954", "008962", "008963", "008971", "008973", "008977", "008980", "008990", "008993", "008994", "008995", "009000", "009002", "009003", "009009", "009017", "009019", "009030", "009048", "009063", "009070", "009073", "009076", "009082", "009084", "009087", "009088", "009091", "009092", "009093", "009099", "009100", "009103", "009106", "009107", "009110", "009116", "009120", "009123", "009124", "009126", "009128", "009166", "009177", "009185", "009186", "009188", "009192", "009196", "009197", "009199", "009202", "009204", "009205", "009209", "009211", "009212", "009214", "009224", "009225", "009230", "009233", "009236", "009238", "009261", "009265", "009273", "009274", "009277", "009281", "009283", "009299", "009304", "009312", "009317", "009319", "009321", "009323", "009326", "009327", "009329", "009330", "009333", "009334", "009339", "009340", "009341", "009342", "009347", "009349", "009360", "009377", "009386", "009398", "009400", "009407", "009410", "009413", "009416", "009423", "009424", "009425", "009429", "009432", "009436", "009439", "009441", "009444", "009445", "009449", "009454", "009455", "009457", "009458", "009480", "009491", "009492", "009503", "009506", "009507", "009515", "009518", "009525", "009526", "009527", "009530", "009533", "009540", "009545", "009548", "009549", "009555", "009556", "009557", "009562", "009565", "009566", "009583", "009599", "009603", "009604", "009607", "009617", "009621", "009624", "009630", "009635", "009638", "009645", "009646", "009648", "009653", "009654", "009655", "009659", "009661", "009666", "009669", "009673", "009674", "009676", "009678", "009700", "009724", "009729", "009734", "009739", "009742", "009748", "009751", "009756", "009763", "009767", "009768", "009771", "009774", "009776", "009781", "009787", "009811", "009822", "009825", "009833", "009835", "009845", "009847", "009855", "009860", "009861", "009864", "009869", "009871", "009877", "009881", "009884", "009885", "009886", "009887", "009891", "009892", "009895", "009896", "009897", "009899", "009940", "009956", "009957", "009961", "009966", "009967", "009976", "009978", "009982", "009985", "009986", "009987", "009988", "009995", "009999", "010000", "010004", "010008", "010049", "010052", "010058", "010063", "010071", "010080", "010082", "010091", "010100", "010103", "010104", "010106", "010108", "010111", "010116", "010118", "010141", "010157", "010163", "010164", "010165", "010172", "010173", "010175", "010176", "010192", "010195", "010197", "010201", "010202", "010204", "010207", "010210", "010212", "010215", "010216", "010217", "010218", "010219", "010225", "010226", "010228", "010269", "010272", "010275", "010281", "010284", "010285", "010293", "010295", "010297", "010302", "010307", "010308", "010312", "010314", "010318", "010320", "010321", "010324", "010325", "010331", "010336", "010338", "010377", "010383", "010384", "010395", "010396", "010400", "010404", "010408", "010410", "010412", "010418", "010424", "010425", "010429", "010431", "010432", "010440", "010441", "010442", "010447", "010449", "010481", "010487", "010488", "010496", "010497", "010504", "010507", "010517", "010518", "010522", "010523", "010528", "010532", "010533", "010539", "010543", "010550", "010551", "010554", "010557", "010578", "010603", "010606", "010610", "010619", "010620", "010623", "010627", "010629", "010634", "010637", "010638", "010639", "010642", "010645", "010646", "010648", "010649", "010650", "010653", "010661", "010663", "010665", "010683", "010716", "010717", "010720", "010723", "010730", "010731", "010734", "010736", "010742", "010749", "010750", "010754", "010756", "010762", "010768", "010769", "010770", "010771", "010772", "010779", "010804", "010819", "010824", "010827", "010829", "010834", "010836", "010842", "010845", "010851", "010853", "010856", "010858", "010859", "010862", "010864", "010865", "010869", "010871", "010873", "010875", "010877", "010881", "010882", "010888", "010932", "010940", "010945", "010953", "010961", "010965", "010970", "010971", "010977", "010979", "010980", "010982", "010984", "010985", "010987", "010988", "010990", "010991", "010993", "010994", "010996", "010998", "011011", "011029", "011056", "011057", "011069", "011074", "011079", "011083", "011085", "011091", "011092", "011094", "011095", "011096", "011105", "011107", "011108", "011123", "011130", "011139", "011145", "011150", "011154", "011161", "011164", "011171", "011172", "011177", "011184", "011185", "011187", "011189", "011196", "011199", "011200", "011202", "011203", "011210", "011212", "011216", "011217", "011219", "011254", "011264", "011265", "011278", "011284", "011286", "011287", "011289", "011295", "011296", "011303", "011306", "011310", "011311", "011312", "011316", "011319", "011322", "011327", "011352", "011364", "011377", "011385", "011388", "011393", "011397", "011400", "011402", "011408", "011411", "011414", "011416", "011422", "011424", "011428", "011429", "011433", "011435", "011461", "011480", "011485", "011491", "011492", "011495", "011498", "011507", "011509", "011510", "011516", "011518", "011519", "011521", "011524", "011525", "011530", "011534", "011535", "011540", "011544", "011546", "011547", "011566", "011577", "011585", "011608", "011612", "011620", "011623", "011625", "011632", "011637", "011641", "011642", "011650", "011653", "011656", "011658", "011659", "011673", "011680", "011694", "011696", "011705", "011713", "011719", "011720", "011727", "011733", "011740", "011742", "011746", "011747", "011748", "011752", "011754", "011755", "011757", "011758", "011765", "011766", "011768", "011769", "011781", "011805", "011807", "011810", "011812", "011813", "011824", "011825", "011839", "011852", "011853", "011860", "011862", "011872", "011873", "011874", "011876", "011877", "011879", "011896", "011911", "011919", "011920", "011928", "011933", "011943", "011945", "011954", "011958", "011960", "011963", "011968", "011969", "011971", "011979", "011980", "011988", "012019", "012034", "012036", "012039", "012046", "012048", "012051", "012054", "012056", "012057", "012061", "012063", "012065", "012078", "012079", "012083", "012084", "012085", "012090", "012092", "012113", "012126", "012133", "012148", "012149", "012150", "012153", "012157", "012161", "012162", "012165", "012166", "012170", "012171", "012172", "012173", "012191", "012194", "012197", "012201", "012202", "012203", "012205", "012206", "012207", "012208", "012209", "012239", "012244", "012249", "012266", "012269", "012270", "012272", "012273", "012281", "012284", "012288", "012290", "012294", "012297", "012300", "012301", "012303", "012305", "012307", "012309", "012310", "012311", "012313", "012314", "012317", "012318", "012349", "012354", "012357", "012358", "012377", "012384", "012389", "012397", "012400", "012402", "012407", "012410", "012413", "012415", "012423", "012425", "012426", "012427", "012443", "012456", "012458", "012460", "012462", "012463", "012470", "012476", "012479", "012487", "012488", "012491", "012495", "012498", "012504", "012506", "012520", "012522", "012530", "012532", "012535", "012537", "012557", "012571", "012573", "012579", "012583", "012584", "012590", "012599", "012600", "012602", "012605", "012609", "012613", "012617", "012618", "012619", "012620", "012622", "012623", "012629", "012630", "012631", "012632", "012634", "012636", "012639", "012641", "012645", "012648", "012649", "012678", "012693", "012694", "012699", "012700", "012710", "012712", "012714", "012720", "012723", "012726", "012727", "012730", "012735", "012740", "012741", "012744", "012746", "012751", "012753", "012754", "012755", "012756", "012759", "012791", "012793", "012798", "012805", "012812", "012814", "012823", "012829", "012831", "012835", "012840", "012842", "012852", "012853", "012854", "012861", "012862", "012863", "012866", "012868", "012869", "012895", "012897", "012901", "012903", "012913", "012926", "012938", "012942", "012947", "012948", "012949", "012950", "012952", "012953", "012954", "012957", "012959", "012960", "012965", "012966", "012972", "012975", "012976", "012993", "013001", "013004", "013011", "013027", "013029", "013031", "013041", "013044", "013050", "013059", "013060", "013062", "013064", "013071", "013074", "013076", "013078", "013083", "013087", "013124", "013130", "013146", "013149", "013150", "013151", "013155", "013158", "013159", "013166", "013169", "013173", "013179", "013186", "013190", "013191", "013193", "013196", "013197", "013233", "013238", "013249", "013252", "013255", "013258", "013269", "013270", "013273", "013274", "013276", "013288", "013290", "013291", "013294", "013296", "013297", "013300", "013301", "013302", "013303", "013305", "013307", "013309", "013351", "013361", "013362", "013378", "013379", "013381", "013384", "013399", "013402", "013405", "013406", "013407", "013415", "013419", "013453", "013460", "013467", "013474", "013479", "013483", "013485", "013489", "013490", "013491", "013494", "013495", "013498", "013499", "013504", "013513", "013515", "013518", "013520", "013525", "013526", "013545", "013552", "013558", "013561", "013570", "013575", "013576", "013578", "013581", "013592", "013596", "013599", "013605", "013607", "013608", "013616", "013621", "013622", "013626", "013627", "013628", "013629", "013631", "013634", "013635", "013636", "013637", "013668", "013682", "013689", "013693", "013694", "013702", "013713", "013714", "013723", "013724", "013726", "013734", "013744", "013746", "013748", "013771", "013784", "013802", "013806", "013809", "013815", "013825", "013827", "013831", "013834", "013839", "013840", "013844", "013845", "013846", "013847", "013851", "013858", "013859", "013880", "013890", "013897", "013898", "013903", "013904", "013911", "013912", "013916", "013918", "013925", "013932", "013936", "013937", "013944", "013947", "013948", "013950", "013954", "013959", "013961", "013962", "013964", "014001", "014006", "014011", "014023", "014036", "014045", "014049", "014051", "014052", "014057", "014058", "014063", "014064", "014070", "014078", "014102", "014121", "014132", "014133", "014141", "014142", "014146", "014147", "014152", "014158", "014162", "014166", "014167", "014169", "014176", "014177", "014181", "014182", "014183", "014186", "014188", "014189", "014201", "014210", "014216", "014224", "014234", "014240", "014244", "014250", "014256", "014257", "014258", "014264", "014270", "014279", "014283", "014288", "014291", "014293", "014294", "014295", "014296", "014297", "014298", "014327", "014347", "014348", "014364", "014368", "014369", "014371", "014372", "014377", "014378", "014380", "014381", "014395", "014397", "014402", "014404", "014409", "014433", "014443", "014445", "014459", "014461", "014462", "014469", "014478", "014483", "014487", "014489", "014491", "014498", "014499", "014507", "014510", "014514", "014517", "014519", "014548", "014550", "014555", "014567", "014569", "014571", "014581", "014592", "014594", "014596", "014600", "014604", "014609", "014612", "014615", "014622", "014624", "014629", "014644", "014658", "014662", "014698", "014706", "014707", "014708", "014712", "014715", "014717", "014724", "014725", "014733", "014734", "014739", "014768", "014771", "014783", "014784", "014788", "014790", "014798", "014800", "014802", "014805", "014809", "014816", "014817", "014822", "014823", "014826", "014827", "014829", "014831", "014832", "014835", "014842", "014848", "014882", "014895", "014905", "014918", "014920", "014925", "014927", "014928", "014937", "014938", "014940", "014942", "014943", "014944", "014947", "014951", "014952", "014953", "014954", "014955", "014972", "014987", "014998", "014999", "015000", "015003", "015014", "015015", "015019", "015021", "015023", "015027", "015029", "015041", "015045", "015046", "015051", "015052", "015053", "015055", "015057", "015058", "015060", "015062", "015063", "015064", "015065", "015067", "015068", "015069", "015109", "015115", "015119", "015128", "015132", "015134", "015136", "015145", "015148", "015151", "015152", "015153", "015156", "015157", "015158", "015162", "015166", "015168", "015173", "015176", "015208", "015215", "015231", "015236", "015249", "015250", "015251", "015254", "015261", "015265", "015267", "015272", "015277", "015278", "015280", "015282", "015283", "015285", "015287", "015314", "015319", "015329", "015330", "015341", "015354", "015357", "015361", "015367", "015373", "015375", "015381", "015383", "015385", "015387", "015388", "015389", "015393", "015394", "015396", "015397", "015423", "015446", "015449", "015450", "015465", "015471", "015473", "015474", "015479", "015480", "015482", "015489", "015492", "015496", "015497", "015502", "015504", "015506", "015507", "015508", "015523", "015534", "015538", "015544", "015550", "015552", "015554", "015559", "015560", "015567", "015576", "015577", "015580", "015581", "015584", "015585", "015587", "015589", "015599", "015602", "015608", "015610", "015612", "015613", "015614", "015617", "015619", "015644", "015650", "015651", "015653", "015661", "015670", "015672", "015676", "015677", "015680", "015684", "015687", "015691", "015693", "015694", "015695", "015696", "015701", "015703", "015704", "015706", "015707", "015708", "015710", "015711", "015714", "015716", "015719", "015721", "015722", "015723", "015724", "015726", "015727", "015729", "015753", "015759", "015768", "015778", "015779", "015787", "015788", "015793", "015798", "015801", "015802", "015812", "015816", "015817", "015821", "015824", "015827", "015830", "015833", "015837", "015856", "015868", "015870", "015875", "015889", "015895", "015898", "015900", "015901", "015903", "015912", "015917", "015918", "015920", "015922", "015927", "015929", "015930", "015936", "015938", "015940", "015943", "015946", "015947", "015948", "015975", "015981", "015988", "016001", "016003", "016005", "016011", "016014", "016018", "016019", "016020", "016021", "016023", "016025", "016031", "016033", "016034", "016037", "016039", "016040", "016043", "016044", "016046", "016047", "016051", "016054", "016058", "016082", "016095", "016097", "016099", "016106", "016119", "016122", "016123", "016127", "016131", "016136", "016141", "016142", "016144", "016145", "016154", "016157", "016159", "016161", "016163", "016164", "016167", "016187", "016194", "016204", "016211", "016212", "016216", "016220", "016221", "016233", "016236", "016238", "016239", "016242", "016246", "016250", "016252", "016253", "016254", "016255", "016258", "016260", "016261", "016262", "016264", "016266", "016267", "016271", "016272", "016278", "016301", "016311", "016324", "016329", "016335", "016338", "016343", "016345", "016348", "016350", "016352", "016357", "016359", "016360", "016363", "016367", "016370", "016372", "016374", "016378", "016381", "016382", "016384", "016389", "016411", "016418", "016433", "016442", "016448", "016449", "016452", "016460", "016461", "016463", "016470", "016476", "016477", "016479", "016481", "016487", "016488", "016489", "016491", "016492", "016493", "016496", "016499", "016517", "016541", "016543", "016546", "016548", "016554", "016555", "016560", "016567", "016572", "016574", "016576", "016579", "016580", "016587", "016592", "016597", "016599", "016600", "016602", "016603", "016605", "016606", "016624", "016638", "016640", "016649", "016650", "016663", "016667", "016669", "016670", "016671", "016673", "016674", "016682", "016683", "016685", "016687", "016691", "016696", "016699", "016703", "016706", "016711", "016713", "016714", "016715", "016718", "016743", "016760", "016766", "016769", "016777", "016791", "016794", "016799", "016801", "016803", "016807", "016816", "016818", "016819", "016823", "016827", "016828", "016843", "016858", "016871", "016875", "016876", "016889", "016896", "016897", "016900", "016901", "016902", "016914", "016915", "016917", "016918", "016919", "016921", "016923", "016924", "016925", "016928", "016931", "016936", "016955", "016971", "016974", "016980", "016983", "017002", "017003", "017004", "017005", "017008", "017009", "017010", "017014", "017015", "017016", "017017", "017019", "017020", "017024", "017026", "017027", "017033", "017035", "017040", "017042", "017044", "017046", "017048", "017075", "017077", "017086", "017088", "017091", "017099", "017100", "017109", "017112", "017116", "017118", "017129", "017133", "017134", "017135", "017139", "017144", "017146", "017150", "017152", "017154", "017178", "017189", "017198", "017200", "017202", "017204", "017212", "017213", "017222", "017223", "017226", "017235", "017237", "017239", "017240", "017242", "017246", "017250", "017252", "017258", "017263", "017264", "017266", "017267", "017268", "017282", "017293", "017304", "017305", "017319", "017321", "017327", "017337", "017339", "017342", "017346", "017350", "017357", "017359", "017360", "017364", "017369", "017372", "017375", "017376", "017378", "017379", "017405", "017406", "017414", "017415", "017433", "017435", "017439", "017440", "017441", "017445", "017449", "017450", "017453", "017456", "017458", "017462", "017464", "017470", "017471", "017474", "017480", "017482", "017484", "017485", "017489", "017511", "017519", "017523", "017526", "017537", "017540", "017541", "017542", "017547", "017551", "017556", "017558", "017565", "017566", "017567", "017570", "017572", "017575", "017580", "017585", "017588", "017590", "017593", "017595", "017598", "017599", "017612", "017624", "017637", "017646", "017653", "017660", "017662", "017668", "017675", "017679", "017680", "017681", "017682", "017689", "017692", "017695", "017699", "017702", "017705", "017708", "017731", "017740", "017745", "017751", "017754", "017755", "017759", "017760", "017762", "017770", "017774", "017775", "017780", "017784", "017792", "017793", "017794", "017796", "017798", "017800", "017803", "017811", "017813", "017815", "017816", "017817", "017819", "017843", "017859", "017861", "017862", "017873", "017882", "017888", "017891", "017892", "017893", "017894", "017899", "017900", "017903", "017904", "017911", "017913", "017914", "017915", "017917", "017918", "017920", "017921", "017926", "017961", "017966", "017970", "017971", "017978", "017980", "017981", "017985", "017989", "017994", "017995", "017996", "017998", "018005", "018009", "018018", "018021", "018023", "018025", "018029", "018031", "018036", "018070", "018091", "018096", "018097", "018107", "018108", "018109", "018113", "018115", "018121", "018124", "018125", "018130", "018132", "018135", "018142", "018143", "018144", "018147", "018148", "018176", "018192", "018206", "018209", "018210", "018211", "018215", "018216", "018226", "018228", "018233", "018234", "018236", "018238", "018239", "018241", "018243", "018255", "018256", "018257", "018258", "018280", "018299", "018318", "018323", "018325", "018326", "018339", "018341", "018342", "018349", "018352", "018355", "018360", "018361", "018363", "018364", "018401", "018403", "018408", "018420", "018421", "018429", "018432", "018433", "018438", "018443", "018444", "018446", "018447", "018448", "018460", "018466", "018467", "018470", "018473", "018474", "018475", "018477", "018479", "018503", "018519", "018525", "018534", "018538", "018540", "018547", "018549", "018552", "018555", "018557", "018565", "018570", "018571", "018575", "018576", "018579", "018580", "018581", "018584", "018587", "018619", "018630", "018638", "018646", "018651", "018652", "018653", "018654", "018662", "018663", "018664", "018671", "018673", "018677", "018683", "018685", "018688", "018690", "018691", "018693", "018694", "018697", "018699", "018740", "018747", "018750", "018756", "018758", "018764", "018765", "018773", "018774", "018775", "018776", "018787", "018788", "018791", "018793", "018796", "018797", "018800", "018805", "018809", "018822", "018840", "018842", "018858", "018868", "018871", "018880", "018881", "018883", "018884", "018885", "018889", "018890", "018894", "018896", "018897", "018901", "018914", "018915", "018917", "018934", "018964", "018971", "018973", "018978", "018980", "018985", "018986", "018994", "018996", "018998", "019000", "019001", "019004", "019011", "019012", "019014", "019021", "019024", "019025", "019027", "019029", "019043", "019059", "019065", "019066", "019068", "019071", "019078", "019081", "019090", "019094", "019098", "019099", "019103", "019104", "019108", "019110", "019111", "019121", "019123", "019124", "019126", "019161", "019171", "019189", "019191", "019197", "019200", "019201", "019202", "019204", "019208", "019216", "019217", "019221", "019223", "019224", "019226", "019228", "019231", "019235", "019238", "019240", "019241", "019245", "019246", "019247", "019288", "019292", "019300", "019302", "019305", "019319", "019323", "019324", "019325", "019327", "019328", "019331", "019338", "019339", "019341", "019342", "019343", "019344", "019345", "019346", "019350", "019351", "019353", "019357", "019358", "019376", "019385", "019388", "019390", "019392", "019396", "019410", "019413", "019422", "019429", "019430", "019431", "019432", "019433", "019437", "019439", "019445", "019446", "019452", "019454", "019457", "019458", "019461", "019466", "019467", "019469", "019490", "019496", "019506", "019508", "019518", "019522", "019523", "019530", "019532", "019535", "019539", "019540", "019542", "019546", "019547", "019548", "019554", "019557", "019562", "019564", "019566", "019570", "019577", "019601", "019629", "019632", "019638", "019643", "019645", "019650", "019655", "019659", "019661", "019662", "019664", "019668", "019669", "019670", "019672", "019674", "019679", "019681", "019686", "019688", "019704", "019720", "019730", "019738", "019741", "019749", "019754", "019755", "019760", "019767", "019774", "019776", "019778", "019780", "019783", "019784", "019790", "019791", "019794", "019796", "019820", "019823", "019840", "019843", "019845", "019855", "019861", "019863", "019873", "019875", "019876", "019877", "019884", "019888", "019893", "019896", "019897", "019898", "019901", "019908", "019934", "019940", "019948", "019958", "019962", "019965", "019966", "019971", "019975", "019981", "019986", "019988", "019993", "019995", "019996", "020013", "020014", "020015", "020016", "020017", "020018", "020048", "020051", "020056", "020071", "020081", "020092", "020094", "020095", "020102", "020104", "020108", "020113", "020121", "020122", "020123", "020156", "020164", "020170", "020175", "020177", "020180", "020189", "020194", "020197", "020201", "020204", "020205", "020208", "020212", "020214", "020215", "020216", "020217", "020220", "020221", "020222", "020229", "020232", "020235", "020236", "020239", "020252", "020263", "020271", "020278", "020292", "020296", "020301", "020305", "020308", "020312", "020314", "020317", "020320", "020325", "020327", "020328", "020330", "020332", "020336", "020340", "020342", "020345", "020348", "020360", "020376", "020384", "020390", "020394", "020401", "020402", "020404", "020412", "020420", "020423", "020426", "020427", "020430", "020432", "020434", "020438", "020440", "020443", "020445", "020449", "020450", "020452", "020457", "020459", "020471", "020499", "020516", "020522", "020528", "020530", "020531", "020532", "020533", "020536", "020537", "020542", "020544", "020551", "020552", "020555", "020556", "020561", "020563", "020567", "020569", "020587", "020593", "020602", "020612", "020613", "020621", "020629", "020630", "020638", "020641", "020644", "020645", "020652", "020654", "020657", "020662", "020671", "020673", "020674", "020675", "020676", "020679", "020711", "020722", "020727", "020731", "020738", "020742", "020744", "020746", "020754", "020759", "020762", "020773", "020774", "020777", "020782", "020804", "020819", "020826", "020834", "020836", "020837", "020851", "020857", "020860", "020861", "020874", "020876", "020880", "020881", "020882", "020885", "020886", "020889", "020893", "020894", "020896", "020898", "020899", "020929", "020940", "020943", "020954", "020958", "020969", "020976", "020977", "020987", "020993", "020995", "021001", "021006", "021009", "021032", "021044", "021048", "021050", "021057", "021066", "021074", "021075", "021076", "021083", "021088", "021092", "021095", "021097", "021098", "021102", "021104", "021105", "021108", "021109", "021110", "021111", "021112", "021114", "021117", "021118", "021136", "021159", "021160", "021186", "021188", "021190", "021192", "021195", "021198", "021200", "021201", "021205", "021207", "021209", "021211", "021213", "021214", "021216", "021218", "021220", "021222", "021225", "021226", "021227", "021248", "021257", "021262", "021269", "021270", "021280", "021287", "021296", "021297", "021305", "021309", "021311", "021313", "021317", "021319", "021321", "021322", "021324", "021333", "021334", "021336", "021337", "021357", "021368", "021369", "021372", "021374", "021383", "021384", "021393", "021397", "021400", "021415", "021418", "021422", "021430", "021433", "021434", "021435", "021439", "021442", "021444", "021445", "021449", "021467", "021486", "021496", "021497", "021502", "021505", "021510", "021517", "021518", "021530", "021534", "021549", "021553", "021589", "021599", "021600", "021609", "021612", "021613", "021614", "021623", "021632", "021637", "021641", "021645", "021647", "021649", "021650", "021651", "021654", "021655", "021656", "021658", "021659", "021664", "021665", "021668", "021694", "021699", "021705", "021717", "021720", "021721", "021724", "021726", "021730", "021740", "021745", "021746", "021752", "021754", "021757", "021758", "021764", "021768", "021771", "021774", "021776", "021779", "021813", "021816", "021819", "021831", "021834", "021838", "021845", "021846", "021850", "021851", "021852", "021856", "021861", "021862", "021863", "021867", "021869", "021872", "021873", "021875", "021878", "021881", "021882", "021883", "021884", "021886", "021887", "021889", "021915", "021919", "021929", "021930", "021935", "021939", "021943", "021947", "021959", "021963", "021966", "021967", "021968", "021970", "021971", "021975", "021976", "021977", "021979", "021983", "021985", "021991", "021993", "021996", "021997", "021999", "022028", "022035", "022041", "022046", "022049", "022055", "022056", "022073", "022076", "022077", "022081", "022089", "022093", "022101", "022103", "022104", "022106", "022107", "022150", "022154", "022162", "022170", "022177", "022181", "022182", "022185", "022186", "022188", "022190", "022193", "022194", "022196", "022202", "022205", "022206", "022207", "022208", "022209", "022218", "022219", "022223", "022224", "022230", "022242", "022249", "022251", "022256", "022257", "022271", "022281", "022283", "022286", "022289", "022295", "022306", "022312", "022317", "022319", "022322"], "test": ["000021", "000034", "000040", "000046", "000048", "000052", "000053", "000059", "000061", "000072", "000073", "000075", "000076", "000077", "000080", "000081", "000082", "000085", "000087", "000088", "000090", "000093", "000094", "000095", "000096", "000097", "000098", "000099", "000102", "000104", "000106", "000107", "000108", "000109", "000135", "000142", "000144", "000153", "000154", "000156", "000157", "000160", "000169", "000170", "000171", "000172", "000173", "000178", "000179", "000180", "000185", "000188", "000189", "000190", "000191", "000193", "000194", "000198", "000199", "000200", "000201", "000202", "000203", "000209", "000210", "000211", "000212", "000215", "000216", "000239", "000240", "000251", "000254", "000263", "000271", "000279", "000281", "000282", "000283", "000287", "000294", "000295", "000297", "000299", "000300", "000301", "000303", "000306", "000307", "000308", "000316", "000317", "000323", "000325", "000326", "000327", "000329", "000354", "000363", "000364", "000369", "000370", "000375", "000377", "000381", "000384", "000388", "000389", "000391", "000393", "000394", "000395", "000400", "000401", "000402", "000403", "000407", "000408", "000410", "000411", "000413", "000414", "000415", "000418", "000419", "000422", "000424", "000425", "000427", "000430", "000431", "000434", "000435", "000436", "000437", "000439", "000465", "000479", "000486", "000488", "000489", "000490", "000491", "000495", "000498", "000500", "000507", "000509", "000513", "000516", "000518", "000520", "000522", "000523", "000525", "000529", "000531", "000535", "000537", "000539", "000542", "000543", "000544", "000545", "000547", "000548", "000549", "000570", "000571", "000586", "000588", "000594", "000599", "000603", "000609", "000613", "000617", "000618", "000622", "000623", "000625", "000626", "000627", "000628", "000629", "000630", "000632", "000633", "000634", "000635", "000638", "000640", "000641", "000643", "000645", "000647", "000648", "000649", "000651", "000656", "000657", "000658", "000659", "000672", "000683", "000684", "000691", "000695", "000697", "000702", "000704", "000710", "000713", "000715", "000717", "000724", "000730", "000732", "000736", "000737", "000738", "000740", "000741", "000742", "000744", "000746", "000750", "000751", "000753", "000756", "000758", "000759", "000760", "000761", "000762", "000763", "000765", "000767", "000768", "000788", "000797", "000798", "000806", "000807", "000812", "000815", "000821", "000822", "000824", "000827", "000828", "000831", "000832", "000833", "000835", "000841", "000842", "000844", "000846", "000848", "000849", "000850", "000851", "000852", "000853", "000855", "000859", "000860", "000861", "000863", "000866", "000867", "000869", "000871", "000872", "000873", "000874", "000877", "000891", "000911", "000923", "000928", "000933", "000934", "000936", "000938", "000942", "000945", "000946", "000947", "000949", "000950", "000952", "000956", "000957", "000960", "000962", "000965", "000966", "000967", "000968", "000970", "000972", "000973", "000974", "000975", "000976", "000979", "000980", "000982", "000983", "000984", "000986", "000987", "000989", "001020", "001026", "001032", "001034", "001041", "001046", "001048", "001049", "001050", "001051", "001054", "001060", "001062", "001064", "001065", "001068", "001072", "001073", "001080", "001081", "001082", "001083", "001084", "001085", "001089", "001090", "001092", "001093", "001095", "001097", "001098", "001129", "001143", "001144", "001148", "001153", "001154", "001157", "001159", "001162", "001164", "001172", "001173", "001175", "001178", "001180", "001183", "001185", "001188", "001189", "001191", "001193", "001194", "001195", "001196", "001197", "001198", "001200", "001202", "001203", "001205", "001206", "001207", "001231", "001233", "001242", "001243", "001246", "001251", "001255", "001263", "001265", "001270", "001272", "001273", "001275", "001278", "001279", "001280", "001282", "001283", "001284", "001286", "001290", "001291", "001295", "001298", "001301", "001303", "001304", "001305", "001308", "001310", "001312", "001314", "001315", "001316", "001318", "001319", "001334", "001344", "001348", "001360", "001365", "001372", "001374", "001375", "001381", "001383", "001384", "001385", "001386", "001388", "001394", "001395", "001397", "001398", "001402", "001403", "001404", "001408", "001409", "001410", "001411", "001413", "001414", "001416", "001418", "001419", "001421", "001422", "001423", "001424", "001426", "001429", "001462", "001464", "001467", "001470", "001476", "001486", "001491", "001493", "001496", "001498", "001500", "001502", "001507", "001508", "001509", "001510", "001512", "001513", "001515", "001516", "001517", "001520", "001521", "001522", "001523", "001526", "001528", "001530", "001531", "001532", "001534", "001536", "001538", "001539", "001550", "001562", "001570", "001576", "001579", "001583", "001588", "001595", "001596", "001597", "001599", "001600", "001605", "001608", "001610", "001612", "001613", "001614", "001620", "001625", "001626", "001628", "001632", "001633", "001635", "001637", "001638", "001639", "001642", "001645", "001647", "001648", "001663", "001686", "001691", "001694", "001697", "001699", "001701", "001707", "001708", "001711", "001714", "001715", "001721", "001722", "001727", "001728", "001729", "001730", "001732", "001740", "001741", "001742", "001743", "001745", "001746", "001748", "001751", "001752", "001753", "001754", "001755", "001756", "001757", "001758", "001774", "001788", "001789", "001791", "001794", "001801", "001805", "001810", "001813", "001814", "001818", "001819", "001821", "001823", "001825", "001827", "001828", "001830", "001831", "001832", "001834", "001838", "001839", "001844", "001846", "001847", "001848", "001851", "001854", "001855", "001856", "001857", "001858", "001863", "001864", "001865", "001866", "001884", "001897", "001903", "001907", "001909", "001911", "001914", "001916", "001921", "001922", "001925", "001926", "001932", "001935", "001937", "001939", "001940", "001941", "001948", "001951", "001953", "001954", "001956", "001959", "001960", "001962", "001966", "001967", "001968", "001971", "001974", "001975", "001977", "002007", "002016", "002018", "002027", "002030", "002033", "002035", "002037", "002044", "002046", "002047", "002049", "002053", "002058", "002059", "002061", "002065", "002069", "002070", "002071", "002072", "002076", "002078", "002080", "002081", "002083", "002084", "002085", "002087", "002088", "002104", "002113", "002126", "002127", "002133", "002134", "002138", "002140", "002141", "002150", "002151", "002155", "002156", "002157", "002158", "002161", "002162", "002163", "002164", "002165", "002168", "002169", "002172", "002173", "002177", "002178", "002181", "002184", "002185", "002187", "002188", "002190", "002191", "002192", "002193", "002196", "002198", "002211", "002230", "002232", "002241", "002249", "002251", "002254", "002256", "002263", "002268", "002269", "002279", "002280", "002281", "002284", "002288", "002290", "002296", "002298", "002300", "002301", "002302", "002303", "002304", "002309", "002324", "002331", "002340", "002346", "002355", "002357", "002361", "002363", "002364", "002370", "002373", "002374", "002377", "002379", "002382", "002391", "002395", "002396", "002397", "002399", "002404", "002405", "002408", "002409", "002410", "002411", "002415", "002416", "002417", "002418", "002419", "002449", "002454", "002455", "002462", "002471", "002478", "002480", "002482", "002483", "002484", "002488", "002490", "002492", "002494", "002497", "002500", "002502", "002503", "002505", "002509", "002511", "002513", "002514", "002515", "002516", "002518", "002519", "002520", "002523", "002527", "002528", "002529", "002540", "002551", "002555", "002567", "002575", "002577", "002583", "002586", "002590", "002592", "002596", "002597", "002599", "002600", "002605", "002607", "002608", "002609", "002616", "002618", "002619", "002621", "002622", "002624", "002625", "002627", "002632", "002633", "002634", "002635", "002657", "002666", "002673", "002674", "002682", "002683", "002687", "002694", "002695", "002700", "002702", "002705", "002708", "002710", "002711", "002714", "002716", "002720", "002726", "002727", "002728", "002729", "002731", "002732", "002733", "002735", "002736", "002737", "002741", "002742", "002743", "002744", "002745", "002746", "002747", "002749", "002764", "002773", "002782", "002788", "002791", "002792", "002799", "002800", "002801", "002806", "002808", "002812", "002815", "002816", "002817", "002818", "002820", "002821", "002822", "002824", "002826", "002830", "002831", "002834", "002836", "002838", "002841", "002842", "002845", "002847", "002848", "002849", "002851", "002852", "002853", "002855", "002858", "002859", "002874", "002881", "002903", "002905", "002909", "002913", "002918", "002921", "002922", "002924", "002929", "002933", "002935", "002937", "002941", "002945", "002946", "002948", "002949", "002951", "002952", "002955", "002960", "002962", "002963", "002964", "002967", "002980", "003000", "003001", "003004", "003011", "003014", "003019", "003020", "003021", "003025", "003026", "003037", "003039", "003040", "003044", "003045", "003048", "003049", "003050", "003051", "003055", "003056", "003058", "003059", "003061", "003062", "003065", "003069", "003070", "003071", "003072", "003075", "003076", "003078", "003079", "003098", "003102", "003119", "003126", "003129", "003131", "003132", "003135", "003141", "003143", "003145", "003152", "003154", "003157", "003158", "003161", "003164", "003165", "003167", "003169", "003171", "003172", "003173", "003177", "003180", "003182", "003183", "003184", "003186", "003187", "003188", "003189", "003203", "003210", "003220", "003226", "003230", "003237", "003241", "003242", "003245", "003246", "003250", "003251", "003253", "003256", "003257", "003260", "003263", "003266", "003268", "003271", "003273", "003277", "003282", "003283", "003287", "003289", "003290", "003291", "003293", "003295", "003296", "003315", "003324", "003331", "003332", "003340", "003341", "003347", "003350", "003351", "003352", "003354", "003357", "003362", "003369", "003370", "003373", "003379", "003380", "003389", "003390", "003393", "003398", "003400", "003401", "003403", "003404", "003406", "003407", "003408", "003409", "003422", "003430", "003439", "003450", "003457", "003469", "003475", "003477", "003479", "003480", "003481", "003482", "003486", "003487", "003488", "003490", "003491", "003493", "003494", "003496", "003497", "003499", "003500", "003502", "003505", "003506", "003507", "003509", "003510", "003511", "003512", "003513", "003516", "003517", "003518", "003519", "003541", "003542", "003551", "003563", "003567", "003568", "003576", "003577", "003582", "003584", "003585", "003587", "003588", "003590", "003596", "003597", "003600", "003604", "003607", "003609", "003610", "003612", "003616", "003617", "003620", "003621", "003622", "003623", "003625", "003626", "003628", "003629", "003648", "003650", "003660", "003674", "003675", "003679", "003681", "003683", "003684", "003687", "003690", "003693", "003694", "003696", "003699", "003703", "003706", "003708", "003709", "003713", "003717", "003718", "003719", "003721", "003725", "003726", "003727", "003729", "003730", "003731", "003732", "003734", "003736", "003739", "003762", "003768", "003770", "003772", "003779", "003787", "003788", "003794", "003795", "003796", "003798", "003802", "003804", "003811", "003815", "003816", "003817", "003818", "003819", "003820", "003822", "003823", "003824", "003826", "003827", "003830", "003832", "003833", "003834", "003837", "003838", "003839", "003840", "003841", "003842", "003846", "003848", "003849", "003860", "003880", "003894", "003895", "003897", "003902", "003903", "003906", "003910", "003913", "003914", "003915", "003917", "003924", "003925", "003927", "003929", "003930", "003931", "003932", "003935", "003940", "003941", "003942", "003943", "003945", "003946", "003947", "003949", "003950", "003951", "003952", "003953", "003954", "003955", "003957", "003958", "003959", "003980", "003987", "003990", "003991", "003998", "004000", "004002", "004003", "004010", "004014", "004018", "004020", "004021", "004023", "004024", "004029", "004030", "004033", "004035", "004039", "004044", "004046", "004048", "004051", "004052", "004053", "004054", "004055", "004056", "004057", "004059", "004060", "004063", "004064", "004067", "004068", "004069", "004097", "004100", "004109", "004113", "004116", "004123", "004124", "004129", "004132", "004136", "004137", "004139", "004142", "004143", "004148", "004151", "004153", "004156", "004158", "004159", "004161", "004163", "004166", "004167", "004173", "004174", "004176", "004177", "004178", "004209", "004210", "004213", "004219", "004225", "004235", "004245", "004246", "004248", "004250", "004252", "004261", "004264", "004265", "004266", "004268", "004270", "004272", "004274", "004278", "004279", "004280", "004281", "004282", "004283", "004284", "004286", "004287", "004288", "004289", "004313", "004325", "004332", "004337", "004342", "004346", "004354", "004355", "004356", "004357", "004358", "004368", "004370", "004372", "004374", "004376", "004378", "004380", "004383", "004386", "004387", "004388", "004391", "004393", "004394", "004396", "004398", "004421", "004429", "004431", "004446", "004447", "004449", "004452", "004453", "004454", "004455", "004460", "004462", "004465", "004467", "004468", "004469", "004473", "004475", "004476", "004477", "004478", "004481", "004486", "004489", "004490", "004492", "004493", "004494", "004495", "004497", "004498", "004500", "004501", "004502", "004503", "004505", "004506", "004531", "004543", "004544", "004546", "004550", "004554", "004564", "004566", "004568", "004570", "004574", "004575", "004578", "004581", "004582", "004584", "004588", "004589", "004590", "004591", "004592", "004593", "004595", "004596", "004598", "004605", "004606", "004607", "004609", "004612", "004614", "004616", "004619", "004633", "004647", "004655", "004657", "004661", "004664", "004669", "004671", "004673", "004676", "004679", "004681", "004682", "004687", "004693", "004695", "004696", "004698", "004700", "004701", "004702", "004707", "004713", "004714", "004715", "004716", "004718", "004719", "004721", "004723", "004724", "004726", "004727", "004728", "004729", "004745", "004756", "004759", "004763", "004765", "004776", "004777", "004786", "004790", "004793", "004794", "004803", "004808", "004809", "004810", "004811", "004814", "004815", "004817", "004818", "004820", "004821", "004822", "004823", "004824", "004825", "004827", "004829", "004830", "004833", "004834", "004835", "004836", "004838", "004857", "004862", "004871", "004878", "004879", "004881", "004886", "004890", "004896", "004900", "004901", "004906", "004909", "004916", "004920", "004922", "004923", "004928", "004931", "004933", "004934", "004936", "004939", "004940", "004941", "004945", "004949", "004967", "004972", "004987", "004991", "004992", "004994", "004998", "005003", "005005", "005006", "005008", "005011", "005015", "005016", "005021", "005022", "005023", "005026", "005027", "005030", "005033", "005034", "005035", "005038", "005041", "005044", "005045", "005046", "005047", "005048", "005049", "005050", "005052", "005053", "005055", "005056", "005078", "005082", "005089", "005094", "005113", "005114", "005117", "005124", "005126", "005130", "005131", "005134", "005136", "005139", "005142", "005144", "005145", "005146", "005148", "005151", "005155", "005156", "005157", "005159", "005163", "005165", "005197", "005207", "005208", "005210", "005218", "005219", "005223", "005225", "005229", "005230", "005233", "005235", "005242", "005246", "005247", "005252", "005253", "005254", "005258", "005259", "005260", "005261", "005262", "005266", "005268", "005269", "005275", "005277", "005278", "005301", "005303", "005312", "005317", "005320", "005328", "005329", "005337", "005339", "005341", "005342", "005346", "005349", "005351", "005355", "005356", "005358", "005359", "005361", "005364", "005365", "005366", "005369", "005374", "005376", "005377", "005378", "005381", "005382", "005383", "005386", "005409", "005417", "005419", "005422", "005432", "005435", "005439", "005441", "005442", "005455", "005459", "005460", "005462", "005470", "005471", "005473", "005476", "005477", "005479", "005480", "005482", "005484", "005487", "005490", "005491", "005492", "005494", "005495", "005497", "005498", "005499", "005514", "005521", "005534", "005537", "005542", "005544", "005547", "005554", "005557", "005558", "005559", "005560", "005561", "005563", "005569", "005572", "005576", "005577", "005580", "005582", "005583", "005587", "005589", "005591", "005595", "005596", "005597", "005603", "005604", "005606", "005607", "005608", "005609", "005641", "005644", "005647", "005652", "005655", "005660", "005669", "005673", "005677", "005678", "005681", "005682", "005686", "005690", "005691", "005696", "005697", "005698", "005700", "005704", "005706", "005708", "005710", "005712", "005713", "005717", "005740", "005748", "005762", "005767", "005768", "005773", "005776", "005779", "005788", "005794", "005798", "005799", "005800", "005801", "005802", "005803", "005805", "005806", "005814", "005816", "005818", "005820", "005821", "005823", "005825", "005826", "005828", "005850", "005863", "005867", "005872", "005873", "005882", "005885", "005887", "005898", "005900", "005901", "005902", "005903", "005906", "005909", "005910", "005912", "005915", "005917", "005918", "005919", "005920", "005921", "005924", "005925", "005927", "005929", "005930", "005931", "005932", "005933", "005934", "005935", "005936", "005938", "005939", "005952", "005966", "005969", "005971", "005972", "005977", "005980", "005983", "005989", "005990", "005992", "005995", "005996", "005998", "006000", "006002", "006008", "006009", "006012", "006013", "006017", "006018", "006020", "006021", "006022", "006024", "006028", "006032", "006039", "006042", "006043", "006044", "006045", "006046", "006047", "006049", "006072", "006087", "006092", "006094", "006096", "006102", "006103", "006114", "006116", "006117", "006118", "006122", "006123", "006124", "006125", "006126", "006127", "006131", "006132", "006133", "006134", "006135", "006136", "006141", "006142", "006143", "006144", "006145", "006147", "006148", "006149", "006153", "006156", "006157", "006159", "006185", "006187", "006200", "006201", "006205", "006211", "006216", "006222", "006225", "006226", "006229", "006232", "006233", "006236", "006238", "006240", "006242", "006244", "006245", "006246", "006248", "006249", "006250", "006252", "006253", "006254", "006256", "006257", "006259", "006260", "006261", "006262", "006263", "006265", "006266", "006267", "006268", "006269", "006284", "006292", "006301", "006307", "006316", "006317", "006320", "006326", "006328", "006336", "006339", "006340", "006344", "006349", "006354", "006356", "006357", "006359", "006360", "006361", "006363", "006365", "006369", "006371", "006372", "006373", "006374", "006376", "006377", "006404", "006407", "006412", "006413", "006424", "006427", "006429", "006435", "006439", "006443", "006444", "006448", "006449", "006453", "006459", "006462", "006466", "006467", "006469", "006470", "006471", "006475", "006477", "006478", "006480", "006481", "006482", "006483", "006484", "006485", "006486", "006489", "006509", "006519", "006522", "006523", "006530", "006538", "006540", "006543", "006545", "006549", "006551", "006553", "006554", "006561", "006566", "006571", "006573", "006574", "006578", "006580", "006581", "006582", "006583", "006584", "006585", "006587", "006589", "006592", "006593", "006594", "006595", "006617", "006630", "006644", "006650", "006653", "006654", "006662", "006665", "006667", "006669", "006672", "006674", "006675", "006676", "006679", "006682", "006684", "006691", "006694", "006698", "006699", "006701", "006702", "006704", "006705", "006706", "006707", "006708", "006724", "006731", "006740", "006741", "006745", "006751", "006753", "006755", "006760", "006764", "006766", "006768", "006770", "006775", "006777", "006784", "006789", "006790", "006791", "006794", "006796", "006797", "006800", "006801", "006806", "006807", "006808", "006810", "006811", "006812", "006813", "006814", "006816", "006817", "006832", "006844", "006851", "006855", "006856", "006862", "006864", "006868", "006869", "006871", "006872", "006876", "006878", "006881", "006882", "006885", "006888", "006891", "006893", "006895", "006896", "006898", "006900", "006906", "006907", "006908", "006909", "006910", "006911", "006913", "006914", "006920", "006925", "006927", "006928", "006947", "006954", "006964", "006968", "006976", "006979", "006982", "006988", "006991", "006995", "006999", "007001", "007004", "007005", "007006", "007011", "007012", "007014", "007019", "007021", "007022", "007023", "007024", "007025", "007026", "007028", "007030", "007032", "007036", "007037", "007039", "007059", "007078", "007088", "007091", "007092", "007097", "007100", "007101", "007105", "007108", "007109", "007111", "007114", "007115", "007117", "007120", "007123", "007124", "007125", "007129", "007130", "007131", "007135", "007136", "007139", "007140", "007142", "007145", "007165", "007176", "007181", "007185", "007190", "007194", "007195", "007199", "007211", "007213", "007214", "007215", "007217", "007220", "007221", "007225", "007226", "007228", "007229", "007231", "007232", "007233", "007234", "007236", "007237", "007238", "007239", "007241", "007242", "007243", "007244", "007245", "007247", "007248", "007249", "007250", "007251", "007252", "007256", "007258", "007285", "007287", "007297", "007301", "007304", "007308", "007309", "007311", "007314", "007319", "007323", "007325", "007326", "007329", "007330", "007331", "007332", "007333", "007335", "007337", "007340", "007341", "007348", "007349", "007352", "007356", "007357", "007358", "007360", "007363", "007364", "007365", "007369", "007387", "007394", "007398", "007400", "007404", "007419", "007424", "007425", "007429", "007431", "007432", "007433", "007436", "007441", "007443", "007444", "007446", "007449", "007450", "007451", "007458", "007461", "007464", "007465", "007466", "007467", "007472", "007475", "007476", "007477", "007479", "007493", "007501", "007506", "007513", "007522", "007528", "007530", "007532", "007535", "007539", "007542", "007543", "007545", "007546", "007549", "007554", "007557", "007561", "007562", "007566", "007569", "007570", "007572", "007574", "007575", "007576", "007577", "007578", "007580", "007581", "007582", "007584", "007585", "007587", "007588", "007617", "007625", "007628", "007633", "007641", "007642", "007650", "007651", "007653", "007655", "007656", "007659", "007662", "007666", "007667", "007668", "007672", "007674", "007676", "007677", "007686", "007688", "007690", "007691", "007692", "007695", "007696", "007697", "007729", "007735", "007741", "007744", "007746", "007750", "007752", "007758", "007759", "007761", "007762", "007764", "007765", "007770", "007771", "007777", "007779", "007781", "007784", "007786", "007787", "007788", "007789", "007791", "007792", "007793", "007795", "007796", "007797", "007798", "007799", "007800", "007802", "007803", "007804", "007806", "007809", "007823", "007832", "007840", "007851", "007855", "007859", "007861", "007862", "007865", "007872", "007873", "007877", "007878", "007879", "007882", "007884", "007887", "007891", "007893", "007897", "007899", "007900", "007908", "007909", "007910", "007911", "007917", "007918", "007919", "007945", "007952", "007960", "007961", "007967", "007970", "007973", "007983", "007986", "007989", "007991", "007993", "007996", "007998", "008000", "008001", "008004", "008007", "008010", "008011", "008013", "008014", "008015", "008016", "008017", "008018", "008019", "008022", "008028", "008049", "008055", "008060", "008064", "008065", "008073", "008078", "008079", "008080", "008087", "008088", "008092", "008093", "008095", "008098", "008100", "008103", "008104", "008105", "008108", "008109", "008110", "008111", "008114", "008115", "008117", "008120", "008121", "008122", "008123", "008124", "008125", "008127", "008128", "008129", "008132", "008133", "008134", "008136", "008138", "008139", "008161", "008180", "008189", "008194", "008201", "008203", "008204", "008207", "008209", "008210", "008212", "008221", "008222", "008223", "008224", "008227", "008229", "008231", "008234", "008237", "008239", "008240", "008241", "008242", "008243", "008247", "008248", "008249", "008269", "008274", "008283", "008295", "008297", "008299", "008300", "008302", "008306", "008308", "008310", "008312", "008316", "008317", "008322", "008324", "008326", "008327", "008332", "008333", "008334", "008336", "008338", "008340", "008341", "008344", "008345", "008349", "008350", "008351", "008353", "008356", "008357", "008359", "008375", "008384", "008386", "008394", "008398", "008403", "008404", "008414", "008415", "008417", "008423", "008428", "008431", "008432", "008437", "008445", "008448", "008452", "008453", "008454", "008455", "008456", "008459", "008460", "008461", "008462", "008463", "008464", "008465", "008467", "008468", "008485", "008504", "008508", "008516", "008524", "008528", "008531", "008534", "008535", "008538", "008542", "008544", "008546", "008548", "008549", "008552", "008554", "008556", "008560", "008561", "008562", "008564", "008566", "008567", "008569", "008570", "008571", "008572", "008573", "008575", "008577", "008578", "008579", "008593", "008616", "008620", "008621", "008627", "008633", "008637", "008639", "008640", "008641", "008645", "008648", "008649", "008650", "008651", "008652", "008657", "008658", "008659", "008662", "008664", "008665", "008666", "008669", "008670", "008672", "008674", "008676", "008677", "008681", "008686", "008687", "008688", "008689", "008704", "008710", "008715", "008723", "008729", "008732", "008734", "008744", "008746", "008751", "008753", "008754", "008756", "008762", "008763", "008767", "008771", "008772", "008773", "008776", "008778", "008781", "008782", "008784", "008786", "008788", "008789", "008791", "008793", "008794", "008795", "008798", "008799", "008819", "008841", "008843", "008844", "008845", "008850", "008854", "008856", "008857", "008859", "008862", "008865", "008867", "008868", "008869", "008871", "008873", "008874", "008876", "008878", "008879", "008880", "008882", "008885", "008887", "008890", "008891", "008892", "008893", "008895", "008896", "008897", "008898", "008901", "008903", "008904", "008905", "008908", "008921", "008942", "008943", "008944", "008955", "008959", "008960", "008966", "008968", "008972", "008974", "008978", "008981", "008984", "008985", "008986", "008987", "008989", "008991", "008996", "008997", "008999", "009004", "009005", "009006", "009007", "009008", "009010", "009011", "009012", "009013", "009014", "009015", "009016", "009018", "009041", "009050", "009057", "009058", "009060", "009065", "009066", "009074", "009075", "009081", "009086", "009094", "009096", "009098", "009101", "009104", "009105", "009109", "009111", "009113", "009114", "009115", "009117", "009118", "009119", "009121", "009122", "009125", "009127", "009129", "009140", "009152", "009157", "009167", "009168", "009171", "009173", "009176", "009181", "009184", "009193", "009194", "009203", "009206", "009208", "009210", "009213", "009215", "009218", "009219", "009220", "009221", "009222", "009226", "009227", "009228", "009229", "009231", "009232", "009234", "009235", "009237", "009239", "009257", "009284", "009285", "009293", "009294", "009295", "009296", "009301", "009302", "009306", "009307", "009308", "009310", "009311", "009313", "009316", "009320", "009322", "009325", "009332", "009335", "009336", "009337", "009338", "009343", "009344", "009345", "009346", "009348", "009375", "009385", "009389", "009391", "009396", "009399", "009402", "009406", "009408", "009411", "009414", "009419", "009420", "009421", "009427", "009430", "009433", "009434", "009435", "009438", "009442", "009443", "009446", "009447", "009448", "009450", "009451", "009452", "009453", "009456", "009459", "009476", "009486", "009499", "009501", "009511", "009513", "009519", "009522", "009528", "009529", "009531", "009532", "009534", "009535", "009538", "009541", "009542", "009546", "009547", "009551", "009552", "009553", "009554", "009558", "009559", "009560", "009561", "009563", "009564", "009567", "009568", "009569", "009597", "009611", "009618", "009619", "009622", "009625", "009628", "009632", "009636", "009639", "009640", "009643", "009644", "009647", "009650", "009651", "009656", "009657", "009660", "009662", "009663", "009664", "009665", "009668", "009670", "009671", "009672", "009675", "009677", "009679", "009695", "009704", "009712", "009714", "009716", "009721", "009727", "009730", "009732", "009735", "009740", "009744", "009746", "009747", "009750", "009752", "009753", "009755", "009759", "009760", "009762", "009764", "009765", "009766", "009770", "009772", "009773", "009777", "009778", "009779", "009780", "009782", "009783", "009784", "009785", "009786", "009788", "009789", "009808", "009816", "009824", "009830", "009838", "009840", "009842", "009849", "009852", "009854", "009857", "009858", "009859", "009862", "009865", "009867", "009870", "009872", "009874", "009875", "009876", "009879", "009880", "009883", "009888", "009889", "009890", "009893", "009894", "009898", "009917", "009925", "009927", "009930", "009932", "009935", "009947", "009948", "009949", "009954", "009955", "009958", "009960", "009963", "009969", "009970", "009973", "009974", "009975", "009977", "009981", "009983", "009984", "009990", "009991", "009993", "009994", "009996", "009997", "009998", "010001", "010002", "010003", "010005", "010006", "010007", "010009", "010027", "010032", "010037", "010044", "010047", "010051", "010059", "010061", "010065", "010066", "010067", "010070", "010073", "010074", "010075", "010078", "010081", "010083", "010084", "010085", "010087", "010090", "010092", "010093", "010094", "010095", "010097", "010098", "010102", "010105", "010107", "010109", "010110", "010112", "010113", "010114", "010115", "010117", "010119", "010133", "010149", "010153", "010159", "010162", "010179", "010181", "010182", "010184", "010185", "010186", "010189", "010191", "010194", "010198", "010199", "010205", "010206", "010208", "010209", "010211", "010213", "010220", "010221", "010222", "010223", "010224", "010227", "010229", "010244", "010252", "010253", "010263", "010267", "010271", "010276", "010287", "010289", "010290", "010291", "010296", "010300", "010301", "010304", "010309", "010310", "010311", "010313", "010315", "010317", "010322", "010323", "010327", "010328", "010329", "010330", "010332", "010333", "010334", "010335", "010337", "010339", "010359", "010367", "010368", "010376", "010379", "010381", "010387", "010390", "010391", "010392", "010401", "010405", "010407", "010411", "010413", "010415", "010416", "010420", "010421", "010423", "010426", "010427", "010430", "010433", "010434", "010436", "010437", "010438", "010439", "010443", "010444", "010445", "010446", "010448", "010461", "010473", "010474", "010495", "010498", "010503", "010505", "010506", "010513", "010514", "010516", "010519", "010521", "010524", "010525", "010526", "010530", "010534", "010536", "010537", "010538", "010540", "010542", "010544", "010545", "010546", "010547", "010548", "010549", "010552", "010553", "010555", "010556", "010558", "010559", "010581", "010589", "010596", "010598", "010599", "010608", "010609", "010611", "010616", "010617", "010622", "010624", "010630", "010633", "010636", "010640", "010641", "010643", "010651", "010652", "010654", "010655", "010657", "010658", "010659", "010660", "010662", "010664", "010666", "010667", "010668", "010669", "010695", "010698", "010700", "010704", "010705", "010714", "010718", "010721", "010722", "010725", "010737", "010739", "010741", "010743", "010744", "010745", "010746", "010751", "010752", "010757", "010758", "010759", "010760", "010761", "010763", "010765", "010766", "010767", "010773", "010774", "010775", "010776", "010777", "010778", "010798", "010800", "010817", "010818", "010820", "010830", "010832", "010835", "010841", "010844", "010846", "010849", "010850", "010857", "010863", "010866", "010867", "010868", "010870", "010872", "010876", "010878", "010879", "010880", "010883", "010884", "010885", "010886", "010887", "010889", "010901", "010912", "010917", "010926", "010927", "010929", "010931", "010936", "010937", "010941", "010942", "010948", "010951", "010954", "010955", "010957", "010959", "010964", "010966", "010967", "010968", "010969", "010972", "010975", "010976", "010978", "010981", "010983", "010989", "010992", "010995", "010997", "010999", "011023", "011034", "011035", "011036", "011040", "011043", "011044", "011049", "011051", "011053", "011059", "011060", "011061", "011065", "011067", "011068", "011070", "011071", "011073", "011076", "011078", "011081", "011082", "011086", "011087", "011088", "011089", "011090", "011093", "011097", "011098", "011100", "011101", "011102", "011103", "011104", "011106", "011109", "011142", "011148", "011156", "011158", "011160", "011165", "011166", "011170", "011173", "011176", "011180", "011186", "011188", "011190", "011191", "011192", "011195", "011197", "011198", "011201", "011204", "011206", "011207", "011208", "011209", "011211", "011213", "011214", "011215", "011218", "011236", "011241", "011248", "011253", "011256", "011261", "011266", "011273", "011274", "011276", "011277", "011280", "011285", "011290", "011291", "011293", "011294", "011298", "011300", "011301", "011302", "011304", "011307", "011308", "011313", "011314", "011315", "011318", "011320", "011321", "011323", "011324", "011325", "011326", "011328", "011329", "011349", "011350", "011363", "011369", "011371", "011375", "011378", "011380", "011384", "011387", "011391", "011395", "011398", "011399", "011403", "011405", "011406", "011407", "011410", "011412", "011417", "011418", "011419", "011421", "011423", "011425", "011426", "011427", "011430", "011431", "011432", "011434", "011436", "011437", "011438", "011439", "011453", "011463", "011470", "011471", "011478", "011481", "011482", "011497", "011504", "011505", "011506", "011508", "011511", "011514", "011515", "011523", "011526", "011527", "011528", "011529", "011531", "011533", "011536", "011537", "011538", "011539", "011541", "011542", "011543", "011545", "011548", "011549", "011578", "011582", "011589", "011590", "011591", "011594", "011595", "011602", "011603", "011605", "011609", "011610", "011614", "011616", "011617", "011619", "011621", "011626", "011628", "011629", "011630", "011633", "011635", "011636", "011638", "011639", "011640", "011643", "011644", "011645", "011647", "011648", "011649", "011651", "011652", "011654", "011655", "011657", "011683", "011691", "011706", "011707", "011709", "011711", "011714", "011715", "011721", "011722", "011725", "011728", "011730", "011731", "011734", "011735", "011736", "011737", "011743", "011744", "011745", "011750", "011753", "011756", "011759", "011760", "011761", "011762", "011763", "011764", "011767", "011790", "011791", "011809", "011814", "011820", "011823", "011829", "011830", "011832", "011833", "011836", "011838", "011840", "011841", "011843", "011844", "011845", "011846", "011849", "011850", "011854", "011855", "011856", "011857", "011859", "011861", "011863", "011864", "011865", "011866", "011867", "011869", "011870", "011871", "011875", "011878", "011900", "011901", "011912", "011921", "011922", "011932", "011935", "011936", "011939", "011940", "011941", "011944", "011946", "011950", "011952", "011953", "011955", "011957", "011962", "011965", "011966", "011967", "011970", "011972", "011973", "011974", "011976", "011977", "011978", "011981", "011982", "011983", "011984", "011985", "011986", "011987", "011989", "012002", "012016", "012023", "012024", "012028", "012035", "012042", "012045", "012047", "012050", "012055", "012060", "012064", "012066", "012069", "012070", "012072", "012074", "012075", "012076", "012077", "012080", "012081", "012082", "012087", "012088", "012089", "012091", "012093", "012094", "012095", "012096", "012097", "012098", "012099", "012127", "012131", "012136", "012142", "012144", "012152", "012158", "012168", "012169", "012175", "012177", "012179", "012180", "012181", "012182", "012183", "012185", "012186", "012188", "012189", "012190", "012193", "012195", "012196", "012198", "012199", "012200", "012204", "012222", "012238", "012241", "012250", "012252", "012256", "012259", "012260", "012265", "012268", "012274", "012275", "012277", "012282", "012283", "012285", "012286", "012291", "012293", "012296", "012298", "012299", "012302", "012304", "012308", "012312", "012315", "012316", "012319", "012330", "012345", "012361", "012363", "012366", "012369", "012373", "012374", "012378", "012379", "012380", "012381", "012383", "012387", "012391", "012392", "012393", "012394", "012395", "012399", "012401", "012403", "012404", "012406", "012408", "012411", "012412", "012414", "012417", "012418", "012419", "012420", "012421", "012422", "012424", "012428", "012429", "012472", "012481", "012482", "012483", "012490", "012492", "012493", "012503", "012505", "012507", "012508", "012509", "012510", "012511", "012512", "012513", "012515", "012516", "012518", "012519", "012521", "012523", "012524", "012526", "012527", "012528", "012529", "012531", "012533", "012534", "012536", "012538", "012539", "012560", "012563", "012586", "012587", "012593", "012597", "012598", "012604", "012607", "012612", "012615", "012616", "012621", "012624", "012626", "012627", "012633", "012635", "012638", "012640", "012642", "012643", "012644", "012646", "012647", "012662", "012671", "012680", "012685", "012687", "012691", "012701", "012705", "012706", "012709", "012713", "012716", "012718", "012721", "012725", "012728", "012732", "012733", "012734", "012737", "012738", "012739", "012743", "012745", "012747", "012748", "012749", "012750", "012752", "012757", "012758", "012770", "012784", "012788", "012801", "012803", "012806", "012815", "012817", "012819", "012820", "012821", "012824", "012826", "012830", "012832", "012833", "012836", "012839", "012841", "012843", "012844", "012845", "012846", "012847", "012850", "012851", "012855", "012856", "012857", "012858", "012860", "012864", "012865", "012867", "012885", "012900", "012912", "012917", "012918", "012922", "012923", "012924", "012929", "012930", "012933", "012934", "012935", "012937", "012941", "012943", "012946", "012955", "012958", "012961", "012962", "012963", "012967", "012968", "012969", "012970", "012971", "012973", "012974", "012977", "012978", "012979", "013014", "013019", "013021", "013028", "013030", "013033", "013036", "013038", "013042", "013045", "013048", "013049", "013052", "013053", "013055", "013057", "013058", "013061", "013066", "013067", "013068", "013069", "013070", "013072", "013073", "013075", "013079", "013080", "013081", "013082", "013084", "013085", "013086", "013088", "013089", "013101", "013110", "013115", "013120", "013122", "013132", "013138", "013139", "013140", "013142", "013145", "013153", "013161", "013162", "013164", "013165", "013167", "013170", "013171", "013174", "013175", "013177", "013178", "013181", "013182", "013183", "013184", "013185", "013187", "013188", "013189", "013192", "013194", "013195", "013198", "013199", "013216", "013226", "013227", "013232", "013240", "013242", "013245", "013250", "013254", "013260", "013264", "013265", "013266", "013268", "013272", "013277", "013278", "013280", "013281", "013282", "013283", "013285", "013287", "013289", "013292", "013293", "013298", "013299", "013304", "013306", "013308", "013322", "013332", "013334", "013342", "013347", "013349", "013350", "013352", "013354", "013360", "013364", "013366", "013372", "013373", "013374", "013377", "013380", "013383", "013385", "013387", "013388", "013392", "013393", "013394", "013395", "013396", "013397", "013398", "013401", "013403", "013404", "013408", "013409", "013410", "013411", "013412", "013413", "013414", "013416", "013417", "013418", "013439", "013441", "013448", "013450", "013455", "013462", "013468", "013472", "013477", "013478", "013480", "013482", "013487", "013496", "013500", "013501", "013502", "013503", "013507", "013508", "013509", "013510", "013511", "013512", "013514", "013516", "013517", "013521", "013522", "013523", "013524", "013527", "013528", "013529", "013560", "013562", "013580", "013583", "013585", "013589", "013591", "013593", "013598", "013601", "013602", "013603", "013604", "013610", "013611", "013612", "013613", "013617", "013618", "013619", "013623", "013624", "013625", "013630", "013632", "013633", "013638", "013639", "013657", "013664", "013670", "013674", "013679", "013686", "013688", "013691", "013697", "013698", "013700", "013703", "013706", "013708", "013709", "013712", "013715", "013716", "013718", "013719", "013721", "013722", "013725", "013727", "013729", "013730", "013731", "013732", "013733", "013735", "013737", "013738", "013739", "013740", "013741", "013742", "013743", "013745", "013747", "013749", "013762", "013778", "013781", "013787", "013790", "013793", "013794", "013797", "013803", "013808", "013812", "013813", "013816", "013818", "013819", "013820", "013821", "013822", "013823", "013824", "013830", "013833", "013835", "013837", "013838", "013841", "013842", "013843", "013848", "013850", "013852", "013853", "013854", "013855", "013856", "013857", "013879", "013883", "013902", "013907", "013915", "013920", "013921", "013922", "013924", "013928", "013931", "013933", "013934", "013935", "013940", "013941", "013942", "013943", "013945", "013951", "013952", "013955", "013956", "013957", "013958", "013960", "013963", "013965", "013966", "013967", "013968", "013969", "013981", "013991", "013997", "014007", "014012", "014013", "014019", "014020", "014024", "014027", "014029", "014030", "014032", "014033", "014034", "014035", "014040", "014042", "014043", "014046", "014048", "014050", "014053", "014054", "014056", "014060", "014061", "014062", "014065", "014066", "014068", "014069", "014071", "014072", "014073", "014074", "014075", "014076", "014077", "014079", "014099", "014100", "014112", "014114", "014116", "014125", "014127", "014128", "014136", "014137", "014138", "014143", "014148", "014150", "014151", "014154", "014155", "014156", "014160", "014163", "014165", "014168", "014170", "014171", "014172", "014173", "014174", "014175", "014178", "014180", "014184", "014185", "014187", "014222", "014227", "014233", "014238", "014239", "014241", "014246", "014248", "014252", "014259", "014262", "014263", "014265", "014267", "014268", "014269", "014272", "014273", "014274", "014276", "014277", "014278", "014281", "014282", "014284", "014285", "014286", "014287", "014289", "014290", "014292", "014299", "014311", "014325", "014331", "014332", "014334", "014345", "014346", "014350", "014353", "014357", "014358", "014359", "014361", "014365", "014366", "014370", "014373", "014374", "014382", "014383", "014384", "014386", "014388", "014389", "014390", "014391", "014392", "014393", "014396", "014398", "014399", "014400", "014401", "014403", "014405", "014406", "014407", "014408", "014421", "014430", "014446", "014453", "014454", "014457", "014467", "014468", "014473", "014474", "014475", "014476", "014477", "014482", "014484", "014486", "014488", "014490", "014492", "014493", "014495", "014497", "014500", "014501", "014503", "014504", "014505", "014506", "014508", "014509", "014511", "014512", "014513", "014515", "014516", "014518", "014536", "014546", "014558", "014561", "014565", "014573", "014574", "014575", "014578", "014583", "014584", "014585", "014586", "014589", "014591", "014597", "014598", "014599", "014601", "014603", "014605", "014606", "014607", "014610", "014611", "014614", "014616", "014617", "014618", "014619", "014620", "014621", "014623", "014625", "014626", "014627", "014628", "014659", "014661", "014667", "014672", "014674", "014675", "014676", "014684", "014685", "014687", "014688", "014689", "014690", "014691", "014693", "014696", "014699", "014701", "014702", "014704", "014705", "014710", "014714", "014716", "014718", "014719", "014720", "014722", "014723", "014726", "014727", "014728", "014729", "014730", "014731", "014732", "014735", "014736", "014737", "014738", "014752", "014763", "014773", "014777", "014787", "014791", "014796", "014799", "014801", "014804", "014811", "014813", "014814", "014815", "014819", "014820", "014821", "014825", "014830", "014834", "014836", "014837", "014838", "014839", "014840", "014841", "014843", "014844", "014845", "014846", "014847", "014849", "014863", "014870", "014876", "014883", "014887", "014890", "014892", "014899", "014900", "014902", "014903", "014904", "014910", "014912", "014914", "014915", "014917", "014923", "014924", "014926", "014932", "014933", "014934", "014935", "014936", "014939", "014941", "014946", "014948", "014949", "014950", "014956", "014957", "014958", "014959", "014982", "014995", "015004", "015007", "015011", "015013", "015022", "015025", "015031", "015033", "015034", "015035", "015036", "015037", "015039", "015040", "015042", "015044", "015047", "015049", "015050", "015054", "015059", "015061", "015066", "015087", "015093", "015094", "015102", "015106", "015114", "015116", "015120", "015124", "015126", "015129", "015131", "015137", "015138", "015140", "015141", "015144", "015146", "015149", "015155", "015159", "015160", "015163", "015164", "015165", "015167", "015169", "015170", "015171", "015172", "015174", "015175", "015177", "015178", "015179", "015195", "015206", "015211", "015212", "015220", "015223", "015224", "015227", "015233", "015237", "015238", "015240", "015241", "015243", "015244", "015245", "015255", "015256", "015258", "015259", "015260", "015264", "015266", "015268", "015269", "015270", "015273", "015274", "015275", "015276", "015279", "015281", "015284", "015286", "015288", "015289", "015307", "015326", "015328", "015332", "015335", "015338", "015340", "015342", "015344", "015345", "015351", "015353", "015358", "015359", "015362", "015363", "015365", "015368", "015369", "015370", "015374", "015376", "015377", "015378", "015379", "015382", "015384", "015386", "015390", "015391", "015392", "015395", "015398", "015399", "015416", "015426", "015430", "015438", "015439", "015443", "015448", "015452", "015454", "015455", "015458", "015462", "015463", "015466", "015467", "015469", "015470", "015475", "015477", "015481", "015483", "015485", "015486", "015487", "015490", "015491", "015493", "015494", "015498", "015499", "015500", "015501", "015503", "015505", "015509", "015541", "015546", "015565", "015566", "015569", "015570", "015573", "015575", "015579", "015582", "015590", "015592", "015593", "015595", "015596", "015597", "015598", "015600", "015603", "015604", "015605", "015606", "015607", "015609", "015611", "015615", "015616", "015618", "015632", "015647", "015664", "015666", "015668", "015675", "015681", "015688", "015689", "015692", "015698", "015702", "015709", "015712", "015715", "015717", "015718", "015720", "015725", "015728", "015741", "015760", "015764", "015774", "015776", "015781", "015786", "015789", "015794", "015795", "015797", "015799", "015800", "015803", "015804", "015805", "015808", "015810", "015811", "015814", "015818", "015819", "015820", "015822", "015823", "015825", "015828", "015829", "015831", "015832", "015834", "015835", "015836", "015838", "015839", "015869", "015873", "015882", "015885", "015887", "015890", "015894", "015896", "015902", "015904", "015907", "015911", "015913", "015915", "015916", "015921", "015924", "015925", "015928", "015931", "015932", "015933", "015935", "015937", "015939", "015941", "015942", "015944", "015945", "015949", "015964", "015976", "015983", "015992", "015996", "015997", "015999", "016006", "016008", "016010", "016012", "016022", "016026", "016027", "016035", "016036", "016038", "016041", "016042", "016048", "016049", "016050", "016052", "016053", "016055", "016056", "016057", "016059", "016075", "016089", "016102", "016103", "016109", "016112", "016113", "016115", "016118", "016121", "016125", "016126", "016132", "016133", "016134", "016137", "016139", "016140", "016146", "016148", "016149", "016150", "016151", "016152", "016155", "016156", "016158", "016160", "016162", "016165", "016166", "016168", "016169", "016199", "016207", "016208", "016210", "016222", "016223", "016226", "016230", "016232", "016240", "016243", "016245", "016247", "016249", "016251", "016257", "016263", "016268", "016269", "016270", "016273", "016274", "016275", "016276", "016277", "016279", "016291", "016307", "016310", "016314", "016321", "016327", "016332", "016334", "016336", "016340", "016347", "016349", "016351", "016355", "016358", "016362", "016364", "016366", "016368", "016369", "016371", "016373", "016376", "016377", "016379", "016380", "016383", "016385", "016386", "016387", "016388", "016400", "016425", "016428", "016429", "016430", "016435", "016439", "016445", "016446", "016451", "016453", "016454", "016458", "016459", "016462", "016464", "016467", "016469", "016472", "016474", "016475", "016478", "016480", "016482", "016484", "016485", "016486", "016490", "016494", "016495", "016497", "016498", "016521", "016525", "016530", "016533", "016538", "016552", "016553", "016557", "016561", "016562", "016564", "016565", "016570", "016577", "016578", "016581", "016583", "016584", "016586", "016588", "016589", "016590", "016593", "016594", "016595", "016596", "016598", "016601", "016604", "016607", "016608", "016609", "016634", "016644", "016652", "016655", "016659", "016661", "016662", "016677", "016679", "016680", "016681", "016686", "016690", "016692", "016695", "016697", "016698", "016700", "016701", "016702", "016704", "016707", "016708", "016709", "016710", "016712", "016716", "016717", "016719", "016738", "016742", "016752", "016758", "016759", "016762", "016770", "016771", "016774", "016775", "016781", "016782", "016785", "016786", "016787", "016788", "016792", "016796", "016797", "016798", "016800", "016802", "016804", "016808", "016809", "016810", "016811", "016812", "016813", "016814", "016815", "016820", "016821", "016822", "016824", "016825", "016826", "016829", "016852", "016861", "016862", "016863", "016878", "016882", "016883", "016886", "016888", "016891", "016892", "016893", "016895", "016903", "016904", "016905", "016909", "016910", "016913", "016916", "016922", "016926", "016927", "016929", "016930", "016932", "016933", "016934", "016935", "016937", "016938", "016939", "016962", "016964", "016977", "016981", "016982", "016991", "016992", "016993", "016996", "016999", "017011", "017021", "017022", "017023", "017025", "017030", "017031", "017032", "017036", "017037", "017038", "017039", "017041", "017043", "017045", "017047", "017049", "017067", "017082", "017090", "017092", "017104", "017105", "017106", "017110", "017115", "017117", "017120", "017122", "017124", "017126", "017127", "017128", "017132", "017136", "017137", "017138", "017140", "017141", "017143", "017145", "017147", "017148", "017149", "017151", "017153", "017155", "017156", "017157", "017158", "017159", "017184", "017190", "017196", "017201", "017214", "017217", "017218", "017220", "017221", "017225", "017230", "017231", "017236", "017238", "017243", "017244", "017247", "017248", "017249", "017251", "017254", "017255", "017256", "017257", "017259", "017260", "017261", "017262", "017265", "017269", "017292", "017300", "017311", "017313", "017317", "017322", "017326", "017328", "017331", "017332", "017333", "017338", "017340", "017341", "017343", "017345", "017348", "017351", "017352", "017354", "017355", "017356", "017361", "017362", "017363", "017365", "017367", "017368", "017370", "017371", "017373", "017374", "017377", "017396", "017416", "017421", "017422", "017425", "017428", "017430", "017431", "017443", "017447", "017454", "017457", "017459", "017460", "017463", "017465", "017467", "017468", "017469", "017472", "017475", "017476", "017477", "017478", "017479", "017481", "017483", "017486", "017487", "017488", "017503", "017525", "017531", "017532", "017539", "017548", "017550", "017552", "017554", "017560", "017561", "017563", "017568", "017571", "017573", "017576", "017577", "017578", "017581", "017582", "017583", "017584", "017587", "017589", "017591", "017592", "017594", "017596", "017597", "017627", "017630", "017636", "017643", "017644", "017645", "017650", "017652", "017656", "017658", "017663", "017667", "017669", "017670", "017671", "017672", "017674", "017677", "017684", "017685", "017687", "017688", "017690", "017691", "017693", "017696", "017697", "017698", "017700", "017701", "017703", "017704", "017706", "017707", "017709", "017723", "017738", "017749", "017764", "017767", "017768", "017772", "017776", "017778", "017782", "017786", "017787", "017788", "017789", "017790", "017795", "017797", "017801", "017802", "017804", "017805", "017807", "017808", "017809", "017810", "017812", "017814", "017818", "017839", "017844", "017852", "017855", "017860", "017868", "017871", "017872", "017876", "017877", "017883", "017885", "017886", "017887", "017890", "017897", "017901", "017902", "017905", "017906", "017909", "017910", "017912", "017919", "017922", "017923", "017924", "017925", "017927", "017928", "017929", "017944", "017951", "017953", "017964", "017979", "017988", "017993", "017997", "018000", "018001", "018003", "018006", "018008", "018010", "018011", "018012", "018015", "018016", "018017", "018019", "018022", "018024", "018026", "018027", "018028", "018030", "018032", "018033", "018034", "018035", "018037", "018038", "018039", "018050", "018061", "018062", "018072", "018076", "018082", "018085", "018086", "018087", "018090", "018095", "018100", "018101", "018106", "018110", "018112", "018116", "018118", "018119", "018122", "018123", "018126", "018127", "018128", "018131", "018133", "018134", "018137", "018138", "018139", "018140", "018141", "018145", "018146", "018149", "018167", "018179", "018184", "018185", "018189", "018190", "018198", "018199", "018202", "018204", "018208", "018213", "018219", "018220", "018222", "018223", "018224", "018225", "018230", "018231", "018235", "018242", "018244", "018245", "018246", "018247", "018248", "018249", "018250", "018251", "018252", "018253", "018254", "018259", "018277", "018287", "018291", "018292", "018301", "018303", "018305", "018309", "018313", "018314", "018315", "018319", "018324", "018327", "018329", "018330", "018331", "018333", "018336", "018337", "018338", "018343", "018344", "018346", "018347", "018348", "018350", "018351", "018353", "018354", "018356", "018357", "018359", "018362", "018365", "018366", "018367", "018368", "018369", "018387", "018390", "018396", "018410", "018411", "018412", "018418", "018422", "018423", "018431", "018436", "018439", "018440", "018449", "018450", "018452", "018453", "018454", "018455", "018456", "018458", "018459", "018461", "018462", "018463", "018464", "018468", "018469", "018471", "018472", "018476", "018478", "018492", "018506", "018511", "018513", "018520", "018521", "018526", "018532", "018536", "018539", "018541", "018542", "018546", "018551", "018553", "018556", "018558", "018560", "018561", "018562", "018563", "018564", "018566", "018567", "018573", "018574", "018577", "018578", "018582", "018583", "018585", "018586", "018588", "018589", "018603", "018615", "018621", "018624", "018626", "018633", "018635", "018643", "018645", "018647", "018649", "018658", "018659", "018661", "018667", "018668", "018669", "018672", "018675", "018676", "018678", "018679", "018680", "018682", "018684", "018686", "018687", "018689", "018692", "018695", "018696", "018698", "018719", "018722", "018726", "018733", "018737", "018739", "018748", "018749", "018754", "018757", "018760", "018763", "018768", "018769", "018771", "018777", "018779", "018780", "018781", "018784", "018785", "018786", "018789", "018792", "018794", "018795", "018798", "018799", "018801", "018802", "018803", "018804", "018806", "018807", "018808", "018834", "018838", "018843", "018853", "018854", "018856", "018860", "018862", "018863", "018866", "018870", "018875", "018876", "018877", "018879", "018882", "018891", "018892", "018895", "018899", "018900", "018902", "018903", "018904", "018905", "018906", "018907", "018908", "018910", "018911", "018912", "018913", "018916", "018918", "018919", "018940", "018946", "018952", "018956", "018959", "018962", "018963", "018965", "018975", "018977", "018983", "018984", "018988", "018990", "018991", "018997", "018999", "019002", "019003", "019006", "019007", "019009", "019013", "019015", "019016", "019017", "019018", "019019", "019020", "019022", "019023", "019026", "019028", "019055", "019072", "019079", "019080", "019083", "019085", "019086", "019092", "019096", "019100", "019101", "019105", "019107", "019112", "019113", "019114", "019117", "019118", "019119", "019120", "019125", "019127", "019128", "019129", "019130", "019131", "019132", "019133", "019134", "019135", "019136", "019137", "019138", "019139", "019151", "019164", "019176", "019177", "019184", "019185", "019187", "019194", "019196", "019198", "019205", "019210", "019211", "019212", "019213", "019219", "019225", "019227", "019229", "019230", "019232", "019234", "019236", "019237", "019239", "019242", "019243", "019244", "019248", "019249", "019265", "019270", "019276", "019282", "019283", "019293", "019294", "019296", "019306", "019308", "019311", "019312", "019313", "019314", "019315", "019321", "019322", "019330", "019332", "019335", "019336", "019337", "019340", "019347", "019348", "019352", "019354", "019355", "019356", "019359", "019401", "019405", "019406", "019407", "019414", "019417", "019419", "019420", "019424", "019425", "019426", "019438", "019441", "019442", "019443", "019444", "019447", "019449", "019451", "019453", "019455", "019456", "019459", "019460", "019462", "019463", "019464", "019465", "019468", "019486", "019500", "019511", "019513", "019517", "019520", "019527", "019528", "019534", "019537", "019541", "019549", "019550", "019551", "019552", "019555", "019556", "019558", "019560", "019561", "019563", "019565", "019567", "019568", "019571", "019572", "019573", "019574", "019575", "019576", "019578", "019579", "019594", "019600", "019610", "019617", "019619", "019624", "019626", "019627", "019631", "019636", "019637", "019640", "019641", "019642", "019648", "019652", "019654", "019656", "019657", "019660", "019665", "019666", "019671", "019673", "019675", "019677", "019678", "019680", "019682", "019683", "019684", "019685", "019687", "019689", "019713", "019719", "019726", "019728", "019737", "019739", "019740", "019743", "019744", "019751", "019752", "019753", "019758", "019761", "019762", "019763", "019765", "019769", "019770", "019771", "019772", "019773", "019775", "019781", "019782", "019785", "019786", "019788", "019789", "019792", "019793", "019795", "019797", "019798", "019799", "019817", "019836", "019837", "019838", "019846", "019852", "019853", "019854", "019857", "019860", "019864", "019866", "019869", "019870", "019874", "019879", "019880", "019881", "019882", "019883", "019885", "019886", "019890", "019891", "019892", "019894", "019899", "019900", "019902", "019903", "019904", "019905", "019906", "019907", "019909", "019925", "019930", "019946", "019950", "019954", "019956", "019967", "019968", "019974", "019976", "019977", "019978", "019980", "019984", "019987", "019989", "019990", "019991", "019994", "019997", "019998", "020000", "020002", "020003", "020004", "020005", "020006", "020007", "020008", "020009", "020010", "020011", "020012", "020019", "020031", "020046", "020058", "020060", "020064", "020067", "020069", "020070", "020077", "020078", "020079", "020082", "020085", "020086", "020087", "020088", "020091", "020093", "020096", "020097", "020100", "020101", "020103", "020106", "020109", "020110", "020111", "020114", "020115", "020116", "020117", "020118", "020119", "020120", "020124", "020125", "020126", "020127", "020128", "020129", "020141", "020150", "020165", "020167", "020179", "020181", "020184", "020185", "020190", "020193", "020198", "020199", "020200", "020203", "020209", "020210", "020218", "020219", "020223", "020224", "020225", "020226", "020227", "020230", "020231", "020233", "020234", "020237", "020238", "020266", "020274", "020280", "020281", "020288", "020289", "020290", "020293", "020295", "020302", "020306", "020307", "020311", "020315", "020316", "020319", "020322", "020323", "020324", "020329", "020331", "020333", "020334", "020337", "020338", "020339", "020341", "020343", "020344", "020346", "020347", "020349", "020374", "020380", "020387", "020392", "020398", "020405", "020406", "020411", "020415", "020416", "020417", "020418", "020424", "020428", "020429", "020431", "020435", "020436", "020439", "020441", "020444", "020446", "020447", "020448", "020451", "020453", "020454", "020455", "020456", "020458", "020486", "020487", "020491", "020492", "020502", "020503", "020505", "020509", "020511", "020514", "020517", "020519", "020520", "020521", "020527", "020529", "020534", "020540", "020541", "020545", "020546", "020547", "020548", "020553", "020554", "020557", "020558", "020559", "020560", "020562", "020564", "020565", "020566", "020568", "020595", "020603", "020606", "020610", "020619", "020626", "020627", "020628", "020632", "020633", "020635", "020637", "020640", "020642", "020643", "020646", "020651", "020655", "020656", "020658", "020659", "020660", "020661", "020663", "020664", "020665", "020666", "020668", "020669", "020670", "020672", "020677", "020678", "020691", "020702", "020708", "020714", "020719", "020728", "020729", "020733", "020734", "020736", "020740", "020747", "020749", "020751", "020753", "020755", "020756", "020757", "020760", "020761", "020763", "020764", "020766", "020768", "020769", "020770", "020771", "020772", "020775", "020778", "020779", "020780", "020781", "020783", "020784", "020785", "020786", "020787", "020788", "020789", "020813", "020820", "020827", "020838", "020841", "020844", "020845", "020846", "020848", "020853", "020854", "020855", "020856", "020863", "020864", "020866", "020867", "020868", "020871", "020872", "020875", "020877", "020878", "020879", "020883", "020884", "020887", "020890", "020891", "020892", "020895", "020897", "020918", "020927", "020932", "020936", "020937", "020947", "020949", "020951", "020952", "020953", "020960", "020961", "020962", "020964", "020965", "020970", "020973", "020974", "020975", "020979", "020980", "020981", "020982", "020983", "020984", "020985", "020989", "020990", "020991", "020992", "020994", "020996", "020997", "020998", "021000", "021002", "021003", "021004", "021005", "021007", "021008", "021026", "021033", "021049", "021056", "021059", "021061", "021063", "021064", "021067", "021077", "021078", "021079", "021080", "021082", "021085", "021087", "021089", "021090", "021094", "021096", "021099", "021100", "021101", "021103", "021107", "021113", "021115", "021116", "021119", "021142", "021147", "021156", "021158", "021167", "021168", "021169", "021170", "021172", "021173", "021174", "021179", "021181", "021183", "021185", "021189", "021191", "021194", "021197", "021202", "021204", "021206", "021210", "021215", "021217", "021219", "021221", "021223", "021224", "021228", "021229", "021253", "021267", "021274", "021275", "021276", "021282", "021283", "021285", "021290", "021291", "021292", "021293", "021300", "021301", "021302", "021303", "021307", "021310", "021314", "021315", "021316", "021320", "021323", "021325", "021326", "021327", "021329", "021330", "021331", "021332", "021335", "021338", "021339", "021371", "021380", "021385", "021390", "021391", "021394", "021401", "021404", "021406", "021408", "021409", "021410", "021411", "021413", "021414", "021417", "021421", "021423", "021425", "021426", "021427", "021428", "021429", "021431", "021436", "021437", "021438", "021440", "021441", "021443", "021446", "021447", "021448", "021473", "021476", "021485", "021489", "021495", "021499", "021501", "021508", "021509", "021512", "021513", "021516", "021520", "021521", "021522", "021523", "021526", "021528", "021529", "021531", "021532", "021533", "021536", "021537", "021539", "021540", "021541", "021542", "021544", "021545", "021546", "021547", "021548", "021550", "021551", "021552", "021554", "021555", "021556", "021557", "021558", "021559", "021576", "021582", "021590", "021596", "021604", "021605", "021611", "021619", "021620", "021622", "021626", "021627", "021629", "021630", "021631", "021634", "021638", "021639", "021642", "021643", "021646", "021648", "021652", "021653", "021660", "021661", "021662", "021663", "021666", "021667", "021669", "021688", "021700", "021708", "021712", "021715", "021716", "021728", "021735", "021736", "021737", "021738", "021739", "021741", "021742", "021748", "021749", "021750", "021753", "021755", "021759", "021760", "021762", "021763", "021765", "021766", "021767", "021769", "021770", "021772", "021773", "021775", "021777", "021778", "021790", "021805", "021808", "021821", "021822", "021825", "021827", "021835", "021836", "021840", "021841", "021843", "021847", "021855", "021857", "021859", "021860", "021864", "021865", "021871", "021874", "021876", "021877", "021879", "021880", "021885", "021888", "021909", "021923", "021926", "021938", "021942", "021944", "021945", "021950", "021952", "021953", "021955", "021957", "021961", "021964", "021965", "021972", "021974", "021980", "021981", "021982", "021984", "021986", "021987", "021988", "021990", "021992", "021994", "021995", "021998", "022016", "022021", "022032", "022033", "022043", "022051", "022058", "022059", "022061", "022062", "022063", "022065", "022068", "022069", "022071", "022072", "022074", "022078", "022082", "022083", "022084", "022085", "022087", "022088", "022090", "022091", "022094", "022095", "022096", "022097", "022098", "022099", "022100", "022102", "022105", "022108", "022109", "022129", "022131", "022139", "022141", "022142", "022149", "022158", "022159", "022161", "022165", "022167", "022168", "022171", "022174", "022176", "022178", "022180", "022183", "022191", "022195", "022198", "022199", "022200", "022201", "022203", "022210", "022211", "022212", "022213", "022214", "022215", "022216", "022217", "022221", "022222", "022225", "022226", "022231", "022232", "022243", "022244", "022245", "022250", "022259", "022263", "022268", "022272", "022274", "022275", "022276", "022279", "022280", "022290", "022293", "022296", "022301", "022302", "022303", "022305", "022309", "022310", "022311", "022313", "022318", "022321", "022323"]}

{"batch_split": {"train": ["0"], "val": [], "test": []}, "vehicle_split": {"train": ["015344", "015345", "015346", "015347", "015348", "015349", "015350", "015351", "015352", "015353", "015354", "015355", "015356", "015357", "015358", "015359", "015360", "015361", "015362", "015363", "015364", "015365", "015366", "015367", "015368", "015369", "015370", "015371", "015372", "015373", "015374", "015375", "015376", "015377", "015378", "015379", "015380", "015381", "015382", "015383", "015384", "015385", "015396", "015397", "015398", "015399", "015400", "015401", "015402", "015403", "015404", "015405", "015406", "015407", "015408", "015409", "015410", "015411", "015412", "015413", "015414", "015415", "015416", "015417", "015418", "015419", "015420", "015421", "015422", "015423", "015424", "015425", "015426", "015427", "015428", "015429", "015430", "015431", "015432", "015433", "015434", "015435", "015436", "015437", "015438", "015439", "015440", "015441", "015442", "015443", "015444"], "val": [], "test": []}, "infrastructure_split": {"train": ["000009", "000010", "000011", "000012", "000013", "000014", "000015", "000016", "000017", "000018", "000019", "000020", "000021", "000022", "000023", "000024", "000025", "000026", "000027", "000028", "000029", "000030", "000031", "000032", "000033", "000034", "000035", "000036", "000037", "000038", "000039", "000040", "000041", "000042", "000043", "000044", "000045", "000046", "000047", "000048", "000049", "000050", "000051", "000052", "000053", "000054", "000055", "000056", "000057", "000058", "000059", "000060", "000061", "000062", "000063", "000064", "000065", "000066", "000067", "000068", "000069", "000070", "000071", "000072", "000073", "000074", "000075", "000076", "000077", "000078", "000079", "000080", "000081", "000082", "000083", "000084", "000085", "000086", "000087", "000088", "000089", "000090", "000091", "000092"], "val": [], "test": []}, "cooperative_split": {"train": ["015372", "015373", "015374", "015375", "015376", "015377", "015378", "015379", "015380", "015381", "015382", "015383", "015384", "015385", "015400", "015401", "015402", "015403", "015404", "015405", "015406", "015407", "015408", "015409", "015410", "015411", "015412", "015413", "015414", "015426", "015427", "015428", "015429", "015430", "015431", "015432", "015433", "015434", "015435", "015436", "015437", "015438", "015439", "015440", "015441", "015442"], "val": [], "test": []}}

{"train": ["000000", "000001", "000002", "000003", "000004", "000005", "000006", "000007", "000008", "000009", "000010", "000011", "000013", "000014", "000015", "000016", "000017", "000018", "000019", "000020", "000022", "000023", "000024", "000025", "000026", "000027", "000028", "000030", "000032", "000035", "000036", "000037", "000038", "000039", "000042", "000043", "000044", "000045", "000047", "000049", "000051", "000054", "000055", "000057", "000058", "000063", "000064", "000067", "000068", "000070", "000074", "000078", "000083", "000084", "000091"], "val": ["000012", "000029", "000031", "000033", "000041", "000050", "000056", "000060", "000062", "000065", "000066", "000069", "000071", "000079", "000086", "000089", "000092"], "test": ["000021", "000034", "000040", "000046", "000048", "000052", "000053", "000059", "000061", "000072", "000073", "000075", "000076", "000077", "000080", "000081", "000082", "000085", "000087", "000088", "000090", "000093", "000094", "000095", "000096", "000097", "000098", "000099"]}


# PointPillars: Fast Encoders for Object Detection from Point Clouds
> [PointPillars: Fast Encoders for Object Detection from Point Clouds](https://arxiv.org/abs/1812.05784)

## Introduction
We implement PointPillars and provide the results and checkpoints on DAIR-V2X-I datasets with MMDetection3D.

## Results and models
|  Modality  |     Model    |  Car  |        |       | Pedestrain |        |       | Cyclist |        |       | Download |
|:----------:|:------------:|:-----:|:------:|:-----:|:----------:|:------:|:-----:|:-------:|:------:|:-----:|:--------:|
|            |              |  Easy | Middle |  Hard |    Easy    | Middle |  Hard |   Easy  | Middle |  Hard |          |
| Pointcloud | PointPillars | 63.07 | 54.00  | 54.01 | 38.53      | 37.20  | 37.28 | 38.46   | 22.60  | 22.49 |  [model](https://drive.google.com/file/d/1CeYLmk5CVyxkRakshjKdsDJcqxstdS5T/view?usp=sharing) |

## Training & Evaluation

### Data Preparation
#### Download data and organise as follows

```
# For DAIR-V2X-I Dataset located at ${DAIR-V2X-I_DATASET_ROOT}
└─── single-infrastructure-side
     ├───── image
     ├───── velodyne
     ├───── calib
     ├───── label
     └───── data_info.json        
```

#### Create a symlink to the dataset root

```
cd ${dair-v2x_root}/dair-v2x
mkdir ./data/DAIR-V2X
ln -s ${DAIR-V2X-I_DATASET_ROOT}/single-infrastructure-side ./data/DAIR-V2X
```

#### Create Kitti-format data (Option for model training)

Data creation should be under the gpu environment.
```commandline
# Kitti Format
cd ${dair-v2x_root}/dair-v2x
python tools/dataset_converter/dair2kitti.py --source-root ./data/DAIR-V2X/single-infrastructure-side \
    --target-root ./data/DAIR-V2X/single-infrastructure-side \
    --split-path ./data/split_datas/single-infrastructure-split-data.json \
    --label-type lidar --sensor-view infrastructure
```
In the end, the data and info files should be organized as follows
```
└─── single-infrastructure-side               
     ├───── image
     ├───── velodyne
     ├───── calib
     ├───── label
     ├───── data_info.json
     ├───── ImageSets
     └───── training
        ├───── image_2
        ├───── velodyne
        ├───── label_2
        └───── calib
```
### Training & Evaluation

* Implementation Framework. We directly implement the benchmark with [mmdetection3d-0.17.1](https://github.com/open-mmlab/mmdetection3d/tree/v0.17.1).
* Training & Evaluation details. 
  Before training the detectors, we should follow MMDetection3D to convert the "./data/DAIR-V2X/single-infrastructure-side" into specific training format.
  We train the MVX-Net for 40 epochs.
  We evaluate the models on the valid part of DAIR-V2X-I. 
  We set [0.5, 0.25, 0.25] as the IoU threshold for [Car, Pedestrain, Cyclist]. 
  Please refer [trainval_config.py](./trainval_config.py) for more evaluation details.
  We provide the evaluation results with 3D Average Precision.
  

## Citation

```latex
@inproceedings{lang2019pointpillars,
  title={Pointpillars: Fast encoders for object detection from point clouds},
  author={Lang, Alex H and Vora, Sourabh and Caesar, Holger and Zhou, Lubing and Yang, Jiong and Beijbom, Oscar},
  booktitle={Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition},
  pages={12697--12705},
  year={2019}
}
```

dataset_type = "KittiDataset"
data_root = "../../../data/DAIR-V2X/single-infrastructure-side/"
class_names = ["Pedestrian", "Cyclist", "Car"]
point_cloud_range = [0, -39.68, -3, 69.12, 39.68, 1]
voxel_size = [0.16, 0.16, 4]
input_modality = dict(use_lidar=True, use_camera=False)

model = dict(
    type="VoxelNet",
    voxel_layer=dict(
        max_num_points=32, point_cloud_range=point_cloud_range, voxel_size=voxel_size, max_voxels=(16000, 40000)
    ),
    voxel_encoder=dict(
        type="PillarFeatureNet",
        in_channels=4,
        feat_channels=[64],
        with_distance=False,
        voxel_size=voxel_size,
        point_cloud_range=point_cloud_range,
    ),
    middle_encoder=dict(type="PointPillarsScatter", in_channels=64, output_shape=[496, 432]),
    backbone=dict(
        type="SECOND", in_channels=64, layer_nums=[3, 5, 5], layer_strides=[2, 2, 2], out_channels=[64, 128, 256]
    ),
    neck=dict(type="SECONDFPN", in_channels=[64, 128, 256], upsample_strides=[1, 2, 4], out_channels=[128, 128, 128]),
    bbox_head=dict(
        type="Anchor3DHead",
        num_classes=3,
        in_channels=384,
        feat_channels=384,
        use_direction_classifier=True,
        anchor_generator=dict(
            type="Anchor3DRangeGenerator",
            ranges=[
                [0, -39.68, -0.6, 70.4, 39.68, -0.6],
                [0, -39.68, -0.6, 70.4, 39.68, -0.6],
                [0, -39.68, -1.78, 70.4, 39.68, -1.78],
            ],
            sizes=[[0.6, 0.8, 1.73], [0.6, 1.76, 1.73], [1.6, 3.9, 1.56]],
            rotations=[0, 1.57],
            reshape_out=False,
        ),
        diff_rad_by_sin=True,
        bbox_coder=dict(type="DeltaXYZWLHRBBoxCoder"),
        loss_cls=dict(type="FocalLoss", use_sigmoid=True, gamma=2.0, alpha=0.25, loss_weight=1.0),
        loss_bbox=dict(type="SmoothL1Loss", beta=0.1111111111111111, loss_weight=2.0),
        loss_dir=dict(type="CrossEntropyLoss", use_sigmoid=False, loss_weight=0.2),
    ),
    train_cfg=dict(
        assigner=[
            dict(
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.5,
                neg_iou_thr=0.35,
                min_pos_iou=0.35,
                ignore_iof_thr=-1,
            ),
            dict(
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.5,
                neg_iou_thr=0.35,
                min_pos_iou=0.35,
                ignore_iof_thr=-1,
            ),
            dict(
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.6,
                neg_iou_thr=0.45,
                min_pos_iou=0.45,
                ignore_iof_thr=-1,
            ),
        ],
        allowed_border=0,
        pos_weight=-1,
        debug=False,
    ),
    test_cfg=dict(
        use_rotate_nms=True,
        nms_across_levels=False,
        nms_thr=0.01,
        score_thr=0.1,
        min_bbox_size=0,
        nms_pre=100,
        max_num=50,
    ),
)

db_sampler = dict(
    data_root=data_root,
    info_path=data_root + "/kitti_dbinfos_train.pkl",
    rate=1.0,
    prepare=dict(filter_by_difficulty=[-1], filter_by_min_points=dict(Car=5, Pedestrian=10, Cyclist=10)),
    classes=class_names,
    sample_groups=dict(Car=15, Pedestrian=10, Cyclist=10),
)
file_client_args = dict(backend="disk")
train_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
    dict(type="LoadAnnotations3D", with_bbox_3d=True, with_label_3d=True),
    dict(
        type="ObjectSample",
        db_sampler=dict(
            data_root=data_root,
            info_path=data_root + "/kitti_dbinfos_train.pkl",
            rate=1.0,
            prepare=dict(filter_by_difficulty=[-1], filter_by_min_points=dict(Car=5, Pedestrian=10, Cyclist=10)),
            classes=class_names,
            sample_groups=dict(Car=15, Pedestrian=10, Cyclist=10),
        ),
    ),
    dict(
        type="ObjectNoise",
        num_try=100,
        translation_std=[0.25, 0.25, 0.25],
        global_rot_range=[0.0, 0.0],
        rot_range=[-0.15707963267, 0.15707963267],
    ),
    dict(type="RandomFlip3D", flip_ratio_bev_horizontal=0.5),
    dict(type="GlobalRotScaleTrans", rot_range=[-0.78539816, 0.78539816], scale_ratio_range=[0.95, 1.05]),
    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
    dict(type="ObjectRangeFilter", point_cloud_range=point_cloud_range),
    dict(type="PointShuffle"),
    dict(type="DefaultFormatBundle3D", class_names=class_names),
    dict(type="Collect3D", keys=["points", "gt_bboxes_3d", "gt_labels_3d"]),
]
test_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
    dict(
        type="MultiScaleFlipAug3D",
        img_scale=(1333, 800),
        pts_scale_ratio=1,
        flip=False,
        transforms=[
            dict(type="GlobalRotScaleTrans", rot_range=[0, 0], scale_ratio_range=[1.0, 1.0], translation_std=[0, 0, 0]),
            dict(type="RandomFlip3D"),
            dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
            dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
            dict(type="Collect3D", keys=["points"]),
        ],
    ),
]
eval_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4, file_client_args=dict(backend="disk")),
    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
    dict(type="Collect3D", keys=["points"]),
]
data = dict(
    samples_per_gpu=6,
    workers_per_gpu=4,
    train=dict(
        type="RepeatDataset",
        times=2,
        dataset=dict(
            type="KittiDataset",
            data_root=data_root,
            ann_file=data_root + "/kitti_infos_train.pkl",
            split="training",
            pts_prefix="velodyne_reduced",
            pipeline=[
                dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
                dict(type="LoadAnnotations3D", with_bbox_3d=True, with_label_3d=True),
                dict(
                    type="ObjectSample",
                    db_sampler=dict(
                        data_root=data_root,
                        info_path=data_root + "/kitti_dbinfos_train.pkl",
                        rate=1.0,
                        prepare=dict(
                            filter_by_difficulty=[-1], filter_by_min_points=dict(Car=5, Pedestrian=10, Cyclist=10)
                        ),
                        classes=class_names,
                        sample_groups=dict(Car=15, Pedestrian=10, Cyclist=10),
                    ),
                ),
                dict(
                    type="ObjectNoise",
                    num_try=100,
                    translation_std=[0.25, 0.25, 0.25],
                    global_rot_range=[0.0, 0.0],
                    rot_range=[-0.15707963267, 0.15707963267],
                ),
                dict(type="RandomFlip3D", flip_ratio_bev_horizontal=0.5),
                dict(type="GlobalRotScaleTrans", rot_range=[-0.78539816, 0.78539816], scale_ratio_range=[0.95, 1.05]),
                dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                dict(type="ObjectRangeFilter", point_cloud_range=point_cloud_range),
                dict(type="PointShuffle"),
                dict(type="DefaultFormatBundle3D", class_names=class_names),
                dict(type="Collect3D", keys=["points", "gt_bboxes_3d", "gt_labels_3d"]),
            ],
            modality=dict(use_lidar=True, use_camera=False),
            classes=class_names,
            test_mode=False,
            box_type_3d="LiDAR",
        ),
    ),
    val=dict(
        type="KittiDataset",
        data_root=data_root,
        ann_file=data_root + "/kitti_infos_val.pkl",
        split="training",
        pts_prefix="velodyne_reduced",
        pipeline=[
            dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
            dict(
                type="MultiScaleFlipAug3D",
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type="GlobalRotScaleTrans",
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0],
                    ),
                    dict(type="RandomFlip3D"),
                    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
                    dict(type="Collect3D", keys=["points"]),
                ],
            ),
        ],
        modality=dict(use_lidar=True, use_camera=False),
        classes=class_names,
        test_mode=True,
        box_type_3d="LiDAR",
    ),
    test=dict(
        type="KittiDataset",
        data_root=data_root,
        ann_file=data_root + "/kitti_infos_val.pkl",
        split="training",
        pts_prefix="velodyne_reduced",
        pipeline=[
            dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
            dict(
                type="MultiScaleFlipAug3D",
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type="GlobalRotScaleTrans",
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0],
                    ),
                    dict(type="RandomFlip3D"),
                    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
                    dict(type="Collect3D", keys=["points"]),
                ],
            ),
        ],
        modality=dict(use_lidar=True, use_camera=False),
        classes=class_names,
        test_mode=True,
        box_type_3d="LiDAR",
    ),
)
evaluation = dict(
    interval=2,
    pipeline=[
        dict(
            type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4, file_client_args=dict(backend="disk")
        ),
        dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
        dict(type="Collect3D", keys=["points"]),
    ],
)

lr = 0.001
optimizer = dict(type="AdamW", lr=0.001, betas=(0.95, 0.99), weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(policy="cyclic", target_ratio=(10, 0.0001), cyclic_times=1, step_ratio_up=0.4)
momentum_config = dict(policy="cyclic", target_ratio=(0.8947368421052632, 1), cyclic_times=1, step_ratio_up=0.4)
runner = dict(type="EpochBasedRunner", max_epochs=80)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type="TextLoggerHook"), dict(type="TensorboardLoggerHook")])
dist_params = dict(backend="nccl")
log_level = "INFO"
work_dir = "./work_dirs"
load_from = None
resume_from = None
workflow = [("train", 1)]
gpu_ids = range(0, 1)


# MVX-Net: Multimodal VoxelNet for 3D Object Detection

> [MVX-Net: Multimodal VoxelNet for 3D Object Detection](https://arxiv.org/abs/1904.01649)

## Introduction
We implement MVX-Net and provide the results and checkpoints on DAIR-V2X-I datasets with MMDetection3D.

## Results and models
|  Modality  |     Model    |  Car  |        |       | Pedestrain |        |       | Cyclist |        |       | Download |
|:----------:|:------------:|:-----:|:------:|:-----:|:----------:|:------:|:-----:|:-------:|:------:|:-----:|:--------:|
|            |              |  Easy | Middle |  Hard |    Easy    | Middle |  Hard |   Easy  | Middle |  Hard |          |
| Image+Pointcloud | MVX-Net | 71.04 | 53.71  | 53.76 | 55.83      | 54.45  | 54.40 | 54.05   | 30.79  | 31.06 |  [model](https://drive.google.com/file/d/1dtTEuCzsj1I69vz6Hy2I6KZb515R-zoZ/view?usp=sharing)

## Training & Evaluation

### Data Preparation
#### Download data and organise as follows

```
# For DAIR-V2X-I Dataset located at ${DAIR-V2X-I_DATASET_ROOT}
└─── single-infrastructure-side
     ├───── image
     ├───── velodyne
     ├───── calib
     ├───── label
     └───── data_info.json        
```

#### Create a symlink to the dataset root

```
cd ${dair-v2x_root}/dair-v2x
mkdir ./data/DAIR-V2X
ln -s ${DAIR-V2X-I_DATASET_ROOT}/single-infrastructure-side ./data/DAIR-V2X
```

#### Create Kitti-format data (Option for model training)

Data creation should be under the gpu environment.
```commandline
# Kitti Format
cd ${dair-v2x_root}/dair-v2x
python tools/dataset_converter/dair2kitti.py --source-root ./data/DAIR-V2X/single-infrastructure-side \
    --target-root ./data/DAIR-V2X/single-infrastructure-side \
    --split-path ./data/split_datas/single-infrastructure-split-data.json \
    --label-type lidar --sensor-view infrastructure
```
In the end, the data and info files should be organized as follows
```
└─── single-infrastructure-side               
     ├───── image
     ├───── velodyne
     ├───── calib
     ├───── label
     ├───── data_info.json
     ├───── ImageSets
     └───── training
        ├───── image_2
        ├───── velodyne
        ├───── label_2
        └───── calib
```

### Training & Evaluation

* Implementation Framework. We directly implement the benchmark with [mmdetection3d-0.17.1](https://github.com/open-mmlab/mmdetection3d/tree/v0.17.1).
* Training & Evaluation details. 
  Before training the detectors, we should follow MMDetection3D to convert the "./data/DAIR-V2X/single-infrastructure-side" into specific training format.
  We train the MVX-Net for 40 epochs.
  We evaluate the models on the valid part of DAIR-V2X-I. 
  We set [0.5, 0.25, 0.25] as the IoU threshold for [Car, Pedestrain, Cyclist]. 
  Please refer [trainval_config.py](./trainval_config.py) for more evaluation details.
  We provide the evaluation results with 3D Average Precision.

## Citation

```latex
@inproceedings{sindagi2019mvx,
  title={MVX-Net: Multimodal voxelnet for 3D object detection},
  author={Sindagi, Vishwanath A and Zhou, Yin and Tuzel, Oncel},
  booktitle={2019 International Conference on Robotics and Automation (ICRA)},
  pages={7276--7282},
  year={2019},
  organization={IEEE}
}
```

dataset_type = "KittiDataset"
data_root = "../../../data/DAIR-V2X/single-infrastructure-side/"
class_names = ["Pedestrian", "Cyclist", "Car"]
voxel_size = [0.05, 0.05, 0.1]
point_cloud_range = [0, -40, -3, 70.4, 40, 1]
z_center_pedestrian = -0.6
z_center_cyclist = -0.6
z_center_car = -1.78

mean = [103.53, 116.28, 123.675]
std = [1.0, 1.0, 1.0]
img_scale = (960, 540)
to_rgb = False
img_norm_cfg = dict(mean=mean, std=std, to_rgb=to_rgb)
input_modality = dict(use_lidar=True, use_camera=True)

lr = 0.003
optimizer = dict(type="AdamW", lr=0.003, betas=(0.95, 0.99), weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(policy="CosineAnnealing", warmup="linear", warmup_iters=1000, warmup_ratio=0.1, min_lr_ratio=1e-05)
momentum_config = None
runner = dict(type="EpochBasedRunner", max_epochs=40)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type="TextLoggerHook"), dict(type="TensorboardLoggerHook")])
dist_params = dict(backend="nccl")
log_level = "INFO"
work_dir = "./work_dirs/dv_mvx-fpn_second_secfpn_adamw_2x8_80e_kitti-3d-3class"
load_from = "https://download.openmmlab.com/mmdetection3d/pretrain_models/mvx_faster_rcnn_detectron2-caffe_20e_coco-pretrain_gt-sample_kitti-3-class_moderate-79.3_20200207-a4a6a3c7.pth"
resume_from = None
workflow = [("train", 1)]

model = dict(
    type="DynamicMVXFasterRCNN",
    img_backbone=dict(
        type="ResNet",
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type="BN", requires_grad=False),
        norm_eval=True,
        style="caffe",
    ),
    img_neck=dict(type="FPN", in_channels=[256, 512, 1024, 2048], out_channels=256, num_outs=5),
    pts_voxel_layer=dict(
        max_num_points=-1, point_cloud_range=point_cloud_range, voxel_size=voxel_size, max_voxels=(-1, -1)
    ),
    pts_voxel_encoder=dict(
        type="DynamicVFE",
        in_channels=4,
        feat_channels=[64, 64],
        with_distance=False,
        voxel_size=voxel_size,
        with_cluster_center=True,
        with_voxel_center=True,
        point_cloud_range=point_cloud_range,
        fusion_layer=dict(
            type="PointFusion",
            img_channels=256,
            pts_channels=64,
            mid_channels=128,
            out_channels=128,
            img_levels=[0, 1, 2, 3, 4],
            align_corners=False,
            activate_out=True,
            fuse_out=False,
        ),
    ),
    pts_middle_encoder=dict(
        type="SparseEncoder", in_channels=128, sparse_shape=[41, 1600, 1408], order=("conv", "norm", "act")
    ),
    pts_backbone=dict(type="SECOND", in_channels=256, layer_nums=[5, 5], layer_strides=[1, 2], out_channels=[128, 256]),
    pts_neck=dict(type="SECONDFPN", in_channels=[128, 256], upsample_strides=[1, 2], out_channels=[256, 256]),
    pts_bbox_head=dict(
        type="Anchor3DHead",
        num_classes=3,
        in_channels=512,
        feat_channels=512,
        use_direction_classifier=True,
        anchor_generator=dict(
            type="Anchor3DRangeGenerator",
            ranges=[[0, -40, -0.6, 70.4, 40, -0.6], [0, -40, -0.6, 70.4, 40, -0.6], [0, -40, -1.78, 70.4, 40, -1.78]],
            sizes=[[0.6, 0.8, 1.73], [0.6, 1.76, 1.73], [1.6, 3.9, 1.56]],
            rotations=[0, 1.57],
            reshape_out=False,
        ),
        assigner_per_size=True,
        diff_rad_by_sin=True,
        assign_per_class=True,
        bbox_coder=dict(type="DeltaXYZWLHRBBoxCoder"),
        loss_cls=dict(type="FocalLoss", use_sigmoid=True, gamma=2.0, alpha=0.25, loss_weight=1.0),
        loss_bbox=dict(type="SmoothL1Loss", beta=0.1111111111111111, loss_weight=2.0),
        loss_dir=dict(type="CrossEntropyLoss", use_sigmoid=False, loss_weight=0.2),
    ),
    train_cfg=dict(
        pts=dict(
            assigner=[
                dict(
                    type="MaxIoUAssigner",
                    iou_calculator=dict(type="BboxOverlapsNearest3D"),
                    pos_iou_thr=0.35,
                    neg_iou_thr=0.2,
                    min_pos_iou=0.2,
                    ignore_iof_thr=-1,
                ),
                dict(
                    type="MaxIoUAssigner",
                    iou_calculator=dict(type="BboxOverlapsNearest3D"),
                    pos_iou_thr=0.35,
                    neg_iou_thr=0.2,
                    min_pos_iou=0.2,
                    ignore_iof_thr=-1,
                ),
                dict(
                    type="MaxIoUAssigner",
                    iou_calculator=dict(type="BboxOverlapsNearest3D"),
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.45,
                    min_pos_iou=0.45,
                    ignore_iof_thr=-1,
                ),
            ],
            allowed_border=0,
            pos_weight=-1,
            debug=False,
        )
    ),
    test_cfg=dict(
        pts=dict(
            use_rotate_nms=True,
            nms_across_levels=False,
            nms_thr=0.01,
            score_thr=0.1,
            min_bbox_size=0,
            nms_pre=100,
            max_num=50,
        )
    ),
)
train_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
    dict(type="LoadImageFromFile"),
    dict(type="LoadAnnotations3D", with_bbox_3d=True, with_label_3d=True),
    dict(type="Resize", img_scale=[(480, 270), (1920, 1080)], multiscale_mode="range", keep_ratio=True),
    dict(
        type="GlobalRotScaleTrans",
        rot_range=[-0.78539816, 0.78539816],
        scale_ratio_range=[0.95, 1.05],
        translation_std=[0.2, 0.2, 0.2],
    ),
    dict(type="RandomFlip3D", flip_ratio_bev_horizontal=0.5),
    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
    dict(type="ObjectRangeFilter", point_cloud_range=point_cloud_range),
    dict(type="PointShuffle"),
    dict(type="Normalize", mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False),
    dict(type="Pad", size_divisor=32),
    dict(type="DefaultFormatBundle3D", class_names=class_names),
    dict(type="Collect3D", keys=["points", "img", "gt_bboxes_3d", "gt_labels_3d"]),
]
test_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
    dict(type="LoadImageFromFile"),
    dict(
        type="MultiScaleFlipAug3D",
        img_scale=(960, 540),
        pts_scale_ratio=1,
        flip=False,
        transforms=[
            dict(type="Resize", multiscale_mode="value", keep_ratio=True),
            dict(type="GlobalRotScaleTrans", rot_range=[0, 0], scale_ratio_range=[1.0, 1.0], translation_std=[0, 0, 0]),
            dict(type="RandomFlip3D"),
            dict(type="Normalize", mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False),
            dict(type="Pad", size_divisor=32),
            dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
            dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
            dict(type="Collect3D", keys=["points", "img"]),
        ],
    ),
]
eval_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
    dict(type="LoadImageFromFile"),
    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
    dict(type="Collect3D", keys=["points", "img"]),
]
data = dict(
    samples_per_gpu=1,
    workers_per_gpu=1,
    train=dict(
        type="RepeatDataset",
        times=2,
        dataset=dict(
            type="KittiDataset",
            data_root=data_root,
            ann_file=data_root + "/kitti_infos_train.pkl",
            split="training",
            pts_prefix="velodyne_reduced",
            pipeline=[
                dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
                dict(type="LoadImageFromFile"),
                dict(type="LoadAnnotations3D", with_bbox_3d=True, with_label_3d=True),
                dict(type="Resize", img_scale=[(480, 270), (1920, 1080)], multiscale_mode="range", keep_ratio=True),
                dict(
                    type="GlobalRotScaleTrans",
                    rot_range=[-0.78539816, 0.78539816],
                    scale_ratio_range=[0.95, 1.05],
                    translation_std=[0.2, 0.2, 0.2],
                ),
                dict(type="RandomFlip3D", flip_ratio_bev_horizontal=0.5),
                dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                dict(type="ObjectRangeFilter", point_cloud_range=point_cloud_range),
                dict(type="PointShuffle"),
                dict(type="Normalize", mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False),
                dict(type="Pad", size_divisor=32),
                dict(type="DefaultFormatBundle3D", class_names=class_names),
                dict(type="Collect3D", keys=["points", "img", "gt_bboxes_3d", "gt_labels_3d"]),
            ],
            modality=dict(use_lidar=True, use_camera=True),
            classes=class_names,
            test_mode=False,
            box_type_3d="LiDAR",
        ),
    ),
    val=dict(
        type="KittiDataset",
        data_root=data_root,
        ann_file=data_root + "/kitti_infos_val.pkl",
        split="training",
        pts_prefix="velodyne_reduced",
        pipeline=[
            dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
            dict(type="LoadImageFromFile"),
            dict(
                type="MultiScaleFlipAug3D",
                img_scale=(960, 540),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(type="Resize", multiscale_mode="value", keep_ratio=True),
                    dict(
                        type="GlobalRotScaleTrans",
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0],
                    ),
                    dict(type="RandomFlip3D"),
                    dict(type="Normalize", mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False),
                    dict(type="Pad", size_divisor=32),
                    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
                    dict(type="Collect3D", keys=["points", "img"]),
                ],
            ),
        ],
        modality=dict(use_lidar=True, use_camera=True),
        classes=class_names,
        test_mode=True,
        box_type_3d="LiDAR",
    ),
    test=dict(
        type="KittiDataset",
        data_root=data_root,
        ann_file=data_root + "/kitti_infos_val.pkl",
        split="training",
        pts_prefix="velodyne_reduced",
        pipeline=[
            dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
            dict(type="LoadImageFromFile"),
            dict(
                type="MultiScaleFlipAug3D",
                img_scale=(960, 540),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(type="Resize", multiscale_mode="value", keep_ratio=True),
                    dict(
                        type="GlobalRotScaleTrans",
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0],
                    ),
                    dict(type="RandomFlip3D"),
                    dict(type="Normalize", mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False),
                    dict(type="Pad", size_divisor=32),
                    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
                    dict(type="Collect3D", keys=["points", "img"]),
                ],
            ),
        ],
        modality=dict(use_lidar=True, use_camera=True),
        classes=class_names,
        test_mode=True,
        box_type_3d="LiDAR",
    ),
)
evaluation = dict(
    interval=1,
    pipeline=[
        dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
        dict(type="LoadImageFromFile"),
        dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
        dict(type="Collect3D", keys=["points", "img"]),
    ],
)
gpu_ids = range(0, 1)


# ImVoxelNet: Image to Voxels Projection for Monocular and Multi-View General-Purpose 3D Object Detection

> [ImVoxelNet: Image to Voxels Projection for Monocular and Multi-View General-Purpose 3D Object Detection](https://arxiv.org/abs/2106.01178)

## Introduction

We implement ImVoxelNet and provide the results and checkpoints on DAIR-V2X-I datasets with MMDetection3D.

## Results and models

| Modality | Model | Car  |        |      | Pedestrain |        |      | Cyclist |        |      | Download |
| :------: | :---: | :--: | :----: | :--: | :--------: | :----: | :--: | :-----: | :----: | :--: | :------: |
|          |       | Easy | Middle | Hard |    Easy    | Middle | Hard |  Easy   | Middle | Hard |          |
| Image | ImVoxelNet | 61.30 | 52.18  | 52.20 | 9.02  | 8.86  | 8.90 | 16.83   | 11.58  | 12.30 |  [model](https://drive.google.com/file/d/1nrUjGVD-DHEBYhCOrRrIT37hsqgHhWRF/view?usp=share_link)

## Training & Evaluation

### Data Preparation

#### Download data and organise as follows

```
# For DAIR-V2X-I Dataset located at ${DAIR-V2X-I_DATASET_ROOT}
└─── single-infrastructure-side
     ├───── image
     ├───── velodyne
     ├───── calib
     ├───── label
     └───── data_info.json        
```

#### Create a symlink to the dataset root

```
cd ${dair-v2x_root}/dair-v2x
mkdir ./data/DAIR-V2X
ln -s ${DAIR-V2X-I_DATASET_ROOT}/single-infrastructure-side ./data/DAIR-V2X
```

#### Create Kitti-format data (Option for model training)

Data creation should be under the gpu environment.
```commandline
# Kitti Format
cd ${dair-v2x_root}/dair-v2x
python tools/dataset_converter/dair2kitti.py --source-root ./data/DAIR-V2X/single-infrastructure-side \
    --target-root ./data/DAIR-V2X/single-infrastructure-side \
    --split-path ./data/split_datas/single-infrastructure-split-data.json \
    --label-type camera --sensor-view infrastructure
```

In the end, the data and info files should be organized as follows

```
└─── single-infrastructure-side                
     ├───── image
     ├───── velodyne
     ├───── calib
     ├───── label
     ├───── data_info.json
     ├───── ImageSets
     └───── training
        ├───── image_2
        ├───── velodyne
        ├───── label_2
        └───── calib
```

### Training & Evaluation

* Implementation Framework. We directly implement the benchmark with [mmdetection3d-0.17.1](https://github.com/open-mmlab/mmdetection3d/tree/v0.17.1).
* Training & Evaluation details. 
    Before training the detectors, we should follow MMDetection3D to convert the "./data/DAIR-V2X/single-infrastructure-side" into specific training format.
    We train the ImVoxelNet for 12 epochs.
    We evaluate the models on the valid part of DAIR-V2X-I. 
    We set [0.5, 0.25, 0.25] as the IoU threshold for [Car, Pedestrain, Cyclist]. 
    Please refer [trainval_config.py](./trainval_config.py) for more evaluation details.
    We provide the evaluation results with 3D Average Precision.

## Citation

```latex
@inproceedings{rukhovich2022imvoxelnet,
  title={Imvoxelnet: Image to voxels projection for monocular and multi-view general-purpose 3d object detection},
  author={Rukhovich, Danila and Vorontsova, Anna and Konushin, Anton},
  booktitle={Proceedings of the IEEE/CVF Winter Conference on Applications of Computer Vision},
  pages={2397--2406},
  year={2022}
}
```

work_dir = './work_dirs/ss3d_inf_imvoxelnet'

dataset_type = "KittiDataset"
data_root = "../../../data/DAIR-V2X/single-infrastructure-side/"
class_names = ["Pedestrian", "Cyclist", "Car"]
input_modality = dict(use_lidar=False, use_camera=True)
point_cloud_range = [0, -39.68, -3, 69.12, 39.68, 1]
voxel_size = [0.32, 0.32, 0.32]
n_voxels = [int((point_cloud_range[i + 3] - point_cloud_range[i]) / voxel_size[i]) for i in range(3)]

img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
img_scale = (1280, 384)
img_resize_scale = [(1173, 352), (1387, 416)]

ped_center = -0.6
cyc_center = -0.6
car_center = -1.78

anchor_range_ped = [
    point_cloud_range[0],
    point_cloud_range[1],
    ped_center,
    point_cloud_range[3] - voxel_size[0],
    point_cloud_range[4] - voxel_size[1],
    ped_center,
]
anchor_range_cyc = [
    point_cloud_range[0],
    point_cloud_range[1],
    cyc_center,
    point_cloud_range[3] - voxel_size[0],
    point_cloud_range[4] - voxel_size[1],
    cyc_center,
]
anchor_range_car = [
    point_cloud_range[0],
    point_cloud_range[1],
    car_center,
    point_cloud_range[3] - voxel_size[0],
    point_cloud_range[4] - voxel_size[1],
    car_center,
]

anchor_size_pred = [0.6, 0.8, 1.73]
anchor_size_cyc = [0.6, 1.76, 1.73]
anchor_size_car = [1.6, 3.9, 1.56]

model = dict(
    type="ImVoxelNet",
    pretrained="torchvision://resnet50",
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=False),
        norm_eval=True,
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50'),
        style='pytorch'),
    neck=dict(
        type="FPN", 
        in_channels=[256, 512, 1024, 2048], 
        out_channels=64, 
        num_outs=4),
    neck_3d=dict(type="OutdoorImVoxelNeck", in_channels=64, out_channels=256),
    bbox_head=dict(
        type="Anchor3DHead",
        num_classes=len(class_names),
        in_channels=256,
        feat_channels=256,
        use_direction_classifier=True,
        anchor_generator=dict(
            type="Anchor3DRangeGenerator",
            ranges=[anchor_range_ped, anchor_range_cyc, anchor_range_car],
            sizes=[anchor_size_pred, anchor_size_cyc, anchor_size_car],
            rotations=[0, 1.57],
            reshape_out=False,
        ),
        diff_rad_by_sin=True,
        bbox_coder=dict(type="DeltaXYZWLHRBBoxCoder"),
        loss_cls=dict(
            type="FocalLoss", 
            use_sigmoid=True, 
            gamma=2.0, 
            alpha=0.25, 
            loss_weight=1.0),
        loss_bbox=dict(type="SmoothL1Loss", beta=1.0 / 9.0, loss_weight=2.0),
        loss_dir=dict(type="CrossEntropyLoss", use_sigmoid=False, loss_weight=0.2),
    ),
    # n_voxels=(216, 248, 12),
    # voxel_size=(.64, .64, .64)
    n_voxels=n_voxels,
    # voxel_size=voxel_size,
    anchor_generator=dict(
        type='AlignedAnchor3DRangeGenerator',
        ranges=[[0, -39.68, -3.08, 69.12, 39.68, 0.76]],
        rotations=[.0]),

    train_cfg = dict(
        assigner=[
            dict(  # for Pedestrian
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.5,
                neg_iou_thr=0.35,
                min_pos_iou=0.35,
                ignore_iof_thr=-1,
            ),
            dict(  # for Cyclist
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.5,
                neg_iou_thr=0.35,
                min_pos_iou=0.35,
                ignore_iof_thr=-1,
            ),
            dict(  # for Car
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.6,
                neg_iou_thr=0.45,
                min_pos_iou=0.45,
                ignore_iof_thr=-1,
            ),
        ],
        allowed_border=0,
        pos_weight=-1,
        debug=False,
    ),
    test_cfg = dict(
        use_rotate_nms=True, 
        nms_across_levels=False, 
        nms_thr=0.01, 
        score_thr=0.2, 
        min_bbox_size=0, 
        nms_pre=100, 
        max_num=50
    )
)

train_pipeline = [
    dict(type='LoadAnnotations3D'),
    dict(type='LoadImageFromFile'),
    dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),
    dict(
        type='Resize',
        img_scale=img_resize_scale,
        keep_ratio=True,
        multiscale_mode='range'),
    dict(type='Normalize', **img_norm_cfg),
    dict(type='Pad', size_divisor=32),
    dict(type='ObjectRangeFilter', point_cloud_range=point_cloud_range),
    dict(type='DefaultFormatBundle3D', class_names=class_names),
    dict(type='Collect3D', keys=['img', 'gt_bboxes_3d', 'gt_labels_3d'])
]

test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', img_scale=img_scale, keep_ratio=True),
    dict(type='Normalize', **img_norm_cfg),
    dict(type='Pad', size_divisor=32),
    dict(
        type='DefaultFormatBundle3D',
        class_names=class_names,
        with_label=False),
    dict(type='Collect3D', keys=['img'])
]

data = dict(
    samples_per_gpu=4,
    workers_per_gpu=3,
    train=dict(
        type="RepeatDataset",
        times=3,
        dataset=dict(
            type=dataset_type,
            data_root=data_root,
            ann_file=data_root + "kitti_infos_train.pkl",
            split="training",
            pts_prefix="velodyne_reduced",
            pipeline=train_pipeline,
            modality=input_modality,
            classes=class_names,
            pcd_limit_range=point_cloud_range,
            test_mode=False,
        ),
    ),
    val=dict(
        type=dataset_type,
        data_root=data_root,
        ann_file=data_root + "kitti_infos_val.pkl",
        split="training",
        pts_prefix="velodyne_reduced",
        pipeline=test_pipeline,
        modality=input_modality,
        classes=class_names,
        pcd_limit_range=point_cloud_range,
        test_mode=True,
    ),
    test=dict(
        type=dataset_type,
        data_root=data_root,
        ann_file=data_root + "kitti_infos_val.pkl",
        split="training",
        pts_prefix="velodyne_reduced",
        pipeline=test_pipeline,
        modality=input_modality,
        classes=class_names,
        pcd_limit_range=point_cloud_range,
        test_mode=True,
    ),
)

optimizer = dict(
    type="AdamW",
    lr=0.0001,
    weight_decay=0.0001,
    paramwise_cfg=dict(
        custom_keys={"backbone": dict(lr_mult=0.1, decay_mult=1.0)}),
)
optimizer_config = dict(grad_clip=dict(max_norm=35.0, norm_type=2))
lr_config = dict(policy="step", step=[8, 11])
total_epochs = 12

checkpoint_config = dict(interval=1, max_keep_ckpts=1)
log_config = dict(
    interval=50, 
    hooks=[dict(type="TextLoggerHook"), 
    dict(type="TensorboardLoggerHook")])
evaluation = dict(interval=1)
dist_params = dict(backend="nccl")
find_unused_parameters = True  # todo: fix number of FPN outputs
log_level = "INFO"
load_from = None
resume_from = None
workflow = [("train", 1)]

# Second: Sparsely embedded convolutional detection

> [SECOND: Sparsely Embedded Convolutional Detection](https://www.mdpi.com/1424-8220/18/10/3337)

## Introduction
We implement SECOND and provide the results and checkpoints on DAIR-V2X-I datasets with MMDetection3D.

## Results and models
|  Modality  |     Model    |  Car  |        |       | Pedestrain |        |       | Cyclist |        |       | Download |
|:----------:|:------------:|:-----:|:------:|:-----:|:----------:|:------:|:-----:|:-------:|:------:|:-----:|:--------:|
|            |              |  Easy | Middle |  Hard |    Easy    | Middle |  Hard |   Easy  | Middle |  Hard |          |
| Pointcloud | SECOND       | 71.47 | 53.99  | 54.00 | 55.16      | 52.49  | 52.52 | 54.68   | 31.05  | 31.19 | [model](https://drive.google.com/file/d/1kqIqwebq51OeAl15NkQppTSmDrzMv9F9/view?usp=sharing) |

## Training & Evaluation

### Data Preparation
#### Download data and organise as follows

```
# For DAIR-V2X-I Dataset located at ${DAIR-V2X-I_DATASET_ROOT}
└─── single-infrastructure-side
     ├───── image
     ├───── velodyne
     ├───── calib
     ├───── label
     └───── data_info.json        
```

#### Create a symlink to the dataset root

```
cd ${dair-v2x_root}/dair-v2x
mkdir ./data/DAIR-V2X
ln -s ${DAIR-V2X-I_DATASET_ROOT}/single-infrastructure-side ./data/DAIR-V2X
```

#### Create Kitti-format data (Option for model training)

Data creation should be under the gpu environment.
```commandline
# Kitti Format
cd ${dair-v2x_root}/dair-v2x
python tools/dataset_converter/dair2kitti.py --source-root ./data/DAIR-V2X/single-infrastructure-side \
    --target-root ./data/DAIR-V2X/single-infrastructure-side \
    --split-path ./data/split_datas/single-infrastructure-split-data.json \
    --label-type lidar --sensor-view infrastructure
```
In the end, the data and info files should be organized as follows
```
└─── single-infrastructure-side               
     ├───── image
     ├───── velodyne
     ├───── calib
     ├───── label
     ├───── data_info.json
     ├───── ImageSets
     └───── training
        ├───── image_2
        ├───── velodyne
        ├───── label_2
        └───── calib
```

### Training & Evaluation

* Implementation Framework. We directly implement the benchmark with [mmdetection3d-0.17.1](https://github.com/open-mmlab/mmdetection3d/tree/v0.17.1).
* Training & Evaluation details. 
  Before training the detectors, we should follow MMDetection3D to convert the "./data/DAIR-V2X/single-infrastructure-side" into specific training format.
  We train the MVX-Net for 40 epochs.
  We evaluate the models on the valid part of DAIR-V2X-I. 
  We set [0.5, 0.25, 0.25] as the IoU threshold for [Car, Pedestrain, Cyclist]. 
  Please refer [trainval_config.py](./trainval_config.py) for more evaluation details.
  We provide the evaluation results with 3D Average Precision.
  

## Citation

```latex
@article{yan2018second,
  title={Second: Sparsely embedded convolutional detection},
  author={Yan, Yan and Mao, Yuxing and Li, Bo},
  journal={Sensors},
  year={2018},
  publisher={Multidisciplinary Digital Publishing Institute}
}
```

dataset_type = "KittiDataset"
data_root = "../../../data/DAIR-V2X/single-infrastructure-side/"
class_names = ["Pedestrian", "Cyclist", "Car"]
point_cloud_range = [0, -40, -3, 70.4, 40, 1]
voxel_size = [0.05, 0.05, 0.1]
input_modality = dict(use_lidar=True, use_camera=False)

model = dict(
    type="VoxelNet",
    voxel_layer=dict(
        max_num_points=5, point_cloud_range=point_cloud_range, voxel_size=voxel_size, max_voxels=(16000, 40000)
    ),
    voxel_encoder=dict(type="HardSimpleVFE"),
    middle_encoder=dict(
        type="SparseEncoder", in_channels=4, sparse_shape=[41, 1600, 1408], order=("conv", "norm", "act")
    ),
    backbone=dict(type="SECOND", in_channels=256, layer_nums=[5, 5], layer_strides=[1, 2], out_channels=[128, 256]),
    neck=dict(type="SECONDFPN", in_channels=[128, 256], upsample_strides=[1, 2], out_channels=[256, 256]),
    bbox_head=dict(
        type="Anchor3DHead",
        num_classes=3,
        in_channels=512,
        feat_channels=512,
        use_direction_classifier=True,
        anchor_generator=dict(
            type="Anchor3DRangeGenerator",
            ranges=[
                [0, -40.0, -0.6, 70.4, 40.0, -0.6],
                [0, -40.0, -0.6, 70.4, 40.0, -0.6],
                [0, -40.0, -1.78, 70.4, 40.0, -1.78],
            ],
            sizes=[[0.6, 0.8, 1.73], [0.6, 1.76, 1.73], [1.6, 3.9, 1.56]],
            rotations=[0, 1.57],
            reshape_out=False,
        ),
        diff_rad_by_sin=True,
        bbox_coder=dict(type="DeltaXYZWLHRBBoxCoder"),
        loss_cls=dict(type="FocalLoss", use_sigmoid=True, gamma=2.0, alpha=0.25, loss_weight=1.0),
        loss_bbox=dict(type="SmoothL1Loss", beta=0.1111111111111111, loss_weight=2.0),
        loss_dir=dict(type="CrossEntropyLoss", use_sigmoid=False, loss_weight=0.2),
    ),
    train_cfg=dict(
        assigner=[
            dict(
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.35,
                neg_iou_thr=0.2,
                min_pos_iou=0.2,
                ignore_iof_thr=-1,
            ),
            dict(
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.35,
                neg_iou_thr=0.2,
                min_pos_iou=0.2,
                ignore_iof_thr=-1,
            ),
            dict(
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.6,
                neg_iou_thr=0.45,
                min_pos_iou=0.45,
                ignore_iof_thr=-1,
            ),
        ],
        allowed_border=0,
        pos_weight=-1,
        debug=False,
    ),
    test_cfg=dict(
        use_rotate_nms=True,
        nms_across_levels=False,
        nms_thr=0.01,
        score_thr=0.1,
        min_bbox_size=0,
        nms_pre=100,
        max_num=50,
    ),
)

db_sampler = dict(
    data_root=data_root,
    info_path=data_root + "/kitti_dbinfos_train.pkl",
    rate=1.0,
    prepare=dict(filter_by_difficulty=[-1], filter_by_min_points=dict(Car=5, Pedestrian=10, Cyclist=10)),
    classes=class_names,
    sample_groups=dict(Car=12, Pedestrian=6, Cyclist=6),
)
file_client_args = dict(backend="disk")
train_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4, file_client_args=dict(backend="disk")),
    dict(type="LoadAnnotations3D", with_bbox_3d=True, with_label_3d=True, file_client_args=dict(backend="disk")),
    dict(
        type="ObjectSample",
        db_sampler=dict(
            data_root=data_root,
            info_path=data_root + "/kitti_dbinfos_train.pkl",
            rate=1.0,
            prepare=dict(filter_by_difficulty=[-1], filter_by_min_points=dict(Car=5, Pedestrian=10, Cyclist=10)),
            classes=class_names,
            sample_groups=dict(Car=12, Pedestrian=6, Cyclist=6),
        ),
    ),
    dict(
        type="ObjectNoise",
        num_try=100,
        translation_std=[1.0, 1.0, 0.5],
        global_rot_range=[0.0, 0.0],
        rot_range=[-0.78539816, 0.78539816],
    ),
    dict(type="RandomFlip3D", flip_ratio_bev_horizontal=0.5),
    dict(type="GlobalRotScaleTrans", rot_range=[-0.78539816, 0.78539816], scale_ratio_range=[0.95, 1.05]),
    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
    dict(type="ObjectRangeFilter", point_cloud_range=point_cloud_range),
    dict(type="PointShuffle"),
    dict(type="DefaultFormatBundle3D", class_names=class_names),
    dict(type="Collect3D", keys=["points", "gt_bboxes_3d", "gt_labels_3d"]),
]
test_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4, file_client_args=dict(backend="disk")),
    dict(
        type="MultiScaleFlipAug3D",
        img_scale=(1333, 800),
        pts_scale_ratio=1,
        flip=False,
        transforms=[
            dict(type="GlobalRotScaleTrans", rot_range=[0, 0], scale_ratio_range=[1.0, 1.0], translation_std=[0, 0, 0]),
            dict(type="RandomFlip3D"),
            dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
            dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
            dict(type="Collect3D", keys=["points"]),
        ],
    ),
]
eval_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4, file_client_args=dict(backend="disk")),
    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
    dict(type="Collect3D", keys=["points"]),
]
data = dict(
    samples_per_gpu=6,
    workers_per_gpu=4,
    train=dict(
        type="RepeatDataset",
        times=2,
        dataset=dict(
            type="KittiDataset",
            data_root=data_root,
            ann_file=data_root + "/kitti_infos_train.pkl",
            split="training",
            pts_prefix="velodyne_reduced",
            pipeline=[
                dict(
                    type="LoadPointsFromFile",
                    coord_type="LIDAR",
                    load_dim=4,
                    use_dim=4,
                    file_client_args=dict(backend="disk"),
                ),
                dict(
                    type="LoadAnnotations3D",
                    with_bbox_3d=True,
                    with_label_3d=True,
                    file_client_args=dict(backend="disk"),
                ),
                dict(
                    type="ObjectSample",
                    db_sampler=dict(
                        data_root=data_root,
                        info_path=data_root + "/kitti_dbinfos_train.pkl",
                        rate=1.0,
                        prepare=dict(
                            filter_by_difficulty=[-1], filter_by_min_points=dict(Car=5, Pedestrian=10, Cyclist=10)
                        ),
                        classes=class_names,
                        sample_groups=dict(Car=12, Pedestrian=6, Cyclist=6),
                    ),
                ),
                dict(
                    type="ObjectNoise",
                    num_try=100,
                    translation_std=[1.0, 1.0, 0.5],
                    global_rot_range=[0.0, 0.0],
                    rot_range=[-0.78539816, 0.78539816],
                ),
                dict(type="RandomFlip3D", flip_ratio_bev_horizontal=0.5),
                dict(type="GlobalRotScaleTrans", rot_range=[-0.78539816, 0.78539816], scale_ratio_range=[0.95, 1.05]),
                dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                dict(type="ObjectRangeFilter", point_cloud_range=point_cloud_range),
                dict(type="PointShuffle"),
                dict(type="DefaultFormatBundle3D", class_names=class_names),
                dict(type="Collect3D", keys=["points", "gt_bboxes_3d", "gt_labels_3d"]),
            ],
            modality=dict(use_lidar=True, use_camera=False),
            classes=class_names,
            test_mode=False,
            box_type_3d="LiDAR",
        ),
    ),
    val=dict(
        type="KittiDataset",
        data_root=data_root,
        ann_file=data_root + "/kitti_infos_val.pkl",
        split="training",
        pts_prefix="velodyne_reduced",
        pipeline=[
            dict(
                type="LoadPointsFromFile",
                coord_type="LIDAR",
                load_dim=4,
                use_dim=4,
                file_client_args=dict(backend="disk"),
            ),
            dict(
                type="MultiScaleFlipAug3D",
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type="GlobalRotScaleTrans",
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0],
                    ),
                    dict(type="RandomFlip3D"),
                    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
                    dict(type="Collect3D", keys=["points"]),
                ],
            ),
        ],
        modality=dict(use_lidar=True, use_camera=False),
        classes=class_names,
        test_mode=True,
        box_type_3d="LiDAR",
    ),
    test=dict(
        type="KittiDataset",
        data_root=data_root,
        ann_file=data_root + "/kitti_infos_val.pkl",
        split="training",
        pts_prefix="velodyne_reduced",
        pipeline=[
            dict(
                type="LoadPointsFromFile",
                coord_type="LIDAR",
                load_dim=4,
                use_dim=4,
                file_client_args=dict(backend="disk"),
            ),
            dict(
                type="MultiScaleFlipAug3D",
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type="GlobalRotScaleTrans",
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0],
                    ),
                    dict(type="RandomFlip3D"),
                    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
                    dict(type="Collect3D", keys=["points"]),
                ],
            ),
        ],
        modality=dict(use_lidar=True, use_camera=False),
        classes=class_names,
        test_mode=True,
        box_type_3d="LiDAR",
    ),
)
evaluation = dict(
    interval=1,
    pipeline=[
        dict(
            type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4, file_client_args=dict(backend="disk")
        ),
        dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
        dict(type="Collect3D", keys=["points"]),
    ],
)
lr = 0.0018
optimizer = dict(type="AdamW", lr=0.0018, betas=(0.95, 0.99), weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=10, norm_type=2))
lr_config = dict(policy="cyclic", target_ratio=(10, 0.0001), cyclic_times=1, step_ratio_up=0.4)
momentum_config = dict(policy="cyclic", target_ratio=(0.8947368421052632, 1), cyclic_times=1, step_ratio_up=0.4)
runner = dict(type="EpochBasedRunner", max_epochs=40)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type="TextLoggerHook"), dict(type="TensorboardLoggerHook")])
dist_params = dict(backend="nccl")
log_level = "INFO"
work_dir = "./work_dirs/hv_second_secfpn_6x8_80e_kitti-3d-3class"
load_from = None
resume_from = None
workflow = [("train", 1)]
gpu_ids = range(0, 1)


# ImvoxelNet

## Introduction

We implement ImvoxelNet to perceive 2D objects from the infrastructure and ego-vehicle sequential images on the VIC-Sync-SPD datasets with MMDetection3D.
We use AB3DMOT to track the objects.

## Results and models

| Modality | Fusion      | Model       | Dataset      | AP 3D (Iou=0.5) | AP BEV (Iou=0.5) | MOTA   | MOTP   | AMOTA  | AMOTP  | IDs | AB(Byte) | Download                                                                                        |
|----------|-------------|-------------|--------------|-----------------|------------------|--------|--------|--------|--------|-----|----------|-------------------------------------------------------------------------------------------------|
| Image    | Veh Only    | ImvoxelNet  | VIC-Sync-SPD | 8.55            | 10.32            | 10.19 | 57.83 | 1.36 | 14.75 | 4   |          | [veh-model](https://drive.google.com/file/d/1eZWsG3VzMuC8swYfVveM3Zg3fcGR6IvN/view?usp=sharing) |
| Image    | Late Fusion | ImvoxelNet  | VIC-Sync-SPD | 17.31           | 22.53            | 21.81 | 56.67 | 6.22 | 25.24 | 47  | 3300     | [inf-model](https://drive.google.com/file/d/1XntybUfSXQMZgiZnT7INRYPLBuHXT-Lv/view?usp=sharing) |

---

## Detection and Tracking

### Data Preparation

**a. Download data and organise as follows**

Download SPD dataset [here](https://thudair.baai.ac.cn/coop-forecast) and organize as follows:

```
# For SPD Dataset located at ${SPD_DATASET_ROOT}
V2X-Seq-SPD/ 
    └──  infrastructure-side            # Infrastructure-side data
        ├── image		        
            ├── {id}.jpg
        ├── velodyne                    
            ├── {id}.pcd               
        ├── calib                     
            ├── camera_intrinsic        # Camera intrinsic parameter       
                ├── {id}.json         
            ├── virtuallidar_to_world   # Extrinsic parameter from virtual LiDAR coordinate system to world coordinate system
                ├── {id}.json          
            ├── virtuallidar_to_camera  # Extrinsic parameter from virtual LiDAR coordinate system to camera coordinate system
                ├── {id}.json          
        ├── label			
            ├── camera                  # Labeles in infrastructure virtual LiDAR coordinate system fitting objects in image with image camptured timestamp
                ├── {id}.json
            ├── virtuallidar            # Labeles in infrastructure virtual LiDAR coordinate system fitting objects in point cloud with point cloud captured timestamp
                ├── {id}.json
        └── data_info.json              # More detailed information for each infrastructure-side frame
    └── vehicle-side                    # Vehicle-side data
        ├── image		        
            ├── {id}.jpg
        ├── velodyne                 
            ├── {id}.pcd               
        ├── calib                     
            ├── camera_intrinsic        # Camera intrinsic parameter   
                ├── {id}.json
            ├── lidar_to_camera         # extrinsic parameter from LiDAR coordinate system to camera coordinate system 
                ├── {id}.json
            ├── lidar_to_novatel        # extrinsic parameter from LiDAR coordinate system to NovAtel coordinate system
                ├── {id}.json
            ├── novatel_to_world        # location in the world coordinate system
                ├── {id}.json
        ├── label			
            ├── camera                  # Labeles in vehicle LiDAR coordinate system fitting objects in image with image camptured timestamp
                ├── {id}.json
            ├── lidar                   # Labeles in vehicle LiDAR coordinate system fitting objects in point cloud with point cloud captured timestamp
                ├── {id}.json
        └── data_info.json              # More detailed information for each vehicle-side frame
    └── cooperative                     # Coopetative-view files
        ├── label                       # Vehicle-infrastructure cooperative (VIC) annotation files. Labeles in vehicle LiDAR coordinate system with the vehicle point cloud timestamp
            ├── {id}.json                
        └── data_info.json              # More detailed information for vehicle-infrastructure cooperative frame pair
    └── maps                            # HD Maps for each intersection
```

**b. Create a symlink to the dataset root**

```bash
cd ${DAIR-V2X_ROOT}
ln -s ${SPD_DATASET_ROOT} ./data/V2X-Seq-SPD
```

**c. Create Kitti-format data (Option for model training)**

Data creation should be under the gpu environment.

```bash
cd ${DAIR-V2X_ROOT}
python tools/dataset_converter/spd2kitti_detection/dair2kitti.py \
   --source-root ./data/V2X-Seq-SPD/infrastructure-side \
   --target-root ./data/V2X-Seq-SPD/infrastructure-side \
   --split-path ./data/split_datas/cooperative-split-data-spd.json \
   --label-type lidar \
   --sensor-view infrastructure \
   --no-classmerge
python tools/dataset_converter/spd2kitti_detection/dair2kitti.py \
   --source-root ./data/V2X-Seq-SPD/vehicle-side \
   --target-root ./data/V2X-Seq-SPD/vehicle-side \
   --split-path ./data/split_datas/cooperative-split-data-spd.json \
   --label-type lidar \
   --sensor-view vehicle \
   --no-classmerge
```

In the end, the data and info files should be organized as follows:

```
V2X-Seq-SPD/     
    └──── infrastructure-side              
       ├───── image
       ├───── velodyne
       ├───── calib
       ├───── label
       ├───── data_info.json
       ├───── ImageSets
       └────  training
          ├───── image_2
          ├───── velodyne
          ├───── label_2
          └───── calib
       └──── testing   
    ├───── vehicle-side                     
       ├───── image
       ├───── velodyne
       ├───── calib
       ├───── label
       ├───── data_info.json
       ├───── ImageSets
       └────  training
          ├───── image_2
          ├───── velodyne
          ├───── label_2
          └───── calib
       └──── testing
    └────  cooperative 
       ├───── label_world
       └───── data_info.json
```

**d. Convert V2X-Seq-SPD cooperative label to V2X-Seq-SPD-KITTI format (Option for tracking evaluation)**

```bash
cd ${DAIR-V2X_ROOT}
python tools/dataset_converter/spd2kitti_tracking/coop_label_dair2kitti.py \
   --source-root ./data/V2X-Seq-SPD \
   --target-root ./data/V2X-Seq-SPD-KITTI/cooperative \
   --split-path ./data/split_datas/cooperative-split-data-spd.json \
   --no-classmerge
```

In the end, the data and info files should be organized as follows:

```
V2X-Seq-SPD-KITTI/     
    └──── cooperative              
       ├──── training
          ├──── {sequence_id}    
             ├──── label_02
                ├───── {sequence_id}.txt
       ├──── validation
       └──── testing       
```

* VIC-Sync-SPD Dataset. VIC-Sync-SPD dataset is extracted from V2X-Seq-SPD, which is composed of 15,371 pairs of infrastructure and vehicle frames as well as their cooperative annotations as ground truth.
  We split V2X-Seq-SPD dataset to train/valid/test part as 5:2:3 respectively. 
  Please refer [split data](../../../data/split_datas/cooperative-split-data-spd.json) for the splitting file. 

### Detection Training

* Implementation Framework. We directly use MMDetection3D (v0.17.1) to train the infrastructure 3D detector and vehicle 3D detector.

* Infrastructure detector training details. 
  Before training the detectors, we should follow MMDetection3D to convert the "./data/V2X-Seq-SPD/infrastructure-side" into specific training format.
  Then we train the PointPillars with configure file [trainval_config_i.py](./trainval_config_i.py)
  
* Vehicle detector training details. 
  Before training the detectors, we should follow MMDetection3D to convert the "./data/V2X-Seq-SPD/vehicle-side" into specific training format.
  Then we train the PointPillars with configure file [trainval_config_v.py](./trainval_config_v.py)
  
### Evaluation

**a. Detection Checkpoint Preparation**

Download checkpoints of ImvoxelNet trained on V2X-Seq-SPD datasets with mmdetection3d from Google drive: [inf-model](https://drive.google.com/file/d/1XntybUfSXQMZgiZnT7INRYPLBuHXT-Lv/view?usp=sharing) & [veh-model](https://drive.google.com/file/d/1eZWsG3VzMuC8swYfVveM3Zg3fcGR6IvN/view?usp=sharing). 

Put the checkpoints under [this folder](./imvoxelnet). 
The file structure should be like:

```
DAIR-V2X/configs/vic3d-spd/late-fusion-image/imvoxelnet/
    ├──trainval_config_i.py
    ├──vic3d_latefusion_imvoxelnet_i.pth
    ├──trainval_config_v.py
    ├──vic3d_latefusion_imvoxelnet_v.pth
```

**b. Run the following commands for evaluation**

```bash
# bash scripts/eval_camera_late_fusion_spd.sh [CUDA_VISIBLE_DEVICES] [DELAY_K] [EXTEND_RANGE_START] [EXTEND_RANGE_END] [TIME_COMPENSATION]
cd ${DAIR-V2X_ROOT}/v2x
bash scripts/eval_camera_late_fusion_spd.sh 0 0 0 100 --no-comp
```

The parameters are:

- **CUDA_VISIBLE_DEVICES**: GPU IDs
- **DELAY_K**: the number of previous frames for `vic-async-spd` dataset. `vic-async-spd-0` is equivalent to `vic-sync-spd` dataset.
- **EXTEND_RANGE_START**: x_{min} of the interested area of vehicle-egocentric surroundings at Vehicle LiDAR 
- **EXTEND_RANGE_END**: x_{max} of the interested area of vehicle-egocentric surroundings at Vehicle LiDAR 
- **TIME_COMPENSATION**: for `late_fusion`, you can remove the time compensation module by an addtional argument **--no-comp**

If everything is prepared properly, the output results should be:

```
car 3d IoU threshold 0.50, Average Precision = 17.31
car bev IoU threshold 0.50, Average Precision = 22.53
AMOTA = 0.0622
AMOTP = 0.2524

```
Tracking evaluation results directory: ${DAIR-V2X_ROOT}/output/spd_late_camera/tracking_evaluation_results


# ImvoxelNet

## Introduction

We implement ImvoxelNet and provide the results and checkpoints on VIC-Sync-SPD datasets with MMDetection3D.

## Results and models

| Modality | Fusion      | Model       | Dataset      | AP 3D (Iou=0.5) | AP BEV (Iou=0.5) | AB(Byte) | Download                                                                                        |
|----------|-------------|-------------|--------------|-----------------|------------------|----------|-------------------------------------------------------------------------------------------------|
| Image    | Veh Only    | ImvoxelNet  | VIC-Sync-SPD | 8.55            | 10.32            |          | [veh-model](https://drive.google.com/file/d/1eZWsG3VzMuC8swYfVveM3Zg3fcGR6IvN/view?usp=sharing) |
| Image    | Late Fusion | ImvoxelNet  | VIC-Sync-SPD | 17.31           | 22.53            | 3300     | [inf-model](https://drive.google.com/file/d/1XntybUfSXQMZgiZnT7INRYPLBuHXT-Lv/view?usp=sharing) |

---

## Detection

### Data Preparation

**a. Download data and organise as follows**

Download SPD dataset [here](https://thudair.baai.ac.cn/coop-forecast) and organize as follows:

```
# For SPD Dataset located at ${SPD_DATASET_ROOT}
V2X-Seq-SPD/ 
    └──  infrastructure-side            # Infrastructure-side data
        ├── image		        
            ├── {id}.jpg
        ├── velodyne                    
            ├── {id}.pcd               
        ├── calib                     
            ├── camera_intrinsic        # Camera intrinsic parameter       
                ├── {id}.json         
            ├── virtuallidar_to_world   # Extrinsic parameter from virtual LiDAR coordinate system to world coordinate system
                ├── {id}.json          
            ├── virtuallidar_to_camera  # Extrinsic parameter from virtual LiDAR coordinate system to camera coordinate system
                ├── {id}.json          
        ├── label			
            ├── camera                  # Labeles in infrastructure virtual LiDAR coordinate system fitting objects in image with image camptured timestamp
                ├── {id}.json
            ├── virtuallidar            # Labeles in infrastructure virtual LiDAR coordinate system fitting objects in point cloud with point cloud captured timestamp
                ├── {id}.json
        └── data_info.json              # More detailed information for each infrastructure-side frame
    └── vehicle-side                    # Vehicle-side data
        ├── image		        
            ├── {id}.jpg
        ├── velodyne                 
            ├── {id}.pcd               
        ├── calib                     
            ├── camera_intrinsic        # Camera intrinsic parameter   
                ├── {id}.json
            ├── lidar_to_camera         # extrinsic parameter from LiDAR coordinate system to camera coordinate system 
                ├── {id}.json
            ├── lidar_to_novatel        # extrinsic parameter from LiDAR coordinate system to NovAtel coordinate system
                ├── {id}.json
            ├── novatel_to_world        # location in the world coordinate system
                ├── {id}.json
        ├── label			
            ├── camera                  # Labeles in vehicle LiDAR coordinate system fitting objects in image with image camptured timestamp
                ├── {id}.json
            ├── lidar                   # Labeles in vehicle LiDAR coordinate system fitting objects in point cloud with point cloud captured timestamp
                ├── {id}.json
        └── data_info.json              # More detailed information for each vehicle-side frame
    └── cooperative                     # Coopetative-view files
        ├── label                       # Vehicle-infrastructure cooperative (VIC) annotation files. Labeles in vehicle LiDAR coordinate system with the vehicle point cloud timestamp
            ├── {id}.json                
        └── data_info.json              # More detailed information for vehicle-infrastructure cooperative frame pair
    └── maps                            # HD Maps for each intersection
```

**b. Create a symlink to the dataset root**

```bash
cd ${DAIR-V2X_ROOT}
ln -s ${SPD_DATASET_ROOT} ./data/V2X-Seq-SPD
```

**c. Create Kitti-format data (Option for model training)**

Data creation should be under the gpu environment.

```bash
cd ${DAIR-V2X_ROOT}
python tools/dataset_converter/spd2kitti_detection/dair2kitti.py \
   --source-root ./data/V2X-Seq-SPD/infrastructure-side \
   --target-root ./data/V2X-Seq-SPD/infrastructure-side \
   --split-path ./data/split_datas/cooperative-split-data-spd.json \
   --label-type lidar \
   --sensor-view infrastructure \
   --no-classmerge
python tools/dataset_converter/spd2kitti_detection/dair2kitti.py \
   --source-root ./data/V2X-Seq-SPD/vehicle-side \
   --target-root ./data/V2X-Seq-SPD/vehicle-side \
   --split-path ./data/split_datas/cooperative-split-data-spd.json \
   --label-type lidar \
   --sensor-view vehicle \
   --no-classmerge
```

In the end, the data and info files should be organized as follows:

```
V2X-Seq-SPD/     
    └──── infrastructure-side              
       ├───── image
       ├───── velodyne
       ├───── calib
       ├───── label
       ├───── data_info.json
       ├───── ImageSets
       └────  training
          ├───── image_2
          ├───── velodyne
          ├───── label_2
          └───── calib
       └──── testing   
    ├───── vehicle-side                     
       ├───── image
       ├───── velodyne
       ├───── calib
       ├───── label
       ├───── data_info.json
       ├───── ImageSets
       └────  training
          ├───── image_2
          ├───── velodyne
          ├───── label_2
          └───── calib
       └──── testing
    └────  cooperative 
       ├───── label_world
       └───── data_info.json
```

* VIC-Sync-SPD Dataset. VIC-Sync-SPD dataset is extracted from V2X-Seq-SPD, which is composed of 15,371 pairs of infrastructure and vehicle frames as well as their cooperative annotations as ground truth.
  We split V2X-Seq-SPD dataset to train/valid/test part as 5:2:3 respectively. 
  Please refer [split data](../../../data/split_datas/cooperative-split-data-spd.json) for the splitting file. 

### Training & Evaluation

#### Training

* Implementation Framework. We directly use MMDetection3D (v0.17.1) to train the infrastructure 3D detector and vehicle 3D detector.

* Infrastructure detector training details. 
  Before training the detectors, we should follow MMDetection3D to convert the "./data/V2X-Seq-SPD/infrastructure-side" into specific training format.
  Then we train the PointPillars with configure file [trainval_config_i.py](./trainval_config_i.py)
  
* Vehicle detector training details. 
  Before training the detectors, we should follow MMDetection3D to convert the "./data/V2X-Seq-SPD/vehicle-side" into specific training format.
  Then we train the PointPillars with configure file [trainval_config_v.py](./trainval_config_v.py)
  
#### Evaluation

**a. Detection Checkpoint Preparation**

Download checkpoints of ImvoxelNet trained on V2X-Seq-SPD datasets with mmdetection3d from Google drive: [inf-model](https://drive.google.com/file/d/1XntybUfSXQMZgiZnT7INRYPLBuHXT-Lv/view?usp=sharing) & [veh-model](https://drive.google.com/file/d/1eZWsG3VzMuC8swYfVveM3Zg3fcGR6IvN/view?usp=sharing). 

Put the checkpoints under [this folder](./imvoxelnet). 
The file structure should be like:

```
DAIR-V2X/configs/vic3d-spd/late-fusion-image/imvoxelnet/
    ├──trainval_config_i.py
    ├──vic3d_latefusion_imvoxelnet_i.pth
    ├──trainval_config_v.py
    ├──vic3d_latefusion_imvoxelnet_v.pth
```

**b. Run the following commands for evaluation**

```bash
cd ${DAIR-V2X_ROOT}/v2x
bash scripts/eval_camera_late_fusion_spd.sh 0 0 0 100 --no-comp true
```

The parameters are:

- **CUDA_VISIBLE_DEVICES**: GPU IDs
- **DELAY_K**: the number of previous frames for `vic-async-spd` dataset. `vic-async-spd-0` is equivalent to `vic-sync-spd` dataset
- **EXTEND_RANGE_START**: x_{min} of the interested area of vehicle-egocentric surroundings at Vehicle LiDAR 
- **EXTEND_RANGE_END**: x_{max} of the interested area of vehicle-egocentric surroundings at Vehicle LiDAR 
- **TIME_COMPENSATION**: for `late_fusion`, you can remove the time compensation module by an addtional argument **--no-comp**
- **ONLY_DTC**: only eva detection results


If everything is prepared properly, the output results should be:

```
car 3d IoU threshold 0.50, Average Precision = 17.31
car bev IoU threshold 0.50, Average Precision = 22.53

```

dataset_type = 'KittiDataset'
data_root = '../../../../data/V2X-Seq-SPD/vehicle-side/'
class_names = ['Car']
input_modality = dict(use_lidar=False, use_camera=True)
point_cloud_range = [0, -39.68, -3, 92.16, 39.68, 1]
voxel_size = [0.32, 0.32, 0.33]
length = int((point_cloud_range[3] - point_cloud_range[0]) / voxel_size[0])
width = int((point_cloud_range[4] - point_cloud_range[1]) / voxel_size[1])
height = int((point_cloud_range[5] - point_cloud_range[2]) / voxel_size[2])
output_shape = [width, length, height]
img_norm_cfg = dict(
            mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
img_scale = (960, 540)
img_resize_scale = [(912, 513), (1008, 567)]

work_dir = './work_dirs/vic3d_latefusion_veh_imvoxelnet'

model = dict(
    type='ImVoxelNet',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=False),
        norm_eval=True,
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50'),
        style='pytorch'),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=64,
        num_outs=4),
    neck_3d=dict(type='OutdoorImVoxelNeck', in_channels=64, out_channels=256),
    bbox_head=dict(
        type='Anchor3DHead',
        num_classes=1,
        in_channels=256,
        feat_channels=256,
        use_direction_classifier=True,
        anchor_generator=dict(
            type='AlignedAnchor3DRangeGenerator',
            ranges=[[0, -39.68, -1.78, 92.16, 39.68, -1.78]],
            sizes=[[3.9, 1.6, 1.56]],
            rotations=[0, 1.57],
            reshape_out=True),
        diff_rad_by_sin=True,
        bbox_coder=dict(type='DeltaXYZWLHRBBoxCoder'),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=1.0),
        loss_bbox=dict(type='SmoothL1Loss', beta=1.0 / 9.0, loss_weight=2.0),
        loss_dir=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.2)),
    n_voxels=output_shape,
    anchor_generator=dict(
        type='AlignedAnchor3DRangeGenerator',
        ranges=[[0, -39.68, -3.08, 92.16, 39.68, 0.76]],
        rotations=[.0]),
    train_cfg=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            iou_calculator=dict(type='BboxOverlapsNearest3D'),
            pos_iou_thr=0.6,
            neg_iou_thr=0.45,
            min_pos_iou=0.45,
            ignore_iof_thr=-1),
        allowed_border=0,
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        use_rotate_nms=True,
        nms_across_levels=False,
        nms_thr=0.01,
        score_thr=0.1,
        min_bbox_size=0,
        nms_pre=100,
        max_num=50))

train_pipeline = [
    dict(type='LoadAnnotations3D'),
    dict(type='LoadImageFromFile'),
    dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),
    dict(
        type='Resize',
        img_scale=img_resize_scale,
        keep_ratio=True,
        multiscale_mode='range'),
    dict(type='Normalize', **img_norm_cfg),
    dict(type='Pad', size_divisor=32),
    dict(type='ObjectRangeFilter', point_cloud_range=point_cloud_range),
    dict(type='DefaultFormatBundle3D', class_names=class_names),
    dict(type='Collect3D', keys=['img', 'gt_bboxes_3d', 'gt_labels_3d'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', img_scale=img_scale, keep_ratio=True),
    dict(type='Normalize', **img_norm_cfg),
    dict(type='Pad', size_divisor=32),
    dict(
        type='DefaultFormatBundle3D',
        class_names=class_names,
        with_label=False),
    dict(type='Collect3D', keys=['img'])
]

data = dict(
    samples_per_gpu=4,
    workers_per_gpu=4,
    train=dict(
        type='RepeatDataset',
        times=3,
        dataset=dict(
            type=dataset_type,
            data_root=data_root,
            ann_file=data_root + 'kitti_infos_train.pkl',
            split='training',
            pts_prefix='velodyne_reduced',
            pipeline=train_pipeline,
            modality=input_modality,
            classes=class_names,
            test_mode=False)),
    val=dict(
        type=dataset_type,
        data_root=data_root,
        ann_file=data_root + 'kitti_infos_val.pkl',
        split='training',
        pts_prefix='velodyne_reduced',
        pipeline=test_pipeline,
        modality=input_modality,
        classes=class_names,
        test_mode=True),
    test=dict(
        type=dataset_type,
        data_root=data_root,
        ann_file=data_root + 'kitti_infos_val.pkl',
        split='training',
        pts_prefix='velodyne_reduced',
        pipeline=test_pipeline,
        modality=input_modality,
        classes=class_names,
        box_type_3d="Lidar",
        test_mode=True))

optimizer = dict(
    type='AdamW',
    lr=0.0001,
    weight_decay=0.0001,
    paramwise_cfg=dict(
        custom_keys={'backbone': dict(lr_mult=0.1, decay_mult=1.0)}))
optimizer_config = dict(grad_clip=dict(max_norm=35., norm_type=2))
lr_config = dict(policy='step', step=[8, 11])
total_epochs = 12

checkpoint_config = dict(interval=1, max_keep_ckpts=1)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
evaluation = dict(interval=1)
dist_params = dict(backend='nccl')
find_unused_parameters = True  # only 1 of 4 FPN outputs is used
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]



dataset_type = 'KittiDataset'
data_root = '../../../../data/V2X-Seq-SPD/infrastructure-side/'
class_names = ['Car']
input_modality = dict(use_lidar=False, use_camera=True)
point_cloud_range = [0, -39.68, -3, 92.16, 39.68, 1]
voxel_size = [0.32, 0.32, 0.33]
length = int((point_cloud_range[3] - point_cloud_range[0]) / voxel_size[0])
width = int((point_cloud_range[4] - point_cloud_range[1]) / voxel_size[1])
height = int((point_cloud_range[5] - point_cloud_range[2]) / voxel_size[2])
output_shape = [width, length, height]
img_norm_cfg = dict(
            mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
img_scale = (960, 540)
img_resize_scale = [(912, 513), (1008, 567)]

work_dir = './work_dirs/vic3d_latefusion_inf_imvoxelnet'

model = dict(
    type='ImVoxelNet',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=False),
        norm_eval=True,
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50'),
        style='pytorch'),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=64,
        num_outs=4),
    neck_3d=dict(type='OutdoorImVoxelNeck', in_channels=64, out_channels=256),
    bbox_head=dict(
        type='Anchor3DHead',
        num_classes=1,
        in_channels=256,
        feat_channels=256,
        use_direction_classifier=True,
        anchor_generator=dict(
            type='AlignedAnchor3DRangeGenerator',
            ranges=[[0, -39.68, -1.78, 92.16, 39.68, -1.78]],
            sizes=[[3.9, 1.6, 1.56]],
            rotations=[0, 1.57],
            reshape_out=True),
        diff_rad_by_sin=True,
        bbox_coder=dict(type='DeltaXYZWLHRBBoxCoder'),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=1.0),
        loss_bbox=dict(type='SmoothL1Loss', beta=1.0 / 9.0, loss_weight=2.0),
        loss_dir=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.2)),
    n_voxels=output_shape,
    anchor_generator=dict(
        type='AlignedAnchor3DRangeGenerator',
        ranges=[[0, -39.68, -3.08, 92.16, 39.68, 0.76]],
        rotations=[.0]),
    train_cfg=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            iou_calculator=dict(type='BboxOverlapsNearest3D'),
            pos_iou_thr=0.6,
            neg_iou_thr=0.45,
            min_pos_iou=0.45,
            ignore_iof_thr=-1),
        allowed_border=0,
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        use_rotate_nms=True,
        nms_across_levels=False,
        nms_thr=0.01,
        score_thr=0.1,
        min_bbox_size=0,
        nms_pre=100,
        max_num=50))

train_pipeline = [
    dict(type='LoadAnnotations3D'),
    dict(type='LoadImageFromFile'),
    dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),
    dict(
        type='Resize',
        img_scale=img_resize_scale,
        keep_ratio=True,
        multiscale_mode='range'),
    dict(type='Normalize', **img_norm_cfg),
    dict(type='Pad', size_divisor=32),
    dict(type='ObjectRangeFilter', point_cloud_range=point_cloud_range),
    dict(type='DefaultFormatBundle3D', class_names=class_names),
    dict(type='Collect3D', keys=['img', 'gt_bboxes_3d', 'gt_labels_3d'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', img_scale=img_scale, keep_ratio=True),
    dict(type='Normalize', **img_norm_cfg),
    dict(type='Pad', size_divisor=32),
    dict(
        type='DefaultFormatBundle3D',
        class_names=class_names,
        with_label=False),
    dict(type='Collect3D', keys=['img'])
]

data = dict(
    samples_per_gpu=1,
    workers_per_gpu=1,
    train=dict(
        type='RepeatDataset',
        times=1,
        dataset=dict(
            type=dataset_type,
            data_root=data_root,
            ann_file=data_root + 'kitti_infos_train.pkl',
            split='training',
            pts_prefix='velodyne_reduced',
            pipeline=train_pipeline,
            modality=input_modality,
            classes=class_names,
            test_mode=False)),
    val=dict(
        type=dataset_type,
        data_root=data_root,
        ann_file=data_root + 'kitti_infos_val.pkl',
        split='training',
        pts_prefix='velodyne_reduced',
        pipeline=test_pipeline,
        modality=input_modality,
        classes=class_names,
        test_mode=True),
    test=dict(
        type=dataset_type,
        data_root=data_root,
        ann_file=data_root + 'kitti_infos_val.pkl',
        split='training',
        pts_prefix='velodyne_reduced',
        pipeline=test_pipeline,
        modality=input_modality,
        classes=class_names,
        box_type_3d="Lidar",
        test_mode=True))

optimizer = dict(
    type='AdamW',
    lr=0.0001,
    weight_decay=0.0001,
    paramwise_cfg=dict(
        custom_keys={'backbone': dict(lr_mult=0.1, decay_mult=1.0)}))
optimizer_config = dict(grad_clip=dict(max_norm=35., norm_type=2))
lr_config = dict(policy='step', step=[8, 11])
total_epochs = 12

checkpoint_config = dict(interval=1, max_keep_ckpts=1)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
evaluation = dict(interval=1)
dist_params = dict(backend='nccl')
find_unused_parameters = True  # only 1 of 4 FPN outputs is used
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]

# PointPillars: Fast Encoders for Object Detection from Point Clouds
> [PointPillars: Fast Encoders for Object Detection from Point Clouds](https://arxiv.org/abs/1812.05784)

## Introduction
We implement PointPillars and provide the results and checkpoints on DAIR-V2X-V datasets with MMDetection3D.

## Results and models
|  Modality  |     Model    |  Car  |        |       | Pedestrain |        |       | Cyclist |        |       | Download |
|:----------:|:------------:|:-----:|:------:|:-----:|:----------:|:------:|:-----:|:-------:|:------:|:-----:|:--------:|
|            |              |  Easy | Middle |  Hard |    Easy    | Middle |  Hard |   Easy  | Middle |  Hard |          |
| Pointcloud | PointPillars | 61.76 | 49.02  | 43.45 | 33.40      | 24.68  | 22.39 | 38.24   | 33.80  | 32.35 |  [model](https://drive.google.com/file/d/1T5Aw5ComvaJg1HBSS4QENdiGUWbX41m4/view?usp=sharing) |

## Training & Evaluation

### Data Preparation
#### Download data and organise as follows

```
# For DAIR-V2X-V Dataset located at ${DAIR-V2X-V_DATASET_ROOT}
└─── single-vehicle-side
     ├───── image
     ├───── velodyne
     ├───── calib
     ├───── label
     └───── data_info.json        
```

#### Create a symlink to the dataset root

```
cd ${dair-v2x_root}/dair-v2x
mkdir ./data/DAIR-V2X
ln -s ${DAIR-V2X-V_DATASET_ROOT}/single-vehicle-side ./data/DAIR-V2X
```

#### Create Kitti-format data (Option for model training)

Data creation should be under the gpu environment.
```commandline
# Kitti Format
cd ${dair-v2x_root}/dair-v2x
python tools/dataset_converter/dair2kitti.py --source-root ./data/DAIR-V2X/single-vehicle-side \
    --target-root ./data/DAIR-V2X/single-vehicle-side \
    --split-path ./data/split_datas/single-vehicle-split-data.json \
    --label-type lidar --sensor-view vehicle
```

In the end, the data and info files should be organized as follows
```
└─── single-vehicle-side             
     ├───── image
     ├───── velodyne
     ├───── calib
     ├───── label
     ├───── data_info.json
     ├───── ImageSets
     └───── training
        ├───── image_2
        ├───── velodyne
        ├───── label_2
        └───── calib
```

### Training & Evaluation

* Implementation Framework. We directly implement the benchmark with [mmdetection3d-0.17.1](https://github.com/open-mmlab/mmdetection3d/tree/v0.17.1).
* Training & Evaluation details. 
  Before training the detectors, we should follow MMDetection3D to convert the "./data/DAIR-V2X/single-vehicle-side" into specific training format.
  We train the MVX-Net for 40 epochs.
  We evaluate the models on the valid part of DAIR-V2X-V. 
  We set [0.5, 0.25, 0.25] as the IoU threshold for [Car, Pedestrain, Cyclist]. 
  Please refer [trainval_config.py](./trainval_config.py) for more evaluation details.
  We provide the evaluation results with 3D Average Precision.

## Citation

```latex
@inproceedings{lang2019pointpillars,
  title={Pointpillars: Fast encoders for object detection from point clouds},
  author={Lang, Alex H and Vora, Sourabh and Caesar, Holger and Zhou, Lubing and Yang, Jiong and Beijbom, Oscar},
  booktitle={Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition},
  pages={12697--12705},
  year={2019}
}
```

dataset_type = "KittiDataset"
data_root = "../../../data/DAIR-V2X/single-vehicle-side/"
class_names = ["Pedestrian", "Cyclist", "Car"]
point_cloud_range = [0, -39.68, -3, 69.12, 39.68, 1]
voxel_size = [0.16, 0.16, 4]
input_modality = dict(use_lidar=True, use_camera=False)

model = dict(
    type="VoxelNet",
    voxel_layer=dict(
        max_num_points=32, point_cloud_range=point_cloud_range, voxel_size=voxel_size, max_voxels=(16000, 40000)
    ),
    voxel_encoder=dict(
        type="PillarFeatureNet",
        in_channels=4,
        feat_channels=[64],
        with_distance=False,
        voxel_size=voxel_size,
        point_cloud_range=point_cloud_range,
    ),
    middle_encoder=dict(type="PointPillarsScatter", in_channels=64, output_shape=[496, 432]),
    backbone=dict(
        type="SECOND", in_channels=64, layer_nums=[3, 5, 5], layer_strides=[2, 2, 2], out_channels=[64, 128, 256]
    ),
    neck=dict(type="SECONDFPN", in_channels=[64, 128, 256], upsample_strides=[1, 2, 4], out_channels=[128, 128, 128]),
    bbox_head=dict(
        type="Anchor3DHead",
        num_classes=3,
        in_channels=384,
        feat_channels=384,
        use_direction_classifier=True,
        anchor_generator=dict(
            type="Anchor3DRangeGenerator",
            ranges=[
                [0, -39.68, -0.6, 70.4, 39.68, -0.6],
                [0, -39.68, -0.6, 70.4, 39.68, -0.6],
                [0, -39.68, -1.78, 70.4, 39.68, -1.78],
            ],
            sizes=[[0.6, 0.8, 1.73], [0.6, 1.76, 1.73], [1.6, 3.9, 1.56]],
            rotations=[0, 1.57],
            reshape_out=False,
        ),
        diff_rad_by_sin=True,
        bbox_coder=dict(type="DeltaXYZWLHRBBoxCoder"),
        loss_cls=dict(type="FocalLoss", use_sigmoid=True, gamma=2.0, alpha=0.25, loss_weight=1.0),
        loss_bbox=dict(type="SmoothL1Loss", beta=0.1111111111111111, loss_weight=2.0),
        loss_dir=dict(type="CrossEntropyLoss", use_sigmoid=False, loss_weight=0.2),
    ),
    train_cfg=dict(
        assigner=[
            dict(
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.5,
                neg_iou_thr=0.35,
                min_pos_iou=0.35,
                ignore_iof_thr=-1,
            ),
            dict(
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.5,
                neg_iou_thr=0.35,
                min_pos_iou=0.35,
                ignore_iof_thr=-1,
            ),
            dict(
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.6,
                neg_iou_thr=0.45,
                min_pos_iou=0.45,
                ignore_iof_thr=-1,
            ),
        ],
        allowed_border=0,
        pos_weight=-1,
        debug=False,
    ),
    test_cfg=dict(
        use_rotate_nms=True,
        nms_across_levels=False,
        nms_thr=0.01,
        score_thr=0.1,
        min_bbox_size=0,
        nms_pre=100,
        max_num=50,
    ),
)

db_sampler = dict(
    data_root=data_root,
    info_path=data_root + "/kitti_dbinfos_train.pkl",
    rate=1.0,
    prepare=dict(filter_by_difficulty=[-1], filter_by_min_points=dict(Car=5, Pedestrian=10, Cyclist=10)),
    classes=class_names,
    sample_groups=dict(Car=15, Pedestrian=10, Cyclist=10),
)
file_client_args = dict(backend="disk")
train_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
    dict(type="LoadAnnotations3D", with_bbox_3d=True, with_label_3d=True),
    dict(
        type="ObjectSample",
        db_sampler=dict(
            data_root=data_root,
            info_path=data_root + "/kitti_dbinfos_train.pkl",
            rate=1.0,
            prepare=dict(filter_by_difficulty=[-1], filter_by_min_points=dict(Car=5, Pedestrian=10, Cyclist=10)),
            classes=class_names,
            sample_groups=dict(Car=15, Pedestrian=10, Cyclist=10),
        ),
    ),
    dict(
        type="ObjectNoise",
        num_try=100,
        translation_std=[0.25, 0.25, 0.25],
        global_rot_range=[0.0, 0.0],
        rot_range=[-0.15707963267, 0.15707963267],
    ),
    dict(type="RandomFlip3D", flip_ratio_bev_horizontal=0.5),
    dict(type="GlobalRotScaleTrans", rot_range=[-0.78539816, 0.78539816], scale_ratio_range=[0.95, 1.05]),
    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
    dict(type="ObjectRangeFilter", point_cloud_range=point_cloud_range),
    dict(type="PointShuffle"),
    dict(type="DefaultFormatBundle3D", class_names=class_names),
    dict(type="Collect3D", keys=["points", "gt_bboxes_3d", "gt_labels_3d"]),
]
test_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
    dict(
        type="MultiScaleFlipAug3D",
        img_scale=(1333, 800),
        pts_scale_ratio=1,
        flip=False,
        transforms=[
            dict(type="GlobalRotScaleTrans", rot_range=[0, 0], scale_ratio_range=[1.0, 1.0], translation_std=[0, 0, 0]),
            dict(type="RandomFlip3D"),
            dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
            dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
            dict(type="Collect3D", keys=["points"]),
        ],
    ),
]
eval_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4, file_client_args=dict(backend="disk")),
    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
    dict(type="Collect3D", keys=["points"]),
]
data = dict(
    samples_per_gpu=6,
    workers_per_gpu=4,
    train=dict(
        type="RepeatDataset",
        times=2,
        dataset=dict(
            type="KittiDataset",
            data_root=data_root,
            ann_file=data_root + "/kitti_infos_train.pkl",
            split="training",
            pts_prefix="velodyne_reduced",
            pipeline=[
                dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
                dict(type="LoadAnnotations3D", with_bbox_3d=True, with_label_3d=True),
                dict(
                    type="ObjectSample",
                    db_sampler=dict(
                        data_root=data_root,
                        info_path=data_root + "/kitti_dbinfos_train.pkl",
                        rate=1.0,
                        prepare=dict(
                            filter_by_difficulty=[-1], filter_by_min_points=dict(Car=5, Pedestrian=10, Cyclist=10)
                        ),
                        classes=class_names,
                        sample_groups=dict(Car=15, Pedestrian=10, Cyclist=10),
                    ),
                ),
                dict(
                    type="ObjectNoise",
                    num_try=100,
                    translation_std=[0.25, 0.25, 0.25],
                    global_rot_range=[0.0, 0.0],
                    rot_range=[-0.15707963267, 0.15707963267],
                ),
                dict(type="RandomFlip3D", flip_ratio_bev_horizontal=0.5),
                dict(type="GlobalRotScaleTrans", rot_range=[-0.78539816, 0.78539816], scale_ratio_range=[0.95, 1.05]),
                dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                dict(type="ObjectRangeFilter", point_cloud_range=point_cloud_range),
                dict(type="PointShuffle"),
                dict(type="DefaultFormatBundle3D", class_names=class_names),
                dict(type="Collect3D", keys=["points", "gt_bboxes_3d", "gt_labels_3d"]),
            ],
            modality=dict(use_lidar=True, use_camera=False),
            classes=class_names,
            test_mode=False,
            box_type_3d="LiDAR",
        ),
    ),
    val=dict(
        type="KittiDataset",
        data_root=data_root,
        ann_file=data_root + "/kitti_infos_val.pkl",
        split="training",
        pts_prefix="velodyne_reduced",
        pipeline=[
            dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
            dict(
                type="MultiScaleFlipAug3D",
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type="GlobalRotScaleTrans",
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0],
                    ),
                    dict(type="RandomFlip3D"),
                    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
                    dict(type="Collect3D", keys=["points"]),
                ],
            ),
        ],
        modality=dict(use_lidar=True, use_camera=False),
        classes=class_names,
        test_mode=True,
        box_type_3d="LiDAR",
    ),
    test=dict(
        type="KittiDataset",
        data_root=data_root,
        ann_file=data_root + "/kitti_infos_val.pkl",
        split="training",
        pts_prefix="velodyne_reduced",
        pipeline=[
            dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
            dict(
                type="MultiScaleFlipAug3D",
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type="GlobalRotScaleTrans",
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0],
                    ),
                    dict(type="RandomFlip3D"),
                    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
                    dict(type="Collect3D", keys=["points"]),
                ],
            ),
        ],
        modality=dict(use_lidar=True, use_camera=False),
        classes=class_names,
        test_mode=True,
        box_type_3d="LiDAR",
    ),
)
evaluation = dict(
    interval=2,
    pipeline=[
        dict(
            type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4, file_client_args=dict(backend="disk")
        ),
        dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
        dict(type="Collect3D", keys=["points"]),
    ],
)

lr = 0.001
optimizer = dict(type="AdamW", lr=0.001, betas=(0.95, 0.99), weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(policy="cyclic", target_ratio=(10, 0.0001), cyclic_times=1, step_ratio_up=0.4)
momentum_config = dict(policy="cyclic", target_ratio=(0.8947368421052632, 1), cyclic_times=1, step_ratio_up=0.4)
runner = dict(type="EpochBasedRunner", max_epochs=80)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type="TextLoggerHook"), dict(type="TensorboardLoggerHook")])
dist_params = dict(backend="nccl")
log_level = "INFO"
work_dir = "./work_dirs"
load_from = None
resume_from = None
workflow = [("train", 1)]
gpu_ids = range(0, 1)


# MVX-Net: Multimodal VoxelNet for 3D Object Detection

> [MVX-Net: Multimodal VoxelNet for 3D Object Detection](https://arxiv.org/abs/1904.01649)

## Introduction
We implement MVX-Net and provide the results and checkpoints on DAIR-V2X-V datasets with MMDetection3D.

## Results and models
|  Modality  |     Model    |  Car  |        |       | Pedestrain |        |       | Cyclist |        |       | Download |
|:----------:|:------------:|:-----:|:------:|:-----:|:----------:|:------:|:-----:|:-------:|:------:|:-----:|:--------:|
|            |              |  Easy | Middle |  Hard |    Easy    | Middle |  Hard |   Easy  | Middle |  Hard |          |
| Image+Pointcloud | MVXNet | 69.86 | 60.74  | 59.31 | 47.73      | 43.37  | 42.49 | 45.68   | 41.84  | 40.55 |  [model](https://drive.google.com/file/d/1Ey5QcyRXMb5RvTAHrQh0FeVOjMqfY1-B/view?usp=sharing) |

## Training & Evaluation

### Data Preparation
#### Download data and organise as follows

```
# For DAIR-V2X-V Dataset located at ${DAIR-V2X-V_DATASET_ROOT}
└─── single-vehicle-side
     ├───── image
     ├───── velodyne
     ├───── calib
     ├───── label
     └───── data_info.json        
```

#### Create a symlink to the dataset root

```
cd ${dair-v2x_root}/dair-v2x
mkdir ./data/DAIR-V2X
ln -s ${DAIR-V2X-V_DATASET_ROOT}/single-vehicle-side ./data/DAIR-V2X
```

#### Create Kitti-format data (Option for model training)

Data creation should be under the gpu environment.
```commandline
# Kitti Format
cd ${dair-v2x_root}/dair-v2x
python tools/dataset_converter/dair2kitti.py --source-root ./data/DAIR-V2X/single-vehicle-side \
    --target-root ./data/DAIR-V2X/single-vehicle-side \
    --split-path ./data/split_datas/single-vehicle-split-data.json \
    --label-type lidar --sensor-view vehicle
```

In the end, the data and info files should be organized as follows
```
└─── single-vehicle-side             
     ├───── image
     ├───── velodyne
     ├───── calib
     ├───── label
     ├───── data_info.json
     ├───── ImageSets
     └───── training
        ├───── image_2
        ├───── velodyne
        ├───── label_2
        └───── calib
```

### Training & Evaluation

* Implementation Framework. We directly implement the benchmark with [mmdetection3d-0.17.1](https://github.com/open-mmlab/mmdetection3d/tree/v0.17.1).
* Training & Evaluation details. 
  Before training the detectors, we should follow MMDetection3D to convert the "./data/DAIR-V2X/single-vehicle-side" into specific training format.
  We train the MVX-Net for 40 epochs.
  We evaluate the models on the valid part of DAIR-V2X-V. 
  We set [0.5, 0.25, 0.25] as the IoU threshold for [Car, Pedestrain, Cyclist]. 
  Please refer [trainval_config.py](./trainval_config.py) for more evaluation details.
  We provide the evaluation results with 3D Average Precision.

## Citation

```latex
@inproceedings{sindagi2019mvx,
  title={MVX-Net: Multimodal voxelnet for 3D object detection},
  author={Sindagi, Vishwanath A and Zhou, Yin and Tuzel, Oncel},
  booktitle={2019 International Conference on Robotics and Automation (ICRA)},
  pages={7276--7282},
  year={2019},
  organization={IEEE}
}
```

dataset_type = "KittiDataset"
data_root = "../../../data/DAIR-V2X/single-vehicle-side/"
class_names = ["Pedestrian", "Cyclist", "Car"]
voxel_size = [0.05, 0.05, 0.1]
point_cloud_range = [0, -40, -3, 70.4, 40, 1]
z_center_pedestrian = -0.6
z_center_cyclist = -0.6
z_center_car = -1.78

mean = [103.53, 116.28, 123.675]
std = [1.0, 1.0, 1.0]
img_scale = (960, 540)
to_rgb = False
img_norm_cfg = dict(mean=mean, std=std, to_rgb=to_rgb)
input_modality = dict(use_lidar=True, use_camera=True)

lr = 0.003
optimizer = dict(type="AdamW", lr=0.003, betas=(0.95, 0.99), weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(policy="CosineAnnealing", warmup="linear", warmup_iters=1000, warmup_ratio=0.1, min_lr_ratio=1e-05)
momentum_config = None
runner = dict(type="EpochBasedRunner", max_epochs=40)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type="TextLoggerHook"), dict(type="TensorboardLoggerHook")])
dist_params = dict(backend="nccl")
log_level = "INFO"
work_dir = "./work_dirs/dv_mvx-fpn_second_secfpn_adamw_2x8_80e_kitti-3d-3class"
load_from = "https://download.openmmlab.com/mmdetection3d/pretrain_models/mvx_faster_rcnn_detectron2-caffe_20e_coco-pretrain_gt-sample_kitti-3-class_moderate-79.3_20200207-a4a6a3c7.pth"
resume_from = None
workflow = [("train", 1)]

model = dict(
    type="DynamicMVXFasterRCNN",
    img_backbone=dict(
        type="ResNet",
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type="BN", requires_grad=False),
        norm_eval=True,
        style="caffe",
    ),
    img_neck=dict(type="FPN", in_channels=[256, 512, 1024, 2048], out_channels=256, num_outs=5),
    pts_voxel_layer=dict(
        max_num_points=-1, point_cloud_range=point_cloud_range, voxel_size=voxel_size, max_voxels=(-1, -1)
    ),
    pts_voxel_encoder=dict(
        type="DynamicVFE",
        in_channels=4,
        feat_channels=[64, 64],
        with_distance=False,
        voxel_size=voxel_size,
        with_cluster_center=True,
        with_voxel_center=True,
        point_cloud_range=point_cloud_range,
        fusion_layer=dict(
            type="PointFusion",
            img_channels=256,
            pts_channels=64,
            mid_channels=128,
            out_channels=128,
            img_levels=[0, 1, 2, 3, 4],
            align_corners=False,
            activate_out=True,
            fuse_out=False,
        ),
    ),
    pts_middle_encoder=dict(
        type="SparseEncoder", in_channels=128, sparse_shape=[41, 1600, 1408], order=("conv", "norm", "act")
    ),
    pts_backbone=dict(type="SECOND", in_channels=256, layer_nums=[5, 5], layer_strides=[1, 2], out_channels=[128, 256]),
    pts_neck=dict(type="SECONDFPN", in_channels=[128, 256], upsample_strides=[1, 2], out_channels=[256, 256]),
    pts_bbox_head=dict(
        type="Anchor3DHead",
        num_classes=3,
        in_channels=512,
        feat_channels=512,
        use_direction_classifier=True,
        anchor_generator=dict(
            type="Anchor3DRangeGenerator",
            ranges=[[0, -40, -0.6, 70.4, 40, -0.6], [0, -40, -0.6, 70.4, 40, -0.6], [0, -40, -1.78, 70.4, 40, -1.78]],
            sizes=[[0.6, 0.8, 1.73], [0.6, 1.76, 1.73], [1.6, 3.9, 1.56]],
            rotations=[0, 1.57],
            reshape_out=False,
        ),
        assigner_per_size=True,
        diff_rad_by_sin=True,
        assign_per_class=True,
        bbox_coder=dict(type="DeltaXYZWLHRBBoxCoder"),
        loss_cls=dict(type="FocalLoss", use_sigmoid=True, gamma=2.0, alpha=0.25, loss_weight=1.0),
        loss_bbox=dict(type="SmoothL1Loss", beta=0.1111111111111111, loss_weight=2.0),
        loss_dir=dict(type="CrossEntropyLoss", use_sigmoid=False, loss_weight=0.2),
    ),
    train_cfg=dict(
        pts=dict(
            assigner=[
                dict(
                    type="MaxIoUAssigner",
                    iou_calculator=dict(type="BboxOverlapsNearest3D"),
                    pos_iou_thr=0.35,
                    neg_iou_thr=0.2,
                    min_pos_iou=0.2,
                    ignore_iof_thr=-1,
                ),
                dict(
                    type="MaxIoUAssigner",
                    iou_calculator=dict(type="BboxOverlapsNearest3D"),
                    pos_iou_thr=0.35,
                    neg_iou_thr=0.2,
                    min_pos_iou=0.2,
                    ignore_iof_thr=-1,
                ),
                dict(
                    type="MaxIoUAssigner",
                    iou_calculator=dict(type="BboxOverlapsNearest3D"),
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.45,
                    min_pos_iou=0.45,
                    ignore_iof_thr=-1,
                ),
            ],
            allowed_border=0,
            pos_weight=-1,
            debug=False,
        )
    ),
    test_cfg=dict(
        pts=dict(
            use_rotate_nms=True,
            nms_across_levels=False,
            nms_thr=0.01,
            score_thr=0.1,
            min_bbox_size=0,
            nms_pre=100,
            max_num=50,
        )
    ),
)
train_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
    dict(type="LoadImageFromFile"),
    dict(type="LoadAnnotations3D", with_bbox_3d=True, with_label_3d=True),
    dict(type="Resize", img_scale=[(480, 270), (1920, 1080)], multiscale_mode="range", keep_ratio=True),
    dict(
        type="GlobalRotScaleTrans",
        rot_range=[-0.78539816, 0.78539816],
        scale_ratio_range=[0.95, 1.05],
        translation_std=[0.2, 0.2, 0.2],
    ),
    dict(type="RandomFlip3D", flip_ratio_bev_horizontal=0.5),
    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
    dict(type="ObjectRangeFilter", point_cloud_range=point_cloud_range),
    dict(type="PointShuffle"),
    dict(type="Normalize", mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False),
    dict(type="Pad", size_divisor=32),
    dict(type="DefaultFormatBundle3D", class_names=class_names),
    dict(type="Collect3D", keys=["points", "img", "gt_bboxes_3d", "gt_labels_3d"]),
]
test_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
    dict(type="LoadImageFromFile"),
    dict(
        type="MultiScaleFlipAug3D",
        img_scale=(960, 540),
        pts_scale_ratio=1,
        flip=False,
        transforms=[
            dict(type="Resize", multiscale_mode="value", keep_ratio=True),
            dict(type="GlobalRotScaleTrans", rot_range=[0, 0], scale_ratio_range=[1.0, 1.0], translation_std=[0, 0, 0]),
            dict(type="RandomFlip3D"),
            dict(type="Normalize", mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False),
            dict(type="Pad", size_divisor=32),
            dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
            dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
            dict(type="Collect3D", keys=["points", "img"]),
        ],
    ),
]
eval_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
    dict(type="LoadImageFromFile"),
    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
    dict(type="Collect3D", keys=["points", "img"]),
]
data = dict(
    samples_per_gpu=1,
    workers_per_gpu=1,
    train=dict(
        type="RepeatDataset",
        times=2,
        dataset=dict(
            type="KittiDataset",
            data_root=data_root,
            ann_file=data_root + "/kitti_infos_train.pkl",
            split="training",
            pts_prefix="velodyne_reduced",
            pipeline=[
                dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
                dict(type="LoadImageFromFile"),
                dict(type="LoadAnnotations3D", with_bbox_3d=True, with_label_3d=True),
                dict(type="Resize", img_scale=[(480, 270), (1920, 1080)], multiscale_mode="range", keep_ratio=True),
                dict(
                    type="GlobalRotScaleTrans",
                    rot_range=[-0.78539816, 0.78539816],
                    scale_ratio_range=[0.95, 1.05],
                    translation_std=[0.2, 0.2, 0.2],
                ),
                dict(type="RandomFlip3D", flip_ratio_bev_horizontal=0.5),
                dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                dict(type="ObjectRangeFilter", point_cloud_range=point_cloud_range),
                dict(type="PointShuffle"),
                dict(type="Normalize", mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False),
                dict(type="Pad", size_divisor=32),
                dict(type="DefaultFormatBundle3D", class_names=class_names),
                dict(type="Collect3D", keys=["points", "img", "gt_bboxes_3d", "gt_labels_3d"]),
            ],
            modality=dict(use_lidar=True, use_camera=True),
            classes=class_names,
            test_mode=False,
            box_type_3d="LiDAR",
        ),
    ),
    val=dict(
        type="KittiDataset",
        data_root=data_root,
        ann_file=data_root + "/kitti_infos_val.pkl",
        split="training",
        pts_prefix="velodyne_reduced",
        pipeline=[
            dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
            dict(type="LoadImageFromFile"),
            dict(
                type="MultiScaleFlipAug3D",
                img_scale=(960, 540),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(type="Resize", multiscale_mode="value", keep_ratio=True),
                    dict(
                        type="GlobalRotScaleTrans",
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0],
                    ),
                    dict(type="RandomFlip3D"),
                    dict(type="Normalize", mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False),
                    dict(type="Pad", size_divisor=32),
                    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
                    dict(type="Collect3D", keys=["points", "img"]),
                ],
            ),
        ],
        modality=dict(use_lidar=True, use_camera=True),
        classes=class_names,
        test_mode=True,
        box_type_3d="LiDAR",
    ),
    test=dict(
        type="KittiDataset",
        data_root=data_root,
        ann_file=data_root + "/kitti_infos_val.pkl",
        split="training",
        pts_prefix="velodyne_reduced",
        pipeline=[
            dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
            dict(type="LoadImageFromFile"),
            dict(
                type="MultiScaleFlipAug3D",
                img_scale=(960, 540),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(type="Resize", multiscale_mode="value", keep_ratio=True),
                    dict(
                        type="GlobalRotScaleTrans",
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0],
                    ),
                    dict(type="RandomFlip3D"),
                    dict(type="Normalize", mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False),
                    dict(type="Pad", size_divisor=32),
                    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
                    dict(type="Collect3D", keys=["points", "img"]),
                ],
            ),
        ],
        modality=dict(use_lidar=True, use_camera=True),
        classes=class_names,
        test_mode=True,
        box_type_3d="LiDAR",
    ),
)
evaluation = dict(
    interval=1,
    pipeline=[
        dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
        dict(type="LoadImageFromFile"),
        dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
        dict(type="Collect3D", keys=["points", "img"]),
    ],
)
gpu_ids = range(0, 1)


# ImVoxelNet: Image to Voxels Projection for Monocular and Multi-View General-Purpose 3D Object Detection

> [ImVoxelNet: Image to Voxels Projection for Monocular and Multi-View General-Purpose 3D Object Detection](https://arxiv.org/abs/2106.01178)

## Introduction

We implement ImVoxelNet and provide the results and checkpoints on DAIR-V2X-V datasets with MMDetection3D.

## Results and models


| Modality |   Model   |  Car  |        |      | Pedestrain |        |      | Cyclist |        |      |                                          Download                                          |
| :--------: | :----------: | :-----: | :------: | :-----: | :----------: | :------: | :----: | :-------: | :------: | :----: | :-------------------------------------------------------------------------------------------: |
|          |            | Easy | Middle | Hard |    Easy    | Middle | Hard |  Easy  | Middle | Hard |                                                                                            |
|  Image  | ImVoxelNet | 56.86 | 39.74 | 33.00 |    9.09    |  9.09  | 9.09 |  10.48  |  9.09  | 9.09 | [model](https://drive.google.com/file/d/1HimYmBKhpnpU14UdKLykQJQrkSBDKGyf/view?usp=share_link) |

## Training & Evaluation

### Data Preparation

#### Download data and organise as follows

```
# For DAIR-V2X-V Dataset located at ${DAIR-V2X-V_DATASET_ROOT}
└─── single-vehicle-side
     ├───── image
     ├───── velodyne
     ├───── calib
     ├───── label
     └───── data_info.json        
```

#### Create a symlink to the dataset root

```
cd ${dair-v2x_root}/dair-v2x
mkdir ./data/DAIR-V2X
ln -s ${DAIR-V2X-V_DATASET_ROOT}/single-vehicle-side ./data/DAIR-V2X
```

#### Create Kitti-format data (Option for model training)

Data creation should be under the gpu environment.
```commandline
# Kitti Format
cd ${dair-v2x_root}/dair-v2x
python tools/dataset_converter/dair2kitti.py --source-root ./data/DAIR-V2X/single-vehicle-side \
    --target-root ./data/DAIR-V2X/single-vehicle-side \
    --split-path ./data/split_datas/single-vehicle-split-data.json \
    --label-type camera --sensor-view vehicle
```

In the end, the data and info files should be organized as follows
```
└─── single-vehicle-side             
     ├───── image
     ├───── velodyne
     ├───── calib
     ├───── label
     ├───── data_info.json
     ├───── ImageSets
     └───── training
        ├───── image_2
        ├───── velodyne
        ├───── label_2
        └───── calib
```

### Training & Evaluation

* Implementation Framework. We directly implement the benchmark with [mmdetection3d-0.17.1](https://github.com/open-mmlab/mmdetection3d/tree/v0.17.1).
* Training & Evaluation details.
  Before training the detectors, we should follow MMDetection3D to convert the "./data/DAIR-V2X/single-vehicle-side" into specific training format.
  We train the ImVoxelNet for 12 epochs.
  We evaluate the models on the valid part of DAIR-V2X-V.
  We set [0.5, 0.25, 0.25] as the IoU threshold for [Car, Pedestrain, Cyclist].
  Please refer [trainval_config.py](./trainval_config.py) for more evaluation details.
  We provide the evaluation results with 3D Average Precision.

## Citation

```latex
@inproceedings{rukhovich2022imvoxelnet,
  title={Imvoxelnet: Image to voxels projection for monocular and multi-view general-purpose 3d object detection},
  author={Rukhovich, Danila and Vorontsova, Anna and Konushin, Anton},
  booktitle={Proceedings of the IEEE/CVF Winter Conference on Applications of Computer Vision},
  pages={2397--2406},
  year={2022}
}
```


work_dir = './work_dirs/ss3d_veh_imvoxelnet'

dataset_type = "KittiDataset"
data_root = "../../../data/DAIR-V2X/single-vehicle-side/"
class_names = ["Pedestrian", "Cyclist", "Car"]
input_modality = dict(use_lidar=False, use_camera=True)
point_cloud_range = [0, -39.68, -3, 69.12, 39.68, 1]
voxel_size = [0.32, 0.32, 0.32]
n_voxels = [int((point_cloud_range[i + 3] - point_cloud_range[i]) / voxel_size[i]) for i in range(3)]

img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
img_scale = (1280, 384)
img_resize_scale = [(1173, 352), (1387, 416)]

ped_center = -0.6
cyc_center = -0.6
car_center = -1.78

anchor_range_ped = [
    point_cloud_range[0],
    point_cloud_range[1],
    ped_center,
    point_cloud_range[3] - voxel_size[0],
    point_cloud_range[4] - voxel_size[1],
    ped_center,
]
anchor_range_cyc = [
    point_cloud_range[0],
    point_cloud_range[1],
    cyc_center,
    point_cloud_range[3] - voxel_size[0],
    point_cloud_range[4] - voxel_size[1],
    cyc_center,
]
anchor_range_car = [
    point_cloud_range[0],
    point_cloud_range[1],
    car_center,
    point_cloud_range[3] - voxel_size[0],
    point_cloud_range[4] - voxel_size[1],
    car_center,
]

anchor_size_pred = [0.6, 0.8, 1.73]
anchor_size_cyc = [0.6, 1.76, 1.73]
anchor_size_car = [1.6, 3.9, 1.56]

model = dict(
    type="ImVoxelNet",
    pretrained="torchvision://resnet50",
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=False),
        norm_eval=True,
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50'),
        style='pytorch'),
    neck=dict(
        type="FPN", 
        in_channels=[256, 512, 1024, 2048], 
        out_channels=64, 
        num_outs=4),
    neck_3d=dict(type="OutdoorImVoxelNeck", in_channels=64, out_channels=256),
    bbox_head=dict(
        type="Anchor3DHead",
        num_classes=len(class_names),
        in_channels=256,
        feat_channels=256,
        use_direction_classifier=True,
        anchor_generator=dict(
            type="Anchor3DRangeGenerator",
            ranges=[anchor_range_ped, anchor_range_cyc, anchor_range_car],
            sizes=[anchor_size_pred, anchor_size_cyc, anchor_size_car],
            rotations=[0, 1.57],
            reshape_out=False,
        ),
        diff_rad_by_sin=True,
        bbox_coder=dict(type="DeltaXYZWLHRBBoxCoder"),
        loss_cls=dict(
            type="FocalLoss", 
            use_sigmoid=True, 
            gamma=2.0, 
            alpha=0.25, 
            loss_weight=1.0),
        loss_bbox=dict(type="SmoothL1Loss", beta=1.0 / 9.0, loss_weight=2.0),
        loss_dir=dict(type="CrossEntropyLoss", use_sigmoid=False, loss_weight=0.2),
    ),
    # n_voxels=(216, 248, 12),
    # voxel_size=(.64, .64, .64)
    n_voxels=n_voxels,
    # voxel_size=voxel_size,
    anchor_generator=dict(
        type='AlignedAnchor3DRangeGenerator',
        ranges=[[0, -39.68, -3.08, 69.12, 39.68, 0.76]],
        rotations=[.0]),

    train_cfg = dict(
        assigner=[
            dict(  # for Pedestrian
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.5,
                neg_iou_thr=0.35,
                min_pos_iou=0.35,
                ignore_iof_thr=-1,
            ),
            dict(  # for Cyclist
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.5,
                neg_iou_thr=0.35,
                min_pos_iou=0.35,
                ignore_iof_thr=-1,
            ),
            dict(  # for Car
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.6,
                neg_iou_thr=0.45,
                min_pos_iou=0.45,
                ignore_iof_thr=-1,
            ),
        ],
        allowed_border=0,
        pos_weight=-1,
        debug=False,
    ),
    test_cfg = dict(
        use_rotate_nms=True, 
        nms_across_levels=False, 
        nms_thr=0.01, 
        score_thr=0.2, 
        min_bbox_size=0, 
        nms_pre=100, 
        max_num=50
    )
)

train_pipeline = [
    dict(type='LoadAnnotations3D'),
    dict(type='LoadImageFromFile'),
    dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),
    dict(
        type='Resize',
        img_scale=img_resize_scale,
        keep_ratio=True,
        multiscale_mode='range'),
    dict(type='Normalize', **img_norm_cfg),
    dict(type='Pad', size_divisor=32),
    dict(type='ObjectRangeFilter', point_cloud_range=point_cloud_range),
    dict(type='DefaultFormatBundle3D', class_names=class_names),
    dict(type='Collect3D', keys=['img', 'gt_bboxes_3d', 'gt_labels_3d'])
]

test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', img_scale=img_scale, keep_ratio=True),
    dict(type='Normalize', **img_norm_cfg),
    dict(type='Pad', size_divisor=32),
    dict(
        type='DefaultFormatBundle3D',
        class_names=class_names,
        with_label=False),
    dict(type='Collect3D', keys=['img'])
]

data = dict(
    samples_per_gpu=4,
    workers_per_gpu=3,
    train=dict(
        type="RepeatDataset",
        times=3,
        dataset=dict(
            type=dataset_type,
            data_root=data_root,
            ann_file=data_root + "kitti_infos_train.pkl",
            split="training",
            pts_prefix="velodyne_reduced",
            pipeline=train_pipeline,
            modality=input_modality,
            classes=class_names,
            pcd_limit_range=point_cloud_range,
            test_mode=False,
        ),
    ),
    val=dict(
        type=dataset_type,
        data_root=data_root,
        ann_file=data_root + "kitti_infos_val.pkl",
        split="training",
        pts_prefix="velodyne_reduced",
        pipeline=test_pipeline,
        modality=input_modality,
        classes=class_names,
        pcd_limit_range=point_cloud_range,
        test_mode=True,
    ),
    test=dict(
        type=dataset_type,
        data_root=data_root,
        ann_file=data_root + "kitti_infos_val.pkl",
        split="training",
        pts_prefix="velodyne_reduced",
        pipeline=test_pipeline,
        modality=input_modality,
        classes=class_names,
        pcd_limit_range=point_cloud_range,
        test_mode=True,
    ),
)

optimizer = dict(
    type="AdamW",
    lr=0.0001,
    weight_decay=0.0001,
    paramwise_cfg=dict(
        custom_keys={"backbone": dict(lr_mult=0.1, decay_mult=1.0)}),
)
optimizer_config = dict(grad_clip=dict(max_norm=35.0, norm_type=2))
lr_config = dict(policy="step", step=[8, 11])
total_epochs = 12

checkpoint_config = dict(interval=1, max_keep_ckpts=1)
log_config = dict(
    interval=50, 
    hooks=[dict(type="TextLoggerHook"), 
    dict(type="TensorboardLoggerHook")])
evaluation = dict(interval=1)
dist_params = dict(backend="nccl")
find_unused_parameters = True  # todo: fix number of FPN outputs
log_level = "INFO"
load_from = None
resume_from = None
workflow = [("train", 1)]

# Second: Sparsely embedded convolutional detection

> [SECOND: Sparsely Embedded Convolutional Detection](https://www.mdpi.com/1424-8220/18/10/3337)

## Introduction
We implement SECOND and provide the results and checkpoints on DAIR-V2X-V datasets with MMDetection3D.

## Results and models
|  Modality  |     Model    |  Car  |        |       | Pedestrain |        |       | Cyclist |        |       | Download |
|:----------:|:------------:|:-----:|:------:|:-----:|:----------:|:------:|:-----:|:-------:|:------:|:-----:|:--------:|
|            |              |  Easy | Middle |  Hard |    Easy    | Middle |  Hard |   Easy  | Middle |  Hard |          |
| Pointcloud | SECOND       | 69.44 | 59.63  | 57.63 | 43.45      | 39.06  | 38.78 | 44.21   | 39.49  | 37.74 |  [model](https://drive.google.com/file/d/1dZpWo0I7h-22Pe0xR_0WvkwRrv7Cok3-/view?usp=sharing)] |

## Training & Evaluation

### Data Preparation
#### Download data and organise as follows

```
# For DAIR-V2X-V Dataset located at ${DAIR-V2X-V_DATASET_ROOT}
└─── single-vehicle-side
     ├───── image
     ├───── velodyne
     ├───── calib
     ├───── label
     └───── data_info.json        
```

#### Create a symlink to the dataset root

```
cd ${dair-v2x_root}/dair-v2x
mkdir ./data/DAIR-V2X
ln -s ${DAIR-V2X-V_DATASET_ROOT}/single-vehicle-side ./data/DAIR-V2X
```

#### Create Kitti-format data (Option for model training)

Data creation should be under the gpu environment.
```commandline
# Kitti Format
cd ${dair-v2x_root}/dair-v2x
python tools/dataset_converter/dair2kitti.py --source-root ./data/DAIR-V2X/single-vehicle-side \
    --target-root ./data/DAIR-V2X/single-vehicle-side \
    --split-path ./data/split_datas/single-vehicle-split-data.json \
    --label-type lidar --sensor-view vehicle
```

In the end, the data and info files should be organized as follows
```
└─── single-vehicle-side             
     ├───── image
     ├───── velodyne
     ├───── calib
     ├───── label
     ├───── data_info.json
     ├───── ImageSets
     └───── training
        ├───── image_2
        ├───── velodyne
        ├───── label_2
        └───── calib
```

### Training & Evaluation

* Implementation Framework. We directly implement the benchmark with [mmdetection3d-0.17.1](https://github.com/open-mmlab/mmdetection3d/tree/v0.17.1).
* Training & Evaluation details. 
  Before training the detectors, we should follow MMDetection3D to convert the "./data/DAIR-V2X/single-vehicle-side" into specific training format.
  We train the MVX-Net for 40 epochs.
  We evaluate the models on the valid part of DAIR-V2X-V. 
  We set [0.5, 0.25, 0.25] as the IoU threshold for [Car, Pedestrain, Cyclist]. 
  Please refer [trainval_config.py](./trainval_config.py) for more evaluation details.
  We provide the evaluation results with 3D Average Precision.
  

## Citation

```latex
@article{yan2018second,
  title={Second: Sparsely embedded convolutional detection},
  author={Yan, Yan and Mao, Yuxing and Li, Bo},
  journal={Sensors},
  year={2018},
  publisher={Multidisciplinary Digital Publishing Institute}
}
```

dataset_type = "KittiDataset"
data_root = "../../../data/DAIR-V2X/single-vehicle-side/"
class_names = ["Pedestrian", "Cyclist", "Car"]
point_cloud_range = [0, -40, -3, 70.4, 40, 1]
input_modality = dict(use_lidar=True, use_camera=False)
voxel_size = [0.05, 0.05, 0.1]

model = dict(
    type="VoxelNet",
    voxel_layer=dict(
        max_num_points=5, point_cloud_range=point_cloud_range, voxel_size=voxel_size, max_voxels=(16000, 40000)
    ),
    voxel_encoder=dict(type="HardSimpleVFE"),
    middle_encoder=dict(
        type="SparseEncoder", in_channels=4, sparse_shape=[41, 1600, 1408], order=("conv", "norm", "act")
    ),
    backbone=dict(type="SECOND", in_channels=256, layer_nums=[5, 5], layer_strides=[1, 2], out_channels=[128, 256]),
    neck=dict(type="SECONDFPN", in_channels=[128, 256], upsample_strides=[1, 2], out_channels=[256, 256]),
    bbox_head=dict(
        type="Anchor3DHead",
        num_classes=3,
        in_channels=512,
        feat_channels=512,
        use_direction_classifier=True,
        anchor_generator=dict(
            type="Anchor3DRangeGenerator",
            ranges=[
                [0, -40.0, -0.6, 70.4, 40.0, -0.6],
                [0, -40.0, -0.6, 70.4, 40.0, -0.6],
                [0, -40.0, -1.78, 70.4, 40.0, -1.78],
            ],
            sizes=[[0.6, 0.8, 1.73], [0.6, 1.76, 1.73], [1.6, 3.9, 1.56]],
            rotations=[0, 1.57],
            reshape_out=False,
        ),
        diff_rad_by_sin=True,
        bbox_coder=dict(type="DeltaXYZWLHRBBoxCoder"),
        loss_cls=dict(type="FocalLoss", use_sigmoid=True, gamma=2.0, alpha=0.25, loss_weight=1.0),
        loss_bbox=dict(type="SmoothL1Loss", beta=0.1111111111111111, loss_weight=2.0),
        loss_dir=dict(type="CrossEntropyLoss", use_sigmoid=False, loss_weight=0.2),
    ),
    train_cfg=dict(
        assigner=[
            dict(
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.35,
                neg_iou_thr=0.2,
                min_pos_iou=0.2,
                ignore_iof_thr=-1,
            ),
            dict(
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.35,
                neg_iou_thr=0.2,
                min_pos_iou=0.2,
                ignore_iof_thr=-1,
            ),
            dict(
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.6,
                neg_iou_thr=0.45,
                min_pos_iou=0.45,
                ignore_iof_thr=-1,
            ),
        ],
        allowed_border=0,
        pos_weight=-1,
        debug=False,
    ),
    test_cfg=dict(
        use_rotate_nms=True,
        nms_across_levels=False,
        nms_thr=0.01,
        score_thr=0.1,
        min_bbox_size=0,
        nms_pre=100,
        max_num=50,
    ),
)

db_sampler = dict(
    data_root=data_root,
    info_path=data_root + "/kitti_dbinfos_train.pkl",
    rate=1.0,
    prepare=dict(filter_by_difficulty=[-1], filter_by_min_points=dict(Car=5, Pedestrian=10, Cyclist=10)),
    classes=class_names,
    sample_groups=dict(Car=12, Pedestrian=6, Cyclist=6),
)
file_client_args = dict(backend="disk")
train_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4, file_client_args=dict(backend="disk")),
    dict(type="LoadAnnotations3D", with_bbox_3d=True, with_label_3d=True, file_client_args=dict(backend="disk")),
    dict(
        type="ObjectSample",
        db_sampler=dict(
            data_root=data_root,
            info_path=data_root + "/kitti_dbinfos_train.pkl",
            rate=1.0,
            prepare=dict(filter_by_difficulty=[-1], filter_by_min_points=dict(Car=5, Pedestrian=10, Cyclist=10)),
            classes=class_names,
            sample_groups=dict(Car=12, Pedestrian=6, Cyclist=6),
        ),
    ),
    dict(
        type="ObjectNoise",
        num_try=100,
        translation_std=[1.0, 1.0, 0.5],
        global_rot_range=[0.0, 0.0],
        rot_range=[-0.78539816, 0.78539816],
    ),
    dict(type="RandomFlip3D", flip_ratio_bev_horizontal=0.5),
    dict(type="GlobalRotScaleTrans", rot_range=[-0.78539816, 0.78539816], scale_ratio_range=[0.95, 1.05]),
    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
    dict(type="ObjectRangeFilter", point_cloud_range=point_cloud_range),
    dict(type="PointShuffle"),
    dict(type="DefaultFormatBundle3D", class_names=class_names),
    dict(type="Collect3D", keys=["points", "gt_bboxes_3d", "gt_labels_3d"]),
]
test_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4, file_client_args=dict(backend="disk")),
    dict(
        type="MultiScaleFlipAug3D",
        img_scale=(1333, 800),
        pts_scale_ratio=1,
        flip=False,
        transforms=[
            dict(type="GlobalRotScaleTrans", rot_range=[0, 0], scale_ratio_range=[1.0, 1.0], translation_std=[0, 0, 0]),
            dict(type="RandomFlip3D"),
            dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
            dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
            dict(type="Collect3D", keys=["points"]),
        ],
    ),
]
eval_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4, file_client_args=dict(backend="disk")),
    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
    dict(type="Collect3D", keys=["points"]),
]
data = dict(
    samples_per_gpu=6,
    workers_per_gpu=4,
    train=dict(
        type="RepeatDataset",
        times=2,
        dataset=dict(
            type="KittiDataset",
            data_root=data_root,
            ann_file=data_root + "/kitti_infos_train.pkl",
            split="training",
            pts_prefix="velodyne_reduced",
            pipeline=[
                dict(
                    type="LoadPointsFromFile",
                    coord_type="LIDAR",
                    load_dim=4,
                    use_dim=4,
                    file_client_args=dict(backend="disk"),
                ),
                dict(
                    type="LoadAnnotations3D",
                    with_bbox_3d=True,
                    with_label_3d=True,
                    file_client_args=dict(backend="disk"),
                ),
                dict(
                    type="ObjectSample",
                    db_sampler=dict(
                        data_root=data_root,
                        info_path=data_root + "/kitti_dbinfos_train.pkl",
                        rate=1.0,
                        prepare=dict(
                            filter_by_difficulty=[-1], filter_by_min_points=dict(Car=5, Pedestrian=10, Cyclist=10)
                        ),
                        classes=class_names,
                        sample_groups=dict(Car=12, Pedestrian=6, Cyclist=6),
                    ),
                ),
                dict(
                    type="ObjectNoise",
                    num_try=100,
                    translation_std=[1.0, 1.0, 0.5],
                    global_rot_range=[0.0, 0.0],
                    rot_range=[-0.78539816, 0.78539816],
                ),
                dict(type="RandomFlip3D", flip_ratio_bev_horizontal=0.5),
                dict(type="GlobalRotScaleTrans", rot_range=[-0.78539816, 0.78539816], scale_ratio_range=[0.95, 1.05]),
                dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                dict(type="ObjectRangeFilter", point_cloud_range=point_cloud_range),
                dict(type="PointShuffle"),
                dict(type="DefaultFormatBundle3D", class_names=class_names),
                dict(type="Collect3D", keys=["points", "gt_bboxes_3d", "gt_labels_3d"]),
            ],
            modality=dict(use_lidar=True, use_camera=False),
            classes=class_names,
            test_mode=False,
            box_type_3d="LiDAR",
        ),
    ),
    val=dict(
        type="KittiDataset",
        data_root=data_root,
        ann_file=data_root + "/kitti_infos_val.pkl",
        split="training",
        pts_prefix="velodyne_reduced",
        pipeline=[
            dict(
                type="LoadPointsFromFile",
                coord_type="LIDAR",
                load_dim=4,
                use_dim=4,
                file_client_args=dict(backend="disk"),
            ),
            dict(
                type="MultiScaleFlipAug3D",
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type="GlobalRotScaleTrans",
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0],
                    ),
                    dict(type="RandomFlip3D"),
                    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
                    dict(type="Collect3D", keys=["points"]),
                ],
            ),
        ],
        modality=dict(use_lidar=True, use_camera=False),
        classes=class_names,
        test_mode=True,
        box_type_3d="LiDAR",
    ),
    test=dict(
        type="KittiDataset",
        data_root=data_root,
        ann_file=data_root + "/kitti_infos_val.pkl",
        split="training",
        pts_prefix="velodyne_reduced",
        pipeline=[
            dict(
                type="LoadPointsFromFile",
                coord_type="LIDAR",
                load_dim=4,
                use_dim=4,
                file_client_args=dict(backend="disk"),
            ),
            dict(
                type="MultiScaleFlipAug3D",
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type="GlobalRotScaleTrans",
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0],
                    ),
                    dict(type="RandomFlip3D"),
                    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
                    dict(type="Collect3D", keys=["points"]),
                ],
            ),
        ],
        modality=dict(use_lidar=True, use_camera=False),
        classes=class_names,
        test_mode=True,
        box_type_3d="LiDAR",
    ),
)
evaluation = dict(
    interval=1,
    pipeline=[
        dict(
            type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4, file_client_args=dict(backend="disk")
        ),
        dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
        dict(type="Collect3D", keys=["points"]),
    ],
)
lr = 0.0018
optimizer = dict(type="AdamW", lr=0.0018, betas=(0.95, 0.99), weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=10, norm_type=2))
lr_config = dict(policy="cyclic", target_ratio=(10, 0.0001), cyclic_times=1, step_ratio_up=0.4)
momentum_config = dict(policy="cyclic", target_ratio=(0.8947368421052632, 1), cyclic_times=1, step_ratio_up=0.4)
runner = dict(type="EpochBasedRunner", max_epochs=40)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type="TextLoggerHook"), dict(type="TensorboardLoggerHook")])
dist_params = dict(backend="nccl")
log_level = "INFO"
work_dir = "./work_dirs/hv_second_secfpn_6x8_80e_kitti-3d-3class"
load_from = None
resume_from = None
workflow = [("train", 1)]
gpu_ids = range(0, 1)


# Early Fusion

##  Introduction

We implement early fusion for VIC3D Detection with PointPillars and provide the results and checkpoints on VIC-Sync datasets and VIC-Async-1. 

##  Results and models

| Modality   | Fusion       | Model        | Dataset     | Overall(AP 3D Iou = 0.5) | 0-30m(AP 3D Iou = 0.5) | 30-50m(AP 3D Iou = 0.5) | 50-100m(AP 3D Iou = 0.5) | Overall(AP BEV Iou = 0.5) | 0-30m(AP BEV Iou = 0.5) | 30-50m(AP BEV Iou = 0.5) | 50-100m(AP BEV Iou = 0.5) | AB(Byte)   | Download                                                     |
| ---------- | ------------ | ------------ | ----------- | ------------------------ | ---------------------- | ----------------------- | ------------------------ | ------------------------- | ----------------------- | ------------------------ | ------------------------- | ---------- | ------------------------------------------------------------ |
| Pointcloud | Early Fusion | PointPillars | VIC-Sync    | 62.61                    | 64.82                  | 68.68                   | 56.57                    | 68.91                     | 68.92                   | 73.64                    | 65.66                     | 1382275.75 | [model](https://drive.google.com/file/d/1mo8o1iIZ2fQHYBkpfmjyMnCqYKs3wQk7/view?usp=sharing) |
| Pointcloud | Early Fusion | PointPillars | VIC-Async-1 | 57.35                    | 57.92                  | 66.23                   | 51.70                    | 64.06                     | 62.44                   | 71.42                    | 61.16                     | 1362216.0  |                                                              |

## Training & Evaluation

### Data Preparation
#### Download data and organise as follows
```
# For DAIR-V2X-C Dataset located at ${DAIR-V2X-C_DATASET_ROOT}
└── cooperative-vehicle-infrastructure       <-- DAIR-V2X-C
    └──── infrastructure-side                         <-- DAIR-V2X-C-I   
       ├───── image
       ├───── velodyne
       ├───── calib
       ├───── label    
       └────  data_info.json    
    └──── vehicle-side                                         <-- DAIR-V2X-C-V  
       ├───── image
       ├───── velodyne
       ├───── calib
       ├───── label
       └───── data_info.json
    └──── cooperative 
       ├───── label_world
       └───── data_info.json              
```

#### Create a symlink to the dataset root
    ```
    cd ${dair-v2x_root}/dair-v2x
    mkdir ./data/DAIR-V2X
    ln -s ${DAIR-V2X-C_DATASET_ROOT}/cooperative-vehicle-infrastructure ${dair-v2x_root}/dair-v2x/data/DAIR-V2X
    ```

#### Create vic3d-early-fusion data

1. Copy "data/DAIR-V2X/cooperative-vehicle-infrastructure/vehicle-side" folder and rename it as "vic3d-early-fusion-training". 

    ```
    cp -r data/DAIR-V2X/cooperative-vehicle-infrastructure/vehicle-side data/DAIR-V2X/cooperative-vehicle-infrastructure/vic3d-early-fusion-training
    ```

2. Convert cooperative label from world coordinate system to vehicle LIDAR system.

    ```
    cd ${dair-v2x_root}/dair-v2x
    rm -r ./data/DAIR-V2X/cooperative-vehicle-infrastructure/vic3d-early-fusion-training/label/lidar
    python tools/dataset_converter/label_world2v.py --source-root ./data/DAIR-V2X/cooperative-vehicle-infrastructure \ 
        --target-root ./data/DAIR-V2X/cooperative-vehicle-infrastructure/vic3d-early-fusion-training/label/lidar
    ```

3. Convert point cloud data from infrastructure coordinate system to vehicle coordinate system.
    ```
    python tools/dataset_converter/point_cloud_i2v.py --source-root ./data/DAIR-V2X/cooperative-vehicle-infrastructure \
        --target-root ./data/DAIR-V2X/cooperative-vehicle-infrastructure/vic3d-early-fusion-training/velodyne/lidar_i2v
    ```

4. Concate converted infrastructure-side point cloud data with vehicle-side point cloud data.
    ```
    python tools/dataset_converter/concatenate_pcd2bin.py --source-root ./data/DAIR-V2X/cooperative-vehicle-infrastructure \
        --i2v-root ./data/DAIR-V2X/cooperative-vehicle-infrastructure/vic3d-early-fusion-training/velodyne/lidar_i2v \
        --target-root ./data/DAIR-V2X/cooperative-vehicle-infrastructure/vic3d-early-fusion-training/velodyne-concated
    rm -r ./data/DAIR-V2X/cooperative-vehicle-infrastructure/vic3d-early-fusion-training/velodyne
    mv ./data/DAIR-V2X/cooperative-vehicle-infrastructure/vic3d-early-fusion-training/velodyne-concated \
        ./data/DAIR-V2X/cooperative-vehicle-infrastructure/vic3d-early-fusion-training/velodyne
    ```
5. Convert vehicle-side data_info.json to cooperative data_info.json
    ```
    python tools/dataset_converter/get_fusion_data_info.py --source-root ./data/DAIR-V2X/cooperative-vehicle-infrastructure \ --target-root ./data/DAIR-V2X/cooperative-vehicle-infrastructure/vic3d-early-fusion-training
    rm ./data/DAIR-V2X/cooperative-vehicle-infrastructure/vic3d-early-fusion-training/data_info.json
    mv ./data/DAIR-V2X/cooperative-vehicle-infrastructure/vic3d-early-fusion-training/fusion_data_info.json ./data/DAIR-V2X/cooperative-vehicle-infrastructure/vic3d-early-fusion-training/data_info.json
    ```
#### Create Kitti-format data (Option for model training)

Data creation should be under the gpu environment.

    # Kitti Format
    cd ${dair-v2x_root}/dair-v2x
    python tools/dataset_converter/dair2kitti.py --source-root ./data/DAIR-V2X/cooperative-vehicle-infrastructure/vic3d-early-fusion-training \
        --target-root ./data/DAIR-V2X/cooperative-vehicle-infrastructure/vic3d-early-fusion-training \
        --split-path ./data/split_datas/cooperative-split-data.json \
        --label-type lidar --sensor-view cooperative --no-classmerge


In the end, the data and info files should be organized as follows
```
└── cooperative-vehicle-infrastructure   <-- DAIR-V2X-C
    └──── infrastructure-side                      <-- DAIR-V2X-C-I
       ├───── image
       ├───── velodyne
       ├───── calib
       ├───── label
       └───── data_info.json 
    └───── vehicle-side                                <-- DAIR-V2X-C-V  
       ├───── image
       ├───── velodyne
       ├───── calib
       ├───── label
       └───── data_info.json
    └────  cooperative 
       ├───── label_world
       └───── data_info.json
    └────  vic3d-early-fusion-training
       ├───── data_info.json
       ├───── ImageSets
       └───── training
          ├───── image_2
          ├───── velodyne
          ├───── label_2
          └───── calib
```

### Training

* Implementation Framework. 
  We directly use MMDetection3D (v0.17.1) to train the 3D detector.
* Detector training details. 
  Before training the detectors, we should follow MMDetection3D to convert the "./data/DAIR-V2X/cooperative-vehicle-infrastructure/vic3d-early-fusion-training" into specific training format.
  Then we train the PointPillars with configure file [trainval_config.py](trainval_config.py)
### Evaluation

Download following checkpoints and place them in this directory.
* [vic3d_earlyfusion_pointpillars](https://drive.google.com/file/d/1mo8o1iIZ2fQHYBkpfmjyMnCqYKs3wQk7/view?usp=sharing)

Then use the following commands to get the evaluation results.

    # An example to get the early fusion evaluation results within [0, 100]m range on VIC-Async-1 dataset
    # bash scripts/eval_lidar_early_fusion_pointpillars.sh [YOUR_CUDA_DEVICE] [FUSION_METHOD] [DELAY_K] [EXTEND_RANGE_START] [EXTEND_RANGE_END] 
    cd ${dair-v2x_root}/dair-v2x/v2x
    bash scripts/eval_lidar_early_fusion_pointpillars.sh 0 early_fusion 1 0 100

* FUSION_METHOD candidates: [early_fusion].
* DELAY_K candidates: [0, 1]. 0 denotes VIC-Sync dataset, 1 denotes VIC-Async-1 dataset.
* [EXTEND_RANGE_START, EXTEND_RANGE_END] candidates: [[0, 100], [0, 30], [30, 50], [50, 100]].

dataset_type = "KittiDataset"
data_root = "../../../../data/DAIR-V2X/cooperative-vehicle-infrastructure/vic3d-early-fusion-training"
class_names = ["Car"]
point_cloud_range = [0, -39.68, -3, 92.16, 39.68, 1]
voxel_size = [0.16, 0.16, 4]
length = int((point_cloud_range[3] - point_cloud_range[0]) / voxel_size[0])
height = int((point_cloud_range[4] - point_cloud_range[1]) / voxel_size[1])
output_shape = [height, length]
z_center_car = -1.78

work_dir = "./work_dirs/vic3d_earlyfusion_pointpillars"

model = dict(
    type="VoxelNet",
    voxel_layer=dict(
        max_num_points=100, point_cloud_range=point_cloud_range, voxel_size=voxel_size, max_voxels=(16000, 40000)
    ),
    voxel_encoder=dict(
        type="PillarFeatureNet",
        in_channels=4,
        feat_channels=[64],
        with_distance=False,
        voxel_size=voxel_size,
        point_cloud_range=point_cloud_range,
    ),
    middle_encoder=dict(type="PointPillarsScatter", in_channels=64, output_shape=output_shape),
    backbone=dict(
        type="SECOND", in_channels=64, layer_nums=[3, 5, 5], layer_strides=[2, 2, 2], out_channels=[64, 128, 256]
    ),
    neck=dict(type="SECONDFPN", in_channels=[64, 128, 256], upsample_strides=[1, 2, 4], out_channels=[128, 128, 128]),
    bbox_head=dict(
        type="Anchor3DHead",
        num_classes=1,
        in_channels=384,
        feat_channels=384,
        use_direction_classifier=True,
        anchor_generator=dict(
            type="Anchor3DRangeGenerator",
            ranges=[
                [
                    point_cloud_range[0],
                    point_cloud_range[1],
                    z_center_car,
                    point_cloud_range[3],
                    point_cloud_range[4],
                    z_center_car,
                ],
            ],
            sizes=[[1.6, 3.9, 1.56]],
            rotations=[0, 1.57],
            reshape_out=False,
        ),
        diff_rad_by_sin=True,
        bbox_coder=dict(type="DeltaXYZWLHRBBoxCoder"),
        loss_cls=dict(type="FocalLoss", use_sigmoid=True, gamma=2.0, alpha=0.25, loss_weight=1.0),
        loss_bbox=dict(type="SmoothL1Loss", beta=0.1111111111111111, loss_weight=2.0),
        loss_dir=dict(type="CrossEntropyLoss", use_sigmoid=False, loss_weight=0.2),
    ),
    train_cfg=dict(
        assigner=[
            dict(
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.6,
                neg_iou_thr=0.45,
                min_pos_iou=0.45,
                ignore_iof_thr=-1,
            ),
        ],
        allowed_border=0,
        pos_weight=-1,
        debug=False,
    ),
    test_cfg=dict(
        use_rotate_nms=False,
        nms_across_levels=False,
        nms_thr=0.01,
        score_thr=0.2,
        min_bbox_size=0,
        nms_pre=1000,
        max_num=300,
    ),
)

file_client_args = dict(backend="disk")
train_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
    dict(type="LoadAnnotations3D", with_bbox_3d=True, with_label_3d=True),
    dict(
        type="ObjectSample",
        db_sampler=dict(
            data_root=data_root,
            info_path=data_root + "/kitti_dbinfos_train.pkl",
            rate=1.0,
            prepare=dict(filter_by_difficulty=[-1], filter_by_min_points=dict(Car=5)),
            classes=class_names,
            sample_groups=dict(Car=15),
        ),
    ),
    dict(
        type="ObjectNoise",
        num_try=100,
        translation_std=[0.25, 0.25, 0.25],
        global_rot_range=[0.0, 0.0],
        rot_range=[-0.15707963267, 0.15707963267],
    ),
    dict(type="RandomFlip3D", flip_ratio_bev_horizontal=0.5),
    dict(type="GlobalRotScaleTrans", rot_range=[-0.78539816, 0.78539816], scale_ratio_range=[0.95, 1.05]),
    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
    dict(type="ObjectRangeFilter", point_cloud_range=point_cloud_range),
    dict(type="PointShuffle"),
    dict(type="DefaultFormatBundle3D", class_names=class_names),
    dict(type="Collect3D", keys=["points", "gt_bboxes_3d", "gt_labels_3d"]),
]
test_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
    dict(
        type="MultiScaleFlipAug3D",
        img_scale=(height, length),
        pts_scale_ratio=1,
        flip=False,
        transforms=[
            dict(type="GlobalRotScaleTrans", rot_range=[0, 0], scale_ratio_range=[1.0, 1.0], translation_std=[0, 0, 0]),
            dict(type="RandomFlip3D"),
            dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
            dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
            dict(type="Collect3D", keys=["points"]),
        ],
    ),
]
eval_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4, file_client_args=dict(backend="disk")),
    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
    dict(type="Collect3D", keys=["points"]),
]
data = dict(
    samples_per_gpu=6,
    workers_per_gpu=4,
    train=dict(
        type="RepeatDataset",
        times=2,
        dataset=dict(
            type="KittiDataset",
            data_root=data_root,
            ann_file=data_root + "/kitti_infos_train.pkl",
            split="training",
            pts_prefix="velodyne_reduced",
            pipeline=[
                dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
                dict(type="LoadAnnotations3D", with_bbox_3d=True, with_label_3d=True),
                dict(
                    type="ObjectSample",
                    db_sampler=dict(
                        data_root=data_root,
                        info_path=data_root + "/kitti_dbinfos_train.pkl",
                        rate=1.0,
                        prepare=dict(filter_by_difficulty=[-1], filter_by_min_points=dict(Car=5)),
                        classes=class_names,
                        sample_groups=dict(Car=15),
                    ),
                ),
                dict(
                    type="ObjectNoise",
                    num_try=100,
                    translation_std=[0.25, 0.25, 0.25],
                    global_rot_range=[0.0, 0.0],
                    rot_range=[-0.15707963267, 0.15707963267],
                ),
                dict(type="RandomFlip3D", flip_ratio_bev_horizontal=0.5),
                dict(type="GlobalRotScaleTrans", rot_range=[-0.78539816, 0.78539816], scale_ratio_range=[0.95, 1.05]),
                dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                dict(type="ObjectRangeFilter", point_cloud_range=point_cloud_range),
                dict(type="PointShuffle"),
                dict(type="DefaultFormatBundle3D", class_names=class_names),
                dict(type="Collect3D", keys=["points", "gt_bboxes_3d", "gt_labels_3d"]),
            ],
            modality=dict(use_lidar=True, use_camera=False),
            classes=class_names,
            test_mode=False,
            pcd_limit_range=point_cloud_range,
            box_type_3d="LiDAR",
        ),
    ),
    val=dict(
        type="KittiDataset",
        data_root=data_root,
        ann_file=data_root + "/kitti_infos_val.pkl",
        split="training",
        pts_prefix="velodyne_reduced",
        pipeline=[
            dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
            dict(
                type="MultiScaleFlipAug3D",
                img_scale=(height, length),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type="GlobalRotScaleTrans",
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0],
                    ),
                    dict(type="RandomFlip3D"),
                    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
                    dict(type="Collect3D", keys=["points"]),
                ],
            ),
        ],
        modality=dict(use_lidar=True, use_camera=False),
        classes=class_names,
        test_mode=True,
        pcd_limit_range=point_cloud_range,
        box_type_3d="LiDAR",
    ),
    test=dict(
        type="KittiDataset",
        data_root=data_root,
        ann_file=data_root + "/kitti_infos_val.pkl",
        split="training",
        pts_prefix="velodyne_reduced",
        pipeline=[
            dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
            dict(
                type="MultiScaleFlipAug3D",
                img_scale=(height, length),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type="GlobalRotScaleTrans",
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0],
                    ),
                    dict(type="RandomFlip3D"),
                    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
                    dict(type="Collect3D", keys=["points"]),
                ],
            ),
        ],
        modality=dict(use_lidar=True, use_camera=False),
        classes=class_names,
        test_mode=True,
        pcd_limit_range=point_cloud_range,
        box_type_3d="LiDAR",
    ),
)
evaluation = dict(
    interval=2,
    pipeline=[
        dict(
            type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4, file_client_args=dict(backend="disk")
        ),
        dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
        dict(type="Collect3D", keys=["points"]),
    ],
)

lr = 0.001
optimizer = dict(type="AdamW", lr=0.001, betas=(0.95, 0.99), weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(policy="cyclic", target_ratio=(10, 0.0001), cyclic_times=1, step_ratio_up=0.4)
momentum_config = dict(policy="cyclic", target_ratio=(0.8947368421052632, 1), cyclic_times=1, step_ratio_up=0.4)
runner = dict(type="EpochBasedRunner", max_epochs=40)
checkpoint_config = dict(interval=10)
log_config = dict(interval=50, hooks=[dict(type="TextLoggerHook"), dict(type="TensorboardLoggerHook")])
dist_params = dict(backend="nccl")
log_level = "INFO"
load_from = None
resume_from = None
workflow = [("train", 1)]
gpu_ids = range(0, 1)


# ImvoxelNet

## Introduction

We implement ImvoxelNet and provide the results and checkpoints on VIC-Sync datasets with MMDetection3D.

## Results and models

| Modality | Fusion      | Model      | Dataset  |         | AP-3D(IoU=0.5) |        |         |         | AP-BEV(IoU=0.5) |        |         | AB(Byte)    | Download                                                     |
| -------- | ----------- | ---------- | -------- | ------- | ------------- | ------ | ------- | ------- | --------------- | ------ | ------- | ------ | ------------------------------------------------------------ |
|          |             |            |          | Overall | 0-30m         | 30-50m | 50-100m | Overall | 0-30m           | 30-50m | 50-100m |   |                                                              |
| Image    | Veh Only   | ImvoxelNet | VIC-Sync |  9.13   | 19.06         | 5.23  | 0.41   | 10.96   | 21.93           | 7.28  | 0.78   | 0      | [model_v](https://drive.google.com/file/d/1dNupazp9t2D6mN8cs1ER8zuf3j9ZHNd6/view?usp=sharing) |
| Image    | Inf Only   | ImvoxelNet | VIC-Sync | 14.02   | 20.56         | 8.89  | 10.57   | 22.10   | 27.33           | 17.45  | 18.92   | 309.38 | [model_i](https://drive.google.com/file/d/1F0QSlsGQhtMd3Q66CcXgQJKZptERYhhk/view?usp=sharing) |
| Image    | Late Fusion | ImvoxelNet | VIC-Sync | 18.77   | 33.47         | 9.43  | 8.62    | 24.85   | 39.49           | 14.68  | 14.96   | 309.38 |        |

## Training & Evaluation

### Data Preparation
#### Download data and organise as follows
```
# For DAIR-V2X-C Dataset located at ${DAIR-V2X-C_DATASET_ROOT}
└── cooperative-vehicle-infrastructure       <-- DAIR-V2X-C
    └──── infrastructure-side                         <-- DAIR-V2X-C-I   
       ├───── image
       ├───── velodyne
       ├───── calib
       ├───── label    
       └────  data_info.json    
    └──── vehicle-side                                         <-- DAIR-V2X-C-V  
       ├───── image
       ├───── velodyne
       ├───── calib
       ├───── label
       └───── data_info.json
    └──── cooperative 
       ├───── label_world
       └───── data_info.json              
```

#### Create a symlink to the dataset root
```
cd ${dair-v2x_root}/dair-v2x
mkdir ./data/DAIR-V2X
ln -s ${DAIR-V2X-C_DATASET_ROOT}/cooperative-vehicle-infrastructure ${dair-v2x_root}/dair-v2x/data/DAIR-V2X
```

#### Create Kitti-format data (Option for model training)

Data creation should be under the gpu environment.
```commandline
# Kitti Format
cd ${dair-v2x_root}/dair-v2x
python tools/dataset_converter/dair2kitti.py --source-root ./data/DAIR-V2X/cooperative-vehicle-infrastructure/infrastructure-side \
    --target-root ./data/DAIR-V2X/cooperative-vehicle-infrastructure/infrastructure-side \
    --split-path ./data/split_datas/cooperative-split-data.json \
    --label-type lidar --sensor-view infrastructure --no-classmerge
python tools/dataset_converter/dair2kitti.py --source-root ./data/DAIR-V2X/cooperative-vehicle-infrastructure/vehicle-side \
    --target-root ./data/DAIR-V2X/cooperative-vehicle-infrastructure/vehicle-side \
    --split-path ./data/split_datas/cooperative-split-data.json \
    --label-type lidar --sensor-view vehicle --no-classmerge
```
In the end, the data and info files should be organized as follows
```
└── cooperative-vehicle-infrastructure   <-- DAIR-V2X-C
    └──── infrastructure-side              <-- DAIR-V2X-C-I
       ├───── image
       ├───── velodyne
       ├───── calib
       ├───── label
       ├───── data_info.json
       ├───── ImageSets
       └────  training
          ├───── image_2
          ├───── velodyne
          ├───── label_2
          └───── calib
       └──── testing   
    ├───── vehicle-side                            <-- DAIR-V2X-C-V  
       ├───── image
       ├───── velodyne
       ├───── calib
       ├───── label
       ├───── data_info.json
       ├───── ImageSets
       └────  training
          ├───── image_2
          ├───── velodyne
          ├───── label_2
          └───── calib
    └────  cooperative 
       ├───── label_world
       └───── data_info.json
```

* VIC-Sync Dataset. VIC-Sync dataset is extracted from DAIR-V2X-C, which is composed of 9311 pairs of infrastructure and vehicle frames as well as their cooperative annotations as ground truth.
  We split VIC-Sync dataset to train/valid/test part as 5:2:3 respectively. 
  Please refer [split data](../../../data/split_datas/cooperative-split-data.json) for the splitting file.


### Training
* Implementation Framework. 
  We directly use MMDetection3D (v0.17.1) to train the infrastructure 3D detector and vehicle 3D detector.
* Infrastructure detector training details. 
  Before training the detectors, we should follow MMDetection3D to convert the "./data/DAIR-V2X/cooperative-vehicle-infrastructure/infrastructure-side" into specific training format.
  Then we train the PointPillars with configure file [trainval_config_i.py](./trainval_config_i.py)
  
* Vehicle detector training details. 
  Before training the detectors, we should follow MMDetection3D to convert the "./data/DAIR-V2X/cooperative-vehicle-infrastructure/vehicle-side" into specific training format.
  Then we train the PointPillars with configure file [trainval_config_v.py](./trainval_config_v.py)
  
### Evaluation

Download following checkpoints and place them in this directory.
* [vic3d_latefusion_inf_imvoxelnet](https://drive.google.com/file/d/1F0QSlsGQhtMd3Q66CcXgQJKZptERYhhk/view?usp=sharing)
* [vic3d_latefusion_veh_imvoxelnet](https://drive.google.com/file/d/1dNupazp9t2D6mN8cs1ER8zuf3j9ZHNd6/view?usp=sharing)    

Then use the following commands to get the evaluation results.
```
# An example to get the late fusion evaluation results within [0, 100]m range on VIC-Sync dataset
# bash scripts/eval_camera_late_fusion_imvoxelnet.sh [YOUR_CUDA_DEVICE] [FUSION_METHOD] [DELAY_K] [EXTEND_RANGE_START] [EXTEND_RANGE_END] [TIME_COMPENSATION]
cd ${dair-v2x_root}/dair-v2x/v2x
bash scripts/eval_camera_late_fusion_imvoxelnet.sh 0 late_fusion 0 0 100 --no-comp
```
* FUSION_METHOD candidates: [veh_only, inf_only, late_fusion].
* DELAY_K candidates: [0, 1, 2]. 0 denotes VIC-Sync dataset, 1 denotes VIC-Async-1 dataset, 
  2 denotes VIC-Async-2 dataset.
* [EXTEND_RANGE_START, EXTEND_RANGE_END] candidates: [[0, 100], [0, 30], [30, 50], [50, 100]].
* TIME_COMPENSATION candidates: [, --no-comp]. Empty denotes that we use time compensation to alleviate the temporal asyncrony problem.

dataset_type = 'KittiDataset'
data_root = '../../../../data/DAIR-V2X/cooperative-vehicle-infrastructure/vehicle-side/'
class_names = ['Car']
input_modality = dict(use_lidar=False, use_camera=True)
point_cloud_range = [0, -39.68, -3, 92.16, 39.68, 1]
voxel_size = [0.32, 0.32, 0.33]
length = int((point_cloud_range[3] - point_cloud_range[0]) / voxel_size[0])
width = int((point_cloud_range[4] - point_cloud_range[1]) / voxel_size[1])
height = int((point_cloud_range[5] - point_cloud_range[2]) / voxel_size[2])
output_shape = [width, length, height]
img_norm_cfg = dict(
            mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
img_scale = (960, 540)
img_resize_scale = [(912, 513), (1008, 567)]

work_dir = './work_dirs/vic3d_latefusion_veh_imvoxelnet'

model = dict(
    type='ImVoxelNet',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=False),
        norm_eval=True,
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50'),
        style='pytorch'),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=64,
        num_outs=4),
    neck_3d=dict(type='OutdoorImVoxelNeck', in_channels=64, out_channels=256),
    bbox_head=dict(
        type='Anchor3DHead',
        num_classes=1,
        in_channels=256,
        feat_channels=256,
        use_direction_classifier=True,
        anchor_generator=dict(
            type='AlignedAnchor3DRangeGenerator',
            ranges=[[0, -39.68, -1.78, 92.16, 39.68, -1.78]],
            sizes=[[3.9, 1.6, 1.56]],
            rotations=[0, 1.57],
            reshape_out=True),
        diff_rad_by_sin=True,
        bbox_coder=dict(type='DeltaXYZWLHRBBoxCoder'),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=1.0),
        loss_bbox=dict(type='SmoothL1Loss', beta=1.0 / 9.0, loss_weight=2.0),
        loss_dir=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.2)),
    n_voxels=output_shape,
    anchor_generator=dict(
        type='AlignedAnchor3DRangeGenerator',
        ranges=[[0, -39.68, -3.08, 92.16, 39.68, 0.76]],
        rotations=[.0]),
    train_cfg=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            iou_calculator=dict(type='BboxOverlapsNearest3D'),
            pos_iou_thr=0.6,
            neg_iou_thr=0.45,
            min_pos_iou=0.45,
            ignore_iof_thr=-1),
        allowed_border=0,
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        use_rotate_nms=True,
        nms_across_levels=False,
        nms_thr=0.01,
        score_thr=0.1,
        min_bbox_size=0,
        nms_pre=100,
        max_num=50))

train_pipeline = [
    dict(type='LoadAnnotations3D'),
    dict(type='LoadImageFromFile'),
    dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),
    dict(
        type='Resize',
        img_scale=img_resize_scale,
        keep_ratio=True,
        multiscale_mode='range'),
    dict(type='Normalize', **img_norm_cfg),
    dict(type='Pad', size_divisor=32),
    dict(type='ObjectRangeFilter', point_cloud_range=point_cloud_range),
    dict(type='DefaultFormatBundle3D', class_names=class_names),
    dict(type='Collect3D', keys=['img', 'gt_bboxes_3d', 'gt_labels_3d'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', img_scale=img_scale, keep_ratio=True),
    dict(type='Normalize', **img_norm_cfg),
    dict(type='Pad', size_divisor=32),
    dict(
        type='DefaultFormatBundle3D',
        class_names=class_names,
        with_label=False),
    dict(type='Collect3D', keys=['img'])
]

data = dict(
    samples_per_gpu=4,
    workers_per_gpu=4,
    train=dict(
        type='RepeatDataset',
        times=3,
        dataset=dict(
            type=dataset_type,
            data_root=data_root,
            ann_file=data_root + 'kitti_infos_train.pkl',
            split='training',
            pts_prefix='velodyne_reduced',
            pipeline=train_pipeline,
            modality=input_modality,
            classes=class_names,
            test_mode=False)),
    val=dict(
        type=dataset_type,
        data_root=data_root,
        ann_file=data_root + 'kitti_infos_val.pkl',
        split='training',
        pts_prefix='velodyne_reduced',
        pipeline=test_pipeline,
        modality=input_modality,
        classes=class_names,
        test_mode=True),
    test=dict(
        type=dataset_type,
        data_root=data_root,
        ann_file=data_root + 'kitti_infos_val.pkl',
        split='training',
        pts_prefix='velodyne_reduced',
        pipeline=test_pipeline,
        modality=input_modality,
        classes=class_names,
        box_type_3d="Lidar",
        test_mode=True))

optimizer = dict(
    type='AdamW',
    lr=0.0001,
    weight_decay=0.0001,
    paramwise_cfg=dict(
        custom_keys={'backbone': dict(lr_mult=0.1, decay_mult=1.0)}))
optimizer_config = dict(grad_clip=dict(max_norm=35., norm_type=2))
lr_config = dict(policy='step', step=[8, 11])
total_epochs = 12

checkpoint_config = dict(interval=1, max_keep_ckpts=1)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
evaluation = dict(interval=1)
dist_params = dict(backend='nccl')
find_unused_parameters = True  # only 1 of 4 FPN outputs is used
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]



dataset_type = 'KittiDataset'
data_root = '../../../../data/DAIR-V2X/cooperative-vehicle-infrastructure/infrastructure-side/'
class_names = ['Car']
input_modality = dict(use_lidar=False, use_camera=True)
point_cloud_range = [0, -39.68, -3, 92.16, 39.68, 1]
voxel_size = [0.32, 0.32, 0.33]
length = int((point_cloud_range[3] - point_cloud_range[0]) / voxel_size[0])
width = int((point_cloud_range[4] - point_cloud_range[1]) / voxel_size[1])
height = int((point_cloud_range[5] - point_cloud_range[2]) / voxel_size[2])
output_shape = [width, length, height]
img_norm_cfg = dict(
            mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
img_scale = (960, 540)
img_resize_scale = [(912, 513), (1008, 567)]

work_dir = './work_dirs/vic3d_latefusion_inf_imvoxelnet'

model = dict(
    type='ImVoxelNet',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=False),
        norm_eval=True,
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50'),
        style='pytorch'),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=64,
        num_outs=4),
    neck_3d=dict(type='OutdoorImVoxelNeck', in_channels=64, out_channels=256),
    bbox_head=dict(
        type='Anchor3DHead',
        num_classes=1,
        in_channels=256,
        feat_channels=256,
        use_direction_classifier=True,
        anchor_generator=dict(
            type='AlignedAnchor3DRangeGenerator',
            ranges=[[0, -39.68, -1.78, 92.16, 39.68, -1.78]],
            sizes=[[3.9, 1.6, 1.56]],
            rotations=[0, 1.57],
            reshape_out=True),
        diff_rad_by_sin=True,
        bbox_coder=dict(type='DeltaXYZWLHRBBoxCoder'),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=1.0),
        loss_bbox=dict(type='SmoothL1Loss', beta=1.0 / 9.0, loss_weight=2.0),
        loss_dir=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.2)),
    n_voxels=output_shape,
    anchor_generator=dict(
        type='AlignedAnchor3DRangeGenerator',
        ranges=[[0, -39.68, -3.08, 92.16, 39.68, 0.76]],
        rotations=[.0]),
    train_cfg=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            iou_calculator=dict(type='BboxOverlapsNearest3D'),
            pos_iou_thr=0.6,
            neg_iou_thr=0.45,
            min_pos_iou=0.45,
            ignore_iof_thr=-1),
        allowed_border=0,
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        use_rotate_nms=True,
        nms_across_levels=False,
        nms_thr=0.01,
        score_thr=0.1,
        min_bbox_size=0,
        nms_pre=100,
        max_num=50))

train_pipeline = [
    dict(type='LoadAnnotations3D'),
    dict(type='LoadImageFromFile'),
    dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),
    dict(
        type='Resize',
        img_scale=img_resize_scale,
        keep_ratio=True,
        multiscale_mode='range'),
    dict(type='Normalize', **img_norm_cfg),
    dict(type='Pad', size_divisor=32),
    dict(type='ObjectRangeFilter', point_cloud_range=point_cloud_range),
    dict(type='DefaultFormatBundle3D', class_names=class_names),
    dict(type='Collect3D', keys=['img', 'gt_bboxes_3d', 'gt_labels_3d'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', img_scale=img_scale, keep_ratio=True),
    dict(type='Normalize', **img_norm_cfg),
    dict(type='Pad', size_divisor=32),
    dict(
        type='DefaultFormatBundle3D',
        class_names=class_names,
        with_label=False),
    dict(type='Collect3D', keys=['img'])
]

data = dict(
    samples_per_gpu=1,
    workers_per_gpu=1,
    train=dict(
        type='RepeatDataset',
        times=1,
        dataset=dict(
            type=dataset_type,
            data_root=data_root,
            ann_file=data_root + 'kitti_infos_train.pkl',
            split='training',
            pts_prefix='velodyne_reduced',
            pipeline=train_pipeline,
            modality=input_modality,
            classes=class_names,
            test_mode=False)),
    val=dict(
        type=dataset_type,
        data_root=data_root,
        ann_file=data_root + 'kitti_infos_val.pkl',
        split='training',
        pts_prefix='velodyne_reduced',
        pipeline=test_pipeline,
        modality=input_modality,
        classes=class_names,
        test_mode=True),
    test=dict(
        type=dataset_type,
        data_root=data_root,
        ann_file=data_root + 'kitti_infos_val.pkl',
        split='training',
        pts_prefix='velodyne_reduced',
        pipeline=test_pipeline,
        modality=input_modality,
        classes=class_names,
        box_type_3d="Lidar",
        test_mode=True))

optimizer = dict(
    type='AdamW',
    lr=0.0001,
    weight_decay=0.0001,
    paramwise_cfg=dict(
        custom_keys={'backbone': dict(lr_mult=0.1, decay_mult=1.0)}))
optimizer_config = dict(grad_clip=dict(max_norm=35., norm_type=2))
lr_config = dict(policy='step', step=[8, 11])
total_epochs = 12

checkpoint_config = dict(interval=1, max_keep_ckpts=1)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
evaluation = dict(interval=1)
dist_params = dict(backend='nccl')
find_unused_parameters = True  # only 1 of 4 FPN outputs is used
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]

## Introduction
We choose the PointPillars as the infrastructure 3D detector and vehicle 3D detector respectively.
We use the late fusion to fuse the infrastruture and vehicle information.
We apply our Time Compensation Late Fusion (TCLF) to alleviate the temporal asynchrony problem.
We train and inference the two 3D detectors on DAIR-V2X-C with MMDetection3D Framework.
We inference the whole VIC3D detector and evaluate detection performance with our OpenDAIRV2X Framework.

## Results and models
We provide the evaluation results here.
Note that the evaluation results are higher than the results reported in our CVPR2022 Paper.

| Modality  | Fusion  | Model      | Dataset   | AP-3D (IoU=0.5)  |        |        |         | AP-BEV (IoU=0.5)  |       |        |         |   AB   | Model Download |
| :-------: | :-----: | :--------: | :-------: | :----: | :----: | :----: | :-----: | :-----: | :---: | :----: | :-----: | :----: | :----:                |
|           |         |            |           | Overall | 0-30m | 30-50m | 50-100m | Overall | 0-30m | 30-50m | 50-100m |        | [inf-model](https://drive.google.com/file/d/1BO5dbqmLjC3gTjvQTyfEjhIikFz2P_Om/view?usp=sharing) & [veh-model](https://drive.google.com/file/d/1tY1sqQGGSaRoA8KDeIQPjcUZ20I82wTK/view?usp=sharing)    
|Pointcloud | VehOnly | PointPillars | VIC-Sync | 48.06  | 47.62 | 63.51  | 44.37   | 52.24   | 30.55 | 66.03  |  48.36  | 0      | 
|           | InfOnly | PointPillars | VIC-Sync | 17.58  | 23.00 | 13.96  | 9.17    | 27.26   | 29.07 | 23.92  | 26.64   | 478.61      |        
|       | Late-Fusion | PointPillars | VIC-Sync | 56.06  | 55.69 | 68.44  | 53.60   | 62.06   | 61.52 | 72.53  | 60.57   | 478.61 |                         
|       | Late-Fusion | PointPillars |VIC-Async-1| 53.80 | 53.26 | 67.40  | 50.85   | 59.94   | 59.51 | 71.45  | 57.74   | 341.08 | 
|       | Late-Fusion | PointPillars |VIC-Async-2| 52.43 | 51.13 | 67.09  | 49.86   | 58.10   | 57.23 | 70.86  | 55.78   | 478.01 |
|       | TCLF        | PointPillars |VIC-Async-1| 54.09 | 53.43 | 67.50  | 51.38   | 60.19   | 59.52 | 71.52  | 58.31   | 907.64 | 
|       | TCLF        | PointPillars |VIC-Async-2| 53.37 | 52.41 | 67.33  | 50.87   | 59.17   | 58.25 | 71.20  | 57.43   | 897.91 |

## Training & Evaluation

### Data Preparation
#### Download data and organise as follows
```
# For DAIR-V2X-C Dataset located at ${DAIR-V2X-C_DATASET_ROOT}
└── cooperative-vehicle-infrastructure       <-- DAIR-V2X-C
    └──── infrastructure-side                         <-- DAIR-V2X-C-I   
       ├───── image
       ├───── velodyne
       ├───── calib
       ├───── label    
       └────  data_info.json    
    └──── vehicle-side                                         <-- DAIR-V2X-C-V  
       ├───── image
       ├───── velodyne
       ├───── calib
       ├───── label
       └───── data_info.json
    └──── cooperative 
       ├───── label_world
       └───── data_info.json              
```

#### Create a symlink to the dataset root
```
cd ${dair-v2x_root}/dair-v2x
mkdir ./data/DAIR-V2X
ln -s ${DAIR-V2X-C_DATASET_ROOT}/cooperative-vehicle-infrastructure ${dair-v2x_root}/dair-v2x/data/DAIR-V2X
```

#### Create Kitti-format data (Option for model training)

Data creation should be under the gpu environment.
```commandline
# Kitti Format
cd ${dair-v2x_root}/dair-v2x
python tools/dataset_converter/dair2kitti.py --source-root ./data/DAIR-V2X/cooperative-vehicle-infrastructure/infrastructure-side \
    --target-root ./data/DAIR-V2X/cooperative-vehicle-infrastructure/infrastructure-side \
    --split-path ./data/split_datas/cooperative-split-data.json \
    --label-type lidar --sensor-view infrastructure --no-classmerge
python tools/dataset_converter/dair2kitti.py --source-root ./data/DAIR-V2X/cooperative-vehicle-infrastructure/vehicle-side \
    --target-root ./data/DAIR-V2X/cooperative-vehicle-infrastructure/vehicle-side \
    --split-path ./data/split_datas/cooperative-split-data.json \
    --label-type lidar --sensor-view vehicle --no-classmerge
```
In the end, the data and info files should be organized as follows
```
└── cooperative-vehicle-infrastructure   <-- DAIR-V2X-C
    └──── infrastructure-side              <-- DAIR-V2X-C-I
       ├───── image
       ├───── velodyne
       ├───── calib
       ├───── label
       ├───── data_info.json
       ├───── ImageSets
       └────  training
          ├───── image_2
          ├───── velodyne
          ├───── label_2
          └───── calib
       └──── testing   
    ├───── vehicle-side                            <-- DAIR-V2X-C-V  
       ├───── image
       ├───── velodyne
       ├───── calib
       ├───── label
       ├───── data_info.json
       ├───── ImageSets
       └────  training
          ├───── image_2
          ├───── velodyne
          ├───── label_2
          └───── calib
    └────  cooperative 
       ├───── label_world
       └───── data_info.json
```

* VIC-Sync Dataset. VIC-Sync dataset is extracted from DAIR-V2X-C, which is composed of 9311 pairs of infrastructure and vehicle frames as well as their cooperative annotations as ground truth.
  We split VIC-Sync dataset to train/valid/test part as 5:2:3 respectively. 
  Please refer [split data](../../../data/split_datas/cooperative-split-data.json) for the splitting file. 
  
* VIC-Async Dataset. To simulate the temporal asynchrony phenomenon, 
  we replace each infrastructure frame in the VIC-Sync dataset with the infrastructure frame, 
  which is the k-th frame previous to the original infrastructure frame to construct the VIC-Async-k dataset.
  Note that the k-th frame previous to some frames may not exist.
  In this case, we directly replace it with the current frame.


### Training
* Implementation Framework. 
  We directly use MMDetection3D (v0.17.1) to train the infrastructure 3D detector and vehicle 3D detector.
* Infrastructure detector training details. 
  Before training the detectors, we should follow MMDetection3D to convert the "./data/DAIR-V2X/cooperative-vehicle-infrastructure/infrastructure-side" into specific training format.
  Then we train the PointPillars with configure file [trainval_config_i.py](trainval_config_i.py)
  
* Vehicle detector training details. 
  Before training the detectors, we should follow MMDetection3D to convert the "./data/DAIR-V2X/cooperative-vehicle-infrastructure/vehicle-side" into specific training format.
  Then we train the PointPillars with configure file [trainval_config_v.py](trainval_config_v.py)
  
### Evaluation

Download following checkpoints and place them in this directory.
* [vic3d_latefusion_inf_pointpillars](https://drive.google.com/file/d/1BO5dbqmLjC3gTjvQTyfEjhIikFz2P_Om/view?usp=sharing)
* [vic3d_latefusion_veh_pointpillars](https://drive.google.com/file/d/1tY1sqQGGSaRoA8KDeIQPjcUZ20I82wTK/view?usp=sharing)    

Then use the following commands to get the evaluation results.
```
# An example to get the TCLF evaluation results within [0, 100]m range on VIC-Async-2 dataset
# bash scripts/eval_lidar_late_fusion_pointpillars.sh [YOUR_CUDA_DEVICE] [FUSION_METHOD] [DELAY_K] [EXTEND_RANGE_START] [EXTEND_RANGE_END] [TIME_COMPENSATION]
cd ${dair-v2x_root}/dair-v2x/v2x
bash scripts/eval_lidar_late_fusion_pointpillars.sh 0 late_fusion 2 0 100
```
* FUSION_METHOD candidates: [veh_only, inf_only, late_fusion].
* DELAY_K candidates: [0, 1, 2]. 0 denotes VIC-Sync dataset, 1 denotes VIC-Async-1 dataset, 
  2 denotes VIC-Async-2 dataset.
* [EXTEND_RANGE_START, EXTEND_RANGE_END] candidates: [[0, 100], [0, 30], [30, 50], [50, 100]].
* TIME_COMPENSATION candidates: [, --no-comp]. Empty denotes that we use time compensation to alleviate the temporal asyncrony problem.

dataset_type = "KittiDataset"
data_root = "../../../../data/DAIR-V2X/cooperative-vehicle-infrastructure/vehicle-side/"
class_names = ["Pedestrian", "Cyclist", "Car"]
# point_cloud_range = [0, -39.68, -3, 69.12, 39.68, 1]
point_cloud_range = [0, -39.68, -3, 92.16, 39.68, 1]
voxel_size = [0.16, 0.16, 4]
length = int((point_cloud_range[3] - point_cloud_range[0]) / voxel_size[0])
height = int((point_cloud_range[4] - point_cloud_range[1]) / voxel_size[1])
output_shape = [height, length]
z_center_pedestrian = -0.6
z_center_cyclist = -0.6
z_center_car = -1.78

work_dir = "./work_dirs/vic3d_latefusion_veh_pointpillars"

model = dict(
    type="VoxelNet",
    voxel_layer=dict(
        max_num_points=32, point_cloud_range=point_cloud_range, voxel_size=voxel_size, max_voxels=(16000, 40000)
    ),
    voxel_encoder=dict(
        type="PillarFeatureNet",
        in_channels=4,
        feat_channels=[64],
        with_distance=False,
        voxel_size=voxel_size,
        point_cloud_range=point_cloud_range,
    ),
    middle_encoder=dict(type="PointPillarsScatter", in_channels=64, output_shape=output_shape),
    backbone=dict(
        type="SECOND", in_channels=64, layer_nums=[3, 5, 5], layer_strides=[2, 2, 2], out_channels=[64, 128, 256]
    ),
    neck=dict(type="SECONDFPN", in_channels=[64, 128, 256], upsample_strides=[1, 2, 4], out_channels=[128, 128, 128]),
    bbox_head=dict(
        type="Anchor3DHead",
        num_classes=3,
        in_channels=384,
        feat_channels=384,
        use_direction_classifier=True,
        anchor_generator=dict(
            type="Anchor3DRangeGenerator",
            ranges=[
                [
                    point_cloud_range[0],
                    point_cloud_range[1],
                    z_center_pedestrian,
                    point_cloud_range[3],
                    point_cloud_range[4],
                    z_center_pedestrian,
                ],
                [
                    point_cloud_range[0],
                    point_cloud_range[1],
                    z_center_cyclist,
                    point_cloud_range[3],
                    point_cloud_range[4],
                    z_center_cyclist,
                ],
                [
                    point_cloud_range[0],
                    point_cloud_range[1],
                    z_center_car,
                    point_cloud_range[3],
                    point_cloud_range[4],
                    z_center_car,
                ],
            ],
            sizes=[[0.6, 0.8, 1.73], [0.6, 1.76, 1.73], [1.6, 3.9, 1.56]],
            rotations=[0, 1.57],
            reshape_out=False,
        ),
        diff_rad_by_sin=True,
        bbox_coder=dict(type="DeltaXYZWLHRBBoxCoder"),
        loss_cls=dict(type="FocalLoss", use_sigmoid=True, gamma=2.0, alpha=0.25, loss_weight=1.0),
        loss_bbox=dict(type="SmoothL1Loss", beta=0.1111111111111111, loss_weight=2.0),
        loss_dir=dict(type="CrossEntropyLoss", use_sigmoid=False, loss_weight=0.2),
    ),
    train_cfg=dict(
        assigner=[
            dict(
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.5,
                neg_iou_thr=0.35,
                min_pos_iou=0.35,
                ignore_iof_thr=-1,
            ),
            dict(
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.5,
                neg_iou_thr=0.35,
                min_pos_iou=0.35,
                ignore_iof_thr=-1,
            ),
            dict(
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.6,
                neg_iou_thr=0.45,
                min_pos_iou=0.45,
                ignore_iof_thr=-1,
            ),
        ],
        allowed_border=0,
        pos_weight=-1,
        debug=False,
    ),
    test_cfg=dict(
        use_rotate_nms=True,
        nms_across_levels=False,
        nms_thr=0.01,
        score_thr=0.1,
        min_bbox_size=0,
        nms_pre=100,
        max_num=50,
    ),
)

file_client_args = dict(backend="disk")
train_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
    dict(type="LoadAnnotations3D", with_bbox_3d=True, with_label_3d=True),
    dict(
        type="ObjectSample",
        db_sampler=dict(
            data_root=data_root,
            info_path=data_root + "/kitti_dbinfos_train.pkl",
            rate=1.0,
            prepare=dict(filter_by_difficulty=[-1], filter_by_min_points=dict(Car=5, Pedestrian=10, Cyclist=10)),
            classes=class_names,
            sample_groups=dict(Car=15, Pedestrian=10, Cyclist=10),
        ),
    ),
    dict(
        type="ObjectNoise",
        num_try=100,
        translation_std=[0.25, 0.25, 0.25],
        global_rot_range=[0.0, 0.0],
        rot_range=[-0.15707963267, 0.15707963267],
    ),
    dict(type="RandomFlip3D", flip_ratio_bev_horizontal=0.5),
    dict(type="GlobalRotScaleTrans", rot_range=[-0.78539816, 0.78539816], scale_ratio_range=[0.95, 1.05]),
    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
    dict(type="ObjectRangeFilter", point_cloud_range=point_cloud_range),
    dict(type="PointShuffle"),
    dict(type="DefaultFormatBundle3D", class_names=class_names),
    dict(type="Collect3D", keys=["points", "gt_bboxes_3d", "gt_labels_3d"]),
]
test_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
    dict(
        type="MultiScaleFlipAug3D",
        img_scale=(height, length),  # (1333, 800),
        pts_scale_ratio=1,
        flip=False,
        transforms=[
            dict(type="GlobalRotScaleTrans", rot_range=[0, 0], scale_ratio_range=[1.0, 1.0], translation_std=[0, 0, 0]),
            dict(type="RandomFlip3D"),
            dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
            dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
            dict(type="Collect3D", keys=["points"]),
        ],
    ),
]
eval_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4, file_client_args=dict(backend="disk")),
    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
    dict(type="Collect3D", keys=["points"]),
]
data = dict(
    samples_per_gpu=6,
    workers_per_gpu=4,
    train=dict(
        type="RepeatDataset",
        times=2,
        dataset=dict(
            type="KittiDataset",
            data_root=data_root,
            ann_file=data_root + "/kitti_infos_train.pkl",
            split="training",
            pts_prefix="velodyne_reduced",
            pipeline=[
                dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
                dict(type="LoadAnnotations3D", with_bbox_3d=True, with_label_3d=True),
                dict(
                    type="ObjectSample",
                    db_sampler=dict(
                        data_root=data_root,
                        info_path=data_root + "/kitti_dbinfos_train.pkl",
                        rate=1.0,
                        prepare=dict(
                            filter_by_difficulty=[-1], filter_by_min_points=dict(Car=5, Pedestrian=10, Cyclist=10)
                        ),
                        classes=class_names,
                        sample_groups=dict(Car=15, Pedestrian=10, Cyclist=10),
                    ),
                ),
                dict(
                    type="ObjectNoise",
                    num_try=100,
                    translation_std=[0.25, 0.25, 0.25],
                    global_rot_range=[0.0, 0.0],
                    rot_range=[-0.15707963267, 0.15707963267],
                ),
                dict(type="RandomFlip3D", flip_ratio_bev_horizontal=0.5),
                dict(type="GlobalRotScaleTrans", rot_range=[-0.78539816, 0.78539816], scale_ratio_range=[0.95, 1.05]),
                dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                dict(type="ObjectRangeFilter", point_cloud_range=point_cloud_range),
                dict(type="PointShuffle"),
                dict(type="DefaultFormatBundle3D", class_names=class_names),
                dict(type="Collect3D", keys=["points", "gt_bboxes_3d", "gt_labels_3d"]),
            ],
            modality=dict(use_lidar=True, use_camera=False),
            classes=class_names,
            test_mode=False,
            pcd_limit_range=point_cloud_range,
            box_type_3d="LiDAR",
        ),
    ),
    val=dict(
        type="KittiDataset",
        data_root=data_root,
        ann_file=data_root + "/kitti_infos_val.pkl",
        split="training",
        pts_prefix="velodyne_reduced",
        pipeline=[
            dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
            dict(
                type="MultiScaleFlipAug3D",
                img_scale=(height, length),  # (1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type="GlobalRotScaleTrans",
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0],
                    ),
                    dict(type="RandomFlip3D"),
                    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
                    dict(type="Collect3D", keys=["points"]),
                ],
            ),
        ],
        modality=dict(use_lidar=True, use_camera=False),
        classes=class_names,
        test_mode=True,
        pcd_limit_range=point_cloud_range,
        box_type_3d="LiDAR",
    ),
    test=dict(
        type="KittiDataset",
        data_root=data_root,
        ann_file=data_root + "/kitti_infos_val.pkl",
        split="training",
        pts_prefix="velodyne_reduced",
        pipeline=[
            dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
            dict(
                type="MultiScaleFlipAug3D",
                img_scale=(height, length),  # (1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type="GlobalRotScaleTrans",
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0],
                    ),
                    dict(type="RandomFlip3D"),
                    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
                    dict(type="Collect3D", keys=["points"]),
                ],
            ),
        ],
        modality=dict(use_lidar=True, use_camera=False),
        classes=class_names,
        test_mode=True,
        pcd_limit_range=point_cloud_range,
        box_type_3d="LiDAR",
    ),
)
evaluation = dict(
    interval=2,
    pipeline=[
        dict(
            type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4, file_client_args=dict(backend="disk")
        ),
        dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
        dict(type="Collect3D", keys=["points"]),
    ],
)

lr = 0.001
optimizer = dict(type="AdamW", lr=0.001, betas=(0.95, 0.99), weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(policy="cyclic", target_ratio=(10, 0.0001), cyclic_times=1, step_ratio_up=0.4)
momentum_config = dict(policy="cyclic", target_ratio=(0.8947368421052632, 1), cyclic_times=1, step_ratio_up=0.4)
runner = dict(type="EpochBasedRunner", max_epochs=20)
checkpoint_config = dict(interval=10)
log_config = dict(interval=50, hooks=[dict(type="TextLoggerHook"), dict(type="TensorboardLoggerHook")])
dist_params = dict(backend="nccl")
log_level = "INFO"
load_from = None
resume_from = None
workflow = [("train", 1)]
gpu_ids = range(0, 1)


dataset_type = "KittiDataset"
data_root = "../../../../data/DAIR-V2X/cooperative-vehicle-infrastructure/infrastructure-side/"
class_names = ["Pedestrian", "Cyclist", "Car"]
# point_cloud_range = [0, -39.68, -3, 69.12, 39.68, 1]
point_cloud_range = [0, -39.68, -3, 92.16, 39.68, 1]
voxel_size = [0.16, 0.16, 4]
length = int((point_cloud_range[3] - point_cloud_range[0]) / voxel_size[0])
height = int((point_cloud_range[4] - point_cloud_range[1]) / voxel_size[1])
output_shape = [height, length]
z_center_pedestrian = -0.6
z_center_cyclist = -0.6
z_center_car = -1.78

work_dir = "./work_dirs/vic3d_latefusion_inf_pointpillars"

model = dict(
    type="VoxelNet",
    voxel_layer=dict(
        max_num_points=32, point_cloud_range=point_cloud_range, voxel_size=voxel_size, max_voxels=(16000, 40000)
    ),
    voxel_encoder=dict(
        type="PillarFeatureNet",
        in_channels=4,
        feat_channels=[64],
        with_distance=False,
        voxel_size=voxel_size,
        point_cloud_range=point_cloud_range,
    ),
    middle_encoder=dict(type="PointPillarsScatter", in_channels=64, output_shape=output_shape),
    backbone=dict(
        type="SECOND", in_channels=64, layer_nums=[3, 5, 5], layer_strides=[2, 2, 2], out_channels=[64, 128, 256]
    ),
    neck=dict(type="SECONDFPN", in_channels=[64, 128, 256], upsample_strides=[1, 2, 4], out_channels=[128, 128, 128]),
    bbox_head=dict(
        type="Anchor3DHead",
        num_classes=3,
        in_channels=384,
        feat_channels=384,
        use_direction_classifier=True,
        anchor_generator=dict(
            type="Anchor3DRangeGenerator",
            ranges=[
                [
                    point_cloud_range[0],
                    point_cloud_range[1],
                    z_center_pedestrian,
                    point_cloud_range[3],
                    point_cloud_range[4],
                    z_center_pedestrian,
                ],
                [
                    point_cloud_range[0],
                    point_cloud_range[1],
                    z_center_cyclist,
                    point_cloud_range[3],
                    point_cloud_range[4],
                    z_center_cyclist,
                ],
                [
                    point_cloud_range[0],
                    point_cloud_range[1],
                    z_center_car,
                    point_cloud_range[3],
                    point_cloud_range[4],
                    z_center_car,
                ],
            ],
            sizes=[[0.6, 0.8, 1.73], [0.6, 1.76, 1.73], [1.6, 3.9, 1.56]],
            rotations=[0, 1.57],
            reshape_out=False,
        ),
        diff_rad_by_sin=True,
        bbox_coder=dict(type="DeltaXYZWLHRBBoxCoder"),
        loss_cls=dict(type="FocalLoss", use_sigmoid=True, gamma=2.0, alpha=0.25, loss_weight=1.0),
        loss_bbox=dict(type="SmoothL1Loss", beta=0.1111111111111111, loss_weight=2.0),
        loss_dir=dict(type="CrossEntropyLoss", use_sigmoid=False, loss_weight=0.2),
    ),
    train_cfg=dict(
        assigner=[
            dict(
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.5,
                neg_iou_thr=0.35,
                min_pos_iou=0.35,
                ignore_iof_thr=-1,
            ),
            dict(
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.5,
                neg_iou_thr=0.35,
                min_pos_iou=0.35,
                ignore_iof_thr=-1,
            ),
            dict(
                type="MaxIoUAssigner",
                iou_calculator=dict(type="BboxOverlapsNearest3D"),
                pos_iou_thr=0.6,
                neg_iou_thr=0.45,
                min_pos_iou=0.45,
                ignore_iof_thr=-1,
            ),
        ],
        allowed_border=0,
        pos_weight=-1,
        debug=False,
    ),
    test_cfg=dict(
        use_rotate_nms=True,
        nms_across_levels=False,
        nms_thr=0.01,
        score_thr=0.1,
        min_bbox_size=0,
        nms_pre=100,
        max_num=50,
    ),
)

file_client_args = dict(backend="disk")
train_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
    dict(type="LoadAnnotations3D", with_bbox_3d=True, with_label_3d=True),
    dict(
        type="ObjectSample",
        db_sampler=dict(
            data_root=data_root,
            info_path=data_root + "/kitti_dbinfos_train.pkl",
            rate=1.0,
            prepare=dict(filter_by_difficulty=[-1], filter_by_min_points=dict(Car=5, Pedestrian=10, Cyclist=10)),
            classes=class_names,
            sample_groups=dict(Car=15, Pedestrian=10, Cyclist=10),
        ),
    ),
    dict(
        type="ObjectNoise",
        num_try=100,
        translation_std=[0.25, 0.25, 0.25],
        global_rot_range=[0.0, 0.0],
        rot_range=[-0.15707963267, 0.15707963267],
    ),
    dict(type="RandomFlip3D", flip_ratio_bev_horizontal=0.5),
    dict(type="GlobalRotScaleTrans", rot_range=[-0.78539816, 0.78539816], scale_ratio_range=[0.95, 1.05]),
    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
    dict(type="ObjectRangeFilter", point_cloud_range=point_cloud_range),
    dict(type="PointShuffle"),
    dict(type="DefaultFormatBundle3D", class_names=class_names),
    dict(type="Collect3D", keys=["points", "gt_bboxes_3d", "gt_labels_3d"]),
]
test_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
    dict(
        type="MultiScaleFlipAug3D",
        img_scale=(height, length),  # (1333, 800),
        pts_scale_ratio=1,
        flip=False,
        transforms=[
            dict(type="GlobalRotScaleTrans", rot_range=[0, 0], scale_ratio_range=[1.0, 1.0], translation_std=[0, 0, 0]),
            dict(type="RandomFlip3D"),
            dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
            dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
            dict(type="Collect3D", keys=["points"]),
        ],
    ),
]
eval_pipeline = [
    dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4, file_client_args=dict(backend="disk")),
    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
    dict(type="Collect3D", keys=["points"]),
]
data = dict(
    samples_per_gpu=6,
    workers_per_gpu=4,
    train=dict(
        type="RepeatDataset",
        times=2,
        dataset=dict(
            type="KittiDataset",
            data_root=data_root,
            ann_file=data_root + "/kitti_infos_train.pkl",
            split="training",
            pts_prefix="velodyne_reduced",
            pipeline=[
                dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
                dict(type="LoadAnnotations3D", with_bbox_3d=True, with_label_3d=True),
                dict(
                    type="ObjectSample",
                    db_sampler=dict(
                        data_root=data_root,
                        info_path=data_root + "/kitti_dbinfos_train.pkl",
                        rate=1.0,
                        prepare=dict(
                            filter_by_difficulty=[-1], filter_by_min_points=dict(Car=5, Pedestrian=10, Cyclist=10)
                        ),
                        classes=class_names,
                        sample_groups=dict(Car=15, Pedestrian=10, Cyclist=10),
                    ),
                ),
                dict(
                    type="ObjectNoise",
                    num_try=100,
                    translation_std=[0.25, 0.25, 0.25],
                    global_rot_range=[0.0, 0.0],
                    rot_range=[-0.15707963267, 0.15707963267],
                ),
                dict(type="RandomFlip3D", flip_ratio_bev_horizontal=0.5),
                dict(type="GlobalRotScaleTrans", rot_range=[-0.78539816, 0.78539816], scale_ratio_range=[0.95, 1.05]),
                dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                dict(type="ObjectRangeFilter", point_cloud_range=point_cloud_range),
                dict(type="PointShuffle"),
                dict(type="DefaultFormatBundle3D", class_names=class_names),
                dict(type="Collect3D", keys=["points", "gt_bboxes_3d", "gt_labels_3d"]),
            ],
            modality=dict(use_lidar=True, use_camera=False),
            classes=class_names,
            test_mode=False,
            pcd_limit_range=point_cloud_range,
            box_type_3d="LiDAR",
        ),
    ),
    val=dict(
        type="KittiDataset",
        data_root=data_root,
        ann_file=data_root + "/kitti_infos_val.pkl",
        split="training",
        pts_prefix="velodyne_reduced",
        pipeline=[
            dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
            dict(
                type="MultiScaleFlipAug3D",
                img_scale=(height, length),  # (1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type="GlobalRotScaleTrans",
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0],
                    ),
                    dict(type="RandomFlip3D"),
                    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
                    dict(type="Collect3D", keys=["points"]),
                ],
            ),
        ],
        modality=dict(use_lidar=True, use_camera=False),
        classes=class_names,
        test_mode=True,
        pcd_limit_range=point_cloud_range,
        box_type_3d="LiDAR",
    ),
    test=dict(
        type="KittiDataset",
        data_root=data_root,
        ann_file=data_root + "/kitti_infos_val.pkl",
        split="training",
        pts_prefix="velodyne_reduced",
        pipeline=[
            dict(type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4),
            dict(
                type="MultiScaleFlipAug3D",
                img_scale=(height, length),  # (1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type="GlobalRotScaleTrans",
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0],
                    ),
                    dict(type="RandomFlip3D"),
                    dict(type="PointsRangeFilter", point_cloud_range=point_cloud_range),
                    dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
                    dict(type="Collect3D", keys=["points"]),
                ],
            ),
        ],
        modality=dict(use_lidar=True, use_camera=False),
        classes=class_names,
        test_mode=True,
        pcd_limit_range=point_cloud_range,
        box_type_3d="LiDAR",
    ),
)
evaluation = dict(
    interval=2,
    pipeline=[
        dict(
            type="LoadPointsFromFile", coord_type="LIDAR", load_dim=4, use_dim=4, file_client_args=dict(backend="disk")
        ),
        dict(type="DefaultFormatBundle3D", class_names=class_names, with_label=False),
        dict(type="Collect3D", keys=["points"]),
    ],
)

lr = 0.001
optimizer = dict(type="AdamW", lr=0.001, betas=(0.95, 0.99), weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(policy="cyclic", target_ratio=(10, 0.0001), cyclic_times=1, step_ratio_up=0.4)
momentum_config = dict(policy="cyclic", target_ratio=(0.8947368421052632, 1), cyclic_times=1, step_ratio_up=0.4)
runner = dict(type="EpochBasedRunner", max_epochs=20)
checkpoint_config = dict(interval=10)
log_config = dict(interval=50, hooks=[dict(type="TextLoggerHook"), dict(type="TensorboardLoggerHook")])
dist_params = dict(backend="nccl")
log_level = "INFO"
load_from = None
resume_from = None
workflow = [("train", 1)]
gpu_ids = range(0, 1)


# FFNet: Feature Flow Net

##  Introduction

We provide the evaluation of Feature Flow Net (FFNet) for solving VIC3D object detection. Please refer [FFNet-VIC3D](https://github.com/haibao-yu/FFNet-VIC3D) for  more information about training and configuation.

## Evaluation  Results and Models

| Modality   | Model   | Latency (ms)     | Overall(AP 3D Iou = 0.5) | Overall(AP BEV Iou = 0.5) | AB(Byte)           |
| ---------- | ------ | ------------ | ----------- | ------------------------ | ------------------------- |
| Pointcloud | FFNET  | 0    | 55.81                    | 63.54                     | 1.2×10<sup>5</sup> |
| Pointcloud | FFNET  | 100    | 55.48                    | 63.14                     | 1.2×10<sup>5</sup> |
| Pointcloud | FFNET  | 200    | 55.37                    | 63.20                     | 1.2×10<sup>5</sup> |

## Evaluation Processs

### Data Preparation

We evaluate the models on DAIR-V2X dataset. For downloading DAIR-V2X dataset, please refer to the guidelines in [DAIR-V2X](https://thudair.baai.ac.cn/cooptest). After downloading the dataset, we should preprcocess the dataset as the guidelines in [data_preprocess](https://github.com/haibao-yu/FFNet-VIC3D/blob/main/data/dair-v2x/README.md). Here we suggest you take data preparation operation under [FFNET-VIC3D](https://github.com/haibao-yu/FFNet-VIC3D).

### Evaluation
Download [FFNet](https://github.com/haibao-yu/FFNet-VIC3D), configure the environment as described in its README.

 Download [Trainded FFNET Checkpoint](https://drive.google.com/file/d/1eX2wZ7vSxq8y9lAyjHyrmBQ30qNHcFC6/view?usp=sharing) and put this checkpoint under '${Your_FFNet_workdir}/ffnet_work_dir/work_dir_ffnet'.

Then use the following commands to get the evaluation results.

    # An example to get the FFNET evaluation results within [0, 100]m range under 100ms latency, namely VIC-Async-1.
    # bash scripts/lidar_feature_flow.sh [YOUR_CUDA_DEVICE] [YOUR_FFNET_WORKDIR] [DELAY_K] [TEST_MODE]
    cd ${dair-v2x_root}/dair-v2x/v2x
    bash scripts/lidar_feature_flow.sh 0 /home/yuhaibao/FFNet-VIC3D 1 'FlowPred'

* DELAY_K candidates: [0, 1, 2, 3, 4, 5]. 0 denotes VIC-Sync dataset, 1 denotes VIC-Async-1 dataset.
* TEST_MODE candidates: ['FlowPred', 'OriginFeat', 'Async'].  'FlowPred' mode denotes FFNet with feature prdiction; 'Async' mode denotes FFNet without feature prediction, namely feature fusion model; 'OriginFeat' mode denotes that there is no latency.

## Citation

```latex
@inproceedings{yu2023ffnet,
  title={Vehicle-Infrastructure Cooperative 3D Object Detection via Feature Flow Prediction},
  author={Yu, Haibao and Tang, Yingjuan and Xie, Enze and Mao, Jilei and Yuan, Jirui and Luo, Ping and Nie, Zaiqing },
  booktitle={Under Review},
  year={2023}
}
```