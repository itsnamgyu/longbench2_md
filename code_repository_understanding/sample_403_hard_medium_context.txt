import os
import shutil
import subprocess
import time
from flask import Flask, request, jsonify


def list_all_devices():
    adb_command = "adb devices"
    device_list = []
    result = EmulatorController.execute_adb(adb_command)
    if result != "ERROR":
        devices = result.split("\n")[1:]
        for d in devices:
            device_list.append(d.split()[0])

    return device_list


def get_adb_device_name(avd_name=None):
    device_list = list_all_devices()
    for device in device_list:
        command = f"adb -s {device} emu avd name"
        ret = EmulatorController.execute_adb(command)
        ret = ret.split("\n")[0]
        if ret == avd_name:
            return device
    return None


app = Flask(__name__)


class Config:
    avd_log_dir = "/logs"  # 请根据实际路径进行修改


class EmulatorController:
    def __init__(self):
        self.avd_log_dir = "logs"
        self.emulator_process = None
        self.out_file = None

    @classmethod
    def execute_adb(self, adb_command):
        print(f"Executing command: {adb_command}")
        assert adb_command.startswith("adb"), "Command must start with 'adb'"
        adb_command = "/root/.android/platform-tools/adb" + adb_command[3:]

        result = subprocess.run(adb_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        print(f"Return code: {result}")
        if result.returncode == 0:
            return result.stdout.strip()
        print(f"Command execution failed: {adb_command}")
        print(result.stderr)
        return "ERROR"

    def start_emulator(self, avd_name):
        print(f"Starting Android Emulator with AVD name: {avd_name}")

        if not os.path.exists(self.avd_log_dir):
            os.makedirs(self.avd_log_dir, exist_ok=True)

        self.out_file = open(os.path.join(self.avd_log_dir, 'emulator_output.txt'), 'a')
        self.emulator_process = subprocess.Popen(
            ["/root/.android/emulator/emulator", "-avd", avd_name, "-no-snapshot-save", "-no-window", "-no-audio"],
            stdout=self.out_file,
            stderr=self.out_file
        )

        print("Waiting for the emulator to start...")

        while True:
            time.sleep(1)
            try:
                device = get_adb_device_name(avd_name)
            except:
                import traceback
                traceback.print_exc()
                continue
            if device is not None:
                break

        print("Device name: ", device)
        print("AVD name: ", avd_name)

        while True:
            boot_complete = f"adb -s {device} shell getprop init.svc.bootanim"
            boot_complete = self.execute_adb(boot_complete)
            if boot_complete == 'stopped':
                print("Emulator started successfully")
                break
            time.sleep(1)

        time.sleep(1)

        device_list = list_all_devices()
        if len(device_list) == 1:
            device = device_list[0]
            print(f"Device selected: {device}")

        return device

    def stop_emulator(self, avd_name):
        print("Stopping Android Emulator...")
        if self.emulator_process:
            self.emulator_process.terminate()

        while True:
            try:
                device = get_adb_device_name(avd_name)
                command = f"adb -s {device} reboot -p"
                ret = self.execute_adb(command)
                self.emulator_process.terminate()
            except:
                device = None
            if device is None:
                print("Emulator stopped successfully")
                break
            time.sleep(1)

        if self.out_file:
            self.out_file.close()


emulator_controller = EmulatorController()


@app.route('/start', methods=['POST'])
def start():
    avd_name = request.json.get('avd_name')
    if not avd_name:
        return jsonify({"error": "No AVD name provided"}), 400

    device = emulator_controller.start_emulator(avd_name)
    return jsonify({"result": "Emulator started", "device": device})


@app.route('/stop', methods=['POST'])
def stop():
    avd_name = request.json.get('avd_name')
    if not avd_name:
        return jsonify({"error": "No AVD name provided"}), 400

    emulator_controller.stop_emulator(avd_name)
    return jsonify({"result": "Emulator stopped"})


@app.route('/execute', methods=['POST'])
def execute():
    adb_command = request.json.get('command')
    if not adb_command:
        return jsonify({"error": "No command provided"}), 400

    result = emulator_controller.execute_adb(adb_command)
    return jsonify({"result": result})


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=6060)


import argparse
import concurrent.futures
import datetime
import os
from collections import defaultdict
from glob import glob
from os.path import join, isdir, isfile, relpath
from typing import List, Dict

import jsonlines
import pandas as pd

from evaluation.configs import AppConfig
from evaluation.task import Evaluation_Task


# from generate_result_single import *


def find_all_task_files(all_task_config_path) -> List[str]:
    # print(type(all_task_config_path), all_task_config_path)
    tasks = []
    for task in all_task_config_path:
        if isdir(task):
            tasks += [relpath(path, ".") for path in glob(join(task, "**/*.yaml"), recursive=True)]
        elif isfile(task):
            tasks.append(task)
        else:
            print(f"'{task}' is not a valid file or directory, ignored.")
    return tasks


def find_all_traces_files(traces_path_fold) -> Dict[str, Dict[str, str]]:
    # print(type(all_task_config_path), all_task_config_path)
    traces_path = os.listdir(traces_path_fold)
    traces = {}
    for trace in traces_path:
        app_name = trace.split('_')[0]
        app_id = trace.split('_')[1]
        task_id = f"{app_name}_{app_id}"
        trace_root = os.path.join(traces_path_fold, trace)
        trace_file = os.path.join(trace_root, "traces", "trace.jsonl")
        xml_path = os.path.join(trace_root, "xml")
        trace_item = {
            "task_id": task_id,
            "trace_file": trace_file,
            "xml_path": xml_path,
            "trace_root": trace_root
        }
        traces[task_id] = trace_item
    return traces


def evaluate_all_tasks(tasks: List[Evaluation_Task]):
    for task in tasks:
        try:
            task.evaluate()
            del task
        except Exception as e:
            import traceback
            print(traceback.format_exc())


def evaluate_input_dir(input_dir, task_yamls, create_time, args):
    test_name = input_dir.split('/')[-1]
    output_root_dir = os.path.join(args.output_folder, test_name + "_" + create_time)
    if not os.path.exists(output_root_dir):
        os.makedirs(output_root_dir)

    task_files = find_all_task_files(task_yamls)
    traces = find_all_traces_files(input_dir)

    tasks = []
    print("> Loading task configs")
    for app_task_config_path in task_files:
        app_config = AppConfig(app_task_config_path, output_dir=output_root_dir)
        app_task = Evaluation_Task(app_config, traces, args, detail=True)
        print(f"    Evaluation_Task '{app_task.name}' loaded from config {app_task_config_path}")
        tasks.append(app_task)
    print(f"> Successfully load {len(tasks)} task{'s' if len(tasks) > 1 else ''}")
    evaluate_all_tasks(tasks)


def output_to_excel(args):
    output_df = pd.DataFrame()
    base_folder = args.output_folder
    outputs = os.listdir(base_folder)

    for output in outputs:
        output_folder = os.path.join(base_folder, output)
        agent_name = output.split("_2024")[0]
        if not os.path.exists(os.path.join(output_folder, "total.jsonl")):
            continue
        with jsonlines.open(os.path.join(output_folder, "total.jsonl")) as f:
            dict = defaultdict(list)
            tt = 0
            for line in f:
                # total = line["Total"]
                # App = line["App"]
                for key, value in line.items():
                    if key == "App":
                        dict["App"].append(1)
                    elif key == "Total":
                        dict[key].append(value)
                        tt += value
                    elif "Sum_" in key or key == "Complete_Correct":
                        dict[key].append(value)
            tt_correct = sum(dict["Complete_Correct"])
            output_dict = {}
            output_dict["agent_name"] = agent_name
            for key, value in dict.items():
                if key == "App":
                    output_dict[key] = len(value)
                elif key == "Total":
                    output_dict[key] = sum(value)
                elif key == "Sum_RRR":
                    if tt_correct == 0:
                        output_dict[key] = 0
                    else:
                        output_dict[key] = 100 * sum(value) / tt_correct
                elif key == "Complete_Correct" or "Sum_" in key:
                    output_dict[key] = 100 * sum(value) / args.tt
                # else:
                # output_dict[key] = sum(value) / tt
            print(output_dict)
            # output_dict["Acc"] = output_dict["Complete_Correct"] / output_dict["Total"]
            output_dict["Acc"] = tt_correct / tt
            output_dict["correct"] = tt_correct
            output_df = output_df._append(output_dict, ignore_index=True)
    output_df.to_excel(args.output_excel)
    print(output_df)


def parse_args():
    parser = argparse.ArgumentParser(add_help=False)
    group = parser.add_argument_group("evaluation", "Evaluation configurations")
    group.add_argument("--input_folder", type=str, default="logs/evaluation")
    group.add_argument("--output_folder", type=str, default="outputs")
    group.add_argument("--output_excel", type=str, default="output.xlsx")
    group.add_argument("--tt", type=int, default=138)
    group.add_argument("--judge_model", type=str, default="glm4")
    group.add_argument("--api_base", type=str, default="")
    group.add_argument("--api_key", type=str, default="")
    args = parser.parse_args()
    return args


def main():
    args = parse_args()
    assert args.judge_model in ["glm4", "gpt-4o-2024-05-13"], "We only support glm4 or gpt-4o for judge model"
    task_yamls = os.listdir('evaluation/config')
    task_yamls = ["evaluation/config/" + i for i in task_yamls if i.endswith(".yaml")]
    create_time = datetime.datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
    input_folder = args.input_folder

    input_dirs = [os.path.join(input_folder, input_dir) for input_dir in os.listdir(input_folder)]

    if not os.path.exists(args.output_folder):
        os.makedirs(args.output_folder)
    already_output = os.listdir(args.output_folder)
    agent_list = []
    for output in already_output:
        agent_name = output.split("_2024")[0]
        agent_list.append(agent_name)
    for input_dir in input_dirs:
        if "emulator_output.txt" in input_dir:
            continue
        for agent in agent_list:
            if agent == input_dir.split('/')[-1]:
                input_dirs.remove(input_dir)
                break

    with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
        futures = [executor.submit(evaluate_input_dir, input_dir, task_yamls, create_time, args) for input_dir in
                   input_dirs]
        for future in concurrent.futures.as_completed(futures):
            try:
                future.result()
            except Exception as exc:
                import traceback
                traceback.print_exc()
                print(f'Generated an exception: {exc}')
    output_to_excel(args)
    df = pd.DataFrame()
    files = os.listdir(args.output_folder)
    for file in files:
        output_folder = os.path.join(args.output_folder, file)
        agent_name = file.split("_2024")[0]
        if not os.path.exists(os.path.join(output_folder, "total.jsonl")):
            continue
        output_dict = {"agent_name": agent_name}
        with jsonlines.open(os.path.join(output_folder, "total.jsonl")) as f:
            for line in f:
                app = line["App"]
                correct = line["Complete_Correct"]
                output_dict[app] = correct
        df = df._append(output_dict, ignore_index=True)
        df.to_excel(args.output_excel.replace(".xlsx", "_detail.xlsx"))


if __name__ == "__main__":
    main()


# Android United: Developing and Evaluating Android Agents in A Reproducible Environment

Chinese version of this README is available [here](README_CN.md).

Autonomous agents have become increasingly important for interacting with the real world. 
Android agents, in particular, have been a frequently mentioned interaction method in recent research. 
However, current benchmarks for evaluating Android agents still require further development. 
They lack a good combination of reproducibility and task difficulty. 
In this work, we propose Android United as a powerful Android agent framework. 
It includes an operation environment with operation modes and action space, as well as a reproducible benchmark---Android Eval. 
By `United', it supports both text-based and multi-modal models in the same action space. 
Android Eval comprises a set of predefined Android virtual images and 138 tasks across nine apps designed based on these images. 
By using this environment, we develop the Android Instruction dataset and train the LLaMA3-8B-instruct, GLM-4, and CogVLM2 (LLaMA3-8B) models on it. The trained models as Android agents are comparable to the best open and closed-source models, respectively. 

<p align="center">
    <a href="https://arxiv.org/abs/" target="_blank">📃 Paper </a> 
</p>

This repository is the code framework for the Android Eval section. We provide two execution modes: AVD on Mac (arm64) and Docker on Linux (x86_64). You can freely add or modify new tasks or Android images according to our framework. We offer a complete evaluation framework that can be used to assess the performance of various Android agents. We are also advancing the design of a more powerful open-source Android Agent, and we will release the complete training data and corresponding training code, along with checkpoints, once the data and training methods are finalized.

![](./assets/main-picture.png)

# Benchmark Components

In our experiment, we utilized a range of apps to conduct various tests. The following mobile apps are chosen:

- **Bluecoins**: A personal finance management app used for tracking expenses and income.
- **Calendar**: A calendar app helps in organizing schedules and setting reminders.
- **Cantook**: An e-book reader for storing, managing, and reading e-books.
- **Clock**: A clock app for displaying the time, setting alarms, and using a stopwatch.
- **Contacts**: A contact management app for storing and organizing contact information.
- **Maps.me**: An offline map app for navigation and exploring locations.
- **PiMusic**: A music player app for organizing and playing locally stored music files.
- **Settings**: A settings app for configuring device settings and preferences.
- **Zoom**: A video conferencing app for hosting and joining online meetings.

The selection of these apps underwent multiple iterations to ensure their suitability for our evaluation purposes. A key criterion for the final selection was that each app must function independently, without requiring an internet connection or user account login. This ensures that the evaluations can be consistently replicated under the same conditions, eliminating external dependencies and reducing the risk of privacy breaches. Consequently, this approach maintains the reliability and reproducibility of our results.

![](./assets/avd-subgoal-subcates.png)
# Leaderboard

Main Result of XML and SoM modes. SR, Sub-SR, RRR, and ROR stand for Success Rate, Sub-Goal Success Rate, Reversed Redundancy Ratio, and Reasonable Operation Ratio, respectively. For all these metrics, a higher value means better. **-ft** represents an instruction tuning model. In each mode, **Bold** represents the best result, and **Underline** represents the second-best result.

![](./assets/leaderboard.png)


# Quick start

## Auto Evaluation Pipeline

We offer two testing methods: AVD on Mac (arm64) and Docker on Linux (x86_64).

### Prerequisites

Clone this repo and install the dependencies.

```bash
cd /path/to/your/repo
conda create -n Android-United python=3.11
conda activate Android-United
pip install -r requirements.txt
```

If you use AVD on Mac (arm64), please refer to [here](docs/prepare_for_mac.md) to set up the environment.

If you use Docker on Linux (x86_64), please refer to [here](docs/prepare_for_linux.md) to set up the environment.

### Run the Auto Evaluation Pipeline

To test, run:

```bash
python eval.py -n test_name -c your path to config.yaml
```

The specific output of each question is saved under `./logs/evaluation/test_name`, and the evaluation results are saved
in the `output` folder.
If you only want to run a few questions for testing, you can refer to:

```bash
python eval.py -n test_name -c your path to config.yaml --task_id taskid_1,taskid_2,taskid_3
```

We support parallel testing. Please note that you need to confirm in advance that
you have sufficient memory and storage. Each concurrent session takes up approximately 6G of memory and 9G of storage
space.

```bash
python eval.py -n test_name -c your path to config.yaml -p 3
```

The corresponding task_id for each question can be found in `evaluation/config`.

Use the following code to generate evaluation results:

```bash
# eval by gpt-4o-2024-05-13:
export OPENAI_API_KEY='your-api-key-here'
python generate_result.py --input_folder ./logs/evaluation/ --output_folder ./logs/evaluation/ --output_excel ./logs/evaluation/test_name.xlsx --judge_model gpt-4o-2024-05-13

# eval by glm4:
python generate_result.py --input_folder ./logs/evaluation/ --output_folder ./logs/evaluation/ --output_excel ./logs/evaluation/test_name.xlsx --judge_model glm4 --api_key your api key
```

You need to fill in your judge model and api_key(may be api_base, too). We now support gpt-4o-2024-05-13 and glm4.
generate_result.py will generate an Excel file of all test results under --input_ir, containing detailed results for each question.

## How to Modify the Backbone Model

The `Agent` class has been predefined in the `agent/` folder, with implementations for the OpenAI interface based on
oneapi and the currently deployed GLM interface. If you need to add a base model, you need to:

1. Create a new Python file under the `agent/` directory, and refer to `agent/model/OpenAIAgent`. Implement your model call by inheriting the `Agent` class. The `act` function input is already organized according to the OpenAI message format, and the output should be a string. If the input format of the corresponding model differs from OpenAI, you can refer to the `format_history` function in `claude_model` and the `prompt_to_message` function in `qwen_model` for modifications. `format_history` can organize the format of historical records, and the `prompt_to_message` method converts the prompt and image input (if any) of the current turn into the single-turn format of the current model.
2. Import your new class in `agent/__init__.py`.
3. Replace the content under `agent` in the config file used by `eval.py` with:

```yaml
agent:
    name: Your Agent Module Name
    args:
        max_new_tokens: 512
```

Make sure the name matches your implemented class name, and the content under `args` will be passed to your
class's `init` function.

## Steps to Add a New Task

During the process of writing a new task, it is equally important to write and use the code to determine if your code is
correct through actual running results. Therefore, please follow the steps below to ensure each new task is error-free.

1. Write your task. Tasks include yaml files, evaluation methods, and corresponding mobile app installation.
    1. The task's yaml file should refer to other existing files under `evaluation/config` and must
       include `task_id`, `task`, `metric_type`, and `metric_func`. `adb_query` is only used when the results need to be
       queried using adb commands. Although `category` is not yet in use, it is strongly recommended to add it.
    2. The evaluation method needs to inherit the `evaluation/task/SingleTask` class. After each recorded operation,
       the `judge` function will be executed, and its return value is a
       dict: `{"judge_page": bool, "1": bool, ..., "complete": bool}`. The code will record the judgment result of the
       last page where `judge_page` is `True`, and `complete` should only be set to `True` if all judgment points are
       correct. If it's a task that compares return values, the `check_answer` method has already been implemented.
       Modify `final_ground_truth` to the standard answer before calling this function.
    3. Refer to other tasks, import all evaluation methods in `evaluation/app_name/__init__.py` into the `function_map`
       class.
    4. To ensure the model can execute the launch command correctly, add the app name and corresponding package name
       in `templates/packages/apps_dict`. The package name can be obtained by
       executing `adb -s {device} shell dumpsys window | grep mCurrentFocus | awk -F '/' '{print $1}' | awk '{print $NF}'`.
2. Execute your task using at least the most advanced agent and generate evaluation results. If necessary, quickly
   complete the correct operation during model operation intervals to ensure that the recorded operation can capture the
   correct result page between two model operations to test if your code can complete the detection task.
3. Use the `tools/check_result_multiprocess.py` function to generate screenshots of each step. Focus on checking whether
   the screenshots of correct model operations are indeed judged as correct.

## Steps to Change AVD Snapshot

If you want to define a mobile snapshot different from the android eval snapshot, you need to follow these steps:

1. Download related docker files from the
   link: https://drive.google.com/file/d/1xpPEzVof5hrt5bQY6BHm_4Uoyq5mJQNb/view?usp=drive_link
2. Extract the file, enter the extracted folder, and then run:

```bash
docker build -t android_eval_no_avd:latest .
```

3. Configure your AVD snapshot on an x86_64 machine (it is recommended to configure it directly using Android Studio).
   Note that the default installed Android AVD type is:

```dockerfile
RUN /bin/bash -c "source /root/.bashrc && yes | sdkmanager 'platform-tools' 'emulator' 'system-images;android-33;google_apis;x86_64'"
RUN /bin/bash -c "source /root/.bashrc && yes | sdkmanager 'build-tools;33.0.0'"
RUN /bin/bash -c "source /root/.bashrc && yes | sdkmanager 'platforms;android-33'"
```

If you want to configure the AVD for a different version, please modify the specific version number installed in the
Dockerfile. Note that the version number must be strictly consistent, otherwise, the installed image will not be able to
read the existing cache.

4. You can use the following code to generate the AVD image used in the docker:

```python
python tools/modify_mobile_to_docker.py 
    --avd_dir /Path/to/your/.android/avd 
    --device_name your device name 
    --save_dir /Path/to/your/save/avd
```

Alternatively, you can modify it as follows:

Find your .avd folder and .ini file through Android Studio -> Virtual Devices Manager -> Right-click -> Show on Disk,
and make the following modifications:

In Pixel_7_Pro_API_33.ini, modify path and path.rel to the following paths:

```ini
avd.ini.encoding=UTF-8
path=/root/.android/avd/device name.avd
path.rel=avd/device name.avd
target=android-33
```

In Pixel_7_Pro_API_33.avd/config.ini, modify the following paths:

```ini
...
image.sysdir.1 = system-images/android-33/google_apis/x86_64/
...
skin.path = /root/.android/skins/pixel_7_pro
...
```

Keep the other contents unchanged.

5. Start an image and copy your .avd folder and .ini file into the image:

```bash
docker run -it  android_eval_no_avd:latest /bin/bash 
docker cp /path/to/your/device name.avd container_id:/root/.android/avd
docker cp /path/to/your/device name.ini container_id:/root/.android/avd
```

After completing the above, you can execute the following in the image:

```bash
emulator -avd device name -no-window -no-audio -no-snapshot-save
```

Verify whether the installation is successful.





# Android United: 开发和评估Android智能体的可复现环境

英文版的README可以在[这里](README.md)找到。

<p align="center">
    <a href="https://arxiv.org/abs/" target="_blank">📃 论文 </a> 
</p>

这个仓库是Android Eval部分的代码框架。我们提供了两种执行模式：Mac上的AVD（arm64）和Linux上的Docker（x86_64）。您可以根据我们的框架自由添加或修改新的任务或Android镜像。我们提供了一个完整的评估框架，可以用于评估各种Android智能体的性能。我们也在推进更强大的开源Android智能体的设计，并将在数据和训练方法最终确定后发布完整的训练数据和相应的训练代码。

![](./assets/main-picture.png)

# Benchmark组成

在我们的实验中，我们使用了一系列应用程序进行了各种测试。选择的移动应用程序如下：

- **Bluecoins**: 一个用于管理个人财务、跟踪支出和收入的应用程序。
- **Calendar**: 一个帮助组织日程安排和设置提醒的日历应用。
- **Cantook**: 一个用于存储、管理和阅读电子书的电子书阅读器。
- **Clock**: 一个显示时间、设置闹钟和使用秒表的时钟应用。
- **Contacts**: 一个用于存储和组织联系人信息的联系人管理应用。
- **Maps.me**: 一个用于导航和探索位置的离线地图应用。
- **PiMusic**: 一个用于组织和播放本地存储音乐文件的音乐播放器应用。
- **Settings**: 一个用于配置设备设置和偏好的设置应用。
- **Zoom**: 一个用于主持和参加在线会议的视频会议应用。

这些应用程序的选择标准是每个应用程序必须独立运行，无需互联网连接或用户账户登录。这确保了评估在相同条件下可以始终如一地进行，消除了外部依赖，并降低了隐私泄露的风险。因此，这种方法保持了我们结果的可靠性和可复现性。

![](./assets/avd-subgoal-subcates.png)
# 排行榜

XML和SoM模式的主要结果。SR、Sub-SR、RRR和ROR分别代表成功率、子目标成功率、冗余率和合理操作率。对于所有这些指标，数值越高表示越好。**-ft**表示指令微调模型。在每个模式下，**加粗**表示最佳结果，**下划线**表示次佳结果。

![](./assets/leaderboard.png)


# 快速开始

## 自动评估

我们提供了两种测试方法：Mac上的AVD（arm64）和Linux上的Docker（x86_64）。

### 环境配置

克隆此仓库并安装依赖项。

```bash
cd /path/to/your/repo
conda create -n Android-United python=3.11
conda activate Android-United
pip install -r requirements.txt
```

如果您使用的是Mac上的AVD（arm64），请参考[这里](docs/prepare_for_mac.md)来设置环境。

如果您使用的是Linux上的Docker（x86_64），请参考[这里](docs/prepare_for_linux.md)来设置环境。

### 运行自动评估Pipeline

运行：

```bash
python eval.py -n test_name -c your path to config.yaml
```

每个问题的具体输出保存在`./logs/evaluation/test_name`下，评估结果保存在`output`文件夹中。

如果您只想运行几个问题进行测试，可以参考：

```bash
python eval.py -n test_name -c your path to config.yaml --task_id taskid_1,taskid_2,taskid_3
```

我们支持并行测试。请注意，您需要提前确认有足够的内存和存储空间。每个并发测试大约占用6G内存和9G存储空间。

```bash
python eval.py -n test_name -c your path to config.yaml -p 3
```

每个问题的task_id可以在`evaluation/config`中找到。

使用以下代码生成评估结果：

```bash
# gpt-4o-2024-05-13评测:
export OPENAI_API_KEY='your-api-key-here'
python generate_result.py --input_folder ./logs/evaluation/ --output_folder ./logs/evaluation/ --output_excel ./logs/evaluation/test_name.xlsx --judge_model gpt-4o-2024-05-13

# glm4评测:
python generate_result.py --input_folder ./logs/evaluation/ --output_folder ./logs/evaluation/ --output_excel ./logs/evaluation/test_name.xlsx --judge_model glm4 --api_key your api key
```

你需要根据需求填写 judge model和api_key或 api_base。我们现在支持gpt-4o-2024-05-13 和 glm4。generate_result.py将在--input_ir下生成所有测试结果的Excel文件，包含每个问题的详细结果。

## 如何修改基础模型

`Agent`类已在`agent/`文件夹中预定义，包含基于oneapi的OpenAI接口和当前部署的GLM接口的实现。如果需要添加基础模型，您需要：

1. 在`agent/`下创建一个新的Python文件，并参考`agent/model/OpenAIAgent`，通过继承`Agent`类实现您的模型调用。`act`函数输入已经按照OpenAI message格式组织，输出为字符串。如果对应模型的输入格式与OpenAI不同，可以参考`claude_model`中的`format_history`函数和`qwen_model`中的`prompt_to_message`进行修改。`format_history`可以组织历史记录格式，`prompt_to_message`方法将当前回合的提示和图像输入（如果有）修改为当前模型的单回合格式。
2. 在`agent/__init__.py`中导入您的新类。
3. 将`eval.py`使用的配置文件中的`agent`内容替换为：

```yaml
agent:
    name: Your Agent Module Name
    args:
        max_new_tokens: 512
```

确保名称与您实现的类名匹配，`args`下的内容将传递给您的类的`init`函数。

## 添加新任务的步骤

在编写新任务的过程中，编写代码并通过实际运行结果确定代码是否正确同样重要。因此，请按照以下步骤确保每个新任务没有错误。

1. 编写您的任务。任务包括yaml文件、评估方法和相应的移动应用安装。
    1. 任务的yaml文件应参考`evaluation/config`下的其他现有文件，必须包含`task_id`、`task`、`metric_type`和`metric_func`。`adb_query`仅在需要通过adb命令查询结果时使用。尽管`category`目前尚未使用，但强烈建议添加。
    2. 评估方法需要继承`evaluation/task/SingleTask`类。在每次记录操作后，`judge`函数将执行，其返回值为一个字典：`{"judge_page": bool, "1": bool, ..., "complete": bool}`。代码将记录`judge_page`为`True`的最后一页的判断结果，且只有当所有判断点都正确时才应将`complete`设置为`True`。如果是一个比较返回值的任务，`check_answer`方法已经实现。在调用此函数之前，修改`final_ground_truth`为标准答案。
    3. 参考其他任务，将所有评估方法导入`evaluation/app_name/__init__.py`中的`function_map`类。
    4. 为确保模型能够正确执行启动命令，请在`templates/packages/apps_dict`中添加应用名称和相应的包名。包名可以通过执行`adb -s {device} shell dumpsys window | grep mCurrentFocus | awk -F '/' '{print $1}' | awk '{print $NF}'`获取。
2. 使用至少最先进的智能体执行您的任务并生成评估结果。如有必要，在模型操作间隔期间快速完成正确的操作，以确保记录的操作能够捕获两次模型操作之间的正确结果页面，从而测试您的代码是否能够完成检测任务。
3. 使用`tools/check_result_multiprocess.py`函数生成每一步的截图。重点检查正确的模型操作截图是否确实被判断 为正确。

## 更改AVD快照的步骤

如果您想定义一个与android eval快照不同的移动快照，您需要遵循以下步骤：

1. 从链接下载相关docker_no_avd文件：https://drive.google.com/file/d/1xpPEzVof5hrt5bQY6BHm_4Uoyq5mJQNb/view?usp=drive_link
2. 解压文件，进入解压后的文件夹，然后运行：

```bash
docker build -t android_eval_no_avd:latest .
```

3. 在x86_64机器上配置您的AVD快照（建议直接使用Android Studio进行配置）。请注意，默认安装的Android AVD类型为：

```dockerfile
RUN /bin/bash -c "source /root/.bashrc && yes | sdkmanager 'platform-tools' 'emulator' 'system-images;android-33;google_apis;x86_64'"
RUN /bin/bash -c "source /root/.bashrc && yes | sdkmanager 'build-tools;33.0.0'"
RUN /bin/bash -c "source /root/.bashrc && yes | sdkmanager 'platforms;android-33'"
```

如果您想配置不同版本的AVD，请修改Dockerfile中安装的具体版本号。请注意，版本号必须严格一致，否则安装的镜像将无法读取现有缓存。

4. 您可以使用以下代码生成docker中使用的AVD镜像：

```python
python tools/modify_mobile_to_docker.py 
    --avd_dir /Path/to/your/.android/avd 
    --device_name your device name 
    --save_dir /Path/to/your/save/avd
```

或者，您可以按如下方式修改：

通过Android Studio -> 虚拟设备管理器 -> 右键 -> 在磁盘上显示，找到您的.avd文件夹和.ini文件，并进行以下修改：

在Pixel_7_Pro_API_33.ini中，将路径和path.rel修改为以下路径：

```ini
avd.ini.encoding=UTF-8
path=/root/.android/avd/device name.avd
path.rel=avd/device name.avd
target=android-33
```

在Pixel_7_Pro_API_33.avd/config.ini中，修改以下路径：

```ini
...
image.sysdir.1 = system-images/android-33/google_apis/x86_64/
...
skin.path = /root/.android/skins/pixel_7_pro
...
```

保持其他内容不变。

5. 启动一个镜像并将您的.avd文件夹和.ini文件复制到镜像中：

```bash
docker run -it  android_eval_no_avd:latest /bin/bash 
docker cp /path/to/your/device name.avd container_id:/root/.android/avd
docker cp /path/to/your/device name.ini container_id:/root/.android/avd
```

完成上述操作后，您可以在镜像中执行以下操作：

```bash
emulator -avd device name -no-window -no-audio -no-snapshot-save
```

验证安装是否成功。



backoff==2.2.1
InquirerPy==0.3.4
lxml==4.9.3
openai
jsonlines
numpy
protobuf
BeautifulSoup4
toml
aioconsole
python-dotenv
gymnasium
Pillow
evaluate
types-tqdm
tiktoken
aiolimiter
beartype==0.12.0
flask
nltk
text-generation
opencv-python

argparse
colorama
dashscope
pyshine
pyyaml
requests
Levenshtein
zhipuai
xmltodict
google.auth
docker
fuzzywuzzy
openpyxl

import os
import argparse
import yaml

from agent import get_agent
from evaluation.auto_test import *
from evaluation.parallel import parallel_worker
from generate_result import find_all_task_files
from evaluation.configs import AppConfig, TaskConfig

if __name__ == '__main__':
    task_yamls = os.listdir('evaluation/config')
    task_yamls = ["evaluation/config/" + i for i in task_yamls if i.endswith(".yaml")]

    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument("-n", "--name", default="test", type=str)
    arg_parser.add_argument("-c", "--config", default="config-mllm-0409.yaml", type=str)
    arg_parser.add_argument("--task_config", nargs="+", default=task_yamls, help="All task config(s) to load")
    arg_parser.add_argument("--task_id", nargs="+", default=None)
    arg_parser.add_argument("--debug", action="store_true", default=False)
    arg_parser.add_argument("--app", nargs="+", default=None)
    arg_parser.add_argument("-p", "--parallel", default=1, type=int)

    args = arg_parser.parse_args()
    with open(args.config, "r") as file:
        yaml_data = yaml.safe_load(file)

    agent_config = yaml_data["agent"]
    task_config = yaml_data["task"]
    eval_config = yaml_data["eval"]

    autotask_class = task_config["class"] if "class" in task_config else "ScreenshotMobileTask_AutoTest"

    single_config = TaskConfig(**task_config["args"])
    single_config = single_config.add_config(eval_config)
    if "True" == agent_config.get("relative_bbox"):
        single_config.is_relative_bbox = True
    agent = get_agent(agent_config["name"], **agent_config["args"])

    task_files = find_all_task_files(args.task_config)
    if os.path.exists(os.path.join(single_config.save_dir, args.name)):
        already_run = os.listdir(os.path.join(single_config.save_dir, args.name))
        already_run = [i.split("_")[0] + "_" + i.split("_")[1] for i in already_run]
    else:
        already_run = []

    all_task_start_info = []
    for app_task_config_path in task_files:
        app_config = AppConfig(app_task_config_path)
        if args.task_id is None:
            task_ids = list(app_config.task_name.keys())
        else:
            task_ids = args.task_id
        for task_id in task_ids:
            if task_id in already_run:
                print(f"Task {task_id} already run, skipping")
                continue
            if task_id not in app_config.task_name:
                continue
            task_instruction = app_config.task_name[task_id].strip()
            app = app_config.APP
            if args.app is not None:
                print(app, args.app)
                if app not in args.app:
                    continue
            package = app_config.package
            command_per_step = app_config.command_per_step.get(task_id, None)

            task_instruction = f"You should use {app} to complete the following task: {task_instruction}"
            all_task_start_info.append({
                "agent": agent,
                "task_id": task_id,
                "task_instruction": task_instruction,
                "package": package,
                "command_per_step": command_per_step,
                "app": app
            })

    class_ = globals().get(autotask_class)
    if class_ is None:
        raise AttributeError(f"Class {autotask_class} not found. Please check the class name in the config file.")

    if args.parallel == 1:
        Auto_Test = class_(single_config.subdir_config(args.name))
        Auto_Test.run_serial(all_task_start_info)
    else:
        parallel_worker(class_, single_config.subdir_config(args.name), args.parallel, all_task_start_info)




from typing import List, Dict, Any

import backoff
import requests
from openai import OpenAI

from agent.utils import *
from templates.android_screenshot_template import *


def handle_giveup(details):
    print(
        "Backing off {wait:0.1f} seconds afters {tries} tries calling fzunction {target} with args {args} and kwargs {kwargs}"
        .format(**details))


def handle_backoff(details):
    args = str(details['args'])[:1000]
    print(f"Backing off {details['wait']:0.1f} seconds after {details['tries']} tries "
          f"calling function {details['target'].__name__} with args {args} and kwargs ")

    import traceback
    print(traceback.format_exc())


class Agent:
    name: str

    @backoff.on_exception(
        backoff.expo, Exception,
        on_backoff=handle_backoff,
        on_giveup=handle_giveup,
    )
    def act(self, messages: List[Dict[str, Any]]) -> str:
        raise NotImplementedError

    def prompt_to_message(self, prompt, images):
        raise NotImplementedError

    def system_prompt(self, instruction) -> str:
        raise NotImplementedError


class OpenAIAgent(Agent):
    def __init__(
            self,
            api_key: str = '',
            api_base: str = '',
            model_name: str = '',
            max_new_tokens: int = 16384,
            temperature: float = 0,
            top_p: float = 0.7,
            **kwargs
    ) -> None:
        self.client = OpenAI(api_key=api_key, base_url=api_base)
        # openai.api_base = api_base
        # openai.api_key = api_key
        self.model_name = model_name
        self.max_new_tokens = max_new_tokens
        self.temperature = temperature
        self.top_p = top_p
        self.kwargs = kwargs
        self.name = "OpenAIAgent"


    @backoff.on_exception(
        backoff.expo, Exception,
        on_backoff=handle_backoff,
        on_giveup=handle_giveup,
        max_tries=10
    )
    def act(self, messages: List[Dict[str, Any]]) -> str:
        r = self.client.chat.completions.create(
            model=self.model_name,
            messages=messages,
            max_tokens=self.max_new_tokens,
            temperature=self.temperature,
            top_p=self.top_p
        )
        return r.choices[0].message.content

    def prompt_to_message(self, prompt, images):
        content = [
            {
                "type": "text",
                "text": prompt
            }
        ]
        for img in images:
            base64_img = image_to_base64(img)
            content.append({
                "type": "image_url",
                "image_url": {
                    "url": f"data:image/jpeg;base64,{base64_img}"
                }
            })
        message = {
            "role": "user",
            "content": content
        }
        return message

    def system_prompt(self, instruction) -> str:
        return SYSTEM_PROMPT_ANDROID_MLLM_DIRECT + f"\n\nTask Instruction: {instruction}"


class HTTPAgent(Agent):
    def __init__(
            self,
            url: str,
            headers: Dict[str, Any] = {},
            body: Dict[str, Any] = {},
            return_format: str = "{response[choices][0][message][content]}"
    ) -> None:
        self.url = url
        self.headers = headers
        self.body = body
        self.return_format = return_format

    def update_messages(self, body: Dict[str, Any], messages: List[Dict[str, Any]]):
        body.update({"messages": messages})
        return body

    @backoff.on_exception(
        backoff.expo, Exception,
        on_backoff=handle_backoff,
        on_giveup=handle_giveup,
    )
    def act(self, messages: List[Dict[str, Any]]):
        body = self.update_messages({**self.body}, messages)
        response = requests.post(
            self.url, headers=self.headers, body=body
        )
        return self.return_format.format(response=response)


import base64
import copy


def encode_image(image_path):
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode('utf-8')


def image_to_base64(image_path):
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode('utf-8')


def replace_image_url(messages, throw_details=False, keep_path=False):
    new_messages = copy.deepcopy(messages)
    for message in new_messages:
        if message["role"] == "user":
            for content in message["content"]:
                if isinstance(content, str):
                    continue
                if content["type"] == "image_url":
                    image_url = content["image_url"]["url"]
                    image_url_parts = image_url.split(";base64,")
                    if not keep_path:
                        content["image_url"]["url"] = image_url_parts[0] + ";base64," + image_to_base64(
                            image_url_parts[1])
                    else:
                        content["image_url"]["url"] = f"file://{image_url_parts[1]}"
                    if throw_details:
                        content["image_url"].pop("detail", None)
    return new_messages


try:
    from .mllm.claude_model import *
except:
    print("Claude LLM is not available.")
try:
    from .llm.glm4 import *
except:
    print("GLM4 is not available.")
try:
    from .llm.qwen_llm_model import *
    from .mllm.qwen_model import *
except:
    print("Qwen LLM is not available.")

from .model import *



def get_agent(agent_module: str, **kwargs) -> Agent:
    # 直接从全局命名空间中获取类
    class_ = globals().get(agent_module)

    if class_ is None:
        raise AttributeError(f"Not found class {agent_module}")

    # 检查类是否是 Agent 的子类
    if not issubclass(class_, Agent):
        raise TypeError(f"{agent_module} is not Agent")

    # 创建类的实例
    return class_(**kwargs)


from agent.model import *


class QwenLLMAgent(OpenAIAgent):
    def __init__(
            self,
            api_key: str,
            api_base: str,
            model_name: str = '',
            max_new_tokens: int = 16384,
            temperature: float = 0,
            top_p: float = 0.7,
            **kwargs
    ) -> None:
        self.client = OpenAI(api_key=api_key, base_url=api_base)
        # openai.api_base = api_base
        # openai.api_key = api_key
        self.model_name = model_name
        self.max_new_tokens = max_new_tokens
        self.temperature = temperature
        self.top_p = top_p
        self.kwargs = kwargs
        self.name = "OpenAIAgent"



from zhipuai import ZhipuAI

from agent.model import *


class GLM4Agent(OpenAIAgent):
    def __init__(
            self,
            model_name: str,
            model_key: str,
            max_new_tokens: int = 16384,
            temperature: float = 0,
            top_p: float = 0.7,
            **kwargs
    ) -> None:
        self.glm4_key = model_key
        self.client = ZhipuAI(api_key=self.glm4_key)
        self.model_name = model_name
        self.max_new_tokens = max_new_tokens
        self.temperature = temperature
        self.top_p = top_p
        self.kwargs = kwargs
        self.name = "GLM4Agent"

    @backoff.on_exception(
        backoff.expo, Exception,
        on_backoff=handle_backoff,
        on_giveup=handle_giveup,
        max_tries=10
    )
    def act(self, messages: List[Dict[str, Any]]) -> str:
        response = self.client.chat.completions.create(
            model="glm-4",  # 填写需要调用的模型名称
            messages=messages,
        )
        return response.choices[0].message.content


if __name__ == "__main__":
    agent = GLM4Agent()

    messages = [
        {
            "role": "system",
            "content": "You are a helpful assistant. Please response concisely."
        },
        {
            "role": "user",
            "content": "Tell me a story."
        }
    ]
    print(agent.act(messages))


from http import HTTPStatus

import dashscope

from agent.model import *


class QwenAgent(OpenAIAgent):
    def __init__(
            self,
            api_key: str,
            model_name: str = "qwen-vl-max",
            seed: int = 42,
            top_k: float = 1.0,
            sleep: int = 2
    ):
        dashscope.api_key = api_key
        self.name = "QwenAgent"
        self.model = model_name
        self.seed = seed
        self.top_k = top_k
        self.sleep = sleep

    @backoff.on_exception(
        backoff.expo, Exception,
        on_backoff=handle_backoff,
        on_giveup=handle_giveup,
        max_tries=10
    )
    def act(self, messages: List[Dict[str, Any]]) -> str:
        messages = self.format_message(messages)
        print(messages)
        response = dashscope.MultiModalConversation.call(model=self.model, messages=messages, seed=self.seed,
                                                         top_k=self.top_k)

        if response.status_code == HTTPStatus.OK:
            print(f"Prompt Tokens: {response.usage.input_tokens}\nCompletion Tokens: {response.usage.output_tokens}\n")
            return response.output.choices[0].message.content[0]['text']
        else:
            print(response.code, response.message)
            for message in messages:
                print(message)
            return response.code, response.message  # The error code & message

    def format_message(self, message):
        if message[0]["role"] == "system":
            message[-1]["content"][0]["text"] = message[0]["content"]
        return [message[-1]]

    def prompt_to_message(self, prompt, images):
        content = [{
            "text": prompt
        }]
        for img in images:
            img_path = f"file://{img}"
            content.append({
                "image": img_path
            })
        message = {
            "role": "user",
            "content": content
        }
        return message


import http.client

import anthropic

from agent.model import *

class Claude_official(OpenAIAgent):
    def __init__(
            self,
            model_name: str,
            model_key: str,
            max_new_tokens: int = 512,
            temperature: float = 0.0,
            **kwargs
    ) -> None:
        self.key = model_key
        self.temperature = temperature
        self.model_name = model_name
        self.max_tokens = max_new_tokens
        self.name = "ClaudeAgent"
        self.sleep = 3

    @backoff.on_exception(
        backoff.expo, Exception,
        on_backoff=handle_backoff,
        on_giveup=handle_giveup,
        max_tries=10
    )
    def act(self, messages: List[Dict[str, Any]]) -> str:
        client = anthropic.Anthropic(
            api_key=self.key,
        )
        messages = self.format_message(messages)
        try:
            if messages[0]["role"] == "system":
                system_prompt = messages[0]["content"]
                messages = messages[1:]
                res = client.messages.create(
                    model="claude-3-5-sonnet-20240620",
                    max_tokens=512,
                    messages=messages,
                    stream=False,
                    temperature=0.0,
                    system=system_prompt
                )
            else:
                res = client.messages.create(
                    model="claude-3-5-sonnet-20240620",
                    max_tokens=512,
                    messages=messages,
                    stream=False,
                    temperature=0.0
                )
        except Exception as e:
            return False, str(e)

        return res.content[0].text

    def format_message(self, messages: List[Dict[str, Any]]):
        messages = replace_image_url(messages, throw_details=True, keep_path=False)
        new_messages = []
        for message in messages:
            if message["role"] == "system" or message["role"] == "assistant":
                new_messages.append(message)
            else:
                new_message = {"role": "user", "content": []}
                if isinstance(message["content"], str):
                    new_message["content"].append({
                        "type": "text",
                        "text": message["content"]
                    })
                else:
                    for content in message["content"]:
                        if content["type"] == "text":
                            new_message["content"].append(content)
                        elif content["type"] == "image_url":
                            new_message["content"].append({
                                "type": "image",
                                "source": {
                                    "type": "base64",
                                    "media_type": content["image_url"]["url"].split(";base64,")[0].split("data:")[1],
                                    "data": content["image_url"]["url"].split(";base64,")[1]
                                }
                            })
                        else:
                            return False, "Invalid content type."
                new_messages.append(new_message)
        return new_messages


if __name__ == "__main__":
    agent = Claude_official()
    path_to_image = ""
    messages = [
        {
            "role": "system",
            "content": "You are a helpful assistant. Please response concisely."
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "What can you see?"
                },
                {
                    "type": "image_url",
                    "image_url": {
                        "url": f"data:image/png;base64,{path_to_image}",
                        "detail": "high"
                    }
                }
            ]
        }
    ]
    print(agent.act(messages))


import argparse
import os


def update_device_ini(avd_dir, device_name):
    device_ini_path = os.path.join(avd_dir, f'{device_name}.ini')

    with open(device_ini_path, 'r') as file:
        lines = file.readlines()

    with open(device_ini_path, 'w') as file:
        for line in lines:
            if '[ANDROID_AVD_HOME]' in line:
                line = line.replace('[ANDROID_AVD_HOME]', avd_dir)
            file.write(line)


def update_config_files(avd_dir, device_name, sdk_dir):
    avd_abs_path = os.path.join(avd_dir, f'{device_name}.avd')
    config_files = ['config.ini', 'hardware-qemu.ini']

    for config_file in config_files:
        config_path = os.path.join(avd_abs_path, config_file)

        with open(config_path, 'r') as file:
            lines = file.readlines()

        with open(config_path, 'w') as file:
            for line in lines:
                if '[ANDROID_AVD_HOME]' in line:
                    line = line.replace('[ANDROID_AVD_HOME]', avd_dir)
                if '[ANDROID_SDK_HOME]' in line:
                    line = line.replace('[ANDROID_SDK_HOME]', sdk_dir)
                file.write(line)


def main(avd_dir, sdk_dir, device_name):
    update_device_ini(avd_dir, device_name)
    update_config_files(avd_dir, device_name, sdk_dir)
    print(f'Successfully updated {device_name} AVD files.')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Update AVD configuration files.")
    parser.add_argument('--avd_dir', type=str, help='AVD文件存储的目录')
    parser.add_argument('--sdk_dir', type=str, help='Android SDK目录')
    parser.add_argument('--device_name', type=str, help='要修改的AVD文件名')

    args = parser.parse_args()

    main(args.avd_dir, args.sdk_dir, args.device_name)


import json
import math
import os
from multiprocessing import Pool

import chardet
import jsonlines
import matplotlib.pyplot as plt
from PIL import Image, ImageDraw
from tqdm import tqdm

plt.rcParams['font.sans-serif'] = ['SimHei']  # 用来设置字体样式以正常显示中文标签
plt.rcParams['axes.unicode_minus'] = False  # 默认是使用Unicode负号，设置正常显示字符，如正常显示负号


def draw_cross_on_image(img, coordinates):
    draw = ImageDraw.Draw(img)
    x, y = coordinates
    cross_length = 100
    line_width = 20
    draw.line((x - cross_length // 2, y, x + cross_length // 2, y), fill="green", width=line_width)
    draw.line((x, y - cross_length // 2, x, y + cross_length // 2), fill="green", width=line_width)
    return img


def draw_arrow_on_image(img, start, end):
    draw = ImageDraw.Draw(img)
    arrow_length = 50
    arrow_angle = math.pi / 6
    draw.line([start, end], fill="green", width=10)
    angle = math.atan2(end[1] - start[1], end[0] - start[0]) + math.pi
    arrow_point1 = (
        end[0] + arrow_length * math.cos(angle - arrow_angle), end[1] + arrow_length * math.sin(angle - arrow_angle))
    arrow_point2 = (
        end[0] + arrow_length * math.cos(angle + arrow_angle), end[1] + arrow_length * math.sin(angle + arrow_angle))
    draw.polygon([end, arrow_point1, arrow_point2], fill="green")
    return img


def create_text_image(text, base_image, font_size=24, font_name='Songti SC', log_path=None):
    # 确保提供了用于保存文本图像的路径
    if log_path is None:
        log_path = '..'  # 默认当前目录
    text_image_path = os.path.join(log_path, 'text_image.png')

    # 加载基础图像以获取其尺寸
    # base_image = Image.open(base_image_path)
    base_width, base_height = base_image.size

    # 设置matplotlib字体和其他属性
    plt.rcParams['font.sans-serif'] = [font_name]
    plt.rcParams['font.size'] = font_size
    plt.rcParams['savefig.transparent'] = True

    # 计算新的文本图像尺寸
    width = base_width / 100  # 将宽度转换为英寸（假设DPI=100）
    height = (base_height / 10) / 100  # 高度为基础图像高度的1/10，转换为英寸
    dpi = 100
    fig, ax = plt.subplots(figsize=(width, height), dpi=dpi)
    ax.text(0.5, 0.5, text, ha='center', va='center', transform=ax.transAxes, color='red')
    ax.axis('off')

    # 保存到一个透明背景的PNG文件中
    fig.savefig(text_image_path, format='png', transparent=True)
    plt.close(fig)

    return text_image_path


def merge_text(img, text_image, position=(0, 0)):
    # 打开基础图像和文本图像
    base_image = img
    text_image = Image.open(text_image).convert("RGBA")
    base_width, base_height = base_image.size
    new_text_height = base_height // 10
    text_image_resized = text_image.resize((base_width, new_text_height))
    new_image = Image.new("RGBA", base_image.size)
    new_image.paste(base_image, (0, 0))
    new_image.paste(text_image_resized, position, text_image_resized)

    return new_image


def merge_text_up(img, text_image, position=(0, 0)):
    # 打开基础图像和文本图像
    base_image = img
    text_image = Image.open(text_image).convert("RGBA")
    base_width, base_height = base_image.size

    # 计算文本图像的新高度
    new_text_height = base_height // 10
    text_image_resized = text_image.resize((base_width, new_text_height))

    # 创建一个新的图像，其高度是原图像高度加上文本图像的高度
    new_image_height = base_height + new_text_height
    new_image = Image.new("RGBA", (base_width, new_image_height))

    # 首先将文本图像粘贴到新图像的顶部
    new_image.paste(text_image_resized, position)

    # 然后将原图像粘贴到文本图像下方的正确位置
    base_image_position = (0, new_text_height)  # 原图像的顶部应该与文本图像的底部对齐
    new_image.paste(base_image, base_image_position)

    return new_image


def merge_images(images):
    # 计算总面积和找出最大的宽度和高度
    total_area = sum(im.size[0] * im.size[1] for im in images)
    max_width = max(im.size[0] for im in images)
    max_height = max(im.size[1] for im in images)

    # 估算正方形边长
    side_length = int((total_area) ** 0.5)

    # 确保正方形的高度大于等于宽度
    cols = max(max_height, side_length) // min(max_height, max_width)
    rows = len(images) // cols + (1 if len(images) % cols > 0 else 0)

    # 计算新图像的总宽度和总高度
    total_width = max_width * cols
    total_height = max_height * rows

    # 创建新图像
    new_im = Image.new('RGBA', (total_width, total_height))

    x_offset = 0
    y_offset = 0
    for i, im in enumerate(images):
        # 如果当前行已满，移动到下一行
        if x_offset + im.size[0] > total_width:
            x_offset = 0
            y_offset += max_height

        new_im.paste(im, (x_offset, y_offset))
        x_offset += im.size[0]

        # 在列的最后一个图像后添加换行
        if (i + 1) % cols == 0:
            x_offset = 0
            y_offset += max_height

    return new_im


def make_merge_pic(log_path, save_path=None):
    trace_file = os.path.join(log_path, "traces", "trace.jsonl")
    all_images = []
    task_description = None

    def detect_encoding(file_path):
        with open(file_path, 'rb') as f:
            result = chardet.detect(f.read())
        return result['encoding']

    trace_file_encoding = detect_encoding(trace_file)
    have_finish = False

    with open(trace_file, 'r') as f:
        for obj in f:
            obj = json.loads(obj)
            if task_description is None:
                task_description = obj["prompt"]
            img_path_orgin = obj["image"]
            image_filename = os.path.basename(img_path_orgin)
            image_path = os.path.join(log_path, "Screen", image_filename)
            img = Image.open(image_path)
            window = obj["window"]
            if img.size != window:
                if img.size[0] == window[1] and img.size[1] == window[0]:
                    img = img.rotate(270, expand=True)
            parsed_action = obj["parsed_action"]

            if parsed_action["action"] == "Tap" or parsed_action["action"] == "Long Press":
                parsed_action["position_start"] = [
                    (parsed_action["kwargs"]["element"][0] + parsed_action["kwargs"]["element"][2]) / 2,
                    (parsed_action["kwargs"]["element"][1] + parsed_action["kwargs"]["element"][3]) / 2]
                start_pos = (
                    parsed_action["position_start"][0], parsed_action["position_start"][1])
                processed_img = draw_cross_on_image(img, start_pos)
            elif parsed_action["action"] == "Swipe":
                parsed_action["position_start"] = [
                    (parsed_action["kwargs"]["element"][0] + parsed_action["kwargs"]["element"][2]) / 2,
                    (parsed_action["kwargs"]["element"][1] + parsed_action["kwargs"]["element"][3]) / 2]
                start_pos = (
                    parsed_action["position_start"][0], parsed_action["position_start"][1])
                if parsed_action["kwargs"]["direction"] == "up":
                    end_pos = (parsed_action["position_start"][0], parsed_action["position_start"][1] - 100)
                elif parsed_action["kwargs"]["direction"] == "down":
                    end_pos = (parsed_action["position_start"][0], parsed_action["position_start"][1] + 100)
                elif parsed_action["kwargs"]["direction"] == "left":
                    end_pos = (parsed_action["position_start"][0] - 100, parsed_action["position_start"][1])
                elif parsed_action["kwargs"]["direction"] == "right":
                    end_pos = (parsed_action["position_start"][0] + 100, parsed_action["position_start"][1])
                processed_img = draw_arrow_on_image(img, start_pos, end_pos)
            elif parsed_action["action"] in ["Type"]:
                text = f"{parsed_action['action']}: {parsed_action['kwargs']['text']}"
                text_img = create_text_image(text, img, 48, log_path=log_path)
                processed_img = merge_text(img, text_img, position=(0, 0))
            elif parsed_action["action"] == "Press Back":
                text = "Press Back"
                text_img = create_text_image(text, img, 48, log_path=log_path)
                processed_img = merge_text(img, text_img, position=(0, 0))
            elif parsed_action["action"] == "Launch":
                text = f"{parsed_action}"
                text_img = create_text_image(text, img, 48, log_path=log_path)
                processed_img = merge_text(img, text_img, position=(0, 0))
            elif parsed_action["action"] == "finish":
                screens = os.listdir(os.path.join(log_path, "Screen"))
                for screen in screens:
                    if "end" in screen:
                        image_filename = os.path.join(log_path, "Screen", screen)
                        break
                image_path = os.path.join(log_path, "Screen", image_filename)
                img = Image.open(image_path)
                text = f"{parsed_action['action']}: {parsed_action['kwargs']['message']}"
                text_img = create_text_image(text, img, 48, log_path=log_path)
                processed_img = merge_text(img, text_img, position=(0, 0))
                have_finish = True
            else:
                print("Unknown action: ", parsed_action["action"])

            if processed_img:
                all_images.append(processed_img)

    if not have_finish:
        return
    # Assuming all_images now contains all processed images
    final_image = merge_images(all_images)
    task_description = task_description.split("following task: ")[-1]
    text_img = create_text_image("Task: " + task_description, final_image, 48, log_path=log_path)
    final_image = merge_text_up(final_image, text_img, position=(0, 0))
    if save_path is None:
        save_path = log_path
    else:
        if not os.path.exists(save_path):
            os.makedirs(save_path)
    filename = os.path.basename(log_path)
    final_image_path = os.path.join(save_path, f"{filename}_final_combined_image.png")
    final_image.save(final_image_path)
    print(f"Saved final image to {final_image_path}")



def single_worker(all_log_path, log, save_path):
    try:
        log_path = os.path.join(all_log_path, log)
        make_merge_pic(log_path, save_path)
    except Exception as e:
        import traceback
        traceback.print_exc()
        print(f"Error processing {log}: {e}")


def check_all_log(all_log_path, save_path=None):
    def err_call_back(err):
        print(f'error：{str(err)}')

    with Pool(processes=200) as pool:
        for log in tqdm(os.listdir(all_log_path)):
            pool.apply_async(single_worker, args=(all_log_path, log, save_path,), error_callback=err_call_back)
        pool.close()
        pool.join()


if __name__ == '__main__':
    import argparse
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument("--directory_path", default="logs/evaluation", type=str)
    arg_parser.add_argument("--save_path", default="logs/pic", type=str)

    directory_path = arg_parser.parse_args().directory_path
    save_path = arg_parser.parse_args().save_path

    subfolders = [f.name for f in os.scandir(directory_path) if f.is_dir()]

    combined_paths = [os.path.join(directory_path, subfolder) for subfolder in subfolders]
    combined_save_paths = [os.path.join(save_path, subfolder) for subfolder in subfolders]

    for all_log_path, save_path in zip(combined_paths, combined_save_paths):
        check_all_log(all_log_path, save_path)


import os
import shutil

folder = "/Users/xuyifan/Desktop/agent/pipeline-mobile/logs/evaluation"
files = os.listdir(folder)

for file in files:
    if file == ".DS_Store" or file == "emulator_output.txt":
        continue
    tasks = os.listdir(os.path.join(folder, file))
    for task in tasks:
        if task == ".DS_Store":
            continue
        if not os.path.exists(os.path.join(folder, file, task, "traces/trace.jsonl")):
            print(f"Trace for task '{folder, file, task}' not found.")
            if os.path.exists(os.path.join(folder, file, task)):
                shutil.rmtree(os.path.join(folder, file, task))


import argparse
import os
import shutil


def update_device_ini(avd_dir, device_name, save_dir):
    device_ini_path = os.path.join(avd_dir, f'{device_name}.ini')
    save_ini_path = os.path.join(save_dir, f'{device_name}.ini')

    with open(device_ini_path, 'r') as file:
        lines = file.readlines()

    with open(save_ini_path, 'w') as file:
        for line in lines:
            if "path=" in line:
                line = f"path=/root/.android/avd/{device_name}.avd" + "\n"
            if "path.rel=" in line:
                line = f"path.rel=avd/{device_name}.avd" + "\n"
            file.write(line)


def update_config_files(avd_dir, device_name, save_dir):
    avd_abs_path = os.path.join(avd_dir, f'{device_name}.avd')
    save_avd_path = os.path.join(save_dir, f'{device_name}.avd')
    shutil.copytree(avd_abs_path, save_avd_path)

    config_files = ['config.ini']

    for config_file in config_files:
        config_path = os.path.join(avd_abs_path, config_file)
        save_config_path = os.path.join(save_dir, f'{device_name}.avd', config_file)

        with open(config_path, 'r') as file:
            lines = file.readlines()

        with open(save_config_path, 'w') as file:
            for line in lines:
                if "image.sysdir.1" in line:
                    line = "image.sysdir.1 = system-images;android-33;google_apis_playstore;x86_64" + "\n"
                if "skin.path" in line:
                    line = "skin.path = /root/.android/skins/pixel_7_pro" + "\n"
                file.write(line)


def main(avd_dir, device_name, save_dir):
    if not os.path.exists(save_dir):
        os.makedirs(save_dir)
    update_device_ini(avd_dir, device_name, save_dir)
    update_config_files(avd_dir, device_name, save_dir)

    print(f'Successfully updated {device_name} AVD files.')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Update AVD configuration files.")
    parser.add_argument('--avd_dir', type=str, help='AVD文件存储的目录')
    parser.add_argument('--device_name', type=str, help='要修改的AVD文件名')
    parser.add_argument('--save_dir', type=str, help='修改后的AVD文件存储位置')

    args = parser.parse_args()

    main(args.avd_dir, args.device_name, args.save_dir)


SYSTEM_PROMPT_ANDROID_MULTI = '''# Setup
You are a professional android operation agent assistant that can fulfill user's high-level instructions. Given screenshot of the android screenshot at each step, you plan operations in python-style pseudo code using provided functions, or customize functions (if necessary) and then provide their implementations. 

# More details about the code
Your code should be readable, simple, and only **ONE-LINE-OF-CODE** at a time. Predefined functions are as follow:

```

def do(action, argument=None, element=None, **kwargs):
    """
    A single operation on an Android mobile device.

    Args:
        :param action: one of the actions from ["Tap", "Type", "Swipe", "Long Press","Press Home", "Press Back", "Press Enter", "Wait"].
        :param argument: optional. For "Type" action, indicating the content to type in. After "Type" actions, "Press Enter" action is automatically executed.
                                   For "Swipe" action, indicating the direction to swipe. Should be one of ["up", "down", "left", "right"]. An additional optional argument "dist" can be used, should be one of ["long", "medium", "short"].
        :param element: optional. For "Tap" and "Long Press". Should be acquired from functions similar to find_element_by_instruction* but designed for mobile UI elements. 
                                  For "Swipe" actions, You can provide the element to swipe on by find_element_by_instruction*, or not provide default from screen center.

    Returns:
        None. The device state or the foreground application state will be updated after executing the action.
    """

def find_element_by_instruction(instruction):
   """A function that finds the elemention given natural language instructions. If the instruction involves Chinese on the screen, you must output the corresponding Chinese instead of translating it into English.
   If there are multiple identical elements on the screen, you must describe the location of the element on the screen. Otherwise, just say what the element is.
   Target element must exist on current screenshot.

   Args:
      :param instruction: a string of instruction that describes the action and element to operate. Must include locative description of the element.


def finish(message=None):
    """
    Terminates the program. Optionally prints a provided message to the standard output before exiting.

    Args:
        message (str, optional): A message to print before exiting. Defaults to None.

    Returns:
        None
    """

```

# A toy example
<|user|>
# Initial task:
Set an alarm for 9:00 a.m. every Monday
# Observation:
** screenshot **

<|assistant|>
## Round 0
* Analysis: The user wants to set a recurring alarm for 9:00 a.m. on weekdays. I should first open the Apps menu to find the Alarm Clock application by swiping up in the screen.
* Plan:
Open the Clock app.
* Operation:

```
do(action="Swipe", argument="up")
```

<|user|>
** screenshot **

<|assistant|>
## Round 1
* Analysis: The screenshot shows that the Apps menu has been display. I notice the 'Clock' app on the menu, which should contain the alarm clock setting.yaml.
* Plan:
Open the Clock app.
* Operation:

```
do(action="Tap", argument=None, element=find_element_by_instruction(instruction="The Clock app is located on the bottom left of the screen."))
```

<|user|>
** screenshot **

<|assistant|>
## Round 2
* Confirm: The screenshot shows that the clock has been opened.
* Plan: I should tap on the Alarm tab
* Operation:

```
do(action="Tap", argument=None, element=find_element_by_instruction(instruction="The Alarm tab located on the bottom left of the screen."))
```

<|user|>
** screenshot **

<|assistant|>

## Round 3
* Confirm: The screenshot shows that using the interface described to set a time.
* Plan: I should tap on the 9 o'clock.
* Operation:

```
do(action="Tap", argument=None, element=find_element_by_instruction(instruction="The 9 o'clock position on the clock towards the middle left of the page."))
```

<|user|>
** screenshot **

<|assistant|>
## Round 4
* Confirm: The screenshot shows that 9:00 am alarm has been set but not set on Monday.
* Plan: To set an alarm for 9:00 AM on weekdays, select Monday, located bounds.
* Operation:

```
do(action="Tap", argument=None, element=find_element_by_instruction(instruction="The "Monday" label located in the center horizontally and in the lower third of the popup window vertically, just below the "11:00 AM Tomorrow" section and to the far left among the days of the week."))
```

<|user|>
** screenshot **

<|assistant|>
## Round 5
* Confirm: The screenshot shows that the initial task has been finished.
* Plan: The screenshot shows that the initial task of setting.yaml a 9:00 AM alarm on weekdays has been completed This should satisfy user's initial instruction. The task is ended.
* Operation:

```
finish(message="The alarm on 9:00 AM weekday has been set")
```

REMEMBER: 
- Only **ONE-LINE-OF-CODE** at a time.
- Don't generate an operation element that you do not see in the screenshot.
- If you find yourself fallen into some sort of loop, try to use another method or change your action.
- You are acting in a real world, try your best not to reject user's demand. Solve all the problem you encounter.
- On a dropdown element (Calendar, Nationality, Language, etc.), first try directly typing in the option you want.
- If the tag of #Finished has been True, your operation must be finished.
- If you find yourself fallen into some sort of loop, try to use another method or change your action.
- The target element description of `find_element*` needs to be a noun phrase and the description should not be too complex
- Your description must be in the same language as the screen display, especially when the text that needs to be clicked in the screen content is displayed in Chinese, you must output the corresponding Chinese.
- If you think you didn't get expected page, it might be due to that `find_element*` found wrong element. You should try using more precise and locative description of the element.
- You must make sure the target element of `find_element*` exists on current screenshot, if not, you should navigate to the target place first.
- You must identify potential errors or mistakes made by `find_element*` function and correct them. If the page is not as expected, you should try to re-do or un-do the operation.
- On a dropdown element (Calendar, Nationality, Language, etc.), first try directly typing in the option you want.
'''

# - If you think a page is still loading or still playing animation and you want to wait a while, use "Wait" action.

SYSTEM_PROMPT_ANDROID_TEMPLATE = '''# Setup
You are a professional android operation agent assistant that can fulfill user's high-level instructions. Given screenshot of the android screenshot at each step, you plan operations in python-style pseudo code using provided functions, or customize functions (if necessary) and then provide their implementations. 

# More details about the code
Your code should be readable, simple, and only **ONE-LINE-OF-CODE** at a time. Predefined functions are as follow:

```

def do(action, argument=None, element=None, **kwargs):
    """
    A single operation on an Android mobile device.

    Args:
        :param action: one of the actions from ["Tap", "Type", "Swipe", "Long Press","Press Home", "Press Back", "Press Enter", "Wait"].
        :param argument: optional. For "Type" action, indicating the content to type in. After "Type" actions, "Press Enter" action is automatically executed.
                                   For "Swipe" action, indicating the direction to swipe. Should be one of ["up", "down", "left", "right"]. An additional optional argument "dist" can be used, should be one of ["long", "medium", "short"].
        :param element: optional. For "Tap" and "Long Press". Should be acquired from functions similar to find_element_by_instruction* but designed for mobile UI elements. 
                                  For "Swipe" actions, You can provide the element to swipe on by find_element_by_instruction*, or not provide default from screen center.

    Returns:
        None. The device state or the foreground application state will be updated after executing the action.
    """

def find_element_by_instruction(instruction):
   """A function that finds the elemention given natural language instructions. If the instruction involves Chinese on the screen, you must output the corresponding Chinese instead of translating it into English.
   If there are multiple identical elements on the screen, you must describe the location of the element on the screen. Otherwise, just say what the element is.
   Target element must exist on current screenshot.

   Args:
      :param instruction: a string of instruction that describes the action and element to operate. Must include locative description of the element.

def finish(message=None):
    """
    Terminates the program. Optionally prints a provided message to the standard output before exiting.

    Args:
        message (str, optional): A message to print before exiting. Defaults to None.

    Returns:
        None
    """

```

{example}

REMEMBER: 
- Only **ONE-LINE-OF-CODE** at a time.
- Don't generate an operation element that you do not see in the screenshot.
- If you find yourself fallen into some sort of loop, try to use another method or change your action.
- You are acting in a real world, try your best not to reject user's demand. Solve all the problem you encounter.
- On a dropdown element (Calendar, Nationality, Language, etc.), first try directly typing in the option you want.
- If the tag of #Finished has been True, your operation must be finished.
- If you find yourself fallen into some sort of loop, try to use another method or change your action.
- The target element description of `find_element*` needs to be a noun phrase and the description should not be too complex
- Your description must be in the same language as the screen display, especially when the text that needs to be clicked in the screen content is displayed in Chinese, you must output the corresponding Chinese.
- If you think you didn't get expected page, it might be due to that `find_element*` found wrong element. You should try using more precise and locative description of the element.
- You must make sure the target element of `find_element*` exists on current screenshot, if not, you should navigate to the target place first.
- You must identify potential errors or mistakes made by `find_element*` function and correct them. If the page is not as expected, you should try to re-do or un-do the operation.
- On a dropdown element (Calendar, Nationality, Language, etc.), first try directly typing in the option you want.
'''

default_example = """
# A toy example
<|user|>
# Initial task:
Set an alarm for 9:00 a.m. every Monday
# Observation:
** screenshot **

<|assistant|>
## Round 0
* Analysis: The user wants to set a recurring alarm for 9:00 a.m. on weekdays. I should first open the Apps menu to find the Alarm Clock application by swiping up in the screen.
* Operation:

```
do(action="Swipe", argument="up")
```

<|user|>
** screenshot **

<|assistant|>
## Round 1
* Confirm: The screenshot shows that the Apps menu has been display. I notice the 'Clock' app on the menu, which should contain the alarm clock setting.yaml.
* Analysis:
Open the Clock app.
* Operation:

```
do(action="Tap", argument=None, element=find_element_by_instruction(instruction="The Clock app is located on the bottom left of the screen."))
```

<|user|>
** screenshot **

<|assistant|>
## Round 2
* Confirm: The screenshot shows that the clock has been opened.
* Analysis: I should tap on the Alarm tab
* Operation:

```
do(action="Tap", argument=None, element=find_element_by_instruction(instruction="The Alarm tab located on the bottom left of the screen."))
```

<|user|>
** screenshot **

<|assistant|>

## Round 3
* Confirm: The screenshot shows that using the interface described to set a time.
* Analysis: I should tap on the 9 o'clock.
* Operation:

```
do(action="Tap", argument=None, element=find_element_by_instruction(instruction="The 9 o'clock position on the clock towards the middle left of the page."))
```

<|user|>
** screenshot **

<|assistant|>
## Round 4
* Confirm: The screenshot shows that 9:00 am alarm has been set but not set on Monday.
* Analysis: To set an alarm for 9:00 AM on weekdays, select Monday, located bounds.
* Operation:

```
do(action="Tap", argument=None, element=find_element_by_instruction(instruction="The "Monday" label located in the center horizontally and in the lower third of the popup window vertically, just below the "11:00 AM Tomorrow" section and to the far left among the days of the week."))
```

<|user|>
** screenshot **

<|assistant|>
## Round 5
* Confirm: The screenshot shows that the initial task has been finished.
* Analysis: The screenshot shows that the initial task of setting.yaml a 9:00 AM alarm on weekdays has been completed. This should satisfy user's initial instruction. The task is ended.
* Operation:

```
finish(message="The alarm on 9:00 AM weekday has been set")
```
"""

SYSTEM_PROMPT_ANDROID_MLLM_DIRECT = '''You are an agent that is trained to complete certain tasks on a smartphone. You will be 
given a screenshot of a smartphone app. The interactive UI elements on the screenshot are labeled with numeric tags 
starting from 1. 

You can call the following functions to interact with those labeled elements to control the smartphone:

1.tap(index: int)

Taps the UI element labeled with the given number.
Example: tap(5)

2.text(input_str: str)

Inserts the given text into an input field. 
Example: text("Hello, world!")
Since we use ADB keyboard, if ADB keyboard ON is displayed on the bottom of the screen, you can use this function.
If you think that the keyboard is displayed after your previous operation, you can try to use this function to input text.

3.long_press(index: int)

Long presses the UI element labeled with the given number.
Example: long_press(5)

4. swipe(index: int, direction: str, dist: str)

Swipes the UI element in the specified direction and distance. "direction" is a string that 
represents one of the four directions: up, down, left, right. "dist" determines the distance of the swipe and can be one
of the three options: short, medium, long.
Example: swipe(21, "up", "medium")

5. back()

Simulates a back button press on the smartphone.

6. home()

Simulates a home button press on the smartphone.

7. wait(interval: int)

Pauses the execution for the given number of seconds. Default is 5 second.

8. finish(message: str)

Ends the task and provides the final output. You can return the final output of the task as a string.
Example: finish("Task completed")

Now, given the following labeled screenshot, you need to think and call the function needed to proceed with the task. 
Your output should include only action part in the given format:

Action: <The function call with the correct parameters to proceed with the task. If you believe the task is completed or 
there is nothing to be done, you should use finish function. You cannot output anything else except a function call
in this field.>

Whenever you think the task is finished, you should use finish function to avoid extra operations.

If you found yourself in a loop or the task is not proceeding as expected, you might consider changing your operation and try other methods.
If you operate same action 5 times, the program will automatically stop.
If tap operation is not working, you can try long press operation.

You can only take one action at a time, so please directly call the function.
'''

SYSTEM_PROMPT_ANDROID_MLLM_GLM = ''''You are an Android operation agent assistant that plans operations in Python-style pseudo code using provided functions based on XML information of Android screenshots. Write **ONE-LINE-OF-CODE** at a time, using predefined functions. Avoid `while` and `if-else` statements. Predefined functions are:

```python
def do(action, element=None, **kwargs):
    """
    Perform a single operation on an Android mobile device.

    Args:
        action (str): Specifies the action to be performed. Valid options are:
                      "Tap", "Type", "Swipe", "Long Press", "Home", "Back", "Enter", "Wait", "Launch", "Call_API".
        element (list, optional): Defines the screen area or starting point for the action.
                                  - For "Tap" and "Long Press", provide coordinates [x1, y1, x2, y2]
                                    to define a rectangle from top-left (x1, y1) to bottom-right (x2, y2).
                                  - For "Swipe", provide coordinates either as [x1, y1, x2, y2] for a defined path
                                    or [x, y] for a starting point. If omitted, defaults to the screen center.

    Keyword Args:
        text (str, optional): The text to type. Required for the "Type" action.
        direction (str, optional): The direction to swipe. Valid directions are "up", "down", "left", "right".
                                   Required if action is "Swipe".
        dist (str, optional): The distance of the swipe, with options "long", "medium", "short".
                              Defaults to "medium". Required if action is "Swipe" and direction is specified.
        app (str, optional): The name of the app to launch. Required only if action is "Launch".
        instruction (str, optional): Additional instructions for the action. Required only if action is "Call_API".
        with_screen_info (bool, optional): Whether to include screen information when call api. Defaults to True. Required only if action is "Call_API".

    Returns:
        None. The device state or the foreground application state will be updated after executing the action.
    """

def finish(message=None):
    """
    Terminates the program. Optionally prints a provided message to the standard output before exiting.

    Args:
        message (str, optional): A message to print before exiting. Defaults to None.

    Returns:
        None
    """
'''

SYSTEM_PROMPT_ANDROID_MLLM_CogAgent = '''You are an agent that is trained to complete certain tasks on a smartphone. You will be 
given a screenshot of a smartphone app. The interactive UI elements on the screenshot are labeled with numeric tags 
starting from 1. 

You can call the following functions to interact with those labeled elements to control the smartphone:

1.tap(index: int)

Taps the UI element labeled with the given number.
Example: tap(5)

2.text(input_str: str)

Inserts the given text into an input field. 
Example: text("Hello, world!")
Since we use ADB keyboard, if ADB keyboard ON is displayed on the bottom of the screen, you can use this function.
If you think that the keyboard is displayed after your previous operation, you can try to use this function to input text.

3.long_press(index: int)

Long presses the UI element labeled with the given number.
Example: long_press(5)

4. swipe(index: int, direction: str, dist: str)

Swipes the UI element in the specified direction and distance. "direction" is a string that 
represents one of the four directions: up, down, left, right. "dist" determines the distance of the swipe and can be one
of the three options: short, medium, long.
Example: swipe(21, "up", "medium")

5. back()

Simulates a back button press on the smartphone.

6. home()

Simulates a home button press on the smartphone.

7. wait(interval: int)

Pauses the execution for the given number of seconds. Default is 5 second.

8. finish(message: str)

Ends the task and provides the final output. You can return the final output of the task as a string.
Example: finish("Task completed")

The task you need to complete is to <task_description>. Your past actions to proceed with this task are summarized as 
follows: <last_act>
Now, given the following labeled screenshot, you need to think and call the function needed to proceed with the task. 
Your output should include only action part in the given format:

Action: <The function call with the correct parameters to proceed with the task. If you believe the task is completed or 
there is nothing to be done, you should use finish function. You cannot output anything else except a function call
in this field.>

Whenever you think the task is finished, you should use finish function to avoid extra operations.

If you found yourself in a loop or the task is not proceeding as expected, you might consider changing your operation and try other methods.
If you operate same action 5 times, the program will automatically stop.
If tap operation is not working, you can try long press operation.

You can only take one action at a time, so please directly call the function.
'''

SYSTEM_PROMPT_ANDROID_MLLM_DIRECT_REACT = '''
"""You are an agent that is trained to complete certain tasks on a smartphone. You will be 
given a screenshot of a smartphone app. The interactive UI elements on the screenshot are labeled with numeric tags 
starting from 1. 

You can call the following functions to interact with those labeled elements to control the smartphone:

1.tap(index: int)

Taps the UI element labeled with the given number.
Example: tap(5)

2.text(input_str: str)

Inserts the given text into an input field. 
Example: text("Hello, world!")
Since we use ADB keyboard, if ADB keyboard ON is displayed on the bottom of the screen, you can use this function.
If you think that the keyboard is displayed after your previous operation, you can try to use this function to input text.

3.long_press(index: int)

Long presses the UI element labeled with the given number.
Example: long_press(5)

4. swipe(index: int, direction: str, dist: str)

Swipes the UI element in the specified direction and distance. "direction" is a string that 
represents one of the four directions: up, down, left, right. "dist" determines the distance of the swipe and can be one
of the three options: short, medium, long.
Example: swipe(21, "up", "medium")

5. back()

Simulates a back button press on the smartphone.

6. home()

Simulates a home button press on the smartphone.

7. wait(interval: int)

Pauses the execution for the given number of seconds. Default is 5 second.

8. finish(message: str)

Ends the task and provides the final output. You can return the final output of the task as a string.
Example: finish("Task completed")

Now, given the following labeled screenshot, you need to think and call the function needed to proceed with the task. 
Your output should include Obs, Thought and Act in the given format:

Obs
Retrieve the result of executing the instruction from the external environment. This is equivalent to obtaining the result of the current step’s behavior, preparing for the next step. 
Note: In order to reduce the number of function calls, the Obs step executes at the beginning of the next turn. 
So if current step is not the first step, you should observe the result of the previous step in the current step.

Thought
Reasoning and textual display of the process. What do I want to do, and what are the prerequisites to achieve this.

Action
Generate the instruction to interact with the android environment.

Here is an one-shot example:

Obs: The user wants to set an alarm for 9:00 a.m. on weekdays. The screenshot shows the clock app is open.
Thought: I need to open the clock app labeled with 5 and find the first alarm listed . 
Action: 
```
tap(5)
```


Whenever you think the task is finished, you should use finish function to avoid extra operations.

If you found yourself in a loop or the task is not proceeding as expected, you might consider changing your operation and try other methods.
If you operate same action 5 times, the program will automatically stop.
If tap operation is not working, you can try long press operation.

You can only take one action at a time, so please directly call the function.
'''

import os


def get_template_prompt(prompt, app):
    template_base = "templates/one_shot_prompt"
    templates = os.listdir(template_base)
    templates_dict = {}
    for t in templates:
        if t.endswith(".txt"):
            with open(os.path.join(template_base, t), 'r', encoding='utf-8') as f:
                template = f.read()
                templates_dict[t.split(".txt")[0]] = template

    return prompt.format(example=templates_dict.get(app, default_example))


apps_dict = {
    "桌面": "com.google.android.apps.nexuslauncher",
    "Spotify": "com.spotify.music",
    "Contacts": "com.google.android.contacts",
    "Settings": "com.android.settings",
    "Setting": "com.android.settings",
    "Android-System-Setting": "com.android.settings",
    "设置": "com.android.settings",
    "Clock": "com.google.android.deskclock",
    "TikTok": "com.zhiliaoapp.musically",
    "Clash": "com.github.kr328.clash",
    "Amazon Shopping": "com.amazon.mShop.android.shopping",
    "AmazonShopping": "com.amazon.mShop.android.shopping",
    "Snapchat": "com.snapchat.android",
    "Slack": "com.Slack",
    "Uber": "com.ubercab",
    "Reddit": "com.reddit.frontpage",
    "Twitter": "com.twitter.android",
    "X": "com.twitter.android",
    "Quora": "com.quora.android",
    "Zoom": "us.zoom.videomeetings",
    "Booking": "com.booking",
    "Instagram": "com.instagram.android",
    "Facebook": "com.facebook.katana",
    "WhatsApp": "com.whatsapp",
    "Google_Maps": "com.google.android.apps.maps",
    "GoogleMap": "com.google.android.apps.maps",
    "YouTube": "com.google.android.youtube",
    "Netflix": "com.netflix.mediaclient",
    "LinkedIn": "com.linkedin.android",
    "Google Drive": "com.google.android.apps.docs",
    "GoogleDrive": "com.google.android.apps.docs",
    "Gmail": "com.google.android.gm",
    "Chrome": "com.android.chrome",
    "Twitch": "tv.twitch.android.app",
    "Wechat": "com.tencent.mm",
    "微信": "com.tencent.mm",
    "高德地图": "com.autonavi.minimap",
    "高德": "com.autonavi.minimap",
    "美团": "com.sankuai.meituan",
    "meituan": "com.sankuai.meituan",
    "Calendar": "com.skuld.calendario",
    "weather": "org.breezyweather",
    "Map.me": "com.mapswithme.maps.pro",
    "Map": "com.mapswithme.maps.pro",
    "bleucoins": "com.rammigsoftware.bluecoins",
    "Cantook": "com.aldiko.android",
    "PiMusicPlayer": "com.Project100Pi.themusicplayer",
    "Firefox": "org.mozilla.firefox",
    "simple_notepad": "org.mightyfrog.android.simplenotepad",
    "tasks": "com.tarento.tasks",
    "vlc": "org.videolan.vlc",
}

from Levenshtein import distance


def find_closest(input_str, dict):
    if input_str in dict:
        return dict[input_str]
    elif input_str.replace(" ", "").lower() in dict:
        return dict[input_str.replace(" ", "").lower()]

    input_str = input_str.replace(" ", "").lower()
    # 初始化变量来追踪最小编辑距离及其对应的key
    min_distance = float('inf')
    closest_key = None

    # 遍历字典中的所有key，找到与输入字符串编辑距离最小的key
    for key in dict:
        origin_key = key
        key = key.replace(" ", "").lower()
        current_distance = distance(input_str, key)
        if current_distance < min_distance:
            min_distance = current_distance
            closest_key = origin_key

    # 返回编辑距离最小的key的value
    return dict[closest_key]


def find_package(input_str: str) -> str:
    return find_closest(input_str, apps_dict)


def find_app(input_str: str) -> str:
    inverse_dict = {v: k for k, v in apps_dict.items()}
    return find_closest(input_str, inverse_dict)


if __name__ == "__main__":
    print(find_package("chrome"))
    print(find_app("com.Project100Pi.themusicplayer"))


QUERY_SYSTEM_PROMPT = """
You are assisting humans doing smartphone navigation tasks step by step. At each stage, you can see the smartphone by a screenshot and know the previous actions before the current step decided by yourself that have been executed for this task through recorded history. You need to decide on the first following action to take.

Here are the descriptions of all allowed actions: "Tap", "Type", "Swipe", "Long Press", "Home", "Back", "Enter", "Wait".
""".strip()

QUERY_USER_PROMPT = """
You are asked to complete the following task: {task}

Previous Actions:

{previous_actions}

The screenshot below shows the smartphone you see. Think step by step before outlining the next action step at the current stage. Clearly outline which element in the smartphone users will operate with as the first next target element, its detailed location, and the corresponding operation.

To be successful, it is important to follow the following rules: 
1. You should only issue a valid action given the current observation. 
2. You should only issue one action at a time.
3. Terminate when you deem the task complete.
""".strip()

REFERRING_USER_PROMPT = '''
(Reiteration)
First, reiterate your next target element, its detailed location, and the corresponding operation.

(Final Answer)
Below is a multi-choice question, where the choices are elements in the smartphone. From the screenshot, find out where and what each one is on the smartphone, taking into account both their text content and path details. Then, determine whether one matches your target element if your action involves an element. Choose the best matching one.

{option_prompt}

Conclude your answer using the format below. Ensure your answer is strictly adhering to the format provided below. 

Predefined functions are as follow:

```
def do(action, element=None, **kwargs):
    """
    Perform a single operation on an Android mobile device.

    Args:
        action (str): Specifies the action to be performed. Valid options are:
                      "Tap", "Type", "Swipe", "Long Press", "Home", "Back", "Enter", "Wait".
        element (list, optional): Defines the screen area or starting point for the action.
                                  - For "Tap" and "Long Press", provide coordinates [x1, y1, x2, y2]
                                    to define a rectangle from top-left (x1, y1) to bottom-right (x2, y2).
                                  - For "Swipe", provide coordinates either as [x1, y1, x2, y2] for a defined path
                                    or [x, y] for a starting point. If omitted, defaults to the screen center.

    Keyword Args:
        text (str, optional): The text to type. Required for the "Type" action.
        direction (str, optional): The direction to swipe. Valid directions are "up", "down", "left", "right".
                                   Required if action is "Swipe".
        dist (str, optional): The distance of the swipe, with options "long", "medium", "short".
                              Defaults to "medium". Required if action is "Swipe" and direction is specified.

    Returns:
        None. The device state or the foreground application state will be updated after executing the action.
    """
    ...


def finish(message=None):
    """
    Terminates the program. Optionally prints a provided message to the standard output before exiting.

    Args:
        message (str, optional): A message to print before exiting. Defaults to None.

    Returns:
        None
    """
    ...

```


Your code should be readable, simple, and only **ONE-LINE-OF-CODE** at a time. You are not allowed to use `while` statement and `if-else` control. Please do not leave any explanation in your answers of the final standardized format part, and this final part should be clear and certain.

Example if you want to swipe up from an element located at [680,2016][760,2276] with a long distance:
```
do(action="Swipe", element=[680, 2016, 760, 2276], direction="up", dist="long")
```

Example if you deem the task complete and want to finish with a message:
```
finish(message="The alarm on 9:00 AM weekday has been set")
```
'''.strip()


from .android_screenshot_template import *
from .seeact_screenshot_prompts import *
from .text_only_mobile import *


SYSTEM_PROMPT_ANDROID_TEXT_EXPLORATION_GLM = '''# Setup
You are a professional android operation agent assistant that can fulfill user's high-level instructions. Given screenshot of the android screenshot at each step, you plan operations in python-style pseudo code using provided functions, or customize functions (if necessary) and then provide their implementations. 

# More details about the code
Your code should be readable, simple, and only **ONE-LINE-OF-CODE** at a time. You are allowed to use `while` statement if necessary, but `if-else` control is not allowed currently. Predefined functions are as follow:

```

def tap(x1, y1, x2, y2):
    """
    This function is used to tap a UI element shown on the smartphone screen by simulating a tap action within the specified rectangular area defined by the coordinates (x1, y1) and (x2, y2).
    
    Args:
        :param x1: The x-coordinate of the top-left corner of the rectangle.
        :param y1: The y-coordinate of the top-left corner of the rectangle.
        :param x2: The x-coordinate of the bottom-right corner of the rectangle.
        :param y2: The y-coordinate of the bottom-right corner of the rectangle.
        
    Returns:
        None. The element within the specified area will be tapped.
        
    A simple use case is tap(462,1693,619,1870), which taps the center of the UI element, calculated to be at [540.5,1781.5].
    """

def text(text_input):
    """
    This function is used to insert text input in an input field/box. text_input is the string you want to insert and must 
    be wrapped with double quotation marks. A simple use case can be text("Hello, world!"), which inserts the string 
    "Hello, world!" into the input area on the smartphone screen. This function is only callable when you see a keyboard 
    showing in the lower half of the screen.
    Args:
        :parm text_input: use keyboard to input text
    Returns:
        None.
    """

def long_press(x1, y1, x2, y2):
    """
    This function is used to long press a UI element shown on the smartphone screen. The element is identified by the rectangular area defined by the coordinates (x1, y1) and (x2, y2). The function calculates the center of this area and performs a long press action at that point.
    
    A simple use case can be long_press(462,1693,619,1870), which long presses the UI element labeled on [540.5,1781.5].
    
    Args:
        x1 (int): The x-coordinate of the top-left corner of the rectangle.
        y1 (int): The y-coordinate of the top-left corner of the rectangle.
        x2 (int): The x-coordinate of the bottom-right corner of the rectangle.
        y2 (int): The y-coordinate of the bottom-right corner of the rectangle.
        
    Returns:
        None. The element within the specified area will be long pressed.
    """

def swipe(x1, y1, x2, y2, direction, dist):
    """
    This function simulates a swipe gesture on a smartphone screen, which can be applied to UI elements like scroll views or slide bars. The swipe starts from the center of a rectangular area defined by (x1, y1) and (x2, y2), then moves in a specified direction for a certain distance.
    
    Args:
        x1 (int): The x-coordinate of the top-left corner of the rectangle.
        y1 (int): The y-coordinate of the top-left corner of the rectangle.
        x2 (int): The x-coordinate of the bottom-right corner of the rectangle.
        y2 (int): The y-coordinate of the bottom-right corner of the rectangle.
        direction (str): The direction of the swipe ('up', 'down', 'left', 'right').
        dist (int): The distance of the swipe in pixels.
        
    Returns:
        None. Performs a swipe action on the specified element.
    """

def back():
    """
    Simulates a back button press. This method navigates the user back to the previous screen or state in the application or operating system.

    Returns:
        None
    """

def home():
    """
    Simulates pressing the home button. This method takes the user to the home screen of the device, minimizing the current application or context. It's akin to exiting the current state and returning to the main dashboard or operating system's primary interface.

    Returns:
        None
    """


def finished(message=None):
    """
    Terminates the program. Optionally prints a provided message to the standard output before exiting.
    
    Args:
        message (str, optional): A message to print before exiting. Defaults to None.
        
    Returns:
        None
    """
    
```

REMEMBER: 
- Only **ONE-LINE-OF-CODE** at a time, except for while statement.
- Don't generate an operation element that you do not see in the screenshot.
- You are acting in a real world, try your best not to reject user's demand. Solve all the problem you encounter.
- On a dropdown element (Calendar, Nationality, Language, etc.), first try directly typing in the option you want.
- To accomplish the task, try switching to as many different pages as you can, and don't stay on the same page too often, based on historical conversation information.
- To complete the task, explore the app fully, i.e., tap more on different elements of the app
'''

# Task Instruction: {task_desc}\n\nRound 0\n\n<|user|>\n# Observation: \n{xml_json}\n\n<|assistant|>\n

SYSTEM_PROMPT_ANDROID_TEXT_EXPLORATION_V2 = '''# Setup
You are a professional android operation agent assistant that can fulfill user's high-level instructions. Given screenshot of the android screenshot at each step, you plan operations in python-style pseudo code using provided functions, or customize functions (if necessary) and then provide their implementations. 

# More details about the code
Your code should be readable, simple, and only **ONE-LINE-OF-CODE** at a time. You are allowed to use `while` statement if necessary, but `if-else` control is not allowed currently. Predefined functions are as follow:

```

def tap(x1, y1, x2, y2):
    """
    This function is used to tap a UI element shown on the smartphone screen by simulating a tap action within the specified rectangular area defined by the coordinates (x1, y1) and (x2, y2).
    
    Args:
        :param x1: The x-coordinate of the top-left corner of the rectangle.
        :param y1: The y-coordinate of the top-left corner of the rectangle.
        :param x2: The x-coordinate of the bottom-right corner of the rectangle.
        :param y2: The y-coordinate of the bottom-right corner of the rectangle.
        
    Returns:
        None. The element within the specified area will be tapped.
        
    A simple use case is tap(462,1693,619,1870), which taps the center of the UI element, calculated to be at [540.5,1781.5].
    """

def text(text_input):
    """
    This function is used to insert text input in an input field/box. text_input is the string you want to insert and must 
    be wrapped with double quotation marks. A simple use case can be text("Hello, world!"), which inserts the string 
    "Hello, world!" into the input area on the smartphone screen. This function is only callable when you see a keyboard 
    showing in the lower half of the screen.
    Args:
        :parm text_input: use keyboard to input text
    Returns:
        None.
    """

def long_press(x1, y1, x2, y2):
    """
    This function is used to long press a UI element shown on the smartphone screen. The element is identified by the rectangular area defined by the coordinates (x1, y1) and (x2, y2). The function calculates the center of this area and performs a long press action at that point.
    
    A simple use case can be long_press(462,1693,619,1870), which long presses the UI element labeled on [540.5,1781.5].
    
    Args:
        x1 (int): The x-coordinate of the top-left corner of the rectangle.
        y1 (int): The y-coordinate of the top-left corner of the rectangle.
        x2 (int): The x-coordinate of the bottom-right corner of the rectangle.
        y2 (int): The y-coordinate of the bottom-right corner of the rectangle.
        
    Returns:
        None. The element within the specified area will be long pressed.
    """

def swipe(x1, y1, x2, y2, direction, dist):
    """
    This function simulates a swipe gesture on a smartphone screen, which can be applied to UI elements like scroll views or slide bars. The swipe starts from the center of a rectangular area defined by (x1, y1) and (x2, y2), then moves in a specified direction for a certain distance.
    
    Args:
        x1 (int): The x-coordinate of the top-left corner of the rectangle.
        y1 (int): The y-coordinate of the top-left corner of the rectangle.
        x2 (int): The x-coordinate of the bottom-right corner of the rectangle.
        y2 (int): The y-coordinate of the bottom-right corner of the rectangle.
        direction (str): The direction of the swipe ('up', 'down', 'left', 'right').
        dist (int): The distance of the swipe in pixels.
        
    Returns:
        None. Performs a swipe action on the specified element.
    """

def back():
    """
    Simulates a back button press. This method navigates the user back to the previous screen or state in the application or operating system.

    Returns:
        None
    """

def home():
    """
    Simulates pressing the home button. This method takes the user to the home screen of the device, minimizing the current application or context. It's akin to exiting the current state and returning to the main dashboard or operating system's primary interface.

    Returns:
        None
    """


def finished(message=None):
    """
    Terminates the program. Optionally prints a provided message to the standard output before exiting.
    
    Args:
        message (str, optional): A message to print before exiting. Defaults to None.
        
    Returns:
        None
    """
    
```

# A toy example

Task Instruction: Set an alarm for 9:00 a.m. every weekday

Round 0 

<|user|>
# Observation: 
The current screenshot's description is shown: 
    [n2805] ScrollView ;scroll ; ;;: 
        bounds: [0,0][1080,2220]
        [n46f6] ViewPager ;long-click ; ;;: 
            bounds: [103,66][1021,348]
            [nfe84] ViewGroup ;click ; ;;: 
                bounds: [103,66][1021,348]
                [ne18f] TextView ;click ; ;;Sun, Mar 3 Sun, Mar 3 : 
                    bounds: [103,138][1021,201]
        [n4921] TextView ;click long-click ; ;;Calendar Calendar : 
            bounds: [662,390][821,672]
        [ndfa8] TextView ;click long-click ; ;;Clock Clock : 
            bounds: [863,390][1021,672]
        [n9e1f] TextView ;click long-click ; ;;QQ QQ : 
            bounds: [863,714][1021,996]
        [n357d] TextView ;click long-click ; ;;WeChat WeChat : 
            bounds: [863,1038][1021,1320]
    [nd0aa] ;; ;;Home : 
        bounds: [0,66][1080,2154]
    [n0a77] TextView ;click long-click ; ;;Phone Phone : 
        bounds: [60,1693][217,1870]
    [n2d85] TextView ;click long-click ; ;;Messages Messages : 
        bounds: [261,1693][418,1870]
    [n8bf7] TextView ;click long-click ; ;;Gmail Predicted app: Gmail : 
        bounds: [462,1693][619,1870]
    [nf20e] TextView ;click long-click ; ;;Chrome Chrome : 
        bounds: [663,1693][820,1870]
    [n8355] TextView ;click long-click ; ;;Camera Camera : 
        bounds: [864,1693][1020,1870]
    [n8f10] search_container_hotseat ;click long-click ; ;;Search : 
        bounds: [59,1932][1020,2105]
        [n3993] ImageView ;click ; ;;Google app : 
            bounds: [70,1952][202,2084]
        [nc837] ImageView ;click ; ;;Voice search : 
            bounds: [745,1932][877,2105]
        [na999] ImageButton ;click ; ;;Google Lens : 
            bounds: [877,1932][1009,2105]

<|assistant|>
* Analysis: The user wants to set a recurring alarm for 9:00 a.m. on weekdays.
* Plan:
Open the Clock app.#[863,390][1021,672]#
* Operation:

```
tap(863,390,1021,672) #Open the Clock app.
```

REMEMBER: 
- Only **ONE-LINE-OF-CODE** at a time, except for while statement.
- Don't generate an operation element that you do not see in the screenshot.
- You are acting in a real world, try your best not to reject user's demand. Solve all the problem you encounter.
- On a dropdown element (Calendar, Nationality, Language, etc.), first try directly typing in the option you want.
- To accomplish the task, try switching to as many different pages as you can, and don't stay on the same page too often, based on historical conversation information.
- To complete the task, explore the app fully, i.e., tap more on different elements of the app
'''

SYSTEM_PROMPT_ANDROID_TEXT_EXPLORATION_V3 = '''# Setup
You are a professional android operation agent assistant that can fulfill user's high-level instructions. Given the XML information of the android screenshot at each step, you plan operations in python-style pseudo code using provided functions, or customize functions (if necessary) and then provide their implementations. 

# More details about the code
Your code should be readable, simple, and only **ONE-LINE-OF-CODE** at a time. You are not allowed to use `while` statement and `if-else` control. Predefined functions are as follow:

```

def tap(x1, y1, x2, y2):
    """
    This function is used to tap a UI element shown on the smartphone screen by simulating a tap action within the specified rectangular area defined by the coordinates (x1, y1) and (x2, y2).

    Args:
        :param x1: The x-coordinate of the top-left corner of the rectangle.
        :param y1: The y-coordinate of the top-left corner of the rectangle.
        :param x2: The x-coordinate of the bottom-right corner of the rectangle.
        :param y2: The y-coordinate of the bottom-right corner of the rectangle.

    Returns:
        None. The element within the specified area will be tapped.

    A simple use case is tap(462,1693,619,1870), which taps the center of the UI element, calculated to be at [540.5,1781.5].
    """

def text(text_input):
    """
    This function is used to insert text input in an input field/box. text_input is the string you want to insert and must 
    be wrapped with double quotation marks. A simple use case can be text("Hello, world!"), which inserts the string 
    "Hello, world!" into the input area on the smartphone screen. This function is only callable when you see a keyboard 
    showing in the lower half of the screen.
    Args:
        :parm text_input: use keyboard to input text
    Returns:
        None.
    """

def long_press(x1, y1, x2, y2):
    """
    This function is used to long press a UI element shown on the smartphone screen. The element is identified by the rectangular area defined by the coordinates (x1, y1) and (x2, y2). The function calculates the center of this area and performs a long press action at that point.

    A simple use case can be long_press(462,1693,619,1870), which long presses the UI element labeled on [540.5,1781.5].

    Args:
        x1 (int): The x-coordinate of the top-left corner of the rectangle.
        y1 (int): The y-coordinate of the top-left corner of the rectangle.
        x2 (int): The x-coordinate of the bottom-right corner of the rectangle.
        y2 (int): The y-coordinate of the bottom-right corner of the rectangle.

    Returns:
        None. The element within the specified area will be long pressed.
    """

def swipe(x1, y1, x2, y2, direction, dist):
    """
    This function simulates a swipe gesture on a smartphone screen, which can be applied to UI elements like scroll views or slide bars. The swipe starts from the center of a rectangular area defined by (x1, y1) and (x2, y2), then moves in a specified direction for a certain distance.

    Args:
        x1 (int): The x-coordinate of the top-left corner of the rectangle.
        y1 (int): The y-coordinate of the top-left corner of the rectangle.
        x2 (int): The x-coordinate of the bottom-right corner of the rectangle.
        y2 (int): The y-coordinate of the bottom-right corner of the rectangle.
        direction (str): The direction of the swipe ('up', 'down', 'left', 'right').
        dist (int): The distance of the swipe in pixels.

    Returns:
        None. Performs a swipe action on the specified element.
    """

def back():
    """
    Simulates a back button press. This method navigates the user back to the previous screen or state in the application or operating system.

    Returns:
        None
    """

def home():
    """
    Simulates pressing the home button. This method takes the user to the home screen of the device, minimizing the current application or context. It's akin to exiting the current state and returning to the main dashboard or operating system's primary interface.

    Returns:
        None
    """

def wait():
    """
    Sleep for 5 seconds to wait for the page to load.
    
    Returns:
        None
    """


def finished(message=None):
    """
    Terminates the program. Optionally prints a provided message to the standard output before exiting.

    Args:
        message (str, optional): A message to print before exiting. Defaults to None.

    Returns:
        None
    """

```

# A toy example
<|user|>
# Task Instruction:
Set an alarm for 9:00 a.m. on Monday

** XML **

<|assistant|>
## Round 0
* Analysis: The user wants to set a recurring alarm for 9:00 a.m. on weekdays. First I should open the Clock app, which should contain the alarm clock setting.yaml. But I can't find it in current screen, I should swipe up to find the Clock app.
* Operation:

```
swipe(680,2016,760,2276,'up',2000)
```

<|user|>
** XML **

<|assistant|>
## Round 1
* Analysis: Now I can open the Clock app. #[863,390][1021,672]#
* Operation:

```
tap(863,390,1021,672)
```

<|user|>
** XML **

<|assistant|>
## Round 2
* Analysis: After opening the Clock app, I need to find where to add an alarm. Therefore, I should tap the Alarm tab #[66,115][228,192]#
* Operation:

```
tap(66,115,228,192)
```

<|user|>
** XML **

<|assistant|>
## Round 3
* Analysis: In the alarm page, I should tap the "Add Alarm" button to add a new alarm. #[408,1626][672,1890]#
* Operation:

```
tap(408,1626,672,1890)
```

<|user|>
** XML **
        
<|assistant|>
## Round 4
* Analysis: I can set the alarm now. Firstly, I should set the alarm to 9 o'clock. #[200,1170][332,1302]#
* Operation:
```
tap(200,1170,332,1302)
```

<|user|>
** XML **
            
<|assistant|>
## Round 5
* Analysis: Then I need to change the clock period toggle to "AM". #[782,543][925,807]#
* Operation:
```
tap(782,543,925,807)
```

<|user|>
** XML **

<|assistant|>
## Round 6
* Analysis: The alarm is now set, tap "OK" to confirm. #[793,1660][969,1792]#
* Operation:
```
tap(793,1660,969,1792)
```

<|user|>
** XML **

<|assistant|>
## Round 7
* Analysis: Now, this alarm will only go off tomorrow. I need to change it to go off once every Monday. #[209,694][341,826]#
* Operation:
```
tap(209,694,341,826)
```

<|user|>
** XML **

<|assistant|>
## Round 8
* Analysis: The alarm has been set to go off once every Monday, which means the task is finished.
* Operation:
```
finished(message="The alarm has been set to go off at 9:00 a.m. once every Monday")
```

REMEMBER: 
- Only **ONE-LINE-OF-CODE** at a time, except for while statement.
- Don't generate an operation element that you do not see in the screenshot.
- You are acting in a real world, try your best not to reject user's demand. Solve all the problem you encounter.
- On a dropdown element (Calendar, Nationality, Language, etc.), first try directly typing in the option you want.
- To accomplish the task, try switching to as many different pages as you can, and don't stay on the same page too often, based on historical conversation information.
- To complete the task, explore the app fully, i.e., tap more on different elements of the app
- Please do not translate proper nouns into English.
'''

SYSTEM_PROMPT_ANDROID_TEXT_GPT = '''# Setup
You are a professional android operation agent assistant that can fulfill user's high-level instructions. Given the XML information of the android screenshot at each step, you plan operations in python-style pseudo code using provided functions, or customize functions (if necessary) and then provide their implementations. 

# More details about the code
Your code should be readable, simple, and only **ONE-LINE-OF-CODE** at a time. You are not allowed to use `while` statement and `if-else` control. Predefined functions are as follow:

```

def do(action, element=None, **kwargs):
    """
    Perform a single operation on an Android mobile device.

    Args:
        action (str): Specifies the action to be performed. Valid options are:
                      "Tap", "Type", "Swipe", "Long Press", "Home", "Back", "Enter", "Wait".
        element (list, optional): Defines the screen area or starting point for the action.
                                  - For "Tap" and "Long Press", provide coordinates [x1, y1, x2, y2]
                                    to define a rectangle from top-left (x1, y1) to bottom-right (x2, y2).
                                  - For "Swipe", provide coordinates either as [x1, y1, x2, y2] for a defined path
                                    or [x, y] for a starting point. If omitted, defaults to the screen center.

    Keyword Args:
        text (str, optional): The text to type. Required for the "Type" action.
        direction (str, optional): The direction to swipe. Valid directions are "up", "down", "left", "right".
                                   Required if action is "Swipe".
        dist (str, optional): The distance of the swipe, with options "long", "medium", "short".
                              Defaults to "medium". Required if action is "Swipe" and direction is specified.
        
    Returns:
        None. The device state or the foreground application state will be updated after executing the action.
    """


def finish(message=None):
    """
    Terminates the program. Optionally prints a provided message to the standard output before exiting.

    Args:
        message (str, optional): A message to print before exiting. Defaults to None.

    Returns:
        None
    """

```

# A toy example
<|user|>
# Task Instruction:
Set an alarm for 9:00 a.m. on Monday

** XML **

<|assistant|>
## Round 0
* Analysis: The user wants to set a recurring alarm for 9:00 a.m. on weekdays. First I should open the Clock app, which should contain the alarm clock setting.yaml. But I can't find it in current screen, I should swipe up to find the Clock app.
* Operation:

```
do(action="Swipe", element=[680, 2016, 760, 2276], direction="up", dist="long")
```

<|user|>
** XML **

<|assistant|>
## Round 1
* Analysis: Now I can open the Clock app. #[863,390][1021,672]#
* Operation:

```
do(action="Tap", element=[863, 390, 1021, 672])
```

<|user|>
** XML **

<|assistant|>
## Round 2
* Analysis: After opening the Clock app, I need to find where to add an alarm. Therefore, I should tap the Alarm tab #[66,115][228,192]#
* Operation:

```
do(action="Tap", element=[66, 115, 228, 192])
```

<|user|>
** XML **

<|assistant|>
## Round 3
* Analysis: In the alarm page, I should tap the "Add Alarm" button to add a new alarm. #[408,1626][672,1890]#
* Operation:

```
do(action="Tap", element=[408, 1626, 672, 1890])
```

<|user|>
** XML **

<|assistant|>
## Round 4
* Analysis: I can set the alarm now. Firstly, I should set the alarm to 9 o'clock. #[200,1170][332,1302]#
* Operation:
```
do(action="Tap", element=[200, 1170, 332, 1302])
```

<|user|>
** XML **

<|assistant|>
## Round 5
* Analysis: Then I need to change the clock period toggle to "AM". #[782,543][925,807]#
* Operation:
```
do(action="Tap", element=[782, 543, 925, 807])
```

<|user|>
** XML **

<|assistant|>
## Round 6
* Analysis: The alarm is now set, tap "OK" to confirm. #[793,1660][969,1792]#
* Operation:
```
do(action="Tap", element=[793, 1660, 969, 1792])
```

<|user|>
** XML **

<|assistant|>
## Round 7
* Analysis: Now, this alarm will only go off tomorrow. I need to change it to go off once every Monday. #[209,694][341,826]#
* Operation:
```
do(action="Tap", element=[209, 694, 341, 826])
```

<|user|>
** XML **

<|assistant|>
## Round 8
* Analysis: The alarm has been set to go off once every Monday, which means the task is finished.
* Operation:
```
finish(message="The alarm has been set to go off at 9:00 a.m. once every Monday")
```

REMEMBER: 
- Only **ONE-LINE-OF-CODE** at a time.
- Don't generate an operation element that you do not see in the screenshot.
- You are acting in a real world, try your best not to reject user's demand. Solve all the problem you encounter.
- On a dropdown element (Calendar, Nationality, Language, etc.), first try directly typing in the option you want.
- To accomplish the task, try switching to as many different pages as you can, and don't stay on the same page too often, based on historical conversation information.
- To complete the task, explore the app fully, i.e., tap more on different elements of the app
- Please do not translate proper nouns into English.
'''

SYSTEM_PROMPT_ANDROID_TEXT_GLM_v1_5 = '''You are an Android operation agent assistant that plans operations in Python-style pseudo code using provided functions based on XML information of Android screenshots. Write **ONE-LINE-OF-CODE** at a time, using predefined functions. Avoid `while` and `if-else` statements. Predefined functions are:

```python
def do(action, element=None, **kwargs):
    """
    Perform a single operation on an Android mobile device.

    Args:
        action (str): Specifies the action to be performed. Valid options are:
                      "Tap", "Type", "Swipe", "Long Press", "Home", "Back", "Enter", "Wait", "Launch", "Call_API".
        element (list, optional): Defines the screen area or starting point for the action.
                                  - For "Tap" and "Long Press", provide coordinates [x1, y1, x2, y2]
                                    to define a rectangle from top-left (x1, y1) to bottom-right (x2, y2).
                                  - For "Swipe", provide coordinates either as [x1, y1, x2, y2] for a defined path
                                    or [x, y] for a starting point. If omitted, defaults to the screen center.

    Keyword Args:
        text (str, optional): The text to type. Required for the "Type" action.
        direction (str, optional): The direction to swipe. Valid directions are "up", "down", "left", "right".
                                   Required if action is "Swipe".
        dist (str, optional): The distance of the swipe, with options "long", "medium", "short".
                              Defaults to "medium". Required if action is "Swipe" and direction is specified.
        app (str, optional): The name of the app to launch. Required only if action is "Launch".
        instruction (str, optional): Additional instructions for the action. Required only if action is "Call_API".
        with_screen_info (bool, optional): Whether to include screen information when call api. Defaults to True. Required only if action is "Call_API".

    Returns:
        None. The device state or the foreground application state will be updated after executing the action.
    """

def finish(message=None):
    """
    Terminates the program. Optionally prints a provided message to the standard output before exiting.

    Args:
        message (str, optional): A message to print before exiting. Defaults to None.

    Returns:
        None
    """
'''

SYSTEM_PROMPT_ANDROID_TEXT_ReAct = '''# Setup
You are a professional android operation agent assistant that can fulfill user's high-level instructions. Given the XML information of the android screenshot at each step, you plan operations in python-style pseudo code using provided functions, or customize functions (if necessary) and then provide their implementations. 

# More details about the code
Your code should be readable, simple, and only **ONE-LINE-OF-CODE** at a time. You are not allowed to use `while` statement and `if-else` control. Predefined functions are as follow:

```

def do(action, element=None, **kwargs):
    """
    Perform a single operation on an Android mobile device.

    Args:
        action (str): Specifies the action to be performed. Valid options are:
                      "Tap", "Type", "Swipe", "Long Press", "Home", "Back", "Enter", "Wait".
        element (list, optional): Defines the screen area or starting point for the action.
                                  - For "Tap" and "Long Press", provide coordinates [x1, y1, x2, y2]
                                    to define a rectangle from top-left (x1, y1) to bottom-right (x2, y2).
                                  - For "Swipe", provide coordinates either as [x1, y1, x2, y2] for a defined path
                                    or [x, y] for a starting point. If omitted, defaults to the screen center.

    Keyword Args:
        text (str, optional): The text to type. Required for the "Type" action.
        direction (str, optional): The direction to swipe. Valid directions are "up", "down", "left", "right".
                                   Required if action is "Swipe".
        dist (str, optional): The distance of the swipe, with options "long", "medium", "short".
                              Defaults to "medium". Required if action is "Swipe" and direction is specified.

    Returns:
        None. The device state or the foreground application state will be updated after executing the action.
    """


def finish(message=None):
    """
    Terminates the program. Optionally prints a provided message to the standard output before exiting.

    Args:
        message (str, optional): A message to print before exiting. Defaults to None.

    Returns:
        None
    """

```

Now, given the following XML information, you need to think and call the function needed to proceed with the task. 
Your output should include Obs, Thought and Act in the given format:

Obs
Retrieve the result of executing the instruction from the external environment. This is equivalent to obtaining the result of the current step’s behavior, preparing for the next step. 
Note: In order to reduce the number of function calls, the Obs step executes at the beginning of the next turn. 
So if current step is not the first step, you should observe the result of the previous step in the current step.

Thought
Reasoning and textual display of the process. What do I want to do, and what are the prerequisites to achieve this.

Action
Generate the instruction to interact with the android environment.

Here is an one-shot example:

Obs: The user wants to set an alarm for 9:00 a.m. on weekdays. The XML shows the clock app is open.
Thought: After opening the Clock app, I need to find where to add an alarm. Therefore, I should tap the Alarm tab #[66,115][228,192]#
Action: 
```
do(action="Tap", element=[66,115,228,192])
```

REMEMBER: 
- Only Obs, Thought and **ONE-LINE-OF-CODE** at a time.
- Don't generate an operation element that you do not see in the screenshot.
- You are acting in a real world, try your best not to reject user's demand. Solve all the problem you encounter.
- On a dropdown element (Calendar, Nationality, Language, etc.), first try directly typing in the option you want.
- To accomplish the task, try switching to as many different pages as you can, and don't stay on the same page too often, based on historical conversation information.
- To complete the task, explore the app fully, i.e., tap more on different elements of the app
- Please do not translate proper nouns into English.
'''


### Prepare Docker on linux(x86_64)

1. Install Docker on your machine. Make sure your machine already supports KVM. You can use the following code to check
   if your machine supports kvm:

```bash
apt-get install cpu-checker
kvm-ok
```

Meanwhile, ensure that your terminal has permission to start Docker. You can set it through the following code:

```bash
sudo usermod -aG docker $USER
newgrp docker
```

2. Download related docker files on link: https://zhipu-ai.feishu.cn/file/Wfd0b1w8FodJrWxaA9IcF9VnnAe?from=from_copylink

3. To create docker, run:

```bash
mkdir docker_file
cd docker_file
unzip /path/to/your/docker-file.zip
cd docker-file
docker build -t android_eval:latest .
```

Note that we use
```bash
RUN sed -i 's/deb.debian.org/mirrors.ustc.edu.cn/g' /etc/apt/sources.list
RUN pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
```

to speed up download speed, you can replace it to your source if needed or just delete it.


4. Create a yaml file in the project directory with the following content:

```yaml
agent:
    name: OpenAIAgent
    args:
        api_key: sk-
        api_base: ""
        model_name: "gpt-4-1106-preview"
        max_new_tokens: 512

task:
    class: TextOnlyMobileTask_AutoTest
    args:
        save_dir: "./logs/evaluation"
        max_rounds: 25
        request_interval: 3

eval:
  avd_name: Pixel_7_Pro_API_33
  avd_log_dir: ./logs/evaluation
  docker: True
  docker_args:
    image_name: android_eval:latest
    port: 6060
```

### Parameter Descriptions

#### `agent`
- **name**: The name of the agent being used, must be declared in `agent/__init__.py`.
  - **Type**: String
  - **Example**: `"OpenAIAgent"`
  
- **args**: Arguments to configure the agent.
  - **api_key**: The API key for authenticating the agent.
    - **Type**: String
    
  - **api_base**: The base URL for the API endpoint.
    - **Type**: String
    
  - **model_name**: The name of the model to be used.
    - **Type**: String
    - **Example**: `"gpt-4o-mini-2024-07-18"`
    
  - **max_new_tokens**: The maximum number of new tokens the model can generate in one request.
    - **Type**: Integer
    - **Example**: `512`

#### `task`
- **class**: The class defining the type of task, must be declared in `evaluation/auto_test.py`. For basic evaluation, we use `"TextOnlyMobileTask_AutoTest"` for XML mode and `"ScreenshotMobileTask_AutoTest"`for SoM mode. 
  - **Type**: String
  - **Example**: `"TextOnlyMobileTask_AutoTest"`
  
- **args**: Arguments to configure the task.
  - **save_dir**: The directory where the evaluation logs will be saved.
    - **Type**: String
    - **Example**: `"./logs/evaluation"`
    
  - **max_rounds**: The maximum number of rounds for the task. default to be 25.
    - **Type**: Integer
    - **Example**: `25`
    
  - **request_interval**: The interval between requests, in seconds. default to be 3.
    - **Type**: Integer
    - **Example**: `3`
    
  - **mode**: The mode of operation. default to be `"in_app"`.
    - **Type**: String
    - **Example**: `"in_app"`

#### `eval`
- **avd_name**: The name of the AVD being used.
  - **Type**: String
  - **Example**: `"Pixel_7_Pro_API_33"`
  
- **avd_log_dir**: The directory where the AVD logs will be saved.
  - **Type**: String
  - **Example**: `"./logs/evaluation"`
  
- **docker**: Flag to indicate whether Docker is used for the evaluation. Need to set True.
  - **Type**: Boolean
  - **Example**: `true`
  
- **docker_args**: Arguments for configuring Docker.
  - **image_name**: The name of the Docker image to be used.
    - **Type**: String
    - **Example**: `"android-env:latest"`
    
  - **port**: The start port to be used for the Docker container.
    - **Type**: Integer
    - **Example**: `6060`


### Prepare AVD on mac(arm64)

1. Install Android Studio and ADB on your machine, and start a virtual machine to ensure that the adb command is properly installed. 
2. Download the avd.zip and ini files. Extract the avd.zip file and place it along with the ini file
   in `/Users/your user name/.android/avd`. Modify the ini file as follows:

```ini
avd.ini.encoding=UTF-8
path=/Users/your user name/.android/avd/Pixel_7_Pro_API_33.avd
path.rel=avd/Pixel_7_Pro_API_33.avd
target=android-33
```

If necessary, modify parts of the paths in the config.ini and hardware-qemu.ini files under `Pixel_7_Pro_API_33.avd` to
match your corresponding paths. The method for using the image has not been fully determined yet; a script will be
written once it stabilizes.

File download link: https://drive.google.com/file/d/19FnCaEh6VzR99Za-pvUoR-60iNe8mgom/view?usp=drive_link

Run the following code, then check in Android Studio -> Virtual Devices Manager to see if there is
a `Pixel_7_Pro_API_33` image and make sure it can start normally. However, please do not make any changes to the image.
Note to modify the avd and sdk paths to the correct paths.

```python
python tools/modify_mobile_to_avd.py 
    --avd_dir /Users/UserName/.android/avd 
    --sdk_dir /Users/UserName/Library/Android/sdk 
    --device_name Pixel_7_Pro_API_33
```

3. Configure the emulator

Run the following commands:

```bash
echo 'export ANDROID_SDK_HOME=/path/to/your/android/sdk' >> ~/.zshrc && source ~/.zshrc
echo 'export PATH=$PATH:/path/to/your/android/sdk/emulator' >> ~/.zshrc && source ~/.zshrc
```

If you are using bash instead of zsh, replace `~/.zshrc` with `~/.bash_profile`.

4. Create a yaml file in the project directory with the following content:

```yaml
agent:
    name: OpenAIAgent
    args:
        api_key: sk-
        api_base: ""
        model_name: "gpt-4-1106-preview"
        max_new_tokens: 512

task:
    class: TextOnlyMobileTask_AutoTest
    args:
        save_dir: "./logs/evaluation"
        max_rounds: 25
        request_interval: 3

eval:
    avd_base: /Users/your user name/.android/avd
    avd_name: Pixel_7_Pro_API_33_v2
    avd_log_dir: ./logs/avd
    android_sdk_path: /Users/your user name/Library/Android/sdk
```

Here, `/Users/your user name/.android/avd` is the default location where Android Studio stores images, `avd_name` is the
standard test image name, `avd_log_dir` is the directory for storing output results, and `android_sdk_path` is the
location of the Android SDK.

#### `agent`
- **name**: The name of the agent being used, must be declared in `agent/__init__.py`.
  - **Type**: String
  - **Example**: `"OpenAIAgent"`
  
- **args**: Arguments to configure the agent.
  - **api_key**: The API key for authenticating the agent.
    - **Type**: String
    
  - **api_base**: The base URL for the API endpoint.
    - **Type**: String
    
  - **model_name**: The name of the model to be used.
    - **Type**: String
    - **Example**: `"gpt-4o-mini-2024-07-18"`
    
  - **max_new_tokens**: The maximum number of new tokens the model can generate in one request.
    - **Type**: Integer
    - **Example**: `512`

#### `task`
- **class**: The class defining the type of task, must be declared in `evaluation/auto_test.py`. For basic evaluation, we use `"TextOnlyMobileTask_AutoTest"` for XML mode and `"ScreenshotMobileTask_AutoTest"`for SoM mode. 
  - **Type**: String
  - **Example**: `"TextOnlyMobileTask_AutoTest"`
  
- **args**: Arguments to configure the task.
  - **save_dir**: The directory where the evaluation logs will be saved.
    - **Type**: String
    - **Example**: `"./logs/evaluation"`
    
  - **max_rounds**: The maximum number of rounds for the task. default to be 25.
    - **Type**: Integer
    - **Example**: `25`
    
  - **request_interval**: The interval between requests, in seconds. default to be 3.
    - **Type**: Integer
    - **Example**: `3`
    
  - **mode**: The mode of operation. default to be `"in_app"`.
    - **Type**: String
    - **Example**: `"in_app"`

#### `eval`
- **avd_base**: The base directory for Android Virtual Device (AVD) configurations.
  - **Type**: String
  - **Example**: `"/Users/your user name/.android/avd"`
  
- **avd_name**: The name of the AVD being used.
  - **Type**: String
  - **Example**: `"Pixel_7_Pro_API_33"`
  
- **avd_log_dir**: The directory where the AVD logs will be saved.
  - **Type**: String
  - **Example**: `"./logs/evaluation"`
  
- **android_sdk_path**: The file path to the Android SDK.
  - **Type**: String
  - **Example**: `"/Users/your user name/Library/Android/sdk"`
  
- **show_avd**: Flag to determine whether the AVD should be displayed or hided. default to be False.
  - **Type**: Boolean
  - **Example**: `false`

import inspect
import json
import re
import time
from functools import partial

from templates.packages import find_package
from .utils import call_dino, plot_bbox


def remove_leading_zeros_in_string(s):
    # 使用正则表达式匹配列表中的每个数值并去除前导零
    return re.sub(r'\b0+(\d)', r'\1', s)


class TextOnlyExecutor:
    def __init__(self, controller, config):
        self.config = config
        self.controller = controller
        self.device = controller.device
        self.screenshot_dir = config.screenshot_dir
        self.task_id = int(time.time())

        self.new_page_captured = False
        self.current_screenshot = None
        self.current_return = None

        self.last_turn_element = None
        self.last_turn_element_tagname = None
        self.is_finish = False
        self.device_pixel_ratio = None
        self.latest_xml = None
        # self.glm4_key = config.glm4_key

        # self.device_pixel_ratio = self.page.evaluate("window.devicePixelRatio")

    def __get_current_status__(self):
        page_position = None
        scroll_height = None
        status = {
            "Current URL": self.controller.get_current_activity(),
        }
        return json.dumps(status, ensure_ascii=False)

    def modify_relative_bbox(self, relative_bbox):
        viewport_width, viewport_height = self.controller.viewport_size
        modify_x1 = relative_bbox[0] * viewport_width / 1000
        modify_y1 = relative_bbox[1] * viewport_height / 1000
        modify_x2 = relative_bbox[2] * viewport_width / 1000
        modify_y2 = relative_bbox[3] * viewport_height / 1000
        return [modify_x1, modify_y1, modify_x2, modify_y2]

    def __call__(self, code_snippet):
        '''
        self.new_page_captured = False
        self.controller.on("page", self.__capture_new_page__)
        self.current_return = None'''

        local_context = self.__get_class_methods__()
        local_context.update(**{'self': self})
        print(code_snippet.strip())
        if len(code_snippet.split("\n")) > 1:
            for code in code_snippet.split("\n"):
                if "Action: " in code:
                    code_snippet = code
                    break

        code = remove_leading_zeros_in_string(code_snippet.strip())
        exec(code, {}, local_context)
        return self.current_return

    def __get_class_methods__(self, include_dunder=False, exclude_inherited=True):
        """
        Returns a dictionary of {method_name: method_object} for all methods in the given class.

        Parameters:
        - cls: The class object to inspect.
        - include_dunder (bool): Whether to include dunder (double underscore) methods.
        - exclude_inherited (bool): Whether to exclude methods inherited from parent classes.
        """
        methods_dict = {}
        cls = self.__class__
        for name, method in inspect.getmembers(cls, predicate=inspect.isfunction):
            if exclude_inherited and method.__qualname__.split('.')[0] != cls.__name__:
                continue
            if not include_dunder and name.startswith('__'):
                continue
            methods_dict[name] = partial(method, self)
        return methods_dict

    def update_screenshot(self, prefix=None, suffix=None):
        # time.sleep(2)
        if prefix is None and suffix is None:
            self.current_screenshot = f"{self.screenshot_dir}/screenshot-{time.time()}.png"
        elif prefix is not None and suffix is None:
            self.current_screenshot = f"{self.screenshot_dir}/screenshot-{prefix}-{time.time()}.png"
        elif prefix is None and suffix is not None:
            self.current_screenshot = f"{self.screenshot_dir}/screenshot-{time.time()}-{suffix}.png"
        else:
            self.current_screenshot = f"{self.screenshot_dir}/screenshot-{prefix}-{time.time()}-{suffix}.png"
        self.controller.save_screenshot(self.current_screenshot)

    def do(self, action=None, element=None, **kwargs):
        assert action in ["Tap", "Type", "Swipe", "Enter", "Home", "Back", "Long Press", "Wait", "Launch",
                          "Call_API"], "Unsupported Action"
        if self.config.is_relative_bbox:
            if element is not None:
                element = self.modify_relative_bbox(element)
        if action == "Tap":
            self.tap(element)
        elif action == "Type":
            self.type(**kwargs)
        elif action == "Swipe":
            self.swipe(element, **kwargs)
        elif action == "Enter":
            self.press_enter()
        elif action == "Home":
            self.press_home()
        elif action == "Back":
            self.press_back()
        elif action == "Long Press":
            self.long_press(element)
        elif action == "Wait":
            self.wait()
        elif action == "Launch":
            self.launch(**kwargs)
        elif action == "Call_API":
            self.call_api(**kwargs)
        else:
            raise NotImplementedError()
        # self.__update_screenshot__() # update screenshot 全部移到recoder内

    def get_relative_bbox_center(self, instruction, screenshot):
        # 获取相对 bbox
        relative_bbox = call_dino(instruction, screenshot)

        viewport_width, viewport_height = self.controller.get_device_size()

        center_x = (relative_bbox[0] + relative_bbox[2]) / 2 * viewport_width / 1000
        center_y = (relative_bbox[1] + relative_bbox[3]) / 2 * viewport_height / 1000
        width_x = (relative_bbox[2] - relative_bbox[0]) * viewport_width / 1000
        height_y = (relative_bbox[3] - relative_bbox[1]) * viewport_height / 1000

        # 点击计算出的中心点坐标
        # print(center_x, center_y)
        plot_bbox([int(center_x - width_x / 2), int(center_y - height_y / 2), int(width_x), int(height_y)], screenshot,
                  instruction)

        return (int(center_x), int(center_y)), relative_bbox

    def tap(self, element):
        if isinstance(element, list) and len(element) == 4:
            center_x = (element[0] + element[2]) / 2
            center_y = (element[1] + element[3]) / 2
        elif isinstance(element, list) and len(element) == 2:
            center_x, center_y = element
        else:
            raise ValueError("Invalid element format")
        self.controller.tap(center_x, center_y)
        self.current_return = {"operation": "do", "action": 'Tap', "kwargs": {"element": element}}

    def long_press(self, element):
        if isinstance(element, list) and len(element) == 4:
            center_x = (element[0] + element[2]) / 2
            center_y = (element[1] + element[3]) / 2
        elif isinstance(element, list) and len(element) == 2:
            center_x, center_y = element
        else:
            raise ValueError("Invalid element format")
        self.controller.long_press(center_x, center_y)
        self.current_return = {"operation": "do", "action": 'Long Press', "kwargs": {"element": element}}

    def swipe(self, element=None, **kwargs):
        if element is None:
            center_x, center_y = self.controller.width // 2, self.controller.height // 2
        elif element is not None:
            if isinstance(element, list) and len(element) == 4:
                center_x = (element[0] + element[2]) / 2
                center_y = (element[1] + element[3]) / 2
            elif isinstance(element, list) and len(element) == 2:
                center_x, center_y = element
            else:
                raise ValueError("Invalid element format")
        assert "direction" in kwargs, "direction is required for swipe"
        direction = kwargs.get("direction")
        dist = kwargs.get("dist", "medium")
        self.controller.swipe(center_x, center_y, direction, dist)
        self.current_return = {"operation": "do", "action": 'Swipe',
                               "kwargs": {"element": element, "direction": direction, "dist": dist}}
        time.sleep(1)

    def type(self, **kwargs):
        assert "text" in kwargs, "text is required for type"
        instruction = kwargs.get("text")
        self.controller.text(instruction)
        self.controller.enter()
        self.current_return = {"operation": "do", "action": 'Type',
                               "kwargs": {"text": instruction}}

    def press_enter(self):
        self.controller.enter()
        self.current_return = {"operation": "do", "action": 'Press Enter'}

    def press_back(self):
        self.controller.back()
        self.current_return = {"operation": "do", "action": 'Press Back'}

    def press_home(self):
        self.controller.home()
        self.current_return = {"operation": "do", "action": 'Press Home'}

    def finish(self, message=None):
        self.is_finish = True
        self.current_return = {"operation": "finish", "action": 'finish', "kwargs": {"message": message}}

    def wait(self):
        time.sleep(5)
        self.current_return = {"operation": "do", "action": 'Wait'}

    def launch(self, **kwargs):
        assert "app" in kwargs, "app is required for launch"
        app = kwargs.get("app")
        try:
            package = find_package(app)
        except:
            import traceback
            traceback.print_exc()
        self.controller.launch_app(package)
        self.current_return = {"operation": "do", "action": 'Launch',
                               "kwargs": {"package": package}}

    '''
    def call_api(self, **kwargs):
        assert "instruction" in kwargs, "instruction is required for call_api"
        glm4_template = "你需要根据以下化简版本的XML数据,对提问进行回答。你需要直接回答问题。\n\nXML数据：\n\n{xml_compression}\n\n提问:{question}\n\n提示：你的输出应当不超过100字"
        instruction = kwargs.get("instruction")
        if kwargs.get("with_screen_info"):
            with_screen_info = kwargs.get("with_screen_info")
        else:
            with_screen_info = False
        if with_screen_info:
            prompt = glm4_template.format(xml_compression=self.latest_xml, question=instruction)
            response = get_completion_glm4(prompt, self.glm4_key)
            self.current_return = {"operation": "do", "action": 'Call_API',
                                   "kwargs": {"instruction": instruction, "response": response, "full_query": prompt,
                                              "with_screen_info": True}}
        else:
            response = get_completion_glm4(instruction, self.glm4_key)
            self.current_return = {"operation": "do", "action": 'Call_API',
                                   "kwargs": {"instruction": instruction, "response": response,
                                              "with_screen_info": False}}'''


import time
import xml.etree.ElementTree as ET

from page_executor.text_executor import TextOnlyExecutor


class AndroidElement:
    def __init__(self, uid, bbox, attrib):
        self.uid = uid
        self.bbox = bbox
        self.attrib = attrib


def get_id_from_element(elem):
    bounds = elem.attrib["bounds"][1:-1].split("][")
    x1, y1 = map(int, bounds[0].split(","))
    x2, y2 = map(int, bounds[1].split(","))
    elem_w, elem_h = x2 - x1, y2 - y1
    if "resource-id" in elem.attrib and elem.attrib["resource-id"]:
        elem_id = elem.attrib["resource-id"].replace(":", ".").replace("/", "_")
    else:
        elem_id = f"{elem.attrib['class']}_{elem_w}_{elem_h}"
    if "content-desc" in elem.attrib and elem.attrib["content-desc"] and len(elem.attrib["content-desc"]) < 20:
        content_desc = elem.attrib['content-desc'].replace("/", "_").replace(" ", "").replace(":", "_")
        elem_id += f"_{content_desc}"
    return elem_id


def traverse_tree(xml_path, elem_list, attrib, add_index=False):
    path = []
    for event, elem in ET.iterparse(xml_path, ['start', 'end']):
        if event == 'start':
            path.append(elem)
            if attrib in elem.attrib:
                if elem.attrib[attrib] != "true":
                    if elem.attrib["text"].strip() == "" and elem.attrib["content-desc"].strip() == "":
                        continue
                parent_prefix = ""
                if len(path) > 1:
                    parent_prefix = get_id_from_element(path[-2])
                bounds = elem.attrib["bounds"][1:-1].split("][")
                x1, y1 = map(int, bounds[0].split(","))
                x2, y2 = map(int, bounds[1].split(","))
                center = (x1 + x2) // 2, (y1 + y2) // 2
                elem_id = get_id_from_element(elem)
                if parent_prefix:
                    elem_id = parent_prefix + "_" + elem_id
                if add_index:
                    elem_id += f"_{elem.attrib['index']}"
                close = False
                for e in elem_list:
                    bbox = e.bbox
                    center_ = (bbox[0][0] + bbox[1][0]) // 2, (bbox[0][1] + bbox[1][1]) // 2
                    dist = (abs(center[0] - center_[0]) ** 2 + abs(center[1] - center_[1]) ** 2) ** 0.5
                    if dist <= 5:
                        close = True
                        break
                if not close:
                    elem_list.append(AndroidElement(elem_id, ((x1, y1), (x2, y2)), attrib))

        if event == 'end':
            path.pop()


class VisionExecutor(TextOnlyExecutor):
    def __init__(self, controller, config):
        self.controller = controller
        self.device = controller.device
        self.screenshot_dir = config.screenshot_dir
        self.task_id = int(time.time())

        self.new_page_captured = False
        self.current_screenshot = None
        self.current_return = None

        self.last_turn_element = None
        self.last_turn_element_tagname = None
        self.is_finish = False
        self.device_pixel_ratio = None
        self.latest_xml = None
        # self.glm4_key = config.glm4_key

        # self.device_pixel_ratio = self.page.evaluate("window.devicePixelRatio")

    def set_elem_list(self, xml_path):
        clickable_list = []
        focusable_list = []
        traverse_tree(xml_path, clickable_list, "clickable", True)
        traverse_tree(xml_path, focusable_list, "focusable", True)
        elem_list = []
        for elem in clickable_list:
            elem_list.append(elem)
        for elem in focusable_list:
            bbox = elem.bbox
            center = (bbox[0][0] + bbox[1][0]) // 2, (bbox[0][1] + bbox[1][1]) // 2
            close = False
            for e in clickable_list:
                bbox = e.bbox
                center_ = (bbox[0][0] + bbox[1][0]) // 2, (bbox[0][1] + bbox[1][1]) // 2
                dist = (abs(center[0] - center_[0]) ** 2 + abs(center[1] - center_[1]) ** 2) ** 0.5
                if dist <= 10:  # configs["MIN_DIST"]
                    close = True
                    break
            if not close:
                elem_list.append(elem)
        self.elem_list = elem_list

    def tap(self, index):
        assert 0 < index <= len(self.elem_list), f"Tap Index {index} out of range"
        tl, br = self.elem_list[index - 1].bbox
        x, y = (tl[0] + br[0]) // 2, (tl[1] + br[1]) // 2
        ret = self.controller.tap(x, y)
        self.current_return = {"operation": "do", "action": 'Tap', "kwargs": {"element": (x, y)}}

    def text(self, input_str):
        self.controller.text(input_str)
        self.current_return = {"operation": "do", "action": 'Type', "kwargs": {"text": input_str}}

    def type(self, input_str):
        self.controller.text(input_str)
        self.current_return = {"operation": "do", "action": 'Type', "kwargs": {"text": input_str}}

    def long_press(self, index):
        tl, br = self.elem_list[index - 1].bbox
        x, y = (tl[0] + br[0]) // 2, (tl[1] + br[1]) // 2
        ret = self.controller.long_press(x, y)
        self.current_return = {"operation": "do", "action": 'Long Press', "kwargs": {"element": (x, y)}}

    def swipe(self, index, direction, dist):
        tl, br = self.elem_list[index - 1].bbox
        x, y = (tl[0] + br[0]) // 2, (tl[1] + br[1]) // 2
        ret = self.controller.swipe(x, y, direction, dist)
        self.current_return = {"operation": "do", "action": 'Swipe',
                               "kwargs": {"element": (x, y), "direction": direction, "dist": dist}}

    def back(self):
        self.controller.back()
        self.current_return = {"operation": "do", "action": 'Back', "kwargs": {}}

    def home(self):
        self.controller.home()
        self.current_return = {"operation": "do", "action": 'Home', "kwargs": {}}

    def wait(self, interval=5):
        if interval < 0 or interval > 10:
            interval = 5
        time.sleep(interval)
        self.current_return = {"operation": "do", "action": 'Wait', "kwargs": {"interval": interval}}

    def enter(self):
        self.controller.enter()
        self.current_return = {"operation": "do", "action": 'Enter', "kwargs": {}}

    def launch(self, app_name):
        self.controller.launch(app_name)
        self.current_return = {"operation": "do", "action": 'Launch', "kwargs": {"app_name": app_name}}

    def finish(self, message=None):
        self.is_finish = True
        self.current_return = {"operation": "finish", "action": 'finish', "kwargs": {"message": message}}


import textwrap

import cv2
import requests


def _add_text(instruction, image):
    screen_height, screen_width, _ = image.shape

    font = cv2.FONT_HERSHEY_SIMPLEX
    font_scale = 1.5  # adjust this as needed
    font_thickness = 2
    wrap_width = int(screen_width / cv2.getTextSize("a", font, font_scale, font_thickness)[0][0])

    x, y = 5, 50  # Text starting position
    line_spacing = 45  # adjust this as needed

    # Split text into multiple lines
    wrapped_text = textwrap.wrap(instruction, width=wrap_width)

    for i, line in enumerate(wrapped_text):
        y_new = y + i * int(cv2.getTextSize(line, font, font_scale, font_thickness)[0][1] + line_spacing)

        # Drawing Text Background
        textSize = cv2.getTextSize(line, font, font_scale, font_thickness)[0]
        text_box_y = y_new - textSize[1] - 5  # adjust 5 for better alignment
        cv2.rectangle(image, (x, text_box_y), (screen_width, text_box_y + textSize[1] + 10), (0, 0, 0), -1)

        # Drawing Text
        cv2.putText(image, line, (x, y_new), font, font_scale, (255, 255, 255), font_thickness, cv2.LINE_AA)

    return image


def plot_bbox(bbox, screenshot, instruction=None):
    image = cv2.imread(screenshot)
    cv2.rectangle(image, (bbox[0], bbox[1]), (bbox[2], bbox[3]), (0, 255, 0), 2)
    cv2.circle(image, (int(bbox[0] + bbox[2] / 2), int(bbox[1] + bbox[3] / 2)), radius=0, color=(0, 255, 0),
               thickness=2)
    if instruction is not None:
        image = _add_text(instruction, image)

    cv2.imwrite(screenshot.replace('.png', '-bbox.png'), image)


def call_dino(instruction, screenshot_path):
    files = {'image': open(screenshot_path, 'rb')}
    response = requests.post("http://172.19.128.24:24020/v1/executor", files=files,
                             data={"text_prompt": f"{instruction}"})
    return [int(s) for s in response.json()['response'].split(',')]


def get_relative_bbox_center(page, instruction, screenshot):
    # 获取相对 bbox
    relative_bbox = call_dino(instruction, screenshot)

    # 获取页面的视口大小
    viewport_size = page.viewport_size
    # print(viewport_size)
    viewport_width = viewport_size['width']
    viewport_height = viewport_size['height']

    center_x = (relative_bbox[0] + relative_bbox[2]) / 2 * viewport_width / 1000
    center_y = (relative_bbox[1] + relative_bbox[3]) / 2 * viewport_height / 1000
    width_x = (relative_bbox[2] - relative_bbox[0]) * viewport_width / 1000
    height_y = (relative_bbox[3] - relative_bbox[1]) * viewport_height / 1000

    # 点击计算出的中心点坐标
    # print(center_x, center_y)
    plot_bbox([int(center_x - width_x / 2), int(center_y - height_y / 2), int(width_x), int(height_y)], screenshot)

    return (int(center_x), int(center_y)), relative_bbox


from .text_executor import TextOnlyExecutor


import json
import os

import jsonlines

from utils_mobile.utils import draw_bbox_multi
from utils_mobile.xml_tool import UIXMLTree



def get_compressed_xml(xml_path, type="plain_text", version="v1"):
    xml_parser = UIXMLTree()
    with open(xml_path, 'r', encoding='utf-8') as f:
        xml_str = f.read()
    try:
        compressed_xml = xml_parser.process(xml_str, level=1, str_type=type)
        if isinstance(compressed_xml, tuple):
            compressed_xml = compressed_xml[0]

        if type == "plain_text":
            compressed_xml = compressed_xml.strip()
    except Exception as e:
        compressed_xml = None
        print(f"XML compressed failure: {e}")
    return compressed_xml


class JSONRecorder:
    def __init__(self, id, instruction, page_executor, config):
        self.id = id
        self.instruction = instruction
        self.page_executor = page_executor

        self.turn_number = 0
        trace_dir = os.path.join(config.task_dir, 'traces')
        xml_dir = os.path.join(config.task_dir, 'xml')
        log_dir = config.task_dir
        if not os.path.exists(trace_dir):
            os.makedirs(trace_dir)
        if not os.path.exists(xml_dir):
            os.makedirs(xml_dir)
        if not os.path.exists(log_dir):
            os.makedirs(log_dir)
        self.trace_file_path = os.path.join(trace_dir, 'trace.jsonl')
        self.xml_file_path = os.path.join(xml_dir)
        self.log_dir = log_dir
        self.contents = []
        self.xml_history = []
        self.history = []
        self.command_per_step = []
        if config.version is None or config.version == "v1":
            self.xml_compressed_version = "v1"
        elif config.version == "v2":
            self.xml_compressed_version = "v2"

    def update_response_deprecated(self, controller, response=None, prompt="** screenshot **", need_screenshot=False,
                                   ac_status=False):
        if need_screenshot:
            self.page_executor.update_screenshot(prefix=str(self.turn_number), suffix="before")
        xml_path = None
        ac_xml_path = None

        if not ac_status:
            xml_status = controller.get_xml(prefix=str(self.turn_number), save_dir=self.xml_file_path)
            if "ERROR" in xml_status:
                xml_path = "ERROR"
            else:
                xml_path = os.path.join(self.xml_file_path, str(self.turn_number) + '.xml')
        else:
            xml_status = controller.get_ac_xml(prefix=str(self.turn_number), save_dir=self.xml_file_path)
            if "ERROR" in xml_status:
                ac_xml_path = "ERROR"
            else:
                ac_xml_path = os.path.join(self.xml_file_path, 'ac_' + str(self.turn_number) + '.xml')
        step = {
            "trace_id": self.id,
            "index": self.turn_number,
            "prompt": prompt if self.turn_number > 0 else f"{self.instruction}",
            "image": self.page_executor.current_screenshot,
            "xml": xml_path,
            "ac_xml": ac_xml_path,
            "response": response,
            # "url": map_url_to_real(page.url),
            "window": controller.viewport_size,
            "target": self.instruction,
            "current_activity": controller.get_current_activity()
        }
        step = self.test_per_step(step, controller)
        self.contents.append(step)

        return xml_status

    def test_per_step(self, step, controller):
        if len(self.command_per_step) == 0 or self.command_per_step[0] is None:
            return step
        step["command"] = {}
        for command in self.command_per_step:
            if "adb" not in command:
                continue
            result = controller.run_command(command)
            step["command"][command] = result
        return step

    def update_before(self, controller, prompt="** XML **", need_screenshot=False, ac_status=False, need_labeled=False):
        if need_screenshot:
            self.page_executor.update_screenshot(prefix=str(self.turn_number), suffix="before")
        xml_path = None
        ac_xml_path = None

        if not ac_status:
            xml_status = controller.get_xml(prefix=str(self.turn_number), save_dir=self.xml_file_path)
            if "ERROR" in xml_status:
                xml_path = "ERROR"
            else:
                xml_path = os.path.join(self.xml_file_path, str(self.turn_number) + '.xml')
        else:
            xml_status = controller.get_ac_xml(prefix=str(self.turn_number), save_dir=self.xml_file_path)
            if "ERROR" in xml_status:
                ac_xml_path = "ERROR"
            else:
                ac_xml_path = os.path.join(self.xml_file_path, str(self.turn_number) + '.xml')

        step = {
            "trace_id": self.id,
            "index": self.turn_number,
            "prompt": prompt if self.turn_number > 0 else f"{self.instruction}",
            "image": self.page_executor.current_screenshot,
            "xml": xml_path,
            "ac_xml": ac_xml_path,
            "current_activity": controller.get_current_activity(),
            "window": controller.viewport_size,
            "target": self.instruction
        }
        step = self.test_per_step(step, controller)
        if need_labeled:
            try:
                if xml_path != "ERROR" and xml_path is not None:
                    self.page_executor.set_elem_list(xml_path)
                else:
                    self.page_executor.set_elem_list(ac_xml_path)
            except:
                print("xml_path:", xml_path)
                print("ac_xml_path:", ac_xml_path)
                import traceback
                print(traceback.print_exc())
            draw_bbox_multi(self.page_executor.current_screenshot,
                            self.page_executor.current_screenshot.replace(".png", "_labeled.png"),
                            self.page_executor.elem_list)
            self.labeled_current_screenshot_path = self.page_executor.current_screenshot.replace(".png", "_labeled.png")
            step["labeled_image"] = self.labeled_current_screenshot_path

        self.contents.append(step)

    def dectect_auto_stop(self):
        if len(self.contents) <= 5:
            return
        should_stop = True
        parsed_action = self.contents[-1]['parsed_action']
        for i in range(1, 6):
            if self.contents[-i]['parsed_action'] != parsed_action:
                should_stop = False
                break
        if should_stop:
            self.page_executor.is_finish = True

    def get_latest_xml(self):
        if len(self.contents) == 0:
            return None
        # print(self.contents[-1])
        if self.contents[-1]['xml'] == "ERROR" or self.contents[-1]['xml'] is None:
            xml_path = self.contents[-1]['ac_xml']
        else:
            xml_path = self.contents[-1]['xml']
        xml_compressed = get_compressed_xml(xml_path, version=self.xml_compressed_version)
        with open(os.path.join(self.xml_file_path, f"{self.turn_number}_compressed_xml.txt"), 'w',
                  encoding='utf-8') as f:
            f.write(xml_compressed)
        self.page_executor.latest_xml = xml_compressed
        return xml_compressed

    def get_latest_xml_tree(self):
        if len(self.contents) == 0:
            return None
        print(self.contents[-1])
        if self.contents[-1]['xml'] == "ERROR" or self.contents[-1]['xml'] is None:
            xml_path = self.contents[-1]['ac_xml']
        else:
            xml_path = self.contents[-1]['xml']
        xml_compressed = get_compressed_xml(xml_path, type="json")
        return json.loads(xml_compressed)

    def update_execution(self, exe_res):
        if len(self.contents) == 0:
            return
        self.contents[-1]['parsed_action'] = exe_res
        with jsonlines.open(self.trace_file_path, 'a') as f:
            f.write(self.contents[-1])

    def update_after(self, exe_res, rsp):
        if len(self.contents) == 0:
            return
        self.contents[-1]['parsed_action'] = exe_res
        self.history.append({"role": "user", "content": "** XML **"})
        if exe_res["action"] == "Call_API":
            call_instruction = exe_res["kwargs"]["instruction"]
            call_response = exe_res["kwargs"]["response"]
            rsp = rsp + f"\n\nQuery:{call_instruction}\nResponse:{call_response}"
        self.history.append({"role": "assistant", "content": rsp})
        self.contents[-1]["current_response"] = rsp
        with jsonlines.open(self.trace_file_path, 'a') as f:
            f.write(self.contents[-1])
        self.dectect_auto_stop()


from .json_recoder import JSONRecorder


import base64
import json
import re
import shutil
import time
from datetime import datetime, timedelta
from pathlib import Path
from typing import List

import backoff
import cv2
import jsonlines
import openai
import pyshine as ps
from colorama import Fore, Style
from openai import OpenAI
from zhipuai import ZhipuAI

# from evaluation.definition import *
from utils_mobile.xml_tool import UIXMLTree


def get_compressed_xml(xml_path, type="json"):
    xml_parser = UIXMLTree()
    with open(xml_path, 'r', encoding='utf-8') as f:
        xml_str = f.read()
    try:
        compressed_xml = xml_parser.process(xml_str, level=1, str_type=type).strip()
    except Exception as e:
        compressed_xml = None
        print(f"XML compressed failure: {e}")
    return compressed_xml

def handle_backoff(details):
    print(f"Retry {details['tries']} for Exception: {details['exception']}")


def handle_giveup(details):
    print(
        "Backing off {wait:0.1f} seconds afters {tries} tries calling fzunction {target} with args {args} and kwargs {kwargs}"
        .format(**details))


@backoff.on_exception(backoff.expo,
                      Exception,  # 捕获所有异常
                      max_tries=5,
                      on_backoff=handle_backoff,  # 指定重试时的回调函数
                      giveup=handle_giveup)  # 指定放弃重试时的回调函数
def get_completion_glm4(prompt, glm4_key):
    client = ZhipuAI(api_key=glm4_key)
    response = client.chat.completions.create(
        model="glm-4",  # 填写需要调用的模型名称
        messages=[
            {"role": "user", "content": prompt},
        ],
    )
    return response.choices[0].message.content


def time_within_ten_secs(time1, time2):
    def parse_time(t):
        if "+" in t:
            t = t.split()[1]
            t = t.split('.')[0] + '.' + t.split('.')[1][:6]  # 仅保留到微秒
            format = "%H:%M:%S.%f"
        else:
            format = "%H:%M:%S"
        return datetime.strptime(t, format)

    # 解析两个时间
    time1_parsed = parse_time(time1)
    time2_parsed = parse_time(time2)

    # 计算时间差并判断
    time_difference = abs(time1_parsed - time2_parsed)

    return time_difference <= timedelta(seconds=10)


def print_with_color(text: str, color=""):
    if color == "red":
        print(Fore.RED + text)
    elif color == "green":
        print(Fore.GREEN + text)
    elif color == "yellow":
        print(Fore.YELLOW + text)
    elif color == "blue":
        print(Fore.BLUE + text)
    elif color == "magenta":
        print(Fore.MAGENTA + text)
    elif color == "cyan":
        print(Fore.CYAN + text)
    elif color == "white":
        print(Fore.WHITE + text)
    elif color == "black":
        print(Fore.BLACK + text)
    else:
        print(text)
    print(Style.RESET_ALL)


def draw_bbox_multi(img_path, output_path, elem_list, record_mode=False, dark_mode=False):
    imgcv = cv2.imread(img_path)
    count = 1
    for elem in elem_list:
        try:
            top_left = elem.bbox[0]
            bottom_right = elem.bbox[1]
            left, top = top_left[0], top_left[1]
            right, bottom = bottom_right[0], bottom_right[1]
            label = str(count)
            if record_mode:
                if elem.attrib == "clickable":
                    color = (250, 0, 0)
                elif elem.attrib == "focusable":
                    color = (0, 0, 250)
                else:
                    color = (0, 250, 0)
                imgcv = ps.putBText(imgcv, label, text_offset_x=(left + right) // 2 + 10,
                                    text_offset_y=(top + bottom) // 2 + 10,
                                    vspace=10, hspace=10, font_scale=1, thickness=2, background_RGB=color,
                                    text_RGB=(255, 250, 250), alpha=0.5)
            else:
                text_color = (10, 10, 10) if dark_mode else (255, 250, 250)
                bg_color = (255, 250, 250) if dark_mode else (10, 10, 10)
                imgcv = ps.putBText(imgcv, label, text_offset_x=(left + right) // 2 + 10,
                                    text_offset_y=(top + bottom) // 2 + 10,
                                    vspace=10, hspace=10, font_scale=1, thickness=2, background_RGB=bg_color,
                                    text_RGB=text_color, alpha=0.5)
        except Exception as e:
            print_with_color(f"ERROR: An exception occurs while labeling the image\n{e}", "red")
        count += 1
    cv2.imwrite(output_path, imgcv)
    return imgcv


def draw_grid(img_path, output_path):
    def get_unit_len(n):
        for i in range(1, n + 1):
            if n % i == 0 and 120 <= i <= 180:
                return i
        return -1

    image = cv2.imread(img_path)
    height, width, _ = image.shape
    color = (255, 116, 113)
    unit_height = get_unit_len(height)
    if unit_height < 0:
        unit_height = 120
    unit_width = get_unit_len(width)
    if unit_width < 0:
        unit_width = 120
    thick = int(unit_width // 50)
    rows = height // unit_height
    cols = width // unit_width
    for i in range(rows):
        for j in range(cols):
            label = i * cols + j + 1
            left = int(j * unit_width)
            top = int(i * unit_height)
            right = int((j + 1) * unit_width)
            bottom = int((i + 1) * unit_height)
            cv2.rectangle(image, (left, top), (right, bottom), color, thick // 2)
            cv2.putText(image, str(label), (left + int(unit_width * 0.05) + 3, top + int(unit_height * 0.3) + 3), 0,
                        int(0.01 * unit_width), (0, 0, 0), thick)
            cv2.putText(image, str(label), (left + int(unit_width * 0.05), top + int(unit_height * 0.3)), 0,
                        int(0.01 * unit_width), color, thick)
    cv2.imwrite(output_path, image)
    return rows, cols


def encode_image(image_path):
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode('utf-8')


import os
import subprocess


def start_screen_record(self, file_name):
    print("Starting screen record")
    command = f'adb shell screenrecord /sdcard/{file_name}.mp4'
    self.process = subprocess.Popen(command, shell=True)


def write_jsonl(data: List[dict], path: str, append: bool = False):
    with jsonlines.open(path, mode='a' if append else 'w') as writer:
        for item in data:
            writer.write(item)


def del_file(path):
    for elm in Path(path).glob('*'):
        elm.unlink() if elm.is_file() else shutil.rmtree(elm)
    if os.path.exists(path):
        os.rmdir(path)


def copy_directory(source_dir, target_dir):
    # 检查目标目录是否存在，如果不存在则创建
    if not os.path.exists(target_dir):
        os.makedirs(target_dir)

    # 遍历源目录
    for item in os.listdir(source_dir):
        # 构建完整的文件/目录路径
        source_item = os.path.join(source_dir, item)
        target_item = os.path.join(target_dir, item)

        # 判断是文件还是目录
        if os.path.isdir(source_item):
            # 是目录则递归复制
            shutil.copytree(source_item, target_item)
        else:
            # 是文件则直接复制
            shutil.copy2(source_item, target_item)


def remove_punctuation(input_string):
    # 定义一个正则表达式来匹配中文标点符号
    punc = u'[\u3002\uff1b\uff0c\uff1a\u201c\u201d\uff08\uff09\u3001\uff1f\u300a\u300b]'
    punc_en = r"[!\"#$%&\'()*+,-./:;<=>?@\[\\\]^_`{|}~\n]"
    # 使用 sub() 函数把所有匹配的标点符号都替换成空字符串
    st = re.sub(punc, ' ', input_string)
    st = re.sub(punc_en, " ", st)
    return st


def contains_chinese(text):
    pattern = re.compile('[\u4e00-\u9fff]+')
    match = pattern.search(text)
    return bool(match)


def split_chunks(lst, num_chunks):
    avg = len(lst) // num_chunks
    remainder = len(lst) % num_chunks
    chunks = []
    i = 0
    for _ in range(num_chunks):
        chunk_size = avg + (1 if remainder > 0 else 0)
        chunks.append(lst[i:i + chunk_size])
        i += chunk_size
        remainder -= 1
    return chunks


def glm_call(prompt, temperature=0.7, top_p=0.9):
    for i in range(3):
        try:
            client = OpenAI(
                api_key="XqtuAVdoULyAW5P39MNim3u14Zchg2MMXZltzNcCvKLFhxF7GwxYlxdXvbE5amkf",
                base_url="https://api.chatglm.cn/v1",
            )
            res = client.chat.completions.create(
                messages=[
                    {
                        "role": "user",
                        "content": prompt,
                    }
                ],
                model="glm-4-public",
                temperature=temperature,
                top_p=top_p,
                stream=False,
                max_tokens=128,
            )
            res = res.choices[0].message.content
            break
        except Exception as e:
            if "404" in e:
                exit(0)
            print(f'Api error, retry times: {i + 1}, error: {e}')
            time.sleep(0.2)
    return res


def get_xml_list(xml_path):
    xml_parser = UIXMLTree()
    with open(xml_path, 'r', encoding='utf-8') as f:
        xml_str = f.read()
    try:
        compressed_xml = xml_parser.process(xml_str, level=1, str_type="list")
    except Exception as e:
        compressed_xml = None
        print(f"XML compressed failure: {e}")
    return compressed_xml


def dump_xml(controller, device_name=None, accessiblity=False, task_id="0"):
    save_dir = "logs/auto-test/xmls"
    if not os.path.exists(save_dir):
        os.makedirs(save_dir)

    if accessiblity:
        controller.get_ac_xml(prefix=task_id, save_dir=save_dir)
    else:
        controller.get_xml(prefix=task_id, save_dir=save_dir)
    xml_path = os.path.join(save_dir, f"{task_id}.xml")
    xml_compressed = get_compressed_xml(xml_path)
    print(xml_compressed)
    return json.loads(xml_compressed)


def load_json(path, encoding='utf-8'):
    return json.load(open(path, encoding=encoding))


def save_json(obj, path):
    with open(path, 'w', encoding='utf-8') as f:
        json.dump(obj, f, ensure_ascii=False, indent=2)


def load_jsonl(path, encoding='utf-8'):
    res = []
    with open(path, encoding=encoding) as f:
        for line in f:
            res.append(json.loads(line))
    return res


def save_jsonl(obj, path):
    with open(path, 'w', encoding='utf-8') as f:
        for item in obj:
            f.write(json.dumps(item, ensure_ascii=False) + '\n')


def write_jsonl(data: List[dict], path: str, append: bool = False):
    with jsonlines.open(path, mode='a' if append else 'w') as writer:
        for item in data:
            writer.write(item)


def del_file(path):
    for elm in Path(path).glob('*'):
        elm.unlink() if elm.is_file() else shutil.rmtree(elm)
    if os.path.exists(path):
        os.rmdir(path)


def copy_directory(source_dir, target_dir):
    # 检查目标目录是否存在，如果不存在则创建
    if not os.path.exists(target_dir):
        os.makedirs(target_dir)

    # 遍历源目录
    for item in os.listdir(source_dir):
        # 构建完整的文件/目录路径
        source_item = os.path.join(source_dir, item)
        target_item = os.path.join(target_dir, item)

        # 判断是文件还是目录
        if os.path.isdir(source_item):
            # 是目录则递归复制
            shutil.copytree(source_item, target_item)
        else:
            # 是文件则直接复制
            shutil.copy2(source_item, target_item)


def remove_punctuation(input_string):
    # 定义一个正则表达式来匹配中文标点符号
    punc = u'[\u3002\uff1b\uff0c\uff1a\u201c\u201d\uff08\uff09\u3001\uff1f\u300a\u300b]'
    punc_en = r"[!\"#$%&\'()*+,-./:;<=>?@\[\\\]^_`{|}~\n]"
    # 使用 sub() 函数把所有匹配的标点符号都替换成空字符串
    st = re.sub(punc, ' ', input_string)
    st = re.sub(punc_en, " ", st)
    return st


def contains_chinese(text):
    pattern = re.compile('[\u4e00-\u9fff]+')
    match = pattern.search(text)
    return bool(match)


def split_chunks(lst, num_chunks):
    avg = len(lst) // num_chunks
    remainder = len(lst) % num_chunks
    chunks = []
    i = 0
    for _ in range(num_chunks):
        chunk_size = avg + (1 if remainder > 0 else 0)
        chunks.append(lst[i:i + chunk_size])
        i += chunk_size
        remainder -= 1
    return chunks


def glm_call(prompt, temperature=0.7, top_p=0.9):
    for i in range(3):
        try:
            client = OpenAI(
                api_key="XqtuAVdoULyAW5P39MNim3u14Zchg2MMXZltzNcCvKLFhxF7GwxYlxdXvbE5amkf",
                base_url="https://api.chatglm.cn/v1",
            )
            res = client.chat.completions.create(
                messages=[
                    {
                        "role": "user",
                        "content": prompt,
                    }
                ],
                model="glm-4-public",
                temperature=temperature,
                top_p=top_p,
                stream=False,
                max_tokens=128,
            )
            res = res.choices[0].message.content
            break
        except Exception as e:
            if "404" in e:
                exit(0)
            print(f'Api error, retry times: {i + 1}, error: {e}')
            time.sleep(0.2)
    return res


class OpenAIEngine:
    def __init__(
            self,
            api_key: str,
            api_base: str,
            model_name: str = 'gpt-4-turbo-2024-04-09',
            max_new_tokens: int = 2048,
            temperature: float = 0.7,
            top_p: float = 0.9,
            retries: int = 3,  # Adding a parameter for retries
            backoff_factor: float = 1.0,  # Adding a parameter for backoff
            **kwargs
    ) -> None:
        self.client = openai.OpenAI(api_key=api_key, base_url=api_base)
        self.model_name = model_name
        self.max_new_tokens = max_new_tokens
        self.temperature = temperature
        self.top_p = top_p
        self.retries = retries
        self.backoff_factor = backoff_factor
        self.kwargs = kwargs

    def generate(self, messages) -> str:
        attempt = 0
        while attempt < self.retries:
            try:
                r = self.client.chat.completions.create(
                    model=self.model_name,
                    messages=messages,
                    max_tokens=self.max_new_tokens,
                    temperature=self.temperature,
                    top_p=self.top_p
                )
                return r.choices[0].message.content
            except Exception as e:
                attempt += 1
                if attempt == self.retries:
                    raise e
                time.sleep(self.backoff_factor * (2 ** (attempt - 1)))


def extract_bounds(node, path=""):
    result = []
    for key, value in node.items():
        current_path = f"{path}{key} "
        if isinstance(value, dict):
            result.extend(extract_bounds(value, current_path))
        elif key == "bounds":
            result.append({"key": path.strip(), "value": value})
    return result


import base64
import getpass
import os
import subprocess
import time
from typing import Union

from evaluation.docker_utils import execute_adb_command, cp_docker
from templates.packages import *
# from config import load_config
from utils_mobile.utils import print_with_color
from utils_mobile.utils import time_within_ten_secs
from evaluation.utils import list_all_devices, execute_adb





class AndroidController:
    def __init__(self, device, type="cmd", instance=None):
        self.device = device
        self.type = type
        if instance is not None:
            self.port = instance.docker_port_local
            self.container_id = instance.container_id
        else:
            self.port = None
            self.container_id = None
        self.screenshot_dir = "/sdcard"
        self.xml_dir = "/sdcard"
        self.ac_xml_dir = "/sdcard/Android/data/com.example.android.xml_parser/files"
        self.width, self.height = self.get_device_size()
        self.viewport_size = (self.width, self.height)
        self.backslash = "\\"

    def execute_adb(self, adb_command, type="cmd", output=True):
        if type == "cmd":
            env = os.environ.copy()
            env["PATH"] = f"/Users/{getpass.getuser()}/Library/Android/sdk/platform-tools:" + env["PATH"]
            env["PATH"] = f"/Users/{getpass.getuser()}/Library/Android/sdk/tools:" + env["PATH"]
            result = subprocess.run(adb_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True,
                                    executable='/bin/zsh', env=env)
            if result.returncode == 0:
                return result.stdout.strip()
            if output:
                print_with_color(f"Command execution failed: {adb_command}", "red")
                print_with_color(result.stderr, "red")
            return "ERROR"
        elif type == "docker":
            port = self.port
            assert port is not None, "Port must be provided for docker type"
            result = execute_adb_command(port, adb_command)
            assert "result" in result, "Error in executing adb command"
            return result["result"]

    def get_device_size(self):
        test_time = 0
        while test_time < 10:
            try:
                command = f"adb -s {self.device} shell wm size"
                output = self.execute_adb(command, self.type)
                resolution = output.split(":")[1].strip()
                width, height = resolution.split("x")
                return int(width), int(height)
            except Exception as e:
                test_time += 1
                time.sleep(2)
        assert False, "Error in getting device size"
        

    def get_screenshot(self, prefix, save_dir):
        cap_command = f"adb -s {self.device} shell screencap -p " \
                      f"{os.path.join(self.screenshot_dir, prefix + '.png').replace(self.backslash, '/')}"
        pull_command = f"adb -s {self.device} pull " \
                       f"{os.path.join(self.screenshot_dir, prefix + '.png').replace(self.backslash, '/')} " \
                       f"{os.path.join(save_dir, prefix + '.png')}"
        result = self.execute_adb(cap_command, self.type)
        if result != "ERROR":
            result = self.execute_adb(pull_command, self.type)
            if result != "ERROR":
                return os.path.join(save_dir, prefix + ".png")
            return result
        return result

    def save_screenshot(self, save_path):
        prefix = os.path.basename(save_path).replace('.png', '')
        remote_path = f"{os.path.join(self.screenshot_dir, prefix + '.png').replace(self.backslash, '/')}"
        cap_command = f"adb -s {self.device} shell screencap -p {remote_path}"
        pull_command = f"adb -s {self.device} pull {remote_path} {save_path}"
        result = self.execute_adb(cap_command, self.type)
        result = self.execute_adb(pull_command, self.type)
        if result != "ERROR":
            if self.type == "docker":
                cp_docker(save_path, save_path, self.container_id, local_to_docker=False)
            return save_path
        return result

    def get_xml(self, prefix, save_dir):
        remote_path = os.path.join(self.xml_dir, prefix + '.xml').replace(self.backslash, '/')
        local_path = os.path.join(save_dir, prefix + '.xml')
        dump_command = f"adb -s {self.device} shell uiautomator dump {remote_path}"
        pull_command = f"adb -s {self.device} pull {remote_path} {local_path}"

        def is_file_empty(file_path):
            return os.path.exists(file_path) and os.path.getsize(file_path) == 0

        for attempt in range(5):
            result = self.execute_adb(dump_command, self.type)
            if result == "ERROR":
                time.sleep(2)
                continue

            result = self.execute_adb(pull_command, self.type)
            if result == "ERROR" or is_file_empty(local_path):
                time.sleep(2)
                continue
            if self.type == "docker":
                cp_docker(local_path, local_path, self.container_id, local_to_docker=False)
            return local_path

        # Final attempt after 3 retries
        result = self.execute_adb(dump_command, self.type)
        result = self.execute_adb(pull_command, self.type)
        if result != "ERROR" and not is_file_empty(local_path):
            if self.type == "docker":
                cp_docker(local_path, local_path, self.container_id, local_to_docker=False)
            return local_path

        return result

    def get_ac_xml(self, prefix, save_dir):
        remote_path = f"{os.path.join(self.ac_xml_dir, 'ui.xml').replace(self.backslash, '/')}"
        local_path = os.path.join(save_dir, prefix + '.xml')
        pull_command = f"adb -s {self.device} pull {remote_path} {local_path}"

        def is_file_empty(file_path):
            return os.path.exists(file_path) and os.path.getsize(file_path) == 0

        for attempt in range(5):
            result = self.execute_adb(pull_command, self.type)
            if result != "ERROR" and not is_file_empty(local_path):
                if self.type == "docker":
                    cp_docker(local_path, local_path, self.container_id, local_to_docker=False)
                return local_path
            time.sleep(2)

        # Final attempt after 3 retries
        result = self.execute_adb(pull_command, self.type)
        if result != "ERROR" and not is_file_empty(local_path):
            if self.type == "docker":
                cp_docker(local_path, local_path, self.container_id, local_to_docker=False)
            return local_path

        return result

    def get_current_activity(self):
        adb_command = "adb -s {device} shell dumpsys window | grep mCurrentFocus | awk -F '/' '{print $1}' | awk '{print $NF}'"
        adb_command = adb_command.replace("{device}", self.device)
        result = self.execute_adb(adb_command, self.type)
        if result != "ERROR":
            return result
        return 0

    def get_current_app(self):
        activity = self.get_current_activity()
        app = find_app(activity)
        return app

    def back(self):
        adb_command = f"adb -s {self.device} shell input keyevent KEYCODE_BACK"
        ret = self.execute_adb(adb_command, self.type)
        return ret

    def enter(self):
        adb_command = f"adb -s {self.device} shell input keyevent KEYCODE_ENTER"
        ret = self.execute_adb(adb_command, self.type)
        return ret

    def home(self):
        adb_command = f"adb -s {self.device} shell input keyevent KEYCODE_HOME"
        ret = self.execute_adb(adb_command, self.type)
        return ret

    def tap(self, x, y):
        adb_command = f"adb -s {self.device} shell input tap {x} {y}"
        ret = self.execute_adb(adb_command, self.type)
        return ret

    def text(self, input_str):
        # adb_command = f'adb -s {self.device} input keyevent KEYCODE_MOVE_END'
        # ret = self.execute_adb(adb_command, self.type)
        adb_command = f'adb -s {self.device} shell input keyevent --press $(for i in {{1..100}}; do echo -n "67 "; done)'
        ret = self.execute_adb(adb_command, self.type)
        chars = input_str
        charsb64 = str(base64.b64encode(chars.encode('utf-8')))[1:]
        adb_command = f"adb -s {self.device} shell am broadcast -a ADB_INPUT_B64 --es msg {charsb64}"
        ret = self.execute_adb(adb_command, self.type)
        return ret

    def long_press(self, x, y, duration=1000):
        adb_command = f"adb -s {self.device} shell input swipe {x} {y} {x} {y} {duration}"
        ret = self.execute_adb(adb_command, self.type)
        return ret

    def kill_package(self, package_name):
        command = f"adb -s {self.device} shell am force-stop {package_name}"
        self.execute_adb(command, self.type)

    def swipe(self, x, y, direction, dist: Union[str, int] = "medium", quick=False):
        if x == None:
            x = self.width // 2
        if y == None:
            y = self.height // 2
        if isinstance(dist, str):
            unit_dist = int(self.width / 10)
            if dist == "long":
                unit_dist *= 10
            elif dist == "medium":
                unit_dist *= 2
        elif isinstance(dist, int):
            unit_dist = dist
        if direction == "up":
            offset = 0, -2 * unit_dist
        elif direction == "down":
            offset = 0, 2 * unit_dist
        elif direction == "left":
            offset = -1 * unit_dist, 0
        elif direction == "right":
            offset = unit_dist, 0
        else:
            return "ERROR"
        duration = 100 if quick else 400
        adb_command = f"adb -s {self.device} shell input swipe {x} {y} {x + offset[0]} {y + offset[1]} {duration}"
        ret = self.execute_adb(adb_command, self.type)
        return ret

    def swipe_precise(self, start, end, duration=400):
        start_x, start_y = start
        end_x, end_y = end
        adb_command = f"adb -s {self.device} shell input swipe {start_x} {start_x} {end_x} {end_y} {duration}"
        ret = self.execute_adb(adb_command, self.type)
        return ret

    def launch_app(self, package_name):
        command = f"adb -s {self.device} shell monkey -p {package_name} -c android.intent.category.LAUNCHER 1"
        ret = self.execute_adb(command, self.type)
        return ret

    def start_screen_record(self, prefix):
        print("Starting screen record")
        command = f'adb -s {self.device} shell screenrecord /sdcard/{prefix}.mp4'
        return subprocess.Popen(command, shell=True)

    def launch(self, package_name):
        command = f"adb -s {self.device} shell monkey -p {package_name} -c android.intent.category.LAUNCHER 1"
        self.execute_adb(command, self.type)

    def run_command(self, command):
        command = command.replace("adb", f"adb -s {self.device} ")
        return self.execute_adb(command, self.type)

    def check_ac_survive(self):
        try:
            time_command = f"adb -s {self.device} shell stat -c %y /sdcard/Android/data/com.example.android.xml_parser/files/ui.xml"
            time_phone_command = f"adb -s {self.device} shell date +\"%H:%M:%S\""
            result = time_within_ten_secs(self.execute_adb(time_command, self.type),
                                          self.execute_adb(time_phone_command, self.type))
        except Exception as e:
            print(e)
            return False
        return result


if __name__ == '__main__':
    And = AndroidController("emulator-5554")
    And.text("北京南站")


import copy
import json
import uuid
from typing import Dict

import xmltodict
from lxml import etree

from utils_mobile.specialCheck import *


def get_words_in_certain_length(text, length=10):
    words = text.split()
    if len(words) > length:
        return ' '.join(words[:length])
    else:
        return ' '.join(words)


class UIXMLTree:
    def __init__(self):
        self.root = None
        self.cnt = None
        self.node_to_xpath: Dict[str, list[str]] = {}
        self.node_to_name = None
        self.remove_system_bar = None
        self.processors = None
        self.app_name = None
        self.myTree = None
        self.xml_dict = None  # dictionary: processed xml
        self.processors = [self.xml_sparse, self.merge_none_act]
        self.lastTree = None
        self.mapCount = {}
        self.use_bounds = False
        self.merge_switch = False
        self.all_bounds = {}

    def process(self, xml_string, app_info=None, level=1, str_type="json", remove_system_bar=True, use_bounds=False,
                merge_switch=False):
        self.xml_string = xml_string
        self.root = etree.fromstring(xml_string.encode('utf-8'))
        self.cnt = 0
        self.node_to_xpath: Dict[str, list[str]] = {}
        self.node_to_name = {}
        self.remove_system_bar = remove_system_bar

        self.app_name = None
        self.lastTree = self.myTree
        self.myTree = None
        self.use_bounds = use_bounds
        self.merge_switch = merge_switch

        # for gaode
        self.gd_recommend_node = None
        self.gd_recycler_node = None

        # from fine-grained to coarse-grained observation
        for processor in self.processors[:level]:
            processor()
        self.reindex()

        self.xml_dict = xmltodict.parse(etree.tostring(self.root, encoding='utf-8'), attr_prefix="")
        self.traverse_dict(self.xml_dict)
        if "json" == str_type:
            return json.dumps(self.xml_dict, indent=4, ensure_ascii=False).replace(": {},", "").replace(": {}", "")
        elif "plain_text" == str_type:
            return self.dict_to_plain_text(self.xml_dict)
        else:
            raise NotImplementedError

    def insert_node(self, parent, index, attrib_dict):
        new_node = etree.Element('Node')

        for k, v in attrib_dict.items():
            new_node.set(k, v)

        parent.insert(index, new_node)

    def append_node(self, parent, attrib_dict):
        new_node = etree.Element('Node')

        for k, v in attrib_dict.items():
            new_node.set(k, v)

        parent.append(new_node)

    def find_smallest_enclosing_node(self, root, bounds):
        smallest_node = None
        if 'bounds' in root.attrib and check_bounds_containing(bounds, root.attrib['bounds']):
            smallest_node = root
            for child in root:
                candidate = self.find_smallest_enclosing_node(child, bounds)
                if candidate is not None:
                    smallest_node = candidate
        return smallest_node

    def find_nodes_for_bounds(self, root, bounds_list):
        result = []
        for label, bounds in bounds_list:
            node = self.find_smallest_enclosing_node(root, bounds)
            result.append([label, bounds, node])

        # add new nodes
        for label, bounds, parent in result:
            attrib_dict = {
                "index": "0",
                "text": label,
                "resource-id": "",
                "class": "android.widget.TextView",
                "package": parent.attrib['package'],
                "content-desc": "",
                "checkable": "false",
                "checked": "false",
                "clickable": "false",
                "enabled": "false",
                "focusable": "false",
                "focused": "false",
                "scrollable": "false",
                "long-clickable": "false",
                "password": "false",
                "selected": "false",
                "bounds": coords_to_bounds(bounds)
            }
            self.append_node(
                parent=parent,
                index='0',
                attrib_dict=attrib_dict,
            )
        return result

    def dict_to_plain_text(self, xml_dict, indent=0):
        result = ""
        for key, value in xml_dict.items():
            result += " " * indent + str(key) + ": "
            if isinstance(value, dict):
                result += "\n" + self.dict_to_plain_text(value, indent + 4)
            else:
                result += str(value) + "\n"
        return result

    def should_remove_node(self, node):
        # remove system ui elements, e.g, battery, wifi and notifications
        # if self.remove_system_bar and node.attrib['package'] == "com.android.systemui":
        #     return True

        #  remove invalid element
        if not check_valid_bounds(node.attrib["bounds"]):
            return True

        # remove non-visible element
        parent = node.getparent()
        if parent is not None and 'bounds' in parent.attrib:
            if not check_bounds_containing(node.attrib['bounds'], parent.attrib['bounds']):
                return True

        # don't remove functional element
        for p in ["checkable", "checked", "clickable", "focusable", "scrollable", "long-clickable", "password",
                  "selected"]:
            if node.attrib[p] == "true":
                return False

        # don't remove element with description
        for p in ['text', "content-desc"]:
            if node.attrib[p] != "":
                return False
        return True

    def child_index(self, parent, node):
        # find the index of a given node in its sibling nodes
        for i, v in enumerate(list(parent)):
            if v == node:
                return i
        return -1

    def merge_attribute_in_one_line(self, node):
        node.attrib['description'] = ""
        # text description

        # function description in resource-id and class
        if node.attrib['class'] != "":
            node.attrib['description'] += node.attrib['class'] + " "
        # if node.attrib['resource-id'] != "":
        #     node.attrib['description'] += node.attrib['resource-id'] + " "
        # action
        node.attrib['description'] += ';' + node.attrib['action'] + '; '

        # status
        for attrib in ['checked', 'password', 'selected']:
            if node.attrib[attrib] == "true":
                node.attrib['description'] += attrib + ' '
        if node.attrib['checkable'] == "true" and node.attrib['checked'] == "false":
            node.attrib['description'] += 'unchecked '

        # extend status
        extend_status = ";"

        if node.attrib['password'] == "true":
            extend_status += ' you can input password, '
        if node.attrib['selected'] == "true":
            extend_status += ' selected, '
        node.attrib['description'] += extend_status

        # func-desc
        node.attrib['description'] += ";" + node.attrib['func-desc']
        node.attrib['description'] = node.attrib['description'].replace("\n", "")
        # map functional attributes to support actions

        # clean attribute
        # for attrib in ['index', 'text', 'resource-id', 'package', 'content-desc', 'enabled', 'focused',
        #                'visible-to-user', 'bounds', 'class', 'checkable', 'checked', 'clickable', 'focusable',
        #                'scrollable', 'long-clickable', 'password',
        #                'selected', 'func-desc', 'action']:
        for attrib in ['index', 'text', 'resource-id', 'package', 'content-desc', 'enabled', 'focused',
                       'class', 'checkable', 'checked', 'clickable', 'focusable',
                       'scrollable', 'long-clickable', 'password',
                       'selected', 'func-desc', 'action']:
            del node.attrib[attrib]
        if 'NAF' in node.attrib:
            del node.attrib['NAF']

    def get_xpath(self, node):
        if node.tag == 'hierarchy':
            return '/'
        else:
            if node.attrib['resource-id'] != "":
                transfer_resource_id = node.attrib['resource-id']
                my_path = f'//*[@resource-id=\'{transfer_resource_id}\']'
                candi_nodes = self.root.xpath(my_path)
                if len(candi_nodes) == 1:
                    return my_path

            parent = node.getparent()
            children = parent.xpath(f'./*[@class="{node.attrib["class"]}"]')
            index = children.index(node) + 1
            return parent.attrib['xpath2'] + '/' + node.attrib['class'] + f'[{index}]'

    def get_attr_count(self, collection_key, key):
        if collection_key not in self.mapCount:
            return 0
        if key not in self.mapCount[collection_key]:
            return 0
        return self.mapCount[collection_key][key]

    def inc_attr_count(self, collection_key, key):

        if collection_key not in self.mapCount:
            self.mapCount[collection_key] = {key: 1}
        elif key not in self.mapCount[collection_key]:
            self.mapCount[collection_key][key] = 1
        else:
            self.mapCount[collection_key][key] += 1

    def get_xpath_new(self, node):
        array = []
        while node is not None:
            if node.tag != "node":
                break

            parent = node.getparent()
            if self.get_attr_count("tag", node.tag) == 1:
                array.append(f'*[@label="{node.tag}"]')
                break
            elif self.get_attr_count("resource-id", node.attrib["resource-id"]) == 1:
                array.append(f'*[@resource-id="{node.attrib["resource-id"]}"]')
                break
            elif self.get_attr_count("text", node.attrib["text"]) == 1:
                array.append(f'*[@text="{node.attrib["text"]}"]')
                break
            elif self.get_attr_count("content-desc", node.attrib["content-desc"]) == 1:
                array.append(f'*[@content-desc="{node.attrib["content-desc"]}"]')
                break
            elif self.get_attr_count("class", node.attrib["class"]) == 1:
                array.append(f'{node.attrib["class"]}')
                break
            elif parent is None:
                array.append(f'{node.tag}')
            else:
                index = 0
                children = list(parent)
                node_id = children.index(node)
                for _id, child in enumerate(children):
                    if child.attrib["class"] == node.attrib["class"]:
                        index += 1
                    if node_id == _id:
                        break
                array.append(f'{node.attrib["class"]}[{index}]')
            node = parent

        array.reverse()
        xpath = "//" + "/".join(array)
        return xpath

    def get_xpath_all_new(self, node):
        node.attrib['xpath1'] = self.get_xpath_new(node)
        node.attrib['xpath2'] = self.get_xpath(node)
        for child in list(node):
            self.get_xpath_all_new(child)

    def mid_order_remove(self, node):
        children = list(node)
        node.attrib['name'] = ""
        if node.tag == 'node':
            if self.should_remove_node(node):
                # remove node
                parent = node.getparent()
                # insert child nodes into node's parent
                index = self.child_index(parent, node)
                for i, v in enumerate(children):
                    parent.insert(index + i, v)
                parent.remove(node)
            else:
                # pre-process attribute
                # content-desc text
                node.attrib['func-desc'] = ""
                node.attrib['action'] = ""
                # pre desc
                if node.attrib['text'] != "":
                    node.attrib['func-desc'] = node.attrib['text'] + ' '
                if node.attrib['content-desc'] != "":
                    node.attrib['func-desc'] += node.attrib['content-desc'] + ' '

                # pre name
                if node.attrib['class'] != "":
                    if node.attrib['text'] != "":
                        node.attrib['name'] = get_words_in_certain_length(node.attrib['text']) + " " + \
                                              node.attrib['class'].split('.')[-1]
                    elif node.attrib['content-desc'] != "":
                        node.attrib['name'] = get_words_in_certain_length(node.attrib['content-desc']) + " " + \
                                              node.attrib['class'].split('.')[-1]
                    else:
                        node.attrib['name'] = node.attrib['class'].split('.')[-1]

                # pre class
                if node.attrib['class'] != "":
                    if node.attrib['class'].split('.')[-1] in ["View", "FrameLayout", "LinearLayout", "RelativeLayout"]:
                        node.attrib['class'] = ""
                    else:
                        node.attrib['class'] = node.attrib['class'].split('.')[-1]

                # pre resource-id
                if node.attrib['resource-id'] != "":
                    if ":id/" in node.attrib['resource-id']:
                        resrc = node.attrib['resource-id']
                        substring = resrc[resrc.index(":id/") + 4:]
                        node.attrib['resource-id'] = substring
                    else:
                        node.attrib['resource-id'] = ""
                # pre action
                for k, v in {'clickable': 'click', 'scrollable': 'scroll', 'long-clickable': 'long-click',
                             'checkable': 'check'}.items():
                    if node.attrib[k] == "true":
                        node.attrib['action'] += v + ' '
                if node.attrib['action'] == "" and node.attrib['focusable'] == "true":
                    node.attrib['action'] += "focusable "

                # for material_clock_face
                parent = node.getparent()
                if parent.tag == 'node' and "material_clock_face" in parent.attrib['resource-id']:
                    node.attrib['action'] += 'click'

        for child in children:
            self.mid_order_remove(child)

    def get_all_bounds(self, node, parent_keys):
        parent_keys = copy.deepcopy(parent_keys)
        if 'bounds' in node.attrib:
            key = node.attrib['xpath1'] + "_" + node.attrib['xpath2']
            if parent_keys == []:
                self.all_bounds[key] = {'bounds': node.attrib['bounds'], 'children': {}}
            else:
                bounds_dict = self.all_bounds
                for parent_key in parent_keys:
                    bounds_dict = bounds_dict[parent_key]['children']
                bounds_dict[key] = {'bounds': node.attrib['bounds'], 'children': {}}
            parent_keys.append(key)

        for child in list(node):
            self.get_all_bounds(child, parent_keys)

    def remove_children_overlap_with_bounds(self, node, overlap_bounds, current):
        for child in node:
            child_bounds = child.attrib['bounds']
            if check_bounds_intersection(child_bounds, overlap_bounds):
                self.remove_children_overlap_with_bounds(child, overlap_bounds, current)
            else:
                child.getparent().remove(child)
                cur_parent = current.getparent()
                cur_parent.insert(self.child_index(cur_parent, current), child)
                self.queue.append(child)

    def remove_overlap(self):
        self.queue = deque([self.root])

        while self.queue:
            current = self.queue.popleft()
            # for nodes without bounds, just go ahead
            if 'bounds' not in current.attrib:
                self.queue.extend(current.getchildren())
                continue

            current_bounds = current.attrib['bounds']
            # get siblings
            subsequent_siblings = []
            temp = current.getnext()
            while temp is not None:
                subsequent_siblings.append(temp)
                temp = temp.getnext()

            # Check overlaps with each subsequent sibling
            overlap_bounds = None
            for sibling in subsequent_siblings:
                sibling_bounds = sibling.attrib['bounds']
                if check_bounds_intersection(current_bounds, sibling_bounds):
                    overlap_bounds = sibling_bounds
                    break

            if overlap_bounds is not None:
                # Traverse children and handle overlaps
                self.remove_children_overlap_with_bounds(current, overlap_bounds, current)
                current.getparent().remove(current)
            else:
                # No overlap, enqueue all children
                self.queue.extend(current.getchildren())

    def dump_tree(self):
        xml_str = etree.tostring(self.root, encoding='unicode')
        print(xml_str)

    def mid_order_reindex(self, node):
        if node.tag == 'node':
            self.merge_attribute_in_one_line(node)

        node.tag = 'n' + str(uuid.uuid4().hex[:4])

        if node.tag in self.node_to_xpath:
            self.node_to_xpath[node.tag].append(node.attrib['xpath1'])
            self.node_to_xpath[node.tag].append(node.attrib['xpath2'])
        else:
            self.node_to_xpath[node.tag] = [node.attrib['xpath1'], node.attrib['xpath2']]
        self.node_to_xpath[node.tag].append([])
        if node.getparent() is not None:
            parent = node.getparent()
            # check if has xpath
            if parent.tag in self.node_to_xpath:
                self.node_to_xpath[parent.tag][2].append(node.attrib['xpath1'])
                self.node_to_xpath[parent.tag][2].append(node.attrib['xpath2'])
            # add parent xpath to node
            if 'xpath1' in parent.attrib and 'xpath2' in parent.attrib:
                if parent.attrib['xpath1'] != "//" and parent.attrib['xpath2'] != "//":
                    if node.tag in self.node_to_xpath:
                        self.node_to_xpath[node.tag][2].append(parent.attrib['xpath1'])
                        self.node_to_xpath[node.tag][2].append(parent.attrib['xpath2'])
                    else:
                        self.node_to_xpath[node.tag][2] = [parent.attrib['xpath1'], parent.attrib['xpath2']]
            # add sibling node
            children = list(parent)
            for _id, child in enumerate(children):
                if 'xpath1' in child.attrib and 'xpath2' in child.attrib:
                    if node.tag in self.node_to_xpath:
                        self.node_to_xpath[node.tag][2].append(child.attrib['xpath1'])
                        self.node_to_xpath[node.tag][2].append(child.attrib['xpath2'])
                    else:
                        self.node_to_xpath[node.tag][2] = [child.attrib['xpath1'], child.attrib['xpath2']]

        self.node_to_name[node.tag] = node.attrib['name']

        self.cnt = self.cnt + 1

        children = list(node)
        for child in children:
            self.mid_order_reindex(child)
        del node.attrib['xpath1']
        del node.attrib['xpath2']
        del node.attrib['name']

    def merge_description(self, p_desc, c_desc):
        p_list = p_desc.replace(";", " ").replace(",", " ").replace(".", " ").split()
        c_list = c_desc.replace(";", " ").replace(",", " ").replace(".", " ").split(";")
        candi_str = p_desc
        for sub_str in c_list:
            for word in sub_str.split():
                if word not in p_list:
                    candi_str += " " + word

        return candi_str.replace(";", ". ")

    def can_merge_bounds(self, parent_bounds, child_bounds):
        # get bounds
        match_parent = re.findall(r'(\d+)', parent_bounds)
        match_child = re.findall(r'(\d+)', child_bounds)
        x_len_parent = int(match_parent[2]) - int(match_parent[0])
        y_len_parent = int(match_parent[3]) - int(match_parent[1])
        x_len_child = int(match_child[2]) - int(match_child[0])
        y_len_child = int(match_child[3]) - int(match_child[1])

        if y_len_child / y_len_parent > 0.8 and x_len_child / x_len_parent > 0.8:
            return True

        return False

    def mid_order_merge(self, node):
        children = list(node)
        # merge child conditions
        can_merge = False
        if node.tag == 'node' and node.attrib['action'] == "":
            can_merge = True
        if self.use_bounds and node.tag == 'node' and self.can_merge_bounds(node.attrib['bounds'],
                                                                            node.attrib['bounds']):
            can_merge = True
        if self.merge_switch and node.tag == 'node' and node.attrib['checked'] == "true":
            node.attrib['func-desc'] = ', it has a switch and the switch is currently on,'
            can_merge = True
        if self.merge_switch and node.tag == 'node' and node.attrib['checkable'] == "true" and node.attrib[
            'checked'] == "false":
            node.attrib['func-desc'] = ', it has a switch and the switch is currently off,'
            can_merge = True

        if can_merge:
            # add child to parent
            parent = node.getparent()
            if parent.tag == 'node':
                index = self.child_index(parent, node)
                for i, v in enumerate(children):
                    parent.insert(index + i, v)
                # merge desc
                parent.attrib['func-desc'] = self.merge_description(parent.attrib['func-desc'],
                                                                    node.attrib['func-desc'])

                parent.remove(node)
        for child in children:
            self.mid_order_merge(child)

    def traverse_dict(self, _dict):
        key_replace = []

        for key, value in _dict.items():
            # value is also a dict
            if isinstance(value, dict):
                if "rotation" in value:
                    if not self.app_name:
                        app_name = f"The current screenshot's description is shown"
                    elif self.app_name == "home":
                        app_name = f"This is the home screen view."
                    else:
                        app_name = f"The current APP is {self.app_name}."
                    key_replace.append([key, app_name])
                    del value['rotation']
                elif "description" in value:
                    new_key = f"[{key}] {value['description']}"
                    key_replace.append([key, new_key])
                    del value['description']

        for key_pr in key_replace:
            _dict[key_pr[1]] = _dict[key_pr[0]]
            del _dict[key_pr[0]]

        for key, value in _dict.items():
            if isinstance(value, dict):
                self.traverse_dict(value)

    def merge_none_act(self):
        self.mid_order_merge(self.root)

    def reindex(self):
        # self.cnt = 0
        self.mid_order_reindex(self.root)

    def special_check(self):
        current_app = list(self.root)[0].attrib['package']
        try:
            specialcheck = SpecialCheck[current_app](self.xml_string, self.root)
            specialcheck.check()
        except KeyError:
            self.remove_overlap()

    def xml_sparse(self):
        # get all attribute count
        self.mapCount = {}
        for element in self.root.iter():
            self.inc_attr_count("tag", element.tag)
            if element.tag != "node":
                continue
            self.inc_attr_count("resource-id", element.attrib["resource-id"])
            self.inc_attr_count("text", element.attrib["text"])
            self.inc_attr_count("class", element.attrib["class"])
            self.inc_attr_count("content-desc", element.attrib["content-desc"])

        # self.get_xpath_all(self.root)
        self.get_xpath_all_new(self.root)
        self.mid_order_remove(self.root)
        self.special_check()
        # save the tree
        self.myTree = copy.copy(self.root)

    def dump_xpath(self):
        json_data = json.dumps(self.node_to_xpath, indent=4, ensure_ascii=False)
        print(json_data)

    def dump_name(self):
        json_data = json.dumps(self.node_to_name, indent=4, ensure_ascii=False)
        print(json_data)

    def get_recycle_nodes(self, root):
        node_list = []
        for element in root.iter():
            if 'scrollable' in element.attrib and element.attrib['scrollable'] == 'true':
                node_list.append(element)
                print(element.attrib['class'], element.attrib['resource-id'], element.attrib['func-desc'])
        return node_list

    def same_subtree(self, tree1, tree2):
        if tree1.attrib['class'] != tree2.attrib['class'] or tree1.attrib['resource-id'] != tree2.attrib[
            'resource-id'] or tree1.attrib['func-desc'] != tree2.attrib['func-desc']:
            return False
        children1 = list(tree1)
        children2 = list(tree2)
        if len(children1) != len(children2):
            return False
        for i in range(len(children1)):
            if not self.same_subtree(children1[i], children2[i]):
                return False
        return True

    def check_unique(self, node, node_list):
        for element in node_list:
            if self.same_subtree(node, element):
                return False
        return True

    def merge_recycle_list(self, recycle_nodes):
        for element in self.root.iter():
            if 'scrollable' in element.attrib and element.attrib['scrollable'] == 'true':
                # find same recycle node
                for node in recycle_nodes:
                    if element.attrib['class'] == node.attrib['class'] and element.attrib['resource-id'] == node.attrib[
                        'resource-id'] and element.attrib['func-desc'] == node.attrib['func-desc']:
                        # merge
                        for child in list(node):
                            if self.check_unique(child, list(element)):
                                element.append(child)

    def check_scroll_bottom(self, tree1, tree2):
        child1 = list(tree1)
        child2 = list(tree2)
        for i in range(len(child1)):
            if not self.same_subtree(child1[i], child2[i]):
                return False
        return True


import math
import re
from collections import deque


def bounds_to_coords(bounds_string):
    pattern = r"\[(-?\d+),(-?\d+)\]\[(-?\d+),(-?\d+)\]"
    matches = re.findall(pattern, bounds_string)
    return list(map(int, matches[0]))


def coords_to_bounds(bounds):
    return f"[{bounds[0]},{bounds[1]}][{bounds[2]},{bounds[3]}]"


def check_valid_bounds(bounds):
    bounds = bounds_to_coords(bounds)

    return bounds[0] >= 0 and bounds[1] >= 0 and \
        bounds[0] < bounds[2] and bounds[1] < bounds[3]


def check_point_containing(bounds, x, y, window, threshold=0):
    bounds = bounds_to_coords(bounds)

    screen_threshold_x = threshold * window[0]
    screen_threshold_y = threshold * window[1]

    return bounds[0] - screen_threshold_x <= x <= bounds[2] + screen_threshold_x and \
        bounds[1] - screen_threshold_y <= y <= bounds[3] + screen_threshold_y


def check_bounds_containing(bounds_contained, bounds_containing):
    bounds_contained = bounds_to_coords(bounds_contained)
    bounds_containing = bounds_to_coords(bounds_containing)

    return bounds_contained[0] >= bounds_containing[0] and \
        bounds_contained[1] >= bounds_containing[1] and \
        bounds_contained[2] <= bounds_containing[2] and \
        bounds_contained[3] <= bounds_containing[3]


def check_bounds_intersection(bounds1, bounds2):
    bounds1 = bounds_to_coords(bounds1)
    bounds2 = bounds_to_coords(bounds2)

    return bounds1[0] < bounds2[2] and bounds1[2] > bounds2[0] and \
        bounds1[1] < bounds2[3] and bounds1[3] > bounds2[1]


def get_bounds_area(bounds):
    bounds = bounds_to_coords(bounds)
    return (bounds[2] - bounds[0]) * (bounds[3] - bounds[1])


def get_bounds_center(bounds):
    bounds = bounds_to_coords(bounds)
    return (bounds[0] + bounds[2]) // 2, (bounds[1] + bounds[3]) // 2


def calculate_point_distance(x1, y1, x2, y2):
    distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return distance


def compare_bounds_area(bounds1, bounds2):
    """
    :return:
        if bounds1 is smaller than bounds2, return true
        else return false
    """
    return get_bounds_area(bounds1) < get_bounds_area(bounds2)


def compare_y_in_bounds(bounds1, bounds2):
    """
    :return:
        if y in bounds1 is smaller than that in bounds2, return true
        else return false
    """
    bounds1 = bounds_to_coords(bounds1)
    bounds2 = bounds_to_coords(bounds2)

    return bounds1[1] < bounds2[1] and bounds1[3] < bounds2[3]


class MiniMapSpecialCheck:
    def __init__(self, xml_string, root):
        self.xml_string = xml_string
        self.root = root

    def check(self):
        page, page_type = self.check_page()

        self.base_node = None
        self.retrieve_times = 0
        if page == "filter":
            self.recycler_node = None
            self.recycler_bounds = "[0,0][0,0]"
            self.check_filter(page_type)
        elif page == "route":
            self.check_route(page_type)
        elif page == "search-result":
            self.check_search_result(page_type)

    def check_page(self):
        page_map = {
            "filter": [
                (["距离优先", "推荐排序", "好评优先"], "推荐排序"),
                (["距离", "km内"], "位置距离"),
                (["烤肉", "烧烤", "螺蛳粉"], "全部分类"),
                (["烤肉", "烧烤", "蛋糕店"], "全部分类"),
                (["水产海鲜", "火锅", "熟食"], "全部分类"),
                (["水产海鲜", "火锅", "早餐"], "全部分类"),
                (["星级(可多选)", "价格"], "星级酒店"),
                (["品牌", "宾客类型", "特色主题"], "更多筛选"),
                (["92#", "95#", "98#", "0#"], "油类型"),
                (["全部品牌", "中国石化", "中国石油", "壳牌"], "全部品牌")
            ],
            "route": [
                (["驾车", "火车", "步行", "收起"], "出行方式"),
                (["选择日期", "日", "一", "二", "三", "四", "五", "六"], "选择日期"),
                (["选择出发时间弹窗", "现在出发"], "选择出发时间"),
                (["选择出发时间", "确定"], "选择出发时间_taxi")
            ],
            "search-result": [
                (["周边", "收藏", "分享", "打车"], "周边收藏")
            ]
        }

        for key, values in page_map.items():
            for keywords, page_type in values:
                if all(k in self.xml_string for k in keywords):
                    return key, page_type
        return None, None

    def get_filter_base_node(self, node, page_type):
        page_criteria = {
            "推荐排序": [("距离优先", 14)],
            "位置距离": [("km内", 8)],
            "全部分类": [("烤肉", 14), ("火锅", 14)],
            "星级酒店": [("星级(可多选)", 10)],
            "更多筛选": [("品牌", 9)],
            "全部品牌": [("全部品牌", 14)],
            "油类型": [("95#", 14)]
        }

        pattern_need_fuzzy = ["km内"]

        if 'content-desc' in node.attrib:
            for pattern, retrieve_times in page_criteria.get(page_type, []):
                content_desc = node.attrib['content-desc']
                text = node.attrib['text']
                # find the specialCheck base node
                if (pattern in pattern_need_fuzzy and (pattern in content_desc or pattern in text)) or \
                        (pattern not in pattern_need_fuzzy and (pattern == content_desc or pattern == text)):
                    # If the base node is not unique, find the one that is lower.
                    if self.base_node is None or compare_y_in_bounds(self.base_node.attrib['bounds'],
                                                                     node.attrib['bounds']):
                        self.base_node = node
                        self.retrieve_times = retrieve_times
                        break

        # Find a node that can scroll in a loop.
        if 'RecyclerView' in node.attrib.get('class', '') and 'true' in node.attrib.get('scrollable', ''):
            # If the node is not unique, find the one that is larger.
            if compare_bounds_area(self.recycler_bounds, node.attrib['bounds']):
                self.recycler_node = node
                self.recycler_bounds = node.attrib['bounds']

        for child in list(node):
            self.get_filter_base_node(child, page_type)

    def check_filter(self, page_type):
        self.get_filter_base_node(self.root, page_type)
        node = self.base_node
        if node is None:
            return

        while self.retrieve_times > 0:
            if node.getparent() is not None:
                node = node.getparent()
                self.retrieve_times -= 1
            else:
                return

        parent = node.getparent()
        if parent is not None:
            delete_ind = parent.index(node) + 1
            try:
                parent.remove(list(parent)[delete_ind])
                parent.remove(list(parent)[delete_ind])
            except Exception:
                pass

        if self.recycler_node.getparent() is not None:
            self.recycler_node.getparent().remove(self.recycler_node)

    def get_route_base_node(self, node, page_type):
        page_criteria = {
            "出行方式": [("收起", 2)],
            "选择日期": [("选择日期", 5)],
            "选择出发时间": [("选择出发时间", 5)],
            "选择出发时间_taxi": [("选择出发时间", 3)]
        }

        if 'content-desc' in node.attrib:
            for pattern, retrieve_times in page_criteria.get(page_type, []):
                content_desc = node.attrib['content-desc']
                text = node.attrib['text']
                # find the specialCheck base node
                if pattern == content_desc or pattern == text:
                    # If the base node is not unique, find the one that is lower.
                    if self.base_node is None or compare_y_in_bounds(self.base_node.attrib['bounds'],
                                                                     node.attrib['bounds']):
                        self.base_node = node
                        self.retrieve_times = retrieve_times
                        break

        for child in list(node):
            self.get_route_base_node(child, page_type)

    def check_route(self, page_type):
        self.get_route_base_node(self.root, page_type)
        node = self.base_node
        if node is None:
            return

        while self.retrieve_times > 0:
            if node.getparent() is not None:
                node = node.getparent()
                self.retrieve_times -= 1
            else:
                return

        parent = node.getparent()
        for ind, child in reversed(list(enumerate(parent))):
            if child != node:
                parent.remove(child)

    def get_search_result_base_node(self, node, page_type):
        page_criteria = {
            "周边收藏": [("收藏按钮", 3)],
        }

        pattern_need_fuzzy = ["收藏按钮"]

        if 'content-desc' in node.attrib:
            for pattern, retrieve_times in page_criteria.get(page_type, []):
                content_desc = node.attrib['content-desc']
                text = node.attrib['text']
                # find the specialCheck base node
                if (pattern in pattern_need_fuzzy and (pattern in content_desc or pattern in text)) or \
                        (pattern not in pattern_need_fuzzy and (pattern == content_desc or pattern == text)):
                    # If the base node is not unique, find the one that is lower.
                    if self.base_node is None or compare_y_in_bounds(self.base_node.attrib['bounds'],
                                                                     node.attrib['bounds']):
                        self.base_node = node
                        self.retrieve_times = retrieve_times
                        break

        for child in list(node):
            self.get_search_result_base_node(child, page_type)

    def check_search_result(self, page_type):
        self.get_search_result_base_node(self.root, page_type)
        node = self.base_node
        if node is None:
            return

        while self.retrieve_times > 0:
            if node.getparent() is not None:
                node = node.getparent()
                self.retrieve_times -= 1
            else:
                return

        parent = node.getparent()
        for ind, child in reversed(list(enumerate(parent))):
            if child != node and check_bounds_intersection(child.attrib['bounds'], node.attrib['bounds']):
                for ch in child.iter():
                    if check_bounds_containing(ch.attrib['bounds'], node.attrib['bounds']):
                        ch_parent = ch.getparent()
                        ch_parent.remove(ch)


class WeiXinSpecialCheck:
    def __init__(self, xml_string, root):
        self.xml_string = xml_string
        self.root = root

    def check(self):
        page, page_type = self.check_page()
        if page == "search":
            self.base_node = None
            self.retrieve_times = 0
            self.check_search(page_type)
        elif page == "moments":
            self.check_moments_icons(page_type)
        elif page == "menu":
            self.base_node = {}
            self.retrieve_times = 0
            self.check_menu(page_type)

    def check_page(self):
        page_map = {
            "search": [
                (["排序", "类型", "时间", "范围"], "搜索-全部")
            ],
            "moments": [
                (["朋友圈", "拍照分享"], "朋友圈-全部"),
                (["轻触更换封面", "拍照分享"], "朋友圈-全部")
            ],
            "menu": [
                (["微信", "通讯录", "发现", "我"], "首页"),
            ]
        }

        for key, values in page_map.items():
            for keywords, page_type in values:
                if all(k in self.xml_string for k in keywords):
                    return key, page_type
        return None, None

    def check_moments_icons(self, page_type):
        page_criteria = {
            "朋友圈-全部": {"ImageView": "选项：点赞/评论", "RelativeLayout": "选项：广告屏蔽"}
        }

        nodes_with_attribute = self.root.xpath('//*[@NAF="true"]')
        for node in nodes_with_attribute:
            if node.attrib['class'] in page_criteria[page_type]:
                node.attrib['func-desc'] = page_criteria[page_type][node.attrib['class']]
                del node.attrib['NAF']

    def get_search_base_node(self, node, page_type):
        page_criteria = {
            "搜索-全部": [("清空", 1)]
        }

        pattern_need_fuzzy = []

        if 'content-desc' in node.attrib:
            for pattern, retrieve_times in page_criteria.get(page_type, []):
                content_desc = node.attrib['content-desc']
                text = node.attrib['text']
                # find the specialCheck base node
                if (pattern in pattern_need_fuzzy and (pattern in content_desc or pattern in text)) or \
                        (pattern not in pattern_need_fuzzy and (pattern == content_desc or pattern == text)):
                    # If the base node is not unique, find the one that is lower.
                    if self.base_node is None or compare_y_in_bounds(self.base_node.attrib['bounds'],
                                                                     node.attrib['bounds']):
                        self.base_node = node
                        self.retrieve_times = retrieve_times
                        break

        for child in list(node):
            self.get_search_base_node(child, page_type)

    def check_search(self, page_type):
        self.get_search_base_node(self.root, page_type)
        node = self.base_node
        if node is None:
            return

        while self.retrieve_times > 0:
            if node.getparent() is not None:
                node = node.getparent()
                self.retrieve_times -= 1
            else:
                return

        parent = node.getparent()
        if parent is not None:
            delete_ind = parent.index(node) + 1
            del parent[delete_ind:]

    def get_menu_base_node(self, node, page_type):
        page_criteria = {
            "首页": ["微信", "通讯录", "发现", "我"]
        }
        retrieve_times = 1

        if 'content-desc' in node.attrib:
            content_desc = node.attrib['content-desc']
            text = node.attrib['text']
            if text in page_criteria.get(page_type, []) or content_desc in page_criteria.get(page_type, []):
                if text not in self.base_node or compare_y_in_bounds(self.base_node[text].attrib['bounds'],
                                                                     node.attrib['bounds']):
                    self.base_node[text] = node
                    self.retrieve_times = retrieve_times

        for child in list(node):
            self.get_menu_base_node(child, page_type)

    def check_menu(self, page_type):
        self.get_menu_base_node(self.root, page_type)
        self.base_node = list(self.base_node.values())
        if len(self.base_node) == 0:
            return

        cur = None
        for node in self.base_node:
            if node.get("selected", "false") == "false":
                cur = node
                break

        while self.retrieve_times > 0:
            if cur.getparent() is not None:
                cur = cur.getparent()
                self.retrieve_times -= 1
            else:
                return

        parent = cur.getparent()
        view_node = None
        for node in list(parent)[0].iter():
            if "ListView" in node.attrib["class"] or "RecyclerView" in node.attrib["class"]:
                view_node = node
                break

        for node in list(view_node):
            intersect = False
            for check_node in self.base_node:
                if check_bounds_intersection(node.attrib['bounds'], check_node.attrib['bounds']):
                    intersect = True
                    break
            if intersect:
                view_node.remove(node)


class MeituanSpecialCheck:
    def __init__(self, xml_string, root):
        self.xml_string = xml_string
        self.root = root

    def check(self):
        page, page_type = self.check_page()

        self.base_node = None
        self.retrieve_times = 0
        if page == "home":
            self.check_home(page_type)
        elif page == "favourite":
            self.check_favourite(page_type)
        elif page == "search":
            self.check_search(page_type)
        # else:
        #     self.remove_overlap()

    def child_index(self, parent, node):
        # find the index of a given node in its sibling nodes
        for i, v in enumerate(list(parent)):
            if v == node:
                return i
        return -1

    def remove_children_overlap_with_bounds(self, node, overlap_bounds, current):
        for child in node:
            child_bounds = child.attrib['bounds']
            if check_bounds_intersection(child_bounds, overlap_bounds) and "EditText" not in child.attrib['class']:
                self.remove_children_overlap_with_bounds(child, overlap_bounds, current)
            else:
                child.getparent().remove(child)
                cur_parent = current.getparent()
                cur_parent.insert(self.child_index(cur_parent, current), child)
                self.queue.append(child)

    def remove_overlap(self):
        self.queue = deque([self.root])

        while self.queue:
            current = self.queue.popleft()
            # print(current.get('text', ""), current.get('content-desc', ''), current.get('bounds', ''))
            # for nodes without bounds, just go ahead
            if 'bounds' not in current.attrib:
                self.queue.extend(current.getchildren())
                continue

            current_bounds = current.attrib['bounds']
            # get siblings
            subsequent_siblings = []
            temp = current.getnext()
            while temp is not None:
                subsequent_siblings.append(temp)
                temp = temp.getnext()

            # Check overlaps with each subsequent sibling
            overlap_bounds = None
            for sibling in subsequent_siblings:
                sibling_bounds = sibling.attrib['bounds']
                if check_bounds_intersection(current_bounds, sibling_bounds):
                    overlap_bounds = sibling_bounds
                    break

            if overlap_bounds is not None:
                # Traverse children and handle overlaps
                if "EditText" not in current.attrib['class']:
                    self.remove_children_overlap_with_bounds(current, overlap_bounds, current)
                    current.getparent().remove(current)
            else:
                # No overlap, enqueue all children
                self.queue.extend(current.getchildren())

    def check_page(self):
        page_map = {
            "home": [
                (["我的", "消息", "购物车", "扫一扫"], "首页"),
            ],
            "favourite": [
                (["全部服务", "全部服务"], "全部服务"),
                (["全部地区", "全部地区"], "全部地区"),
            ],
            "search": [
                (["综合排序", "综合排序"], "综合排序"),
                (["商家品质", "价格", "营业状态"], "筛选"),
            ],
        }

        for key, values in page_map.items():
            for keywords, page_type in values:
                xml_string = self.xml_string
                check = []
                for k in keywords:
                    check.append(k in xml_string)
                    xml_string = xml_string.replace(k, "", 1)
                if all(check):
                    return key, page_type
        return None, None

    def get_home_base_node(self, node, page_type):
        page_criteria = {
            "首页": [("搜索框", 1)]
        }

        pattern_need_fuzzy = ["搜索框"]

        if 'content-desc' in node.attrib:
            for pattern, retrieve_times in page_criteria.get(page_type, []):
                content_desc = node.attrib['content-desc']
                text = node.attrib['text']
                # find the specialCheck base node
                if (pattern in pattern_need_fuzzy and (pattern in content_desc or pattern in text)) or \
                        (pattern not in pattern_need_fuzzy and (pattern == content_desc or pattern == text)):
                    # If the base node is not unique, find the one that is lower.
                    if self.base_node is None or compare_y_in_bounds(self.base_node.attrib['bounds'],
                                                                     node.attrib['bounds']):
                        self.base_node = node
                        self.retrieve_times = retrieve_times
                        break

        for child in list(node):
            self.get_home_base_node(child, page_type)

    def check_home(self, page_type):
        self.get_home_base_node(self.root, page_type)
        node = self.base_node
        if node is None:
            return

        while self.retrieve_times > 0:
            if node.getparent() is not None:
                node = node.getparent()
                self.retrieve_times -= 1
            else:
                return

        parent = node.getparent()
        for ind, child in reversed(list(enumerate(parent))):
            if child != node and check_bounds_intersection(child.attrib['bounds'], node.attrib['bounds']):
                parent.remove(child)

    def get_favourite_base_node(self, node, page_type):
        page_criteria = {
            "全部服务": [("全部服务", 3)],
            "全部地区": [("全部地区", 3)],
        }

        pattern_need_fuzzy = [""]

        if 'content-desc' in node.attrib:
            for pattern, retrieve_times in page_criteria.get(page_type, []):
                content_desc = node.attrib['content-desc']
                text = node.attrib['text']
                # find the specialCheck base node
                if (pattern in pattern_need_fuzzy and (pattern in content_desc or pattern in text)) or \
                        (pattern not in pattern_need_fuzzy and (pattern == content_desc or pattern == text)):
                    # If the base node is not unique, find the one that is lower.
                    if self.base_node is None or compare_y_in_bounds(self.base_node.attrib['bounds'],
                                                                     node.attrib['bounds']):
                        self.base_node = node
                        self.retrieve_times = retrieve_times
                        break

        for child in list(node):
            self.get_favourite_base_node(child, page_type)

    def check_favourite(self, page_type):
        self.get_favourite_base_node(self.root, page_type)
        node = self.base_node
        if node is None:
            return

        while self.retrieve_times > 0:
            if node.getparent() is not None:
                node = node.getparent()
                self.retrieve_times -= 1
            else:
                return

        parent = node.getparent()
        if parent is not None:
            delete_ind = parent.index(node) + 1
            try:
                parent.remove(list(parent)[delete_ind])
            except Exception:
                pass

    def get_search_base_node(self, node, page_type):
        page_criteria = {
            "综合排序": [("综合排序", 3)],
            "筛选": [("综合排序", 3)],
        }

        pattern_need_fuzzy = [""]

        if 'content-desc' in node.attrib:
            for pattern, retrieve_times in page_criteria.get(page_type, []):
                content_desc = node.attrib['content-desc']
                text = node.attrib['text']
                # find the specialCheck base node
                if (pattern in pattern_need_fuzzy and (pattern in content_desc or pattern in text)) or \
                        (pattern not in pattern_need_fuzzy and (pattern == content_desc or pattern == text)):
                    # If the base node is not unique, find the one that is lower.
                    if self.base_node is None or compare_y_in_bounds(node.attrib['bounds'],
                                                                     self.base_node.attrib['bounds']):
                        self.base_node = node
                        self.retrieve_times = retrieve_times
                        break

        for child in list(node):
            self.get_search_base_node(child, page_type)

    def check_search(self, page_type):
        self.get_search_base_node(self.root, page_type)
        node = self.base_node
        if node is None:
            return

        while self.retrieve_times > 0:
            if node.getparent() is not None:
                node = node.getparent()
                self.retrieve_times -= 1
            else:
                return

        parent = node.getparent()
        if parent is not None:
            delete_ind = parent.index(node) + 1
            try:
                for child in list(parent)[delete_ind:]:
                    parent.remove(child)
            except Exception:
                pass


SpecialCheck = {
    "com.autonavi.minimap": MiniMapSpecialCheck,
    "com.tencent.mm": WeiXinSpecialCheck,
    "com.sankuai.meituan": MeituanSpecialCheck,
}


import templates.seeact_screenshot_prompts as SeeActPrompts
from evaluation.definition import *
from evaluation.utils import *
from templates import *


class AutoTask():
    def __init__(self, instruction, controller, page_executor, agent, record, command_per_step, **kwargs):
        self.controller = controller
        self.page_executor = page_executor
        self.agent = agent
        self.record = record
        self.kwargs = kwargs
        self.set_system_prompt(instruction)
        self.record.command_per_step = [command_per_step]
        # pimusic and map.me need ac to fetch xml
        if "map.me" in instruction or "pimusic" in instruction:
            self.accessibility = self.controller.check_ac_survive()
        else:
            self.accessibility = False

    def set_system_prompt(self, instruction):
        self.record.history = [{
            "role": "system",
            "content": self.agent.system_prompt(instruction)
        }]

    def run_step(self, round_count):
        self.record.update_before(controller=self.controller, need_screenshot=True, ac_status=self.accessibility)
        compressed_xml_json = self.record.get_latest_xml()

        prompt = f"" if round_count == 0 else "** XML **\n"
        try:
            current_message = {"role": "user", "content": prompt + compressed_xml_json}
            if self.agent.name == "GLMModelAgent":
                current_message["current_app"] = self.controller.get_current_activity()
            rsp = self.agent.act([*self.record.history, current_message])
        except Exception as e:
            print_with_color(f"Error: {e}", "red")

        exe_res = self.page_executor(get_code_snippet(rsp))
        self.record.update_after(exe_res, rsp)
        self.record.turn_number += 1


class TextOnlyTask(AutoTask):
    def set_system_prompt(self, instruction):
        self.record.history = [{
            "role": "system",
            "content": SYSTEM_PROMPT_ANDROID_TEXT_GPT + f"\n\nTask Instruction: {instruction}"
        }]


class ScreenshotTask(TextOnlyTask):
    def run_step(self, round_count):
        self.record.update_before(controller=self.controller, need_screenshot=True, ac_status=self.accessibility,
                                  need_labeled=True)
        prompt = f"" if round_count == 0 else "** XML **\n"
        try:
            xml = self.record.get_latest_xml()
            image_path = self.record.labeled_current_screenshot_path
            current_message = self.agent.prompt_to_message(prompt, [image_path])
            rsp = self.agent.act([*self.record.history, current_message])
            
            #rsp = input("Please input the response: ")
        except Exception as e:
            import traceback
            print(traceback.print_exc())
            # print_with_color(f"Error: {e}", "red")

        exe_res = self.page_executor(get_code_snippet(rsp))
        self.record.update_after(exe_res, rsp)
        self.record.turn_number += 1

    def set_system_prompt(self, instruction):
        self.record.history = [{
            "role": "system",
            "content": SYSTEM_PROMPT_ANDROID_MLLM_DIRECT + f"\n\nTask Instruction: {instruction}"
        }]


class CogAgentTask(TextOnlyTask):
    def run_step(self, round_count):
        self.record.update_before(controller=self.controller, need_screenshot=True, ac_status=self.accessibility,
                                  need_labeled=True)
        prompt = f"" if round_count == 0 else json.dumps({"current_app": self.controller.get_current_app()},
                                                         ensure_ascii=False)
        try:
            image_path = self.page_executor.current_screenshot
            current_message = self.agent.prompt_to_message(prompt, [image_path])
            rsp = self.agent.act([*self.record.history, current_message])
        except Exception as e:
            import traceback
            print(traceback.print_exc())
            # print_with_color(f"Error: {e}", "red")

        exe_res = self.page_executor(get_code_snippet(rsp))
        self.record.update_after(exe_res, rsp)
        self.record.turn_number += 1

    def set_system_prompt(self, instruction):
        self.record.history = [{
            "role": "system",
            "content": SYSTEM_PROMPT_ANDROID_MLLM_CogAgent + f"\n\nTask Instruction: {instruction}"
        }]


class ScreenshotReactTask(ScreenshotTask):
    def set_system_prompt(self, instruction):
        self.record.history = [{
            "role": "system",
            "content": SYSTEM_PROMPT_ANDROID_MLLM_DIRECT_REACT + f"\n\nTask Instruction: {instruction}"
        }]


class ScreenSeeActTask(TextOnlyTask):

    def set_system_prompt(self, instruction):
        self.record.history = [{
            "role": "system",
            "content": SeeActPrompts.QUERY_SYSTEM_PROMPT
        }]
        self.stage_one_record = []
        self.instruction = instruction

    def run_step(self, round_count):
        self.record.update_before(controller=self.controller, need_screenshot=True, ac_status=self.accessibility,
                                  need_labeled=False)
        try:
            xml_tree = self.record.get_latest_xml_tree()
            choices_list = extract_bounds(xml_tree)
            image_path = self.page_executor.current_screenshot
            system_prompt = SeeActPrompts.QUERY_SYSTEM_PROMPT
            query_user_prompt = SeeActPrompts.QUERY_USER_PROMPT.format(
                task=self.instruction,
                previous_actions=("\n\n".join(self.stage_one_record) or "None")
            )
            query_message = self.agent.prompt_to_message(query_user_prompt, [image_path])
            referring_user_prompt = SeeActPrompts.REFERRING_USER_PROMPT.format(
                option_prompt="\n".join(f"{item['key']} | {item['value']}" for item in choices_list)
            )

            messages = [
                {"role": "system", "content": system_prompt},
                query_message,
            ]

            # Stage 1. Query
            print(">> Stage 1. Query")
            with open("monitor.log", "w") as f:
                f.write(json.dumps(messages, indent=4))
            description = self.agent.act(messages)
            print(description, end="\n\n")
            with open("monitor.log", "w") as f:
                f.write(description)
            messages.append({"role": "assistant", "content": description})
            messages.append({"role": "user", "content": referring_user_prompt})

            # Stage 2. Referring
            print(">> Stage 2. Referring")
            with open("monitor.log", "w") as f:
                f.write(json.dumps(messages, indent=4))

            referring = self.agent.act(messages)
            print(referring, end="\n\n")
            with open("monitor.log", "w") as f:
                f.write(referring)


        except Exception as e:
            import traceback
            print(traceback.print_exc())
            # print_with_color(f"Error: {e}", "red")
            # exit(1)
        referring = referring.split("Final Answer:")[-1].strip()
        exe_res = self.page_executor(get_code_snippet(referring))
        self.stage_one_record.append(description)
        self.record.update_after(exe_res, description + "\n\n==========\n\n" + referring)
        self.record.turn_number += 1


class TextOnlyReactTask(TextOnlyTask):
    def set_system_prompt(self, instruction):
        self.record.history = [{
            "role": "system",
            "content": SYSTEM_PROMPT_ANDROID_TEXT_ReAct + f"\n\nTask Instruction: {instruction}"
        }]


class TextOnlyFineTuneTask(TextOnlyTask):
    def set_system_prompt(self, instruction):
        self.record.history = [{
            "role": "system",
            "content": SYSTEM_PROMPT_ANDROID_TEXT_GLM_v1_5 + f"\n\nTask Instruction: {instruction}"
        }]

    def run_step(self, round_count):
        self.record.update_before(controller=self.controller, need_screenshot=True, ac_status=self.accessibility)
        compressed_xml_json = self.record.get_latest_xml()

        # prompt = f"" if round_count == 0 else "** XML **\n"
        try:
            app_info = f"{json.dumps({'current_app': self.controller.get_current_app()}, ensure_ascii=False)}\n"
            current_message = {"role": "user", "content": app_info + compressed_xml_json}
            rsp = self.agent.act([*self.record.history, current_message])
        except Exception as e:
            print_with_color(f"Error: {e}", "red")

        exe_res = self.page_executor(get_code_snippet(rsp))
        self.record.update_after(exe_res, rsp)
        self.record.turn_number += 1


class TextOnlyFineTuneTask_long(TextOnlyFineTuneTask):
    def set_system_prompt(self, instruction):
        self.record.history = [{
            "role": "system",
            "content": SYSTEM_PROMPT_ANDROID_TEXT_GPT + f"\n\nTask Instruction: {instruction}"
        }]


import os
import shutil
import socket
import subprocess


def find_matching_subtrees(tree, search_str):
    """
    Finds all subtrees in a given JSON-like dictionary tree where any key or
    leaf node value contains the given string. Returns a list of all matching subtrees,
    ensuring that no higher-level nodes are included unless they themselves match.

    Parameters:
    - tree (dict): The tree to search within.
    - search_str (str): The substring to search for in keys and leaf node values.

    Returns:
    - list: A list of dictionaries, each representing a matching subtree.
    """
    matched_subtrees = []

    # Helper function to recursively search through the tree
    def search_tree(current_tree):
        # Initialize a local variable to store potential matches within this subtree
        local_matches = []

        # Iterate through each key and value pair in the current tree
        for key, value in current_tree.items():
            # Check if the key itself contains the search string
            if search_str in key:
                # Directly append this subtree since the key matches
                local_matches.append({key: value})
            elif isinstance(value, dict):
                # If the value is a dictionary, recurse into it
                result = search_tree(value)
                if result:
                    # Only append if the recursion found a match
                    local_matches.extend(result)
            elif isinstance(value, str) and search_str in value:
                # If the value is a string and contains the search string, append this leaf
                local_matches.append({key: value})

        # Return any matches found in this part of the tree
        return local_matches

    # Start the search from the root of the tree
    matched_subtrees = search_tree(tree)

    return matched_subtrees


def find_subtrees_of_parents_with_key(tree, search_key):
    """
    Finds the entire subtrees for all parent nodes of any nodes containing the given key in a JSON-like dictionary tree.
    Each subtree is collected in a list.

    Parameters:
    - tree (dict): The tree to search within.
    - search_key (str): The key to search for in the tree.

    Returns:
    - list: A list of dictionaries, each representing the subtree of a parent that has a child node with the search_key.
    """
    parent_subtrees = []  # To store the subtrees of parents that contain the search_key

    # Helper function to recursively search through the tree
    def search_tree(current_tree, parent=None):
        # Iterate through each key and value pair in the current tree
        for key, value in current_tree.items():
            if search_key in key:
                if parent:
                    parent_subtrees.append({parent: current_tree})  # Capture the parent's subtree
                return True  # Found the key, mark this path as containing the key
            elif isinstance(value, dict):
                # If the value is a dictionary, recurse into it
                search_tree(value, key)  # Continue to search deeper

    # Start the recursive search from the root
    search_tree(tree)

    return parent_subtrees


def get_avd_serial_number(avd_name):
    try:
        # 获取所有连接的设备及其序列号
        result = subprocess.run(['adb', 'devices'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        devices_output = result.stdout

        # 提取设备序列号
        devices = [line.split()[0] for line in devices_output.splitlines() if 'device' in line and 'List' not in line]

        # 遍历设备，查找对应的AVD名字
        for device in devices:
            result = subprocess.run(['adb', '-s', device, 'emu', 'avd', 'name'], stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE, text=True)
            avd_output = result.stdout.replace("OK", "").strip()
            # print(avd_output.replace("OK", "").strip())

            if avd_output == avd_name:
                return device

        return None
    except Exception as e:
        print(f"Error: {e}")
        return None


def extract_bounds(node, path=""):
    result = []
    for key, value in node.items():
        current_path = key
        # 如果要展示完整路径，可以改成{path}{key}
        if isinstance(value, dict):
            result.extend(extract_bounds(value, current_path))
        elif key == "bounds":
            result.append({"key": path.strip(), "value": value})
    return result

import getpass
from evaluation.docker_utils import execute_adb_command

def execute_adb(adb_command, type="cmd", output=True, port=None):
    if type == "cmd":
        env = os.environ.copy()
        env["PATH"] = f"/Users/{getpass.getuser()}/Library/Android/sdk/platform-tools:" + env["PATH"]
        env["PATH"] = f"/Users/{getpass.getuser()}/Library/Android/sdk/tools:" + env["PATH"]
        result = subprocess.run(adb_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True,
                                executable='/bin/zsh', env=env)
        if result.returncode == 0:
            return result.stdout.strip()
        if output:
            print(f"Command execution failed: {adb_command}", "red")
            print(result.stderr, "red")
        return "ERROR"
    elif type == "docker":
        assert port is not None, "Port must be provided for docker type"
        result = execute_adb_command(port, adb_command)
        assert "result" in result, "Error in executing adb command"
        return result["result"]


def list_all_devices(type="cmd", port=None):
    adb_command = "adb devices"
    device_list = []
    result = execute_adb(adb_command, type, port)
    if result != "ERROR":
        devices = result.split("\n")[1:]
        for d in devices:
            device_list.append(d.split()[0])

    return device_list


def get_adb_device_name(avd_name=None):
    device_list = list_all_devices()
    for device in device_list:
        command = f"adb -s {device} emu avd name"
        ret = execute_adb(command, output=False)
        ret = ret.split("\n")[0]
        if ret == avd_name:
            return device
    return None


def find_free_ports(start_port=6060):
    def is_port_free(port):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            return s.connect_ex(('localhost', port)) != 0

    port = start_port
    while True:
        if is_port_free(port):
            return port
        port += 1


def clone_avd(src_avd_name, tar_avd_name, android_avd_home):
    """
    Clone the source AVD to the target AVD.

    Parameters:
    - src_avd_name: The name of the source AVD folder.
    - tar_avd_name: The name of the target AVD folder.
    - android_avd_home: The path to the .android/avd directory.

    This function copies the source AVD folder and its .ini file to a new target AVD
    and updates the paths inside the .ini files accordingly.
    """

    # Paths for source and target AVD directories and .ini files
    src_avd_dir = os.path.join(android_avd_home, src_avd_name + '.avd')
    tar_avd_dir = os.path.join(android_avd_home, tar_avd_name + '.avd')
    src_ini_file = os.path.join(android_avd_home, src_avd_name + '.ini')
    tar_ini_file = os.path.join(android_avd_home, tar_avd_name + '.ini')

    # Copy the AVD folder
    print(f"====Copying the AVD folder from {src_avd_dir} to {tar_avd_dir}====")
    print("This may take a while...")
    if not os.path.exists(tar_avd_dir):
        shutil.copytree(src_avd_dir, tar_avd_dir)

    # Copy the .ini file and modify it for the new AVD
    with open(src_ini_file, 'r') as src_ini, open(tar_ini_file, 'w') as tar_ini:
        for line in src_ini:
            tar_ini.write(line.replace(src_avd_name, tar_avd_name))

    # Update paths inside the target AVD's .ini files
    for ini_name in ['config.ini', 'hardware-qemu.ini']:
        ini_path = os.path.join(tar_avd_dir, ini_name)
        if os.path.exists(ini_path):
            with open(ini_path, 'r') as file:
                lines = file.readlines()
            with open(ini_path, 'w') as file:
                for line in lines:
                    # Update paths and AVD name/ID
                    new_line = line.replace(src_avd_name, tar_avd_name)
                    file.write(new_line)

    # Update the snapshots' hardware.ini file if it exists
    snapshots_hw_ini = os.path.join(tar_avd_dir, 'snapshots', 'default_boot', 'hardware.ini')
    if os.path.exists(snapshots_hw_ini):
        with open(snapshots_hw_ini, 'r') as file:
            lines = file.readlines()
        with open(snapshots_hw_ini, 'w') as file:
            for line in lines:
                # Update AVD name/ID
                new_line = line.replace(src_avd_name, tar_avd_name)
                file.write(new_line)

    return tar_avd_dir, tar_ini_file


from queue import Queue
import concurrent
from evaluation.auto_test import *


def task_done_callback(future, docker_instance, free_dockers):
    free_dockers.put(docker_instance)


def parallel_worker(class_, config, parallel, tasks):
    free_dockers = Queue()
    for idx in range(parallel):
        if config.docker:
            instance = Docker_Instance(config, idx)
        else:
            instance = Instance(config, idx)
        free_dockers.put(instance)

    with concurrent.futures.ThreadPoolExecutor(max_workers=parallel) as executor:
        while tasks:
            if free_dockers.empty():
                time.sleep(0.5)
                continue

            instance = free_dockers.get()
            task = tasks.pop(0)

            config_copy = copy.deepcopy(config)
            auto_class = class_(config_copy)

            future = executor.submit(auto_class.run_task, task, instance)
            future.add_done_callback(lambda fut, di=instance: task_done_callback(fut, di, free_dockers))


import importlib
import os
from dataclasses import dataclass
from typing import Optional

import yaml


class AppConfig:
    def __init__(self, file_path, output_dir=None):
        self.file_path = file_path
        self.data = None
        self.metrics = {}
        self.task_name = {}
        self.metrics_type = {}
        self.command_per_step = {}
        self.output_dir = output_dir
        self.load_params()

    def load_params(self):
        try:
            with open(self.file_path, 'r') as file:
                self.data = yaml.safe_load(file)
                self.APP = self.data.get('APP')
                self.package = self.data.get('package')
                if 'tasks' in self.data:
                    for task in self.data['tasks']:
                        func_name = task.get('metric_func')
                        task_id = task.get('task_id')
                        metric_type = task.get('metric_type')
                        if func_name:
                            app_module_name = func_name.split('.')[-1]
                            module = importlib.import_module(f'evaluation.tasks.{app_module_name}')
                            if hasattr(module, 'function_map') and task_id in module.function_map:
                                task['metric_func'] = module.function_map[task_id]
                                self.metrics[task_id] = task['metric_func']
                                self.metrics_type[task_id] = metric_type
                                self.task_name[task_id] = task.get('task')
                                if task.get("adb_query"):
                                    self.command_per_step[task_id] = task.get("adb_query")
                            else:
                                print(f"No valid function mapped for {task_id}")
                                task['metric_func'] = None
        except FileNotFoundError:
            print("Error: The file was not found.")
        except yaml.YAMLError as exc:
            print(f"Error in YAML file formatting: {exc}")
        except Exception as e:
            import traceback
            print(traceback.print_exc())

    def get_tasks(self):
        if self.data:
            return self.data.get('tasks', [])
        return []

    def get_metrics(self):
        return self.metrics


class AppConfig_Sample:
    def __init__(self, file_path, output_dir=None):
        self.file_path = file_path
        self.data = None
        self.task_name = {}
        self.output_dir = output_dir
        self.load_params()

    def load_params(self):
        try:
            with open(self.file_path, 'r') as file:
                self.data = yaml.safe_load(file)
                self.APP = self.data.get('APP')
                self.package = self.data.get('package')
                if 'tasks' in self.data:
                    for task in self.data['tasks']:
                        task_id = task.get('task_id')
                        self.task_name[task_id] = task.get('task')
        except FileNotFoundError:
            print("Error: The file was not found.")
        except yaml.YAMLError as exc:
            print(f"Error in YAML file formatting: {exc}")
        except Exception as e:
            import traceback
            print(traceback.print_exc())

    def get_tasks(self):
        if self.data:
            return self.data.get('tasks', [])
        return []


@dataclass
class TaskConfig:
    save_dir: str
    max_rounds: int
    mode: Optional[float] = None
    request_interval: Optional[float] = None
    task_id: Optional[str] = None
    avd_name: Optional[str] = None
    avd_log_dir: Optional[str] = None
    avd_base: Optional[str] = None
    android_sdk_path: Optional[str] = None
    is_relative_bbox: Optional[bool] = False
    docker: Optional[bool] = False
    docker_args: Optional[dict] = None
    sample: Optional[bool] = False
    show_avd: Optional[bool] = False
    version: Optional[str] = None

    def subdir_config(self, subdir: str):
        new_config = self.__dict__.copy()
        new_config["save_dir"] = os.path.join(self.save_dir, subdir)
        # new_config["task_id"] = task_id
        return TaskConfig(**new_config)

    def add_config(self, config):
        new_config = self.__dict__.copy()
        for key, values in config.items():
            new_config[key] = values
        return TaskConfig(**new_config)


import datetime
import time
from evaluation.configs import TaskConfig
from evaluation.docker_utils import create_docker_container, execute_command_in_container, remove_docker_container, \
    start_avd, stop_avd
from evaluation.evaluation import *
from evaluation.utils import *
from page_executor import TextOnlyExecutor
from page_executor.simple_vision_executor import VisionExecutor
from recorder import JSONRecorder
from templates import *
from templates.packages import find_package


class Instance():
    def __init__(self, config, idx = 0):
        self.idx = str(idx)
        self.type = "cmd"
        self.config = config
        self.container_id = None
        self.docker_port_local = None
        self.avd_name = None
        self.tar_avd_dir = None
        self.tar_ini_file = None
        self.initialize_worker()

    def initialize_worker(self):
        sdk_path = self.config.avd_base
        src_avd_name = self.config.avd_name
        self.avd_name = f"{src_avd_name}_{self.idx}"
        self.tar_avd_dir, self.tar_ini_file = clone_avd(src_avd_name, self.avd_name, sdk_path)

    def initialize_single_task(self):
        avd_name = self.avd_name
        print_with_color(f"Starting Android Emulator with AVD name: {avd_name}", "blue")
        if not os.path.exists(self.config.avd_log_dir):
            os.makedirs(self.config.avd_log_dir, exist_ok=True)
        out_file = open(os.path.join(self.config.avd_log_dir, 'emulator_output.txt'), 'a')

        if self.config.show_avd:
            emulator_process = subprocess.Popen(["emulator", "-avd", avd_name, "-no-snapshot-save"], stdout=out_file,
                                                stderr=out_file)
        else:
            emulator_process = subprocess.Popen(
                ["emulator", "-avd", avd_name, "-no-snapshot-save", "-no-window", "-no-audio"], stdout=out_file,
                stderr=out_file)
        print_with_color(f"Waiting for the emulator to start...", "blue")
        while True:
            try:
                device = get_adb_device_name(avd_name)
            except:
                continue
            if device is not None:
                break
        # TODO: fix open emulator bug here
        print("Device name: ", device)
        print("AVD name: ", avd_name)

        while True:
            boot_complete = f"adb -s {device} shell getprop init.svc.bootanim"
            boot_complete = execute_adb(boot_complete, output=False)
            if boot_complete == 'stopped':
                print_with_color("Emulator started successfully", "blue")
                break
            time.sleep(1)
        time.sleep(1)
        self.emulator_process = emulator_process
        self.out_file = out_file
        device_list = list_all_devices()
        if len(device_list) == 1:
            device = device_list[0]
            print_with_color(f"Device selected: {device}", "yellow")
        else:
            device = get_avd_serial_number(avd_name)
        return device

    def stop_single_task(self):
        print_with_color("Stopping Android Emulator...", "blue")
        self.emulator_process.terminate()

        while True:
            try:
                device = get_adb_device_name(self.config.avd_name)
                command = f"adb -s {device} reboot -p"
                ret = execute_adb(command, output=False)
                self.emulator_process.terminate()
            except:
                device = None
            if device is None:
                print_with_color("Emulator stopped successfully", "blue")
                break
            time.sleep(1)
        self.out_file.close()

    def __del__(self):
        if self.tar_avd_dir is not None:
            shutil.rmtree(self.tar_avd_dir)
        if self.tar_ini_file is not None:
            os.remove(self.tar_ini_file)
        try:
            self.emulator_process.terminate()
        except:
            pass
        try:
            self.out_file.close()
        except:
            pass


class Docker_Instance(Instance):
    def __init__(self, config, idx = 0):
        self.idx = idx
        self.config = config
        self.container_id = None
        self.docker_port_local = None
        self.initialize_worker(config)

    def initialize_worker(self, config):
        self.config = config
        print_with_color(f"Starting Android Emulator in docker with AVD name: {config.avd_name}", "blue")
        docker_port_local = find_free_ports(start_port=6060 + self.idx)
        self.docker_port_local = docker_port_local
        print(f"Local port: {docker_port_local}")



    def initialize_single_task(self,config):
        docker_image_name = config.docker_args.get("image_name")
        docker_port = config.docker_args.get("port")
        container_id = create_docker_container(docker_image_name, docker_port, self.docker_port_local)

        # TODO: python location should be configurable
        command = "/usr/local/bin/python adb_client.py > server.txt 2>&1"
        execute_command_in_container(container_id, command)
        execute_command_in_container(container_id, command)
        self.container_id = container_id
        time.sleep(3)

        avd_name = config.avd_name
        result = start_avd(self.docker_port_local, avd_name)
        device = result.get("device")
        print("Device name: ", device)
        print("AVD name: ", avd_name)

        execute_command_in_container(self.container_id, f"mkdir -p {config.task_dir}")
        execute_command_in_container(self.container_id, f"mkdir -p {config.trace_dir}")
        execute_command_in_container(self.container_id, f"mkdir -p {config.screenshot_dir}")
        execute_command_in_container(self.container_id, f"mkdir -p {config.xml_dir}")
        time.sleep(10)
        return device

    def stop_single_task(self):
        print_with_color("Stopping Android Emulator in docker...", "blue")
        remove_docker_container(self.container_id)
        #stop_avd(self.docker_port_local, self.config.avd_name)
        print_with_color("Emulator stopped successfully", "blue")

    def __del__(self):
        try:
            if self.container_id is not None:
                remove_docker_container(self.container_id)
        except:
            pass


class AutoTest():
    def __init__(self, config: TaskConfig) -> None:
        self.config = config

    def prepare_for_task(self):
        os.makedirs(self.config.save_dir, exist_ok=True)
        self.config.task_dir = os.path.join(self.config.save_dir, self.config.task_name)
        self.config.log_path = os.path.join(self.config.task_dir, f"log_explore_{self.config.task_name}.jsonl")
        self.config.trace_dir = os.path.join(self.config.task_dir, 'traces')
        self.config.screenshot_dir = os.path.join(self.config.task_dir, 'Screen')
        self.config.xml_dir = os.path.join(self.config.task_dir, 'xml')
        if not os.path.exists(self.config.task_dir):
            os.mkdir(self.config.task_dir)
        os.makedirs(self.config.trace_dir, exist_ok=True)
        os.makedirs(self.config.screenshot_dir, exist_ok=True)
        os.makedirs(self.config.xml_dir, exist_ok=True)

    def start_emulator(self, instance):
        if self.config.docker:
            type = "docker"
        else:
            type = "cmd"
        device = instance.initialize_single_task(self.config)

        self.controller = AndroidController(device, type, instance)
        self.controller.run_command("adb root")
        self.controller.run_command("adb emu geo fix -122.156 37.438")
        if "map.me" not in self.instruction:
            self.controller.run_command("adb shell date \"2024-05-10 12:00:00\"")
        #self.controller.run_command("adb install /raid/xuyifan/data/ADBKeyboard.apk")
        #time.sleep(5)
        #self.controller.run_command("adb shell ime set com.android.adbkeyboard/.AdbIME")

        if self.config.mode == "in_app":
            self.controller.launch_app(find_package(self.app))
            time.sleep(15)

    def run_serial(self, tasks):
        if self.config.docker:
            instance = Docker_Instance(self.config)
        else:
            instance = Instance(self.config)
        for task in tasks:
            self.run_task(task, instance)

    def run_task(self, task_dict, instance):
        task_id = task_dict['task_id']
        demo_timestamp = int(time.time())
        self.config.task_name = task_id + "_" + datetime.datetime.fromtimestamp(demo_timestamp).strftime(
            "%Y-%m-%d_%H-%M-%S")
        # print(f"{task_id} running in {instance.container_id}")

        self.instruction = task_dict['task_instruction']
        self.app = task_dict['app']
        if not self.config.sample:
            self.command_per_step = task_dict['command_per_step']
        else:
            self.command_per_step = None
        self.prepare_for_task()
        self.start_emulator(instance)
        self.llm_agent = task_dict["agent"]

        print_with_color(self.instruction, "green")
        round_count = 0
        task_complete = False

        self.page_executor = self.get_executor()

        self.record = JSONRecorder(id=self.config.task_name, instruction=self.instruction,
                                   page_executor=self.page_executor,
                                   config=self.config)
        task_agent = self.get_agent()
        while round_count < self.config.max_rounds:
            try:
                round_count += 1
                print_with_color(f"Round {round_count}", "yellow")
                task_agent.run_step(round_count)
                print_with_color("Thinking about what to do in the next step...", "yellow")
                time.sleep(self.config.request_interval)

                if task_agent.page_executor.is_finish:
                    print_with_color(f"Completed successfully.", "yellow")
                    task_agent.page_executor.update_screenshot(prefix="end")
                    task_complete = True
                    break
            except Exception as e:
                import traceback
                print(traceback.print_exc())
                print_with_color(f"Error: {e}", "red")
                break

        instance.stop_single_task()
        if task_complete:
            print_with_color(f"Completed successfully. {round_count} rounds generated.", "green")
        elif round_count == self.config.max_rounds:
            print_with_color(
                f"Finished due to reaching max rounds. {round_count} rounds generated.",
                "yellow")
        else:
            print_with_color(f"Finished unexpectedly. {round_count} rounds generated.", "red")

    def get_agent(self):
        return NotImplementedError

    def get_executor(self):
        return NotImplementedError


class TextOnlyMobileTask_AutoTest(AutoTest):
    def get_agent(self):
        task_agent = TextOnlyTask(self.instruction, self.controller, self.page_executor, self.llm_agent, self.record,
                                  self.command_per_step)
        return task_agent

    def get_executor(self):
        return TextOnlyExecutor(self.controller, self.config)


class ScreenshotMobileTask_AutoTest(TextOnlyMobileTask_AutoTest):
    def get_agent(self):
        task_agent = ScreenshotTask(self.instruction, self.controller, self.page_executor, self.llm_agent, self.record,
                                    self.command_per_step)
        return task_agent

    def get_executor(self):
        return VisionExecutor(self.controller, self.config)


class ScreenshotMobileTask_AutoTest_for_show(ScreenshotMobileTask_AutoTest):
    def start_emulator_cmd(self, avd_name):
        print_with_color(f"Starting Android Emulator with AVD name: {avd_name}", "blue")
        while True:
            try:
                device = get_adb_device_name(avd_name)
            except:
                continue
            if device is not None:
                break
        # TODO: fix open emulator bug here
        print("Device name: ", device)
        print("AVD name: ", avd_name)


        self.emulator_process = None
        self.out_file = None
        device_list = list_all_devices()
        if len(device_list) == 1:
            device = device_list[0]
            print_with_color(f"Device selected: {device}", "yellow")
        else:
            device = get_avd_serial_number(avd_name)
        return device

    def stop_emulator(self, instance):
        print_with_color("Skip Stopping Android Emulator...", "blue")



class CogAgentTask_AutoTest(TextOnlyMobileTask_AutoTest):
    def get_agent(self):
        task_agent = CogAgentTask(self.instruction, self.controller, self.page_executor, self.llm_agent, self.record,
                                  self.command_per_step)
        return task_agent

    def get_executor(self):
        return VisionExecutor(self.controller, self.config)


class ScreenSeeActTask_AutoTest(TextOnlyMobileTask_AutoTest):
    def get_agent(self):
        task_agent = ScreenSeeActTask(self.instruction, self.controller, self.page_executor, self.llm_agent,
                                      self.record, self.command_per_step)
        return task_agent


class ScreenReactTask_AutoTest(TextOnlyMobileTask_AutoTest):
    def get_agent(self):
        task_agent = ScreenshotReactTask(self.instruction, self.controller, self.page_executor, self.llm_agent,
                                         self.record, self.command_per_step)
        return task_agent

    def get_executor(self):
        return VisionExecutor(self.controller, self.config)


class TextOnlyReactTask_AutoTest(TextOnlyMobileTask_AutoTest):
    def get_agent(self):
        task_agent = TextOnlyReactTask(self.instruction, self.controller, self.page_executor, self.llm_agent,
                                       self.record, self.command_per_step)
        return task_agent


class TextOnlyFineTuneTask_AutoTest(TextOnlyMobileTask_AutoTest):
    def get_agent(self):
        task_agent = TextOnlyFineTuneTask(self.instruction, self.controller, self.page_executor, self.llm_agent,
                                          self.record, self.command_per_step)
        return task_agent


class TextOnlyFineTuneTask_long_AutoTest(TextOnlyMobileTask_AutoTest):
    def get_agent(self):
        task_agent = TextOnlyFineTuneTask_long(self.instruction, self.controller, self.page_executor, self.llm_agent,
                                               self.record, self.command_per_step)
        return task_agent


import sys
import re
from openai import OpenAI
from zhipuai import ZhipuAI
from agent import *
from utils_mobile.and_controller import AndroidController, list_all_devices
from utils_mobile.utils import print_with_color


def encode_image(image_path):
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode('utf-8')


def get_code_snippet(content):
    code = re.search(r'```.*?([\s\S]+?)```', content)
    if code is None:
        return content
        # print(content)
        # raise RuntimeError("No available code found!")
    code = code.group(1).strip()
    code = code.split("\n")[-1]

    return code


def handle_backoff(details):
    print(f"Retry {details['tries']} for Exception: {details['exception']}")


def handle_giveup(details):
    print(
        "Backing off {wait:0.1f} seconds afters {tries} tries calling fzunction {target} with args {args} and kwargs {kwargs}"
        .format(**details))


def detect_answer(question: str, model_answer: str, standard_answer: str, args):
    # print(f"Question: {question}\nModel Answer: {model_answer}\nStandard Answer: {standard_answer}")
    detect_prompt = f"You need to judge the model answer is True or False based on Standard Answer we provided. You should whether answer [True] or [False]. \n\nQuestion: {question}\n\nModel Answer: {model_answer}\n\nStandard Answer: {standard_answer}"
    call_time = 0
    while call_time <= 5:
        call_time += 1
        if args.judge_model == "glm4":
            return_message = get_completion_glm(prompt=detect_prompt, glm4_key=api_key)
        elif "gpt" in args.judge_model:
            return_message = get_completion_gpt(prompt=detect_prompt, model_name = args.judge_model)
        if "True" in return_message:
            return True
        elif "False" in return_message:
            return False


@backoff.on_exception(backoff.expo,
                      Exception,  # 捕获所有异常
                      max_tries=5,
                      on_backoff=handle_backoff,  # 指定重试时的回调函数
                      giveup=handle_giveup)  # 指定放弃重试时的回调函数
def get_completion_glm(prompt, glm4_key):
    client = ZhipuAI(api_key=glm4_key)
    response = client.chat.completions.create(
        model="glm-4",  # 填写需要调用的模型名称
        messages=[
            {"role": "user", "content": prompt},
        ],
    )
    return response.choices[0].message.content

@backoff.on_exception(backoff.expo,
                      Exception,  # 捕获所有异常
                      max_tries=5,
                      on_backoff=handle_backoff,  # 指定重试时的回调函数
                      giveup=handle_giveup)  # 指定放弃重试时的回调函数
def get_completion_gpt(prompt, model_name):
    client = OpenAI()
    messages = [{
            "role": "user",
            "content": prompt
        }]
    r = client.chat.completions.create(
        model=model_name,
        messages=messages,
        max_tokens=512,
        temperature=0.001
    )
    return r.choices[0].message.content


def get_mobile_device():
    device_list = list_all_devices()
    if not device_list:
        print_with_color("ERROR: No device found!", "red")
        sys.exit()
    print_with_color(f"List of devices attached:\n{str(device_list)}", "yellow")
    if len(device_list) == 1:
        device = device_list[0]
        print_with_color(f"Device selected: {device}", "yellow")
    else:
        print_with_color("Please choose the Android device to start demo by entering its ID:", "blue")
        device = input()

    controller = AndroidController(device)
    width, height = controller.get_device_size()
    if not width and not height:
        print_with_color("ERROR: Invalid device size!", "red")
        sys.exit()
    print_with_color(f"Screen resolution of {device}: {width}x{height}", "yellow")

    return controller


def get_mobile_device_and_name():
    device_list = list_all_devices()
    if not device_list:
        print_with_color("ERROR: No device found!", "red")
        sys.exit()
    print_with_color(f"List of devices attached:\n{str(device_list)}", "yellow")
    if len(device_list) == 1:
        device = device_list[0]
        print_with_color(f"Device selected: {device}", "yellow")
    else:
        print_with_color("Please choose the Android device to start demo by entering its ID:", "blue")
        device = input()

    controller = AndroidController(device)
    width, height = controller.get_device_size()
    if not width and not height:
        print_with_color("ERROR: Invalid device size!", "red")
        sys.exit()
    print_with_color(f"Screen resolution of {device}: {width}x{height}", "yellow")

    return controller, device


from collections import defaultdict
from typing import Generic, TypeVar

import jsonlines
import numpy as np

from evaluation.definition import *
from evaluation.utils import *
from utils_mobile.utils import get_compressed_xml


T_INPUT = TypeVar('T_INPUT')
T_OUTPUT = TypeVar('T_OUTPUT')
T_TARGET = TypeVar('T_TARGET')





def dump_xml(xml_path):
    xml_compressed = get_compressed_xml(xml_path)
    if xml_compressed is None:
        return None
    return json.loads(xml_compressed)


def calculate_partial_acc(dict):
    tt = 0
    acc = 0
    for key, values in dict.items():
        if key != "complete" and key != "judge_page":
            tt += 1
            if values:
                acc += 1
    if tt == 0:
        return 0
    return acc / tt


def compute_image_similarity(image_paths):
    if len(image_paths) <= 2:
        return [], 0
    image_paths = image_paths[:-1]
    image_list = []
    for path in image_paths:
        try:
            image_list.append(np.array(Image.open(path)))
        except Exception as e:
            image_list.append(np.zeros((1, 1, 3)))

    simi = []
    sum_simi = 0

    for i in range(len(image_list) - 1):
        try:
            either_not_255 = np.logical_or(np.not_equal(image_list[i], 255), np.not_equal(image_list[i + 1], 255))
            values_match = np.equal(image_list[i], image_list[i + 1])
            match_in_either_not_255 = np.logical_and(values_match, either_not_255)

            similarity = np.sum(match_in_either_not_255.astype(np.float32)) / np.sum(either_not_255.astype(np.float32))
            simi.append(float(similarity))

            if similarity > 0.999:
                sum_simi += 1
        except Exception as e:
            simi.append(0)

    return simi, sum_simi


class Evaluation_Task(Generic[T_INPUT, T_OUTPUT, T_TARGET]):
    def __init__(self, config, traces, args, detail=False):
        self.config = config
        self.args = args
        assert self.config is not None, "Task config is required."
        self.name = self.config.APP
        self.task_list = self.config.get_tasks()
        self.metrics = self.config.get_metrics()
        self.traces = traces
        self.all_result = []
        self.show_detail_metrics = detail
        self.total_tasks_num = 138  # TODO: change this number if the number of all tasks changes
        if self.show_detail_metrics:
            self.additional_metrics = defaultdict(dict)
            with open("evaluation/tasks/human_ground_turth/ground_truth_length.json") as f:
                self.length_gt = json.load(f)

    def evaluate(self) -> Dict[str, Any]:
        for task in self.task_list:
            try:
                assert task.get('task_id') in self.metrics, f"No valid function mapped for {task.get('task_id')}"
            except:
                print(f"No valid function mapped for {task.get('task_id')}")
                continue
            task_id = task.get('task_id')
            metric = self.metrics[task_id](self.args)
            final_result = {"complete": False}
            if task_id not in self.traces:
                print(f"Trace for task '{task_id}' not found.")
                continue
            if not os.path.exists(self.traces[task_id]['trace_file']):
                print(f"Trace file not found: {self.traces[task_id]['trace_file']}")
                continue
            all_operation_trace = []
            all_images = []
            agent_name = self.traces[task_id]["trace_root"].split("/")[-2]

            num_repeat = 0
            last_action = None

            with jsonlines.open(self.traces[task_id]['trace_file']) as reader:
                trace_root = self.traces[task_id]['trace_root']
                for line in reader:
                    current_action = json.dumps(line["parsed_action"])
                    if current_action == last_action:
                        num_repeat += 1
                        if num_repeat > 5:
                            break
                    else:
                        num_repeat = 0
                        last_action = current_action

                    if line["ac_xml"] is None:
                        xml_path = line["xml"]
                    else:
                        xml_path = line["ac_xml"]
                    xml_path = os.path.join(self.traces[task_id]['xml_path'], xml_path.split("/")[-1])
                    metric_type = self.config.metrics_type[task.get('task_id')]
                    if not os.path.exists(xml_path):
                        print(f"XML file not found: {xml_path}")
                        continue
                    xml_compressed = dump_xml(xml_path)
                    try:
                        result = metric.judge(xml_compressed, line)
                        all_operation_trace.append(line)
                        image_path = line["image"]
                        image_filename = image_path.split("/")[-1]
                        image_path = os.path.join(trace_root, "Screen", image_filename)
                        if image_path.split('/')[-4] != agent_name:
                            image_path = image_path.replace(image_path.split('/')[-4], agent_name)
                        all_images.append(image_path)
                        if "judge_page" in result.keys() and not result.get("judge_page"):
                            continue
                        else:
                            final_result = result
                    except:
                        result = {"complete": False}
                        import traceback
                        traceback.print_exc()
                        print(f"Error in judging {task_id} at line {line}")

            if self.show_detail_metrics:
                self.add_metrics(task, all_operation_trace, all_images, final_result)

            self.save_single(task, final_result)
        self.print_metric()

    def add_metrics(self, task, traces, all_images, final_result):
        # Reversed Redundancy Ratio
        length = len(traces)
        if not final_result.get("complete") or length == 0:
            RRR = None
        else:
            RRR = self.length_gt[task["task_id"]] / length if task["task_id"] in self.length_gt else None
        self.additional_metrics["RRR"][task["task_id"]] = RRR

        # Final Task Ratio
        # if traces[-1]["parsed_action"]["operation"] == "finish":
        # self.additional_metrics["final_task_ratio"][task["task_id"]] = 1
        # else:
        # self.additional_metrics["final_task_ratio"][task["task_id"]] = 0

        # Reasonable Operation Ratio
        simi, sum_simi = compute_image_similarity(all_images)
        if length - 1 == 0:
            self.additional_metrics["reasonable_operation_ratio"][task["task_id"]] = 1
        else:
            self.additional_metrics["reasonable_operation_ratio"][task["task_id"]] = 1 - (sum_simi / (length - 1))

    def save_single(self, task, result):
        save_dir = self.config.output_dir
        with jsonlines.open(os.path.join(save_dir, "results.jsonl"), mode='a') as writer:
            output_dict = {}
            output_dict["task_id"] = task.get('task_id')
            output_dict["task"] = self.config.task_name[task.get('task_id')]
            output_dict["metric_type"] = self.config.metrics_type[task.get('task_id')]
            output_dict["result"] = result
            if self.show_detail_metrics:
                for metric, metric_value in self.additional_metrics.items():
                    output_dict[metric] = metric_value[task.get('task_id')]
            # print(f"Task '{task.get('task_id')}' evaluated.")
            # print(f"Result: {result}")
            writer.write(output_dict)
            self.all_result.append(output_dict)

    def print_metric(self):
        complete_metric = defaultdict(list)
        partial_metric = defaultdict(list)

        for result in self.all_result:
            app = result["task_id"].split("_")[0]
            if result["result"].get("complete") == True:
                complete_metric[app].append(1)
                partial_metric[app].append(1)
            else:
                complete_metric[app].append(0)
                partial_metric[app].append(calculate_partial_acc(result["result"]))
        for key, values in complete_metric.items():
            with jsonlines.open(os.path.join(self.config.output_dir, "total.jsonl"), mode='a') as writer:
                output_dir = {"App": key, "Acc": sum(values) / len(values), "Total": len(values),
                              "Complete_Correct": sum(values), "Sum_Partial_Acc": sum(partial_metric[key]),
                              "Partial_Acc": sum(partial_metric[key]) / len(values)}
                if self.show_detail_metrics:
                    for metric, metric_value in self.additional_metrics.items():
                        values_set = [i for i in metric_value.values() if i is not None]
                        try:
                            output_dir[metric] = sum(values_set) / len(values_set)
                            output_dir["Sum_" + metric] = sum(values_set)
                        except:
                            output_dir[metric] = 0
                            output_dir["Sum_" + metric] = 0
                writer.write(output_dir)


class SingleTask():
    def __init__(self, args):
        self.metric_type = ""
        self.final_ground_truth = None

    def check_answer(self, line):
        if line["parsed_action"].get("action") != "finish" and line["parsed_action"].get("type") != "finish":
            return False
        if self.final_ground_truth is None:
            return False

        try:
            question = line["target"]
            if "kwargs" in line["parsed_action"]:
                model_answer = line["parsed_action"]["kwargs"]["message"]
            else:
                model_answer = line["parsed_action"]["input"]
            ground_truth = self.final_ground_truth
            if detect_answer(question, model_answer, ground_truth, args):
                return True
            else:
                return False
        except:
            return False

    def judge_page(self, xml_compressed_tree):
        return True

    def judge(self, xml_compressed_tree, line):
        raise NotImplementedError

    def save_answer(self, answer):
        self.final_ground_truth = answer


import json
import subprocess
import time

import requests


def run_docker_command(command):
    full_command = f"{command}"
    result = subprocess.run(full_command, shell=True, capture_output=True, text=True)
    return result.returncode, result.stdout, result.stderr


def create_docker_container(docker_image_name, docker_port, docker_local_port):
    command = f"docker run -itd --privileged  -p {docker_local_port}:{docker_port} {docker_image_name}"
    returncode, stdout, stderr = run_docker_command(command)
    time.sleep(10)
    if returncode == 0:
        container_id = stdout.strip()
        # TODO: add to final docker
        command = f"docker cp adb_client.py {container_id}:/"
        returncode, stdout, stderr = run_docker_command(command)
        return container_id
    else:
        print(returncode, stdout, stderr)
        raise Exception(f"Error creating container: {stderr}")


def execute_command_in_container(container_id, command):
    full_command = f"docker exec -d {container_id} /bin/bash -c \"{command}\""
    returncode, stdout, stderr = run_docker_command(full_command)
    if returncode == 0:
        return stdout
    else:
        print(returncode, stdout, stderr)
        raise Exception(f"Error executing command: {stderr}")


def remove_docker_container(container_id):
    stop_command = f"docker stop {container_id}"
    remove_command = f"docker rm {container_id}"

    run_docker_command(stop_command)
    returncode, stdout, stderr = run_docker_command(remove_command)
    if returncode == 0:
        return f"Container {container_id} has been removed."
    else:
        raise Exception(f"Error removing container: {stderr}")


def cp_docker(local_path, docker_path, container_id, local_to_docker=True):
    if local_to_docker:
        command = f"docker cp {local_path} {container_id}:{docker_path}"
        returncode, stdout, stderr = run_docker_command(command)
        if returncode == 0:
            return stdout
        else:
            print(returncode, stdout, stderr)
            raise Exception(f"Error copying file: {stderr}")
    else:
        command = f"docker cp {container_id}:{docker_path} {local_path}"
        returncode, stdout, stderr = run_docker_command(command)
        if returncode == 0:
            return stdout
        else:
            print(returncode, stdout, stderr)
            raise Exception(f"Error copying file: {stderr}")


def send_post_request(url, headers, data, max_attempts=10, retry_interval=3, timeout=120):
    attempts = 0
    while attempts < max_attempts:
        try:
            response = requests.post(url, headers=headers, data=json.dumps(data), timeout=timeout)
            return response.json()
        except Exception as e:
            print(f"Error occurred: {e}")
            attempts += 1
            if attempts < max_attempts:
                print(f"Timeout occurred. Retrying... Attempt {attempts}/{max_attempts}")
                print(data)
                time.sleep(retry_interval)
            else:
                return {'error': f'Timeout occurred after {max_attempts} attempts'}


def start_avd(port, avd_name):
    print(f"Starting AVD: {avd_name}")
    url = f'http://localhost:{port}/start'
    headers = {'Content-Type': 'application/json'}
    data = {'avd_name': avd_name}
    return send_post_request(url, headers, data)


def execute_adb_command(port, command):
    # print(f"Executing ADB command: {command}")
    url = f'http://localhost:{port}/execute'
    headers = {'Content-Type': 'application/json'}
    data = {'command': command}
    return send_post_request(url, headers, data)


def stop_avd(port, avd_name):
    url = f'http://localhost:{port}/stop'
    headers = {'Content-Type': 'application/json'}
    data = {'avd_name': avd_name}
    return send_post_request(url, headers, data)






from fuzzywuzzy import fuzz

from evaluation.task import *


def get_type_task_ddl(xml_compressed_tree, doing):
    assert doing in ["create", "edit"]
    type = task = ddl = None

    try:
        TV_list = find_matching_subtrees(xml_compressed_tree, "TextView ;; ;;")
        type, ddl, _ = (list(TV.keys())[0].split(";;")[-1].strip() for TV in TV_list)
    except:
        pass

    if doing == "create":
        try:
            task = find_matching_subtrees(xml_compressed_tree, "EditText ;click")[0]
            task = list(task.keys())[0].split(";;")[-1].strip()
        except:
            pass
    else:
        try:
            task = find_matching_subtrees(xml_compressed_tree, "TextView ;click")[1]
            task = list(task.keys())[0].split(";;")[-1].strip()
        except:
            pass

    return type, task, ddl


class SingleTask_tasks_1(SingleTask):

    def judge_page(self, line):
        if line["parsed_action"]["action"] != "finish":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "2 important and urgent tasks"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_tasks_2(SingleTask):

    def judge_page(self, line):
        if line["parsed_action"]["action"] != "finish":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "12 May 2024, 03:45 PM"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_tasks_3(SingleTask):

    def judge_page(self, line):
        if line["parsed_action"]["action"] != "finish":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "1 item is completed"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_tasks_4(SingleTask):
    target = "Prepare materials for next week's meeting"

    def judge_page(self, xml_compressed_tree):
        type, task, ddl = get_type_task_ddl(xml_compressed_tree, "create")
        return type and task and ddl

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        type, task, ddl = get_type_task_ddl(xml_compressed_tree, "create")
        judge_type = judge_task = judge_ddl = False
        judge_type = type == "IMPORTANT URGENT"
        judge_task = fuzz.partial_ratio(self.target, task) > 85
        judge_ddl = ddl == "12 May 2024, 10:00 AM"

        return {
            "judge_page": True,
            "1": judge_type,
            "2": judge_task,
            "3": judge_ddl,
            "complete": judge_type & judge_task & judge_ddl
        }


class SingleTask_tasks_5(SingleTask):
    target = "Reply to client emails"

    def judge_page(self, xml_compressed_tree):
        type, task, ddl = get_type_task_ddl(xml_compressed_tree, "create")
        return type and task and ddl

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        type, task, ddl = get_type_task_ddl(xml_compressed_tree, "create")
        judge_type = judge_task = judge_ddl = False
        judge_type = type == "IMPORTANT URGENT"
        judge_task = fuzz.partial_ratio(self.target, task) > 85
        judge_ddl = ddl == "10 May 2024, 05:00 PM"

        return {
            "judge_page": True,
            "1": judge_type,
            "2": judge_task,
            "3": judge_ddl,
            "complete": judge_type & judge_task & judge_ddl
        }


class SingleTask_tasks_6(SingleTask):
    target = "Update company website content"

    def judge_page(self, xml_compressed_tree):
        type, task, ddl = get_type_task_ddl(xml_compressed_tree, "create")
        return type and task and ddl

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        type, task, ddl = get_type_task_ddl(xml_compressed_tree, "create")
        judge_type = judge_task = judge_ddl = False
        judge_type = type == "IMPORTANT NOT URGENT"
        judge_task = fuzz.partial_ratio(self.target, task) > 85
        judge_ddl = "01 Jun 2024" in ddl

        return {
            "judge_page": True,
            "1": judge_type,
            "2": judge_task,
            "3": judge_ddl,
            "complete": judge_type & judge_task & judge_ddl
        }


class SingleTask_tasks_7(SingleTask):
    target = "Learn a new programming language"

    def judge_page(self, xml_compressed_tree):
        type, task, ddl = get_type_task_ddl(xml_compressed_tree, "create")
        return type and task and ddl

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        type, task, ddl = get_type_task_ddl(xml_compressed_tree, "create")
        judge_type = judge_task = judge_ddl = False
        judge_type = type == "IMPORTANT NOT URGENT"
        judge_task = fuzz.partial_ratio(self.target, task) > 85
        judge_ddl = "15 Jun 2024" in ddl

        return {
            "judge_page": True,
            "1": judge_type,
            "2": judge_task,
            "3": judge_ddl,
            "complete": judge_type & judge_task & judge_ddl
        }


class SingleTask_tasks_8(SingleTask):
    target = "Attend team building activity"

    def judge_page(self, xml_compressed_tree):
        type, task, ddl = get_type_task_ddl(xml_compressed_tree, "create")
        return type and task and ddl

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        type, task, ddl = get_type_task_ddl(xml_compressed_tree, "create")
        judge_type = judge_task = judge_ddl = False
        judge_type = type == "NOT IMPORTANT URGENT"
        judge_task = fuzz.partial_ratio(self.target, task) > 85
        judge_ddl = ddl == "13 May 2024, 09:00 AM"

        return {
            "judge_page": True,
            "1": judge_type,
            "2": judge_task,
            "3": judge_ddl,
            "complete": judge_type & judge_task & judge_ddl
        }


class SingleTask_tasks_9(SingleTask):
    target = "Order office supplies"

    def judge_page(self, xml_compressed_tree):
        type, task, ddl = get_type_task_ddl(xml_compressed_tree, "create")
        return type and task and ddl

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        type, task, ddl = get_type_task_ddl(xml_compressed_tree, "create")
        judge_type = judge_task = judge_ddl = False
        judge_type = type == "NOT IMPORTANT URGENT"
        judge_task = fuzz.partial_ratio(self.target, task) > 85
        judge_ddl = ddl == "10 May 2024, 03:00 PM"

        return {
            "judge_page": True,
            "1": judge_type,
            "2": judge_task,
            "3": judge_ddl,
            "complete": judge_type & judge_task & judge_ddl
        }


class SingleTask_tasks_10(SingleTask):
    target = "Read Kongres Futurologiczny"

    def judge_page(self, xml_compressed_tree):
        type, task, ddl = get_type_task_ddl(xml_compressed_tree, "create")
        return type and task and ddl

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        type, task, ddl = get_type_task_ddl(xml_compressed_tree, "create")
        judge_type = judge_task = judge_ddl = False
        judge_type = type == "NOT IMPORTANT NOT URGENT"
        judge_task = fuzz.partial_ratio(self.target, task) > 85
        judge_ddl = "03 Jul 2024" in ddl

        return {
            "judge_page": True,
            "1": judge_type,
            "2": judge_task,
            "3": judge_ddl,
            "complete": judge_type & judge_task & judge_ddl
        }


class SingleTask_tasks_11(SingleTask):
    target = "Organize personal files"

    def judge_page(self, xml_compressed_tree):
        type, task, ddl = get_type_task_ddl(xml_compressed_tree, "create")
        return type and task and ddl

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        type, task, ddl = get_type_task_ddl(xml_compressed_tree, "create")
        judge_type = judge_task = judge_ddl = False
        judge_type = type == "NOT IMPORTANT NOT URGENT"
        judge_task = fuzz.partial_ratio(self.target, task) > 85
        judge_ddl = "30 Jun 2024" in ddl

        return {
            "judge_page": True,
            "1": judge_type,
            "2": judge_task,
            "3": judge_ddl,
            "complete": judge_type & judge_task & judge_ddl
        }


class SingleTask_tasks_12(SingleTask):
    target = "Check final documents"

    def judge_page(self, xml_compressed_tree):
        type, task, ddl = get_type_task_ddl(xml_compressed_tree, "create")
        return type and task and ddl

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        type, task, ddl = get_type_task_ddl(xml_compressed_tree, "create")
        judge_type = judge_task = judge_ddl = False
        judge_type = type == "IMPORTANT URGENT"
        judge_task = fuzz.partial_ratio(self.target, task) > 85
        judge_ddl = ddl == "11 May 2024, 03:45 PM"

        return {
            "judge_page": True,
            "1": judge_type,
            "2": judge_task,
            "3": judge_ddl,
            "complete": judge_type & judge_task & judge_ddl
        }


class SingleTask_tasks_13(SingleTask):
    def judge_page(self, xml_compressed_tree):
        type, task, ddl = get_type_task_ddl(xml_compressed_tree, "edit")
        return type and task and ddl

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        type, task, ddl = get_type_task_ddl(xml_compressed_tree, "edit")
        try:
            checklist = find_matching_subtrees(xml_compressed_tree, "TextView ;; ;;")[-1]
            checklist = next(iter(checklist)).split(";;")[-1].strip()
        except:
            return {"judge_page": False}

        judge_type = judge_task = judge_ddl = judge_checklist = False
        judge_type = type == "IMPORTANT NOT URGENT"
        judge_task = task == "Qwen2 DPO training"
        judge_ddl = ddl == "27 May 2024, 04:10 PM"
        judge_checklist = checklist == "Checklist [3 / 3]"

        return {
            "judge_page": True,
            "1": judge_type,
            "2": judge_task,
            "3": judge_ddl,
            "4": judge_checklist,
            "complete": judge_type & judge_task & judge_ddl & judge_checklist
        }


from .tasks import *

function_map = {
    'tasks_1': SingleTask_tasks_1,
    'tasks_2': SingleTask_tasks_2,
    'tasks_3': SingleTask_tasks_3,
    'tasks_4': SingleTask_tasks_4,
    'tasks_5': SingleTask_tasks_5,
    'tasks_6': SingleTask_tasks_6,
    'tasks_7': SingleTask_tasks_7,
    'tasks_8': SingleTask_tasks_8,
    'tasks_9': SingleTask_tasks_9,
    'tasks_10': SingleTask_tasks_10,
    'tasks_11': SingleTask_tasks_11,
    'tasks_12': SingleTask_tasks_12,
    'tasks_13': SingleTask_tasks_13,
}


from evaluation.task import *


def extract_books_info(xml_compressed_tree):
    books_data = find_matching_subtrees(xml_compressed_tree, "TextView")
    books_set = set()
    for book_data in books_data:
        book_data = list(book_data.keys())[0]
        book_data = book_data.split(";; ;;")[-1].strip()
        books_set.add(book_data)
    return books_set


def check_selected(xml_compressed_tree, key_filter):
    def helper(data):
        if isinstance(data, dict):
            for key, value in data.items():
                if key_filter in key:
                    return True
                if helper(value):
                    return True
        elif isinstance(data, list):
            for item in data:
                if helper(item):
                    return True
        return False

    selected_data = find_matching_subtrees(xml_compressed_tree, "selected, ;")
    return helper(selected_data)


class SingleTask_cantook_1(SingleTask):

    def judge_page(self, line):
        if line["parsed_action"]["action"] != "finish":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "No"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_cantook_2(SingleTask):

    def judge_page(self, line):
        if line["parsed_action"]["action"] != "finish":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "The Scarlet Letter"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_cantook_3(SingleTask):

    def judge_page(self, line):
        if line["parsed_action"]["action"] != "finish":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "William Shakespeare"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_cantook_4(SingleTask):

    def judge_page(self, line):
        if line["parsed_action"]["action"] != "finish":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "Two"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_cantook_5(SingleTask):

    def judge_page(self, line):
        if line["parsed_action"]["action"] != "finish":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "37.8%"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_cantook_6(SingleTask):

    def judge_page(self, xml_compressed_tree):
        book_info = extract_books_info(xml_compressed_tree)
        for info in book_info:
            if ".epub" in info or "Help" in info:
                return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        judge_book = False

        book_info = extract_books_info(xml_compressed_tree)

        if "Alice's Adventures in Wonderland" in book_info:
            judge_book = True

        return {
            "judge_page": True,
            "1": judge_book,
            "complete": judge_book
        }


class SingleTask_cantook_7(SingleTask):

    def judge_page(self, xml_compressed_tree):
        outs = find_matching_subtrees(xml_compressed_tree, "My Books")
        for out in outs:
            select = find_matching_subtrees(out, "selected")
            if len(select) > 0:
                return True
        return False

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        judge_book = False

        book_info = extract_books_info(xml_compressed_tree)

        if "Don Quixote" not in book_info:
            judge_book = True

        return {
            "judge_page": True,
            "1": judge_book,
            "complete": judge_book
        }


class SingleTask_cantook_8(SingleTask):

    def judge_page(self, xml_compressed_tree):
        book_info = extract_books_info(xml_compressed_tree)
        for info in book_info:
            if "Info" not in info and "Read" not in info:
                return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        judge_book = judge_read = False

        book_info = extract_books_info(xml_compressed_tree)

        if "Hamlet" in book_info:
            judge_book = True

        if "Mark as unread" in book_info and "100.0%" in book_info:
            judge_read = True

        return {
            "judge_page": True,
            "1": judge_book,
            "2": judge_read,
            "complete": judge_book & judge_read
        }


class SingleTask_cantook_9(SingleTask):

    def judge_page(self, xml_compressed_tree):
        book_info = extract_books_info(xml_compressed_tree)
        for info in book_info:
            if "Info" not in info and "Read" not in info:
                return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        judge_book = judge_read = False

        book_info = extract_books_info(xml_compressed_tree)

        if "Oliver Twist" in book_info:
            judge_book = True

        if "Mark as read" in book_info:
            judge_read = True

        return {
            "judge_page": True,
            "1": judge_book,
            "2": judge_read,
            "complete": judge_book & judge_read
        }


class SingleTask_cantook_10(SingleTask):

    def judge_page(self, xml_compressed_tree):
        book_info = extract_books_info(xml_compressed_tree)
        for info in book_info:
            if ".epub" in info or "Help" in info:
                return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        judge_book = False

        book_info = extract_books_info(xml_compressed_tree)

        if "Mer. Thou desir'st me to stop in my tale against the haire" in book_info:
            judge_book = True

        return {
            "judge_page": True,
            "1": judge_book,
            "complete": judge_book
        }


class SingleTask_cantook_11(SingleTask):
    judge_cate = False

    def judge_page(self, xml_compressed_tree):
        book_info = extract_books_info(xml_compressed_tree)
        if "Tragedies" in book_info:
            return True
        else:
            return False

    def judge(self, xml_compressed_tree, line):
        if check_selected(xml_compressed_tree, "Categories"):
            self.judge_cate = True

        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        judge_trag = judge_book = False

        book_info = extract_books_info(xml_compressed_tree)

        if "Tragedies" in book_info:
            judge_trag = True

        if "Hamlet" in book_info and "Romeo and Juliet" in book_info:
            judge_book = True

        return {
            "judge_page": True,
            "1": self.judge_cate,
            "2": judge_trag,
            "3": judge_book,
            "complete": self.judge_cate & judge_trag & judge_book
        }


class SingleTask_cantook_12(SingleTask):

    def judge_page(self, xml_compressed_tree):
        return check_selected(xml_compressed_tree, "Collections")

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        judge_coll = judge_favo = False

        if check_selected(xml_compressed_tree, "Collections"):
            judge_coll = True

        book_info = extract_books_info(xml_compressed_tree)

        if "Favorite" in book_info:
            judge_favo = True

        return {
            "judge_page": True,
            "1": judge_coll,
            "2": judge_favo,
            "complete": judge_coll & judge_favo
        }


from .cantook import *

function_map = {
    'cantook_1': SingleTask_cantook_1,
    'cantook_2': SingleTask_cantook_2,
    'cantook_3': SingleTask_cantook_3,
    'cantook_4': SingleTask_cantook_4,
    'cantook_5': SingleTask_cantook_5,
    'cantook_6': SingleTask_cantook_6,
    'cantook_7': SingleTask_cantook_7,
    'cantook_8': SingleTask_cantook_8,
    'cantook_9': SingleTask_cantook_9,
    'cantook_10': SingleTask_cantook_10,
    'cantook_11': SingleTask_cantook_11,
    'cantook_12': SingleTask_cantook_12,
}


from .vlc import *

function_map = {
    'vlc_1': SingleTask_vlc_1,
    'vlc_2': SingleTask_vlc_2,
    'vlc_3': SingleTask_vlc_3,
    'vlc_4': SingleTask_vlc_4,
    'vlc_5': SingleTask_vlc_5,
    'vlc_6': SingleTask_vlc_6,
    'vlc_7': SingleTask_vlc_7,
}


from evaluation.task import *


def check_sorted_desc(xml_compressed_tree):
    Vlist = find_matching_subtrees(xml_compressed_tree, "Video:")
    video_list = [next(iter(Vdict)) for Vdict in Vlist]

    def extract_duration(text):
        match = re.search(r'Duration: (\d+) minutes (\d+) seconds', text)
        if match:
            minutes = int(match.group(1))
            seconds = int(match.group(2))
            return minutes * 60 + seconds
        else:
            return 0

    durations = [extract_duration(item) for item in video_list]
    is_sorted_desc = all(durations[i] >= durations[i + 1] for i in range(len(durations) - 1))
    return is_sorted_desc


class SingleTask_vlc_1(SingleTask):

    def judge_page(self, line):
        if line["parsed_action"]["action"] != "finish":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "3 videos in total"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_vlc_2(SingleTask):

    def judge_page(self, line):
        if line["parsed_action"]["action"] != "finish":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "11 minutes and 44 seconds"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_vlc_3(SingleTask):

    def judge_page(self, line):
        if line["parsed_action"]["action"] != "finish":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "1280x720 and 2160x900 respectively"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_vlc_4(SingleTask):

    def judge_page(self, line):
        if line["parsed_action"]["action"] != "finish":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "Yes"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_vlc_5(SingleTask):

    def judge_page(self, line):
        if line["parsed_action"]["action"] != "finish":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "125.38 MB"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_vlc_6(SingleTask):

    def judge_page(self, xml_compressed_tree):
        player_dict = find_matching_subtrees(xml_compressed_tree, "Video player")[0]
        player = next(iter(player_dict))
        return "Video player" in player

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        try:
            video_dict = find_matching_subtrees(xml_compressed_tree, "TextView")[-1]
            play_dict = find_matching_subtrees(xml_compressed_tree, "ImageView")[-1]
            video = next(iter(video_dict))
            play = next(iter(play_dict))
        except:
            return {"judge_page": False}

        judge_video = judge_pause = False
        judge_video = "Mikaela Shiffrin @ LSC 1 30 16" in video
        judge_pause = "Play" in play

        return {
            "judge_page": True,
            "1": judge_video,
            "2": judge_pause,
            "complete": judge_video & judge_pause
        }


class SingleTask_vlc_7(SingleTask):

    def judge_page(self, xml_compressed_tree):
        try:
            selected = find_matching_subtrees(xml_compressed_tree, "focusable ; selected")[0]
        except:
            return False
        return "Video" in next(iter(selected))

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        judge_sorted_desc = check_sorted_desc(xml_compressed_tree)
        return {
            "judge_page": True,
            "1": judge_sorted_desc,
            "complete": judge_sorted_desc
        }


from evaluation.task import *


class SingleTask_Notepad_1(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Contact" 和 "John"
        if not (find_subtrees_of_parents_with_key(xml_compressed_tree, "Share") and find_subtrees_of_parents_with_key(
                xml_compressed_tree, "Quick insert")):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Meeting")
        outcome = {"judge_page": True, "1": False, "complete": False}

        if (len(outs) > 0):
            outcome["1"] = True
            outcome["complete"] = True

        return outcome


class SingleTask_Notepad_2(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 可以根据需要在这里实现特定的页面判断逻辑
        if not (find_subtrees_of_parents_with_key(xml_compressed_tree, "Share") and find_subtrees_of_parents_with_key(
                xml_compressed_tree, "Quick insert")):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Concert")
        # print(outs)
        outcome = {"judge_page": True, "1": False, "2": False, "complete": False}
        if (len(outs) > 0):
            outcome["1"] = True
        outs = find_matching_subtrees(xml_compressed_tree, "ScrollView")
        for out in outs:
            for key, value in out.items():
                for key2, value2 in value.items():
                    if ('14 p.m. at building no.1' in key2):
                        outcome["2"] = True
            # print(out)
        if (outcome["1"] and outcome["2"]):
            outcome["complete"] = True

        return outcome


class SingleTask_Notepad_3(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 可以根据需要在这里实现特定的页面判断逻辑
        if not (find_subtrees_of_parents_with_key(xml_compressed_tree,
                                                  "New item") and find_subtrees_of_parents_with_key(xml_compressed_tree,
                                                                                                    "Search & sort")):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "To do list")
        outcome = {"judge_page": True, "1": False, "complete": False}
        if (len(outs) > 0):
            outcome["1"] = True
            outcome["complete"] = True

        return outcome


class SingleTask_Notepad_4(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 可以根据需要在这里实现特定的页面判断逻辑
        if not (find_subtrees_of_parents_with_key(xml_compressed_tree,
                                                  "New item") and find_subtrees_of_parents_with_key(xml_compressed_tree,
                                                                                                    "Search & sort")):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "To do list")
        outcome = {"judge_page": True, "1": False, "2": False, "complete": False}
        if (len(outs) > 0):
            outcome["1"] = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "check ; unchecked ;;Eggs")
        if (len(outs) > 0):
            outcome["2"] = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "check ; checked ;;Eggs")
        if (len(outs) > 0):
            outcome["2"] = True
        if (outcome["1"] and outcome["2"]):
            outcome["complete"] = True

        return outcome


class SingleTask_Notepad_5(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 可以根据需要在这里实现特定的页面判断逻辑
        if not (find_subtrees_of_parents_with_key(xml_compressed_tree,
                                                  "Import checklist") and find_subtrees_of_parents_with_key(
            xml_compressed_tree, "File encoding")):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Import checklist")
        outcome = {"judge_page": True, "1": False, "complete": False}

        for out in outs:
            for key, value in out.items():
                for key2, value2 in value.items():
                    if "unchecked" in key2:
                        outcome["1"] = True
                        break

        if (outcome["1"]):
            outcome["complete"] = True

        return outcome


class SingleTask_Notepad_6(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 可以根据需要在这里实现特定的页面判断逻辑
        if not (find_subtrees_of_parents_with_key(xml_compressed_tree, "Share") and find_subtrees_of_parents_with_key(
                xml_compressed_tree, "Quick insert")):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Meeting")
        # print(outs)
        outcome = {"judge_page": True, "1": False, "2": False, "complete": False}
        if (len(outs) > 0):
            outcome["1"] = True
        outs = find_matching_subtrees(xml_compressed_tree, "ScrollView")
        for out in outs:
            for key, value in out.items():
                for key2, value2 in value.items():
                    if ('Tommorrow' in key2):
                        outcome["2"] = True
            # print(out)
        if (outcome["1"] and outcome["2"]):
            outcome["complete"] = True

        return outcome


class SingleTask_Notepad_7(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 可以根据需要在这里实现特定的页面判断逻辑
        if not (find_subtrees_of_parents_with_key(xml_compressed_tree, "Search") and find_subtrees_of_parents_with_key(
                xml_compressed_tree, "CLEAR")):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Meeting")
        outcome = {"judge_page": True, "1": False, "complete": False}
        if (len(outs) > 0):
            outcome["1"] = True
            outcome["complete"] = True

        return outcome


class SingleTask_Notepad_8(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 可以根据需要在这里实现特定的页面判断逻辑
        if not (find_subtrees_of_parents_with_key(xml_compressed_tree,
                                                  "Add quick insert item") and find_subtrees_of_parents_with_key(
            xml_compressed_tree, "CANCEL")):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "alice")
        outcome = {"judge_page": True, "1": False, "complete": False}

        if (len(outs) > 0):
            outcome["1"] = True
            outcome["complete"] = True

        return outcome


class SingleTask_Notepad_9(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 可以根据需要在这里实现特定的页面判断逻辑
        if not (find_subtrees_of_parents_with_key(xml_compressed_tree,
                                                  "Repeat every 5 minutes") and find_subtrees_of_parents_with_key(
            xml_compressed_tree, "Notification sound")):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Repeat every 5 minutes")
        outcome = {"judge_page": True, "1": False, "complete": False}

        for out in outs:
            for key, value in out.items():
                for key2, value2 in value.items():
                    if ('checked' in key2 and (not 'unchecked' in key2)):
                        outcome["1"] = True
                        break

        if outcome["1"] == True:
            outcome["complete"] = True

        return outcome


class SingleTask_Notepad_10(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 可以根据需要在这里实现特定的页面判断逻辑
        if not (find_subtrees_of_parents_with_key(xml_compressed_tree, "Settings/Tools")):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outcome = {"judge_page": True, "1": False, "complete": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Remember last sorting")
        for out in outs:
            for key, value in out.items():
                for key2, value2 in value.items():
                    if ('checked' in key2 and (not 'unchecked' in key2)):
                        outcome["1"] = True
                        break

        if outcome["1"] == True:
            outcome["complete"] = True
        return outcome


class SingleTask_Notepad_11(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 可以根据需要在这里实现特定的页面判断逻辑
        if not (find_subtrees_of_parents_with_key(xml_compressed_tree, "Share") and find_subtrees_of_parents_with_key(
                xml_compressed_tree, "Quick insert")):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Work")
        # print(outs)
        outcome = {"judge_page": True, "1": False, "2": False, "complete": False}
        if (len(outs) > 0):
            outcome["1"] = True
        outs = find_matching_subtrees(xml_compressed_tree, "ScrollView")
        for out in outs:
            for key, value in out.items():
                for key2, value2 in value.items():
                    if ('Due tommorrow' in key2):
                        outcome["2"] = True
            # print(out)
        if (outcome["1"] and outcome["2"]):
            outcome["complete"] = True

        return outcome


class SingleTask_Notepad_12(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 可以根据需要在这里实现特定的页面判断逻辑
        if not (find_subtrees_of_parents_with_key(xml_compressed_tree,
                                                  "New item") and find_subtrees_of_parents_with_key(xml_compressed_tree,
                                                                                                    "Search & sort")):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "To do list")
        outcome = {"judge_page": True, "1": False, "2": False, "complete": False}
        if (len(outs) > 0):
            outcome["1"] = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "check ; unchecked ;;Enrollment")
        if (len(outs) > 0):
            outcome["2"] = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "check ; checked ;;Enrollment")
        if (len(outs) > 0):
            outcome["2"] = True
        if (outcome["1"] and outcome["2"]):
            outcome["complete"] = True

        return outcome


class SingleTask_Notepad_13(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 可以根据需要在这里实现特定的页面判断逻辑
        if not (find_subtrees_of_parents_with_key(xml_compressed_tree,
                                                  "New item") and find_subtrees_of_parents_with_key(xml_compressed_tree,
                                                                                                    "Search & sort")):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "To do list")
        outcome = {"judge_page": True, "1": False, "2": False, "complete": False}
        if (len(outs) > 0):
            outcome["1"] = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "check ; checked ;;Eggs")
        if (len(outs) > 0):
            outcome["2"] = True
        if (outcome["1"] and outcome["2"]):
            outcome["complete"] = True

        return outcome


from .notepad import *
from .notepad import *

function_map = {
    'notepad_1': SingleTask_Notepad_1,
    'notepad_2': SingleTask_Notepad_2,
    'notepad_3': SingleTask_Notepad_3,
    'notepad_4': SingleTask_Notepad_4,
    'notepad_5': SingleTask_Notepad_5,
    'notepad_6': SingleTask_Notepad_6,
    'notepad_7': SingleTask_Notepad_7,
    'notepad_8': SingleTask_Notepad_8,
    'notepad_9': SingleTask_Notepad_9,
    'notepad_10': SingleTask_Notepad_10,
    'notepad_11': SingleTask_Notepad_11,
    'notepad_12': SingleTask_Notepad_12,
    'notepad_13': SingleTask_Notepad_13
}


from evaluation.task import *


class SingleTask_Contacts_1(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Contact" 和 "John"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Contact"):
            return False
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "John"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        outcome = {"judge_page": False, "1": False, "2": False, "complete": False}

        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outcome["judge_page"] = True

        # 检查 "John"
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "John")
        if outs:
            outcome["1"] = True

        # 检查 "1 (234) 567-8"
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "1 (234) 567-8")
        if outs:
            outcome["2"] = True

        # 判断 complete
        if outcome["1"] and outcome["2"]:
            outcome["complete"] = True

        return outcome


class SingleTask_Contacts_2(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Contact"):
            return False
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "John Smith"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outcome = {"judge_page": True, "1": False, "2": False, "complete": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "1 (234) 567-8")

        for out in outs:
            for single_out in out.values():
                for key in single_out.keys():
                    key = key.split(";")[-1]
                    if key == "Call Mobile 1 (234) 567-8 ":
                        outcome["1"] = True
                    if key == "Email Work 123456@qq.com ":
                        outcome["2"] = True
                    if outcome["1"] and outcome["2"]:
                        outcome["complete"] = True
                        return outcome

        return outcome


class SingleTask_Contacts_3(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Contact"):
            return False
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Xu"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outcome = {"judge_page": True, "1": False, "2": False, "complete": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "1 (234) 567-8")

        for out in outs:
            for single_out in out.values():
                for key in single_out.keys():
                    key = key.split(";")[-1]
                    if key == "Call Work 1 (234) 567-8 ":
                        outcome["1"] = True
                    if key == "Call Mobile (876) 543-21 ":
                        outcome["2"] = True
                    if outcome["1"] and outcome["2"]:
                        outcome["complete"] = True
                        return outcome

        return outcome


class SingleTask_Contacts_4(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Contact"):
            return False
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Chen"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outcome = {"judge_page": True, "1": False, "complete": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Contact photo ")

        for out in outs:
            for single_out in out.values():
                for key in single_out.keys():
                    key = key.split(";")[-1]
                    if key == "Tsinghua University ":
                        outcome["1"] = True
                        outcome["complete"] = True
                        return outcome

        return outcome


class SingleTask_Contacts_5(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "work • l"):
            return False
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Add contacts"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outcome = {"judge_page": True, "1": False, "2": False, "3": False, "complete": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "work • ")

        for out in outs:
            for single_out in out.values():
                for key, value in single_out.items():
                    if "work • " in key:
                        key = key.split(";")[-1]
                        if "contacts" in key and not "3 contacts " in key:
                            return {"judge_page": True, "1": False}
                    try:
                        for it in value.keys():
                            key = it.split(";")[-1]
                            if key == "Chen Chen ":
                                outcome["1"] = True
                            elif key == "Lee Lee ":
                                outcome["2"] = True
                            elif key == "Xu Xu ":
                                outcome["3"] = True
                            if outcome["1"] and outcome["2"] and outcome["3"]:
                                outcome["complete"] = True
                                return outcome
                    except:
                        pass

        return outcome


class SingleTask_Contacts_6(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Contact"):
            return False
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "ABC"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outcome = {"judge_page": True, "1": False, "complete": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "00112233 ")

        if len(outs) > 0:
            outcome["1"] = True
            outcome["complete"] = True

        return outcome


class SingleTask_Contacts_7(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Contact"):
            return False
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "ABC"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outcome = {"judge_page": True, "1": False, "complete": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Birthday ")

        for out in outs:
            for single_out in out.values():
                for key in single_out.keys():
                    key = key.split(";")[-1]
                    if key == "October 24, 1996 ":
                        outcome["1"] = True
                        outcome["complete"] = True
                        return outcome

        return outcome


class SingleTask_Contacts_8(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Contact"):
            return False
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "ABC"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outcome = {"judge_page": True, "1": False, "complete": False}

        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "abc.github.com")
        if len(outs) > 0:
            outcome["1"] = True
            outcome["complete"] = True

        return outcome


class SingleTask_Contacts_9(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Texting with ABC"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        key_1 = False
        key_2 = False
        outcome = {"judge_page": True, "1": False, "2": False, "complete": False}

        if find_subtrees_of_parents_with_key(xml_compressed_tree, "Texting with ABC"):
            key_1 = True
            if find_subtrees_of_parents_with_key(xml_compressed_tree, "Nice to meet you"):
                key_2 = True

        outcome["1"] = key_1
        outcome["2"] = key_2
        outcome["complete"] = key_1 and key_2

        return outcome


class SingleTask_Contacts_10(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "End call"):
            return False
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "ABC"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Contacts_11(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "ABC ABC"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        judge_key = not find_subtrees_of_parents_with_key(xml_compressed_tree, "AAA AAA ")

        return {"judge_page": True, "1": judge_key, "complete": judge_key}


class SingleTask_Contacts_12(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        answer = "22331144 or (223) 311-44"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_Contacts_13(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        answer = "22334455@gmail.com"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_Contacts_14(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        answer = "October 24, 1996"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_Contacts_15(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        answer = "Tsinghua university"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_Contacts_16(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Search contacts ")
        if len(outs) == 0:
            return {"judge_page": True, "1": False, "complete": False}

        return {"judge_page": True, "1": True, "complete": True}


from .contacts import *

function_map = {
    'contacts_1': SingleTask_Contacts_1,
    'contacts_2': SingleTask_Contacts_2,
    'contacts_3': SingleTask_Contacts_3,
    'contacts_4': SingleTask_Contacts_4,
    'contacts_5': SingleTask_Contacts_5,
    'contacts_6': SingleTask_Contacts_6,
    'contacts_7': SingleTask_Contacts_7,
    'contacts_8': SingleTask_Contacts_8,
    'contacts_9': SingleTask_Contacts_9,
    'contacts_10': SingleTask_Contacts_10,
    'contacts_11': SingleTask_Contacts_11,
    'contacts_12': SingleTask_Contacts_12,
    'contacts_13': SingleTask_Contacts_13,
    'contacts_14': SingleTask_Contacts_14,
    'contacts_15': SingleTask_Contacts_15,
}


from evaluation.task import *


class SingleTask_Firefox_1(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "m.facebook.com"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Firefox_2(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "m.youtube.com"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Firefox_3(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "m.wikipedia.org"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Firefox_4(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "q=apple"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Firefox_5(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "m.baidu.com"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Firefox_6(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "q=national+day"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Firefox_7(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "m.jd.com"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Firefox_8(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "baidu.com"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        key = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "word=match")
        if (len(outs) == 0):
            key = False
        return {"judge_page": True, "1": key, "complete": key}


class SingleTask_Firefox_9(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "m.jd.com"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        key = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "keyword=dress")
        if (len(outs) == 0):
            key = False
        return {"judge_page": True, "1": key, "complete": key}


from .firefox import *

function_map = {
    'firefox_1': SingleTask_Firefox_1,
    'firefox_2': SingleTask_Firefox_2,
    'firefox_3': SingleTask_Firefox_3,
    'firefox_4': SingleTask_Firefox_4,
    'firefox_5': SingleTask_Firefox_5,
    'firefox_6': SingleTask_Firefox_6,
    'firefox_7': SingleTask_Firefox_7,
    'firefox_8': SingleTask_Firefox_8,
    'firefox_9': SingleTask_Firefox_9,
}


from evaluation.task import *


class SingleTask_Zoom_1(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Join with a personal link name"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "123 456 7890")
        if len(outs) > 0:
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_Zoom_2(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Join with a personal link name"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        judge_key1 = False
        judge_key2 = False
        outs1 = find_subtrees_of_parents_with_key(xml_compressed_tree, "098 765 4321")
        outs2 = find_subtrees_of_parents_with_key(xml_compressed_tree, "Alice")
        if len(outs1) > 0:
            judge_key1 = True
        if len(outs2) > 0:
            judge_key2 = True
        outcome = {"judge_page": True, "1": judge_key1, "2": judge_key2, "complete": judge_key1 and judge_key2}
        return outcome


class SingleTask_Zoom_3(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Join with a personal link name"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        judge_key1 = False
        judge_key2 = False
        judge_key3 = False
        outs1 = find_subtrees_of_parents_with_key(xml_compressed_tree, "123 456 7890")
        outs2_tree = find_subtrees_of_parents_with_key(xml_compressed_tree, "Don't Connect To Audio")
        outs2 = find_subtrees_of_parents_with_key(outs2_tree[0], "On, switch")
        outs3_tree = find_subtrees_of_parents_with_key(xml_compressed_tree, "Turn Off My Video")
        outs3 = find_subtrees_of_parents_with_key(outs3_tree[0], "On, switch")
        if len(outs1) > 0:
            judge_key1 = True
        if len(outs2) > 0:
            judge_key2 = True
        if len(outs3) > 0:
            judge_key3 = True
        outcome = {"judge_page": True, "1": judge_key1, "2": judge_key2, "3": judge_key3,
                   "complete": judge_key1 and judge_key2 and judge_key3}
        return outcome


class SingleTask_Zoom_4(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Auto-connect to audio"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        judge_key = False
        outs_tree = find_subtrees_of_parents_with_key(xml_compressed_tree, "Auto-connect to audio")
        outs = find_subtrees_of_parents_with_key(outs_tree[0], "WiFi or cellular data")
        if len(outs) > 0:
            judge_key = True
        outcome = {"judge_page": True, "1": judge_key, "complete": judge_key}
        return outcome


class SingleTask_Zoom_5(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if (not find_subtrees_of_parents_with_key(xml_compressed_tree, "Reaction skin tone")
                or not find_subtrees_of_parents_with_key(xml_compressed_tree, "Medium-light")):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        judge_key = False
        outs_tree = find_subtrees_of_parents_with_key(xml_compressed_tree, "Medium-light")
        outs = find_subtrees_of_parents_with_key(outs_tree[0], "Selected")
        if len(outs) > 0:
            judge_key = True
        outcome = {"judge_page": True, "1": judge_key, "complete": judge_key}
        return outcome


from .zoom import *

function_map = {
    'zoom_1': SingleTask_Zoom_1,
    'zoom_2': SingleTask_Zoom_2,
    'zoom_3': SingleTask_Zoom_3,
    'zoom_4': SingleTask_Zoom_4,
    'zoom_5': SingleTask_Zoom_5,
}


from evaluation.task import *


def extract_songs(xml_compressed_tree) -> List[Dict]:
    songs_data = find_matching_subtrees(xml_compressed_tree, "TextView ;; ;;")
    song_data = [list(sd.keys())[0].split(";; ;;")[-1].strip() for sd in songs_data]
    duration_pattern = re.compile(r'^(\d+:)?[0-5]?\d:[0-5]?\d$')
    start_index = 0
    for i in range(4):
        if i + 2 < len(song_data):
            if duration_pattern.match(song_data[i + 2]):
                start_index = i
                break
    result = []
    for i in range(start_index, len(song_data), 3):
        if i + 2 < len(song_data):
            song = song_data[i]
            artist = song_data[i + 1]
            duration = song_data[i + 2]
            if duration_pattern.match(duration):
                song_info = {
                    'song': song,
                    'artist': artist,
                    'duration': duration
                }
                result.append(song_info)
            else:
                break
    return result


def parse_duration(duration):
    parts = list(map(int, duration.split(':')))
    if len(parts) == 2:
        return parts[0] * 60 + parts[1]
    elif len(parts) == 3:
        return parts[0] * 3600 + parts[1] * 60 + parts[2]
    else:
        raise ValueError("Invalid duration format")


def extract_info(xml_compressed_tree):
    songs_data = find_matching_subtrees(xml_compressed_tree, "TextView")
    songs_set = set()
    for song_data in songs_data:
        song_data = list(song_data.keys())[0]
        song_data = song_data.split(";; ;;")[-1].strip()
        songs_set.add(song_data)
    return songs_set


def check_selected(xml_compressed_tree, key_filter):
    def helper(data):
        if isinstance(data, dict):
            for key, value in data.items():
                if key_filter in key:
                    return True
                if helper(value):
                    return True
        elif isinstance(data, list):
            for item in data:
                if helper(item):
                    return True
        return False

    selected_data = find_matching_subtrees(xml_compressed_tree, "selected, ;")
    return helper(selected_data)


class SingleTask_pimusic_1(SingleTask):

    def judge_page(self, line):
        if line["parsed_action"]["action"] != "finish":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "12 songs"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_pimusic_2(SingleTask):

    def judge_page(self, line):
        if line["parsed_action"]["action"] != "finish":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "4 songs"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_pimusic_3(SingleTask):

    def judge_page(self, line):
        if line["parsed_action"]["action"] != "finish":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "Pulse Live"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_pimusic_4(SingleTask):

    def judge_page(self, line):
        if line["parsed_action"]["action"] != "finish":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "1 hour, 21 minutes and 3 seconds"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_pimusic_5(SingleTask):

    def judge_page(self, line):
        if line["parsed_action"]["action"] != "finish":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "The second song is 'Dark Side Of The Moon' and the fourth song is 'Future sounds'"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_pimusic_6(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "11 minutes and 50 seconds"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_pimusic_7(SingleTask):
    judge_list = False
    judge_favo = False

    def judge_page(self, xml_compressed_tree):
        page_info = extract_info(xml_compressed_tree)
        for info in page_info:
            if "Now Playing list" in info and "Equalizer" in info:
                return True
        return False

    def judge(self, xml_compressed_tree, line):
        if not self.judge_list:
            if check_selected(xml_compressed_tree, "PLAYLISTS"):
                self.judge_list = True

        if not self.judge_favo:
            get_pf = find_matching_subtrees(xml_compressed_tree, "] ;; ;;Favorite")
            if len(get_pf) == 1:
                self.judge_favo = True

        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        if self.judge_favo:
            judge_play = False
            play_info = extract_info(xml_compressed_tree)
            if "PINK BLOOD" in play_info:
                judge_play = True

        return {
            "judge_page": True,
            "1": self.judge_list,
            "2": self.judge_favo,
            "3": judge_play,
            "complete": self.judge_list & self.judge_favo & judge_play
        }


class SingleTask_pimusic_8(SingleTask):
    judge_arti = False
    judge_sort_step = False

    def judge_page(self, xml_compressed_tree):
        get_pf = find_matching_subtrees(xml_compressed_tree, "] ;; ;;Pink Floyd")
        if len(get_pf) != 1:
            return False
        else:
            return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_arti:
            if check_selected(xml_compressed_tree, "ARTISTS"):
                self.judge_arti = True

        if not self.judge_sort_step:
            sort_info = extract_info(xml_compressed_tree)
            if "Sort By" in sort_info:
                self.judge_sort_step = True

        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        judge_pf = False
        get_pf = find_matching_subtrees(xml_compressed_tree, "] ;; ;;Pink Floyd")
        if len(get_pf) == 1:
            judge_pf = True

        if self.judge_sort_step:
            song_data = extract_songs(xml_compressed_tree)
            dur2sec = lambda duration: parse_duration(duration)
            dur2sec_list = [dur2sec(song['duration']) for song in song_data]
            judge_sort_final = all(dur2sec_list[i] >= dur2sec_list[i + 1] for i in range(len(dur2sec_list) - 1))

        return {
            "judge_page": True,
            "1": self.judge_arti,
            "2": judge_pf,
            "3": self.judge_sort_step,
            "4": judge_sort_final,
            "complete": self.judge_arti & judge_pf & self.judge_sort_step & judge_sort_final
        }


class SingleTask_pimusic_9(SingleTask):

    def judge_page(self, xml_compressed_tree):
        return check_selected(xml_compressed_tree, "PLAYLISTS")

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        judge_list = judge_cree = False

        if check_selected(xml_compressed_tree, "PLAYLISTS"):
            judge_list = True

        list_info = extract_info(xml_compressed_tree)
        if "Creepy" in list_info:
            judge_cree = True

        return {
            "judge_page": True,
            "1": judge_list,
            "2": judge_cree,
            "complete": judge_list & judge_cree
        }


class SingleTask_pimusic_10(SingleTask):

    def judge_page(self, xml_compressed_tree):
        page_info = extract_info(xml_compressed_tree)
        for info in page_info:
            if "Now Playing list" in info and "Equalizer" in info:
                return True
        return False

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        judge_time = False
        play_info = extract_info(xml_compressed_tree)
        if "1:27" in play_info:
            judge_time = True

        return {
            "judge_page": True,
            "1": judge_time,
            "complete": judge_time
        }


class SingleTask_pimusic_11(SingleTask):

    def judge_page(self, xml_compressed_tree):
        page_info = extract_info(xml_compressed_tree)
        for info in page_info:
            if "Now Playing list" in info and "Equalizer" in info:
                return True
        return False

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        judge_play = False
        play_info = extract_info(xml_compressed_tree)
        if "Lightship" in play_info:
            judge_play = True

        return {
            "judge_page": True,
            "1": judge_play,
            "complete": judge_play
        }


class SingleTask_pimusic_12(SingleTask):
    judge_sort_step = False

    def judge_page(self, xml_compressed_tree):
        return check_selected(xml_compressed_tree, "TRACKS")

    def judge(self, xml_compressed_tree, line):
        if not self.judge_sort_step:
            sort_info = extract_info(xml_compressed_tree)
            if "Sort By" in sort_info:
                self.judge_sort_step = True

        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        song_data = extract_songs(xml_compressed_tree)
        dur2sec = lambda duration: parse_duration(duration)
        dur2sec_list = [dur2sec(song['duration']) for song in song_data]
        judge_sort_final = all(dur2sec_list[i] <= dur2sec_list[i + 1] for i in range(len(dur2sec_list) - 1))

        return {
            "judge_page": True,
            "1": self.judge_sort_step,
            "2": judge_sort_final,
            "complete": self.judge_sort_step & judge_sort_final
        }


from .pimusic import *

function_map = {
    'pimusic_1': SingleTask_pimusic_1,
    'pimusic_2': SingleTask_pimusic_2,
    'pimusic_3': SingleTask_pimusic_3,
    'pimusic_4': SingleTask_pimusic_4,
    'pimusic_5': SingleTask_pimusic_5,
    'pimusic_6': SingleTask_pimusic_6,
    'pimusic_7': SingleTask_pimusic_7,
    'pimusic_8': SingleTask_pimusic_8,
    'pimusic_9': SingleTask_pimusic_9,
    'pimusic_10': SingleTask_pimusic_10,
    'pimusic_11': SingleTask_pimusic_11,
    'pimusic_12': SingleTask_pimusic_12,
}


def weather_judge_page(current_json):
    judge_key = False
    outs = find_subtrees_of_parents_with_key(current_json, "Temperature")
    if len(outs) == 0:
        return {"judge_page": False}
    outs = find_subtrees_of_parents_with_key(current_json, "Beijing ")
    if len(outs) > 0:
        judge_key = True
    return {"1": judge_key, "complete": judge_key}


def weather_1(current_json):
    judge_key = False
    outs = find_subtrees_of_parents_with_key(current_json, "Temperature")
    if len(outs) == 0:
        return {"judge_page": False}
    outs = find_subtrees_of_parents_with_key(current_json, "Beijing ")
    if len(outs) > 0:
        judge_key = True
    return {"judge_page": True, "1": judge_key, "complete": judge_key}


def weather_2(current_json):
    outs = find_subtrees_of_parents_with_key(current_json, "Beijing ")
    if len(outs) == 0:
        return {"judge_page": False}
    outs = find_subtrees_of_parents_with_key(current_json, "Temperature")
    if len(outs) == 0:
        return {"judge_page": False}
    outs = find_subtrees_of_parents_with_key(current_json, "Temperature, Today")
    cnt = 0
    for out in outs:
        out = out.values()
        for single_out in out:
            for key, value in single_out.items():
                if cnt == 1:
                    key = key.split("Daytime: ")[-1]
                    key = key.split("Nighttime: ")[0]
                    key = key.split(",")[1]
                    key = key.lstrip()
                    key_1 = key.split("\u202f")[0]
                    key_2 = key.split("\u202f")[1]
                    key = key_1 + " " + key_2
                    return {"judge_page": True, "judge_key": key}
                if cnt >= 1:
                    cnt += 1
                if ("Temperature, Today" in key):
                    cnt += 1
    return {"judge_page": True, "judge_key": "Not found"}


def weather_3(current_json):
    outs = find_subtrees_of_parents_with_key(current_json, "Shanghai ")
    if len(outs) == 0:
        return {"judge_page": False}
    outs = find_subtrees_of_parents_with_key(current_json, "Temperature")
    if len(outs) == 0:
        return {"judge_page": False}
    outs = find_subtrees_of_parents_with_key(current_json, "Temperature, Today")
    cnt = 0
    for out in outs:
        out = out.values()
        for single_out in out:
            for key, value in single_out.items():
                if ("Temperature, Today" in key):
                    key = key.split("Daytime: ")[-1]
                    key_day = key.split("Nighttime: ")[0]
                    key_day = key_day.split(",")[0]
                    key_day = key_day.lstrip()
                    key_night = key.split("Nighttime: ")[-1]
                    key_night = key_night.split(",")[0]
                    key_night = key_night.lstrip()
                    return {"judge_page": True, "judge_day_weather": key_day, "judge_night_weather": key_night}
    return {"judge_page": True, "judge_day_weather": "Not found", "judge_night_weather": "Not found"}


def weather_4(current_json):
    judge_key = False
    outs = find_subtrees_of_parents_with_key(current_json, "Shanghai ")
    if len(outs) == 0:
        return {"judge_page": False}
    outs = find_subtrees_of_parents_with_key(current_json, "Temperature")
    if len(outs) == 0:
        return {"judge_page": False}
    outs = find_subtrees_of_parents_with_key(current_json, "0 min. ago 0 min. ago ")
    if len(outs) > 0:
        judge_key = True
    return {"1": judge_key, "complete": judge_key}


def weather_5(current_json):
    outs = find_subtrees_of_parents_with_key(current_json, "Shanghai ")
    if len(outs) == 0:
        return {"judge_page": False}
    outs = find_subtrees_of_parents_with_key(current_json, "Temperature")
    if len(outs) == 0:
        return {"judge_page": False}
    outs = find_subtrees_of_parents_with_key(current_json, "Sunset at ")
    for out in outs:
        out = out.values()
        for single_out in out:
            for key, value in single_out.items():
                if ("Sunset at " in key):
                    key = key.split("Sunset at ")[-1]
                    key = key.split(",")[0]
                    key = key.lstrip()
                    return {"judge_page": True, "judge_key": key}
    return {"judge_page": True, "judge_key": "Not found"}


def weather_6(current_json):
    outs = find_subtrees_of_parents_with_key(current_json, "3/16")
    if len(outs) == 0:
        return {"judge_page": False}
    outs = find_subtrees_of_parents_with_key(current_json, "Sun & moon, ")
    count = 0
    for out in outs:
        out = out.values()
        for single_out in out:
            for key, value in single_out.items():
                if ("Sunrise at ") in key:
                    count += 1
                if count == 2:
                    key = key.split("Sunrise at ")[-1]
                    key = key.split(",")[0]
                    key = key.lstrip()
                    return {"judge_page": True, "judge_key": key}
    return {"judge_page": True, "judge_key": "Not found"}


def weather_7(current_json):
    outs = find_subtrees_of_parents_with_key(current_json, "Temperature")
    if len(outs) == 0:
        return {"judge_page": False}
    outs = find_subtrees_of_parents_with_key(current_json, "Beijing")
    if len(outs) == 0:
        return {"judge_page": False}
    outs = find_subtrees_of_parents_with_key(current_json, "Air quality ")
    count = 0
    for out in outs:
        out = out.values()
        for single_out in out:
            for key, value in single_out.items():
                if count == 2:
                    key = key.split(",")[-1]
                    key = key.lstrip()
                    key = key.rstrip()
                    return {"judge_page": True, "judge_key": key}
                if count >= 1:
                    count += 1
                if ("Air quality ") in key:
                    count += 1
    return {"judge_page": True, "judge_key": "Not found"}


def weather_8(current_json):
    outs = find_subtrees_of_parents_with_key(current_json, "Temperature")
    if len(outs) == 0:
        return {"judge_page": False}
    outs = find_subtrees_of_parents_with_key(current_json, "Temperature, Today")
    cnt = 0
    for out in outs:
        out = out.values()
        for single_out in out:
            for key, value in single_out.items():
                if cnt == 1:
                    key = key.split("Daytime: ")[-1]
                    key = key.split("Nighttime: ")[0]
                    key = key.split(",")[1]
                    key = key.lstrip()
                    key_1 = key.split("\u202f")[0]
                    key_2 = key.split("\u202f")[1]
                    key = key_1 + " " + key_2
                    return {"judge_page": True, "judge_key": key}
                if cnt >= 1:
                    cnt += 1
                if ("Temperature, Today" in key):
                    cnt += 1
    return {"judge_page": True, "judge_key": "Not found"}


def weather_9(current_json):
    outs = find_subtrees_of_parents_with_key(current_json, "Temperature")
    if len(outs) == 0:
        return {"judge_page": False}
    outs = find_subtrees_of_parents_with_key(current_json, "Temperature, Today")
    cnt = 0
    for out in outs:
        out = out.values()
        for single_out in out:
            for key, value in single_out.items():
                if ("Temperature, Today" in key):
                    key = key.split("Daytime: ")[-1]
                    key_day = key.split("Nighttime: ")[0]
                    key_day = key_day.split(",")[0]
                    key_day = key_day.lstrip()
                    key_night = key.split("Nighttime: ")[-1]
                    key_night = key_night.split(",")[0]
                    key_night = key_night.lstrip()
                    return {"judge_page": True, "judge_day_weather": key_day, "judge_night_weather": key_night}
    return {"judge_page": True, "judge_day_weather": "Not found", "judge_night_weather": "Not found"}


def weather_10(current_json):
    judge_key = False
    outs = find_subtrees_of_parents_with_key(current_json, "Temperature")
    if len(outs) == 0:
        return {"judge_page": False}
    outs = find_subtrees_of_parents_with_key(current_json, "0 min. ago 0 min. ago ")
    if len(outs) > 0:
        judge_key = True
    return {"1": judge_key, "complete": judge_key}


def weather_11(current_json):
    outs = find_subtrees_of_parents_with_key(current_json, "Temperature")
    if len(outs) == 0:
        return {"judge_page": False}
    outs = find_subtrees_of_parents_with_key(current_json, "Sunset at ")
    for out in outs:
        out = out.values()
        for single_out in out:
            for key, value in single_out.items():
                if ("Sunset at " in key):
                    key = key.split("Sunset at ")[-1]
                    key = key.split(",")[0]
                    key = key.lstrip()
                    return {"judge_page": True, "judge_key": key}
    return {"judge_page": True, "judge_key": "Not found"}


def weather_12(current_json):
    outs = find_subtrees_of_parents_with_key(current_json, "Temperature")
    if len(outs) == 0:
        return {"judge_page": False}
    outs = find_subtrees_of_parents_with_key(current_json, "Air quality ")
    count = 0
    for out in outs:
        out = out.values()
        for single_out in out:
            for key, value in single_out.items():
                if count == 2:
                    key = key.split(",")[-1]
                    key = key.lstrip()
                    key = key.rstrip()
                    return {"judge_page": True, "judge_key": key}
                if count >= 1:
                    count += 1
                if ("Air quality ") in key:
                    count += 1
    return {"judge_page": True, "judge_key": "Not found"}


from .weather import *


from evaluation.task import *


class SingleTask_Google_1(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Contact" 和 "John"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "m.facebook.com"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Google_2(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Contact" 和 "John"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "m.youtube.com"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Google_3(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Contact" 和 "John"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "m.wikipedia.org"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Google_4(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Contact" 和 "John"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "q=apple"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Google_5(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Contact" 和 "John"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "m.baidu.com"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Google_6(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Contact" 和 "John"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "q=national+day"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Google_7(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Contact" 和 "John"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "m.jd.com"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Google_8(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Contact" 和 "John"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "baidu.com"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        key = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "word=match")
        if (len(outs) == 0):
            key = False
        return {"judge_page": True, "1": key, "complete": key}


class SingleTask_Google_9(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Contact" 和 "John"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "m.jd.com"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        key = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "keyword=dress")
        if (len(outs) == 0):
            key = False
        return {"judge_page": True, "1": key, "complete": key}


from .google import *

function_map = {
    'google_1': SingleTask_Google_1,
    'google_2': SingleTask_Google_2,
    'google_3': SingleTask_Google_3,
    'google_4': SingleTask_Google_4,
    'google_5': SingleTask_Google_5,
    'google_6': SingleTask_Google_6,
    'google_7': SingleTask_Google_7,
    'google_8': SingleTask_Google_8,
    'google_9': SingleTask_Google_9,
}


from evaluation.task import *


class SingleTask_Setting_0(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if "command" not in line:
            return {"judge_page": False}
        command = line["command"]
        if command["adb shell settings get global airplane_mode_on"] == "0":
            return {"judge_page": True, "1": False, "complete": False}
        else:
            return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Setting_1(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Turn on Wi‑Fi automatically"
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Turn on Wi‑Fi automatically")
        if len(outs) == 0:
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Turn on Wi‑Fi automatically")
        for out in outs:
            for key, value in out.items():
                for judge_key, _ in value.items():
                    if "unchecked" in judge_key:
                        return {"judge_page": True, "1": True, "complete": True}
        return {"judge_page": True, "1": False, "complete": False}


class SingleTask_Setting_2(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Private DNS provider hostname"
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Private DNS provider hostname")
        if len(outs) == 0:
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "dns.google")
        if len(outs) == 0:
            return {"judge_page": True, "1": False, "complete": False}
        else:
            return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Setting_3(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if "command" not in line:
            return {"judge_page": False}
        command = line["command"]
        if command["adb shell settings get global bluetooth_on"] == "1":
            return {"judge_page": True, "1": False, "complete": False}
        else:
            return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Setting_4(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Pair new device"
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Pair new device")
        if len(outs) == 0:
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "my AVD")
        if len(outs) == 0:
            return {"judge_page": True, "1": False, "complete": False}
        else:
            return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Setting_5(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Battery percentage"
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Battery percentage")
        if len(outs) == 0:
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Battery percentage")
        for out in outs:
            for key, value in out.items():
                for judge_key, _ in value.items():
                    if "unchecked" in judge_key:
                        return {"judge_page": True, "1": False, "complete": False}
        return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Setting_6(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Apps"
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Apps")
        if len(outs) == 0:
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Apps")
        for out in outs:
            for key, value in out.items():
                for storage, _ in value.items():
                    if "MB" in storage or "GB" in storage:
                        if ";" in storage:
                            storage = storage.split(";")[-1]
                        return {"judge_page": True, "1": storage}
        return {"judge_page": False}


class SingleTask_Setting_7(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Display "
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Display ")
        if len(outs) == 0:
            return False
        return True

    def setting_ch(self, xml_compressed_tree):
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Dark theme ")
        found = False
        finish = False
        for out in outs:
            out = out.values()
            for single_out in out:
                for key, value in single_out.items():
                    if "RecyclerView" in key:
                        found = True
                        item = find_subtrees_of_parents_with_key(xml_compressed_tree, "Use Dark theme ")
                        for it in item:
                            it = it.values()
                            for single_it_ in it:
                                for key_, value_ in single_it_.items():
                                    if not "unchecked" in key_:
                                        if "checked" in key_:
                                            finish = True
                                            break
                        break
        if found:
            return {"judge_page": True, "1": finish, "complete": finish}
        else:
            return {"judge_page": False}

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Display ")
        found = False
        finish = False
        for out in outs:
            out = out.values()
            for single_out in out:
                for key, value in single_out.items():
                    if "RecyclerView" in key:
                        found = True
                        item = find_subtrees_of_parents_with_key(xml_compressed_tree, "Dark theme ")
                        for it in item:
                            it = it.values()
                            for single_it_ in it:
                                for key_, value_ in single_it_.items():
                                    if not "unchecked" in key_:
                                        if "checked" in key_ and "Dark theme" in key_:
                                            finish = True
                                            break
                        break
        if found:
            return {"judge_page": True, "1": finish, "complete": finish}
        else:
            return self.setting_ch(xml_compressed_tree)


class SingleTask_Setting_8(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Brightness level "
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Brightness level ")
        if len(outs) == 0:
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Brightness level ")
        finish = False
        for out in outs:
            out = out.values()
            for single_out in out:
                for key, value in single_out.items():
                    if "%" in key:
                        key = key.split(";")[-1].rstrip()
                        break
        if key == "0%":
            return {"judge_page": True, "1": True, "complete": True}
        else:
            return {"judge_page": True, "1": False, "complete": False}


class SingleTask_Setting_9(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        if "command" not in line:
            return {"judge_page": False}
        command = line["command"]
        if "0" in command["adb shell settings list system | grep volume_ring_speaker"]:
            return {"judge_page": True, "1": True, "complete": True}
        else:
            return {"judge_page": True, "1": False, "complete": False}


class SingleTask_Setting_10(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        if "command" not in line:
            return {"judge_page": False}
        command = line["command"]
        if "7" in command["adb shell settings list system | grep volume_alarm_speaker"]:
            return {"judge_page": True, "1": True, "complete": True}
        else:
            return {"judge_page": True, "1": False, "complete": False}


class SingleTask_Setting_11(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Text-to-speech output"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Chinese")
        if len(outs) > 0:
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_Setting_12(SingleTask):

    def judge_page(self, xml_compressed_tree):
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Set time automatically"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "May 1, 2024")
        if len(outs) > 0:
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_Setting_13(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Ring vibration "
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Ring vibration ")
        if len(outs) == 0:
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        finish = {"judge_page": True, "1": False, "complete": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Ring vibration ")
        for out in outs:
            out = out.values()
            for single_out in out:
                for key, value in single_out.items():
                    if "unchecked" in key:
                        finish = {"judge_page": True, "1": True, "complete": True}
                        break
        return finish


class SingleTask_Setting_14(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        if "command" not in line:
            return {"judge_page": False}
        command = line["command"]
        timezone = command["adb shell 'getprop persist.sys.timezone'"]
        if line["parsed_action"]["action"] != "finish":
            return {"judge_page": False}
        try:
            self.final_ground_truth = timezone
            if self.check_answer(line):
                return {"judge_page": True, "1": True, "complete": True}
            else:
                return {"judge_page": True, "1": False, "complete": False}
        except:
            return {"judge_page": True, "1": False, "complete": False}


class SingleTask_Setting_15(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Add a language"
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Add a language")
        if len(outs) == 0:
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Español (Estados Unidos)")
        if len(outs) == 0:
            return {"judge_page": True, "1": False, "complete": False}
        for out in outs:
            for key, value in out.items():
                for idx, judge_key in enumerate(value.keys()):
                    if "Español (Estados Unidos)" in judge_key:
                        if "2" in list(value.keys())[idx + 1]:
                            return {"judge_page": True, "1": True, "2": True, "complete": True}
                        else:
                            return {"judge_page": True, "1": True, "2": False, "complete": False}


class SingleTask_Setting_16(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        if line["parsed_action"]["action"] != "finish":
            return {"judge_page": False}
        try:
            self.final_ground_truth = "English (United States)"
            if self.check_answer(line):
                return {"judge_page": True, "1": True, "complete": True}
            else:
                return {"judge_page": True, "1": False, "complete": False}
        except:
            return {"judge_page": True, "1": False, "complete": False}


class SingleTask_Setting_17(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        if "command" not in line:
            return {"judge_page": False}
        command = line["command"]
        answer = command["adb shell getprop ro.build.version.release"]
        if line["parsed_action"]["action"] != "finish":
            return {"judge_page": False}
        try:
            self.final_ground_truth = answer
            if self.check_answer(line):
                return {"judge_page": True, "1": True, "complete": True}
            else:
                return {"judge_page": True, "1": False, "complete": False}
        except:
            return {"judge_page": True, "1": False, "complete": False}


class SingleTask_Setting_18(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Allowed"
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Allowed")
        if len(outs) == 0:
            return False
        return True

    def setting_18_ch(self, xml_compressed_tree):
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Allow notification access")
        found = 0
        finish = False
        for out in outs:
            out = out.values()
            for single_out in out:
                for key, value in single_out.items():
                    if found == 1:
                        if not ("unchecked" in key):
                            if "checked" in key:
                                finish = True
                                break
                    if found >= 1:
                        found += 1
                    if "Allow notification access" in key:
                        found += 1
        if found >= 1:
            if finish:
                return {"judge_page": True, "1": False, "complete": False}
            else:
                return {"judge_page": True, "1": True, "complete": True}
        else:
            return {"judge_page": False}

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return self.setting_18_ch(xml_compressed_tree)
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Allowed")
        found_item = False
        found = False
        finish = False
        for out in outs:
            out = out.values()
            for single_out in out:
                for key, value in single_out.items():
                    if found_item:
                        try:
                            for _key in value.keys():
                                if "Contacts" in _key:
                                    finish = True
                                    break
                        except AttributeError:
                            pass
                    if "Allowed" in key:
                        found_item = True
                    if "Not allowed" in key:
                        found_item = False
        if finish:
            return {"judge_page": True, "1": False, "complete": False}
        else:
            return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Setting_19(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Default browser app" 和 "Firefox"
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Default browser app")
        if len(outs) == 0:
            return False
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Firefox")
        if len(outs) == 0:
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Default browser app")
        for out in outs:
            for key, value in out.items():
                for judge_key, _ in value.items():
                    if "unchecked" in judge_key:
                        return {"judge_page": True, "1": False, "complete": False}
        return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Setting_20(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        if "command" not in line:
            return {"judge_page": False}
        command = line["command"]
        if "booking" in command["adb shell pm list packages | grep 'com.booking'"]:
            return {"judge_page": True, "1": False, "complete": False}
        else:
            return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Setting_21(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Settings " 和 "Search settings"
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Settings ")
        outs1 = find_subtrees_of_parents_with_key(xml_compressed_tree, "Search settings")
        if len(outs) == 0 or len(outs1) == 0:
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Setting_22(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        if "command" not in line:
            return {"judge_page": False}
        command = line["command"]
        answer = command["adb shell settings get global airplane_mode_on"]
        if answer == "1":
            answer = "open"
        else:
            answer = "not open"
        if line["parsed_action"]["action"] != "finish":
            return {"judge_page": False}
        try:
            self.final_ground_truth = answer
            if self.check_answer(line):
                return {"judge_page": True, "1": True, "complete": True}
            else:
                return {"judge_page": True, "1": False, "complete": False}
        except:
            return {"judge_page": True, "1": False, "complete": False}


from .setting import *

function_map = {
    'setting_0': SingleTask_Setting_0,
    'setting_1': SingleTask_Setting_1,
    'setting_2': SingleTask_Setting_2,
    'setting_3': SingleTask_Setting_3,
    'setting_4': SingleTask_Setting_4,
    'setting_5': SingleTask_Setting_5,
    'setting_6': SingleTask_Setting_6,
    'setting_7': SingleTask_Setting_7,
    'setting_8': SingleTask_Setting_8,
    'setting_9': SingleTask_Setting_9,
    'setting_10': SingleTask_Setting_10,
    'setting_11': SingleTask_Setting_11,
    'setting_12': SingleTask_Setting_12,
    'setting_13': SingleTask_Setting_13,
    'setting_14': SingleTask_Setting_14,
    'setting_15': SingleTask_Setting_15,
    'setting_16': SingleTask_Setting_16,
    'setting_17': SingleTask_Setting_17,
    'setting_18': SingleTask_Setting_18,
    'setting_19': SingleTask_Setting_19,
    'setting_20': SingleTask_Setting_20,
    'setting_21': SingleTask_Setting_21,
    'setting_22': SingleTask_Setting_22,
}


from evaluation.task import *


def extract_bills_NewEditBK(xml_compressed_tree) -> Dict:
    """
    {type, date, cash, note}
    type: TextView ;; ;; -> str
    date: TextView ;; ;; -> str()
    cash: EditText ;click long-click ; ;; -> int
    note: EditText ;click long-click ; ;; -> str
    """
    type = date = cash = note = ""
    results = {
        "type": type,
        "date": date,
        "cash": cash,
        "note": note
    }

    try:
        type_date_datas = find_matching_subtrees(xml_compressed_tree, "TextView ;; ;;")
        keys = [key for d in type_date_datas for key in d.keys()]
        type_key = keys[0]
        type_key = type_key.split(";; ;;")[-1].strip()
        type = type_key.split()[-1].strip()
        for key in keys:
            if re.search(r"January|February|March|April|May|June|July|August|September|October|November|December", key):
                date = key.split(";; ;;")[-1].strip()
                break
        results["type"] = type
        results["date"] = date
    except IndexError as e:
        # print(f"ERROR occured: Cannot find transaction type causes {e}.")
        pass

    try:
        cash_datas = find_subtrees_of_parents_with_key(xml_compressed_tree, "click ; ;;CNY")  # 若不存在则返回[]
        cash_datas = list(cash_datas[0].values())[0]  # 此时出错，（抛出异常）
        for key in cash_datas.keys():
            if "EditText" in key and "long-click" in key:
                cash = key.split(";;")[-1].strip()
                results["cash"] = cash
    except IndexError as e:
        # print(f"ERROR occured: Not using CNY causes {e}.")
        pass

    try:
        note_datas = find_matching_subtrees(xml_compressed_tree, "EditText")[-1]
        note = list(note_datas.keys())[0].split(";;")[-1].strip()
        # if note == "Notes":  # 如果在正确的note位置找不到的话，就找标题，毕竟两者差不多功能
        #     note_datas = find_matching_subtrees(xml_compressed_tree, "AutoCompleteTextView")[-1]
        #     note = list(note_datas.keys())[0].split(";;")[-1].strip()
        results["note"] = "None" if note in ("Notes", "Payee or item purchased", "Name of income") else note
    except IndexError as e:
        # print(f"ERROR occured: Cannot find note causes {e}.")
        pass

    return results


class SingleTask_bluecoins_1(SingleTask):

    def judge_page(self, line):
        if line["parsed_action"]["action"] != "finish":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "11,400.00 CNY"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_bluecoins_2(SingleTask):

    def judge_page(self, line):
        if line["parsed_action"]["action"] != "finish":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "Buying cake"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_bluecoins_3(SingleTask):

    def judge_page(self, line):
        if line["parsed_action"]["action"] != "finish":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "69.51 CNY"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_bluecoins_4(SingleTask):

    def judge_page(self, line):
        if line["parsed_action"]["action"] != "finish":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "Three transactions"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_bluecoins_5(SingleTask):

    def judge_page(self, line):
        if line["parsed_action"]["action"] != "finish":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(line):
            return {"judge_page": False}

        answer = "60.12 CNY"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_bluecoins_6(SingleTask):

    def judge_page(self, xml_compressed_tree):
        bill = extract_bills_NewEditBK(xml_compressed_tree)
        if bill.get("cash") == bill.get("note") == "":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        judge_type = judge_cash = False

        bill = extract_bills_NewEditBK(xml_compressed_tree)
        if bill.get("type") == "Expense":
            judge_type = True

        if bill.get("cash") in ("512", "512.00"):
            judge_cash = True

        return {
            "judge_page": True,
            "1": judge_type,
            "2": judge_cash,
            "complete": judge_type & judge_cash
        }


class SingleTask_bluecoins_7(SingleTask):

    def judge_page(self, xml_compressed_tree):
        bill = extract_bills_NewEditBK(xml_compressed_tree)
        if bill.get("cash") == bill.get("note") == "":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        judge_type = judge_cash = judge_note = False

        bill = extract_bills_NewEditBK(xml_compressed_tree)
        if bill.get("type") == "Income":
            judge_type = True

        if bill.get("cash") in ("8000", "8000.00"):
            judge_cash = True

        if bill.get("note").lower() == "salary":
            judge_note = True

        return {
            "judge_page": True,
            "1": judge_type,
            "2": judge_cash,
            "3": judge_note,
            "complete": judge_type & judge_cash & judge_note
        }


class SingleTask_bluecoins_8(SingleTask):

    def judge_page(self, xml_compressed_tree):
        bill = extract_bills_NewEditBK(xml_compressed_tree)
        if bill.get("cash") == bill.get("note") == "":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        judge_type = judge_date = judge_cash = False

        bill = extract_bills_NewEditBK(xml_compressed_tree)
        if bill.get("type") == "Expense":
            judge_type = True

        if bill.get("date") == "May 11, 2024":
            judge_date = True

        if bill.get("cash") in ("768", "768.00"):
            judge_cash = True

        return {
            "judge_page": True,
            "1": judge_type,
            "2": judge_date,
            "3": judge_cash,
            "complete": judge_type & judge_date & judge_cash
        }


class SingleTask_bluecoins_9(SingleTask):

    def judge_page(self, xml_compressed_tree):
        bill = extract_bills_NewEditBK(xml_compressed_tree)
        if bill.get("cash") == bill.get("note") == "":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        judge_type = judge_date = judge_cash = judge_note = False

        bill = extract_bills_NewEditBK(xml_compressed_tree)
        if bill.get("type") == "Income":
            judge_type = True

        if bill.get("date") == "March 8, 2024":
            judge_date = True

        if bill.get("cash") == "3.14":
            judge_cash = True

        if bill.get("note").lower() == "weixin red packet":
            judge_note = True

        return {
            "judge_page": True,
            "1": judge_type,
            "2": judge_date,
            "3": judge_cash,
            "4": judge_note,
            "complete": judge_type & judge_date & judge_cash & judge_note
        }


class SingleTask_bluecoins_10(SingleTask):

    def judge_page(self, xml_compressed_tree):
        bill = extract_bills_NewEditBK(xml_compressed_tree)
        if bill.get("cash") == bill.get("note") == "":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        judge_type = judge_date = judge_cash = judge_note = False
        bill = extract_bills_NewEditBK(xml_compressed_tree)

        if bill.get("type") == "Expense":
            judge_type = True

        if bill.get("date") == "May 14, 2024":
            judge_date = True

        if bill.get("cash") in ("256", "256.00"):
            judge_cash = True

        if bill.get("note").lower() == "eating":
            judge_note = True

        return {
            "judge_page": True,
            "1": judge_type,
            "2": judge_date,
            "3": judge_cash,
            "4": judge_note,
            "complete": judge_type & judge_date & judge_cash & judge_note
        }


class SingleTask_bluecoins_11(SingleTask):
    origin_bill = False

    def judge_page(self, xml_compressed_tree):
        bill = extract_bills_NewEditBK(xml_compressed_tree)
        if bill.get("cash") == bill.get("note") == "":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        bill = extract_bills_NewEditBK(xml_compressed_tree)

        if self.origin_bill is not True:
            if bill.get("date") == "May 15, 2024" and bill.get("cash") == "400.00":
                self.origin_bill = True
        else:
            judge_date = judge_cash = False

            if bill.get("date") == "May 15, 2024":
                judge_date = True

            if bill.get("cash") in ("500", "500.00"):
                judge_cash = True

            return {
                "judge_page": True,
                "1": judge_date,
                "2": judge_cash,
                "complete": judge_date & judge_cash
            }

        return {"judge_page": False}


class SingleTask_bluecoins_12(SingleTask):
    origin_bill = False

    def judge_page(self, xml_compressed_tree):
        bill = extract_bills_NewEditBK(xml_compressed_tree)
        if bill.get("cash") == bill.get("note") == "":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        bill = extract_bills_NewEditBK(xml_compressed_tree)

        if self.origin_bill is not True:
            if bill.get("date") == "May 12, 2024" and bill.get("cash") == "18000.00":
                self.origin_bill = True
        else:
            judge_date = judge_cash = False

            if bill.get("date") == "May 10, 2024":
                judge_date = True

            if bill.get("cash") in ("18250", "18250.00"):
                judge_cash = True

            return {
                "judge_page": True,
                "1": judge_date,
                "2": judge_cash,
                "complete": judge_date & judge_cash
            }

        return {"judge_page": False}


class SingleTask_bluecoins_13(SingleTask):
    origin_bill = False

    def judge_page(self, xml_compressed_tree):
        bill = extract_bills_NewEditBK(xml_compressed_tree)
        if bill.get("cash") == bill.get("note") == "":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        bill = extract_bills_NewEditBK(xml_compressed_tree)

        if self.origin_bill is not True:
            if bill.get("date") == "May 13, 2024" and bill.get("type") == "Expense":
                self.origin_bill = True
        else:
            judge_type = judge_sign = judge_date = judge_note = False
            if bill.get("type") == "Income":
                judge_type = True

            if bill.get("date") == "May 13, 2024":
                judge_date = True

            if bill.get("note").lower() == "gift":
                judge_note = True

            tvc_datas = find_matching_subtrees(xml_compressed_tree, "TextView ;click")
            keys = [key for d in tvc_datas for key in d.keys()]
            for key in keys:
                key = key.split("; ;;")[-1].strip()
                if key in ("+", "-"):
                    sign = key
                    break

            if sign == "+":
                judge_sign = True

            return {
                "judge_page": True,
                "1": judge_type,
                "2": judge_sign,
                "3": judge_date,
                "4": judge_note,
                "complete": judge_type & judge_sign & judge_date & judge_note
            }

        return {"judge_page": False}


class SingleTask_bluecoins_14(SingleTask):
    origin_bill = False

    def judge_page(self, xml_compressed_tree):
        bill = extract_bills_NewEditBK(xml_compressed_tree)
        if bill.get("cash") == bill.get("note") == "":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        bill = extract_bills_NewEditBK(xml_compressed_tree)

        if self.origin_bill is not True:
            if bill.get("date") == "May 2, 2024" and bill.get("type") == "Income":
                self.origin_bill = True
        else:
            judge_type = judge_sign = judge_date = judge_cash = judge_note = False

            if bill.get("type") == "Expense":
                judge_type = True

            if bill.get("date") == "May 2, 2024":
                judge_date = True

            if bill.get("cash") in ("520", "520.00"):
                judge_cash = True

            if bill.get("note").lower() == "wrong operation":
                judge_note = True
            sign = ""
            tvc_datas = find_matching_subtrees(xml_compressed_tree, "TextView ;click")
            keys = [key for d in tvc_datas for key in d.keys()]
            for key in keys:
                key = key.split("; ;;")[-1].strip()
                if key in ("+", "-"):
                    sign = key
                    break

            if sign == "-":
                judge_sign = True

            return {
                "judge_page": True,
                "1": judge_type,
                "2": judge_sign,
                "3": judge_date,
                "4": judge_cash,
                "5": judge_note,
                "complete": judge_type & judge_sign & judge_date & judge_cash & judge_note
            }

        return {"judge_page": False}


class SingleTask_bluecoins_15(SingleTask):
    origin_bill = False

    def judge_page(self, xml_compressed_tree):
        bill = extract_bills_NewEditBK(xml_compressed_tree)
        if bill.get("cash") == bill.get("note") == "":
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        bill = extract_bills_NewEditBK(xml_compressed_tree)

        if self.origin_bill is not True:
            if bill.get("date") == "May 12, 2024" and bill.get("cash") == "794.20":
                self.origin_bill = True
        else:
            judge_date = judge_cash = judge_note = False

            if bill.get("date") == "May 13, 2024":
                judge_date = True

            if bill.get("cash") == "936.02":
                judge_cash = True

            if bill.get("note").lower() == "grocery shopping":
                judge_note = True

            return {
                "judge_page": True,
                "1": judge_date,
                "2": judge_cash,
                "3": judge_note,
                "complete": judge_date & judge_cash & judge_note
            }

        return {"judge_page": False}


from .bluecoins import *

function_map = {
    'bluecoins_1': SingleTask_bluecoins_1,
    'bluecoins_2': SingleTask_bluecoins_2,
    'bluecoins_3': SingleTask_bluecoins_3,
    'bluecoins_4': SingleTask_bluecoins_4,
    'bluecoins_5': SingleTask_bluecoins_5,
    'bluecoins_6': SingleTask_bluecoins_6,
    'bluecoins_7': SingleTask_bluecoins_7,
    'bluecoins_8': SingleTask_bluecoins_8,
    'bluecoins_9': SingleTask_bluecoins_9,
    'bluecoins_10': SingleTask_bluecoins_10,
    'bluecoins_11': SingleTask_bluecoins_11,
    'bluecoins_12': SingleTask_bluecoins_12,
    'bluecoins_13': SingleTask_bluecoins_13,
    'bluecoins_14': SingleTask_bluecoins_14,
    'bluecoins_15': SingleTask_bluecoins_15,
}


from evaluation.task import *


def extract_alarms(data):
    def clock_end(key, Collapse=False):
        if not Collapse:
            if "Switch" in key and "checked" in key:
                return True
            return False
        else:
            if "Delete" in key or "Add alarm" in key:
                return True
            return False

    def split_string(str, splitter):
        str = str.split(";")
        for substr in str:
            if splitter in substr:
                return substr.split(splitter)[0].rstrip()

    elements = list(data.values())[0]
    alarms = []
    alarm = {}
    alarm["days"] = []
    Collapse = False
    for key, element in elements.items():
        if isinstance(element, str):
            continue
        if "Collapse" in key:
            Collapse = True
            alarm["Expand"] = True
        if clock_end(key, Collapse):
            if "unchecked" in key:
                alarm["status"] = "unchecked"
            else:
                alarm["status"] = "checked"
            alarms.append(alarm)
            alarm = {}
            Collapse = False
            alarm["days"] = []
        if "AM" in key or "PM" in key:
            alarm["time"] = key
        if "Label" in key:
            alarm["label"] = key
        days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun", "Not scheduled", "Today", "Tomorrow", "Every day"]

        for day in days:
            if day in key and "TextView" in key:
                alarm["days"].append(day)
        if "Ringtone" in key:
            alarm["ringtone"] = key
        if "Vibrate" in key:
            if "unchecked" in key:
                alarm["vibrate"] = "unchecked"
            else:
                alarm["vibrate"] = "checked"

    return alarms


class SingleTask_Clock_General(SingleTask):
    def split_string(self, str, splitter):
        str = str.split(";")
        for substr in str:
            if splitter in substr:
                return substr.split(splitter)[0].rstrip()


class SingleTask_Clock_1(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Alarm")
        outcome = {"judge_page": True, "1": False, "2": False, "3": False, "complete": False}

        for out in outs:
            alarms_data = extract_alarms(out)
            for alarm in alarms_data:
                try:
                    if '3:00\u200aPM' in alarm['time']:
                        outcome["1"] = True
                        try:
                            if self.split_string(alarm['label'], 'Label') == 'meeting':
                                outcome["2"] = True
                        except KeyError:
                            pass
                        try:
                            if alarm['status'] == 'checked':
                                outcome["3"] = True
                        except KeyError:
                            pass
                        try:
                            if alarm['status'] == 'checked' and self.split_string(alarm['label'],
                                                                                  'Label') == 'meeting' and '3:00\u200aPM' in \
                                    alarm['time']:
                                outcome["complete"] = True
                        except KeyError:
                            pass
                except KeyError:
                    pass

        return outcome


class SingleTask_Clock_2(SingleTask_Clock_General):

    def judge_page(self, xml_compressed_tree):
        # 可以根据需要在这里实现特定的页面判断逻辑
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Alarm")
        outcome = {"judge_page": True, "1": False, "2": False, "3": False, "4": False, "complete": False}

        for out in outs:
            alarms_data = extract_alarms(out)
            for alarm in alarms_data:
                try:
                    if '6:45\u200aAM' in alarm['time']:
                        outcome["1"] = True
                        try:
                            if alarm['vibrate'] == 'unchecked':
                                outcome["2"] = True
                        except KeyError:
                            pass
                        try:
                            if self.split_string(alarm["ringtone"], "Ringtone") == 'Argon':
                                outcome["3"] = True
                        except KeyError:
                            pass
                        try:
                            if alarm['status'] == 'checked':
                                outcome["4"] = True
                        except KeyError:
                            pass
                        try:
                            if alarm['status'] == 'checked' and self.split_string(alarm["ringtone"],
                                                                                  "Ringtone") == 'Argon' and \
                                    alarm['vibrate'] == 'unchecked' and '6:45\u200aAM' in alarm['time']:
                                outcome["complete"] = True
                        except KeyError:
                            pass
                except KeyError:
                    pass

        return outcome


class SingleTask_Clock_3(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Alarm")
        outcome = {"judge_page": True, "1": False, "2": False, "3": False, "complete": False}

        for out in outs:
            alarms_data = extract_alarms(out)
            for alarm in alarms_data:
                try:
                    if '7:00\u200aAM' in alarm['time']:
                        outcome["1"] = True
                        try:
                            if alarm['days'] == ['Mon', 'Tue', 'Wed', 'Thu', 'Fri']:
                                outcome["2"] = True
                        except KeyError:
                            pass
                        try:
                            if alarm['status'] == 'checked':
                                outcome["3"] = True
                        except KeyError:
                            pass
                        try:
                            if alarm['status'] == 'checked' and alarm['days'] == ['Mon', 'Tue', 'Wed', 'Thu',
                                                                                  'Fri'] and '7:00\u200aAM' in alarm[
                                'time']:
                                outcome["complete"] = True
                        except KeyError:
                            pass
                except KeyError:
                    pass

        return outcome


class SingleTask_Clock_4(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Alarm")
        outcome = {"judge_page": True, "1": False, "2": False, "3": False, "complete": False}

        for out in outs:
            alarms_data = extract_alarms(out)
            for alarm in alarms_data:
                try:
                    if '9:00\u200aAM' in alarm['time']:
                        outcome["1"] = True
                        try:
                            if alarm['days'] == ['Every day']:
                                outcome["2"] = True
                        except KeyError:
                            pass
                        try:
                            if alarm['status'] == 'checked':
                                outcome["3"] = True
                        except KeyError:
                            pass
                        try:
                            if '9:00\u200aAM' in alarm['time'] and alarm['days'] == ['Every day'] and alarm[
                                'status'] == 'checked':
                                outcome["complete"] = True
                        except KeyError:
                            pass
                except KeyError:
                    pass

        return outcome


class SingleTask_Clock_5(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Alarm")
        outcome = {"judge_page": True, "1": False, "2": False, "3": False, "complete": False}

        for out in outs:
            alarms_data = extract_alarms(out)
            for alarm in alarms_data:
                try:
                    if '10:30\u200aAM' in alarm['time']:
                        outcome["1"] = True
                        try:
                            if alarm['days'] == ['Tomorrow']:
                                outcome["2"] = True
                        except KeyError:
                            pass
                        try:
                            if alarm['status'] == 'checked':
                                outcome["3"] = True
                        except KeyError:
                            pass
                        try:
                            if '10:30\u200aAM' in alarm['time'] and alarm['days'] == ['Tomorrow'] and alarm[
                                'status'] == 'checked':
                                outcome["complete"] = True
                        except KeyError:
                            pass
                except KeyError:
                    pass

        return outcome


class SingleTask_Clock_6(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Alarm")
        outcome = {"judge_page": True, "1": False, "2": False, "3": False, "4": False, "complete": False}

        for out in outs:
            alarms_data = extract_alarms(out)
            for alarm in alarms_data:
                try:
                    if '10:30\u200aPM' in alarm['time']:
                        outcome["1"] = True
                        try:
                            if alarm['days'] == ['Sat', 'Sun']:
                                outcome["2"] = True
                        except KeyError:
                            pass
                        try:
                            if self.split_string(alarm['label'], 'Label') == 'Watch Football Games':
                                outcome["3"] = True
                        except KeyError:
                            pass
                        try:
                            if alarm['status'] == 'checked':
                                outcome["4"] = True
                        except KeyError:
                            pass
                        try:
                            if alarm['status'] == 'checked' and self.split_string(alarm['label'],
                                                                                  'Label') == 'Watch Football Games' and \
                                    alarm['days'] == ['Sat', 'Sun'] and '10:30\u200aPM' in alarm['time']:
                                outcome["complete"] = True
                        except KeyError:
                            pass
                except KeyError:
                    pass

        return outcome


class SingleTask_Clock_7(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_matching_subtrees(xml_compressed_tree, "Alarm")
        outcome = {"judge_page": True, "1": False, "complete": False}
        if len(outs) == 0 or (len(outs) == 1 and "click ; ;;Alarm" in next(iter(outs[0]))):
            return outcome

        for out in outs:
            alarms_data = extract_alarms(out)
            for alarm in alarms_data:
                try:
                    if alarm['status'] != 'unchecked':
                        return outcome
                except KeyError:
                    break

        outcome["1"] = True
        outcome["complete"] = True

        return outcome


class SingleTask_Clock_8(SingleTask_Clock_General):

    def get_time(self, str):
        strs = str.split(";")
        for substr in strs:
            if "PM" in substr:
                time = substr.split("\u200a")[0]
                hour = int(time.split(":")[0])
                minute = int(time.split(":")[1])
                return hour, minute

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_matching_subtrees(xml_compressed_tree, "Alarm")
        outcome = {"judge_page": True, "1": False, "complete": False}
        if len(outs) == 0 or (len(outs) == 1 and "click ; ;;Alarm" in next(iter(outs[0]))):
            return outcome

        for out in outs:
            alarms_data = extract_alarms(out)
            for alarm in alarms_data:
                try:
                    if "PM" in alarm["time"] and (self.get_time(alarm["time"])[0] > 2 or (
                            self.get_time(alarm["time"])[0] == 2 and self.get_time(alarm["time"])[1] > 0)):
                        return outcome
                except KeyError:
                    pass

        outcome["1"] = True
        outcome["complete"] = True

        return outcome


class SingleTask_Clock_9(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_matching_subtrees(xml_compressed_tree, "Alarm")
        outcome = {"judge_page": True, "1": False, "complete": False}
        if len(outs) == 0 or (len(outs) == 1 and "click ; ;;Alarm" in next(iter(outs[0]))):
            return outcome

        for out in outs:
            alarms_data = extract_alarms(out)
            for alarm in alarms_data:
                try:
                    if "4:00\u200aPM" in alarm["time"]:
                        if alarm['status'] == 'unchecked':
                            outcome["1"] = True
                            outcome["complete"] = True
                            break
                except KeyError:
                    pass

        return outcome


class SingleTask_Clock_10(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        answer = "7:30AM"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_Clock_11(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        answer = "No"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_Clock_12(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        answer = "Yes"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_Clock_13(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        answer = "Two alarms"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_Clock_14(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        answer = "No"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_Clock_15(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outcome = {"judge_page": True, "1": False, "2": False, "complete": False}
        outs_london = find_subtrees_of_parents_with_key(xml_compressed_tree, "London")
        outs_barcelona = find_subtrees_of_parents_with_key(xml_compressed_tree, "Barcelona")

        if len(outs_london) > 0:
            outcome["1"] = True
        if len(outs_barcelona) > 0:
            outcome["2"] = True

        outcome["complete"] = outcome["1"] and outcome["2"]
        return outcome


class SingleTask_Clock_16(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        answer = "6 hours behind"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_Clock_17(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outcome = {"judge_page": True, "1": False, "complete": False}
        outs_barcelona = find_subtrees_of_parents_with_key(xml_compressed_tree, "Barcelona")
        try:
            selected_dict = find_matching_subtrees(xml_compressed_tree, "focusable ; selected ; selected")[0]
            selected = next(iter(selected_dict))
            if "Clock" not in selected:
                return outcome
        except:
            return {"judge_page": False}

        if len(outs_barcelona) == 0:
            outcome["1"] = True
            outcome["complete"] = True

        return outcome


class SingleTask_Clock_18(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outs = find_matching_subtrees(xml_compressed_tree, "TextView")
        outcome = {"judge_page": True, "1": False, "2": False, "3": False, "complete": False}

        for out in outs:
            for key, value in out.items():
                if "hour" in key and "minute" in key and "second" in key:
                    hour = key.split("hour")[0].rstrip().split(" ")[-1]
                    minute = key.split("minute")[0].rstrip().split(" ")[-1]
                    second = key.split("second")[0].rstrip().split(" ")[-1]
                    if hour == "1":
                        outcome["1"] = True
                    if minute == "15":
                        outcome["2"] = True
                    if second == "0":
                        outcome["3"] = True

        outcome["complete"] = outcome["1"] and outcome["2"] and outcome["3"]
        return outcome


class SingleTask_Clock_19(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outcome = {"judge_page": True, "1": False, "2": False, "complete": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "BEDTIME")

        for out in outs:
            out = out.values()
            for single_out in out:
                for key, value in single_out.items():
                    if "Bedtime" in key:
                        bed_time = key.split("Bedtime")[-1].split()
                        b_time, m_or_n = bed_time[0], bed_time[1]
                        b_hour, b_min = b_time.split(":")
                        if m_or_n == 'PM':
                            outcome["1"] = (b_hour == "10" and b_min == "00")
                        else:
                            outcome["1"] = False
                    if "Wake-up" in key:
                        wake_time = key.split("Wake-up")[-1].split()
                        w_time, m_or_n = wake_time[0], wake_time[1]
                        w_hour, w_min = w_time.split(":")
                        if m_or_n == 'AM':
                            outcome["2"] = (w_hour == "7" and w_min == "00")
                        else:
                            outcome["2"] = False

        outcome["complete"] = outcome["1"] and outcome["2"]
        return outcome


class SingleTask_Clock_20(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outcome = {"judge_page": True, "1": False, "complete": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Alarm")

        for out in outs:
            out = out.values()
            for single_out in out:
                for key, value in single_out.items():
                    if "sleep sound" in key:
                        str = key.split("sleep sound ")[-1].rstrip()
                        if str == "Deep space":
                            outcome["1"] = True
                            outcome["complete"] = True
                            break

        return outcome


class SingleTask_Clock_21(SingleTask_Clock_General):

    def judge_page(self, xml_compressed_tree):
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "AM Wake-up 7:00")
        if len(outs) > 0:
            return True
        else:
            return False

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outcome = {"judge_page": True, "1": False, "complete": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "AM Wake-up 7:00")

        for out in outs:
            out = out.values()
            for single_out in out:
                for key, value in single_out.items():
                    if "click check ; checked" in key:
                        outcome["1"] = True
                        outcome["complete"] = True
                        break

        return outcome


class SingleTask_Clock_22(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outcome = {"judge_page": True, "1": True, "complete": True}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Analog")

        if len(outs) == 0:
            outcome["1"] = False
            outcome["complete"] = False

        return outcome


class SingleTask_Clock_23(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outcome = {"judge_page": True, "1": False, "complete": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Home time zone ")

        for out in outs:
            out = out.values()
            for single_out in out:
                for key, value in single_out.items():
                    if "Tokyo" in key:
                        outcome["1"] = True
                        outcome["complete"] = True
                        break

        return outcome


class SingleTask_Clock_24(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outcome = {"judge_page": True, "1": False, "complete": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Silence after ")

        for out in outs:
            out = out.values()
            for single_out in out:
                for key, value in single_out.items():
                    key = key.split(";")[-1]
                    if key == "5 minutes ":
                        outcome["1"] = True
                        outcome["complete"] = True
                        break

        return outcome


class SingleTask_Clock_25(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outcome = {"judge_page": True, "1": False, "complete": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Alarm")
        outs_2 = find_subtrees_of_parents_with_key(xml_compressed_tree, "Clock")
        outs_3 = find_subtrees_of_parents_with_key(xml_compressed_tree, "Timer")
        outs_4 = find_subtrees_of_parents_with_key(xml_compressed_tree, "Stopwatch")

        if len(outs) > 0 and len(outs_2) > 0 and len(outs_3) > 0 and len(outs_4) > 0:
            outcome["1"] = True
            outcome["complete"] = True

        return outcome


class SingleTask_Clock_26(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outcome = {"judge_page": True, "1": False, "complete": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Alarm")

        for out in outs:
            alarms_data = extract_alarms(out)
            for alarm in alarms_data:
                try:
                    if '7:30' in alarm['time'] and "AM" in alarm["time"]:
                        if alarm['status'] == 'unchecked':
                            outcome["1"] = True
                            outcome["complete"] = True
                            break
                except KeyError:
                    pass

        return outcome


class SingleTask_Clock_27(SingleTask_Clock_General):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        outcome = {"judge_page": True, "1": False, "complete": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Alarm")

        for out in outs:
            alarms_data = extract_alarms(out)
            for alarm in alarms_data:
                try:
                    if '3:00' in alarm["time"] and "PM" in alarm["time"]:
                        if alarm['status'] == 'checked':
                            outcome["1"] = True
                            outcome["complete"] = True
                except KeyError:
                    pass

        return outcome


from .clock import *
from .clock import *

function_map = {
    'clock_1': SingleTask_Clock_1,
    'clock_2': SingleTask_Clock_2,
    'clock_3': SingleTask_Clock_3,
    'clock_4': SingleTask_Clock_4,
    'clock_5': SingleTask_Clock_5,
    'clock_6': SingleTask_Clock_6,
    'clock_7': SingleTask_Clock_7,
    'clock_8': SingleTask_Clock_8,
    'clock_9': SingleTask_Clock_9,
    'clock_10': SingleTask_Clock_10,
    'clock_11': SingleTask_Clock_11,
    'clock_12': SingleTask_Clock_12,
    'clock_13': SingleTask_Clock_13,
    'clock_14': SingleTask_Clock_14,
    'clock_15': SingleTask_Clock_15,
    'clock_16': SingleTask_Clock_16,
    'clock_17': SingleTask_Clock_17,
    'clock_18': SingleTask_Clock_18,
    'clock_19': SingleTask_Clock_19,
    'clock_20': SingleTask_Clock_20,
    'clock_21': SingleTask_Clock_21,
    'clock_22': SingleTask_Clock_22,
    'clock_23': SingleTask_Clock_23,
    'clock_24': SingleTask_Clock_24,
    'clock_25': SingleTask_Clock_25,
    'clock_26': SingleTask_Clock_26,
    'clock_27': SingleTask_Clock_27,
}
'''
function_map = {
    'clock_1': clock_1,
    'clock_2': clock_2,
    'clock_3': clock_3,
    'clock_4': clock_4,
    'clock_5': clock_5,
    'clock_6': clock_6,
    'clock_7': clock_7,
    'clock_8': clock_8,
    'clock_9': clock_9,
    'clock_10': clock_10,
    'clock_11': clock_11,
    'clock_12': clock_12,
    'clock_13': clock_13,
    'clock_14': clock_14,
    'clock_15': clock_15,
    'clock_16': clock_16,
    'clock_17': clock_17,
    'clock_18': clock_18,
    'clock_19': clock_19,
    'clock_20': clock_20,
    'clock_21': clock_21,
    'clock_22': clock_22,
    'clock_23': clock_23,
    'clock_24': clock_24,
    'clock_25': clock_25,
    'clock_26': clock_26,
    'clock_27': clock_27,
}'''


from evaluation.task import *


class SingleTask_calendar_1(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Stanford"、"My location" 和 "Start"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "work"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        key_1 = True
        key_2 = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Today")
        if (len(outs) == 0):
            key_1 = False
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "5:00 PM")
        if ((len(outs) == 0)):
            key_2 = False
        return {"judge_page": True, "1": True, "2": key_1, "3": key_2, "complete": key_1 and key_2}


class SingleTask_calendar_2(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Stanford"、"My location" 和 "Start"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "homework"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        key_2 = True
        key_3 = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "May 21")
        if ((len(outs) == 0)):
            key_2 = False
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "10 minutes before ")
        if ((len(outs) == 0)):
            key_3 = False
        return {"judge_page": True, "1": True, "2": key_2, "3": key_3, "complete": key_2 and key_3}


class SingleTask_calendar_3(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Stanford"、"My location" 和 "Start"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "meeting"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        key_2 = True
        key_3 = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "May 13")
        if ((len(outs) == 0)):
            key_2 = False
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "conference room B202 ")
        if ((len(outs) == 0)):
            key_3 = False
        return {"judge_page": True, "1": True, "2": key_2, "3": key_3, "complete": key_2 and key_3}


class SingleTask_calendar_4(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Stanford"、"My location" 和 "Start"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "new month"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        key_1 = True
        key_2 = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Jun 01")
        if (len(outs) == 0):
            key_1 = False
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Monthly")
        if ((len(outs) == 0)):
            key_2 = False
        return {"judge_page": True, "1": True, "2": key_1, "3": key_2, "complete": key_1 and key_2}


class SingleTask_calendar_5(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Stanford"、"My location" 和 "Start"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "work"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        key_1 = True
        key_2 = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Today")
        if (len(outs) == 0):
            key_1 = False
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "7:00 PM")
        if ((len(outs) == 0)):
            key_2 = False
        return {"judge_page": True, "1": True, "2": key_1, "3": key_2, "complete": key_1 and key_2}


class SingleTask_calendar_6(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Stanford"、"My location" 和 "Start"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "homework"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        self.edit_started_correctly = False
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        key = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "homework")
        if (len(outs) == 0):
            key = False
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "May 21")
        if (len(outs) == 0):
            key = False
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "10 minutes before ")
        if ((len(outs) == 0)):
            key = False
        if (key):
            self.edit_started_correctly = True
        key_1 = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "classroom 101")
        if (len(outs) == 0):
            key_1 = False
        return {"judge_page": True, "1": True, "2": self.edit_started_correctly, "3": key_1,
                "complete": self.edit_started_correctly and key_1}


class SingleTask_calendar_7(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Stanford"、"My location" 和 "Start"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "meeting"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        self.edit_started_correctly = False
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        key = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "meeting")
        if (len(outs) == 0):
            return False
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "May 13")
        if (len(outs) == 0):
            key = False
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "conference room B202 ")
        if ((len(outs) == 0)):
            key = False
        if (key):
            self.edit_started_correctly = True
        key_1 = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "30 minutes before")
        if (len(outs) == 0):
            key_1 = False
        return {"judge_page": True, "1": True, "2": self.edit_started_correctly, "3": key_1,
                "complete": self.edit_started_correctly and key_1}


class SingleTask_calendar_8(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Stanford"、"My location" 和 "Start"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "work"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        self.edit_started_correctly = False
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        key = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "work")
        if (len(outs) == 0):
            return False
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Today")
        if (len(outs) == 0):
            key = False
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "5:00 PM")
        if ((len(outs) == 0)):
            key = False
        if (key):
            self.edit_started_correctly = True
        key_1 = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "30 minutes before")
        if (len(outs) == 0):
            key_1 = False
        return {"judge_page": True, "1": True, "2": self.edit_started_correctly, "3": key_1,
                "complete": self.edit_started_correctly and key_1}


class SingleTask_calendar_9(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Stanford"、"My location" 和 "Start"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "work"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        self.edit_started_correctly = False
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        key = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "work")
        if (len(outs) == 0):
            return False
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Today")
        if (len(outs) == 0):
            key = False
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "5:00 PM")
        if ((len(outs) == 0)):
            key = False
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "30 minutes before")
        if ((len(outs) == 0)):
            key = False
        if (key):
            self.edit_started_correctly = True
        key_1 = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Daily")
        if (len(outs) == 0):
            key_1 = False
        return {"judge_page": True, "1": True, "2": self.edit_started_correctly, "3": key_1,
                "complete": self.edit_started_correctly and key_1}


class SingleTask_calendar_10(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Stanford"、"My location" 和 "Start"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "this_day"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        return {"judge_page": True, "1": True, "complete": True}


class SingleTask_calendar_11(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Stanford"、"My location" 和 "Start"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "this day"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        self.edit_started_correctly = True
        key_1 = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Weekly")
        if (len(outs) == 0):
            key_1 = False
        return {"judge_page": True, "1": True, "2": self.edit_started_correctly, "3": key_1,
                "complete": self.edit_started_correctly and key_1}


class SingleTask_calendar_12(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Stanford"、"My location" 和 "Start"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "this day"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Weekly")
        if (len(outs) > 0):
            self.edit_started_correctly = True
        key_1 = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Hello")
        if (len(outs) == 0):
            key_1 = False
        return {"judge_page": True, "1": True, "2": self.edit_started_correctly, "3": key_1,
                "complete": self.edit_started_correctly and key_1}


class SingleTask_calendar_13(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Stanford"、"My location" 和 "Start"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "exam"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        return {"judge_page": True, "1": True, "complete": True}


class SingleTask_calendar_14(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Stanford"、"My location" 和 "Start"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "exam"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}
        self.edit_started_correctly = True
        key_1 = True
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Yearly")
        if (len(outs) == 0):
            key_1 = False
        return {"judge_page": True, "1": True, "2": self.edit_started_correctly, "3": key_1,
                "complete": self.edit_started_correctly and key_1}


from .calendar import *

function_map = {
    'calendar_1': SingleTask_calendar_1,
    'calendar_2': SingleTask_calendar_2,
    'calendar_3': SingleTask_calendar_3,
    'calendar_4': SingleTask_calendar_4,
    'calendar_5': SingleTask_calendar_5,
    'calendar_6': SingleTask_calendar_6,
    'calendar_7': SingleTask_calendar_7,
    'calendar_8': SingleTask_calendar_8,
    'calendar_9': SingleTask_calendar_9,
    'calendar_10': SingleTask_calendar_10,
    'calendar_11': SingleTask_calendar_11,
    'calendar_12': SingleTask_calendar_12,
    'calendar_13': SingleTask_calendar_13,
    'calendar_14': SingleTask_calendar_14,
    # 'calendar_15': SingleTask_calendar_15,
}


{
  "bluecoins_1": 3,
  "bluecoins_10": 9,
  "bluecoins_11": 8,
  "bluecoins_12": 10,
  "bluecoins_13": 10,
  "bluecoins_14": 12,
  "bluecoins_15": 12,
  "bluecoins_2": 5,
  "bluecoins_3": 3,
  "bluecoins_4": 4,
  "bluecoins_5": 3,
  "bluecoins_6": 5,
  "bluecoins_7": 7,
  "bluecoins_8": 7,
  "bluecoins_9": 9,
  "calendar_1": 10,
  "calendar_10": 5,
  "calendar_11": 6,
  "calendar_12": 7,
  "calendar_13": 5,
  "calendar_14": 6,
  "calendar_15": 8,
  "calendar_2": 10,
  "calendar_3": 10,
  "calendar_4": 12,
  "calendar_5": 8,
  "calendar_6": 6,
  "calendar_7": 6,
  "calendar_8": 6,
  "calendar_9": 6,
  "cantook_1": 4,
  "cantook_10": 2,
  "cantook_11": 5,
  "cantook_12": 7,
  "cantook_2": 2,
  "cantook_3": 2,
  "cantook_4": 4,
  "cantook_5": 4,
  "cantook_6": 4,
  "cantook_7": 5,
  "cantook_8": 4,
  "cantook_9": 5,
  "clock_1": 8,
  "clock_10": 1,
  "clock_11": 1,
  "clock_12": 2,
  "clock_13": 1,
  "clock_14": 1,
  "clock_15": 5,
  "clock_16": 2,
  "clock_17": 3,
  "clock_18": 7,
  "clock_19": 7,
  "clock_2": 10,
  "clock_20": 4,
  "clock_21": 4,
  "clock_22": 5,
  "clock_23": 5,
  "clock_24": 4,
  "clock_25": 1,
  "clock_26": 2,
  "clock_27": 5,
  "clock_3": 11,
  "clock_4": 7,
  "clock_5": 7,
  "clock_6": 13,
  "clock_7": 2,
  "clock_8": 2,
  "clock_9": 2,
  "contacts_1": 7,
  "contacts_10": 3,
  "contacts_11": 5,
  "contacts_12": 2,
  "contacts_13": 2,
  "contacts_14": 2,
  "contacts_15": 2,
  "contacts_2": 13,
  "contacts_3": 13,
  "contacts_4": 7,
  "contacts_5": 10,
  "contacts_6": 8,
  "contacts_7": 16,
  "contacts_8": 9,
  "contacts_9": 5,
  "google_1": 5,
  "google_2": 5,
  "google_3": 5,
  "google_4": 6,
  "google_5": 6,
  "google_6": 6,
  "google_7": 6,
  "google_8": 8,
  "google_9": 10,
  "map_1": 9,
  "map_10": 7,
  "map_11": 5,
  "map_12": 7,
  "map_13": 7,
  "map_14": 7,
  "map_15": 7,
  "map_2": 8,
  "map_3": 9,
  "map_4": 9,
  "map_5": 10,
  "map_6": 10,
  "map_7": 5,
  "map_8": 7,
  "map_9": 5,
  "pimusic_1": 2,
  "pimusic_10": 5,
  "pimusic_11": 2,
  "pimusic_12": 3,
  "pimusic_2": 3,
  "pimusic_3": 2,
  "pimusic_4": 4,
  "pimusic_5": 3,
  "pimusic_6": 4,
  "pimusic_7": 4,
  "pimusic_8": 5,
  "pimusic_9": 6,
  "setting_0": 3,
  "setting_1": 5,
  "setting_10": 3,
  "setting_11": 8,
  "setting_12": 8,
  "setting_13": 5,
  "setting_14": 4,
  "setting_15": 8,
  "setting_16": 5,
  "setting_17": 4,
  "setting_18": 7,
  "setting_19": 5,
  "setting_2": 7,
  "setting_20": 6,
  "setting_21": 1,
  "setting_22": 2,
  "setting_3": 5,
  "setting_4": 7,
  "setting_5": 2,
  "setting_6": 2,
  "setting_7": 5,
  "setting_8": 5,
  "setting_9": 3,
  "zoom_1": 3,
  "zoom_2": 7,
  "zoom_3": 5,
  "zoom_4": 5,
  "zoom_5": 6
}

from evaluation.task import *


class SingleTask_Mapme_1(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        answer = "73 km, 12 hr 58 min"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_Mapme_2(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        answer = "7.0 km, 8 min"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_Mapme_3(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        answer = "4 hr 7 min"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_Mapme_4(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        answer = "subway 824 and subway EB"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_Mapme_5(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        answer = "public transportation"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_Mapme_6(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        answer = "public transportation"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_Mapme_7(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        answer = "Teléferic Barcelona"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_Mapme_8(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        answer = "Teléferic Barcelona, about 3min"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_Mapme_9(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        answer = "The Clement Hotel - All Inclusive"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_Mapme_10(SingleTask):

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        answer = "9min"
        self.save_answer(answer)
        if self.check_answer(line):
            outcome = {"judge_page": True, "1": True, "complete": True}
        else:
            outcome = {"judge_page": True, "1": False, "complete": False}
        return outcome


class SingleTask_Mapme_11(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "My places "、"Home" 和 "Work "
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "My places "):
            return False
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Home"):
            return False
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Work "):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        judge_key = False
        outs = find_subtrees_of_parents_with_key(xml_compressed_tree, "Work ")
        for out in outs:
            for single_out in out.values():
                try:
                    for value in single_out.keys():
                        value = value.split(";")[-1]
                        if value == "18th Street, 3180 • 50.6 km ":
                            judge_key = True
                except:
                    pass
        return {"judge_page": True, "1": judge_key, "complete": judge_key}


class SingleTask_Mapme_12(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Stanford"、"My location" 和 "Start"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Stanford"):
            return False
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "My location"):
            return False
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Start"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        print("Stanford, My location, Start are all in the page")
        return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Mapme_13(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Stanford"、"My location" 和 "Start"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "University South"):
            return False
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "My location"):
            return False
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Start"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        print("University South, My location, Start are all in the page")
        return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Mapme_14(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Stanford"、"My location" 和 "Start"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "OpenAI"):
            return False
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "My location"):
            return False
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Start"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        print("OpenAI, My location, Start are all in the page")
        return {"judge_page": True, "1": True, "complete": True}


class SingleTask_Mapme_15(SingleTask):

    def judge_page(self, xml_compressed_tree):
        # 判断是否包含 "Stanford"、"My location" 和 "Start"
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "University of California, Berkeley"):
            return False
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "My location"):
            return False
        if not find_subtrees_of_parents_with_key(xml_compressed_tree, "Start"):
            return False
        return True

    def judge(self, xml_compressed_tree, line):
        if not self.judge_page(xml_compressed_tree):
            return {"judge_page": False}

        print("University of California, Berkeley, My location, Start are all in the page")
        return {"judge_page": True, "1": True, "complete": True}


from .map import *

function_map = {
    'map_1': SingleTask_Mapme_1,
    'map_2': SingleTask_Mapme_2,
    'map_3': SingleTask_Mapme_3,
    'map_4': SingleTask_Mapme_4,
    'map_5': SingleTask_Mapme_5,
    'map_6': SingleTask_Mapme_6,
    'map_7': SingleTask_Mapme_7,
    'map_8': SingleTask_Mapme_8,
    'map_9': SingleTask_Mapme_9,
    'map_10': SingleTask_Mapme_10,
    'map_11': SingleTask_Mapme_11,
    'map_12': SingleTask_Mapme_12,
    'map_13': SingleTask_Mapme_13,
    'map_14': SingleTask_Mapme_14,
    'map_15': SingleTask_Mapme_15,
}