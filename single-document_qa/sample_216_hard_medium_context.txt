Abstract of thesis entitled
“Online Mechanisms for Dynamic Resource
Provisioning in Cloud Computing”
Submitted by
SHI Weijie
for the degree of Doctor of Philosophy
at The University of Hong Kong
in March, 2016
Auction mechanisms, which have recently attracted substantial attention, are
eﬃcient approaches to resource allocation and pricing in cloud computing.
In contrast to ﬁxed price policy, auction mechanism can adapt to realtime
demand/supply changes, achieving maximal market eﬃciency and provider
revenue. Cloud users arrive in an online fashion, requiring the provider to
provision resources on demand, which complicates the design of the mecha-
nism compared with oﬄine mechanisms. Although some online mechanisms
have been proposed in this ﬁeld, existing solutions are still not completely
satisfactory, especially for heterogeneous types of Virtual Machines (VM) and
bandwidth resources. In this thesis, we propose eﬃcient online mechanisms for
computational and communication resources provisioning, using techniques of
primal-dual optimization and auction theory.
We ﬁrst investigate the online auctions for heterogeneous types of VMs with
and without user budget, respectively. For the model without user budget,
we propose a truthful online mechanism that timely responds to incoming
users’ demands and makes dynamic allocation decisions, while guaranteeing
system eﬃciency, using the pricing curve technique. For the model with user
budget constraint, we use primal-dual technique to decompose the online com-
binatorial optimization into a series of independent single-user optimization
problems, and solve the single-user problem with randomized auctions. In
both solutions, our mechanisms provision diﬀerent types of VMs dynamically,
adjusting the number of instances of VMs to realtime user demand.
Next, we turn to bandwidth resource allocation in cloud computing. We nov-
elly exploit the Shapley value in the auction mechanism design, and present


the ﬁrst dynamic pricing mechanism for inter-datacenter on-demand band-
width. Our auctions, including both oﬄine and online version, are expressive
enough to accept bids as a ﬂat bandwidth rate plus a time duration, or a data
volume with a transfer deadline, and achieve approximately eﬃciency in social
welfare.
Finally, we combine the computational resources with the communication re-
sources under a uniﬁed framework, and propose the ﬁrst online algorithm
for dynamic Virtual Cluster (VC) provisioning and pricing, which optimally
places VCs, routes inter-VM traﬃc and charges a market-driven price for each
VC. We use the pricing-curve method to design a social welfare maximizing
auction, and then convert it to a revenue maximizing online auction using
randomized payment boosting technique.
Through theoretical analysis and trace-driven simulations, we rigorously ex-
amine the eﬃciency of our mechanisms comparing with both the theoretical
optima and existing solutions.
(361 words)


Online Mechanisms for
Dynamic Resource Provisioning
in Cloud Computing
by
SHI Weijie
Department of Computer Science
The University of Hong Kong
Supervised by
Prof. WU Chuan
A thesis submitted in partial fulﬁllment of the requirements for
the degree of Doctor of Philosophy in Computer Science
at The University of Hong Kong
March, 2016




Declaration
I declare that this thesis represents my own work, except where due acknowl-
edgement is made, and that it has not been previously included in any thesis,
dissertation or report submitted to this university or any institution for any
diploma, degree or other qualiﬁcations.
Signed:
SHI Weijie
March, 2016
i


Acknowledgements
I would like to express my hearty gratitude to my supervisors, Dr. Chuan
Wu, for her guidance in my research. I also want to thank my parents and
my wife, who support and accompany me during my PhD studies.
ii


Publications
During my PhD study, I have the following publications.
[1] Weijie Shi, Chuan Wu and Zongpeng Li. “An Online Mechanism for Dy-
namic Virtual Cluster Provisioning in Geo-Distributed Clouds”, in the Pro-
ceedings of IEEE INFOCOM 2016, San Francisco, CA, USA.
[2] Weijie Shi, Linquan Zhang, Chuan Wu, Zongpeng Li and Francis C.M.
Lau. “An Online Auction Framework for Dynamic Resource Provisioning in
Cloud Computing”, in IEEE/ACM Transactions on Networking 2015.
[3] Weijie Shi, Chuan Wu and Zongpeng Li. “A Shapley-value Mechanism
for Bandwidth On Demand between Datacenters”, in IEEE Transactions on
Cloud Computing, 2015.
[4] Weijie Shi, Linquan Zhang, Chuan Wu, Zongpeng Li and Francis C.M.
Lau. “An Online Auction Framework for Dynamic Resource Provisioning in
Cloud Computing”, in the Proceedings of ACM SIGMETRICS 2014, Austin,
TX, USA, June 16-20, 2014.
[5] Weijie Shi, Chuan Wu and Zongpeng Li. “RSMOA: A Revenue and Social
Welfare Maximizing Online Auction for Dynamic Cloud Resource Provision-
ing”, in the Proceedings of ACM/IEEE IWQoS 2014, Hong Kong, May 26-27,
2014.
iii




Contents
Declaration
i
Acknowledgements
ii
Publications
iii
Table of Contents
iv
List of Figures
ix
List of Tables
xi
1
Introduction
1
1.1
Research Backgrounds and Problems . . . . . . . . . . . . . .
2
1.1.1
Scenario 1: A Revenue and Social Welfare Maximizing
Online Auction for Dynamic Cloud Resource Provisioning
2
1.1.2
Scenario 2: An Online Auction Framework for Dynamic
Resource Provisioning in Cloud Computing . . . . . . .
4
1.1.3
Scenario 3: A Shapley-Value Mechanism for Bandwidth
on Demand between Datacenters
. . . . . . . . . . . .
6
1.1.4
Scenario 4: An Online Mechanism for Dynamic Virtual
Cluster Provisioning in Geo-Distributed Clouds
. . . .
7
1.2
Overview of the Contributions . . . . . . . . . . . . . . . . . .
8
1.2.1
Contributions of Scenario 1
. . . . . . . . . . . . . . .
8
1.2.2
Contributions of Scenario 2
. . . . . . . . . . . . . . .
9
1.2.3
Contributions of Scenario 3
. . . . . . . . . . . . . . .
11
1.2.4
Contributions of Scenario 4
. . . . . . . . . . . . . . .
11
1.3
Thesis Organization . . . . . . . . . . . . . . . . . . . . . . . .
12
v


Contents
vi
2
Literature Review and Background Knowledge
15
2.1
Literature on General Auction Mechanism Design . . . . . . .
15
2.2
Literature on Resource Allocation in Cloud Computing . . . .
16
2.3
Literature on Bandwidth Allocation Mechanism . . . . . . . .
18
2.4
Literature on Virtual Cluster Provisioning . . . . . . . . . . .
19
2.5
Background Knowledge . . . . . . . . . . . . . . . . . . . . . .
20
3
RSMOA: A Revenue and Social Welfare Maximizing Online
Auction for Dynamic Cloud Resource Provisioning
23
3.1
System Model and Deﬁnitions . . . . . . . . . . . . . . . . . .
24
3.1.1
Auction Model
. . . . . . . . . . . . . . . . . . . . . .
24
3.1.2
Economic Properties . . . . . . . . . . . . . . . . . . .
26
3.2
Online Auction Design . . . . . . . . . . . . . . . . . . . . . .
28
3.2.1
Conditions on Truthfulness and Individual Rationality
28
3.2.2
Online Auction Mechanism . . . . . . . . . . . . . . . .
30
3.3
Pricing Curve and Competitive Ratio Analysis . . . . . . . . .
32
3.4
Performance Evaluation
. . . . . . . . . . . . . . . . . . . . .
35
3.4.1
Simulation setup
. . . . . . . . . . . . . . . . . . . . .
35
3.4.2
Simulation results . . . . . . . . . . . . . . . . . . . . .
36
3.5
Summary
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
38
4
An Online Auction Framework for Dynamic Resource Provi-
sioning in Cloud Computing
41
4.1
Problem Model . . . . . . . . . . . . . . . . . . . . . . . . . .
42
4.1.1
The Cloud System
. . . . . . . . . . . . . . . . . . . .
42
4.1.2
The Online Auction Problem
. . . . . . . . . . . . . .
43
4.2
An Online Algorithm Framework
. . . . . . . . . . . . . . . .
46
4.2.1
One-Round Resource Allocation . . . . . . . . . . . . .
46
4.2.2
The Online Algorithm
. . . . . . . . . . . . . . . . . .
47
4.3
A Randomized Auction Mechanism . . . . . . . . . . . . . . .
49
4.3.1
The Fractional VCG Auction
. . . . . . . . . . . . . .
49
4.3.2
Decomposing the Fractional Solution . . . . . . . . . .
50
4.3.2.1
A primal-dual algorithm for one-round resource
allocation . . . . . . . . . . . . . . . . . . . .
52
4.3.2.2
Decomposition with LP duality-based technique 52
4.3.3
The Randomized Auction
. . . . . . . . . . . . . . . .
53
4.3.4
Improving the scale-down factor . . . . . . . . . . . . .
54
4.4
Improvement of the Online Algorithm Framework with Mini-
mum Budget Spending . . . . . . . . . . . . . . . . . . . . . .
54
4.5
Performance Evaluation
. . . . . . . . . . . . . . . . . . . . .
56
4.5.1
Performance of Our Online Algorithms . . . . . . . . .
57
4.5.2
Comparison with Existing Auction Mechanisms . . . .
60


Contents
vii
4.6
Summary
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
61
5
A Shapley-value Mechanism for Bandwidth On Demand be-
tween Datacenters
63
5.1
System Model . . . . . . . . . . . . . . . . . . . . . . . . . . .
64
5.1.1
Network and Auction . . . . . . . . . . . . . . . . . . .
64
5.1.2
Target Properties . . . . . . . . . . . . . . . . . . . . .
66
5.1.3
ISP Charging Models . . . . . . . . . . . . . . . . . . .
67
5.1.4
Key Assumptions . . . . . . . . . . . . . . . . . . . . .
67
5.2
Oﬄine Auction . . . . . . . . . . . . . . . . . . . . . . . . . .
69
5.2.1
Shapley Value . . . . . . . . . . . . . . . . . . . . . . .
69
5.2.2
Shapley Value Based Oﬄine Auction . . . . . . . . . .
71
5.2.3
Oﬄine Traﬃc Scheduling Algorithm . . . . . . . . . . .
72
5.3
Online Auction . . . . . . . . . . . . . . . . . . . . . . . . . .
73
5.3.1
Online Auction based on Estimation of Oﬄine Shapley
Value . . . . . . . . . . . . . . . . . . . . . . . . . . . .
73
5.3.2
Online Traﬃc Scheduling Algorithm . . . . . . . . . . .
75
5.4
Performance Evaluation
. . . . . . . . . . . . . . . . . . . . .
76
5.4.1
Simulation Setup . . . . . . . . . . . . . . . . . . . . .
76
5.4.2
Performance of the Oﬄine Auction . . . . . . . . . . .
77
5.4.3
Performance of the Online Auction . . . . . . . . . . .
79
5.5
Extension . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
79
5.6
Summary
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
81
6
An Online Mechanism for Dynamic Virtual Cluster Provision-
ing in Geo-Distributed Clouds
83
6.1
Problem Model . . . . . . . . . . . . . . . . . . . . . . . . . .
84
6.1.1
Online VC Auction . . . . . . . . . . . . . . . . . . . .
84
6.1.2
Goals of Mechanism Design
. . . . . . . . . . . . . . .
85
6.1.3
Preliminaries for Online Mechanism Design . . . . . . .
87
6.2
Social Welfare Maximizing Online Auction . . . . . . . . . . .
88
6.3
Revenue Maximizing Online Auction
. . . . . . . . . . . . . .
92
6.4
Nonlinear Operational Cost
. . . . . . . . . . . . . . . . . . .
93
6.4.1
Problem formulation . . . . . . . . . . . . . . . . . . .
93
6.4.2
VC allocation . . . . . . . . . . . . . . . . . . . . . . .
95
6.4.3
Payment design . . . . . . . . . . . . . . . . . . . . . .
95
6.5
Performance Evaluation
. . . . . . . . . . . . . . . . . . . . .
96
6.5.1
Evaluation of SWMOA . . . . . . . . . . . . . . . . . .
97
6.5.2
Evaluation of PRMOA . . . . . . . . . . . . . . . . . .
98
6.5.3
Evaluation of the Non-Linear Cost Auction . . . . . . .
99
6.5.4
Evaluation of Dynamic Routing . . . . . . . . . . . . .
100
6.6
Summary
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
100


Contents
viii
7
Conclusions and Future Work
101
8
Appendix
107
8.1
Proof of Theorem 3.4 . . . . . . . . . . . . . . . . . . . . . . .
107
8.2
Proof of Theorem 3.6 . . . . . . . . . . . . . . . . . . . . . . .
108
8.3
Proof of Theorem 3.7 . . . . . . . . . . . . . . . . . . . . . . .
108
8.4
Derivation of Q(z), P(x) and c
. . . . . . . . . . . . . . . . .
109
8.5
Proof of Theorem 3.8 . . . . . . . . . . . . . . . . . . . . . . .
109
8.6
Proof of Theorem 3.9 . . . . . . . . . . . . . . . . . . . . . . .
110
8.7
Proof of Theorem 4.2 . . . . . . . . . . . . . . . . . . . . . . .
110
8.8
Proof of Theorem 4.3 . . . . . . . . . . . . . . . . . . . . . . .
111
8.9
Proof of Theorem 4.4 . . . . . . . . . . . . . . . . . . . . . . .
112
8.10 The Separation Oracle and Proof of Lemma 4.5 . . . . . . . .
113
8.11 Proof of Theorem 4.6 . . . . . . . . . . . . . . . . . . . . . . .
115
8.12 Proof of Theorem 4.7 . . . . . . . . . . . . . . . . . . . . . . .
115
8.13 Proof of Theorem 4.8 . . . . . . . . . . . . . . . . . . . . . . .
116
8.14 Proof of Theorem 4.9 . . . . . . . . . . . . . . . . . . . . . . .
116
8.15 Proof of Theorem 5.1 . . . . . . . . . . . . . . . . . . . . . . .
116
8.16 Proof of Theorem 5.8 . . . . . . . . . . . . . . . . . . . . . . .
117
8.17 Proof of Theorem 5.9 . . . . . . . . . . . . . . . . . . . . . . .
118
8.18 Proof of Lemma 5.10 . . . . . . . . . . . . . . . . . . . . . . .
119
8.19 Proof of Theorem 5.11 . . . . . . . . . . . . . . . . . . . . . .
120
8.20 Proof of Theorem 5.12 . . . . . . . . . . . . . . . . . . . . . .
120
8.21 Proof of Theorem 6.1 . . . . . . . . . . . . . . . . . . . . . . .
120
8.22 Proof of Theorem 6.2 . . . . . . . . . . . . . . . . . . . . . . .
121
8.23 Proof of Theorem 6.3 . . . . . . . . . . . . . . . . . . . . . . .
122
8.24 Proof of Theorem 6.4 . . . . . . . . . . . . . . . . . . . . . . .
123
Bibliography
127


List of Figures
3.1
An example of P(x). . . . . . . . . . . . . . . . . . . . . . . .
35
3.2
Social welfare of RSMOA compared with oﬄine VCG auction
under diﬀerent values of p
. . . . . . . . . . . . . . . . . . . .
36
3.3
Social welfare of RSMOA compared with oﬄine VCG auction
under concave valuation and linear valuation . . . . . . . . . .
37
3.4
Social welfare of RSMOA compared with oﬄine VCG auction
under diﬀerent numbers of users . . . . . . . . . . . . . . . . .
38
3.5
Social welfare of RSMOA compared with oﬄine VCG auction
under diﬀerent amounts of resources . . . . . . . . . . . . . . .
38
3.6
Provider’s revenue of RSMOA compared with oﬄine VCG auc-
tion under diﬀerent values of p . . . . . . . . . . . . . . . . . .
39
4.1
Performance of Alloc, Auc, AucBS and AucExt . . . . . . . . .
57
4.2
Performance comparison between AucBS, MUCA and COCA
58
5.1
An overview of the system. . . . . . . . . . . . . . . . . . . . .
64
5.2
Example bandwidth allocation on link (1, 2) of Fig. 5.1. . . . .
64
5.3
Performance of the oﬄine auction . . . . . . . . . . . . . . . .
76
5.4
Performance of oﬄine auction with diﬀerent percentages of ﬂat
bandwidth requests . . . . . . . . . . . . . . . . . . . . . . . .
76
5.5
Impact of γ on the provider’s revenue and the social welfare
.
76
5.6
Comparison of the provider’s revenue between our oﬄine auc-
tion and ﬂat pricing . . . . . . . . . . . . . . . . . . . . . . . .
77
5.7
Performance of the online auction . . . . . . . . . . . . . . . .
77
5.8
Performance of online scheduling algorithm . . . . . . . . . . .
77
5.9
Performance of the extended online auction
. . . . . . . . . .
81
6.1
An example of virtual cluster provisioning. . . . . . . . . . . .
85
6.2
Performance of SWMOA under diﬀerent values of F
. . . . .
98
6.3
Performance of SWMOA under diﬀerent values of P . . . . . .
98
6.4
Comparison between SWMOA and TV-VNE . . . . . . . . . .
98
6.5
Comparison between SWMOA and TV-VNE under special sce-
narios
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
98
6.6
Performance of PRMOA under diﬀerent values of F
. . . . .
99
ix


List of Figures
x
6.7
Comparison between PRMOA and TV-VNE . . . . . . . . . .
99
6.8
Performance of the non-linear cost auction . . . . . . . . . . .
99
6.9
Performance improvement of the dynamic routing . . . . . . .
99


List of Tables
1.1
Amazon EC2 VM Instances
. . . . . . . . . . . . . . . . . . .
3
2.1
Comparison of allocation algorithms in cloud computing
. . .
17
3.1
Notation for Chapter 3 . . . . . . . . . . . . . . . . . . . . . .
27
4.1
Notation for Chapter 4 . . . . . . . . . . . . . . . . . . . . . .
44
5.1
Notation for Chapter 5 . . . . . . . . . . . . . . . . . . . . . .
68
6.1
Notation for Chapter 6 . . . . . . . . . . . . . . . . . . . . . .
89
xi




Chapter 1
Introduction
In this chapter, we introduce the research backgrounds and targeted research
problems for online resource provisioning mechanism design in cloud comput-
ing and outline our contributions in the thesis.
We consider a cloud provider who owns a pool of computational and band-
width resources, and proﬁts from renting Virtual Machines (VMs) or other
cloud resources to cloud users. Under diﬀerent scenarios, we design truth-
ful online mechanisms that timely respond to incoming users demands and
make dynamic resource provisioning and allocation decisions, while guaran-
teeing eﬃciency in both the provider’s revenue and system social welfare. To
be speciﬁc, we consider the following four scenarios: (1) Heterogeneous VM
allocation, where the provider dynamically allocating diﬀerent types of VMs
to users; (2) Multiple user bundles with heterogeneous VM dynamic provi-
sioning, where cloud users bid for multiple bundles, each of which contains a
combination of diﬀerent types of VMs; and the provider dynamically assembles
cloud resources into diﬀerent types of VMs; (3) On-demand bandwidth allo-
cation, where the provider serves users’ data transition tasks through eﬃcient
traﬃc scheduling; and (4) Dynamic Virtual Cluster (VC) provisioning, where
the provider reserves VCs for users, including both computational resources
of VMs and the exclusive bandwidth among VMs. Our research objective
is to design truthful, individual rational, eﬃcient in both social welfare and
provider’s revenue online auction mechanisms. Since the users arrive dynam-
ically on the ﬂy, their bids, requirements and arriving time are not known a
priori. The research challenge is to design eﬃcient mechanisms which have
good performance guarantee on social welfare or provider revenue even with-
out the future information. In this thesis, we present auction mechanisms
design which adapt to unknown and arbitrary user types and still achieve
good performance, for all these four scenarios respectively.
1


Chapter 1. Introduction
2
Our motivation to study the online auction mechanism, instead of other ﬁxed-
price policies, is based on the observation that auction mechanism can rapidly
adapt to realtime demand-supply relation changes, which is critical for the
cloud market where user demands are highly dynamic and ﬂuctuating. By
discovering the appropriate market price in the auction process, overpricing
or underpricing problems which jeopardize overall system eﬃciency are avoid-
ed.
Using online auction mechanism also brings about the opportunity of
considering dynamic resource provisioning, which increases the elasticity of
VM supply and enables higher eﬃciency in resource utilization.
The organization of this chapter is as follows.
We introduce the research
background of online resource provisioning mechanism design in Sec. 1.1. The
main contributions of this thesis, by proposing mechanisms under each sce-
nario, are presented in Sec. 1.2. Finally, we present the organization of the
thesis in Sec. 1.3.
1.1
Research Backgrounds and Problems
1.1.1
Scenario 1: A Revenue and Social Welfare Max-
imizing Online Auction for Dynamic Cloud Re-
source Provisioning
Cloud computing has recently emerged as a new computing paradigm that
enables prompt and on-demand access to computing resources.
As exem-
pliﬁed in Amazon EC2 [2] and Microsoft Azure [11], cloud providers invest
substantially into their datacenter infrastructure, providing a virtually unlim-
ited “sea” of CPU, RAM and storage resources to cloud users, often assisted
by virtualization technologies. The elastic and on-demand nature of cloud
computing assists cloud users to meet their dynamic and ﬂuctuating demands
with minimal management overhead, while the cloud ecosystem as a whole
achieves economies of scale through cost amortization.
The de facto standard in selling cloud computing resources used to be charg-
ing ﬁxed prices for VM access [3]. For example, Table 1.1 shows the available
VM types at Amazon EC2, and their hourly prices at diﬀerent datacenters.
While relatively simple to implement in practice, ﬁxed-price policies suﬀer
from a clear drawback: they cannot eﬀectively reﬂect the supply-demand re-
lationship that is varying across the temporal domain. Consequently, both
(a) the revenue that the provider can glean and (b) system-side social welfare
achieved by the cloud ecosystem as a whole are suboptimal.


Chapter 1. Introduction
3
Table 1.1: Amazon EC2 VM Instances
VM Type
CPU∗
RAM
Disk
Virginia Ireland Tokyo
m1.medium 2
3.75GB
410GB
$0.120 $0.130 $0.175
m1.large
4
7.5GB
840GB
$0.240 $0.260 $0.350
m1.xlarge
8
15GB
1.68TB
$0.480 $0.520 $0.700
c1.medium
5
1.7GB
350GB
$0.145 $0.165 $0.185
c1.xlarge
20
7GB
1.68TB
$0.580 $0.660 $0.740
m2.2xlarge
13
34.2GB
850GB
$0.820 $0.920 $1.101
∗EC2 compute units
Towards more eﬃcient pricing and allocation of cloud resources, auction-style
mechanisms have been proposed and implemented in real-world cloud systems,
as exempliﬁed by the Amazon Spot Instance market [4], and SpotCloud [10],
with a series of subsequent work on its enhancement [74, 81, 82].
We believe that auction mechanism is a much better pricing system than the
traditional ﬁxed price policy, since it overcomes the drawback of the ﬁxed
prices. Through auction mechanism, the provider can ﬁnd the real-time mar-
ket situation and set the optimal prices according to the market information.
Thus, both the provider and the cloud users beneﬁt from a more ﬂexible mar-
ket mechanism.
Unfortunately, the following ﬂexibilities in user demand and resource alloca-
tion are still insuﬃcient in the existing cloud auction designs.
(1) Elastic
resource demands: Cloud user’s demand is typically elastic, allowing acquisi-
tion of diﬀerent amounts of resources for corresponding levels of utility gains.
For example, the demand for some ﬁnance-related computation is higher dur-
ing the stock market trading hours than after the trading hours. The existing
auctions mostly allow only a ﬁxed static resource demand from each user,
and an auction mechanism that eﬃciently supports elastic user demands is
missing. (2) VM termination at user’s will: A cloud user should have the
right to keep an acquired VM as long as she likes and to terminate it at any
time she wishes, without unexpected preemption or the need to give a priori
notiﬁcation.
Aiming at an online auction mechanism that are general and expressive enough
to provide these ﬂexibilities, we propose RSMOA, the ﬁrst online combinato-
rial auction that timely responds to the incoming users’ demands and makes
dynamic resource provisioning decisions. RSMOA has the following salient
features. (1) An online VM auction, in which cloud users come and go on
the ﬂy, without a priori notiﬁcation; demands from newly arrived users are
addressed instantly. (2) Expressive bidding language. Users’ elastic demands
are expressed and heterogeneous types of VMs are allocated on the ﬂy, tai-
lored to the demands and resource availability, guaranteeing that each user’s


Chapter 1. Introduction
4
utility never decreases over time. (3) Truthfulness, the quintessential property
in auction mechanism design, which elicits voluntary truthful VM valuation
reports from selﬁsh cloud users. As a result, the cloud provider is guaran-
teed to receive correct information based on which optimization decisions are
made.
Besides truthfulness in VM valuations, RSMOA further guarantees
truthfulness in demand arrival times. (4) Simultaneous optimization of the
cloud provider’s revenue and system-wide social welfare. Our online auction
achieves a competitive ratio O(ln p) in both social welfare and provider rev-
enue, when benchmarked against the well-known oﬄine Vickrey-Clarke-Groves
(VCG) auction. Here p is the ratio between the upper and lower bounds of
users’ marginal valuation of any type of resource.
1.1.2
Scenario 2:
An Online Auction Framework for
Dynamic Resource Provisioning in Cloud Com-
puting
We extend the model used in Scenario 1 so that the users can now bid for
more than one bundles, each of which contains a set of VMs, and the provider
ﬁnally choose one bundle from the user’s bid to serve. Users’ computational
demands usually can be satisﬁed by diﬀerent combinations of VM instances.
For example, either one medium instance or two small instances can meet one
user’s demand. Then under our multiple-bundle bidding design, users are free
from the troubles of comparing prices of diﬀerent VM bundles and choose the
one with minimum cost. They simply need to bid all the possible bundles, and
then the provider will choose the optimal solution for users. The decisions on
VM assembling, which organizes the CPU, RAM and Disk resource pools into
typed VM instances, are no longer made randomly a priori [33], but made
dynamically upon receiving user bids.
To be speciﬁc: [Cloud auctions should be online.] Real-world cloud re-
source transactions happen either when customer demands arrive or cloud
resources become available, and hence is modelled more naturally by an on-
line auction that incorporates the time dimension.
Most cloud computing
customers, enterprise or individual, are on a pre-allocated budget for a given
time period (e.g., a year or a month like that in an ad-auction [17]). Thus a
customer’s purchase desire drastically declines over time, which needs to be
considered for a practical auction mechanism. However, most existing cloud
auctions focus on a single-round auction only, and ignore such temporal cor-
relation in decision making [82].
[Cloud auctions should be combinatorial.] A cloud computing job in
practice often demands a bundle of heterogeneous VM instances for its success-
ful execution, and hence a cloud auction is naturally a combinatorial auction.


Chapter 1. Introduction
5
For example, a social game application that consists of a front-end web server
layer, a load balancing layer and a back-end data storage layer is best served
by a combination of VMs that are intended for communication-intensive,
computation-intensive and storage-intensive tasks, respectively.
Such com-
binatorial VM auctions represent a dramatic departure of most existing VM
auction designs that assume VMs are type-oblivious commodities, in that all
VMs are essentially of the same type, and hence are substitutable or substi-
tutable up to a simple multiplicative factor. Embracing heterogeneous VM
types in the model further brings about the opportunity of considering dy-
namic resource provisioning , but made dynamically upon receiving user bids.
Dynamic resource provisioning enables higher eﬃciency in cloud resource uti-
lization, higher seller revenue for the provider, and higher social welfare for the
entire cloud system.
Dynamic resource provisioning means that the provider
dynamically decides the type of VM to assemble using his resources according
to users’ real-time demands. Users still receive their required resources, which
is not adjusted by the provider.
We generalize and subsume existing literature on cloud auctions by designing
the ﬁrst online combinatorial auction in which VMs of heterogeneous types
are allocated in multiple consecutive time slots. The ﬁnal result is an online
auction framework that simultaneously guarantees the following properties.
(i) Truthfulness, the holy grail of auction mechanism design. It ensures that
economically-motivated selﬁsh buyers are automatically elicited to reveal their
true valuations of the VMs they demand, in the bids submitted. This simpli-
ﬁes analysis of the resulting auction in theory, and increases the predicability
of auction outcomes in practice. (ii) Combinatorial auctions, supporting het-
erogeneous VM types located at diﬀerent datacenters. Besides heterogeneity
in their types, another dimension of VM diversity may arise due to their geo-
graphical locations (assuming multiple datacenters). A combinatorial auction
is hence necessary. (iii) Dynamic resource provisioning. The number of in-
stances of each VM type is not predeﬁned, but dynamically adjusted as part
of the auction mechanism, tailored to realtime user demand. (iv) Online auc-
tion: In commercial cloud platforms, auctions are executed repeatedly and
the prices change termly. Each user is subject to a practical budget limitation
for a given time period. Our online auction models a long time auction over
multiple rounds that are coupled together by customer budgets. A competi-
tive ratio of e +
1
1−e ≃3.30 is guaranteed in typical scenarios, i.e., our online
auction achieves a long-term social welfare that is at least a 1/3.30 fraction of
the oﬄine optimum.


Chapter 1. Introduction
6
1.1.3
Scenario 3: A Shapley-Value Mechanism for Band-
width on Demand between Datacenters
Cloud users host their tasks or services on the cloud platform, often in multiple
datacenters, to stay close to service users, exploit lower power costs in diﬀerent
regions, and enable service robustness in the face of network/power failures.
Substantial inter-datacenter transfers have hence become the norm rather than
abnormality, for migration of virtual machines [62], replication of contents like
videos [77], and backup of data [44]. The bandwidth needed does not come for
free from the cloud provider: except for a few large operators (e.g., Google)
which own the network among their datacenters, cloud providers typically rent
the link between their datacenters from ISPs and are charged for their inter-
datacenter traﬃc [39].
Aliyun Cloud Servide [7] is an example of application
of dedicated bandwidth renting service provided by a cloud provider. A proper
charging mechanism is needed to share the bandwidth cost with the cloud
users.
We present the ﬁrst dynamic pricing mechanism for on-the-ﬂy requested inter-
datacenter bandwidth to the authors’ knowledge. We resort to an auction
based mechanism, for eﬀectively discovering the market value of the link band-
width. The users with data transfer needs submit bids to the provider, speci-
fying their bandwidth demands, willing-to-pay prices, and source-destination
pairs of the transfer; the cloud provider decides admission control, the transfer
schedule of users’ data and the charges. The following properties are manda-
tory through this auction: (1) Truthfulness and (2) Individual Rationality, the
quintessential properties which stimulate participation and voluntary revela-
tion of valuation in auctions; (3) Competitiveness in Social Welfare, which is
evaluated by the upper bound of the ratio between the optimal social welfare
and the social welfare under the proposed algorithm, and quantiﬁes the eﬃ-
ciency of the auction mechanism; (4) Budget Balance at the Cloud Provider,
such that the payments from the users are suﬃcient to cover the ISP charge.
We identify the following key challenges in auction design to achieve the above
properties. First, there are diﬀerent types of bandwidth demands, e.g., a ﬂat
bandwidth rate plus a duration, or an amount of data to be sent within a
completion deadline; with one-hop connection or through a linked path. How
can we design one uniﬁed auction framework taking care of all this variety?
Second, the auction’s underlying social welfare maximization problem is an
NP-hard combinatorial problem, even with decisions on admission control
and traﬃc scheduling only. There is one more dimension in our decision s-
pace: the overall bandwidth to rent from the ISPs on each inter-datacenter
link. Diﬀerent ISP bandwidth charging models exist, e.g., the 95th-percentile
or the maximum-traﬃc charging models [45]. It is computationally diﬃcult to
decide both bandwidth capacities to rent from the ISPs and allocation of these


Chapter 1. Introduction
7
capacities to users; the hardness escalates when this optimization appears as
the winner determination problem in an auction, which renders the auction a
similar ﬂavor to double auctions, shown to be very diﬃcult to simultaneously
achieve all 4 properties listed above [84]. The challenge is already daunting
even for the oﬄine version of the auction, where the cloud provider is assumed
to have complete knowledge of task arrivals in the whole system span. How-
ever, third, an online auction is needed in practice, to instantly make decisions
upon the arrival of each user’s real-time transmission demand.
1.1.4
Scenario 4: An Online Mechanism for Dynamic
Virtual Cluster Provisioning in Geo-Distributed
Clouds
With the proliferation of cloud computing, more and more individuals and
businesses are resorting to cloud platforms for deploying services and run-
ning jobs. Besides purchasing individual virtual machines (VMs), signiﬁcant
demands arise on renting a collection of VMs and the network in-between,
to create a virtual cluster (VC) with an inter-connecting virtual private net-
work. Prominent examples include cloud CDNs built on top of virtual clusters
across geo-distributed cloud data centers. Enabling technologies such as net-
work virtualization have been studied in the past years [40][14][63][15]. Virtual
cluster/network services have been provided by IaaS providers (e.g., Amazon
Virtual Cluster [5]), where a user deﬁnes a VC containing several VMs and
the bandwidth demand among them, and the cloud provider provisions the
cluster with exclusive resources and bandwidth guarantee.
The provisioning of a virtual cluster involves VM placement, i.e., assigning
each VM to a location (e.g., a data center), and inter-VM traﬃc routing, i.e.,
ﬁnding path(s) with available bandwidth to send the traﬃc from one VM to
another. There is not yet an eﬃcient resource allocation algorithm for VC pro-
visioning even in the oﬄine case with all user VC requests known, due to the
NP hard nature of the underlying problem. In practice, user requests arrive
dynamically over time; an eﬃcient online algorithm is in need, which allocates
resources for VC provisioning on the spot, while guaranteeing long-term opti-
mality in resource utilization and user satisfaction. The focus of recent studies
on VC provisioning (a.k.a. virtual network embedding in some literature) has
been on heuristic oﬄine or online algorithm design to approximate the optimal
solutions, with no analytical performance guarantee.
Moreover, an eﬃcient pricing mechanism is missing, to charge users for the
VCs on the go. The current practice is to charge an aggregate price of VMs
and bandwidth usage in a virtual cluster, based on the ﬁxed unit prices of the
computation and communication resources [5]. Such a pricing method lacks


Chapter 1. Introduction
8
market agility to adapt to supply-and-demand changes, risking the provider’s
revenue as well as social welfare. As a representative market-driven mecha-
nism, auctions have been studied in cloud computing. Compared with ﬁxed
pricing, an auction mechanism enables appropriate prices that take real-time
demand and supply into consideration, avoiding overpricing or underpricing
and achieving revenue or social welfare maximization. The existing cloud auc-
tions focus on allocation of separate VMs [74], or VM bundles which demand
computational resources (CPU, RAM, storage) only (but not inter-VM band-
widths) [68]. It is in fact common to send traﬃc between VMs in a VC, e.g.,
large replication traﬃc between VMs in a distributed cloud storage system,
requesting bandwidths to be allocated between the VMs as well.
To the best of our knowledge, online auction of an entire virtual cluster, in-
cluding VMs and the network in-between, has not been studied. The diﬃculty
mainly lies in the NP-hard nature of the resource allocation problem for VC
provisioning, which hinders exact solutions as typically needed in designing
truthful and social welfare maximizing auction mechanisms, even in the oﬄine
case. The challenge escalates when we practically target an online auction re-
quiring timely allocation and pricing decisions on the go, while maximizing
social welfare or provider revenue over the entire system span.
We design eﬃcient and competitive online auctions for on-demand provi-
sioning and pricing of VCs deployed over geo-distributed cloud data centers.
Users arrive dynamically, specifying potential VCs to deploy with tailor-made
VMs in diﬀerent data centers, as well as the traﬃc in between, at diﬀerent
willingness-to-pay prices. Two online auction mechanisms are designed for
social welfare maximization and provider revenue maximization, respectively.
The mechanisms are designed based on an online auction framework which
dynamically maintains a cost for each type of resources in each data center.
Based on which payments of potential VCs are computed, the best VM place-
ment scheme for each user is selected, and acceptance/rejection decisions are
made.
1.2
Overview of the Contributions
1.2.1
Contributions of Scenario 1
In Chapter 3, we propose RSMOA, the ﬁrst online combinatorial auction that
timely responds to the incoming users’ demands and makes dynamic resource
provisioning decisions, which is a truthful online auction with expressive bid-
ding language, with performance guarantee both on social welfare and provider


Chapter 1. Introduction
9
revenue. More speciﬁcally, our contributions along the design of RSMOA are
three-fold:
First, we identify a set of necessary conditions (namely bid independence,
bundle monotonicity, and user-utility-maximizing allocation) for an auction
to achieve individual rationality and truthfulness in both VM valuation and
demand arrival times. Bid independence isolates the price that a user pays
from her own bid, such that the user cannot manipulate her bid to achieve a
higher utility. With bundle monotonicity, larger demand bundles containing
larger amounts of resources are priced no lower than smaller ones. According
to user-utility-maximizing allocation, the cloud provider allocates resources to
maximize each user’s utility, instead of her own revenue. While this appears to
contradict provider revenue maximization, it is proven necessary for truthful-
ness, which eventually leads to maximal provider revenue together with other
guarantees of the auction design.
Second, we design an online auction framework that satisﬁes the above three
conditions. Upon arrival of a user’s bid expressed using a number of XORed
bundles, the provider identiﬁes the bundle that maximizes the user’s utility,
and charges the user according to a pricing curve. The pricing curve maintains
the supply-and-demand relationship across the board, providing a higher price
per unit resource when more resources are consumed. Upon termination of a
user’s VM usage, the resources are returned to the cloud pool and re-allocated
to other existing users.
The adjustment of resources to the existing users
guarantees a non-decreasing utility at each user, and priorities for assigning
more resources are given to users who arrive early.
Third, we carefully design the explicit form of the pricing curve following a
threat-based strategy, which targets a competitive ratio c of the provider’s
revenue by setting prices that allow resource transactions only when neces-
sary, i.e., when not selling the resource leads to violation of the targeted
competitiveness of the auction mechanism. We formulate a set of diﬀerential
equations to describe this threat-based strategy, and solve them to derive the
closed form of the pricing curve. The best competitive ratio is found to be
c = O(ln(p)), according to a set of necessary, boundary conditions that guar-
antees correct strategy execution. Though this competitive ratio is computed
for the provider’s revenue, we prove that, interestingly, the same competitive-
ness is achieved in terms of social welfare.
1.2.2
Contributions of Scenario 2
Our proposed online auction framework in Chapter 4 consists of three main
modules: (A) translating online optimization into a series of one-round opti-
mization problems, (B) translating an approximation algorithm for one-round


Chapter 1. Introduction
10
optimization into a truthful auction, and (C) designing an eﬀective approxi-
mation algorithm for one-round optimization.
First,, we formulate a linear integer program that characterizes the long-term
social welfare optimization problem in the cloud market for VMs, and formu-
late the dual LP of its LP relaxation (without the integer constraints). A tai-
lored primal-dual algorithm iteratively adjusts a dual variable corresponding
to each customer’s budget, acting as a shadow price that signals how “tight”
the latter is. A series of one-round combinatorial VM auctions are then exe-
cuted under a ﬁxed shadow price vector. Such primal-dual decoupling of the
auction rounds admits a rather intuitive interpretation: the algorithm strikes
to avoid prematurely depleting a user’s budget, and gives higher priority to
cloud customers with low budget pressures during each auction round. As
a result, we prove that the decomposition introduces an additive loss to the
competitive ratio bounded by
1
e−1.
Second,, for each one-round combinatorial auction problem, we employ a ran-
domized auction sub-framework, which exploits the underlying packing prop-
erty of one-round social welfare maximization, and translates any centralized
co-operative approximation algorithm into an auction, inheriting the same ap-
proximation ratio while adding truthfulness. At the core of this translation is
a primal-dual optimization based decomposition technique that decomposes
an optimal fractional solution to one-round social welfare maximization into a
convex combination of integral solutions, recently developed in the literature
of theoretical computer science [47], and successfully applied in the literature
of computer networking [86].
We also propose a new binary search based
technique to ﬁnd the minimum feasible scale-down ratio in the fractional so-
lution decomposition, and thereby, improve the average-case performance of
the online auction algorithm.
Third,, we design a speciﬁc approximation algorithm for one-round VM allo-
cation, by applying iterative primal-dual solution updates followed by dual ﬁt-
ting. The resulting algorithm is polynomial-time computable, and guarantees
an approximation ratio λ that approaches e in practical scenarios. Combining
all three modules together, the overall competitive ratio of the resulting online
auction framework is bounded by e +
1
e−1 ≃3.30 in typical scenarios. We hope
that the online auction framework proposed in this work, as well as its three
components, may shed light to the design of auction mechanisms in related
problem settings.
What’s more, we further propose an improvement to the online auction frame-
work, in the case that a minimum budget spending fraction is guaranteed.
The improved online auction algorithm uses a new method to adjust the du-
al variables corresponding to users’ budgets over time, and achieves a better
competitive ratio.


Chapter 1. Introduction
11
1.2.3
Contributions of Scenario 3
Our contributions in Chapter 5 are summarized as follows:
First, We set up an auction framework that is expressive enough to allow
cloud users to specify their bandwidth demands and transmission paths, and
design an eﬃcient mechanism for traﬃc scheduling and charging.
Second, We investigate both an oﬄine version and an online version of the
auction, considering both the 95th-percentile and the maximum-traﬃc charg-
ing models of ISPs. A number of non-trivial, intriguing theoretical results are
obtained.
Third, For the oﬄine version of the auction, we design an optimal end-to-end
traﬃc scheduling algorithm, and novelly exploit the Shapley value in deciding
admission control and the payments, based on a cost sharing idea. The Shap-
ley value has been widely used for allocating an aggregate proﬁt/cost among
the individual participants. But it has rarely been exploited for payments
in auction mechanism design. We identify that calculating users’ payments
based on the Shapley values is more reasonable than using a classical VCG
mechanism in our system, which together with the traﬃc scheduling algorith-
m, is proven to achieve all 4 desired properties and a δ/(δ −γ)-approximation
in social welfare, where δ and γ are constants related to users’ valuations.
Fourth, For the online version of the auction, we propose an eﬃcient traﬃc
scheduling algorithm, and approximate the oﬄine Shapley value based admis-
sion control and payments on the ﬂy. In particular, we compute an online
Shapley value based on requests that have arrived, scale it according to the
passed time, the total time span, the ISP charge due to the existing traﬃc
and estimated total ISP charge. The online auction achieves all the desired
properties in expectation, with δ/(δ −γ)-competitiveness in social welfare as
well.
This online mechanism design sits upon the state-of-the-art development in
datacenter networks, with link multiplexing and virtual datacenter network-
ing [14]. Especially, the recent software deﬁned networking (SDN) paradigm
enables a centralized controller to manage the entire network, with typical ap-
plications to inter-datacenter networks. Our centralized auctioneer ﬁts nicely
as a functionality module implemented on the controller, to overview traﬃc
scheduling and charging in the system.
1.2.4
Contributions of Scenario 4
Our detailed contributions in Chapter 6 are summarized as follows.


Chapter 1. Introduction
12
First, in the design of the social welfare maximizing auction, SWMOA, we set a
dynamic unit cost for each type of computation and communication resources
at and across the data centers, which increases with the depletion of the
corresponding type of resource. We ﬁnd the best VC provisioning scheme for
each user among the schemes indicated in his bid, which maximizes his utility,
by formulating a VC provisioning linear program (LP). The LP can be reduced
to a minimum cost multicommodity ﬂow problem, which is eﬃciently solvable
using existing algorithms. We then compute the overall cost of the obtained
VC provisioning scheme and compare the cost with the willingness-to-pay from
the user. A user is accepted if the VC acquired provides positive utility. We
show that SWMOA achieves truthfulness, individual rationality, computation
eﬃciency, and (1+2 log µ)-competitiveness in social welfare, where µ is related
to the problem size.
Second, the revenue maximizing online auction, PRMOA, is built on the basis
of SWMOA. We use SWMOA to ﬁrst obtain a tentative VC allocation and a
payment for each user, and then re-examine each tentatively accepted bid with
a randomized boosted payment to improve provider revenue. The randomized
payment is carefully designed to be still below the user’s corresponding true
valuation with high probability, without the knowledge of the actual true val-
uation. In this way, the provider is able to extract almost the largest possible
revenue with high probability. PRMOA achieves O(log µ)-competitiveness in
provider revenue, as well as truthfulness, individual rationality and computa-
tion eﬃciency.
1.3
Thesis Organization
The rest of the thesis is organized as follows.
Chapter 2 overviews the literature on related topics about online auction mech-
anism and resource provisioning in cloud computing.
Chapter 3 considers users bidding for heterogeneous types of VMs and propos-
es a revenue and social welfare maximizing online auction for dynamic cloud
resource provisioning.
Chapter 4 designs an online auction framework for dynamic resource provi-
sioning where users submit multiple bundles and VMs are assembled on the
ﬂy.
Chapter 5 proposes a shapley-value mechanism for bandwidth on demand
between datacenters.


Chapter 1. Introduction
13
Chapter 6 investigates the VC provisioning problem and proposes an online
mechanism for dynamic virtual cluster provisioning in geo-distributed clouds.
Chapter 7 summarizes the research results of this thesis and gives some direc-
tions for future study.




Chapter 2
Literature Review and
Background Knowledge
In this chapter, we overview the related literature on online mechanisms for
dynamic resource provisioning in cloud computing. To be speciﬁc, we ﬁrst
review the work related with general auction mechanism design and resource
allocation in cloud computing. Next, we discuss the literature on mechanism
for bandwidth allocation. Finally, we review the work related with Virtual
Cluster Provisioning.
2.1
Literature on General Auction Mechanis-
m Design
Auction as an eﬃcient resource pricing and allocation method has been exten-
sively studied in a number of ﬁelds, including in particular cloud computing.
Classic applications of auctions are found in a wide range of research areas,
such as network bandwidth allocation [76], wireless spectrum allocation [86]
and wireless crowdsourcing [32].
Our work focuses on auctions in cloud computing. The celebrated VCG auc-
tion mechanism [71] constitutes the only type of auction that concurrently
achieves truthfulness and maximum social welfare, by directly solving the so-
cial welfare maximizing allocation and charging each user the opportunity cost
she brings. The VCG mechanism can be eﬃciently applied only if two condi-
tions are met: all required information is available, and the optimal solution
can be calculated eﬃciently (in polynomial time). When the social welfare
maximization problem at the auctioneer involves online decision making or is
NP-hard in nature, the VCG mechanism becomes impractical [65].
15


Chapter 2. Literature Review
16
One solution to overcome the computational diﬃculty is to design an approx-
imation algorithm for solving the underling social welfare maximization prob-
lem, and a customized payment rule that works in concert with the approxi-
mation algorithm. Note that the payment rule in VCG auctions, charging an
opportunity cost, works with only some approximation algorithms, and loses
truthfulness in general [59]. Although there is no universal truthful payment
rule, some instructive ideas have been investigated, for example by exploiting
the concept of critical bids [49], or using the LP decomposition technique [47]
if the underlying social welfare maximization problem exhibits a packing or
covering structure [82].
Another solution approach attempts to ﬁrst decide the payment rule instead,
and then seek a good approximation ratio with the allocation algorithm design
by ﬁne-tuning the payment rule. Along this direction, Goldberg et al. [36] pro-
pose an auction that sells single items according to a threshold-based pricing
rule. Ravi et al. [46] extend such threshold-based payment rule to a pricing
curve-based solution, and their auction is applicable to more general types of
goods.
Extending single round truthful auctions into online auctions in a straightfor-
ward way usually breaks the truthfulness property [61]. The lack of future
information brings a key challenge in pursuing truthfulness. For example, the
VCG auction does not directly work in the online setting, since the optimal
allocation for the future cannot be calculated, even given unlimited compu-
tational resources. It is in general diﬃcult to design a payment rule with an
online approximation algorithm that achieves nice properties [17]. For exam-
ple, truthfulness is usually compromised when an auction is extended from a
single round to multiple rounds in a straightforward fashion [61]. A pricing-
curve based method is advantageous in the online scenario, since the pricing
curve maintains global information over time, and payments can be naturally
computed round by round.
2.2
Literature on Resource Allocation in Cloud
Computing
Many resource allocation algorithms have been proposed in cloud computing
scenarios with diﬀerent focuses. Alicherry et al. [12] consider network load
when allocating VMs in a distributed cloud system, but not considering the
arrival and departure of users. Maguluri et al. [55] tackle the randomness of
arriving workloads and solve optimization problems for load balancing and
VM scheduling, but cannot be applied to arbitrary user arriving pattern. Xu
et al. [79] summarize the recent attempts in managing performance overhead


Chapter 2. Literature Review
17
in clouds. Lin et al. [72, 73] study the energy eﬃciency in VM provisioning.
VM migration overhead [80] and energy consumption [85] are also important
practical issues in VM provisioning.
Recently, a number of auctions have been designed for VM provisioning in
cloud computing, using techniques mentioned above. Zhang et al. [82] design
a truthful single-round auction using the LP decomposition technique. Their
algorithm only works for oﬄine setting, instead of online user arrival. Wang et
al. [74] apply the critical bid approach, and add a collusion-resistant property
to their single-round auction, but only consider single type of VM. Shanmu-
ganathan et al. [66] introduce the concept of bundles in VM allocation, which
is an inspiration for us.
Zhang et al. [81] utilize the pricing-curve method, and design a truthful online
auction for single-type VMs and diﬀerent types of users. None of them investi-
gates online optimized assembling of VMs at user-speciﬁed resource amounts,
which is the focus of this thesis.
In general, the existing literature focus-
es on some issues in auctions for cloud computing: online arriving, dynamic
provisioning, combinatorial auctions, but not all of them, and thus lack of a
complete solution for resource allocation in cloud computing.
Table 2.1: Comparison of allocation algorithms in cloud computing
Algorithm
Name
Online
/
Oﬄine
Multi-Type
VM
/
Single-Type
Truthful
Auction
Social
Welfare
Competi-
tive
Provider
Revenue
Competi-
tive
NARA [12]
Oﬄine
Single-Type
No
No
No
LB [55]
Stochastic
Single-Type
No
No
No
OM [79]
Online
Single-Type
No
No
No
PDAA [82]
Oﬄine
Multi-Type
Yes
Yes
No
CR [74]
Oﬄine
Multi-Type
Yes
Yes
No
BPX [66]
Oﬄine
Multi-Type
No
Yes
No
COCA [81]
Online
Single-Type
Yes
Yes
No
RSMOA
Online
Multi-Type
Yes
Yes
Yes
We summarize the above work in Tab. 2.1. Our mechanism proposed in this
thesis, RSMOA, distinguishes itself in four aspects: (1) Our VM allocation
is eﬃcient for arbitrary patterns of user valuation, instead of speciﬁed types
of users. (2) Our auction is combinatorial, and applies to multiple types of
VMs, which are assembled on demand. (3) The users in [81] must reveal their


Chapter 2. Literature Review
18
departure times to the provider, while no such information is needed in our
mechanism, allowing users to leave at any time without a priori notiﬁcation.
(4) Not only social welfare, but also the cloud provider’s revenue are approxi-
mately maximized in RSMOA. Most existing work target at maximizing only
social welfare or provider’s revenue [75], but not both.
2.3
Literature on Bandwidth Allocation Mech-
anism
Most work on cloud auction mechanism design focus on allocating computa-
tional resources of VMs such as CPU, disk and RAM, but do not deal with
network bandwidth. There have been a few recent studies on bandwidth allo-
cation and pricing in cloud computing [41][14]. But they focus on the network
inside a datacenter, rather than the Internet links connecting diﬀerent data-
centers, where the role played by ISP charging brings another dimension of
diﬃculty.
Some older literature has investigated bandwidth scheduling and pricing in
the Internet using game theoretical approaches [78][31][21]. MacKie-Mason et
al. [52] apply a VCG auction on each router to identify a market price for
each data packet. Maille et al. [56] enable a disparate second-price auction
on each link of a tree network. Lazar et al. [48] study a progressive second
price (PSP) auction. All these auction designs are set up in a static network
with ﬁxed bidders and persistent bandwidth demands. Diﬀerently, our auction
model handles both demands for ﬁxed bandwidth rates and data transfer with
heterogeneous deadlines, in both oﬄine and online settings. We also combine
the auction mechanism analysis with the Shapley value method.
Shapley value [67] was originally proposed as an approach to allocate aggregat-
ed proﬁt/cost to individuals in a coalition in a fair and eﬃcient manner. It has
been widely used in a variety of practical problems, including ISP settlement
and analysis of ISP charging models [51][69].
Feigenbaum et al. [30] compare the Shapley value with the marginal cost in
cost-sharing algorithms for multicast transmission. Grag et al. [34] propose
a distributed mechanism to implement Shapley value cost-sharing. Though a
common approach in cooperative game theory, it has seldom been applied to
auction mechanism design.
The only proposed auction using Shapley value is the Moulin Mechanism [26],
used for cost sharing in public good auction. It rejects users whose valuation is
lower than its Shapley value, re-calculates the aggregated cost and the Shapley
value based on the remaining users, and repeats this rejection and calculation


Chapter 2. Literature Review
19
process until no more users are rejected.
The approximation ratio of the
Moulin mechanism in social welfare is proved to be O(log N) where N is the
number of bidders [26], and this ratio is quite large but tight. Truthfulness of
the Moulin mechanism relies on a submodular property of the cost function
used in Shapley value computation, which means that the marginal cost of a
user is non-increasing when new users are added to the game. The ISP charge
function in our model, either the 95th-percentile or max-traﬃc charge, is not
submodular. Instead, we design a novel Shapley value based mechanism which
overcomes the drawbacks of the Moulin Mechanism.
Compared with the existing literature, our auction mechanism for bandwidth
scheduling is the ﬁrst dynamic pricing mechanism for interdatacenter on-
demand bandwidth, achieving truthful, individual rational, budget balanced
and approximately eﬃcient in social welfare.
2.4
Literature on Virtual Cluster Provision-
ing
The virtual cluster provisioning (a.k.a. virtual network embedding/mapping)
problem has attracted substantial research interest in recent years. Li et al.
[50] formulate the VM placement problem and consider the traﬃc cost and
physical machine utilization cost. Zhang et al. [83] study how to map VMs to
servers to minimize the failure probability of the user’s virtual data center (i.e.,
maximize the reliability). Heuristic algorithms are proposed to calculate the
failure probability and minimize it eﬃciently, without performance guarantee.
Ballani et al. [13] propose a pricing mechanism for VMs based on a user’s
bottleneck resource consumption in VM placement, which is also heuristic
strategy. Esposito et al. [27] solve the VC mapping problem using primal
and dual decomposition. Chowdhury et al. [23] reduce VC mapping to link
mapping which is formulated as an integer programming (IP) program, and
solve the latter whenever a VC request arrives using LP relaxation and de-
terministic/randomized rounding. All these work on oﬄine solutions of VC
provisioning.
For handling online VC provisioning, Grandl et al. [38] present a scheduling
algorithm to assign tasks to machines, which is essentially a multidimensional
bin packing algorithm. Even et al. [28] [29] study the online multicommodity-
ﬂow routing problem and the online VC mapping algorithm. Allowing viola-
tion of capacity constraints, a near-optimal online algorithm is proposed. [20]
propose a quadratic IP formulation for the VC provisioning problem.


Chapter 2. Literature Review
20
No online auctions for VC provisioning theoretically guaranteing performance
has been proposed in the existing literature. Compared to these work, we pro-
pose the pricing rule to stimulate users to report their real valuation, and we
use solid theoretical analysis to show that the performance of our algorithms
is bounded in the worst case.
2.5
Background Knowledge
In this section, we give a brief introduction to the background knowledge in
auction theory, which is important in the following thesis.
Let’s consider a seller (provider) owns N diﬀerent items. N buyers (users)
submit their bids to the seller, specifying their preferences for the items: user
i is willing to pay bj
i for item j, for all ∀i, j ∈{1, . . . , N}. bj
i is also referred
as the user’s valuation for an item. We denote the set of bidding valuations
by user i as bi = {b1
i , . . . , bN
i }.
We denote the set of bids by all users as
b = {b1, . . . , bN}. Denote the set of bids by all users except user i as b−i =
{b1, . . . , bi−1, bi+1, . . . , bN}.
An feasible allocation in this model is to assign each item to one user, and
each user receives exactly one item. We represent the allocation function by
the seller as: Ai(b), which means that the seller, after receiving all bids b,
assigns item Ai(b) to user i. An important goal in designing the allocation
function (or algorithm) is to maximize total social welfare, which equals to
the total user valuation: P
i∈{1,...,N} bAi(b)
i
.
Let’s further consider the scenario where users submit bids at diﬀerent time,
and the seller needs to decide the item allocated to the user upon his arriving
time, without the knowledge of the bids of future users. Then the allocation
problem in this model becomes online problem since the seller does not have
complete information when making decisions, and thus can not achieve maxi-
mal social welfare. We compare the social welfare under the online allocation
algorithm with the social welfare under the oﬄine optimal allocation, and
calculate their ratio: Sonline/Soffline. The supremum of this ratio under dif-
ferent user bids is referred as the social welfare competitive ratio of the online
algorithm.
Next we deﬁne the payment decision by the seller, and the related concepts.
Suppose after the seller decides the allocation Ai(b) for each user, he also
decides a payment Pi(b), which is the payment he will charge from the user,
given the user bids b. We deﬁne the user i’s utility as Ui = bAi(b)
i
−Pi(b). We
say an auction mechanism is individual rational if any user’s utility will never
be negative. Individual rationality is a prerequisite for an auction to attract


Chapter 2. Literature Review
21
users, since no user is willing to participate an auction where his payment
could be higher than his valuation. We can deﬁne the provider’s revenue as
the total payment he collects: P
i∈{1,...,N} Pi(b).
Finally we introduce the most important concept in auction theory: truthful-
ness. We say an auction is truthful if for any user i, he can never increase his
utility Ui, even if he makes false bid b′
i, under any other users’ bids b−i. To
be speciﬁc, for any false bid ∀b′
i ̸= bi, regardless of other users bids ∀b−i, the
utility he receives: U ′
i = b
Ai(b′
i∪b−i)
i
−Pi(b′
i ∪b−i), is no larger than his utility
under truthful bid: Ui = bAi(b)
i
−Pi(b).




Chapter 3
RSMOA: A Revenue and Social
Welfare Maximizing Online
Auction for Dynamic Cloud
Resource Provisioning
In this chapter, we study online cloud resource auctions where users can arrive
anytime and bid for heterogeneous types of virtual machines (VMs) assem-
bled and provisioned on the ﬂy. The proposed auction mechanism RSMOA,
to the authors’ knowledge, represents the ﬁrst truthful online mechanism that
timely responds to incoming users’ demands and makes dynamic resource pro-
visioning and allocation decisions, while guaranteeing eﬃciency in both the
provider’s revenue and system social welfare. RSMOA consists of two compo-
nents: (1) an online mechanism that computes resource allocation and users’
payments based on a global, non-decreasing pricing curve, and guarantees
truthfulness; (2) a judiciously designed pricing curve, which is derived from
a threat-based strategy and guarantees a competitive ratio O(ln(p)) in both
system social welfare and the provider’s revenue, as compared to the celebrat-
ed oﬄine Vickrey-Clarke-Groves (VCG) auction. Here p is the ratio between
the upper and lower bounds of users’ marginal valuation of a type of resource.
The eﬃcacy of RSMOA is validated through extensive theoretical analysis and
trace-driven simulation studies.
23


Chapter 3. Online Auction for Dynamic Cloud Resource Provisioning
24
3.1
System Model and Deﬁnitions
3.1.1
Auction Model
We consider a cloud provider who owns a pool of R types of resources (e.g.,
CPU, RAM, disk) that can be dynamically assembled into M diﬀerent types
of virtual machines (VMs), V M1, · · · , V MM. Let [X] be the set of integers
{1, 2, . . . , X}.
One instance of V Mm is constituted by αm,r units of type-
r resource, for all r ∈[R]. There are Ar units of resource r in total, and
A = P
r∈[R] Ar is the overall number of units of all resources.
The cloud
operates over a continuous, potentially large time interval [0, T].
There are N users in the cloud, where user n (n ∈[N]) learns her VM demand
at time tn.
Without loss of generality, assume t1 ≤t2 ≤. . . ≤tN.
The
valuation of user n for a possible VM bundle dn = (dn,1, · · · , dn,M) is bn(dn)
per time unit.
Here dn,m represents the number of V Mm instances in the
bundle. bn(dn) is user n’s valuation function, mapping a possible VM bundle
to a real value. A user can express her valuation function by enumerating
the values corresponding to all the possible VM bundles, or more succinctly
using a formula that reﬂects the need of her job. Consider an example system
with two types of VMs. User n running a MapReduce job requires several
instances of V M1 for the mapping tasks and V M2 for the reducing tasks.
Assume that from past experience, the number of instances of V M1 should be
3 times that of V M2. Her valuation for diﬀerent bundles of the two types of
VMs is: bn(3, 1) = 6, bn(6, 2) = 9, bn(9, 3) = 10. The valuation function can
hence be expressed as:
bn(3x, x) = 10 −(3 −x)2, for 1 ≤x ≤3
In the online auction, user n who knows her VM demand at time tn sends
her bid bn(·) to the provider. Here we assume she bids her real valuation
function bn(·), and later we will show that this assumption is reasonable for
any rational users, by proving truthfulness in VM valuation. Upon receiving
user n’s bid, and prior to opening the next user’s bid, the provider decides
the bundle dn(t) for allocation to user n at time t, along with a per-time-unit
price πn(t). User n uses the allocated resources until she decides to leave and
terminate the VMs at time tn.
The provider does not know the arrival and departure times tn and tn of each
user in advance. A user’s true valuation (the valuation function) is private
information, and can be diﬀerent from her bid. The user’s utility per time
unit is the diﬀerence between her valuation and the payment on the allocated
bundle dn(t):
un(t) = bn(dn(t)) −πn(t)
(3.1)


Chapter 3. Online Auction for Dynamic Cloud Resource Provisioning
25
During user n’s residence time [tn, tn], the provider can adjust the bundle dn(t)
of VMs allocated to the user, as well as the price πn(t), under the guarantee
that the user’s utility never decreases due to such adjustment. The adjustment
is typically done when more sources become available, and is reasonable due
to the elastic demand of each user, as expressed in her valuation function.
At the provider side, the total amount of resources from the VMs provided to
all the users at any time cannot exceed the resource capacity:
X
n∈[N]
X
m∈[M]
dn,m(t)αm,r ≤Ar, ∀r ∈[R], t ∈[1, T]
(3.2)
Currently in our model we suppose the cloud provider or the datacenter can
assemble VMs as long as there are idle CPU/RAM/disk resources. But in
reality, the provider also needs to consider the VM-packing on server level,
since resources on diﬀerent servers cannot be packed into a VM. However, to
formulate the resource packing problem on the server level, the model will
become very complicated and diﬃcult to handle. We leave this challenge as
future work.
We assume that the provider can gain a residual value p per time unit if a
unit of resource r is not used, which can be considered as the operational cost
that is saved. Note here we adjust the units of diﬀerent types of resources so
that all types of resources have a uniform residual value p.1 The revenue of
the provider at time t is the sum of users’ payments and the overall residual
value for all the unallocated resources:2
uP(t) =
X
n∈[N]
πn(t) +
X
r∈[R]
p e
Ar(t)
(3.3)
Here e
Ar(t) is the remaining units of resource r at time t:
e
Ar(t) = Ar −
X
n∈[N]
X
m∈[m]
αm,rdn,m(t)
(3.4)
1For instance, suppose 1 CPU unit has a residual value $1, and 1 GB memory has a
residual value of $4. We then use 0.25GB as the unit of memory, and the residual values of
CPU and memory are now both $1.
2Another way to formulate the provider’s revenue: Let p be the unit operational cost
of the resources. The provider’s revenue is more naturally expressed as P
n∈[N] πn(t) −
P
r∈[R] p(Ar −e
Ar(t)) = P
n∈[N] πn(t) −P
r∈[R] pAr + P
r∈[R] p e
Ar(t). Here P
r∈[R] pAr is
a constant, removing which we obtain (3.3). Using the revenue formulation in (3.3) and
interpreting p as the residual value instead, provide us convenience in proving properties of
our auction, as well as connect better to the pricing curve design in Sec. 3.3.


Chapter 3. Online Auction for Dynamic Cloud Resource Provisioning
26
The achieved social welfare at time t is the sum of the provider’s revenue and
the users’ utilities:
S(t) =
X
n∈[N]
bn(dn(t)) +
X
r∈[R]
p e
Ar(t)
(3.5)
We assume the marginal valuation of any type of resource r of any user is
lower bounded by p (intuitively, the valuation of the resource should be no
lower than the residual value when the resource is not sold), and has an upper
bound p as well, i.e.,
X
r∈[R]
αm,rp ≤∂bn(dn)
∂dn,m
≤
X
r∈[R]
αm,rp.
We denote the ratio between the upper bound and the lower bound by p = p/p.
We also assume bn(·) is concave and non-decreasing on the number of any type
of VMs, i.e., ∂2bn(dn)
∂d2
n,m
≤0, ∂bn(dn)
∂dn,m ≥0.
For ease of reference, we summarize important notation in Table 3.1.
3.1.2
Economic Properties
The following properties are pursued in our auction design.
(i) Non-decreasing user utility. The solution space in our auction design
includes re-adjusting the bundle allocated to a user n at a time t ∈(tn, tn). A
corresponding desirable property that such re-adjustment should satisfy, for
encouraging user participation, is that a user always gains a higher utility from
the new bundle allocated and is hence happy with the adjustment. Formally,
we require ∀t1 > t2 ∈[tn, tn], un(t1) ≥un(t2), ∀n ∈[N].
We continue with our MapReduce example to illustrate this property. Suppose
user n is allocated 6 instances of V M1 and 2 instances of V M2 upon bidding,
at a per-unit-time price 6. Her utility is therefore 9 −6 = 3. At a later time
point, the provider decides to give her 3 more instances of V M1 and 1 more
instance of V M2, at a price 6.5 per unit time for all the 9 + 3 instances. The
user’s new utility becomes 10 −6.5 = 3.5.
The valuation function allows a user to express her elastic demand on the
resources. For example, a user can conﬁgure the upper bound of resources
desired, by having the valuation function reach a plateau at the upper bound,
such that further excess supply results in zero valuation increment. In this
way, a user can impose a cap on the amount of received resources by specifying
her valuation function accordingly.


Chapter 3. Online Auction for Dynamic Cloud Resource Provisioning
27
Table 3.1: Notation for Chapter 3
N
# of users
[X]
integer
set
{1, 2, . . . , X}
M
# of VM types
tn
user n’s bidding time
R
# of resource types
tn
user n’s leaving time
T
total time length
V Mm
VM type m
αm,r
# of resource r required by V Mm
Ar
available units of resource r
A
total available units of all resources
e
Ar(t)
total units of remaining resource r at time t
πn(t)
user n’s payment per time unit at time t
un(t)
user n’s utility per time unit at time t
p
lower bound of marginal valuation of any
resource, as well as the provider’s residual value
p
upper bound of marginal valuation
p
ratio between the upper and lower bounds of the
marginal valuation
D
set of all the possible bundles
dn(t)
user n’s allocated bundle at time t
dn,m(t)
# of V Mm in user n’s bundle at time t
bn(dn)
user n’s valuation function
τ
queue containing all the current users
uP (t)
the provider’s revenue at time t
S(t)
social welfare at time t
cS
social welfare competitive ratio
cR
provider revenue competitive ratio
We would like to emphasize that the non-decreasing utility is a property
achieved by our algorithm, rather than a constraint or restriction imposed
on the model.
The design of online algorithms typically enables dynamic
adjustment over time in order to improve the algorithm eﬃciency. Existing
online mechanisms, such as the Amazon Spot Instance market [4], may ter-
minate the leases at any time and bring signiﬁcant uncertainty to the users.
We seek to improve the existing mechanisms by providing guarantee of basic
resources to the users, while retaining ﬂexibility in adjusting resource alloca-
tion, which is essential to the eﬃciency of the online auction. By guaranteeing
a non-decreasing utility (calculated based on the valuation function), the dy-
namic adjustment of allocated resources is welcomed by a user who targets
utility maximization.
(ii) Individual Rationality. An online auction is individually rational if
no user has a negative utility over her staying time: ∀n ∈[N], t ∈[tn, tn],


Chapter 3. Online Auction for Dynamic Cloud Resource Provisioning
28
un(t) ≥0.
(iii) Truthfulness in VM Valuation. Each user in the auction achieves her
maximum utility if she bids her valuation bn(·) truthfully regardless of other
users’ bids. The user’s utility gain by reporting bn(·) should be no smaller
than the utility gain with a false bid b′
n(dn) ̸= bn(dn).
(iv) Truthfulness in Demand Arrival Time. A user may try to delay her
bid upon learning her resource demand, in order to maximize her total utility
across her staying in the cloud. Truthfulness in demand arrival time guaran-
tees that bidding at the time user n learns her demand, i.e., tn, maximizes
her total utility.
(v) Competitiveness in Social Welfare. We compare the overall social
welfare of the online auction with the social welfare under the oﬄine VCG
auction, which is the optimal oﬄine social welfare [71].
The oﬄine VCG
auction calculates the maximum oﬄine social welfare by collecting all the
bids over [0, T] and ﬁnd the optimal allocation satisfying all the constraints
introduced in Sec. 3.1.1 and guaranteeing a non-decreasing utility at each user.
Suppose the social welfare at t under the oﬄine VCG is Svcg(t). Denote the
total social welfare under our auction mechanism and the oﬄine VCG auction
by S and Svcg respectively. The supremum of
cS = Svcg
S
=
R T
0 Svcg(t)dt
R T
0 S(t)dt
is referred to as the social welfare competitive ratio of the online auction.
(vi) Competitiveness in Provider’s Revenue. We compare the provider’s
revenue from the online auction with the revenue under the oﬄine VCG auc-
tion as well. Suppose the revenue at t under the oﬄine VCG is uPvcg(t). The
supremum of cR = uP vcg
uP
=
R T
0 uP vcg(t)dt
R T
0 uP (t)dt
is the revenue competitive ratio of our
online auction.
3.2
Online Auction Design
3.2.1
Conditions on Truthfulness and Individual Ratio-
nality
We start our auction mechanism design by investigating conditions that must
be satisﬁed to guarantee truthfulness of the online auction in both the VM
valuation and demand arrival time, as well as individual rationality.


Chapter 3. Online Auction for Dynamic Cloud Resource Provisioning
29
Assume the provider calculates user n’s payment πn(t) by a function πn(bn(·), dn, t),
which is dependent on user n’s valuation function, her received bundle, and
the current time, (and implicitly the bids of previously arriving users). Here
we slightly abuse the notation πn to denote both the user’s actual payment,
and the payment calculation function used by the provider. We will show
that, for truthfulness in VM valuation, the payment πn(bn(·), dn, t) should be
independent from a user’s bid bn(·), to prevent the user from inﬂuencing the
payment by modifying her bid. Therefore, the payment calculation function
can be simpliﬁed to πn(dn, t). Another intuitive requirement on the payment
is that it should be bundle-monotonic, i.e., larger bundles with more resources
are priced higher. The idea is simple: if smaller bundles are more expensive,
the mispricing will be exploited by dishonest users. After a pricing function
πn(dn, t) is established, the exact bundle dn(t) to be allocated to user n can
be decided based on the pricing function and the user’s valuation. A general
rule in truthful auction design is to allocate the amount of resource which
maximizes the user’s utility. Since maximizing her utility is a user’s objec-
tive, such a mechanism encourages users to bid truthfully by giving them the
maximum utility.
We give the deﬁnitions of the above three requirements
and prove them as necessary conditions for truthfulness in VM valuation in
Theorem 3.4. The detailed proof can be found in Appendix 8.1.
Deﬁnition 3.1. (Bid-independent Payments) Let πn(bn(·), dn, t) denote the
payment of user n at time t if receives bundle dn by bidding bn(·).
The
payment is bid-independent if for any two diﬀerent bids bn(·) ̸= b′
n(·) which
lead to the same bundle allocation result, the payments are always the same,
i.e., πn(bn(·), dn, t) = πn(b′
n(·), dn, t).
When bid-independent, the payment only depends on a user’s allocated bundle
and previous user bids.
Deﬁnition 3.2. (Bundle-monotonic Payments) Deﬁne dn ≥d′
n if dn,m ≥
d′
n,m, ∀m ∈[M]. A bid-independent payment is further called bundle-monotonic
if πn(dn, t) ≥πn(d′
n, t), ∀dn ≥d′
n.
Deﬁnition 3.3. (Utility-maximizing Allocation Rule) An allocation rule is
utility-maximizing if the provider always calculates a payment function πn(dn, t)
independent of user n’s bid, and decides the VM allocation by ﬁnding the bun-
dle d∗
n(t) which maximizes this user’s utility un(t), i.e.,
d∗
n(t) = arg max
d∈D
(bn(dn) −πn(dn, t))
(3.6)
where D is the set of all possible VM bundles.
In the special cases where the maximum utility is negative, the provider allo-
cates an empty bundle to the user (resulting in zero utility).


Chapter 3. Online Auction for Dynamic Cloud Resource Provisioning
30
Theorem 3.4. (Necessary Conditions on Truthfulness in VM valuation) For
any VM valuation truthful deterministic online auction, its payment must
be bid-independent, bundle-monotonic, and the allocation should be utility-
maximizing.
Next we study truthfulness in the demand arrival time. To incentive users
to bid as soon as their demands arrive (tn), the auction mechanism should
“punish” users who postpone their bidding, by charging higher prices for the
same bundles. We deﬁne a time-monotonic payment as follows, and prove that
by adding this requirement, we have identiﬁed a set of suﬃcient conditions for
an online auction to be truthful in VM valuation and demand arrival time,
as well as individually rationality, in Theorem 3.6, with a detailed proof in
Appendix 8.2.
Deﬁnition 3.5. (Time-monotonic Payment) The payment is time-monotonic
if user n never gets a lower price for the same bundle dn by delaying her
bidding time: if user n bids at time t1, her payment is πn(dn, t) at time t ≥t1;
if she bids at time t2 > t1, her payment at time t ≥t2 is π′
n(dn, t) ≥πn(dn, t).
Given that the users are diﬀerentiated by their arrival times, the property
is equivalent to the following: for any users n1 < n2, n1 ∈[N], n2 ∈[N],
πn1(d, t) ≤πn2(d, t), ∀t ∈[0, T], ∀d ∈D.
Theorem 3.6. (Suﬃcient Conditions on Truthfulness and Individual Ratio-
nality) An online auction with a bid-independent, bundle-monotonic, time-
monotonic payment and a utility-maximizing allocation rule is truthful in VM
valuation, truthful in demand arrival time, and individual rational.
3.2.2
Online Auction Mechanism
Based on Theorem 3.6, we are able to design an online auction framework that
achieves the three important properties: At time t upon receiving a user n’s
bid, the provider prepares a payment function πn(dn, t) that depends on the
bundle to be allocated to user n (dn) and all previous user bids before t (but
independent of user n’s bid), and is bundle-monotonic and time-monotonic.
Then the provider selects the bundle d∗
n that maximizes user n’s utility, and
determines her payment by πn(d∗
n, t).
The key lies in designing the payment function. To obtain a payment function
that is bundle-monotonic, we ﬁrst evaluate the total number of units of re-
sources that VMs in the bundle consume, as x(dn) = P
m∈[M]
P
r∈[R] dn,mαm,r.
We then set up a marginal price function P(x) : R+ →R+, which gives the
marginal price of one more unit of resource, when x units of resource have been
allocated. The payment function is deﬁned as: πn(dn, t) =
R x0+x(dn)
x0
P(y)dy,


Chapter 3. Online Auction for Dynamic Cloud Resource Provisioning
31
where x0 is the total number of units of allocated resources before allocating
bundle dn to user n. The payment function is apparently bid-independent
and bundle-monotonic.
The detailed design of the pricing curve, P(x), which is a core component
of RSMOA, is presented in the next section. For now, we know that P(x)
is non-decreasing, such that: (1) a lower marginal price P(x) for smaller x
leads to a lower payment for a user who arrives earlier, which implies time
monotonicity; (2) when more units of resources have been allocated (i.e., x
is larger), a higher marginal price is desirable, such that VM bundles are
allocated to users who value them more – a common technique in resource
allocation to pursue competitiveness in provider revenue and social welfare.
Thus the payment mechanism helps achieve a higher overall valuation (and
also revenue) when the resources are constrained.
To pursue competitiveness, our online auction also enables dynamical adjust-
ment of bundles (prices) allocated (charged) to the existing users who have
arrived earlier, upon arrival of a new user or departure of a user at time t.
Speciﬁcally, users are maintained in a queue τ: a user is added to the tail of
τ upon arrival, and removed from the queue when she departs. The provider
always adjusts bundle allocation to existing users according to their order in
queue τ (the oldest user is handled ﬁrst), in order to guarantee time mono-
tonicity in Deﬁnition 3.5 (i.e., at any time t, the price for the same bundle
to a user who arrived earlier is lower). For each user, the best bundle which
maximizes her utility is selected, and the payment is computed using the pay-
ment function, according to how many units of resources have been allocated
so far.
The non-decreasing pricing curve P(x), combined with the handling order τ,
also guarantees a non-decreasing utility at each user. Consider when a user
n′ is removed from τ, then for any user n who is after n′ in τ, her request
is handled earlier than before. Consequently her payment is the integral of
P(x) on smaller value of x, and with smaller value of P(x). So assuming her
receiving bundle is unchanged, her payment is non-increasing and her utility is
non-decreasing. Further note that the provider always ﬁnds the user’s utility-
maximized bundle among all the possible bundles, which include her original
receiving bundle. As a result, the utility after adjustment is non-decreasing.
Our online auction mechanism, RSMOA, is summarized in Alg. 1.
Its time
complexity is O(NMRB), where B is the maximum number of bundles bid by
one user. Theorem 3.7 proves that RSMOA achieves all the desired properties
except competitiveness, which we will show in the next section. The detailed
proof is given in Appendix 8.3.


Chapter 3. Online Auction for Dynamic Cloud Resource Provisioning
32
Algorithm 1 RSMOA: The Online Auction Mechanism
Do the following at t if there is user arrival or departure:
1: Update queue τ
2: Initialize the amount of allocated resource x0 ←0
3: for all user n in queue τ do
4:
Prepare the payment function πn(dn) =
R x0+x(dn)
x0
P(y)dy
5:
Compute the best bundle to be allocated to user n d∗
n
←
arg maxdn∈D{bn(dn) −πn(dn)}
6:
Compute user n’s payment πn(d∗
n, t)
7:
Update the amount of allocated resource x0 ←x0 + x(d∗
n)
Theorem 3.7. RSMOA, as described in Alg. 1, is truthful in VM valuation,
truthful in demand arrival time, individually rational, and guarantees a non-
decreasing utility at any user over time.
3.3
Pricing Curve and Competitive Ratio Anal-
ysis
In this section, we show that the eﬃciency of Alg. 1 can be achieved by care-
fully designing the global, non-decreasing pricing function P(x). We design
P(x) that guarantees a competitive ratio O(ln p) in the provider’s revenue as
well as in social welfare, based on a threat-based approach proposed in recent
literature [46].
Assume we target a competitive ratio c between the provider’s revenue ob-
tained with Alg. 1 and that with the oﬄine VCG mechanism. Recall in Al-
g. 1, the provider sells resource units (in the form of VM bundles) at the
non-decreasing marginal price P(x) per extra unit. With the threat-based
approach, P(x) is set in a way that the next units of resources are sold to a
user (in the form of a VM bundle, when the user’s valuation of the bundle
is no lower than the payment the provider is asking for), only if not selling
these units leads to an immediate violation of the competitive ratio c in the
provider’s revenue, in the case that the auction immediately terminates. In
other words, P(x) should lead to rejection of a user unless her bid is so high
that not accepting this bid results in a threat to the revenue competitiveness
of the algorithm. We only consider such immediate threats (i.e., the target
competitive ratio will be violated if the auction immediately terminates), be-
cause only in this scenario can the competitive ratio be calculated accurately
with hitherto available information. Otherwise, if we wish to consider the
competitive ratio at a future time, we need assumptions about the future
events, which complicates the strategy and is less practically feasible.


Chapter 3. Online Auction for Dynamic Cloud Resource Provisioning
33
Such a threat-based approach is a conservative strategy in maintaining a target
competitive ratio c. Intuitively, a more aggressive strategy is to set the prices
so that more resources are sold when a user’s valuation is higher. There is a
catch though: it may mistakenly sell too many resources to a user and miss a
better opportunity to sell the same amount of resources with a higher price in
the future. How to ensure a good competitive ratio with this strategy requires
future studies.
In comparison, the threat-based strategy is guaranteed to
achieve the target ratio c [46].
In order to derive the mathematical expression of P(x) according to the threat-
based strategy, we investigate its inverse function Q(z) = P −1(z).3 Since P(x)
is the marginal price per extra unit of resource when x units have been allocat-
ed, Q(z) represents the total number of units of resources allocated when the
marginal price reaches z. From the perspective of the cloud provider, design-
ing function P(x) and designing function Q(z) are two equivalent problems:
if the provider focuses on P(x), she tries to quote a reasonable price for the
next unit of resource; if she focuses on Q(z), she tries to decide the additional
number of units sold to users, when the marginal price increases. We next
focus on deriving Q(z) by setting up a number of equations on Q(z), accord-
ing to the threat-based strategy. We use V (z) to denote the total payment
collected by the provider for Q(z) units of resources sold, when the marginal
price goes up to z. We derive Q(x) based on the following conditions:
Q(z) = 0 and V (z) = 0, ∀z ≤cp
(3.7)
Recall that the provider gains a residual value p for each unit of unallocated
resource. If the marginal price z is not higher than cp, the provider does not
need to allocate any unit of resource, since the competitive ratio c will not
be violated anyway: the revenue of selling all the resources is no higher than
Acp, but not selling anything can achieve a total residual value Ap.
V ′(z) = zQ′(z), ∀z ∈[cp, p]
(3.8)
The number of resource units sold at marginal price z is Q′(z), and the product
of z and Q′(z) is the additional payment V ′(z).
zA/c = (A −Q(z))p + V (z), ∀z ∈[cp, p]
(3.9)
When the marginal price is z, the worst case is that all the resources, at the
total number of units A, are sold at price z. To maintain a competitive ratio
c, the overall revenue gleaned by the provider should be at least 1/c fraction
of the revenue collected under VCG. The marginal price reaching z shows
3Since P(x) may not be strictly increasing, we deﬁne P −1(z) as the maximum value y
satisfying z = P(y)


Chapter 3. Online Auction for Dynamic Cloud Resource Provisioning
34
that there exists a user, who is the last user under our immediate termination
assumption, valuing one more unit of resources by no more than z (recall
the assumption on non-increasing marginal valuation). None of the previous
users has a higher marginal valuation, since P(x) is non-decreasing. So the
total revenue collected under VCG is no more than Az. Therefore by setting
the revenue target Az/c equal to the sum of total payment V (z) and residual
value of the remaining resources (A −Q(z))p, we can guarantee a competitive
ratio c when comparing our mechanism to VCG.
Q(p) = A
(3.10)
All the resources should have been sold at the upper bound of the marginal
price.
Solving these four groups of equations (3.7)-(3.10), we can derive the solution
of Q(z) as follows (detailed steps are given in Appendix 8.4):
Q(z) = A
Z z
cp
1
c(y −p)dy, z ∈[cp, p]
(3.11)
Then we obtain the marginal pricing function P(x) by inverting Q(z):
P(x) = p(1 + (c −1)ecx/A)
(3.12)
The pricing function is non-decreasing and concave, i.e., the marginal price in-
creases more signiﬁcantly when less available resource remains. Fig. 3.1 shows
an example of the pricing curve P(x), where p = 1, p = 16, A = 1000, and
c = 2.38. The marginal price starts from cp = 2.38, and increases exponen-
tially to the upper bound p = 16, with the increase of the number of allocated
resource units.
Applying such a pricing function in Alg. 1 guarantees a competitive ratio c
in the provider’s revenue, achieved by our online auction. We seek to derive
the best ratio c under which the threat-based strategy remains feasible, which
is given as the solution to the following equation (detailed steps are given in
Appendix 8.4). We can prove the best ratio is c = O(ln p) (recall p = p/p),
since c = W( p−1
e ) + 1, where W(·) is the product log function, a.k.a. the
Lambert W function, and W(n) = O(ln n).
c = ln p −1
c −1
(3.13)
Theorem 3.8 proves that applying the pricing function P(x) in (3.12), a com-
petitive ratio O(ln p) is achieved in terms of the provider’s revenue.
The


Chapter 3. Online Auction for Dynamic Cloud Resource Provisioning
35
0
200
400
600
800
1000
0
4
8
12
16
20
P(x),  for c=2.38,  A=1000,  p=16
P(x)
x
Figure 3.1: An example of P(x).
detailed proof can be found in Appendix 8.5. Surprisingly, though the threat-
based strategy focuses on the provider’s revenue, the same competitive ratio
is achieved in terms of social welfare as well, as stated in Theorem 3.9, and
proved in Appendix 8.6.
Theorem 3.8. Applying the pricing function P(x) in (3.12) in Alg. 1, the
competitive ratio cR of the algorithm in the provider’s revenue is O(ln(p)), if
the resources are not exhausted, i.e., e
Ar(t) > 0, ∀t ∈[0, T].
Theorem 3.9. Applying the pricing function P(x) in (3.12) in Alg. 1, the
competitive ratio cS of the algorithm in social welfare is also O(ln(p)), if the
resources are not exhausted, i.e., e
Ar(t) > 0, ∀t ∈[0, T].
3.4
Performance Evaluation
3.4.1
Simulation setup
We evaluate our online auction design using trace-driven simulations.
We
consider 6 types of VMs and 3 types of resources.
The conﬁgurations of
VMs (αm,r) are based on the instances of Amazon EC2, as shown in Table
1.1.
Users’ resource demands are extracted from Google cluster data [6],
which is a record of computational tasks submitted to the Google cluster, with
information on their resources demands (CPU, RAM, disk). We convert the
resource demands into VM demands by calculating the number of instances
that make up the same amount of resources. The VM demand constructed
in this way corresponds to one VM bundle of a user in our model. Since a


Chapter 3. Online Auction for Dynamic Cloud Resource Provisioning
36
8
16
32
64
128
256
512
1024
0
1
2
3
4
5
Svcg/S
p
 Theoretical bound
 RSMOA
N=10000, 60% of Total Demand
Figure 3.2: Social welfare of RSMOA compared with oﬄine VCG auction
under diﬀerent values of p
user’s demand is elastic in our model, we create elastic demand of a user in
the following manner: Suppose the basic VM bundle needed by user n from
the Google data is dn, the user can receive bundles 2dn, 3dn, . . . , λdn at
diﬀerent valuations as well, where λ is uniformly distributed in [1, 5]. A user
by default applies a linear, increasing valuation function bn(·), with a marginal
valuation (i.e., slope of the linear valuation function) uniformly distributed
within [1, p]. The default number of users is N = 10000. The system runs for
T = 10000. The arrival time tn of a user is uniformly distributed within [0, T],
and the departure time of the user is uniformly distributed within (tn, T]. The
total number of units of resources of each type is by default 60% of the overall
maximum amount demanded by all users. We run each experiment for 10
times, and present the average result.
3.4.2
Simulation results
We ﬁrst compare the ratio of the social welfare achieved by the oﬄine VCG
auction and that achieved by our online auction in the experiments, with
the theoretical worst-case competitive ratio O(ln p), at diﬀerent values of p.
Fig. 3.2 shows that the ratio in practice is much better than the worst-case
bound, and is close to the optimum 1. We also observe that our online auction
performs close to the oﬄine VCG auction regardless of the value of p.
Next we suppose a concave valuation function for each user (with linearly de-
creasing marginal valuation), instead of a linear valuation function. Fig. 3.3


Chapter 3. Online Auction for Dynamic Cloud Resource Provisioning
37
8
16
32
64
128
256
512
1024
0.0
0.5
1.0
1.5
2.0
Svcg/S
N=10000, 60% of Total Demand
p
 Linear Valuation
 Concave Valuation
Figure 3.3: Social welfare of RSMOA compared with oﬄine VCG auction
under concave valuation and linear valuation
compares the ratio between the social welfare achieved by the oﬄine VCG
auction and that achieved by our online auction under the two types of valua-
tion functions. The ratio is slightly larger when the concave valuation function
is used. With the concave valuation function, the marginal valuation of each
additional VM is variable, which makes it more diﬃcult for the algorithm to
ﬁnd an optimal allocation.
We further evaluate the impact of diﬀerent number of users on the performance
of our online auction in Fig. 3.4, where p is ﬁxed at 8. It can be concluded
that the performance of RSMOA is not aﬀected by the number of the users,
which is consistent with our analysis of the worst-case ratio, which is only
related to p.
Our theoretical analysis in Theorem 3.8 and 3.9 only guarantees a competitive
ratio when the total amount of resources at the provider is suﬃcient. As a
supplement to our theoretical results, we evaluate the performance of our
auction when the resources are more constrained, by setting the total amount
of resources of each type to be 60%, 50%, . . . , 10% of the overall demand of
the users. Fig. 3.5 shows only slight increase of the ratio when the resources
are more scarce.
Finally, we compare the provider’s revenue achieved with RSMOA with the
revenue under the oﬄine VCG auction. Fig. 3.6 shows that the revenue under
our online auction is close to that of the oﬄine VCG.


Chapter 3. Online Auction for Dynamic Cloud Resource Provisioning
38
1000
2000
3000
4000
5000
6000
7000
8000
0.0
0.5
1.0
1.5
2.0
2.5
Svcg/S
p=8, 60% of Total Demand
Number of users, N
 Theoretical bound
 RSMOA
Figure 3.4: Social welfare of RSMOA compared with oﬄine VCG auction
under diﬀerent numbers of users
8
16
32
64
128
256
512
1024
1.0
1.2
1.4
1.6
1.8
2.0
Svcg/S
N=10000
p
 60% Total Demand
 50% Total Demand
 40% Total Demand
 30% Total Demand
 20% Total Demand
 10% Total Demand
Figure 3.5: Social welfare of RSMOA compared with oﬄine VCG auction
under diﬀerent amounts of resources
3.5
Summary
RSMOA presented in this chapter can be applied to other related models. For
example, the temporal domain can be ﬁnite or inﬁnite, continuous or slotted.
Users can modify their valuation at any time during the auction. RSMOA just
treats the users with modiﬁed valuation as new incoming users, whose utility
may decrease. But other users are unaﬀected and still gain a non-decreasing
utility.


Chapter 3. Online Auction for Dynamic Cloud Resource Provisioning
39
4
8
16
32
64
128
256
0
1
2
3
4
N=10000, 60% of Total Demand
UPvcg/UP
p
 Theoretical bound
 RSMOA
Figure 3.6: Provider’s revenue of RSMOA compared with oﬄine VCG
auction under diﬀerent values of p
RSMOA represents the ﬁrst online combinatorial auction for dynamic cloud
resource provisioning with guaranteed revenue and social welfare. It advances
the state-of-the-art of cloud auction design in that all previous VM auction
mechanisms either have ﬁxed VM provisioning, or focus on one performance
metric only. Our online auction, RSMOA, comprises of two components. First
we design an online mechanism based one a set of necessary conditions of the
truthful property. Second, we derive the closed form of the critical pricing
curve from a threat-based strategy. RSMOA guarantees a competitive ratio
of O(ln p) where p is the ratio between the upper and lower bounds of users’
marginal valuation of any type of resource. Trace-driven simulation shows
RSMOA achieves near-optimal performance in practical scenarios.
In the next chapter, we are going to extend the model so that the users can bid
for multiple bundles and the provider chooses one bundle from the user’s bid to
serve. The decisions on VM assembling, which organizes the CPU, RAM and
Disk resource pools into typed VM instances, are dynamically upon receiving
user bids. We also add other features such as budgets for users.




Chapter 4
An Online Auction Framework
for Dynamic Resource
Provisioning in Cloud
Computing
In Chapter 3, we study the online auction mechanism for heterogeneous VM
allocation.
In this chapter, we are going to extend the model so that the
users can bid for multiple bundles and the provider chooses one bundle from
the user’s bid to serve. The decisions on VM assembling, which organizes the
CPU, RAM and Disk resource pools into typed VM instances, are dynamically
upon receiving user bids. We also add user budgets, supposing that each user
only have limited money to rent VMs in the auction period.
The auction algorithm presented in this chapter, to the authors’ knowledge,
represents the ﬁrst online combinatorial auction designed for the cloud com-
puting paradigm, which is general and expressive enough to both (a) optimize
system eﬃciency across the temporal domain instead of at an isolated time
point, and (b) model dynamic provisioning of heterogeneous Virtual Machine
(VM) types in practice. The ﬁnal result is an online auction framework that is
truthful, computationally eﬃcient, and guarantees a competitive ratio ≈3.30
in social welfare in typical scenarios. The framework consists of three main
steps: (1) a tailored primal-dual algorithm that decomposes the long-term op-
timization into a series of independent one-shot optimization problems, with a
small additive loss in competitive ratio, (2) a randomized sub-framework that
applies primal-dual optimization for translating a centralized co-operative so-
cial welfare approximation algorithm into an auction mechanism, retaining the
competitive ratio while adding truthfulness, and (3) a primal-dual algorithm
for approximating the one-shot optimization with a ratio close to e. We also
41


Chapter 4. Auction Framework for Dynamic Resource Provisioning
42
propose two extensions: (1) a binary algorithm which improves the average-
case performance; (2) an improvement to the online auction framework when
a minimum budget spending fraction is guaranteed, which produces a better
competitive ratio. The eﬃcacy of the online auction framework is validated
through theoretical analysis and trace-driven simulation studies. We are also
in the hope that the framework can be instructive in auction design for other
related problems.
4.1
Problem Model
4.1.1
The Cloud System
We consider a cloud spanning Q geographically distributed datacenters, each
with a pool of R types of resources including CPU, RAM, and disk storage
that can be dynamically assembled into M diﬀerent types of virtual machines
(VMs), for lease to cloud users. Let [X] denote the integer set {1, 2, . . . , X}.
Each VM of type m ∈[M] is constituted by αm,r units of type-r resource, for
all r ∈[R]. There are N users of the cloud system, which request VMs of
diﬀerent types to execute their jobs. The cloud provider acts as the auctioneer
and leases VMs to the users through auctions. The system runs in a time-
slotted fashion within a span of 1, 2, . . . , T, where T is a potentially large
number. We suppose the available amounts of resources at each datacenter
are time-varying, i.e., there are A(t)
q,r units of type-r resource in datacenter q at
time t ∈[T], whose value may change from one time slot to another.1 In each
time slot, one round of the auctions is carried out, where the cloud provider
decides the VM allocation for the current time slot based on user bids. The
terms time slot and round are used interchangeably.
The N cloud users are bidders in the auctions, each submitting a bid contain-
ing K optional bundles in each round. A bundle consists of a list of desired
quantities of VMs of diﬀerent types, as well as the bidder’s valuation for the
bundle. Speciﬁcally, let d(t)
n,k,m,q denote the number of type-m VMs in data-
center q that user n speciﬁes in its k-th bundle in time slot t, and b(t)
n,k be its
valuation for this k-th bundle in t. The k-th bundle in the bid of user n in the
auction at t is described by a (MQ + 1)-tuple of elements d(t)
n,k,m,q, ∀m, q, and
b(t)
n,k. The cases where a user may join and leave (intermittent bidding) or may
bid a smaller number of bundles than K, are all subsumed by our bid model
by allowing empty bundles in the bids.
1The varying amounts of resources may be caused by removal or addition of servers, due
to failure and recovery, or potential reservation or release of resources for special purposes,
e.g., as part of a hybrid cloud of an enterprise.


Chapter 4. Auction Framework for Dynamic Resource Provisioning
43
One bundle can include VMs from diﬀerent DC, and one bid can include two
or more bundles for the same DC. We design a most ﬂexible bidding language
so that the users can express any VM requirement. For example, some users
need VMs at diﬀerent DCs to stay close to users from diﬀerent geographical
regions.
In each round, upon receiving users’ bids, the cloud provider computes its
resource allocation and produces the auction results, y(t)
n,k ∈{0, 1}, where y(t)
n,k =
1 if user n wins bundle k and 0 otherwise, as well as its payment Π(t)
n
for
acquiring VMs in its winning bundle.
We assume that a user can win at
most one bundle among its K optional bundles in each round of the auctions
(given that any need for combining two or more bundles can be expressed
as a separate bundle already). In addition, the VM demands in each bundle
cannot be supplied partially, i.e., the cloud provider either provides all the
required VMs in a bundle to the bidder or rejects the bundle.
Let u(t)
n denote the utility function of user n in time slot t, which is decided
by its valuations of the bundles and its payment at t. We will present the
concrete form of the utility function in Sec. 4.3. We assume user n has a total
budget Bn, which is a bound of its overall payment in the auctions throughout
the system span [T] under consideration, e.g., a pre-allocated budget for VM
rental over a month or a year, which is assumed to be known by the provider. A
user’s valuations in its bids are independent from its current budget level, while
its current budget level will be taken into consideration at the cloud provider
when allocating resources.
Users usually notify his budget to the provider,
so that the provider can automatically cut the user oﬀafter he exhausting
his budget. This guarantees that the user’s budget is never exceeded. So we
assume that the budget information is known by the provider.
We list important notation in this chapter in Table 4.1.
4.1.2
The Online Auction Problem
We aim to design an online auction mechanism to be carried out by the cloud
provider, which guides resource allocation in the cloud system in a round-by-
round fashion through multiple consecutive rounds. The auction design tar-
gets the following properties. (i) Truthfulness (Deﬁnition 4.1): Bidding true
valuations is a dominant strategy at the users, and consequently, both bidding
strategies and auction design are simpliﬁed. (ii) Individual rationality: Each
bidder obtains a non-negative utility by participating in the auction in any
time slot, i.e., u(t)
n ≥0, ∀n, t. (iii) Social welfare maximization: The social wel-
fare in our system is the sum of the cloud provider’s revenue, P
t∈[T]
P
n∈[N] Π(t)
n ,


Chapter 4. Auction Framework for Dynamic Resource Provisioning
44
Table 4.1: Notation for Chapter 4
N
# of users
[X]
integer set {1, 2, . . . , X}
T
# of time slots
R
# of resource types
M
# of VM types
Q
# of datacenters
K
# of optional bundles in each bid
αr
m
amount of resource r in each type-m VM
A(t)
q,r
available resource r at datacenter q at time t
b(t)
n,k
user n’s valuation for its k-th bundle at t
d(t)
n,k,m,q
# of type-m VM at dc q in n’s k-th bundle at t
c(t)
n,k,r,q
amount of resource r at dc q in n’s k-th bundle at t
Bn
user n’s total budget
y(t)
n,k
user n wins its k-th bundle at time t or not
y(t)F
n,k
optimal fractional solution
y(t)l
n,k
an integer solution to (4.3)
Π(t)
n
user n’s payment at time t
Π(t)F
n
user n’s payment at time t under fractional VCG
Π(t)l
n
user n’s payment at time t under allocation y(t)l
βl
probability to choose integer solution y(t)l
u(t)
n
user n’s utility at time t
ν
the competitive ratio of Around
λ
the approximation ratio of Alg. 3
w(t)
n,k
the reduced valuation of n’s k-th bundle at time t
Bmax
max ratio: a single bundle bid / a user’s budget
γ
(1 + Bmax)1/Bmax
gn
user n’s minimum budget spending fraction
g
minn∈[N] gn
and all the users’ utility gain, P
t∈[T]
P
n∈[N](P
k∈[K] b(t)
n,ky(t)
n,k−Π(t)
n ), which equal-
s aggregated user valuation of the winning bundles (under truthful bidding),
P
t∈[T]
P
n∈[N]
P
k∈[K] b(t)
n,ky(t)
n,k. Users’ payment and the provider’s revenue can-
cel out each other.
Deﬁnition 4.1. (Truthfulness) The auction mechanism is truthful if for any
user n at any time t, declaring a bid that truthfully reveals its requirements of
VM quantities, d(t)
n,k,m,q, ∀m, q, k, and its valuations of bundles b(t)
n,k, ∀k, always
maximizes its expected utility, regardless of other users’ bids.
We ﬁrst formulate an oﬄine social welfare optimization problem which pro-
vides the “ideal” optimal allocation strategies for the cloud provider to address
users’ VM demands in the entire system lifespan T, assuming bids are truthful.


Chapter 4. Auction Framework for Dynamic Resource Provisioning
45
Let c(t)
n,k,r,q = P
m d(t)
n,k,m,qαm,r be the amount of type-r resource at datacenter q
required in user n’s k-th bundle.
maximize
X
t∈[T]
X
n∈[N]
X
k∈[K]
b(t)
n,ky(t)
n,k
(4.1)
s.t.
X
k∈[K] y(t)
n,k ≤1,
∀n ∈[N], t ∈[T],
(4.1a)
X
k∈[K]
X
t∈[T] b(t)
n,ky(t)
n,k ≤Bn,
∀n ∈[N],
(4.1b)
X
n∈[N]
X
k∈[K]
c(t)
n,k,r,qy(t)
n,k ≤A(t)
q,r,
∀q ∈[Q], r ∈[R], t ∈[T],
(4.1c)
y(t)
n,k ∈{0, 1},
∀n ∈[N], k ∈[K], t ∈[T]. (4.1d)
Constraint (4.1a) speciﬁes that each user can win at most one bundle each
round. (4.1b) is the budget constraint at each user. (4.1c) limits the over-
all demand for each type of resource in the winning bundles by the amount
available.
Introducing dual variable vectors s, x, and z to constraints (4.1a), (4.1b) and
(4.1c) respectively, and ignore the binary variable constraint (4.1d) temporar-
ily, we can formulate the dual of the resulting linear program, to be used in
the primal-dual algorithm design in Sec. 4.2:
min
X
n∈[N]
Bnxn +
X
n∈[N]
X
t∈[T]
s(t)
n +
X
q∈[Q]
X
r∈[R]
X
t∈[T]
Aq,r(t)z(t)
q,r
(4.2)
s.t. b(t)
n,kxn + s(t)
n +
X
r∈[R]
X
q∈[Q]
c(t)
n,k,r,qz(t)
q,r ≥b(t)
n,k
∀n ∈[N], k ∈[K], t ∈[T],
(4.2a)
xn, s(t)
n , z(t)
q,r ≥0,
∀n ∈[N], q ∈[Q], r ∈[R], t ∈[T].
(4.2b)
To derive an optimal solution to (4.1), complete knowledge about the sys-
tem over its entire lifespan is needed, which is apparently not practical. In
a dynamic cloud system, the provider should allocate resources on the ﬂy,
based on the current amount of available resources, A(t)
q,r’s, and users’ bidding
bundles including resource demands d(t)
n,k,m,q’s and valuations b(t)
n,k’s, which are


Chapter 4. Auction Framework for Dynamic Resource Provisioning
46
not known a priori. We seek to design an online auction mechanism for real-
time resource allocation, which also guarantees truthful bidding. We achieve
the goals in two steps. First, in Sec.4.2, we assume that a truthful auction
mechanism to be carried out in each time slot is known, and guarantees an
approximation ratio ν, and propose an online algorithm framework that pro-
duces a competitive ratio of (1 + Bmax)(ν +
1
γ−1) as compared to the oﬄine
optimum. Second, in Sec. 4.3, we design a single-round randomized auction,
which achieves the approximation ratio of ν as well as individual rationality
and truthfulness.
4.2
An Online Algorithm Framework
We design an online algorithm framework Aonline as shown in Algorithm 2,
which solves the oﬄine optimization problem (4.1) and its dual (4.2), using a
subroutine Around running at each time slot. We next discuss the one-round
resource allocation problem to be solved by Around, as well as the design
rationale of the online algorithm framework.
4.2.1
One-Round Resource Allocation
Assuming truthful bids are known, the one-round social welfare maximization
problem at time t is as follows, which includes the constraints from the of-
ﬂine optimization problem (4.1) related to the current time slot, and excludes
the user budget constraints (dealt with in the online algorithm framework
instead).
w(t)
n,k, a reduced valuation of user n for bundle k from the actual
valuation b(t)
n,k adjusted according to the level of its remaining budget, is used
in the objective function. The rationale will be detailed in Sec. 4.2.2. Given
w(t)
n,k, the cloud provider’s current resource supplies A(t)
q,r’s, and users’ resource
demands c(t)
n,k,r,q’s, the one-round optimization problem decides the optimal
resource allocation y(t)
n,k at t.
maximize
X
n∈[N]
X
k∈[K] w(t)
n,ky(t)
n,k
(4.3)
s.t.
X
k∈[K] y(t)
n,k ≤1
∀n ∈[N]
(4.3a)
X
n∈[N]
X
k∈[K]
c(t)
n,k,r,qy(t)
n,k ≤A(t)
q,r
∀q ∈[Q], r ∈[R]
(4.3b)
y(t)
n,k ∈{0, 1}
∀n ∈[N], k ∈[K]
(4.3c)


Chapter 4. Auction Framework for Dynamic Resource Provisioning
47
Adopting the same dual variables as in the dual of (4.1) and omitting con-
straint (4.3c), we formulate the dual of LP (4.3):
minimize
X
n∈[N] s(t)
n +
X
q∈[Q]
X
r∈[R] A(t)
q,rz(t)
q,r
(4.4)
s.t. s(t)
n +
X
q∈[Q]
X
r∈[R]
c(t)
n,k,r,qz(t)
q,r ≥w(t)
n,k, ∀n ∈[N], k ∈[K], (4.4a)
s(t)
n , z(t)
q,r ≥0,
∀n ∈[N], q ∈[Q], r ∈[R].
(4.4b)
The primal problem (4.3) is a special case of the multi-dimensional multiple-
choice 0-1 knapsack problem [22], which is both NP-hard and more strongly,
has no fully polynomial-time approximation schemes unless P=NP [35]. What
we will pursue in Around is an auction mechanism, which not only guarantees
individual rationality and truthfulness, but also employs a primal-dual ap-
proximation algorithm that solves problem (4.3) and (4.4) to decide resource
allocation in polynomial time with a small approximation ratio. We delay the
discussion of the auction mechanism to Sec. 4.3, but ﬁrst utilize its properties
when analyzing our online algorithm framework. We will show that given a
competitive ratio ν achieved by the one-round auction mechanism, our online
algorithm framework achieves a good competitive ratio.
4.2.2
The Online Algorithm
When a good approximation algorithm for one-round resource allocation is
in place, the diﬃculty of designing an online algorithm to achieve a good
competitive ratio, deﬁned as the maximum ratio between the oﬄine optimal
social welfare derived by solving (4.1) exactly and the social welfare produced
by the online algorithm. The budget limits the bundles a user can acquire
over the T rounds of auctions, leading to diﬀerent amounts of overall social
welfare when the budget is spent in diﬀerent rounds. The intuition we follow in
designing the online algorithm is that, ineﬃciency in social welfare may appear
when a user’s budget runs out at an early stage, since its future bids become
invalid after its budget depletion, narrowing down possible future allocation
decisions at the provider, prohibiting larger social welfare. The ideal scenario
is that each user’s budget can last for all the T rounds of auctions, making it
possible for the cloud provider to explore the best resource allocation strategies
over the entire span, to approach the best overall social welfare.


Chapter 4. Auction Framework for Dynamic Resource Provisioning
48
Under this intuition, we should be cautious when winning a bundle suddenly
exhausts a user’s remaining budget. Our main idea in the online algorithm
in Alg. 2 is to associate the resource allocation in each round with the users’
remaining budgets. We introduce an auxiliary variable x(t)
n for each user n ∈
[N], whose value starts at 0, increases with the decrease of the remaining
budget of the user, and reaches 1 when the budget is exhausted.
Instead
of the actual valuation b(t)
n,k of each bundle, w(t)
n,k = b(t)
n,k(1 −x(t−1)
n
) is used
in the one-round resource allocation Around as in (4.3), such that the bid
from a user with a smaller remaining budget will be evaluated less at the
cloud provider, leading to a lower chance of acquiring a bundle.
A user’s
budget lasts for a longer period of time as a result.
x(t)
n
is updated after
each round of resource allocation in Algorithm 2, where γ = (1 + Bmax)
1
Bmax .
Bmax = maxn∈[N],t∈[T],k∈[K]{b(t)
n,k/Bn}, which is the maximum ratio between the
valuation of any bundle and the corresponding user’s budget. We consider
Bmax ≪1, given that users typically do not put a large proportion of their
total budget on one bundle in one round. The increment of x(t)
n
is carefully
computed (see proof of Thm. 4.2), such that the budget constraint (4.1b) is
guaranteed over the T rounds of online auctions. We set dual variable xn in
the oﬄine dual problem (4.2), associated with constraint (4.1b), to the value
of the auxiliary variable x(t)
n after T rounds x(T)
n . In this way, the adjustment
of x(t)
n in each round can be understood as the adjustment of the dual variable
xn towards an optimal solution to the oﬄine dual problem (4.2).
Algorithm 2 The Online Algorithm Framework Aonline
x(0)
n ←0, ∀n ∈[N]
for all 1 ≤t ≤T do
w(t)
n,k =
(
0
if x(t−1)
n
≥1
b(t)
n,k(1 −x(t−1)
n
)
otherwise
, ∀n, k.
Run Around. Let N be the set of winning users, and kn be the index of
their corresponding winning bundle, for n ∈N. Deﬁne b(t)
n,kn = 0 for n /
∈N.
x(t)
n ←x(t−1)
n
 
1 + b(t)
n,kn
Bn
!
+
b(t)
n,kn
Bn(γ −1) , ∀n ∈[N]
The performance of our online algorithm in Alg. 2 is stated in Thm. 4.2, with
a detailed proof in Appendix 8.7.
The time complexity is O(NMQR).
Theorem 4.2. If we have an auction mechanism in Around that carries out
resource allocation in each round to produce feasible solutions for (4.3) and
(4.4), and guarantees νp ≥d (hence the competitive ratio of the auction al-
gorithm is also ν), Aonline is (1 + Bmax)(ν +
1
γ−1)-competitive for optimization


Chapter 4. Auction Framework for Dynamic Resource Provisioning
49
(4.1). Here p = P
n∈[N]
P
k∈[K] w(t)
n,ky(t)
n,k is the objective value of the one-round
resource allocation problem in (4.3), and d = P
n s(t)
n + P
q,r A(t)
q,rz(t)
q,r is the dual
objective value in (4.4).
We note that when Bmax →0, the competitive ratio approaches ν +
1
e−1, i.e.,
the long-term online optimization framework incurs only an additive loss of
1
e−1 in competitive ratio, as compared to the one-round allocation algorithm.
4.3
A Randomized Auction Mechanism
We now present a randomized auction mechanism Around which eﬃciently
allocates resources according to users’ bids in each time slot, and guarantees
individual rationality and truthfulness. The auction mechanism in each round
allocates resources according to the one-round resource allocation problem in
(4.3) and decides the payments from the winning bidders. The classic VCG
(Vickrey-Clarke-Groves) mechanism [71] is a potential candidate for our auc-
tion design, which assigns items (VM bundles in our case) to bidders in a
socially optimal manner by solving a corresponding resource allocation prob-
lem, charges each winner the externality it exerts on other bidders, and ensures
that the optimal strategy for a bidder is to bid its true valuations. However,
our allocation problem in (4.3) is NP-hard, and hence a VCG mechanism be-
comes computationally infeasible. We therefore resort to a fractional version
of the VCG auction for achieving both computational eﬃciency (polynomi-
al time complexity) and economic eﬃciency (social welfare maximization in
(4.3)), by applying the VCG mechanism to the LP relaxation of the integer
program (4.3). The fractional VCG mechanism produces fractional bundle
allocation results, which are not practically applicable. We further employ
a primal-dual optimization based decomposition technique that decomposes
such an optimal fractional solution into a convex combination of integral solu-
tions, and then design a randomized auction which randomly picks one from
the integral solutions as the bundle allocation result in each round and retains
the nice properties of a fractional VCG auction. We detail the fractional VCG
auction, the decomposition technique, and the randomized auction design in
the following three subsections.
4.3.1
The Fractional VCG Auction
In the fractional VCG auction, the auctioneer solves the LP relaxation of
(4.3) by relaxing constraint (4.3c) to 0 ≤y(t)
n,k ≤1, ∀n, k, to decide the bundle


Chapter 4. Auction Framework for Dynamic Resource Provisioning
50
allocation in t. Let y(t)F = (y(t)F
n,k )∀n,k denote the resulting optimal fraction al-
location, where y(t)F
n,k
∈[0, 1]. To compute the VCG payment from a winner, the
auctioneer solves the LP relaxation again with the winner excluded from the
allocation. Let e
V (t)
−n denote the social welfare achieved when winner n is exclud-
ed. The payment of winner n, Π(t)F
n
, is: Π(t)F
n
= e
V (t)
−n −P
n′̸=n
P
k∈[K] y(t)F
n′,k w(t)
n′,k.
The utility function u(t)
n of bidder n in a VCG auction is typically deﬁned as
the diﬀerence between its valuation and its payment. In our online auction
framework, a user’s utility in each round should be related not only to its
valuation and payment, but also to its remaining budget: intuitively, smaller
utility gain is appreciated if a user won a bundle when its remaining budget
is small, and larger otherwise. We characterize this property using a utility
function:
u(t)
n
=
X
k∈[K]
y(t)F
n,k w(t)
n,k −Π(t)F
n
.
(4.5)
This utility function is consistent with the social welfare calculation in the
one-round allocation problem (4.3).
Thus a user’s budget can potentially
last longer, enabling later acquirement of better bundles with the same con-
sumption of budget (i.e., the same payment), contributing to social welfare
eﬃciency over all T rounds of auctions.
We show in Thm. 4.3 that under this utility function, bidding true valuations is
the best strategy for each user in the fractional VCG auction. A non-negative
utility is guaranteed for each bidder, based on VCG auction theory [71].
Theorem 4.3. The fractional VCG auction which produces fractional allo-
cation y(t)F
n,k , ∀n ∈[N], k ∈[K], and payments Π(t)F
n
, ∀n ∈[N], is truthful and
individual rational.
The detailed proof can be found in Appendix 8.8.
4.3.2
Decomposing the Fractional Solution
Since fractional VM bundles are impractical in real-world cloud systems, we
next decompose the fractional solution into a combination of integer solu-
tions, which will be used by our randomized auction mechanism. We apply
the LP duality based decomposition technique [47]. The goal of the decom-
position is to ﬁnd βl ∈[0, 1] and a set of integer solutions y(t)l, ∀l ∈L (L is
an index set), to the one-round resource allocation problem (4.3), such that


Chapter 4. Auction Framework for Dynamic Resource Provisioning
51
P
l∈L βly(t)l = y(t)F , and P
l∈L βl = 1. The randomized auction in each round
can choose the integer solution y(t)l with probability βl, achieving a good com-
petitive ratio in social welfare in expectation, as compared to that achieved
by the optimal integer solution to (4.3). However, there in fact does not exist
a convex combination of integer solutions, P
l∈L βly(t)l, that equals the frac-
tion solution y(t)F , because otherwise, the expected social welfare achieved by
these integer solutions equals that achieved by the fractional solution, which
apparently contradicts with the fact that the fractional solution achieves a
higher social welfare than any integer solution. Therefore, to achieve a feasi-
ble decomposition, we need to scale down the optimal fractional solution by
a certain factor. According to [47], if there exists an approximation algorith-
m that solves the one-round allocation problem (4.3) with an approximation
ratio of λ and guarantees λp ≥d (where p and d are the objective function
values of the primal problem (4.3) and dual (4.4) respectively) , we can use λ
as the scaling factor, and rest assured that a feasible solution to the following
decomposition problem exists:
minimize
X
l∈L βl
(4.6)
s.t.
X
l∈L βly(t)l
n,k = y(t)F
n,k /λ,
∀n ∈[N], k ∈[K],
(4.6a)
X
l∈L βl ≥1,
(4.6b)
βl ≥0,
∀l ∈L.
(4.6c)
Algorithm 3 A Primal-Dual Algorithm to Solve One-round Allocation Prob-
lem (4.3)
N ←∅, zbase ←QR · exp((C(t)
min −1))
y(t)
n,k ←0, s(t)
n ←0, z(t)
q,r ←1/A(t)
q,r, ∀n, k, r, q
while P
r∈[R]
P
q∈[Q] A(t)
q,rz(t)
q,r < zbase AND |N| ̸= N do
for all n /
∈N do
k(n) = arg maxk∈[K]{w(t)
n,k}
n∗= arg maxn∈[N]{
w(t)
n,k(n)
P
r∈[R]
P
q∈[Q] c(t)
n,k(n),r,qz(t)
q,r }
y(t)
n∗,k(n∗) ←1, s(t)
n∗←w(t)
n∗,k(n∗), N ←N ∪{n∗}
for all r ∈[R], q ∈[Q] do
z(t)
q,r ←z(t)
q,r · zbase
c(t)
n∗,k(n∗),q,r/(A(t)
q,r−C(t)
q,r)
We give a simple numerical example to illustrate the decomposition. Suppose there
are 2 users and 2 types of VMs. The fractional solution is (0.3, 0.7, 1, 0.7), repre-
senting that the ﬁrst (second) user receives 0.3 (1) unit of VM 1 and 0.7 (0.7) unit of


Chapter 4. Auction Framework for Dynamic Resource Provisioning
52
VM 2, respectively. It can be decomposed into two integer solutions: (1, 0, 1, 0) and
(0, 1, 1, 1), with corresponding probabilities 0.3 and 0.7. However, in fact we can-
not ﬁnd any combination of integer solutions satisfying the one-round constraints
in (4.3) (i.e., the integer solutions are not feasible), since the optimal fractional
solution should be better than any feasible integer solution. So we have to divide
the fractional solution by a factor λ before decomposing it.
We next present a primal-dual algorithm that solves (4.3) with an approximation
ratio λ, and then discuss how to solve the decomposition problem (4.6) to obtain
βl and y(t)l, ∀l ∈L.
4.3.2.1
A primal-dual algorithm for one-round resource allocation
Alg. 3 is our primal-dual approximation algorithm to the NP-hard allocation prob-
lem (4.3). C(t)
q,r = maxn,k{c(t)
n,k,r,q} is the maximum amount of type-r resource at
datacenter q required by any bundle in t. C(t)
min = minr∈[R],q∈[Q]{A(t)
q,r/C(t)
q,r} is the
minimum ratio between the total amount of available resource of a type and the
amount of the resource required by one bundle. In practice, the resource pool is
substantially larger than a single user’s demand, and hence C(t)
min ≫1. The main
idea of the algorithm is to introduce an auxiliary variable z(t)
q,r for each type of re-
sources (which is the dual variable associated with constraint (4.3(b)), acting as
the unit price in allocation decision. The unit price z(t)
q,r is updated according to
the remaining amount of this type of resource. The algorithm evaluates each bun-
dle according to the unit prices and the amount of required resources, and always
chooses the user with a higher bid on a lower valued bundle as the winner.
Theorem 4.4. Alg. 3 computes feasible primal and dual solutions for (4.3) and
(4.4), and guarantees λp ≥d (p and d deﬁned in Thm. 4.2), λ = 1+ϵ(t)(e(QR)1/(C(t)
min−1)−
1)(1 + 1/(c(t)
min −1)) with ϵ(t) = maxk1,k2∈[K],r∈[R]{c(t)
n,k1,r,q/c(t)
n,k2,r,q}. The approxi-
mation ratio of Alg. 3 is also λ.
The proof of the theorem is given in Appendix 8.9.
Here ϵ(t) is the maximum
ratio between the overall demands for any type of resource in any two bundles in a
user’s bid in t. When Q, R are small constants and the provider’s resource pool is
relatively large compared with users’ resource demands in the bundles, λ tends to
1 + ϵ(t)(e −1). If further ϵ(t) →1, or each user bids a single bundle, λ tends to e.
4.3.2.2
Decomposition with LP duality-based technique
To solve the decomposition problem (4.6), we can ﬁrst ﬁnd all the possible inte-
ger solutions y(t)l to (4.3) using some exhaustive search method, and then directly
solve (4.6) to derive the decomposition coeﬃcients βl’s. But this method has an
exponential-time complexity, since there are an exponential number of possible in-
teger solutions y(t)l, and hence an exponential number of variables in LP (4.6). We


Chapter 4. Auction Framework for Dynamic Resource Provisioning
53
therefore resort to its dual, formulated in (4.7), where dual variables v(t)
n,k and τ
associate with primal constraints (4.6a) and (4.6b), respectively:
maximize
1
λ
X
n∈[N]
X
k∈[K] y(t)F
n,k v(t)
n,k + τ
(4.7)
s.t.
X
n∈[N]
X
k∈[K]
y(t)l
n,kv(t)
n,k + τ ≤1,
∀l ∈L,
(4.7a)
τ ≥0.
(4.7b)
Even though the dual (4.7) has an exponential number of constraints, the ellipsoid
method can be applied to solve it in polynomial-time. The ellipsoid method obtains
an optimal dual solution using a polynomial number of separating hyperplanes. Al-
g. 3 acts as a key component of a separation oracle for generating these separating
hyperplanes, and a feasible integer solution to (4.3) can be derived each time a
separating hyperplane is generated [47]. Hence, a polynomial number of candidate
integer solutions y(t)l’s are produced through the process of the ellipsoid method,
and the primal problem (4.6) can be reduced to a linear program with a polyno-
mial number of variables (βl’s) corresponding to these integer solutions. Then we
can solve the reduced primal problem in polynomial time. The correctness of the
above decomposition method is given in Lemma 4.5, with detailed proof and the
construction of the separation oracle in Appendix 8.10.
Lemma 4.5. The decomposition method correctly obtains a polynomial number
of integer solutions {y(t)l}l∈L to the one-round allocation problem (4.3), and the
probabilities βl, ∀l ∈L, which solve (4.6), in polynomial time.
4.3.3
The Randomized Auction
Alg. 4 gives our randomized auction to be carried out in each round of the online
algorithm in Alg. 2. It selects an integer solution y(t)l produced by the decompo-
sition method with probability βl. The payment from a winning bidder n satisﬁes
two conditions: (1) The expectation of the payment should be equal to the scale-
down fractional payment, P
l∈L Π(t)l
n βl = Π(t)F
n
/λ, in order to remain truthfulness.
(2) The payment Π(t)l
n
should be no larger than n’s valuation of its winning bundle
P
k∈[K] w(t)
n,ky(t)l
n,k, in order to guarantee individual rationality.
The following theorem provides the properties achieved by the randomized auction,
with proof in Appendix 8.11 .
Theorem 4.6. Around runs in polynomial time and is truthful, individual rational
and λ(1 + Bmax)-competitive.


Chapter 4. Auction Framework for Dynamic Resource Provisioning
54
Our online auction results when we plug in the one-round randomized auction
Around into the online algorithm framework Aonline in Alg. 2. The competitive ratio
of the online auction can be derived readily from Thm. 4.2 using ν = λ(1 + Bmax),
the competitive ratio of the one-round randomized auction given in Thm. 4.6.
Theorem 4.7. Aonline in Alg. 2 combining with Around in Alg. 4 constitutes a
truthful, individual rational, (1 + Bmax)(λ(1 + Bmax) +
1
γ−1)- competitive online
auction.
The complete proof of Thm. 4.7 can be found in Appendix 8.12. We note that
when Bmax →0, the competitive ratio tends to λ +
1
e−1. Following the discussions
on Thm. 4.4 in Sec. 4.3.2.1, when λ tends to e, the competitive ratio of the online
auction tends to e +
1
e−1 ≃3.30.
4.3.4
Improving the scale-down factor
We have decomposed the fractional solution in Sec. 4.3.2 after scaling it down by
the approximation ratio λ of the one-round allocation Alg. 3, such that a feasible
solution to the decomposition problem (4.6) is guaranteed. According to Thm. 4.7,
the scale-down factor λ is closely related to the competitive ratio of our online
auction, such that a smaller scale-down factor leads to a better competitive ratio.
However, a scale-down factor smaller than λ may not guarantee a feasible decom-
position. We therefore design a binary search algorithm in Alg. 5 to compute the
smallest scale-down factor that enables feasible decomposition.
The algorithm is designed based on a property of the scale-down factor, as given
in Thm. 4.8 (proof in Appendix 8.13).
With its monotonicity, we can ﬁnd the
smallest, feasible scale-down factor using binary search (with arbitrary small error).
We should note that this trial-and-error method may improve the performance
of our online auction algorithm on average in practice, but does not change the
theoretical competitive ratio in Thm. 4.7 in the worst case. We will investigate the
eﬀectiveness of the improved scale-down factor in our trace-driven simulations.
Theorem 4.8. If the fractional allocation y(t)F
n,k can be decomposed under scale-down
factor λ1, then it can also be decomposed under any factor λ2 > λ1.
4.4
Improvement of the Online Algorithm Frame-
work with Minimum Budget Spending
In this section we propose an improvement of the online algorithm framework Aonline
when additional information on users’ budget spending is available [17]. Suppose
that each user’s total spending over T rounds is at least a fraction of its budget.
Speciﬁcally, user n is going to use at least an amount gnBn of its overall budget,


Chapter 4. Auction Framework for Dynamic Resource Provisioning
55
Algorithm 4 One-Round Randomized Auction Around in t
1: Solve LP relaxation of (4.3), with w(t)
n,k = max{0, (1 −x(t−1)
n
)b(t)
n,k}. Denote the
fractional solution by y(t)F
n,k , ∀n, k.
2: Calculate the fractional payment Π(t)F
n
by VCG payment rule.
3: Solve the pair of primal-dual decomposition LPs in (4.6) and (4.7) using the
ellipsoid method, using Alg. 3 as a separation oracle, and derive a polynomi-
al number of integer solutions to (4.3), y(t)l, ∀l ∈L, and the corresponding
decomposition coeﬃcients βl.
4: Choose y(t)l with probability βl, ∀l ∈L
5: ∀n ∈[N], Π(t)l
n
= Π(t)F
n
·
P
k∈[K] w(t)
n,ky(t)l
n,k
P
k∈[K] w(t)
n,ky(t)F
n,k
Algorithm 5 Binary searching smallest scale-down factor
Require: allowable error δ
Decide the scale-down ratio λ in Alg. 4 with the following steps: λl ←1, λr ←λ
while λr −λl > δ do
λm ←(λl + λr)/2
Solve (4.7) with scale-down factor λm.
If Decomposing success then λr ←λm Else λl ←λm
Solve (4.7) with scale-down factor λr.
where 0 ≤gn ≤1. When this minimum budget spending guarantee is in place, we
design an improved online algorithm framework A′
online, as given in Alg. 6. We show
that this improved online algorithm can achieve a better worst-case competitive
ratio (1+Bmax)(λ(1+Bmax)+
1−g
γ1−g−(1−g)), where g = minn∈[N]{gn} is the minimum
budget spending fraction among all users, as compared to the competitive ratio of
the original online auction Aonline, (1+Bmax)(λ(1+Bmax)+
1
γ−1) given in Thm. 4.7.
For example, in the case that Bmax →0, the additive loss in the competitive
ratio brought by Aonline, as compared to the one round auction Around, is
1
γ−1 ≈
0.582; if we know that all users are going to spend at least gn = 90% of their
respective budget, the additive loss brought by the improved online auction A′
online
is approximately 0.099.
The main idea of improving Aonline to A′
online is as follows. If user n spends a
large fraction of its overall budget over time, the value of xn will be close to 1 upon
termination of the online algorithm.
In the original online algorithm in Alg. 2,
the value of xn is exponentially increased from 0 to 1 with the increase of budget
consumption, since we can prove that no matter what the ﬁnal value of xn is,
updating xn exponentially guarantees a good performance of the online algorithm.
Now we know that xn will at least reach a value xs
n = gn/(γ1−gn−(1−gn)) (computed
according to the minimum budget expenditure gnBn based on the update formula
of xn in Alg. 2), and we can increase the value of xn linearly with the increase of
budget consumption before it reaches xs
n, and then increase xn in the original way


Chapter 4. Auction Framework for Dynamic Resource Provisioning
56
(as in Alg. 2) afterwards. In this way, we can prove that a better competitive ratio
can be achieved.
Algorithm 6 The Improved Online Algorithm Framework based on Minimum
Budget Spending Guarantee A′
online
x(0)
n
←0, xs
n ←gn/(γ1−gn −(1 −gn)), ∀n ∈[N]
for all 1 ≤t ≤T
do
w(t)
n,k =
(
0
if x(t−1)
n
≥1
b(t)
n,k(1 −max{x(t−1)
n
, xs
n})
otherwise
∀n, k
Run Around. Let N be the set of winning users, and kn be the index of their
corresponding winning bundle, for n ∈N. Deﬁne b(t)
n,kn = 0 for all n /
∈N.
x(t)
n ←x(t−1)
n
+(
max
{
x(t−1)
n
,xs
n}+ xs
n(1−gn)
gn
)
b(t)
n,kn
Bn , ∀n ∈[N]
The properties achieved by A′
online are given in Thm. 4.9, with complete proof in
Appendix 8.14.
Theorem 4.9. A′
online in Alg. 6 combining with Around in Alg. 4 constitutes a
truthful, individual rational, (1 + Bmax)(λ(1 + Bmax) +
1−g
γ1−g−(1−g))- competitive
online auction.
4.5
Performance Evaluation
We evaluate our online auction design using trace-driven simulations. We investigate
23 types of VMs distributed in Q (default value 9) datacenters, assembled from three
types of resources (CPU, RAM and Disk capacity, R = 3). Users’ resource demands
are extracted from Google cluster-usage data [6], which record jobs submitted to
the Google cluster with information on their resource demands (CPU, RAM, Disk).
We translate each job request in the Google data into a bidding bundle as follows:
we generate a set of VMs in Table 1.1 randomly that altogether can make up
the resource demands in the job request; the valuation in the bidding bundle is
calculated as the product of the total cost to acquire these VMs according to the VM
charges in Table 1.1 and a random coeﬃcient in the range of [0.5, 2]. In this way, we
obtain a pool of bidding bundles from the Google data. In each round of the online
auctions, each user randomly picks K (default 3) bundles in the pool, tags each VM
in each bundle with a datacenter randomly selected from the Q datacenters, and
bids the bundles. A user n’s total budget Bn is decided by multiplying the sum
of valuations in all the bundles the user may bid in the T rounds of auctions by
a random coeﬃcient in the range of [0.5, 1]. We also compute the total amount of
resource of each type r needed by all the bid bundles of N users in each round, scale
it down using a random factor in [0, 1], and distribute the overall amount of type-r
resource to Q datacenters evenly, to obtain the amount of available resource, A(t)
q,r,


Chapter 4. Auction Framework for Dynamic Resource Provisioning
57
300
900
1500
2100
2700
0
1
2
3
4
5
6
7
T=300, K=3, Q=9
Number of Users(N)
Offline/online Ratio
Alloc
AucBS
Auc
AucExt
(a)
300
900
1500
2100
2700
0
1
2
3
4
5
6
7
N=500, K=3, Q=9
Number of Rounds(T)
Offline/online Ratio
Alloc
AucBS
Auc
AucExt
(b)
300
600
900 1200 1500 1800 2100
1.5
2
2.5
3
3.5
4
4.5
5
T=100,Q=9
Number of Users(N)
Offline/online Ratio
K=1
K=2
K=3
K=4
K=5
(c)
200
500
800
1100 1400 1700
1.5
2
2.5
3
3.5
4
4.5
5
T=100,K=3
Number of Users(N)
Offline/online Ratio
Q=2
Q=4
Q=6
Q=8
Q=10
(d)
Figure 4.1: Performance of Alloc, Auc, AucBS and AucExt
for each type of resource in each datacenter at each time. Note that we run random
bundle selection for each user over T rounds ﬁrst to estimate users’ budgets Bn’s
and available resources in the datacenters, A(t)
q,r’s, before running the experiments
to evaluate our online auction with the obtained Bn’s and A(t)
q,r’s. We suppose the
maximum ratio between the overall demands for any type of resource in any two
bundles in a user’s bid in each time slot t, i.e., ϵ(t), is no larger than 2.5, by picking
up bundles with similar resource demands for each user in the auctions, which we
believe to reﬂect the reality better. We also suppose all users spend at least 70% of
their respective budget.
4.5.1
Performance of Our Online Algorithms
We compare the performance of four algorithms:
▷Alloc, a pure online resource allocation algorithm, with the one-round resource
allocation algorithm Alg. 3 serving in the place of Around in Aonline in Alg. 2.


Chapter 4. Auction Framework for Dynamic Resource Provisioning
58
2
4
6
8
10
0
1
2
3
4
5
K=3, T=100, N=500
Number of Datacenters(Q)
Offline/Online Ratio
 
 
AucBS
MUCA
(a)
500
1000
1500
2000
2500
0
1
2
3
4
5
K=3, Q=9, N=500
Number of Rounds(T)
Offline/Online Ratio
 
 
AucBS
MUCA
(b)
2
4
6
8
10
0
1
2
3
4
5
6
K=3, T=100, N=500
Number of Datacenters(Q)
Offline/Online Ratio
 
 
AucBS
COCA
(c)
1
2
3
4
5
0
1
2
3
4
5
6
Q=9, T=100, N=500
Number of Bundles(K)
Offline/Online Ratio
 
 
AucBS
COCA
(d)
Figure 4.2: Performance comparison between AucBS, MUCA and COCA
▷Auc, our online auction algorithm presented in Sec. 4.3.3, i.e., Aonline com-
bined with Around in Alg. 4.
▷AucBS, the online auction algorithm with the improved scale-down factor,
i.e., adding the binary search in Algorithm 5 to the auction algorithm Around
in Aonline.
▷AucExt, the improved online auction algorithm with the improved scale-down
factor, i.e., adding the binary search in Algorithm 5 to Around in the improved
online auction algorithm A′
online in Alg. 6.
We compare these algorithms in diﬀerent settings, based on the ratio between the
oﬄine optimal social welfare derived by solving (4.1) exactly and the overall social
welfare produced by each online algorithm over T rounds, which we refer to as the
oﬄine/online ratio. In each scenario, we repeat each experiment for 10 times to
derive the average ratios.


Chapter 4. Auction Framework for Dynamic Resource Provisioning
59
Note that Alloc is only an allocation algorithm, and does not involve the pricing
mechanism. So Alloc does not include the scale-down process, and its competitive
ratio is close to 1. This is diﬀerent from other auction mechanisms.
We ﬁrst compare the algorithms through varying the number of cloud users N from
300 to 3000, while ﬁxing the number of rounds T = 300, as illustrated in Fig. 4.1(a).
The oﬄine/online ratio of Auc declines when N is large (N > 2000), which is
consistent with our theoretical analysis in Thm. 4.4: The larger the scale of the
cloud system, the larger the value of C(t)
min, and consequently the better oﬄine/online
ratio results. When users’ truthful resource demands and valuations are assumed
available for free, the pure online resource allocation algorithm, Alloc, achieves an
oﬄine/online ratio close to 1, which shows that our online algorithm framework
together with the one-round resource allocation algorithm performs closely to the
oﬄine optimum in social welfare, if all the cloud users are cooperative.
AucBS
achieves a better oﬄine/online ratio as compared to Auc, revealing the usefulness
of our improved scale-down factor based on the binary-search Alg. 5 in decomposing
the fractional solution into better integer solutions in practical scenarios. AucExt
only slightly outperforms AucBs in this average-case ratio, since its improvement
mainly lies in the theoretical worst-case competitive ratio.
We next vary the total number of rounds T our system is running for while ﬁxing
the number of users to 500. Suppose each round is one hour. A number of rounds
in the range of [300, 3000] corresponds to 12.5 days to about 4 months, representing
a reasonable period of time for a user to set a total amount of budget to use in. We
observe in Fig. 4.1(b) that the oﬄine/online ratio of each algorithm always remains
at similar levels, demonstrating the stable performance of our online algorithms
regardless of the total number of rounds they are applied into.
We further evaluate the performance of AucBS when the number of bundles each
user bids for in each round, K, and the number of datacenters, Q, vary. Fig. 4.1(c)
shows that in general the performance of the improved online auction is better
when the number of bundles is smaller.
This can be explained as follows: The
competitive ratio of our online auction (given in Thm. 4.7) is related to λ, the
approximation ratio of the one-round resource allocation algorithm in Alg. 3, which
is further closely related to ϵ(t). When K is smaller, ϵ(t) is potentially smaller (recall
ϵ(t) is the maximum ratio between the overall demands for any type of resource in
any two bundles among the K bundles a user bids for in t), and thus λ is smaller,
leading to a lower competitive ratio of the online auction.
In a practical cloud
system, the K bundles that a user bids are typically diﬀerent representations of
the user’s same resource demands in a time slot, e.g., diﬀerent bundles may specify
diﬀerent numbers of diﬀerent types of VMs requested from diﬀerent datacenters,
which add up to a similar amount of each type of resource across diﬀerent bundles,
to serve the user’s need in t. Therefore, we do not expect a large value of ϵ(t) at
any time. When the value of ϵ(t) is capped (e.g., to 2.5 in our simulation settings),
the competitive ratio is bounded even when K takes larger values, as shown by the
similar oﬄine/online ratios obtained when K = 3, 4, or 5, respectively, in Fig. 4.1(c).


Chapter 4. Auction Framework for Dynamic Resource Provisioning
60
Fig. 4.1(d) shows that when the total number of datacenters in the cloud system
increases, the performance of our online auction degrades slightly, because the ap-
proximation ratio λ of Alg. 3 is larger when Q is larger. Nevertheless, we do not
expect more than a few tens of datacenters in a real-world cloud system, and the
oﬄine/online ratio is still acceptable around 2.80 when Q is 10.
We note that the performance ratios obtained in our simulations are much smaller
than the theoretical ratios computed based on Thm. 4.7, in the range of 6−7 under
the same settings as used in our simulations. This promises the good performance
of our online auction algorithm in practice.
4.5.2
Comparison with Existing Auction Mechanisms
Now we compare our online auction algorithm AucBS with another auction algo-
rithm MUCA [74].
The settings in MUCA are the most similar in the existing
literature, which however is a one-round multi-unit combinatorial auction, where
each user only demands one resource bundle (K = 1). The main idea of MUCA is to
calculate a virtual price for each bundle based on the amount of resource consumed
by a bundle and a randomly assigned unit resource price, and to choose the winning
bundle as the one with the highest cost eﬃciency, i.e., the highest valuation with
the lowest virtual price. The competitive ratio of MUCA is O(
√
D), where D is the
total number of available VM instances. In order to do a fair comparison between
MUCA and our online algorithm, we run MUCA as a subroutine instead of Around
in the same online algorithm framework Aonline in Alg. 2; for multiple bundles sub-
mitted by one user, the MUCA subroutine greedily chooses the most cost-eﬃcient
available bundle.
Fig. 4.2(a) compares AucBS and MUCA with diﬀerent numbers of datacenters, Q.
To generate the results, we still divide the social welfare achieved by each algorith-
m by the optimal oﬄine social welfare to get the oﬄine/online ratio, and take the
average over 10 times of each experiment. The performance of AucBS is always bet-
ter than MUCA. With more datacenters, the oﬄine/online ratio of AucBS increases
slower than MUCA, exhibiting that our algorithm handles multiple datacenters bet-
ter. The reason is that the competitive ratio of our algorithm mainly depends on
λ, which increases with Q very slowly (O(Q1/C(t)
min)), while the competitive ratio of
MUCA is close to O(√Q), which increases signiﬁcantly with Q.
Fig. 4.2(b) compares the performance of both algorithms when they run for diﬀerent
overall time. We observe that the performance of AucBS is again better and the
ratios of both algorithms are quite stable with diﬀerent time lengths.
Finally, we compare our algorithm AucBS with another online auction algorithm,
COCA [81]. The main idea of COCA is to calculate an estimated payment for user’s
requested resources based on a pricing curve, and accept users with positive utility
as winners. The original COCA model focuses on one type of resource; for fair com-
parison, we extend this method to multiple types of resources and multiple resource


Chapter 4. Auction Framework for Dynamic Resource Provisioning
61
bundles, create a pricing curve for each type of resource with a coeﬃcient assigned
following the unit price of the respective resource in real-world cloud services [8], and
always choose the bundle with the largest utility for each user. Note that we simply
follow the underlying pricing curve method of COCA, and assign coeﬃcients in an
intuitive fashion. In this way, the extended COCA algorithm retains similar char-
acteristics (such as truthfulness), but its theoretical performance in social welfare
is no longer guaranteed. Before presenting the simulation comparison, we compare
the extended COCA algorithm and our AucBS from a theoretical perspective: the
theoretical performance of COCA depends on the ratio between the highest and
lowest unit valuations, while AucBS is not inﬂuenced by the distribution of user
valuations; however, the performance of AucBS is negatively aﬀected when T is
small (e.g., when T < 10) since Bmax becomes larger, while the performance of
COCA is the same for any values of T.
We compare the oﬄine/online ratio achieved by the two algorithms by taking the
average over 10 times of run of each experiment. We use T = 100 since even s-
maller T is not realistic for practical cloud operation. Fig. 4.2(c) shows that the
advantage of AucBS is clearer at larger values of Q. This is because more data-
centers result in more types of resources (CPU/RAM/disk at diﬀerent datacenters
are treated as diﬀerent types of resources), and COCA handles multiple types of
resources in a simple intuitive fashion, which becomes less eﬃcient when the number
of types becomes larger. Fig. 4.2(d) reveals that the performance of AucBS is again
consistently better under diﬀerent numbers of bundles, K.
4.6
Summary
This chapter presents the online combinatorial auction for the VM market in cloud
computing.
It advances the state-of-the-art of cloud auction design in that all
previous VM auction mechanisms are either one-round only, or simplify VMs into
type-oblivious good (and hence circumvent the challenge imposed by combinato-
rial auctions). Our online auction comprises three components. First, we design
an intuition-driven primal-dual algorithm for translating the online social welfare
optimization problem into a series of one-round optimizations, incurring only a
small additive penalty in competitive ratio. Second, we apply a randomized auc-
tion sub-framework that can translate a cooperative approximation algorithm to
the one-round optimization into an auction. Third, we apply a greedy primal-dual
algorithm that approximates the one-round social welfare optimization. We also
propose two extensions to the basic online auction framework, to further improve
the competitive ratio. Our overall online VM auction guarantees a theoretical com-
petitive ratio close to 3.30 in typical scenarios, and its design may shed light on
similar auction problems in related settings.
Finally, we brieﬂy discuss practical implementation concerns of dynamic VM provi-
sioning in real-world cloud systems. Latencies for resource partitioning are incurred
for VM provisioning, which are a common issue in IaaS cloud provisioning.
To


Chapter 4. Auction Framework for Dynamic Resource Provisioning
62
realistically reduce such latencies before a VM can be ready to run, a practical
solution is to maintain pools of pre-assembled VMs with typical resource conﬁgu-
rations (e.g., summarized according to historical user demands), and do hotplug of
CPU/RAM/disk [9] upon user’s requests to produce customized VMs. Hotplug of
CPU and RAM is highly eﬃcient, while the preparation for the hard disk requires
longer time. Nevertheless, users’ demands for disk capacity are typically more u-
niform than those for CPU and RAM, which allows the cloud provider to prepare
some “standard” sizes of virtual disks in advance (e.g., 256GB, 512GB, etc.). In
this way, the latency for dynamic VM provisioning can be reduced to as low as a
few seconds, which is ignorable compared to the hours of VM rental periods. In
addition, our work does not deal with server provisioning, according to the practical
knowledge that decisions on switching servers on or oﬀare typically made at much
larger time intervals than VM provisioning, e.g., once per month or so in Amazon
EC2 cloud according to discussions with Amazon employees.
In the next chapter, we are going to explore the auction mechanism for on-demand
bandwidth allocation, where the provider serves users’ data transition tasks through
eﬃcient traﬃc scheduling. Bandwidth allocation is very diﬀerent from VM alloca-
tion, due to their unique features. We will see which principles in designing VM
auctions apply to bandwidth auctions, and which do not.


Chapter 5
A Shapley-value Mechanism for
Bandwidth On Demand
between Datacenters
In Chapter 4, we present an online combinatorial mechanism for VM provisioning.
In this chapter, we are going to consider the provisioning of a diﬀerent types of
resources: bandwidth.
Recent studies in cloud resource allocation and pricing have focused on computing
and storage resources but not network bandwidth. Cloud users nowadays custom-
arily deploy services across multiple geo-distributed datacenters, with signiﬁcant
inter-datacenter traﬃc generated, paid by cloud providers to ISPs. An eﬀective
bandwidth allocation and charging mechanism is needed between the cloud provider
and the cloud users. Existing volume based static charging schemes lack market
eﬃciency.
This chapter presents the ﬁrst dynamic pricing mechanism for inter-
datacenter on-demand bandwidth, via a Shapley value based auction. Our auction
is expressive enough to accept bids as a ﬂat bandwidth rate plus a time duration,
or a data volume with a transfer deadline. We start with an oﬄine auction, design
an optimal end-to-end traﬃc scheduling approach, and exploit the Shapley value in
computing payments. Our auction is truthful, individual rational, budget balanced
and approximately eﬃcient in social welfare. An online version of the auction fol-
lows, where decisions are made instantly upon the arrival of each user’s realtime
transmission demand. We propose an eﬃcient online traﬃc scheduling algorithm,
and approximate the oﬄine Shapley value based payments on the ﬂy.
We vali-
date our mechanism design with solid theoretical analysis, as well as trace-driven
simulation studies.
63


Chapter 5. Shapley-value Mechanism for Bandwidth
64
Figure 5.1: An overview of the system.
Figure 5.2: Example bandwidth allocation on link (1, 2) of Fig. 5.1.
5.1
System Model
5.1.1
Network and Auction
Consider a cloud spanning multiple datacenters connected by L links, operated by
one cloud provider.
The topology of the network is a directed graph including
these datacenters and links (see Fig. 1 in [43] for an example topology). The links
are owned by an Internet Service Provider (ISP) and leased to the cloud provider.
Throughout this chapter, we use [X] to denote the set of integers {1, 2, . . . , X}. Let
Cl denote the maximum bandwidth capacity that the ISP can provision on link
l ∈[L]. The ISP charges the cloud provider based on link usage periodically, i.e.,
once in each accounting period. An accounting period is divided into multiple time
slots. Let T be the number of time slots in each accounting period.
Totally N users arrive over time, with requests for data transfer among the dat-
acenters. User n ∈[N] arrives at time tn, wishes to send data of size Bn (e.g.,
bytes) from a source datacenter to a destination datacenter, along a network path
Pn, within dn time slots. Here Pn consists of multiple ordered links in [L] such
that Pn ⊆L. The deadline of user n’s data transfer is tn + dn −1. User n has a
secret valuation en for the task (e.g., according to urgency and importance of the
data transfer), and also submits a willingness-to-pay price, ˆ
en, for ﬁnishing her task
in time. Later we will prove that it is her best strategy to bid a price equal to
her valuation: ˆ
en = en. In summary, the bid submitted by user n is a three-tuple


Chapter 5. Shapley-value Mechanism for Bandwidth
65
(Bn, dn, ˆ
en). The case that a user wishes to send data between multiple pairs of
source/destination datacenters can be treated as multiple separate bids in our mod-
el. In addition, our bid model can also describe a user n’s request for an exclusive
bandwidth rate along a path for dn consecutive time slots, where the bandwidth
rate is Bn/dn. The best practice should be the provider decide the routing path,
instead of let users specify a path. We let the provider routing decision as a future
work.
The provider, as the auctioneer, makes the following decisions: (1) whether to accept
or to reject user n’s transfer request, represented by a binary decision variable xn = 1
or 0, respectively; (2) the amount of user n’s data to transmit along her speciﬁed
path in each time slot within the transmission deadline, bn(t), ∀t ∈[tn, tn + dn −1]
(we assume bn(t) = 0 for t /
∈[tn, tn + dn −1]); (3) the payment that the provider
charges user n for ﬁnishing her transmission, jn. In the case that user n requests an
exclusive bandwidth rate, the transmission schedule decisions are ﬁxed such that
bn(tn) = bn(tn + 1) = · · · = bn(tn + dn −1) = Bn/dn, and the decisions of the cloud
provider simplify to xn and jn only. The utility of user n is the diﬀerence between
her true valuation en and her payment jn: un = xnen −jn. Denote the ISP charge
function by v(a), where a = {al(t), ∀l ∈[L], ∀t ∈[T]} is the vector of link traﬃc in
the entire network, with al(t) being the total traﬃc of the cloud on link l at time t.
Fig. 5.1 shows an example cloud spanning three geo-distributed datacenters, as well
as the interaction between the ISP, the cloud provider and users in our system. Two
example users are illustrated: user 1 arrives at time 1, requesting to send data at
the volume of B1 = 35 from datacenter 1 to datacenter 2 and then to datacenter
3, within d1 = 10 time slots; user 2 arrives at time 6, requesting to transmit data
B2 = 12 from datacenter 3 to datacenter 1 and then to datacenter 2 within d2 = 3.
Fig. 5.2 shows an example bandwidth allocation by the cloud provider on link (1,2)
over time, e.g., the data transmission for user 2 (in red) is scheduled to happen
in time slots 6, 7 and 8 with data volume b2(6) = 2, b2(7) = 4 and b2(8) = 6,
respectively.
The auction targets maximization of the social welfare, which is the sum of the cloud
provider’s revenue, i.e., aggregate payment from the users minus link bandwidth
charge paid to the ISP, P
n∈[N] jn−v(a), and utilities of all the users, P
n∈[N](xnen−
jn). Since payments from the users and those received at the provider cancel each
other out, the social welfare equals the total valuation of accepted users (users with
xn = 1) minus the overall ISP charge, P
n∈[N] xnen −v(a).
In our system, we assume that the intermediate datacenters along an end-to-end
transmission path Pn do not store the data, but immediately forward the data
received to the next hop datacenter. We ignore the end-to-end delay along path
Pn, since the propagation delay even along a cross-continent link is usually less
than several seconds, while the typical time slot length used in ISP bandwidth
accounting is 5 minutes [37]. Hence, the amount of user n’s traﬃc on any link l
along her path Pn is the same bn(t) in a given time slot t, and the total traﬃc on
link l at t can be computed as al(t) = P
n∈e
Pl bn(t), where e
Pl represents the set of
users whose paths traverse link l, such that n ∈e
Pl if and only if l ∈Pn. The social


Chapter 5. Shapley-value Mechanism for Bandwidth
66
welfare optimization problem, as the winner determination problem that the cloud
provider solves to produce the auction outcome, is formulated as follows (assuming
truthful bidding):
max
X
n∈[N] xnen −v(a)
(5.1)
s.t. al(t) =
X
n∈e
Pl bn(t) ∀l ∈[L], t ∈[T]
(5.1a)
xnBn =
Xtn+dn−1
t=tn
bn(t) ∀n ∈[N]
(5.1b)
al(t) ≤Cl ∀l ∈[L], t ∈[T]
(5.1c)
xn ∈{0, 1} ∀n ∈[N]
(5.1d)
bn(t) ≥0 ∀n ∈[N], t ∈[T]
(5.1e)
(5.1b) speciﬁes that if user n’s task is admitted, her total amount of data transmitted
during tn to tn+dn−1 should be Bn. (5.1c) is the maximum link capacity constraint.
We deﬁne the ISP charge function v(a) as the aggregated ISP charge incurred by
traﬃc of all accepted users in the entire network. Next we also deﬁne an alternative
form of v(·), which will be useful later. Let v(b, S) denote the aggregate ISP charge
under the traﬃc schedule b = {bn(t), ∀n ∈[S], t ∈[T]}, incurred by a subset of
users S ⊆[N], by assuming bn(t) = 0 for all users n /
∈S. Hence v(a) is equivalent
to v(b, [N]). We may omit b when traﬃc schedule b is known and ﬁxed, and denote
the ISP charge function by v(S).
Theorem 5.1. The social welfare maximization problem (5.1) is NP-hard, even
without the ISP charge (v(a) = 0).
The proof is given in Appendix 8.15.
5.1.2
Target Properties
We seek to achieve the following critical properties in our auction mechanism design.
Deﬁnition 5.2. (Truthfulness in bidding price) Any user n cannot increase her
utility by bidding a price ˆ
en diﬀerent from her true valuation en, i.e., ﬁxing other
users’ bids, and assuming that her data size Bn and deadline dn are known to the
auctioneer, user n’s utility is maximized by bidding the truth valuation.
Deﬁnition 5.3. (Individual rationality) Any user’s utility is non-negative, whether
or not her request is admitted, i.e., un ≥0, ∀n ∈[N].
Deﬁnition 5.4. (Budget balance) The revenue of the cloud provider, which is the
total collected payment from users minus the overall ISP bandwidth charge, is non-
negative, i.e., uP = P
n∈[N] jn −v(a) ≥0.


Chapter 5. Shapley-value Mechanism for Bandwidth
67
Deﬁnition 5.5. (Competitiveness) The auction is called c-competitive if for any
arriving pattern of user requests, the ratio between the optimal social welfare, Sopt,
the optimal objective value of (5.1), and the social welfare achieved by the auction
mechanism, Sauc, is no larger than c, i.e., Sopt
Sauc ≤c.
5.1.3
ISP Charging Models
We consider the most prevalent bandwidth charging method adopted by many ISPs,
the 95th-percentile charge [25, 69]. An accounting period, usually 1 month, is split
into time slots, typically 5 minutes each, and the number of bytes transmitted in
each time slot along a link l is recorded.
The charge on link l is based on the
95th-percentile of these recorded volumes in an accounting period. Let αl be the
unit bandwidth price of link l (e.g., $/byte), and e
al(t), ∀t, be the ranked sequence of
al(t), ∀t, such that e
al(1) ≥e
al(2) ≥· · · ≥e
al(T). Then the charge of link l is v(l)
95(al) =
αle
al(⌊0.05T⌋+ 1). The total ISP charge for all links is v95(a) = P
l∈[L] v(l)
95(al).
We also investigate another ISP charging model, the maximum-traﬃc charge, which
is a simpliﬁcation of the 95th-percentile charge. The maximum volume among the
recorded slots is charged, such that the charge of link l in an accounting period is
v(l)
max(al) = αle
al(1), and the total ISP charge is vmax(a) = P
l∈[L] v(l)
max(al).
For the example in Fig. 5.2 where two users share link (1,2), the maximum-traﬃc
charge for the 10 time slots is based on the traﬃc at time slot 8, which is 10. The
95th-percentile charge is based on the data volume in the time slot with the second
highest traﬃc, which is 9 at time slot 7.
5.1.4
Key Assumptions
We assume that all users’ requests can be served, if the cloud provider is willing
to pay the ISP any amount of charge. This implies that the maximum capacity of
the links is suﬃcient for all the data transfers, which is reasonable, since the ISP
may otherwise improve its infrastructure to accommodate the extra demand, which
brings more revenue to the ISP under the 95th-percentile or the maximum-traﬃc
charge model.
If all users’ requests are accepted, the total valuation of all users should typically
be much larger than the overall ISP’s charge. Otherwise, the cloud provider has no
incentive to rent the links for dispatching user’s traﬃc in the ﬁrst place.
In the following sections, we will design a mechanism to allocate the cloud provider’s
cost due to the ISP charge proportionally and fairly among the users. Suppose
such a mechanism exists for now, where φn is user n’s cost share, and the sum of
users’ shares equals the total ISP charge, i.e., P
n φn = v(a), if all the requests are
accepted. We expect that the valuation en of most users is larger than the respective


Chapter 5. Shapley-value Mechanism for Bandwidth
68
Table 5.1: Notation for Chapter 5
[X]
integer set {1, 2, . . . , X}
N
# of users
T
# of time slots in an accounting period
L
# of links
Cl
maximum capacity of link l
Bn
user n’s data size
Pn
the path of user n’s transmission
dn
user n’s allowable delivery delay
tn
user n’s arriving time
xn
0 or 1, user n is accepted or rejected
bn(t)
traﬃc of user n sent at time t
al(t)
overall traﬃc on link l at time t
en
user n’s valuation
ˆ
en
user n’s bid price
jn
user n’s payment
un
user n’s utility
uP
cloud provider’s revenue
v(a)
ISP charge under overall traﬃc a = {al(t)}
v(S)
ISP charge with a subset S of users
Sopt
optimal social welfare
Sauc
social welfare under the auction
e
Pl
set of users whose paths traverse l
φn
Shapley value of user n
δ
constant in Assumption 2
γ
constant in Assumption 3
D
maximum allowed delay of all data transfers
N
set of users with en ≥γφn
αl
unit bandwidth price of link l
proportional cost φn. The number of the rest users, whose valuations are smaller,
should be small, and the sum of the cost shares of these users should be limited.
We formally formulate the above into the following assumptions on users’ valuations
and cost shares.
Assumption 1. There exists a feasible solution of the social welfare maximization
problem (5.1), which admits all users’ transfer requests, i.e., xn = 1, ∀n ∈[N].
Assumption 2. The total valuation of all users is at least δ times the overall ISP
charge, i.e., P
n∈[N] en ≥δ P
n∈[N] φn, where δ is a positive constant.
Assumption 3. Let N denote the set of users whose valuation en is at least γ
times her share of the ISP charge, φn, i.e., en ≥γφn. The aggregate cost share
of all users not in N is no larger than (1 −1/γ) times the overall ISP charge, i.e.,


Chapter 5. Shapley-value Mechanism for Bandwidth
69
P
n/
∈N φn ≤(1 −1/γ) P
n∈[N] φn, where γ > 1 is a constant. Let φ′
n be the online
estimated ISP charge (will be introduced in Sec. 5.3), and let N ′ = {n|en ≥γφ′
n}.
Then N ′ has the same property: P
n/
∈N ′ φn ≤(1 −1/γ) P
n∈[N] φn.
Key notation is listed in Table 5.1 for ease of reference.
5.2
Oﬄine Auction
We ﬁrst consider the oﬄine scenario where all users’ transmission requests (arrival
times and detailed demands) are known within the whole time span, and design
an eﬃcient mechanism to decide whether to admit each user’s request, how to
schedule data transfer over time, and the payment of each user. It is natural to
start with a VCG-like mechanism in the design, which is well known for achieving
both social welfare maximization and truthfulness. The VCG auction [71] decides
winners and resource allocation among winners by solving an underlying social
welfare maximization problem, and charges each winner by their opportunity cost.
The exact optimal solution to the social welfare maximization problem is typically
required, in order to guarantee truthfulness of the VCG auction. In our model, the
social welfare maximization problem is NP hard, where a VCG mechanism requires
exponential running time and hence becomes computationally infeasible. Instead,
we seek a novel truthful mechanism inspired by the cost sharing idea of the Shapley
value. In what follows, we present the basics of the Shapley value ﬁrst, and then
our Shapley-value based auction design.
5.2.1
Shapley Value
The Shapley value originates from the cooperative game theory, which denotes the
share of an individual in a coalition when the total surplus generated by the coali-
tion is allocated among the individuals, following a uniquely designed distribution
method [67]. The idea of the distribution method is to estimate the surplus con-
tributed by an individual by averaging her marginal contribution over all possible
permutations of the individuals. A number of nice properties are achieved by the
Shapley values. We adapt the Shapley value idea for cost sharing, by distributing
the ISP’s bandwidth charge that the users’ traﬃc aggregately leads to, among the
users. In our model, the Shapley value, i.e., each user’s cost share, when all uses
are accepted (and hence share the ISP charge), is referred to as the oﬄine Shapley
value, and deﬁned as follows.
Deﬁnition 5.6. Assuming all users’ transfer requests are admitted and the traﬃc
schedule {bn(t), ∀n ∈[N], ∀t ∈[T]} is known, the oﬄine Shapley value φn of user n
is deﬁned as the average marginal ISP charge incurred by user n’s traﬃc
φn = 1
N!
X
π∈ΠN
(v(S(π, n)) −v(S(π, n)\n)),


Chapter 5. Shapley-value Mechanism for Bandwidth
70
where ΠN is the set of all N! permutations of N users, S(π, n) is the set of users
that are no later than user n in permutation π, v(S(π, n)) is the ISP charge (under
either the 95th-percentile or max-traﬃc charging method) supposing only requests
from the subset S(π, n) of users are served, and v(S(π, n)\n) is the ISP charge with
one less user – user n.
Again we use the example in Fig. 5.2 to illustrate how to calculate the Shapley value
of user 2. There are two permutations in this example: (i) [1,2], and (ii) [2,1]. In
case (i), user 2’s contribution to the ISP charge (under the maximum charge model)
is 6 at time 8. In case 2, the ISP charge due to sending user 1’s data only is 6;
after including user 2’s transmission, the ISP charge increases to 10, and hence the
marginal ISP charge due to user 2 is 4. The Shapley value of user 2 is the average
of the two cases, which equals 5.
Though an intuitive idea for cost sharing, the Shapley value has been proven to be
the only distribution which achieves all the following three nice properties [60]. (1)
Eﬃciency: the aggregate Shapley value of all users is guaranteed to be equal to
the overall ISP charge, i.e., P
n∈[N] φn = v([N]). (2) Symmetry: if two users have
exactly the same traﬃc pattern (source/destination, path, transfer schedule), their
Shapley values should be equal. (3) Fairness: a user’s inﬂuence on another user
in Shapley value computation is symmetric, i.e., ∀n, m ∈S, φn(S) −φn(S\m) =
φm(S) −φm(S\n), ∀S ⊆[N], where φn(S) is the Shapley value computed when
only traﬃc incurred by users in set S is considered.
Theoretically, calculating a Shapley value involves O(N!) time complexity. How-
ever, it is proved that a sampling over possible permutations gives an eﬃcient and
unbiased estimator of the Shapley value [69]. We choose a polynomial number of
permutations, Π, randomly from the set of all N! permutations of users in [N], and
calculate the average marginal cost of each user over Π to obtain her estimated
Shapley value.
φΠ
n = 1
|Π|
X
π∈Π
(v(S(π, n)) −v(S(π, n)\n))
(5.2)
Theorem 5.7, which follows immediately from Proposition 2 in [69], shows that the
estimated Shapley value still retains the eﬃciency property, if all users are computed
using the same set of permutations Π.
Theorem 5.7. If the estimated Shapley values in (5.2) for all users are computed
using the same set of permutations Π, the sum of the estimate Shapley values of all
users equals the total ISP charge, i.e., P
n∈[N] φΠ
n = v([N]).
We compute the Shapley value based on (5.2) throughout the rest of the chapter,
but omit Π from the notation φΠ
n .


Chapter 5. Shapley-value Mechanism for Bandwidth
71
5.2.2
Shapley Value Based Oﬄine Auction
We design a Shapley value based admission control and payment mechanism, based
on the idea of sharing the overall ISP charge, that the cloud provider is subject
to, among all the users who bring the traﬃc on the links. The key idea of the
mechanism is: if a user’s bid price is no larger than her share of the overall ISP
charge times a factor, then the user’s transfer request should be rejected; otherwise,
the user’s request is accepted and she is charged at her share of the ISP charge
times the factor.
The detailed auction design is given in Alg. 7. The algorithm decides admission
control and payments of the users, assuming a given eﬃcient traﬃc scheduling
algorithm, which we will detail in Sec. 5.2.3. We ﬁrst suppose all users’ requests were
accepted, i.e., xn = 1, ∀n ∈[N], and schedule the data transfer b = {bn(t), ∀n ∈
[N], ∀t ∈T} using the traﬃc scheduling algorithm. We compute the Shapley value
φn for each user n according to this traﬃc schedule b, and compare the user’s
bid price with γφn to decide the acceptance/rejection and payment, where γ is a
positive constant in Assumption 3 in Sec. 5.1.4. Finally, based on the admission
control decisions xn, ∀n ∈[N], we run the traﬃc scheduling algorithm in Sec. 5.2.3
again to re-schedule data transfer for all accepted users, to further optimize the
traﬃc schedule for reduced ISP charge.
Algorithm 7 Oﬄine Auction Mechanism
1: Calculate a feasible traﬃc schedule b = {bn(t), ∀n ∈[N], ∀t ∈[T]}, using
the oﬄine traﬃc scheduling algorithm in Sec. 5.2.3 with xn = 1, ∀n ∈[N]
2: for all users n ∈[N] do
3:
Calculate the oﬄine Shapley value φn based on b
4:
if user n’s bid price ˆ
en ≥γφn then
5:
Accept user n by setting xn = 1
6:
Charge user n by payment jn = γφn
7:
else
8:
Reject user n by setting xn = 0
9: Re-compute the traﬃc schedule b using the oﬄine traﬃc scheduling algo-
rithm in Sec. 5.2.3, with xn, ∀n ∈[N], computed above
The payments in our auction are proportional to the respective Shapley values (with
the same coeﬃcient γ), such that they are fair among the users, according to the
portions of overall ISP charge that their traﬃc incurs on the links that their data
transfer traverses. It is also a reasonable method for the cloud provider to charge
the users, that associates the payments with her cost (due to the ISP’s charge). The
parameter γ decides the revenue obtained by the cloud provider, and is tunable by
her. It should be no smaller than 1, such that the overall payment from the users
would be no lower than the ISP charge, in order to guarantee budget balance at the
provider (based on the eﬃciency property achieved by Shapley values). It should
not be too large though, in order to retain as many users as possible in the cloud
service, with better social welfare.


Chapter 5. Shapley-value Mechanism for Bandwidth
72
In addition, although the Shapley values used for deciding the payments are not
exactly the Shapley values computed based only on traﬃc of admitted requests,
we show in Theorem 5.8 that our auction achieves all four target properties of the
mechanism design. The proof is given in .
Theorem 5.8. The Shapley value based oﬄine auction described in Alg. 7 is compu-
tationally eﬃcient, budget balanced, individually rational, truthful in bidding price,
and
δ
δ−γ -competitive in social welfare, where δ and γ are constants given in As-
sumptions 2 and 3.
For example, if δ > 10 and 1 < γ < 2, the competitive ratio
δ
δ−γ is no larger
than 1.25. Note that we only require a feasible traﬃc schedule b to be computed
in line 1 of Alg. 7 by the oﬄine traﬃc scheduling algorithm, and can rest assured
that Theorem 5.8 is correct. We give an algorithm which produces a feasible traﬃc
schedule in the following.
5.2.3
Oﬄine Traﬃc Scheduling Algorithm
Given the admission decisions, xn, ∀n ∈[N], we solve the following linear program
(LP) to compute a feasible traﬃc schedule to the social welfare maximization prob-
lem in (5.1):
max
X
n∈[N] xnen −
X
l
αlcl
(5.3)
s.t. xnBn =
Xtn+dn−1
t=tn
bn(t) ∀n ∈[N]
(5.3a)
X
n∈e
Pl bn(t) ≤cl ∀l ∈[L], ∀t ∈[T]
(5.3b)
bn(t) ≥0 ∀n ∈[N], ∀t ∈[T]
(5.3c)
cl ≤Cl ∀l ∈[L]
(5.3d)
Here, cl, ∀l ∈[L], and bn(t), ∀n ∈[N], ∀t ∈[T], are decision variables, where cl
denotes the maximum traﬃc on link l among the time slots within the accounting
period T.
We can see that the objective function is the same as that in (5.1),
except for computing the ISP charge v(a) using the maximum-traﬃc model. The
constraints are similar too, except for replacing al(t), ∀t ∈[T], by cl. It is easy to
see that if there exists a feasible solution b to LP (5.3) at the given xn’s, then this
b and xn’s render a feasible solution to problem (5.1). Hence by solving LP (5.3)
using any eﬃcient LP solver, we can ﬁnd a feasible solution to problem (5.1) with
the given xn’s.
We note that solving LP (5.3) actually produces an optimal traﬃc schedule that
maximizes the social welfare (or equivalently minimizes the ISP charge) with given


Chapter 5. Shapley-value Mechanism for Bandwidth
73
xn’s, under the maximum-traﬃc ISP charge model. Nevertheless, we only require
a feasible traﬃc schedule in Alg. 7, and hence Theorem 5.8 is correct no matter
whether the ISP charge is based on the 95th-percentile or maximum-traﬃc model.
Remark: We have presented the oﬄine auction focusing on the request model
that a user speciﬁes an amount of data and the transmission deadline. In the case
that requests for exclusive bandwidths exist, Alg. 7 works in a simpliﬁed fashion by
setting bn(t)’s of those users directly to the respective demanded bandwidth rates.
The existence of a feasible traﬃc schedule is guaranteed by Assumption 1.
The overall messaging complexity of the oﬄine auction is O(N). Suppose we use
O(N2) random permutations when calculating the Shapley value, which is adopt-
ed in our simulations. We also use a heap to record the maximum traﬃc. The
time complexity of the oﬄine auction is O(N3D log T + M), where M is the time
complexity of solving LP (5.3).
5.3
Online Auction
We now design an online version of the auction in Alg. 7, which makes decisions on
admission, traﬃc scheduling and payment of each user’s request upon its arrival.
5.3.1
Online Auction based on Estimation of Oﬄine
Shapley Value
The online auction follows a similar idea as Alg. 7, in order to retain the nice
properties achieved by the oﬄine auction: the cloud provider calculates the Shapley
value of each user upon the arrival of her request, and rejects the user if her bid
price is low relative to the Shapley value. In the online auction, we also stick to the
oﬄine Shapley value deﬁned in Deﬁnition 5.6, computed as the share of each user
in the overall ISP charge incurred when all users’ transfer requests are scheduled,
since we are able to show nice properties achieved by an auction based on such a
Shapley value. Again we assume a known online traﬃc scheduling algorithm which
produces a feasible traﬃc schedule, to be discussed in the next Sec. 5.3.2, that
essentially divides the data to be transmitted evenly among all the allowed time
slots. The challenge, however, is that it is impossible to precisely calculate such an
oﬄine Shapley value on the spot without knowing any future request arrivals. In our
design, we estimate a user’s oﬄine Shapley value as best as we can. Here we present
two methods to estimate the oﬄine Shapley value, assuming that we can estimate
the probability distribution of user arrivals using some regression techniques [57].
When a new user n arrives at tn, our ﬁrst estimation method is based on the Monte
Carlo simulation [70]: we randomly simulate future user arrivals according to the
arrival distribution and then calculate the oﬄine Shapley value of user n using
all the produced user arrivals. Using this method, we are guaranteed to obtain


Chapter 5. Shapley-value Mechanism for Bandwidth
74
the expectation of the oﬄine Shapley value (based on the estimated probability
distribution of user arrivals), and the precision is higher if we repeat the simulation
for more times.
Our second estimation method is according to an eﬃcient formula, which can ap-
proximately calculate the expectation of the oﬄine Shapley value. We ﬁrst calculate
user n’s Shapley value φ′
n according to the ISP charge incurred by all the users that
have arrived so far, using a formula similar to (5.2), assuming that all their re-
quests are scheduled. This value, φ′
n, can be considered as the amortized cost of
user n supposing no new users would arrive after tn. Then we scale φ′
n by a fac-
tor ¯
v([N])tn/(v([1, n])T) to obtain an estimate ˆ
φn of the oﬄine Shapley value, i.e.,
ˆ
φn = φ′
n¯
v([N])tn
v([1,n])T . Here v([1, n]) is the overall ISP charge due to the traﬃc of the
ﬁrst n arrived users, and ¯
v([N]) is the expectation of the overall ISP charge due
to traﬃc of all N users that may arrive in T. The intuition behind this scaling is
as follows: Assume the probability distribution of user request arrival is the same
in any time slot, i.e., the probability for a speciﬁc number of users with a speciﬁc
transfer request to arrive is the same among diﬀerent time slots. Then in expec-
tation, tn/T fraction of all the users arrive no later than tn. For the upcoming
users after tn, their transfer data sizes and allowable transmission delays follow the
same distributions as those of the n earlier users, based on the assumption above.
So the cost share of user n will eventually be amortized by T/tn times more users,
and hence we scale the Shapley value φ′
n down by a factor of tn/T to estimate
the eﬀect of more arriving users in user n’s oﬄine Shapley value. Meanwhile, the
total ISP charge will increase from v([1, n]) to ¯
v([N]), so we also multiple the ratio
¯
v([N])/v([1, n]) in the estimation.
To estimate ¯
v([N]), the provider can use the history records in previous accounting
periods, and take the average ISP charge per accounting period as the estimate. Or
another approach is as follows: Let P(b, d, m) denote the probability that m users
with a per-time-slot traﬃc b and an allowable delay no smaller than d arrive in time
slot t which is known. First, we calculate the probability that m users are transmit-
ting traﬃc b in time slot t: p(b, m). These m users should arrive during time slots
[t −D + 1, t]. So p(b, m) = P
m1+m2+...+mD=m
QD
d=1 P(b, d, md). Then the proba-
bility that the total traﬃc at time t is B is: p′(B) = P
m1,m2,...,mbmax
Q
b p(b, mb),
where bmax is the upper bound of the per-time-slot traﬃc, and m1 + 2m2 + . . . +
bmaxmbmax = B. Next, the probability that the peak traﬃc over time slots [tn, T]
is no more than B is: ξ(B) = (PB
i=0 p′(i))T−tn. The probability that the peak
traﬃc is exactly B is: ξ′(B) = ξ(B + 1) −ξ(B).
Finally, we obtain ¯
v([N]) =
P e
B
i=0 e
Bξ′(i) + P∞
i= e
B iξ′(i), where e
B is the peak per-time-slot traﬃc during [1, tn].
The sketch of our online algorithm is given in Alg. 8, where we adopt the second
method above to estimate the oﬄine Shapley value of each user upon her arrival.
The messaging complexity of this algorithm is still O(N), and its time complexity
is O(N4D log T).
Theorem 5.9. The online auction described in Alg. 8 is computationally eﬃcient,
individually rational, truthful in both bidding price and bidding data size, budget
balanced in expectation, and
δ
δ−γ -competitive in social welfare in expectation, if the


Chapter 5. Shapley-value Mechanism for Bandwidth
75
Algorithm 8 Online Auction Mechanism
1: ▷Upon arrival of user n’s transfer request:
2: Calculate the traﬃc schedule bm(t), ∀m ∈[1, n], ∀t ∈[T], using the traﬃc
scheduling algorithm in Sec. 5.3.2
3: Calculate the Shapley value φ′
n based on bm(t), ∀m ∈[1, n], ∀t ∈[T]
4: Calculate the estimation of the oﬄine Shapley value: ˆ
φn = φ′
n¯
v([N])tn
v([1,n])T
5: if user n’s bid price ˆ
en ≥γ ˆ
φn then
6:
Accept user n by setting xn = 1
7:
Charge user n by payment jn = γ ˆ
φn
8: else
9:
Reject user n by setting xn = 0
expectation of the oﬄine Shapley value of each user can be estimated upon her
arrival.
For the online auction, we can prove its truthfulness in both bidding price and
bidding data size (and only assume that the deadline is known to the auctioneer),
which is stronger than the property of the oﬄine auction. The proof of Theorem
5.9 is given in Appendix 8.17.
5.3.2
Online Traﬃc Scheduling Algorithm
We design a simple but eﬀective online algorithm to provide a traﬃc schedule
{bn(t), ∀t ∈[T]}, upon the arrival of user n, utilizing the idea of simple smoothing
[37]: We distribute user n’s data traﬃc equally over the entire transmission time
window [tn, tn + dn −1], such that bn(t) = Bn/dn, ∀t ∈[tn, tn + dn −1]. This
simple algorithm provides us a simple feasible solution to (5.1), since we assume
the maximum capacity of the ISP’s links is suﬃcient for all the data transfers if the
cloud provider is willing to pay an ISP charge at any amount (Assumption 1).
Similar to the case in Sec. 5.2.3 where the solution we ﬁnd further maximizes social
welfare under the maximum-traﬃc charging model, here we move a step further
to show that the solution produced by such a simple-smoothing algorithm is also
eﬃcient in minimizing the ISP charge part of the social welfare, under the maximum-
traﬃc charging model. The intuition is that by evenly distributing the traﬃc, we
may avoid high traﬃc peaks.
Lemma 5.10. Our simple smoothing based online traﬃc scheduling algorithm achieves
a 2HD ∈O(log D) competitive ratio in the peak traﬃc on each link, where D =
maxn∈N{dn} is the maximal allowable delay among all users’ requests, and HD =
PD
d=1 1/d.
Lemma 5.10 shows that if the optimal solution of (5.1) leads to a peak traﬃc C along
a link in the system, our online scheduling algorithm achieves a peak traﬃc at most


Chapter 5. Shapley-value Mechanism for Bandwidth
76
2HDC on the link.
This competitive ratio is also asymptotically tight. Consider D
users who arrive at t1 = 1, t2 = 2, . . . , tD = D, respectively, and maximum transfer
completion time d1 = D, d2 = D −1, . . . , dD = 1, respectively. The data size of all
these requests is B1 = · · · = BD = 1. The minimal peak traﬃc is 1 when user 1’s
data is transferred in time slot 1, user 2’s data is transmitted in time slot 2, and
so on. With our online scheduling algorithm, the peak traﬃc PD
d=1 1/d occurs at
time D.
Based on Lemma 5.10, we can bound the ratio of the overall ISP charge for traﬃc in
the entire network incurred by our online scheduling algorithm over that computed
with the optimal solution to (5.1), as follows, under the maximum-traﬃc charging
model.
Theorem 5.11. The simple smoothing based online traﬃc scheduling algorithm
achieves a 2αHD competitive ratio in overall ISP charge in the system, under the
maximum-traﬃc charging model, where α is the ratio between the highest and lowest
unit bandwidth prices among all links, and HD = PD
d=1 1/d.
Finally, we readily see that Alg. 8 and all results derived in this section also apply
to the case that some users request exclusive bandwidth rates.
5.4
Performance Evaluation
5
10
15
20
25
30
1
1.02
1.04
1.06
1.08
1.1
1.12
Maximum allowable delay (D)
Optimal/Offline Social Welfare
N=2000
N=5000
Figure 5.3: Per-
formance
of
the
oﬄine auction
0
0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9
1
1.02
1.04
1.06
1.08
1.1
Percentage of Flat Bandwidth Requests
Optimal/Online Social Welfare
N=2000
Figure 5.4: Per-
formance of oﬄine
auction with dif-
ferent percentages
of ﬂat bandwidth
requests
1.5 2
3
4
5
6
7
8
0
0.6
1.2
1.8
2.4
3 x 10
7
γ
Provider Revenue
 
 
1.5 2
3
4
5
6
7
81
1.1
1.2
1.3
1.4
1.5
x 10
8
Social Welfare
Provider Revenue
Social Welfare
Figure
5.5:
Impact of γ on
the
provider’s
revenue and the
social welfare
5.4.1
Simulation Setup
We evaluate the performance of our bandwidth auctions through trace-driven simu-
lations. We simulate the topology of Google datacenter network [43], which includes
12 datacenters and 16 links between the datacenters. The capacity of the links is


Chapter 5. Shapley-value Mechanism for Bandwidth
77
0.95
1
1.05
1.1
1.15
1.2
1.25
x 10
9
2
3
4
5
6 x 10
8
Social Welfare
Provider Revenue
Auction
Flat Price
Figure
5.6:
Comparison
of
the
provider’s
revenue between
our
oﬄine
auc-
tion
and
ﬂat
pricing
5
10
15
20
25
30
1
1.02
1.04
1.06
1.08
1.1
1.12
Maximum allowable delay (D)
Optimal/Online Social Welfare
N=1000
Figure 5.7: Per-
formance
of
the
online auction
20
40
60
80
100
1
1.2
1.4
1.6
1.8
2
2.2
Maximum allowable delay (D)
Online/Optimal ISP Charge
N=4000
N=8000
N=12000
Figure 5.8: Per-
formance
of
on-
line scheduling al-
gorithm
assumed to be always suﬃcient for data transfer. A unit bandwidth price αl for each
link is generated randomly in the range [1, 2]. We uniformly randomly choose one
time slot as the arrival time tn of each request, such that each user arrives at each
time slot with an equal probability. We generate our data transfer workloads in two
ways: (1) assigning each user with a transfer data size Bn based on the recorded
Wikipedia page view counts (available at [1]) during her arrival hour, multiplied by
a random coeﬃcient in [1, 4]; (2) uniformly randomly generating a data transfer size
in the range of [104, 105]. The source and destination datacenters of each request
are randomly picked among all the datacenters, and the shortest path between the
two is indicated for data transfer. The allowable delay dn is randomly set within
[1, D]. The valuation en of user n is set proportional to the data size Bn, negatively
correlated with the allowable delay dn, and scaled by a random coeﬃcient. Based
on the data we generated, we have δ = 10. By default, γ = 2, and the percentage
of ﬂat bandwidth requests among all requests is zero.
We evaluate the performance of our auctions against the optimal performance
achieved by the optimal solution of the social welfare maximization problem (5.1).
The evaluations are based on the maximum-traﬃc charging model, because prob-
lem (5.1) under the 95th-percentile charging model cannot be formulated into a
standard mixed integer program and cannot be readily solved by an optimization
solver. We run each experiment for 10 times (5 following the Wikipedia workload
and 5 with randomly generated workload) and present the average result.
5.4.2
Performance of the Oﬄine Auction
We ﬁrst compare the social welfare achieved by our oﬄine auction Alg. 7 and the
optimal social welfare by solving (5.1) exactly, with T = 1000. In Fig. 5.3, we show
the ratio of the optimal social welfare over the social welfare derived by Alg. 7,
averaged over 10 times of the experiment, together with the best and worst ratios


Chapter 5. Shapley-value Mechanism for Bandwidth
78
obtained among the 10 trials. Our theoretical upper bound of the approximation
ratio is
δ
δ−γ = 1.25. Fig. 5.3 shows that the average ratio that our oﬄine auction
actually achieves is much better than the theoretical bound. The impact of D on
the ratio is not obvious. When N is larger, the performance tends to downgrade
a bit. This is because with a larger N, more random permutations are required in
computing Shapley value with Eqn. (5.2), in order to obtain an accurate estimation,
i.e., using O(N2) random permutations may not be suﬃcient. This calls for a more
eﬃcient permutation selection method (rather than random selection among the set
of all possibly permutations over [1, N]), to achieve more accurate estimation with
fewer permutations, whose in-depth study we leave as future work.
Next we study the impact of the percentage of ﬂat bandwidth requests on the social
welfare ratio. Given the data sizes in delay-tolerant data transfer requests are in
the range of [100, 105] based on the Wikipedia traces, we set the bandwidth rate
demanded in a ﬂat bandwidth request n by randomly picking from [100
dn , 105
dn ]. In
addition, T = 400, N = 2000, and D = 10 in this set of experiments. Fig. 5.4 shows
that the performance of our oﬄine auction remains stable at any ratio of the ﬂat
bandwidth requests and the delay-tolerant data transfer requests, demonstrating
that the oﬄine auction Alg. 7 can handle any mixed request patterns well.
We also study the impact of parameter γ in Alg. 7 on the provider’s revenue and the
social welfare. Here we set T = 100, N = 2000, D = 15, and vary γ used in deciding
the acceptance of users ˆ
en ≥γφn and the payment jn = γφn between 1.5 and 8.
Fig. 5.5 shows that with the increase of γ, the social welfare decreases, and the
provider’s revenue in general increases, revealing a tradeoﬀbetween social welfare
and the provider’s revenue. With larger γ, the admission criterion becomes higher,
and hence more users are rejected. Both the total valuation and the ISP charge
decrease due to more rejected users. Since most users’ valuations are much larger
than their incurred ISP charges, the decrease of the total valuation is dominating,
leading to reduced social welfare. For the provider, she accepts fewer requests but
charges a higher payment from each winner. When γ is relatively small, the in-
crease of payment with the increase of γ is dominating, and the provider’s revenue
increases; when γ is larger, the impacts of per-winner payment increase and win-
ner number decrease roughly cancel out, and the provider’s revenue becomes more
stable. We also notice that for γ > 5, the provider’s revenue increases very little
with the decrease of social welfare. This implies that the provider can set γ at a
reasonable level (about 4 in this case) to achieve a satisfying level of revenue, while
looking after the beneﬁt of most users (social welfare).
Finally we compare the performance of our oﬄine auction with that of a ﬂat pricing
policy. Under the ﬂat pricing policy, each user is charged by her total data size Bn
times a ﬂat price rate. The provider also faces the social welfare and revenue trade-
oﬀwhen using ﬂat pricing: when the price is higher, the provider may gain more
revenue for serving each user while driving more users away, aﬀecting social welfare.
So we compare the provider’s revenue achieved under the two pricing methods, our
auction and ﬂat pricing, when the same total social welfare is achieved.
Under
our auction mechanism, we can calculate the revenue achieved at any given social
welfare, just like what we do in Fig. 5.5. For ﬂat pricing, given an amount of social


Chapter 5. Shapley-value Mechanism for Bandwidth
79
welfare, we ﬁnd the unique corresponding ﬂat price by gradually increasing a price
rate until the target social welfare is achieved; then the revenue under such a ﬂat
price can be calculated. As we can see in Fig. 5.6, under either pricing mechanism,
if more social welfare is desired, the provider has to give up some revenue.
At
any given amount of social welfare, the revenue under our auction mechanism is
much larger than that under ﬂat pricing, revealing the better performance of our
mechanism.
5.4.3
Performance of the Online Auction
We now evaluate our online auction Alg. 8, and show in Fig. 5.7 the ratio of the social
welfare achieved by Alg. 8 over the optimal social welfare by solving (5.1) exactly,
with T = 100. The average ratio is smaller than the theoretical approximation ratio
1.25 in all cases.
Finally, we evaluate the ratio between the overall ISP charge incurred by our online
scheduling algorithm in Sec. 5.3.2) and the optimal ISP charge, derived based on
the optimal solution to (5.1). The ratio between the maximum and minimum unit
bandwidth prices on all links is set to α = 2, and we use T = 1000. Fig. 5.8 shows
that the performance of our online scheduling algorithm slowly downgrades with
larger D, which is consistent with our analysis in Theorem 5.11. Nevertheless, for
large D, the ratio is around 2, still much lower than the theoretical upper bound
given in Theorem 5.11. It also shows that the extreme worst cases (like the example
we present in Sec. 5.3.2) rarely happen in practical scenarios.
5.5
Extension
Recall that our oﬄine auction Alg. 7 is truthful in bidding price and our online
auction Alg. 8 is truthful in bidding price and bidding data size. Among the three
parts in a user’s bid, truthfulness in the deadline dn is still missing. We now propose
an extension of the online auction mechanism, which achieves fully truthfulness in
all parameters in a user’s bid.
Intuitively, a user cannot bid a later deadline than her true need, which will lead to
incomplete transmission by the time of her said deadline. Then the only possibility
for untruthfulness in the deadline is that a user may report an earlier deadline
than her true need.
In order to prevent such manipulation, our approach is to
let the auctioneer decide an optimal transfer completion time for the user, which
brings the lowest price for the user.
Then the user has no incentive to report
an earlier deadline since the bandwidth allocation at the auctioneer is already to
achieve the best utility for her. The modiﬁed online auction is given in Alg. 9. Let
ˆ
φn(d) denote the estimation of the oﬄine Shapley value of user n in Alg. 8 under
deadline d, which decides the threshold for acceptance/rejection in our mechanism.
Our extended online auction works by running Alg. 8 with diﬀerent deadlines d,


Chapter 5. Shapley-value Mechanism for Bandwidth
80
Algorithm 9 Extended Online Auction Mechanism
1: ▷Upon arrival of user n’s transfer request:
2: for all d ∈[dn] do
3:
Calculate the traﬃc schedule bm(t), ∀m ∈[1, n], ∀t ∈[T], using the
traﬃc scheduling algorithm in Sec. 5.3.2, supposing user n’s deadline is d
instead of dn
4:
Calculate the Shapley value φ′
n(d) based on traﬃc schedule bm(t), ∀m ∈
[1, n], ∀t ∈[T]
5:
Calculate the estimation of the oﬄine Shapley value:
ˆ
φn(d)
=
φ′
n(d)¯
v([N])tn
v([1,n])T
6: Choose the smallest oﬄine Shapley value ˆ
φmin
n
= mind∈[dn]{ˆ
φn(d)}, and
the corresponding optimal deadline dmin.
7: if user n’s bid price ˆ
en ≥γ ˆ
φmin
n
then
8:
Accept user n by setting xn = 1
9:
Charge user n by payment jn = γ ˆ
φmin
n
10:
Schedule user n’s traﬃc in dmin time slots
11: else
12:
Reject user n by setting xn = 0
for d = 1, . . . , dn, and choosing the smallest threshold: ˆ
φmin
n
= mind∈[dn]{ˆ
φn(d)}, as
well as the corresponding traﬃc schedule. The auction accepts a user if ˆ
en ≥γ ˆ
φmin
n
.
We prove the properties achieved by Alg. 9 in Theorem 5.12, with proof given in
Appendix 8.20.
Theorem 5.12. The extended online auction Alg. 9 is computationally eﬃcient,
individually rational, truthful in bidding price, deadline and data size, as well as
budget balanced in expectation.
We note that since the online scheduling algorithm is modiﬁed in this extension
mechanism, the competitive ratio in social welfare is no longer guaranteed. We
instead evaluate the performance of Alg. 9 in social welfare using trace-driven sim-
ulations under the same setup as in previous experiments. Fig. 5.9 shows the ratio
of the optimal social welfare over the social welfare derived by Alg. 9, averaged over
10 times of the experiment, together with the best and worst ratios obtained among
the 10 trials. Here T = 100. We observe that the ratios are very close to those
achieved by the online auction Alg. 8 in Fig. 5.7. The reason behind the unaﬀected
performance is as follows: The search for the optimal completion time leading to
the lowest Shapley value is in line with the minimization of the ISP charge; if a
user’s traﬃc would increase the maximum traﬃc in the billing time slot, such a
traﬃc schedule will result in a relatively high Shapley value, and thus is unlikely
to be chosen. So in the long term, traﬃc schedules which smooth the peak traﬃc
are more likely to be chosen, and the total ISP charge and hence the social welfare
remain at similar levels.


Chapter 5. Shapley-value Mechanism for Bandwidth
81
5
10
15
20
25
30
1
1.02
1.04
1.06
1.08
1.1
1.12
Maximum allowable delay (D)
Optimal/Extension Social Welfare
 
 
N=1000
Figure 5.9: Performance of the extended online auction
5.6
Summary
This chapter presents a novel Shapley value based auction mechanism for dynamic
pricing of inter-datacenter on-demand bandwidth. Targeting truthfulness, individu-
al rationality, budget balance and competitiveness in social welfare, our mechanism
design is divided into two steps: we ﬁrst propose the oﬄine version of the auction,
which exploits the Shapley values in admission control and payment computation
together with an optimal traﬃc scheduling algorithm, achieving all four desired
properties; we then design the online auction approximating the oﬄine mechanism,
retaining the nice properties. As the ﬁrst pricing mechanism for inter-datacenter
bandwidth, our design has been targeting a generic system model, by allowing two
representative types of bandwidth demands and two typical ISP charging models.
Now we have presented auction mechanisms for VM provisioning (in Chapter 3 and
Chapter 4), and for bandwidth scheduling (in Chapter 5). Next, we will combine
these two types of resources together, and design an algorithm that provides users
with a package of both computational and bandwidth resource, which is a big
challenge in mechanism design.




Chapter 6
An Online Mechanism for
Dynamic Virtual Cluster
Provisioning in Geo-Distributed
Clouds
In the previous chapters, we have presented auction mechanisms for VM provision-
ing and for bandwidth scheduling. In this chapter, we will combine these two types
of resources, so that our proposed mechanism becomes a more completed solution
for practical user needs.
It is common for cloud users to require clusters of inter-connected virtual machines
(VMs) in a geo-distributed IaaS cloud, to run their services. Compared to isolated
VMs, key challenges on dynamic virtual cluster (VC) provisioning (computation
+ communication resources) lies in two folds: (1) optimal placement of VCs and
inter-VM traﬃc routing involve NP-hard problems, which are non-trivial to solve
oﬄine, not to mention if an online eﬃcient algorithm is sought; (2) an eﬃcient
pricing mechanism is missing, which charges a market-driven price for each VC as
a whole upon request, while maximizing system eﬃciency or provider revenue over
the entire span. This chapter proposes eﬃcient online auction mechanisms to ad-
dress the above challenges. We ﬁrst design SWMOA, a novel online algorithm for
dynamic VC provisioning and pricing, achieving truthfulness, individual rationality,
computation eﬃciency, and (1 + 2 log µ)-competitiveness in social welfare, where µ
is related to the problem size. Next, applying a randomized reduction technique,
we convert the social welfare maximizing auction into a revenue maximizing on-
line auction, PRMOA, achieving O(log µ)-competitiveness in provider revenue, as
well as truthfulness, individual rationality and computation eﬃciency. We validate
the eﬃcacy of the mechanisms through solid theoretical analysis and trace-driven
simulations.
83


Chapter 6. Mechanism for Dynamic Virtual Cluster Provisioning
84
6.1
Problem Model
6.1.1
Online VC Auction
Consider an IaaS cloud with P geo-distributed data centers (DCs). Let [X] denote
the integer set {1, 2, . . . , X}. Data center p ∈[P] has ˆ
Ap,r units of type-r com-
putational resources (such as CPU, RAM and disk), for all r ∈[R], where R is
the number of computational resource types. The data centers are inter-connected
through S gateway routers, each of which is located with one data center, and hence
S = P. An illustration of the data center network is given in Fig. 6.1. Let E be the
set of links connecting gateway routers and data centers. The bandwidth capacity
of link (w1, w2) ∈E is ˆ
dw1,w2, where w1 and w2 can be either a router in [S] or a
data center in [P]. Practically, we assume the bandwidth on the link connecting a
data center and its collocated gateway router (e.g., the link from DC 1 to Router
1 in Fig. 6.1) is unlimited. The unit operational cost of resource r at DC p is op,r,
and the unit operational cost of bandwidth on link (w1, w2) is ow1,w2.
N users arrive on the ﬂy, and request for virtual clusters (VCs). User n ∈[N] arrives
at time T s
n, submits a bid to demand a VC immediately, and releases the VC at time
T f
n . Let Tn = T f
n −T s
n be the usage duration of user n’s VC, and T = maxn∈[N]{Tn}
denote the largest usage duration among all users.
The VC required by user n
includes Vn tailor-made VMs, and VM v in the VC consumes an
v,r units of type-r
computational resource, ∀r ∈[R]. The bandwidth demand to send traﬃc from VM
v1 to VM v2 in user n’s VC is Γn
v1,v2, which occupies inter-datacenter bandwidth
when VM v1 and VM v2 are located in diﬀerent data centers. User n can specify
several VM placement schemes with diﬀerent preferences. Let Bn be his set of VM
placement schemes. Each scheme β ∈Bn speciﬁes the placement of VMs in his
VC, represented by zn,β
v,p ∈{0, 1}, indicating that VM v is placed in data center p
if zn,β
v,p = 1 and not if zn,β
v,p = 0. Together with each scheme, the user submits a
valuation b′
n,β, which is his willingness-to-pay if his VC bid is successful the VMs
are allocated in the data centers speciﬁed in scheme β. Diﬀerent values of b′
n,β’s
indicate his preferences among the schemes, decided by the need of his workload or
services. For example, if the user is running MapReduce workloads, he may specify
to place all his VMs in a selected datacenter; if the user is operating an online video
service, his VMs are preferred to be located close to large population of the service
users.
In summary, the bid of user n can be expressed as (T s
n, T f
n , {an
v,r}v∈[Vn],r∈[R], {Γn
v1,v2}v1,v2∈[Vn],
{zn,β
v,p }β∈Bn,v∈[Vn],p∈[P], {b′
n,β}β∈Bn). Fig. 6.1 shows an example of a user requesting
a VC of 4 VMs and plots one VM placement scheme.
The cloud provider acts as the auctioneer. Upon arrival of a user’s bid, the provider
immediately responds with whether to serve this user, which VM placement scheme
to be adopted, and what price to charge this user for. The decision variables include
the following: (i) yn,β ∈{0, 1}, ∀n ∈[N], β ∈Bn, indicating whether user n’s request
is accepted according to his placement scheme β (yn,β = 1) and not otherwise


Chapter 6. Mechanism for Dynamic Virtual Cluster Provisioning
85
VM 1 
VM 2 
VM 3 
VM 4 
DC 1 
DC 2 
DC 3 
Router 1 
Router 2 
Router 3 
DC 4 
Router 4 
Figure 6.1: An example of virtual cluster provisioning.
(yn,β = 0).
At most one VM placement scheme can be accepted for each bid.
(ii) ˜
b′
n, ∀n ∈[N], payment of user n if his bid is accepted. (iii) fn
v1,v2,w1,w2, ∀n ∈
[N], v1, v2 ∈[Vn], (w1, w2) ∈E, indicating the routing traﬃc on each link, which will
be illustrated in detail in Sec. 6.1.2.
6.1.2
Goals of Mechanism Design
Our online auction design targets the following properties. (i) Truthfulness and in-
dividual rationality: The auction mechanism is truthful if for any user n, bidding a
diﬀerent valuation other than b′
n,β does not increase his utility, which is the diﬀerence
between his valuation and his payment b′
n,β −˜
b′
n. Truthfulness ensures that selﬁsh
buyers are stimulated to reveal their true valuations of the VCs they demand, sim-
plifying the bidding strategy and the auction design. Individual rationality requires
that any user’s utility is non-negative. (ii) Computation eﬃciency: The mechanis-
m should run in polynomial time, in order to be practically applied in an online
fashion.
(iii) Competitive in social welfare or provider revenue: The provider’s
revenue equals the total payment from all users in the online auction, P
n∈[N] ˜
b′
n,
less the total operational cost on DCs. Since the provider’s revenue and the user-
s’ payment part in the aggregate user utility (P
n∈[N],β∈Bn b′
n,βyn,β −P
n∈[N] ˜
b′
n)
cancel each other, the social welfare is the total valuation of accepted users, i.e.,
P
n∈[N],β∈Bn bn,βyn,β, less the total operational cost. Let Sonline denote the social
welfare achieved under an online mechanism, and Sopt be the oﬄine optimum so-
cial welfare. An online mechanism is c-competitive in social welfare if the ratio of
Sopt/Sonline is upper-bounded by c for any input instance. On the other hand, Let
Ronline be the total provider revenue obtained under the online auction. An online
auction is c-competitive in provider revenue if the ratio between the oﬄine optimal
social welfare and the provider revenue achieved by the online auction, Sopt/Ronline,
is upper-bounded by c for any input instance. Here comparing to Sopt instead of the
oﬄine revenue in computing the competitive ratio in revenue is a general practice,
since the optimal truthful auction generating largest revenue cannot be identiﬁed
[53]. We also note that in fact no truthful auction can achieve a revenue at the


Chapter 6. Mechanism for Dynamic Virtual Cluster Provisioning
86
amount of Sopt, which is only achievable when the users bid true valuations and
the provider always charges users according to their bid prices. However, the latter
leads to untruthful bidding, and hence a contradiction.
We next formulate the oﬄine VC provisioning and winner determination problem,
supposing all bids within system span are known and truthful bidding is guaranteed.
The objective in (6.1) indicates social welfare maximization, whose optimal value
is Sopt. It can be easily changed to revenue maximization by replacing the social
welfare with the provider’s revenue.
maximize
X
n∈[N],β∈Bn
b′
n,βyn,β −
X
n∈[N],v∈[Vn],p∈[P],r∈[R]
zn
v,pan
v,rop,rTn−
X
n∈[N],v1,v2∈[Vn],(w1,w2)∈E
fn
v1,v2,w1,w2ow1,w2Tn
(6.1)
s.t. zn
v,p =
X
β∈Bn
yn,βzn,β
v,p
∀n ∈[N], v ∈[Vn], p ∈[P] (6.1a)
X
β∈Bn
yn,β ≤1 ∀n ∈[N] (6.1b)
X
n∈Nt
X
v∈[Vn]
zn
v,pan
v,r ≤ˆ
Ap,r ∀p ∈[P], r ∈[R], t ∈[T] (6.1c)
X
w:(p,w)∈E
fn
v1,v2,p,w = Γn
v1,v2zn
v1,p ∀p ∈[P], n ∈[N], v1, v2 ∈[Vn] (6.1d)
X
w:(w,p)∈E
fn
v1,v2,w,p = Γn
v1,v2zn
v2,p ∀p ∈[P], n ∈[N], v1, v2 ∈[Vn] (6.1e)
X
w:(w,ν)∈E
fn
v1,v2,w,ν =
X
w:(ν,w)∈E
fn
v1,v2,ν,w
∀n ∈[N], v1, v2 ∈[Vn], ν ∈[S] (6.1f)
X
n∈Nt
X
v1,v2∈[Vn]
fn
v1,v2,w1,w2 ≤ˆ
dw1,w2 ∀(w1, w2) ∈E, t ∈[T] (6.1g)
yn,β ∈{0, 1} ∀n ∈[N], β ∈Bn (6.1h)
fn
v1,v2,w1,w2 ≥0 ∀n ∈[N], v1, v2 ∈[Vn], (w1, w2) ∈E (6.1i)
Here zn
v,p is an auxiliary variable deﬁned in the ﬁrst constraint (6.1a), representing
if data center p is selected to host VM v in user n’s VC, which is 1 if user n’s bid
is accepted, one VM placement scheme is picked, and v is placed in p according to
this scheme, and 0 otherwise. fn
v1,v2,w1,w2 represents the allocated bandwidth on link
(w1, w2) for the traﬃc ﬂow from VM v1 to VM v2 in user n’s VC. Let Nt be the set of
active users at time t, whose VCs are in use at t: Nt = {n|t ∈[T s
n, T f
n ]}. Constraint
(6.1b) guarantees that at most one scheme is accepted for each user. Constraint
(6.1c) requires that at any time the allocated computational resources at each data


Chapter 6. Mechanism for Dynamic Virtual Cluster Provisioning
87
center do not exceed their respective capacity. Constraints (6.1d) (6.1e) and (6.1f)
model routing of user n’s traﬃc ﬂow from VM v1 to VM v2. We allow multi-path
routing of each inter-VM ﬂow. An illustration of two paths taken by the ﬂow from
VM 3 to VM 4 is given in Fig. 6.1. Constraints (6.1d) speciﬁes that at the data
center p where v1 of user n is placed (zn
v1,p = 1), the total out-bound bandwidth from
data center p allocated for user n’s ﬂow from v1 to v2 (LHS of (6.1d)) should equal
his speciﬁed bandwidth demand (Γn
v1,v2). Similarly, constraint (6.1e) speciﬁes the
total in-bound bandwidth at data center p equal to the bandwidth demand Γn
v1,v2 if
v2 is placed at data center p. Constraint (6.1f) is the ﬂow conservation constraint
at each router for user n’s ﬂow from v1 to v2. Since routers are intermediate nodes,
in-bound and out-bound ﬂow rates should be equal. Constraint (6.1g) requires that
the aggregated bandwidth allocated on each link in E does not exceed the link
capacity.
The objective function of (6.1) is maximizing the social welfare, which is the total
user valuation less the total operational cost. The oﬄine optimization problem in
(6.1) is a mixed integer linear program and can be proven NP-hard by a reduction
to the knapsack problem. The proof is given in .
Theorem 6.1. The oﬄine optimization problem (6.1) is NP-hard.
Hence, it is very challenging even to solve the VC provisioning problem in an oﬄine
fashion, with all information known.
6.1.3
Preliminaries for Online Mechanism Design
To design an eﬃcient online auction, we introduce a few concepts which will be useful
later. We regard each computational resource at each data center and the bandwidth
on each link as diﬀerent resources. Thus there are M = PR + E types of resources
in total (here E = |E|), i.e., PR types of computational resources at diﬀerent data
centers and E bandwidth resources on diﬀerent links. We use r(n, m, t) to denote
the amount of type m resource consumed by user n at time t, which is a value
depending on VM placement and traﬃc routing decisions made for the user’s bid.
For example, let m correspond to computational resource r at data center p. If the
bid is accepted and one or more VMs are allocated in data center p, then the amount
of resource m consumed by user n in a t ∈Tn is: r(n, m, t) = P
v∈[Vn] zn
v,pan
v,r. If m
denotes the bandwidth resource on link (w1, w2) ∈E, then the bandwidth consumed
on the link by the user during Tn is: r(n, m, t) = P
v1,v2∈[Vn] fn
v1,v2,w1,w2.
For ease of presentation, we normalize the scale of the capacity of each type of
resource, so that the total capacity of resource m at each time t is equal to 1, i.e.,,
ˆ
Ap,r = 1, ˆ
dw1,w2 = 1, ∀p ∈[P], r ∈[R], (w1, w2) ∈E. We then divide all the demands
of resource r(n, m, t) by ˆ
Ap,r or ˆ
dw1,w2, respectively. Then the resource constraints
(6.1c) and (6.1g) require that P
n∈[N] r(n, m, t) ≤1, for all m ∈[M] and t in [T].
Notice that the total operational cost brought by a user n’s β scheme can be easily
calculated, which is o(n, β) = P
m∈[M],t∈Tn r(n, m, t)Tnom, where om is the unit


Chapter 6. Mechanism for Dynamic Virtual Cluster Provisioning
88
operational cost of type m. We deﬁne the net valuation of user n’s scheme β to
be his valuation less operational cost: bn,β = b′
n,β −o(n, β). Then the total social
welfare equals the total net valuation of accepted users.
We make two assumptions. First, a user’s net valuation is approximately propor-
tional to the amount of resources his VC requires, i.e., the per unit per time slot
valuation is bounded: 1 ≤
bn,β
Mr(n,m,t)Tn ≤F, where F is a constant, ∀n, m, t and
r(n, m, t) ̸= 0. We also assume that the ratio between the highest and lowest val-
uations is bounded:
maxn∈[N],β∈Bn{bn,β}
minn∈[N],β∈Bn{bn,β} ≤F. Second, there is an upper bound on
the amount of resources required by each VC in each time slot at each data cen-
ter or link, i.e., r(n, m, t) ≤
1
log µ where µ = 2MTF + 1, which implies that the
resource demand of each individual user is small as compared to the total capacity
of each data center. Here µ (related to F) is an important parameter to appear in
our competitive ratios. We summarize important notation in Table 6.1, for ease of
reference.
6.2
Social Welfare Maximizing Online Auc-
tion
We now design a social welfare maximizing online mechanism, SWMOA.
Main Idea. At a high level, our strategy of ﬁnding a competitive VC allocation
solution for problem (6.1) is to maintain a dynamic virtual unit cost cm(t, n) for
each type of resource m at each time slot t ∈[T] (containing future time slots with
resource reservation), before user n arrives. For any VM placement scheme β of
the user, we calculate a total virtual cost C(n, β) based on the unit costs and the
amount of resources the scheme consumes. Scheme β is a candidate to be accepted
if its cost is smaller than its net valuation: C(n, β) ≤bn,β.
The virtual unit cost cm(t, n) is designed to increase when the remaining available
amount of resource m at time t depletes. Thus a higher virtual cost indicates that
type of resource is scarce. As a result, the cost of a VC is higher if it consumes
resources in shortage, reducing the likelihood that it is chosen by the online algo-
rithm. On the other hand, by comparing the total cost with the net valuation of
VC, the online mechanism can pick users with higher net valuation compared with
the amount of resources consumed.
We deﬁne the load factor (before user n arrives) of resource m for each time t ∈
[T] to be the amount of already allocated (reserved) resources in the respective
time slot before user n arrives: λm(t, n) = P
n′<n,n′∈[N] r(n′, m, t), where n′ < n
indicates that user n′ arrives earlier than user n. We deﬁne the virtual unit cost
of resource m at time t, computed before user n arrives (i.e., before counting in
resource consumption of user n in each time slot), as follows:


Chapter 6. Mechanism for Dynamic Virtual Cluster Provisioning
89
Table 6.1: Notation for Chapter 6
N
# of users
[X]
integer set {1, . . . , X}
P
# of data centers
˜
b′
n
user n’s payment
M
M = PR + |E|
Tn
duration of user n’s VC
R
# of computational resource types
T s
n
arriving time of user n
T f
n
departure time of user n
T
maxn{Tn}
b′
n,β
user n’s valuation if scheme β is accepted
Bn
user n’s set of VM placement schemes
r(n, m, t)
demand of resource m at t by user n
λm(t, n)
load factor of resource m at t before user n
F
constant related to valuation variation
µ
2MTF + 1
cm(t, n)
cost of resource m at t before user n
C(n, β)
total cost for scheme β of user n
Vn
# of VMs in user n’s VC
an
v,r
amount of resource r required by VM v of
user n
Γn
v,v′
traﬃc from VM v to VM v′ of user n
op,r
unit operational cost of resource r on DC p
ow1,w2
unit operational cost of link (w1, w2)
yn,β
scheme β of user n is accepted or not
zn,β
v,p
VM v is assigned to data center p or not in β
of user n
E
set of links
ˆ
dw1,w2
bandwidth capacity of link (w1, w2)
ˆ
Ap,r
capacity of type r resource at DC p
fn
v1,v2,w1,w2
traﬃc from v1 to v2 of user n on link (w1, w2)
cm(t, n) = µλm(t,n) −1, ∀t ∈[T], n ∈[N], m ∈[M].
(6.2)
cm(t, n) is designed to increase exponentially with the increase of consumed re-
sources. This allows the user to consume resources freely when resources are abun-
dant, since the cost is close to 0 when λm(t, n) is small. However when the load
factor is close to 1, the cost increases fast to a very large value, so that the user is
almost forbidden to use the resource in shortage. The idea of the unit cost formula
comes from the study of packing/covering LPs [19].
We deﬁne the total cost that user n incurs if his scheme β is accepted as the sum
of the costs of all resources consumed:


Chapter 6. Mechanism for Dynamic Virtual Cluster Provisioning
90
C(n, β) =
X
m∈[M]
X
t∈Tn
cm(t, n)r(n, m, t), ∀n ∈[N], β ∈Bn.
(6.3)
The mechanism accepts a user if there exists a scheme β with cost less than its
net valuation.
If there are more than one schemes satisfying the condition, we
choose the one with the largest user utility: bn,β −C(n, β), which is the scheme
maximizing user’s utility under truthful bidding when we set the payment to be
˜
b′
n = C(n, β) + o(n, β).
Cost Computation. The total cost C(n, β) for each VM placement scheme β
includes the cost of computation resources and the cost of bandwidth consumption.
Suppose cr,p(t, n) denote the virtual unit cost for resource r in data center p at time t.
The total cost of computational resource is P
t∈Tn
P
r∈[R]
P
p∈[P]
P
v∈[Vn] cr,p(t, n)av,rzn
v,p.
The bandwidth cost diﬀers depending on the routing plan of ﬂows among VMs in
user n’s VC. We ﬁnd the best traﬃc routing plan for VM placement scheme β, that
minimizes the total bandwidth cost, by solving the LP (6.4).
The LP identiﬁes the best routing paths and bandwidth allocation for ﬂows a-
mong VMs in user n’s VC (decided by fn
v1,v2,w1,w2’s), when the VMs are placed
in data centers according to scheme β. Here cw1,w2(t, n) represents the virtual u-
nit cost for bandwidth on link (w1, w2) at time t, before user n submits his bid.
P
v1,v2∈[Vn] fn
v1,v2,w1,w2 is the overall bandwidth consumed on link (w1, w2) by ﬂows
among user n’s VMs. pv1 and pv2 represent the assigned data center for VM v1
and VM v2, respectively. Constraints (6.4a) and (6.4b) ensure that the total out-
bound/in-bound traﬃc from pv1/to pv2 equals the traﬃc demand from v1 to v2.
Constraint (6.4c) is the ﬂow conservation constraint.
Solving (6.4) gives us the
optimal routing as well as the minimum total bandwidth cost under scheme β. In
fact, (6.4) is a minimum cost multi-commodity ﬂow problem which allows fractional
ﬂows, and can be solved using eﬃcient algorithms [54] in O((E + V 2
n )P) time.
minimize
X
(w1,w2)∈E
X
t∈Tn
(cw1,w2(t, n)
X
v1,v2∈[Vn]
fn
v1,v2,w1,w2)
(6.4)
X
w:(pv1,w)∈E
fn
v1,v2,pv1,w = Γn
v1,v2 ∀v1, v2 ∈[Vn] (6.4a)
X
w:(w,pv2)∈E
fn
v1,v2,w,pv2 = Γn
v1,v2 ∀v1, v2 ∈[Vn] (6.4b)
X
w:(w,ν)∈E
fn
v1,v2,w,ν =
X
w:(ν,w)∈E
fn
v1,v2,ν,w ∀v1, v2 ∈[Vn], ν ∈[S] (6.4c)
fn
v1,v2,w1,w2 ≥0 ∀(w1, w2) ∈E, v1, v2 ∈[Vn] (6.4d)


Chapter 6. Mechanism for Dynamic Virtual Cluster Provisioning
91
Online Auction. The social welfare maximizing online auction is summarized in
Alg. 10. Upon receiving a new user’s bid, we calculate the minimum total cost for
each scheme β by solving (6.4). We choose the scheme β∗with largest user utility
and accept the user if his utility is positive.
Then we upgrade the virtual unit
costs. We present properties achieved by SWMOA in Thm. 6.2, with proof given in
. Especially, the payment of each winning user is computed based on virtual unit
resource costs before counting in resources required by the user. Such independence
of payments from the bids guarantees truthfulness of the mechanism.
Algorithm 10 Social Welfare Maximization Online Auction SWMOA
1: if user n ∈[N] arrives then
2:
for all schemes β ∈B do
3:
Solve the minimum cost multi-commodity ﬂow problem (6.4) and
ﬁnd optimal routing
4:
Compute the total cost C(n, β)
5:
Calculate the utility bn,β −C(n, β) of scheme β
6:
Let β∗be the scheme with maximal utility
7:
if C(n, β∗) ≤bn,β∗then
8:
Accept user n with scheme β∗, i.e., set yn,β∗= 1, yn,β = 0, ∀β ̸= β∗
9:
Charge user n the payment ˜
b′
n = C(n, β∗) + o(n, β)
10:
Update unit costs cm(t, n + 1) according to (6.2)
11:
else
12:
Reject user n, i.e., set yn,β = 0, ∀β ∈Bn
Theorem 6.2. The online auction mechanism SWMOA (Alg. 10) is truthful and
individually rational, never violates the resource constraints, runs in O((E+V 2
n )PB)
time in each round, and achieves a (1 + 2 log µ)-competitive ratio in social welfare,
where B = maxn∈[N] |Bn| is the largest number of schemes submitted by any user.
Dynamic Routing. Unlike VMs which are not easy to be migrated among DCs,
routing plan can be dynamically adjusted. An intuitive improvement of the online
auction SWMOA is to adjust the routing plan after each user’s leave, and ﬁnd a
new routing plan with the lowest ﬂow cost for each current user. This can be done
by solving the multi-commodity ﬂow problem (6.4) for each user. By decreasing
the traﬃc on bottleneck links in the network, we decrease the users’ payment,
while improving the social welfare. But in some cases, which are easy to construct,
routing adjustment cannot increase the total social welfare, so we cannot assert
that the competitive ratio is improved under dynamic routing. On the other hand,
we also cannot assert that the competitive ratio is not improved, since the worst
case scenario is diﬃcult to identify. We will verify the eﬀect of dynamic routing in
simulation.


Chapter 6. Mechanism for Dynamic Virtual Cluster Provisioning
92
6.3
Revenue Maximizing Online Auction
We next design a revenue maximizing online auction PRMOA, inspired by a ran-
domized reduction technique [53].
Main Idea.
We use SWMOA to ﬁrst obtain a tentative VC allocation and a
payment for each user, and then re-examine each tentatively accepted bid with a
randomized boosted payment to improve revenue. The randomized boosted pay-
ment is carefully designed to be still below the user’s corresponding true valuation
with high probability, without the knowledge of the true valuation.
Obviously, the ideal payment which maximizes the revenue is a value just below
the user’s true valuation. However, a straightforward payment rule, e.g., 90% of
the user’s bid price, breaks the truthfulness of the mechanism, since users can gain
more from under-reporting their valuation. The payment has to be independent
of the users’ bids in order to guarantee truthfulness. So the principle of designing
a revenue maximization auction is to set the payment close to the valuation but
without knowing the valuation in the decision process.
Recall the payment decision process of SWMOA: We calculate the cost for a scheme
C(β, n), accept and charge the user ˜
b′
n = C(n, β) + o(n, β) if his net valuation for
this scheme is larger than C(β, n).
We use the original threshold C(n, β) as a
foundation, and add a randomized value δ on it: ˜
b′
n = C(β, n)+δ +o(n, β). Setting
δ is the key in achieving revenue competitiveness. If δ is too small, not enough
revenue is extracted. On the other hand, if δ is too large, the payment may exceed
the valuation, forcing our auction mechanism to reject the user, which brings great
loss to the revenue. In order to upper-bound the occurrence probability of either
cases, we let δ = 0 with probability 1/2, which means that our algorithm will be
exactly the same as SWMOA, both in allocation and payment, with probability 1/2.
With the other half probability, we try to set the payment as close to the valuation
as possible, using a power-of-2 rule: Let δ = 2ibmin with probability
1
2 log F , for
i = 1, 2, . . . , log F, where bmin = minn∈[N],β∈[Bn] bn,β is the minimal valuation among
all users. This guarantees that with probability
1
2 log F , the payment is at least half
of the valuation but still less than the valuation: bn,β/2 ≤˜
bn ≤bn,β, which is the
ideal payment we want for revenue competitiveness – this will be veriﬁed in our
proof of Thm. 6.3.
Another point worth noting is, since we increase the payment ˜
b′
n, some users will be
rejected in PRMOA, while accepted in SWMOA. In those cases, we still update the
virtual unit costs as if these users were accepted. That is, the virtual unit costs are
updated just like running SWMOA, no matter whether a user is actually accepted
by PRMOA or not. In this way, we guarantee that the costs of the user schemes
are always the same as in SWMOA, which is needed to show the competitiveness
of our mechanism.
Online Auction. The online auction is summarized in Alg. 11, with properties
given in Thm. 6.3. The proof of Thm. 6.3 is given in .


Chapter 6. Mechanism for Dynamic Virtual Cluster Provisioning
93
Algorithm 11 Provider Revenue Maximization Online Auction PRMOA
1: if user n ∈[N] arrives then
2:
Set δ = 0 with probability 1/2, and δ = 2ibmin with probability
1
2 log F ,
for i = 1, 2, . . . , log F
3:
for all schemes β ∈B do
4:
Solve the minimum cost multi-commodity ﬂow problem (6.4) and
ﬁnd optimal routing
5:
Compute the total cost C(n, β)
6:
Calculate the utility bn,β −C(n, β)
7:
Let scheme β∗be the scheme with maximal utility
8:
if C(n, β∗) ≤bn,β∗then
9:
Update unit costs cm(t, n + 1) according to (6.2), supposing user n
is accepted
10:
Set payment ˜
bn = C(n, β∗) + δ + o(n, β)
11:
if ˜
bn ≤bn,β∗then
12:
Accept user n with scheme β∗. Charge the payment ˜
b′
n.
13:
else
14:
Reject user n
Theorem 6.3. The online auction mechanism PRMOA (Alg. 11) is truthful and in-
dividually rational, never violates the resource constraints, and achieves a O(log µ)-
competitive ratio in provider revenue in expectation in polynomial time.
6.4
Nonlinear Operational Cost
In this section, we extend the model from linear operational cost to non-linear
cost, which is more typical in some applications, for example, the Dynamic Voltage
Frequency Scaling (DVFS), which adjusts the voltage of a CPU to conserve power
consumption. To deal with the more complex cost pattern, we adopt the Fenchel
duality method [24] to ﬁnd a competitive online auction, which is basically the same
method as SWMOA. The advantage of Fenchel duality is it gives us the conjugate
form of the nonlinear cost function, allowing us to get the appropriate pricing design
under nonlinear cost.
6.4.1
Problem formulation
First we formulate the VC provisioning problem under nonlinear cost in a slightly
diﬀerent way in order to simplify the problem. Suppose there are totally R types
of resources in the problem, including all computational resources at diﬀerent DC
and bandwidth on all links. We deﬁne a bundle to be a VC placement scheme with
a ﬁxed routing plan. So a scheme have a inﬁnite number of bundles. This is just


Chapter 6. Mechanism for Dynamic Virtual Cluster Provisioning
94
for the simplicity of presentation, and we will show in the algorithm design that
we can ﬁnd the desired bundle from many bundles using a multi-commodity ﬂow
algorithm. Suppose N users bid for VCs, and user n’s bundle β requires dn,β,r(t)
units of resource r at time t, for all r and t, and has valuation bn,β. The operational
cost function of resource r is deﬁned as:
fr(yr(t)) =
(
hryr(t)1+νr
yr(t) ∈[0, Cr]
+∞
yr(t) > Cr
(6.5)
where Cr is the capacity of resource r, yr(t) is the amount of resource used at time
t, and hr, νr are positive constants. The cost is super-linear with the increase of
yr(t), and becomes inﬁnite when yr(t) exceeds the capacity. Now we formulate the
social welfare maximization problem:
maximize
X
n∈[N]
X
β∈B
bn,βxn,β −
X
t∈[T]
X
r∈[R]
fr(yr(t))
(6.6)
s.t.
X
β∈B
xn,β ≤1 ∀n ∈[N]
(6.6a)
X
n∈[N]
X
β∈B
dn,β,r(t)xn,β ≤yr(t) ∀r ∈[R], t ∈[T]
(6.6b)
xn,β ∈{0, 1}, yr(t) > 0 ∀n ∈[N], r ∈[R], t ∈[T], β ∈B
(6.6c)
where xn,β = 1 represents that user n is served with bundle β. The dual of the
problem (6.6) is:
minimize
X
n∈[N]
un +
X
t∈[T]
X
r∈[R]
f∗
r (pr(t))
(6.7)
s.t. un ≥bn,β −
X
t∈[T]
X
r∈[R]
dn,β,r(t)pr(t) ∀n ∈[N], β ∈B
(6.7a)
un ≥0, pr(t) ≥0 ∀n ∈[N], r ∈[R], t ∈[T]
(6.7b)
where un and pr(t) are dual variables associated with constraint (6.6a) and (6.6b),
and f∗
r (pr(t)) is the Fenchel conjugate [24] of the cost function, whose exact form
is:


Chapter 6. Mechanism for Dynamic Virtual Cluster Provisioning
95
f∗
r (pr(t)) =
(
(pr(t)/(1 + νr))(1+νr)/νr
νr
(hr)1/νr
y0
r(t) ≤Cr
Crpr(t) −hrC1+νr
r
y0
r(t) > Cr
(6.8)
where y0
r(t) = (
pr(t)
hr(1+νr))1/νr.
6.4.2
VC allocation
We ﬁnd the allocation of VCs, i.e., the values of xn,β’s, using the KKT conditions.
The KKT conditions indicate that xn,β = 0 unless constraint (6.7a) is tight for n
and β. Thus, we let un be the maximal of 0 and the right hand side (RHS) of
constriant (6.7a):
un ≜max{0, max
β∈B {bn,β −
X
t∈[T],r∈[R]
dn,β,r(t)pr(t)}}
(6.9)
Subsequently, we let xn,β = 0, i.e., the provider does not serve user n, when un = 0.
Otherwise we serve bundle β (xn,β = 1) that maximizes the RHS. The rational
of the usage of KKT conditions here is as follows: we can consider pr(t) as the
marginal price of resources (similar as the cm(t, n) in SWMOA). Then the second
term of the RHS becomes the total payment of bundle β, which user n should pay
for the requested resources, i.e., ˆ
pn,β ≜P
t∈[T],r∈[R] dn,β,r(t)pr(t). So the RHS is the
utility of bundle β if it would be served. Then the above method maximizes each
user’s utility, which leads to truthfulness and social welfare maximization.
6.4.3
Payment design
To design the payment of each user, we only need to design the marginal price
pr(t) at any amount of allocated resources yr(t). The marginal price should cover
the operational cost. So intuitively, under the oﬄine setting, the marginal price is
equal to the marginal operational cost: f′
r(yr(t)). However, in the online setting,
the provider can only see the current demand. Therefore, our strategy is to predict
the ﬁnal total demand to be δr times the current demand, where δr is a constant
to be decided later.
The corresponding marginal price is: pr(t) = f′
r(δryr(t)).
If the predicted demand δryr(t) is larger than the capacity Cr, then we need to
set a threshold price to ﬁlter out low valuation bids. We use the state-of-the-art
technique in online auctions [18], and let the marginal price increase exponentially
with demand: pr(t) = f′
r(Cr) exp(θr(yr(t) −Cr/δr)), where θr is a constant to
be decided later. We show in Appendix. 8.24 that this price function guarantees
competitiveness of the online auction. In summary, the marginal price function is
deﬁned as:


Chapter 6. Mechanism for Dynamic Virtual Cluster Provisioning
96
pr(t) =
(
f′
r(δryr(t))
yr(t)δr ≤Cr
f′
r(Cr) exp(θr(yr(t) −Cr/δr))
yr(t)δr > Cr
(6.10)
Directed by the discussions above, we present the online algorithm in Alg. 12.
Upon arrival of each user, we ﬁnd the bundle with largest utility by enumerating
all schemes. And for each scheme, we solve the multi-commodity ﬂow problem to
ﬁnd the routing plan with lowest payment. Then we accept the user if there is a
bundle with positive utility, and update the allocation of resources and marginal
prices. The proof of Thm. 6.4 is given in Appendix. 8.24. The revenue maximizing
technique introduced in Sec. 6.3 can still be applied here, since the basic process of
the auction is the same with SWMOA.
Algorithm 12 Online Auction for Nonlinear Operational Cost
1: if user n ∈[N] arrives then
2:
Find the bundle β with the largest utility: bn,β −ˆ
pn,β, by solving the
multi-commodity ﬂow problem (6.4) for each VM scheme.
3:
Set the value of un according to (6.9)
4:
if un = 0 then
5:
Reject user n, i.e., set xn,β = 0, ∀β ∈B
6:
else
7:
Serve user n with bundle β, i.e., set xn,β = 1, and xn,β′ = 0, ∀β′ ̸= β
8:
Charge payment ˆ
pn,β
9:
Update the value of yr(t), pr(t)
Theorem 6.4. The online auction mechanism Alg. 12 is truthful and individually
rational, never violates the resource constraints, runs in polynomial time in each
round, and achieves O(log µ)-competitive ratio in social welfare.
6.5
Performance Evaluation
We evaluate our online auction mechanisms using data collected on the Google clus-
ter [6]. We translate each job containing multiple tasks, each demanding diﬀerent
amounts of resources, in the Google cluster data into a VC request with VMs of
diﬀerent resource compositions. There are R = 3 types of computational resources
(CPU, RAM and disk), and P = 12 data centers connected following the topology
of Google data center network [43]. For each user, Vn is randomly chosen within
[2, 30]. We generate 5 to 10 schemes for each user, placing VMs at randomly chosen
data centers in each scheme. The default system span is T = 100. Users arrive fol-
lowing a Poisson distribution with parameter λ = 50, and their VC usage durations
are randomly chosen within [5, 10]. The amount of resources consumed by a VM
an
v,r is set according to the resource demand of each task in Google cluster data.
The traﬃc between VMs Γn
v,v′ is randomly generated within a range [0, 1]. The


Chapter 6. Mechanism for Dynamic Virtual Cluster Provisioning
97
overall resource capacities, ˆ
A, ˆ
d, is set to be approximately [0.2, 0.5] fraction of the
respective overall user resource demand, and randomly distributed onto data cen-
ters and links. The operational cost is randomly generated within range [0.03, 0.1].
The valuation bn,β is uniformly randomly chosen within the interval decided by the
constant F, whose default value is 10. We repeat each experiment for 50 times to
obtain the average results.
6.5.1
Evaluation of SWMOA
We ﬁrst compare our online algorithm SWMOA, Alg. 10, with the oﬄine optimum.
We calculate the oﬄine optimal social welfare by solving (6.1) exactly, and divide
it by the social welfare achieved by SWMOA to obtain the ratio, under diﬀerent
numbers of users and diﬀerent values of F. Recall that the parameter µ in our
theoretical competitive ratio is related to F, i.e., µ = 2MTF + 1. Fig. 6.2 shows
the ratio is smaller for a larger number of users N. This is because the more users
in the system, the less impact a bad decision for a previous user has on later users.
In contrast, less users make it more diﬃcult to achieve optimal allocation since
each decision involves more resources. We can also see that for larger values of
F, the performance ratio is larger. The theoretical competitive ratio, O(MTF),
implies such a result.
Larger F represents a larger range of user valuation.
In
online resource allocation, serving one user means that we may need to reject some
user in the future, whose valuation may be much higher when F is larger, leading
to low competitiveness of the online mechanism. Fig. 6.3 shows that the ratio is
larger when the number of data centers P is larger, which is consistent with our
theoretical competitive ratio as well, since M = PR + |E|. Intuitively, more data
centers make the allocation harder since more diﬀerent types of resources need to
be considered.
Next we compare SWMOA with a heuristic adaptive algorithm TV-VNE in [16], by
comparing the social welfare ratio they each achieve when comparing to the oﬄine
optimum. The design idea of TV-VNE is to provision VCs according to the amount
of consumed resources and always try to ﬁnd a load-balancing allocation.
The
core technique used by TV-VNE is a heuristic weighted function which achieves a
tradeoﬀbetween the computational resource usage and the bandwidth usage. When
a new user request arrives, TV-VNE chooses an allocation and routing plan which
maximizes this function, which intends to balance the usage of all data centers and
link bandwidths. This idea is similar to our online algorithm in some sense, but in a
heuristic way. Fig. 6.4 shows that our algorithm consistently outperforms TV-VNE.
We further observe that the performance of TV-VNE does not improve much for
larger N, reﬂecting that its heuristic allocation cannot eﬃciently adjust resource
utilization with the increase of users. In contrast, SWMOA performs better when
the number of user is large, which makes it more suitable for cloud systems at a
large scale. In Fig. 6.5, we prepare two special scenarios: computation intensive
(CI-Case) and bandwidth intensive (BI-Case). In the computation intensive case,
computation resource demands of VCs are 2 times larger than the default setting.
In the bandwidth intensive scenario, bandwidth demands are 2 times larger than the


Chapter 6. Mechanism for Dynamic Virtual Cluster Provisioning
98
300
400
500
600
700
1.5
1.8
2.1
2.4
2.7
3
Number of users (N)
Offline/Online Social Welfare Ratio
 
 
F=6
F=8
F=10
Figure 6.2: Performance of
SWMOA under diﬀerent val-
ues of F
300
400
500
600
700
1.5
1.8
2.1
2.4
2.7
3
Number of users (N)
Offline/Online Social Welfare Ratio
 
 
P=6
P=9
P=12
Figure 6.3: Performance of
SWMOA under diﬀerent val-
ues of P
300
400
500
600
700
2
2.5
3
3.5
4
Number of users (N)
Offline/Online Social Welfare Ratio
 
 
SWMOA,F=6
TV−VNE,F=6
SWMOA,F=8
TV−VNE,F=8
Figure
6.4:
Comparison
between SWMOA and TV-
VNE
300
400
500
600
700
0
5
10
15
x 10
4
Number of users (N)
Online Social Welfare
 
 
SWMOA,CI−Case
TV−VNE,CI−Case
SWMOA,Default
TV−VNE,Default
SWMOA,BI−Case
TV−VNE,BI−Case
Figure
6.5:
Comparison
between SWMOA and TV-
VNE under special scenarios
default. We see that SWMOA outperforms TV-VNE in all cases. The advantages
in the special cases are larger than in the default case, implying that our algorithm
better handles extreme VC requests by dynamically adjusting to user demands.
6.5.2
Evaluation of PRMOA
We ﬁrst compare PRMOA in Alg. 11 with the oﬄine optimum.
We divide the
oﬄine optimal social welfare by the revenue achieved with PRMOA to calculate
the performance ratio. Fig. 6.6 shows the performance of PRMOA under diﬀerent
values of F. The trends are similar with those for SWMOA: larger N, smaller F
bring better performance. This is not a coincidence because PRMOA uses SWMOA
as its foundation, and in half of the time adopts the same payment and allocation.
In the other half of the time, the success of the attempt to “guess” user’s valuation
only depends on the random variation, and is not aﬀected by these parameters.
Next we compare the provider revenue achieved by PRMOA and TV-VNE. However,
TV-VNE is just a VC provisioning algorithm without pricing. Fortunately, it is easy
to design a payment for it according to the “unit virtual cost” used in the TV-VNE


Chapter 6. Mechanism for Dynamic Virtual Cluster Provisioning
99
300
400
500
600
700
3
3.6
4.2
4.8
5.4
6
Number of users (N)
Optimal Social Welfare/Online Revenue
 
 
F=6
F=8
F=10
Figure 6.6: Performance of
PRMOA under diﬀerent val-
ues of F
300
400
500
600
700
4
5.4
6.8
8.2
9.6
11
Number of users (N)
Optimal Social Welfare/Online Revenue
 
 
PRMOA,F=6
TV−VNE,F=6
PRMOA,F=8
TV−VNE,F=8
Figure
6.7:
Comparison
between PRMOA and TV-
VNE
300
400
500
600
700
4
4.8
5.6
6.4
7.2
8
Number of users (N)
Offline/Online Social Welfare
 
 
F=6
F=8
F=10
Figure 6.8: Performance of
the non-linear cost auction
300
400
500
600
700
2
2.5
3
3.5
4
Number of users (N)
Offline/Online Social Welfare Ratio
 
 
SWMOA,F=6
SWMOA−DR,F=6
SWMOA,F=8
SWMOA−DR,F=8
Figure 6.9:
Performance
improvement of the dynamic
routing
algorithm, which is the only payment rule making the mechanism truthful. Fig. 6.7
shows that PRMOA performs better in all scenarios. The advantages are even larger
than what we show when comparing SWMOA with TV-VNE. This validates the
eﬃciency of our algorithm speciﬁcally optimized for chasing high revenue.
6.5.3
Evaluation of the Non-Linear Cost Auction
We evaluate the performance of the online auction designed for non-linear opera-
tional cost in Sec. 6.4. We use νr = 1 (quadratic cost), and the coeﬃcients hr are
randomly generated within range [0.03, 0.1]. We compare the performance of the
online auction with the oﬄine optimal social welfare and calculate the performance
ratio, which is shown in Fig. 6.8. Generally speaking, the performance under non-
linear cost is not as good as the performance under linear cost. This is consistent
with the intuition that non-linear cost is harder to deal with. Other features are all
the same with SWMOA, since the underlying algorithm is a similar process with
SWMOA.


Chapter 6. Mechanism for Dynamic Virtual Cluster Provisioning
100
6.5.4
Evaluation of Dynamic Routing
We evaluate the performance of the dynamic routing presented in Sec. 6.2.
In
Fig. 6.9 we can see that the performance improvement is small. Because this intu-
itive improvement only optimizes the bandwidth resource allocation, but does not
change the allocation of computational resources. Since a VC request needs both
types of resources, improvement only on bandwidth does not improve the system as
a whole by a lot when the bottleneck of provisioning more VCs is the computational
resources.
6.6
Summary
This chapter presents eﬃcient and competitive online auction mechanisms for on-
demand provisioning and pricing of virtual clusters, taking both computational
resources and communication resources into consideration. First, we design an on-
line social welfare maximizing auction, SWMOA, which sets a carefully designed
virtual unit cost for each type of resources on the go, and decides winners and bid-
independent payments based on the total resource cost. Next, we design a revenue
maximizing online auction, PRMOA, which runs SWMOA as a basis, and boost-
s payments following a carefully designed random distribution, to pursue higher
revenue.
The mechanisms are truthful, individually rational, time-eﬃcient, and
guarantee a (2 log µ + 1) competitive ratio in social welfare and a O(log µ) competi-
tive ratio in provider revenue in expectation, respectively. Our extensive simulation
studies validate our theoretical analysis, and show good performance of our mech-
anisms in various scenarios.


Chapter 7
Conclusions and Future Work
In this thesis, we investigate online mechanisms for dynamic resource provisioning
in cloud computing under four scenarios:
(1) For the heterogeneous VM allocation problem, where the provider dynamically
allocating diﬀerent types of VMs to users, we propose RSMOA, which can also be
applied to other related models. For example, the temporal domain can be both
ﬁnite and inﬁnite, continuous and slotted. Users valuation can be modiﬁed at any
time during the auction. RSMOA just treats them as new incoming users, whose
utility may decrease. RSMOA represents the ﬁrst online combinatorial auction for
dynamic cloud resource provisioning with guaranteed revenue and social welfare.
It advances the state-of-the-art of cloud auction design in that all previous VM
auction mechanisms either have ﬁxed VM provisioning, or focus on one performance
metric only. Our online auction, RSMOA, comprises of two components. First we
design an online mechanism based one a set of necessary conditions of the truthful
property. Second, we derive the closed form of the critical pricing curve from a
threat-based strategy. RSMOA guarantees a competitive ratio of O(ln p) where p
is the ratio between the upper and lower bounds of users’ marginal valuation of
any type of resource. Trace-driven simulation shows RSMOA achieves near-optimal
performance in practical scenarios.
(2) For the multiple user bundles with heterogeneous VM dynamic provisioning
problem, where cloud users bid for multiple bundles and each of which contains a
combination of diﬀerent types of VMs, we propose the ﬁrst online combinatorial
auction for the VM market in cloud computing. It advances the state-of-the-art
of cloud auction design in that all previous VM auction mechanisms are either
one-round only, or simplify VMs into type-oblivious good (and hence circumvent
the challenge imposed by combinatorial auctions). Our online auction comprises
three components. First, we design an intuition-driven primal-dual algorithm for
translating the online social welfare optimization problem into a series of one-round
optimizations, incurring only a small additive penalty in competitive ratio. Second,
we apply a randomized auction sub-framework that can translate a cooperative
approximation algorithm to the one-round optimization into an auction. Third,
101


Chapter 7. Conclusions and Future Work
102
we apply a greedy primal-dual algorithm that approximates the one-round social
welfare optimization. We also propose two extensions to the basic online auction
framework, to further improve the competitive ratio. Our overall online VM auction
guarantees a theoretical competitive ratio close to 3.30 in typical scenarios, and its
design may shed light on similar auction problems in related settings.
(3) For the on-demand bandwidth allocation problem, where the provider serves
users’ data transition tasks through eﬃcient traﬃc scheduling, we present a novel
Shapley value based auction mechanism for dynamic pricing of inter-datacenter on-
demand bandwidth. Targeting truthfulness, individual rationality, budget balance
and competitiveness in social welfare, our mechanism design is divided into two
steps: we ﬁrst propose the oﬄine version of the auction, which exploits the Shapley
values in admission control and payment computation together with an optimal
traﬃc scheduling algorithm, achieving all four desired properties; we then design the
online auction approximating the oﬄine mechanism, retaining the nice properties.
(4) For the dynamic Virtual Cluster provisioning problem, where the provider re-
serves VCs for users, including both computational resources of VMs and the exclu-
sive bandwidth among VMs, we propose two eﬃcient and competitive online auction
mechanisms. First, we design an online social welfare maximizing auction, SWMOA,
which sets a carefully designed virtual unit cost for each type of resources on the
go, and decides winners and bid-independent payments based on the total resource
cost. Next, we design a revenue maximizing online auction, PRMOA, which runs
SWMOA as a basis, and boosts payments following a carefully designed random
distribution, to pursue higher revenue. The mechanisms are truthful, individual-
ly rational, time-eﬃcient, and guarantee a (2 log µ + 1) competitive ratio in social
welfare and a O(log µ) competitive ratio in provider revenue in expectation, respec-
tively. Our extensive simulation studies validate our theoretical analysis, and show
good performance of our mechanisms in various scenarios. We believe the technique
used in this work can be generalized to a rich class of combinatorial auctions, other
than VC auctions.
I started studying auction mechanisms in cloud computing market 4 years ago.
After these years, many auction designs has been proposed in literature, some are
well designed and are promising in practicing. However, auction is still not widely
applied in industry. This situation is a little frustrating for researchers in this ﬁeld,
and shows that the challenges of applying auction is more than we thought.
I
guess one important reason is that the providers hate uncertainty in their revenue
while auction mechanism does not bring attractively more proﬁt.
For example,
in the ﬁeld of selling air tickets and hotel rooms, auction is also thought to be
a promising mechanism, theoretically. However, very few providers has adopted
auction mechanism in their selling.
It will be our future work to study the following topics:


Chapter 7. Conclusions and Future Work
103
(1) We plan to extend our work to more practical model settings, especially by
considering the problem of VM-packing on physical server level. Currently in our
models we suppose the cloud provider or the datacenter can assemble VMs as long as
there are idle CPU/RAM/disk resources. But in reality, the provider also needs to
consider the VM-packing on server level, since resources on diﬀerent servers cannot
be packed into a VM. For example, in our current model, when there is a idle CPU
core, 1GB free RAM and 1TB free disk space in some data center, we will suppose
that a VM can be assembled in that data center. However, these three types of idle
resources may be existing on three diﬀerent servers, and cannot be used to create a
VM directly. We may need to migrate other running VMs strategically in order to
utilize these resources.
If we consider the two-level resource allocation in our model, i.e., managing servers
in a datacenter, and consider VM-packing on each server, we could also provide
better answer to the energy management problem in datacenters, as well as other
interesting problems. Since we can turn oﬀ(or hibernate) the idle servers with no
VM running on to save the energy, with a server-level VM-packing model, we can
allocate the resources on a server level, leading to a more precise solution for the
management of energy overhead.
To formulate VM packing problems on server level, we need to design a two-level
knapsack problem model. Our current model is one-level knapsack: the resource
pool is like a knapsack, and we can put VMs into it until its capacity is exceeded.
When we consider servers in our model, it becomes two-level: one data center
contains several servers, and each server is a knapsack with capacity, while the in-
bound and out-bound bandwidth is limited for each data center. We also suppose
that VM migration within one data center is allowed, so that the provider can
release idle resources by migrating some VMs properly. We are seeking for new
mathematical tools to tackle with such a model, since the two-level formulation
problem will have a complicated dual problem form, which is diﬃcult to reach an
optimization algorithm using our previous techniques.
(2) Some impossibility results may complement results in our work, for instance,
lower bounds on the competitive ratio in either revenue of social welfare.
The
competitive ratio presented by our theoretical analysis, e.g., O(ln p) or O(log µ) (in
Chapter 3 and Chapter 6), is the performance of our online algorithms compared
with the oﬄine optimum, which can only be achieved with future information.
These theoretical results may give readers a false impression that our algorithms
are multiples times worse than the optimal solution in performance. However, the
upper bounds on the competitive ratio cannot tell us anything about the comparison
against the optimal online algorithm.
So we will looking for some lower bound
results, which can help us assess the performance of our algorithms with respect to
the online optimal algorithms from one aspect.
There does not exist much impossibility results for cloud auctions in literature,
mainly because these results are diﬃculty to achieve for complicated models. One
possible method to prove lower bound is using a game theoretic framework, regard-
ing the provider and the adversary as two players in a zero-sum game. If we can


Chapter 7. Conclusions and Future Work
104
deduce both players’ optimal strategy, we can have a lower bound on the perfor-
mance of the optimal online algorithm.
(3) We also plan to consider auction mechanisms for cloud federations, or other
forms of multi-provider model. Our current work only consider one cloud provider
facing many users. But in the market there are many providers competing with
each other, and cloud users choose among them according to their service and
price. If we can take the behavior of users and the interaction among providers into
consideration, our model could better reﬂect the real cloud market activities. The
emerging federated cloud paradigm allows this kind of sharing of disparate cloud
services from diﬀerent cloud providers.
There have been plenty of study regarding to the architecture of the federated cloud
[58], but not much on the market mechanism of the federated cloud. We are going to
explore the impact of selﬁshness of cloud providers on the whole federated system,
and the users’ selection strategy in response. A Nash bargaining framework may
be useful to this end.
(4) More bidding language designing is desirable in auctions for VC provisioning.
Currently our model requires users to specify the placement of VMs. There are
exponentially numbers of placement combinations, so the users can only select some
of the placement scheme according to their needs. We plan to design a bidding
language to allow users to deﬁne a valuation function about the VM placement,
so that they no longer need to enumerate each possible placement schemes.
A
properly designed bidding language can provide a more ﬂexible bidding interaction
with the provider, while still accurately reﬂects users’ preferences. In order to design
a desirable bidding language, we need to consider the tradeoﬀbetween the concise
form of the bidding language and the variability of the bidding language.
(5) We are going to add collusion-resistant mechanism to our auction design. Cur-
rently we suppose that each user makes bidding decisions, or design their auction
strategy, independently. But in real world, users can collude with each other, de-
sign a strategy, and act together to make proﬁt. In fact, most truthful auctions are
vulnerable towards collusion bidding, and the provider may lose a large part of their
revenue because of it, which is conﬁrmed both by theoretical analysis and exper-
iment. Some collusion-resistant mechanisms has been proposed in literature [74],
and can be applied to almost any other auction mechanisms with minor changes.
However, these improvements all have their own drawbacks which needs to be con-
sidered in the background of the speciﬁc application.
(6) We will consider better traﬃc planning algorithm in bandwidth auctions. In
Chapter 5, our proposed online traﬃc scheduling algorithms are quite simple, and
do not achieve a satisfying performance. We will also try to apply the results in
bandwidth auctions to the designing of VC auctions. Instead of treating the band-
width resources as just another type of computational resources, we will consider
more special characteristics of the bandwidth resources and improve the modeling
in the VC auctions.


Chapter 7. Conclusions and Future Work
105
(7) We will consider VM multiplexing in our formulation. VM multiplexing has been
widely used in data centers, since it improves the utilization eﬃciency of resources.
However, the modelling of the constraints of multiplexing is a challenge.




Chapter 8
Appendix
8.1
Proof of Theorem 3.4
Proof. First we argue that bid-independent is necessary for truthfulness in VM
valuation. We do this by induction on time t. The payment at the beginning of
users’ arrival tn should be independent of users’ bids bn(). Otherwise, there are
two diﬀerent bids bn(), b′
n() such that the bundles allocated at time tn are the same
but the payments are correspondingly πn(tn) > π′
n(tn). Then the user with real
valuation bn() can make a false bid b′
n() and increase his utility at time tn. Then
he terminates the VMs in a very short time (recall that the user can arbitrarily
decides the leaving time without notifying the provider in advance), and his total
utility over the staying time is larger than using truthful bid, which contradicts
truthfulness. Next we argue that for any t > tn, the payment should still be bid-
independent. Similarly there are bids bn() ̸= b′
n() which leads to the same allocating
bundles d(t) during time [tn, t]. By induction, the payments before t are the same
for both bidders. However the payment at time t is diﬀerent πn(t) > π′
n(t). Again
the bidder with valuation bn() can bid b′
n() and leave the auction at a short time
after t with higher total utility.
Second we argue that the larger bundle should never have a lower price. Otherwise,
consider bids bn(), b′
n() which lead to two diﬀerent bundles d′
n ≥dn, with payments
πn(dn, t) > πn(d′
n, t). But the user’s valuation increases with bundle size: bn(d′
n) ≥
bn(dn) since the non-negative marginal valuation. Then the user can modify his
truthful valuation bn() to a false bid b′
n() to increase his utility.
Finally we argue that the utility-maximized allocation is also a necessary condition.
We have proved that the provider must calculate πn(dn) without the knowledge of
bn(). If the allocation decision dn does not maximize user’s utility, which means
there is another bundle d′
n leading to higher utility but not chosen. Then the user
can modify the bid to achieve the better allocation result d′
n. Since the payment is
independent of the user’s bid, he can successfully achieve the higher utility.
107


Chapter 8. Appendix
108
8.2
Proof of Theorem 3.6
Proof. First, the utility-maximized allocation rule guarantees individual rationality.
Next we prove the truthfulness in VM valuation: Suppose the user n’s true valuation
is bn(), and under truthful bid, his bundle at time t is d∗
n(t), with utility bn(d∗
n(t))−
πn(d∗
n(t), t). Assume he makes a false bid b′
n() for his bidding bundles, and gets
bundle d′
n(t). Then the new utility is bn(d′
n(t)) −πn(d′
n(t), t), which is not larger
than the utility under truthful bid, since d∗
n(t) maximizes his utility at time t. So
the total utility over time [tn, t] is maximized under truthful valuation.
Finally, the
user will not modify the bidding bundle to some bundle he does not require, unless
it contains more instances than his originally required bundle. And according to the
bundle-monotonic property, the price for such a bundle is higher than the original
bundle. So the user still have no incentive to bid a untruthful bundle.
Finally we prove that the user cannot gain more utility by delaying his bidding time.
Suppose user n’s real arriving time is tn, with bundle d∗
n(t) and utility b(d∗
n(t)) −
π(d∗
n(t), t). If he delays the bid to a later time t′
n > tn. According to the time-
monotonic property, for any bundle dn(t), his payment is no less than the payment
under no-delaying bid: π′(dn(t), t) ≥π(dn(t), t). So the maximum utility at time t
with delaying bid is not larger than the utility with no-delaying bid:
max
dn∈D{b(dn(t)) −π′(dn(t), t)}
≤
max
dn∈D{b(dn(t)) −π(dn(t), t)}
≤
b(d∗
n(t)) −π(d∗
n(t), t)
(8.1)
So the total utility with no-delaying bid is larger than the utility with delaying bid
during [t′
n, tn].
8.3
Proof of Theorem 3.7
Proof. Alg.
1 has bid-independent, bundle-monotonic, time-monotonic payment
and utility-maximized allocation rule.
So Thm.
3.6 has shown that it achieves
truthfulness in VM valuation, truthfulness in demand arrival time and individual
rationality. We only need to prove the non-decreasing utility. Notice that a new
user arrival does not aﬀect the existing users, since the payment of old users is
based on smaller value of x on P(x), and their priorities are not changed. So we
only consider the case when user n′ leaves the auction. For the same reason, all
the users n < n′ are not aﬀected. For other users ∀n > n′, his payment function
lowers on any bundle, compared with before the adjustment, because his priority is
promoted. Suppose the payment before adjustment is π(dn), and the payment after
adjustment is π′(dn). Then we have ∀dn, π′(dn) ≤π(dn). Assuming his previous
bundle is d∗
n, and becomes d∗∗
n
after adjustment. User n’s utility after adjustment


Chapter 8. Appendix
109
is:
b(d∗∗
n ) −π′(d∗∗
n )
≥
max
dn∈D{b(dn) −π′(dn)}
≥
max
dn∈D{b(dn) −π(dn)}
=
b(d∗
n(t)) −π(d∗
n)
(8.2)
, which implies non-decreasing utility.
8.4
Derivation of Q(z), P(x) and c
Proof. Taking diﬀerential on both side of (3.9) gives us: A/c = −pQ′(z) + V ′(z).
Then substitutes V ′(z) here by (3.8): A/c = (z −p)Q′(z). And we have determined
Q(cp) = 0 in (3.7). So we derive the expression of Q(z) in (3.11). P(x) is simply
derived by calculating the inverse function of Q(z).
Next we use the condition in (3.10): Q(p) = A/c · ln(
p−p
(c−1)p) = A. So ec = p−1
c−1,
which is exactly (3.13).
8.5
Proof of Theorem 3.8
Proof. We compare the revenue uP (t) at any time t. For user n let the quantity
of resources allocated before him to be xold, and the quantity of his bundle to be
xn = x(dn(t)). The marginal price after him is Pn = P(xold + xn). Let n∗be the
last user in τ that receives a non-empty bundle. Let b′
n(x) denote the marginal
valuation of user n’s bid: b′
n(x) = ∂bn(d)
∂x
. For all n and x > xn, we have b′
n(x) ≤Pn.
Additionally, for all n1 < n2 ∈τ, Pn1 ≤Pn2. So every user in τ values additional
resources ∆x by no more than Pn∗∆x.
Since VCG auction maximizes user’s valuation, there exist a user n′, such that
the quantity allocated under VCG xn′,vcg is larger or equal to xn′, which indicates
b′
n′(xn′,vcg) ≤b′
n′(xn′) ≤Pn∗. Notice VCG maximizes total valuation, so for all
n ∈τ and x > xn,vcg, b′
n(x) ≤Pn∗. So we conclude that uPvcg ≤A · Pn∗. According
to the property of Q(z), the online revenue is A · Pn∗/c. Since at any time, the per
time unit revenue has competitive ratio c, the total competitive ratio is also c if the
oﬄine VCG result does not satisfy the non-decreasing utility at each user. Adding
the non-decreasing utility requirement decreases the actual performance of the VCG
auction in our model, thus the competitive ratio is c in terms of revenue.


Chapter 8. Appendix
110
8.6
Proof of Theorem 3.9
Proof. Suppose the set of user bids is σ. Consider a new set of bids σ∗by modifying
each user’s marginal valuation:
b′∗
n (x) =
(
Pn
if x ≤xn
b′
n(x)
if x > xn
(8.3)
The allocations for σ and σ∗are the same because we only modify the bids at parts
that are not allocated. Since b′
n(x) ≤Pn ≤Pn∗, we have Svcg ≤A · Pn∗. Note the
property of threat-based rule: S(σ∗) ≥uP (σ∗) = Pn∗/c. So S(σ∗) ≥Svcg(σ∗)/c.
In order to utilize the above result on σ∗, we need to modify σ to σ∗, in several
steps, and each step modiﬁes one user’s bid. For user n, if b′
n(x) > b′∗
n (x) at x,
then it is decreased to the target. Let σn be the bidding set after n modiﬁcations.
The online auction is aﬀected on the whole decrease part on the valuation curve, so
S(σn) −S(σn+1) ≥Svcg(σn) −Svcg(σn+1). Adding these inequalities together:
S(σ)
≥
(Svcg(σ) −Svcg(σ∗))/c + S(σ∗)
(8.4)
≥
Svcg(σ)/c
So the total social welfare over a period of time is also lower-bounded by ratio c.
8.7
Proof of Theorem 4.2
We prove the correctness and the competitiveness of Aonline by proving three claims:
1. At the end of the algorithm, it produces feasible solution for dual (4.2).
2. Let P (t) be the value of the objective function in (4.1) after t-th iteration,
∆P (t) = P (t)−P (t−1), the same for ∆D(t) in dual (4.2). Then Aonline satisﬁes
∆D(t) ≤(ν +
1
γ−1)∆P (t), at any round.
3. The algorithm produces an almost feasible solution for primal (4.1). Speciﬁ-
cally, its outputs y(t)
n,k satisfy (4.1a), (4.1c) and (4.1d). For constraint (4.1b),
we achieve a slightly weaker property : For all user n ∈[N], P
t∈[T]
P
k∈[K] b(t)
n,ky(t)
n,k ≤
Bn(1 + Bmax)
Proof of (1):
Since w(t)
n,k ≥b(t)
n,k(1 −x(t−1)
n
) no matter whether x(t−1)
n
< 1 or
x(t−1)
n
≥1, constraint (4.4a) guarantees s(t)
n + P
r∈[R]
P
q∈[Q] c(t)
n,k,rz(t)
q,r ≥b(t)
n,k(1 −
x(t−1)
n
) Also notice x(t)
n is non-decreasing with t, so (4.2a) holds.


Chapter 8. Appendix
111
Proof of (2):
At time t, ∆P (t) = P
n∈N b(t)
n,kn. Substitute P
n∈N b(t)
n,kn(1 −x(t−1)
n
)
for p and we get claim (2).
Proof of (3):
Constraints (4.1a), (4.1c), (4.1d) are guaranteed by the constraints
in (4.3). In order to analyze the property about constraint (4.1b), we prove the
following:
x(t′)
n
≥
1
γ −1
 
γ
Pt′
t=1
P
k∈[K] b(t)
n,ky(t)
n,k
Bn
−1
!
, 0 ≤t′ ≤T
(8.5)
We prove (8.5) by induction. (8.5) holds for t′ = 0 apparently. Suppose it holds
for t′ −1, then for t′: If n /
∈N, the inequality holds since both sides are still
the same value at time t′ −1.
If n ∈N: x(t)
n
=
1
γ−1(γ
Pt′−1
t=1
P
k∈[K] b(t)
n,ky(t)
n,k
Bn
(1 +
b(t)
n,kn
Bn ) −1) Comparing this with our target (8.5), obviously we only need to show:
1 +
b(t)
n,kn
Bn
≥γ
b(t)
n,kn
Bn . We utilize the inequality:
ln(1+x)
x
≥ln(1+y)
y
, ∀0 ≤x ≤y ≤1
Since
b(t)
n,kn
Bn
≤Bmax, we prove (8.5). Now we utilize the inequality (8.5) to prove
claim (3). For some user n, suppose t′ is the ﬁrst time Pt′
t=1
P
k∈[K] b(t)
n,ky(t)
n,k ≥Bn.
Then by (8.5), x(t′)
n
≥1. The algorithm never gives user n any new bundles once
xn ≥1, since the weight w(t)
n,k in Around will be set to 0. So PT
t=1
P
k∈[K] b(t)
n,ky(t)
n,k =
Pt′
t=1
P
k∈[K] b(t)
n,ky(t)
n,k.
We know t′ is the ﬁrst time user n’s total winning bids
exceeding its budget Bn, and ﬁnishes the proof of claim (3).
Finally we put the above 3 claims together and calculate the actual total social
welfare. Since the increment of valuation is the minimum between user’s valuation
and his remaining budget, total social welfare should be at least P (T)/(1 + Bmax).
By claim 2: ∆D(t) ≤(ν +
1
γ−1)∆P (t), and recall P (0) = D(0) = 0 , we have
D(T) ≤(ν+
1
γ−1)P (T). Thus the social welfare is at least D(T)/[(1+Bmax)(ν+
1
γ−1)].
By duality, the approximation ratio of Aonline is (1 + Bmax)(ν +
1
γ−1) .
8.8
Proof of Theorem 4.3
Suppose user n’s bid is b(t)
n,k, then we can calculate the value of w(t)
n,k by deﬁnition. We
omit this calculation process in our proof and directly assume that user n submits
bid w(t)
n,k and other users n′ ̸= n submit bids w(t)
n′,k. Then according to the payment
rule Π(t)
n , user n’s utility can be calculated as: u(t)
n = P
n∈[N]
P
k∈[K] y(t)F
n,k w(t)
n,k−e
V (t)
−n.
y(t)F
n,k
is calculated by maximizing P
n,k y(t)
n,kw(t)
n,k, which is the total social welfare.
So P
n,k y(t)F
n,k w(t)
n,k is greater than e
V (t)
−n because the latter is the maximum social
welfare with the same amount of resources and one less user. So u(t)
n ≥0. Next we


Chapter 8. Appendix
112
compare the utility under the truthful bid and a false bid. Suppose user n submits
a false bid e
w(t)
n,k. Then the fractional allocation decision becomes e
y(t)F
n,k . His utility
under false bid is calculated similarly:
e
u(t)
n =
X
k∈[K]
e
y(t)F
n,k w(t)
n,k −e
V (t)
−n +
X
n′̸=n
X
k∈[K]
e
y(t)F
n′,k w(t)
n′,k
The diﬀerence of these two utilities is:
u(t)
n −e
u(t)
n =
X
n∈[N]
X
k∈[K]
y(t)F
n,k w(t)
n,k −
X
n∈[N]
X
k∈[K]
e
y(t)F
n,k w(t)
n,k
Again y(t)F
n,k maximizes social welfare, so P
n,k y(t)F
n,k w(t)
n,k ≥P
n,k e
y(t)F
n,k w(t)
n,k, and u(t)
n −
e
u(t)
n ≥0.
8.9
Proof of Theorem 4.4
We discuss the problem of round t in this proof, so we omit the superscript (t) in this
section. First we show the solution is feasible for the primal (4.3). Constraints (4.3a)
and (4.3c) are obviously never violated. We study the constraint (4.3b). Suppose
in iteration τ, wn∗,k(n∗) is the ﬁrst bid that violates constraint (4.3b) when added
to the allocation. This means ∃q ∈[Q], r ∈[R] such that P
n∈N cn,k(n),r,q ≤Aq,r <
cn∗,k(n∗),r,q + P
n∈N cn,k(n),r,q. We know Cq,r ≥cn∗,k(n∗),r,q, so P
n∈N cn,k(n),r,q ≥
Aq,r −Cq,r. So
P
n∈N cn,k(n),r,q
Aq,r−Cq,r
≥1. And Aq,rzτ−1
q,r
= z
P
n∈N cn,k(n),r,q
Aq,r−Cq,r
base
≥zbase, where
zτ−1
q,r
represents the value of zq,r before iteration τ. This implies that the stopping
condition of the iteration is satisﬁed before iteration τ, and the algorithm should
be stopped before wn∗,k(n∗) is chosen. So constraint (4.3b) is never violated. The
feasibility of the dual (4.4) is more complicated, because the solution is not always
feasible during the iterations. However the dual variables are feasible after scaling
down, which is described in the following lemma.
Lemma 8.1. If (sτ−1
n
, zτ−1
q,r ) is the dual solution before iteration τ, then (sτ−1
n
, ϵf(z, n∗, k(n∗))zτ−1
q,r )
is a feasible solution to the dual (4.4), where f(z, n, k) is deﬁned as f(z, n, k) =
wn,k/ P
q∈[Q]
P
r∈[R] cn,k,r,qzq,r, and z is the set of zτ−1
q,r , n∗is the selected user in
iteration τ.
Proof. We have ∀n ∈[N], k ∈[K], wn,k(n) ≥wn,k. So sn ≥wn,k, ∀n ∈N, k ∈
[K], which implies that constraint (4.4a) is satisﬁed for ∀n ∈N. Next for user-
s not in N.
Note that we choose the n∗by choosing the maximum ratio of
wn,k and a summation. Therefore, f(z, n∗, k(n∗)) ≥
wn,k(n)
P
q∈[Q]
P
r∈[R] cn,k(n),r,qzτ−1
q,r , and,


Chapter 8. Appendix
113
f(z, n∗, k(n∗)) P
q∈[Q]
P
r∈[R] cn,k(n),r,qzτ−1
q,r
≥wn,k(n), ∀n /
∈N.
Since ϵcn,k1,r,q ≥
cn,k2,r,q, ∀k1, k2 ∈[K], n ∈[N], r ∈[R], q ∈[Q]. We can further get: ∀n /
∈N, k ∈
[K], ϵf(z, n∗, k(n∗)) P
q∈[Q]
P
r∈[R] cn,k(n),r,qzτ−1
q,r
≥wn,k. Thus (sτ−1
n
, ϵf(z, n∗, k(n∗))zτ−1
q,r )
is feasible to dual (4.4).
Now we are ready to prove the ﬁnal conclusion of Thm. 4.4. Let dτ
1 = P
n∈[N] sn,
dτ
2 = P
q∈[Q]
P
r∈[R] Aq,rzτ
q,r. Let d∗be the optimal solution to the dual (4.4). Let
(nτ, kτ) be the bundle selected in iteration τ. Totally ω iterations are executed.
Case 1: Around stops at iteration ω where N = [N] and P
q∈[Q]
P
r∈[R] Aq,rzq,r <
zbase. Note that (sn, zq,r = 0) is a feasible solution to the dual, and the d = p under
this solution. So the solution under this case is optimal.
Case 2: Around stops at iteration ω where dω
2 ≥zbase, and ∃τ ≤ω, such that
λ ≥d∗/dτ−1
1
. Then it is a λ-approximation solution, since dτ−1
1
= pτ−1 and dτ
1 is
non-decreasing of τ.
Case 3: Around stops at iteration ω where dω
2 ≥zbase, and λ < d∗/dτ−1
1
, ∀τ ≤ω. For
any iteration τ, dτ
2 = P
q∈[Q]
P
r∈[R] Aq,rzτ
q,r. Deﬁne δ = ( Aq,r
Cq,r −1)(z
1/( Aq,r
Cq,r −1)
base
−1.
Then dτ
2 = P
q∈[Q]
P
r∈[R] Aq,rzτ−1
q,r (1 +
δ
Aq,r
Cq,r −1)
(
cnτ ,kτ ,q,r
Aq,r−Cq,r ). We utilize the inequality:
(1 + a)x ≤1 + ax, ∀x ∈[0, 1], dτ
2 ≤P
q∈[Q]
P
r∈[R] Aq,rzτ−1
q,r (1 +
δ
Aq,r
Cq,r −1 ·
cnτ ,kτ ,q,r
(Aq,r−Cq,r)).
Let ∆= maxq∈[Q],r∈[R]
δAq,r
Aq,r−Cq,r , then: dτ
2 ≤dτ−1
2
+∆P
q∈[Q]
P
r∈[R](cnτ,kτ,q,rzτ−1
q,r ).
Note that
δAq,r
Aq,r−Cq,r is non-increasing of Aq,r
zq,r . So
δAq,r
Aq,r−Cq,r reaches its maximum
when
Aq,r
zq,r
= Cmin.
Thus we substitute Cmin for
Aq,r
zq,r in the deﬁnition of δ ,
and get ∆= Cmin(e(QR)1/Cmin−1 −1). Recall the deﬁnition of f(z, nτ, kτ), we
have P
q∈[Q]
P
r∈[R](cnτ,kτ,q,rzτ−1
q,r ) =
wnτ ,kτ
f(z,nτ,kτ). Here is a corollary of Lemma 8.1:
f(z, nτ, kτ) ≥d∗−dτ−1
1
ϵdτ−1
2
. Recall that λ ≤
d∗
dτ−1
1
, so
1
f(z,nτ,kτ) ≤
ϵλdτ−1
2
(λ−1)d∗. Combine
with the relation between dτ
2 and dτ−1
2
:
dω
2 ≤dω−1
2
(1 + ϵ(pω −pω−1)
λ∆
(λ−1)d∗).
We utilize the inequality:
1 + x ≤ex, ∀x ≥0 here, and repeat this process:
dω
2 ≤d0
2e(ϵp
λ∆
(λ−1)d∗). Note that d0
2 = QR and dω
2 ≥zbase, so zbase ≤QRe(ϵp
λ∆
(λ−1)d∗) .
So d∗/p ≤
ϵλ∆
(λ−1)(Cmin−1). Also note that
ϵλ∆
(λ−1)(Cmin−1) = λ. And according to the
weak duality, this ﬁnishes the proof of Thm. 4.4.
8.10
The Separation Oracle and Proof of Lem-
ma 4.5
First we describe the construction of the separation oracle. In each iteration of the
ellipsoid method, a possible solution of (4.7) {v(t)
n,k}, τ is generated, and is given
as the input of the severation oracle.
The separation oracle we present in Alg.
13 judges whether this solution is feasible, i.e., not conﬂict with any constraints


Chapter 8. Appendix
114
in (4.7a). And if it is not feasible, the separation oracle should return a conﬂict
constraints as the separation plane, i.e., a set of y(t)l
n,k. So if the input solution has
objective value smaller than 1, we use
1
λ
X
n∈[N]
X
k∈[K] y(t)F
n,k v(t)
n,k + τ ≥1
as the separation plane. If the objective value equals to 1, then we ﬁnd a feasible
solution (later we will prove why in this case, it is a feasible solution). If the objective
value is larger than 1, we need to ﬁnd a set of y(t)l
n,k, satisﬁes P
n∈[N]
P
k∈[K] y(t)l
n,kv(t)
n,k ≥
1 −τ. Remember the input v(t)
n,k and τ makes the objective value larger than 1 :
1
λ
P
n∈[N]
P
k∈[K] y(t)F
n,k v(t)
n,k ≥1 −τ. So we ﬁnd a conﬂict constraint if we can ﬁnd
y(t)l
n,k satisﬁes P
n∈[N]
P
k∈[K] y(t)l
n,kv(t)
n,k ≥1
λ
P
n∈[N]
P
k∈[K] y(t)F
n,k v(t)
n,k. Observe the left
side of the inequality. It has exactly the same form with the objective function of
(4.3). Furthermore, the value of y(t)l
n,k also should satisfy all the constraints in (4.3).
So we can Around to get such y(t)l
n,k. Although there is a little diﬀerence here: v(t)
n,k
can be negative, while w(t)
n,k in (4.3) can only be nonnegative value. In order to
handle this problem, we introduce new variables e
v and e
y in the separation oracle,
which is detailed in the proof.
Algorithm 13 Separation Oracle
Require: input v(t)
n,k, τ
1: If
1
λ
P
n
P
k y(t)F
n,k v(t)
n,k + τ = 1, Then return “YES”
2: If
1
λ
P
n
P
k y(t)F
n,k v(t)
n,k + τ < 1, Then return “NO” with separation plane
1
λ
P
n
P
k y(t)F
n,k v(t)
n,k + τ ≥1
3: If
1
λ
P
n
P
k y(t)F
n,k v(t)
n,k + τ > 1, Then
4:
e
v(t)
n,k = max{0, v(t)
n,k}
5:
Run Around with input e
v(t)
n,k, c(t)
n,k,r,q, A(t)
q,r, get output e
y(t)l
n,k. Set y(t)l
n,k = e
y(t)l
n,k
if v(t)
n,k ≥0, and 0 otherwise.
6:
Return “NO” and P
n
P
k y(t)l
n,kv(t)
n,k + τ ≤1
7: EndIf
The following is the detailed proof of Lemma 4.5.
We ﬁrst show that for any
{v(t)
n,k}, we can ﬁnd in polynomial time a feasible integer allocation y(t)l
n,k such that
P
n∈[N]
P
k∈[K] y(t)l
n,kv(t)
n,k ≥1
λ
P
n∈[N]
P
k∈[K] y(t)F
n,k v(t)
n,k. Note the v(t)
n,k here can be neg-
ative value, so we cannot invoke Around directly. That is the reason we deﬁne e
v(t)
n,k.
Then we use Around, with input vector e
v(t)
n,k to get e
y(t)l
n,k satisfying P
n∈[N]
P
k∈[K] e
y(t)l
n,ke
v(t)
n,k ≤
1
λ
P
n∈[N]
P
k∈[K] y(t)F
n,k v(t)
n,k. Also note that y(t)l
n,k satisﬁes P
n∈[N]
P
k∈[K] y(t)l
n,kv(t)
n,k ≥
P
n∈[N]
P
k∈[K] e
y(t)l
n,ke
v(t)
n,k.
So we ﬁnd an integer solution y(t)l
n,k.
Next we show the


Chapter 8. Appendix
115
optimal value of (4.7), and hence of (4.6) is exactly 1. Here is a feasible solution
with value 1: τ = 1, v(t)
n,k = 0, ∀n ∈[N], k ∈[K], so the optimal value is at least
1. Then we claim that it is at most 1: suppose 1
λ
P
n∈[N]
P
k∈[K] y(t)F
n,k v(t)
n,k + τ >
1.
Then we can ﬁnd an integer solution using the previous method such that
P
n∈[N]
P
k∈[K] y(t)l
n,kv(t)
n,k + τ ≥1
λ
P
n∈[N]
P
k∈[K] y(t)F
n,k v(t)
n,k + τ ≥1 which contradicts
constraint (4.7a). Finally we show the function of our designed oracle is correct.
Two cases are obvious: objective value equals 1 and smaller than 1. When larger
than 1, the oracle generates e
v(t)
n,k and calls Around. The correctness of this method
has been discussed. So this oracle solves (4.7) as we expect.
8.11
Proof of Theorem 4.6
Recall the utility function: u(t)
n
= P
k∈[K] w(t)
n,ky(t)
n,k −Π(t)
n . So the utility of user n
under allocation l ∈L is P
k∈[K] w(t)
n,ky(t)l
n,k −Π(t)l
n . We calculate the expectation of
his utility: U (t)
n
= P
l∈L(βl
P
k∈[K] w(t)
n,ky(t)l
n,k −Π(t)l
n ) = (P
k∈[K] w(t)
n,ky(t)F
n,k −Π(t)F
n
)/λ.
We know P
k∈[K] w(t)
n,ky(t)F
n,k −Π(t)F
n
is his utility under the fractional VCG auction,
and it cannot be increased by false bid according to Thm. 4.3.
So the scaled-
down auction is also truthful. The social welfare under the fractional VCG auc-
tion is P
n∈[N] min{P
k∈[K] b(t)
n,ky(t)F
n,k , Bn}.
Now we calculate the expected social
welfare under randomized auction: P
l∈L(βl
P
n∈[N] min{P
k∈[K] b(t)
n,ky(t)l
n,k, Bn}) ≥
P
n∈[N] min{P
k∈[K] b(t)
n,ky(t)F
n,k ,Bn}
λ(1+Bmax)
. We used the condition P
k∈[K] b(t)
n,ky(t)l
n,k ≤(1+Bmax)Bn
in the ﬁrst inequality. This proves the competitive ratio since the social welfare un-
der optimal fractional solution is larger than under integer solution. Next we show
the individual rationality. First note that the deﬁnition Π(t)l
n
= Π(t)F
n
·
P
k∈[K] w(t)
n,ky(t)l
n,k
P
k∈[K] w(t)
n,ky(t)F
n,k
guarantees P
l∈L βlΠ(t)l
n
= Π(t)F
n
/λ. Then we calculate user n’s utility under random
choice l u(t)
n = P
k∈[K] w(t)
n,ky(t)l
n,k −Π(t)F
n
·
P
k∈[K] w(t)
n,ky(t)l
n,k
P
k∈[K] w(t)
n,ky(t)F
n,k
. In order to prove u(t)
n ≥0,
we only needs to prove Π(t)F
n
≤P
k∈[K] w(t)
n,ky(t)F
n,k . In fact, this is guaranteed by the
individual rationality of the fractional VCG (Thm. 4.3), ﬁnishing the proof.
8.12
Proof of Theorem 4.7
The only diﬀerence between Thm. 4.7 and Thm. 4.2 is we introduce randomness
here. Recall the proof of Thm. 4.2, the only claim aﬀected by randomness is claim
(2). We analyze the expectation of the increment on the primal and dual E[∆P]
and E[∆D]. At time t, E[∆P (t)] = P
n∈[N]
P
k∈[K] E[y(t)
n,kb(t)
n,k]. E[∆D(t)] ≤(λ(1 +
Bmax) +
1
γ−1)E[∆P (t)], which ﬁnishes our proof.


Chapter 8. Appendix
116
8.13
Proof of Theorem 4.8
Suppose with scale-down ratio λ1, y(t)F
n,k
is decomposed into a set of integer alloca-
tions y(t)l
n,k, with index set l ∈L, and the corresponding possibilities βl. Then we have
P
l∈L βly(t)l
n,k = y(t)F
n,k /λ1, ∀n ∈[N], k ∈[K]. Then we can obtain the decomposition
for ratio λ2 by adding a “zero” allocation into the decomposition set L: y(t)∗
n,k = 0.
This is an allocation that no user wins anything, and it is a feasible solution. The
possibilities are adjusted: β′
l = βl · λ1
λ2 . The possibility of the “zero” allocation is
1 −P
l∈L β′
l. We can verify that the new decomposition set, with new possibilities
β′
l is a decomposition for ratio λ2, P
l∈L β′
ly(t)l
n,k = y(t)F
n,k /λ2, ∀n ∈[N], k ∈[K].
8.14
Proof of Theorem 4.9
First we prove that the value of x(T)
n
will be at least xs
n = gn/(γ1−gn −(1 −gn)).
Whenever xn < xs
n we update xn by: x(t)
n = x(t−1)
n
+ (xs
n +
1−gn
γ1−gn−(1−gn))
b(t)
n,kn
Bn . This
is a linearly increasing updating formula, and with total valuation P
t∈[T] b(t)
n,kn =
gnBn, we have x(T)
n
= xs
n. Then we prove the three claims just similar to the proof
in Appendix 8.7. Proof of the ﬁrst two claims are trivially similar. Now we prove
the third claim by inductively prove the following inequality relation: Suppose user
n has spent g′
n fraction of budget.
If g′
n ≤gn, xn ≥g′
n(xs
n +
1−gn
γ1−gn−(1−gn)).
If
g′
n > gn, xn ≥xs
ncg′
n−gn + (1−gn)(cg′
n−gn−1)
γ1−gn−(1−gn) . In fact, the ﬁrst case (g′
n ≤gn) can be
directly proved by noticing the linearly increasing property when g′
n ≤gn. For the
second case, we need to deal with the situation when a user’s spending is less than
gn, and after obtaining one item, its spending becomes larger than gn. We virtually
divide the cost of this item into two items, such that the spending after the ﬁrst
virtual item is exactly gn. Then we use the induction on the second case, similar to
the proof in Appendix 8.7.
8.15
Proof of Theorem 5.1
Proof. We prove the computational complexity of the social welfare maximization
problem by a reduction to the 0-1 knapsack problem, which is NP-hard. Suppose
the ISP charge is 0, and all users allow 0 delay (immediate transmission), and only
consider one time slot.
Then the social welfare maximization problem becomes
maximizing the sum of the valuation of served users, under the constraint that the
sum of their data size does not exceed the bandwidth limit. This is exactly the form
of the 0-1 knapsack problem.


Chapter 8. Appendix
117
8.16
Proof of Theorem 5.8
Proof. It is ready to see that each step of Alg. 7 involves polynomial computation
complexity.
First we calculate the revenue of the provider. The actual ISP charge is no larg-
er than the ISP charge when all users are served, i.e., P
n∈[N] φn. The payment
collected is γ(P
n∈N φn), where N is the set of accepted users. So:
uP
≥γ(
X
n∈N
φn) −
X
n∈[N]
φn
= γ(
X
n∈[N]
φn −
X
n/
∈N
φn) −
X
n∈[N]
φn
≥γ(
X
n∈[N]
φn −(1 −1/γ)
X
n∈[N]
φn) −
X
n∈[N]
φn = 0
So budget balance at the provider is guaranteed. The utility of rejected users is
always 0. The utility of accepted users is un = en −γφn ≥0 according to the oﬄine
auction mechanism. So the auction is individually rational.
For user n, if she is accepted with truthful bidding en, submitting her bid price ˆ
en
diﬀerent from her valuation en does not aﬀect the traﬃc scheduling algorithm and
the traﬃc bn(t). Thus her Shapley value φn is the same either bidding en or ˆ
en. So
her utility is not aﬀected. For a rejected user, for the similar reason, her Shapley
value φn cannot be decreased by false valuation bidding. So the utility is also not
increased if she is still rejected with bidding ˆ
en. And her utility becomes negative
if accepted with false bid.
The optimal social welfare is no larger than the social welfare achieved in the
following ﬁctional scenario: all users are accepted and the ISP charge is 0.
So
Sopt ≤P
n∈[N] en.
The total valuation under our auction is P
n∈N en, and for
n /
∈N, en < γφn. The actual ISP charge is no larger than P
n∈[N] φn. So
Sauc ≥
X
n∈N
en −
X
n∈[N]
φn
≥
X
n∈[N]
en −
X
n/
∈N
γφn −
X
n∈[N]
φn
≥
X
n∈[N]
en −γ(1 −1/γ)
X
n∈[N]
φn) −
X
n∈[N]
φn
=
X
n∈[N]
en −γ
X
n∈[N]
φn


Chapter 8. Appendix
118
Then the ratio between optimal social welfare that is derived by solving (5.1) exactly
and the social welfare achieved by our oﬄine auction is:
Sopt
Sauc
≤
P
n∈[N] en
P
n∈[N] en −γ P
n∈[N] φn
= 1 +
γ P
n∈[N] φn
P
n∈[N] en −γ P
n∈[N] φn
≤1 +
γ P
n∈[N] φn
δ P
n∈[N] φn −γ P
n∈[N] φn
=
δ
δ −γ
8.17
Proof of Theorem 5.9
Proof. Similar to the proof in Appendix 8.16, the online auction described in Al-
g. 8 has polynomial time complexity. The expectation of the provider’s revenue
is E[uP ] ≥E[γ(P
n∈N ′ ˆ
φn) −P
n∈[N] φn] ≥0, based on the assumption that
P
n/
∈N ′ φn ≤(1−1/γ) P
n∈[N] φn and E[ˆ
φn] = φn. So budget balance in expectation
at the provider is guaranteed. The utility of the accepted users un = en −γ ˆ
φn ≥0
according to the online auction mechanism. So the auction is individually rational.
Bidding a diﬀerent valuation ˆ
en does not change the traﬃc allocation bm(t). Also
the overall ISP charge due to the traﬃc of the ﬁrst n arrived users v([1, n]) and the
expectation of overall ISP charge ¯
v([N]) are not aﬀected by the bidding price ˆ
en,
since v([1, n]) depends on the previous users and ¯
v([N]) depends on the user distri-
bution estimation (e.g., using some regression techniques). Therefore the estimated
Shapley value ˆ
φn is not aﬀected by ˆ
en. So this mechanism is truthful in bidding
price. Next we prove that the user cannot decrease the estimated Shapley value ˆ
φn
by misreporting her data size Bn. First the user cannot bid a smaller data size Bn
because otherwise the transmission task is not fully served. If a user submits a larg-
er Bn, then her traﬃc at any time slot is larger according to our online scheduling
algorithm. If the ISP charge due to the ﬁrst n users v([1, n]) is not increased under
the false Bn value, then ˆ
φn remains the same. Otherwise, the billing time slot is
one of the time slots during user n’s stay. According to the property of Shapley
value, her Shapley value will increase more than the increase of the ISP charge:
φ′
n/v([1, n]) is larger, and so is ˆ
φn, which can only decrease the utility of user n.
So this mechanism is also truthful in bidding data size. The optimal social welfare
Sopt ≤P
n∈[N] en. The expectation of social welfare under the online auction is:


Chapter 8. Appendix
119
E[Sauc] ≥E[
X
n∈N ′
en −
X
n∈[N]
φn]
≥
X
n∈[N]
en −
X
n/
∈N ′
γE[ˆ
φn] −
X
n∈[N]
φn
≥
X
n∈[N]
en −γ
X
n∈[N]
φn
So the competitive ratio is E[ Sopt
Sauc ] ≤
δ
δ−γ .
8.18
Proof of Lemma 5.10
Proof. First we formulate the minimal peak traﬃc problem on a single link (8.6),
as well as its dual (8.7).
min C
(8.6)
s.t. Bn =
tn+dn−1
X
t=tn
bn(t) ∀n ∈[N]
(8.6a)
X
n∈[N]
bn(t) ≤C ∀t ∈[T]
(8.6b)
bn(t) ≥0 ∀n ∈[N], t ∈[T]
(8.6c)
max
X
n∈[N]
znBn
(8.7)
s.t.
X
t∈[T]
y(t) ≤1
(8.7a)
zn ≤y(t) ∀n ∈[N], t ∈[tn, tn + dn −1]
(8.7b)
y(t) ≥0 ∀t ∈[T]
(8.7c)
For an arbitrary user set [N], suppose the highest traﬃc appears at time T ′ in our
online algorithm. Let N be the set of user involved in the traﬃc at time T ′, i.e. n ∈N
iﬀT ′ ∈[tn, tn+dn−1]. Then the peak traﬃc of our algorithm is P
n∈N Bn/dn. Note
that for any user n ∈N, its delay satisﬁes D ≥dn ≥T ′ −tn +1 and its arriving time
tn ≥T ′−D. Now we give a feasible solution for the dual (8.7). Let w = 2HD. y(t) =
1/(|t−T ′|w) for t ∈[T ′−D, T ′+D], and 0 otherwise. For n ∈N, zn = 1/(dnw), and 0


Chapter 8. Appendix
120
otherwise. We verify that this solution is feasible. P
t∈[T] y(t) ≤2 Pd=D
d=1 (1/dw) ≤1.
For ∀n ∈N, we need to show that zn ≤mint∈[tn,tn+dn−1] y(t). Note the distribution
of the value of y(t), we can conclude that mint∈[tn,tn+dn−1] y(t) equals either y(tn) or
y(tn+dn−1). Since y(tn) = 1/(T ′−tn)w, and y(tn+dn−1) = 1/(tn+dn−T ′−1)w
(if tn + dn −1 ≥T ′, otherwise this case can be ignored), we only need to show
T ′ −tn ≤dn, and tn + dn −T ′ −1 ≤dn. These 2 inequalities holds obviously. So
this solution is feasible, and the value of the objective function of the dual (8.7) is
P
n∈N Bn/(dnw).
8.19
Proof of Theorem 5.11
Proof. The key issue we need to prove here is: for every link, if the peak traﬃc of
the optimal solution is C, then the peak traﬃc in our algorithm is no larger than
2HDC. If we take all the users involved in this link, and create a new network with
only one link and these users. Then the minimal peak traﬃc is no larger than C in
the new network. So our algorithm running on single link network does not exceed
2HDC. The schedules for the single link network and the original network are the
same for these users, and so are the peak traﬃc. Then take the eﬀect of unit prices
into consideration, we get the bound on total ISP charge.
8.20
Proof of Theorem 5.12
Proof. The truthfulness in bidding price and data size is due to the same reason
in Appendix 8.17. Suppose a user makes a smaller deadline bid. Her threshold
ˆ
φn
min cannot be smaller than under the truthful bid. Because under the truthful
bid, ˆ
φn
min is the smallest taken on d = 1 . . . dn. Thus the extended online auction
is also truthful in bidding deadline.
8.21
Proof of Theorem 6.1
Proof. We prove NP-hardness by reduction to the 0-1 knapsack problem. Consider
a set of knapsacks with capacity {Ap}, and a set of items with weight {an} and
valuation {bn}. We design a VC allocation problem, including datacenters with
capacities {Ap}. Users’ required VMs consumes {an} units of resources, with valu-
ation {bn}. All the operational cost is 0. Then we can solve the knapsack problem
if we can solve the problem (6.1).


Chapter 8. Appendix
121
8.22
Proof of Theorem 6.2
Proof. First we analyze the running time: solving the multi-commodity problem
needs O((E + V 2
n )P) time, and we do this for all users’ schemes.
So the total
time is O((E + V 2
n )PBN).
The auction mechanism is individual rational since
the payment C(n, β) + o(n, β) is always no larger than the valuation b′
n,β. Notice
that the unit cost of each types of resource is not aﬀected by the net valuation
bn,β, and thus C(β, n) is not inﬂuenced by users’ bidding. The algorithm chooses
the scheme which maximizes bn,β −C(n, β). If a false bidding does not change the
chosen scheme β, the user’s utility is not changed since the payment only depends on
C(β, n). Otherwise, if a false bidding causes a diﬀerent scheme be picked β′. Then
the user’s utility under β′ cannot be larger, since the new utility is bn,β′ −C(β′, n)
which is no larger than the utility under the original scheme β. So this mechanism
is truthful.
In order to prove the competitive ratio, we prove 3 claims. (1) ∀m, t, the resource
constraints are never violated. Or, P
n r(n, m, t) ≤1. If user n is rejected, we can
assume a virtual scheme with valuation, payment and resource consumption all be 0,
without aﬀecting the proof. (2) Total social welfare achieved by the online algorithm
is lower bounded: 2 log µSonline ≥P
t,m cm(t, N + 1), where Sonline = P
n∈[N] bn,β
is the social welfare achieved under the online solution. (3) Let β∗be the scheme
chosen for the user in oﬄine optimal solution, and Sopt = P
n∈[N] bn,β∗be the
social welfare under the oﬄine solution.
Then Sopt is upper bounded: Sopt ≤
Sonline + P
t,m cm(t, N + 1).
Proof of claim (1): Let user n be the ﬁrst user that exceeds the constraint of
resource m at time t with scheme β. Then λm(t, n) > 1−r(n, m, t). By assumption
that r(n, m, t) ≤
1
log µ, we get: cm(t, n) ≥µ/2 + 1 = MTF.
Therefore, using
bn,β
Mr(n,m,t)Tn ≤F, we conclude that cm(t, n)r(n, m, t) ≥MTFr(n, m, t) ≥bn,β, which
contradicts the assumption that user n is accepted.
Proof of claim (2): By induction on N, for N = 0 the claim is true. For a new
user which is rejected, the value of either side of the inequality is not changed. So
we only need to show that for any n, if he is accepted with β, then:
X
t
X
m
(cm(t, n + 1) −cm(t, n)) ≤2 log µbn,β
For any m, we have cm(t, n + 1) −cm(t, n) = µλm(t,n)(2log µr(n,m,t) −1). Because
2x −1 ≤x for x ∈[0, 1], we have cm(t, n + 1) −cm(t, n) ≤log µ(cm(t, n)r(n, m, t) +
r(n, m, t)). Then,


Chapter 8. Appendix
122
X
t
X
m
(cm(t, n + 1) −cm(t, n))
≤log µ
X
t
X
m
(cm(t, n)r(n, m, t) + r(n, m, t))
≤log µ(C(n, β) + TMr(n, m, t))
≤2 log µbn,β
Proof of claim (3): The fact that β∗is not chosen gives us: bn,β −C(n, β) ≥
bn,β∗−C(n, β∗), where β is the scheme chosen in the online solution. So P
n bn,β∗≤
P
n bn,β + P
n
P
m,t cm(t, n)r(n, m, t).
Notice that cm(t, n) ≤cm(t, N + 1), and
P
n r(n, m, t) ≤1, ∀m, t since the resource constraint is not violated under the
oﬄine solution. We have Sopt ≤Sonline + P
t,m cm(t, N + 1). Together with claim
(2), we prove that the competitive ratio is 2 log µ + 1.
8.23
Proof of Theorem 6.3
Proof. First we prove truthfulness. Since the scheme maximizing bn,β −C(β, n) is
also the scheme maximizing user utility bn,β −˜
bn, the user cannot increase his utility
by changing his receiving scheme. The payment is independent of bn,β, so if the user
does not change the scheme β, his utility remains the same. Individual rationality
is guaranteed since we reject users with bn,β < ˜
bn.
Polynomial running time is
guaranteed just as in SWMOA. We accept a subset of served users in SWMOA, so
the resource is enough.
We consider several categories of the users. Let A be the set of users accepted by our
algorithm. Let Q be the set of users with C(β, n) ≤bn,β, i.e., accepted by SWMOA.
We further divide Q into Q1 and Q2. Users in Q1 have bn,β ≥bn,β∗/2, and users
in Q2 have bn,β < bn,β∗/2, where β∗is the scheme provided in the oﬄine solution.
Let P be the set of users accepted by the oﬄine solution but not by SWMOA
(C(β, n) > bn,β). 1 We need to show that the total revenue P
n∈A ˜
bn is comparable
to the oﬄine optimal social welfare, which is bounded by P
n∈P bn,β∗+P
n∈Q1 bn,β∗+
P
n∈Q2 bn,β∗. We prove 3 claims: (1) P
n∈P bn,β∗≤(4 log µ + 2)E[P
n∈A ˜
bn]. (2)
P
n∈Q1 bn,β∗≤(8 log F)E[P
n∈A ˜
bn]. (3) P
n∈Q2 bn,β∗≤(8 log µ + 4)E[P
n∈A ˜
bn].
Proof of claim (1): First we show P
n∈P bn,β∗≤(2 log µ + 1) P
n∈Q C(n, β): This
comes from the social welfare competitiveness of SWMOA. Notice that P
n∈P bn,β∗
is a set of feasible oﬄine solutions. And if all users in Q bid C(n, β) instead of bn,β,
SWMOA will still choose the users in set Q, exactly the same as if they bid bn,β.
1If in oﬄine solution a user is rejected, his β∗is deﬁned to be the scheme with largest
valuation.


Chapter 8. Appendix
123
So according to the social welfare competitiveness, a feasible solution is bounded by
(2 log µ+1) times the online solution. Next we show P
n∈Q C(n, β) ≤2E[P
n∈A ˜
bn].
Set Q does not depend on our choose of δ. With 1/2 probability ˜
bn = C(β, n), so
for all n ∈Q, it belongs to A. So the expected value of P
n∈A ˜
bn is at least half of
the value of P
n∈Q C(n, β). So we get the conclusion of claim (1).
Proof of claim (2): ∀n ∈Q1, there is 1/2 log F probability that bn,β ≥˜
bn ≥
bn,β/2 ≥bn,β∗/4. So any n ∈Q1 contributes at least bn,β∗/8 log F in ˜
bn.
Proof of claim (3): The fact that our algorithm choose β instead of β∗gives
us: bn,β∗/2 ≥bn,β −C(β, n) ≥bn,β∗−C(β∗, n).
So bn,β∗≤2C(β∗, n).
This
means, if we let users in Q2 bidding β∗with valuation bn,β∗/2, they will be rejected.
Again according to the social welfare competitiveness, P
n∈Q2 bn,β∗/2 ≤(2 log µ +
1) P
n∈Q C(n, β). Together with P
n∈Q C(n, β) ≤2E[P
n∈A ˜
bn], shown in the proof
of claim (1), we prove the claim. Putting 3 claims together proves the conclusion.
8.24
Proof of Theorem 6.4
Proof. The marginal price is independent of the user’s bid, and so is the paymen-
t. The provider always choose the bundle which maximizes user’s utility. So this
mechanism is truthful according to the sequential posed price mechanisms. The in-
dividual rationality is straightforward since we only serve users with positive utility.
The running time is polynomial just as SWMOA.
We next analyze the competitive ratio. Let P 0 = D0 = 0 be the initial value of
primal and dual objectives. Let P n, Dn be the objective values after handling user n.
Denote the amount of resources allocated after user n by yn
r (t), and corresponding
marginal price by pn
r (t). Let OPT be the optimal social welfare. We start with the
following simple claim:
Claim (1): If there is a constant α ≥1 such that the increase of the primal and
dual objective values is bounded by α times: P n −P n−1 ≥(Dn −Dn−1)/α, for each
user n, then the algorithm is α-competitive.
To prove claim (1), we sum up the inequality over all steps n, and have P N ≥Dn/α.
By weak duality, DN ≥OPT. We have P N ≥OPT/α.
Next we deﬁne the Allocation-Payment Relationship (APR), which is a key property
of the marginal price function pr(t) in proving the competitive ratio.
Deﬁnition 8.2. The Allocation-Payment Relationship (APR) for a given α ≥1 is:
pn−1
r
(t)(yn
r (t)−yn−1
r
(t))−fr(yn
r (t))+fr(yn−1
r
(t)) ≥(f∗
r (pn
r (t))−f∗
r (pn−1
r
(t)))/α, ∀n ∈
[N], r ∈[R], t ∈[T].


Chapter 8. Appendix
124
APR says that the diﬀerence between payment and the incremental cost of a re-
source due to a user is no smaller than 1/α of the value increase of the conjugate.
The following claim shows that the net proﬁt is lower bounded:
Claim (2): If APR holds for α ≥1, then for every accepted user n with bundle β,
ˆ
pn,β −P
t,r(fr(yn
r (t)) −fr(yn−1
r
(t))) ≥(Dn −Dn−1)/α.
Claim (2) can be easily proved after we plug the deﬁnition of Dn −Dn−1 and ˆ
pn,β
into the above inequality.
Claim (3): If APR holds for α ≥1, then P n −P n−1 ≥(Dn −Dn−1)/α, for all
n ∈[N].
Since the change of P is bn,β −P
t,r(fr(yn
r (t)) −fr(yn−1
r
(t))), and note bn,β =
un + ˆ
pn,β. By Claim (2), we get the conclusion of Claim (3).
We next ﬁnd the smallest α for which the marginal price function satisﬁes APR. A
simple observation is: APR involves only quantities about the same r, so we can
deﬁne αr which APR holds for a speciﬁc r, and then take α as the maximum of all
αr’s, to satisfy for all r. We assume that dn,β,r(t) is much smaller compared to Cr,
then we derive a diﬀerential version of APR:
Deﬁnition 8.3. The Diﬀerential Allocation-Payment Relationship (DAPR) for a
given αr ≥1 is: pr(t)dyr(t) −f′
r(yr(t))dyr(t) ≥f′∗
r (pr(t))dpr(t)/α, ∀n ∈[N], r ∈
[R], t ∈[T].
Claim (4): The marginal payment function (6.10) satisﬁes DAPR for αr = max{4(1+
νr), 2+2νr
νr
ln(
Ur
hr(1+νr)Cνr
r )}, with parameters δr = max{2, (1 + ν)1/ν}, and θr =
max{δrνr
Cr ,
δr
Cr(δr−1) ln(
Ur
hr(1+νr)Cνr
r )}, where Ur = maxn,β
bn,β
P
t dn,r,β(t) < F.
We will need the following Claim (5), which states that the marginal payment is
greater than the marginal cost by at least (1 + νr) factor, to prove Claim (4).
Claim (5): For yr(t) ≤Cr and the corresponding pr(t), pr(t) ≥(1+νr)f′
r(yr(t)) =
hr(1 + νr)2yr(t)νr.
It is easy to verify that the inequality in Claim (5) holds with equality when yr(t) ≤
Cr/δr. Next assume yr(t) > Cr/δr, then pr(t) = hr(1+νr)Cνr
r exp(θr(yr(t)−Cr/δr)).
So the inequality is equivalent to exp(θryr(t))
yr(t)νr
≥(1+νr) exp(θrCr/δr)
Cνr
r
. Recall that δr ≥
(1 + νr)1/νr. So the above inequality holds with equality for yr(t) = Cr/δr. Next
we only need to show that exp(θryr(t))
yr(t)νr
is non-decreasing with respect to yr(t). This
can be proved by calculating the derivative. So Claim (5) follows.
Now we prove Claim (4). First we calculate the diﬀerentials of the cost functions and
their conjugates. Note that when yr(t) = Cr, pr(t) = hr(1 + νr)Cνr
r exp(θrCr(1 −
1/δr)) ≥Ur. So the provider will never violate the capacity constraint. So we only
consider yr(t) ≤Cr, and f′
r(yr(t)) = hr(1 + νr)yr(t)νr. Next we consider two cases:
(i) yr(t) ≤Cr/δr, (ii) yr(t) > Cr/δr.


Chapter 8. Appendix
125
Case (i): In this case, DAPR is: (pr(t)−hr(1+νr)yr(t)νr)dyr(t) ≥
1
αr (
pr(t)
hr(1+νr))1/νrdpr(t).
And pr(t) = f′
r(δryr(t)) = hr(1+νr)(δryr(t))νr. So we only need to show (δνr
r −1) ≥
νrδνr
r /αr. If νr ≥1, then δr = 2 and δνr
r ≤4δνr
r −4, and the claim holds. If νr < 1,
then δr = (1 + νr)1/νr and we can also verify the claim.
Case (ii): In this case, DAPR is: (pr(t) −hr(1 + νr)yr(t)νr)dyr(t) ≥Crdpr(t)/αr.
While the marginal payment is pr(t) = hr(1 + νr)Cνr
r exp(θr(yr(t) −Cr/δr)). By
Claim (5), we only need to show
νr
1+νr pr(t)dyr(t) ≥Crdpr(t)/αr.
Also we have
dpr(t) = θrpr(t)dyr(t). So it reduces to θr ≤
νrαr
Cr(1+νr). Plug the value of parameters
θr we can verify the claim. That ﬁnishes the proof of Claim (4).
Putting Claim (1)-(5) together, we can get the competitive ratio as O(log µ).




Bibliography
[1] Wikipedia Stats, 2013. http://dumps.wikimedia.org/other/pagecounts-ez/.
[2] Amazon Elastic Compute Cloud. http://aws.amazon.com/ec2/.
[3] Amazon EC2 Pricing. http://aws.amazon.com/ec2/pricing/.
[4] Amazon EC2 Spot Instances. http://aws.amazon.com/ec2/spot-instances/.
[5] Amazon Virtual Cluster. http://docs.aws.amazon.com/redshift/latest/mgmt/managing-
clusters-vpc.html.
[6] Google Cluster Data, https://code.google.com/p/googleclusterdata/.
[7] Aliyun.
https://help.aliyun.com/document detail/expressconnect/product-
introduction/region-spec-price.html?spm=5176.2069607.9.4.ryv5Sx.
[8] CloudSigma:
Cloud
servers
on
a
powerful
IaaS
platform.
http://www.cloudsigma.com.
[9] KVM CPU Hotplug. http://www.linux-kvm.org/page/CPUHotPlug.
[10] SpotCloud. http://www.spotcloud.com/.
[11] Windows
Azure:
Microsoft’s
Cloud
Platform.
http://www.windowsazure.com/.
[12] Mansoor Alicherry and TV Lakshman. Network Aware Resource Allocation in
Distributed Clouds. In Proc. of IEEE INFOCOM, 2012.
[13] Hitesh Ballani, Paolo Costa, Thomas Karagiannis, and Ant Rowstron. The
Price Is Right:
Towards Location-Independent Costs in Datacenters.
In
Proc. of ACM HotNet, 2011.
[14] Hitesh Ballani, Paolo Costa, Thomas Karagiannis, and Ant Rowstron. Towards
Predictable Datacenter Networks. In Proc. of ACM SIGCOMM, 2011.
[15] Theophilus Benson, Aditya Akella, Anees Shaikh, and Sambit Sahu. Cloud-
NaaS: a Cloud Networking Platform for Enterprise Applications. In Proc. of
ACM SOCC, 2011.
127


Bibliography
128
[16] L¨
U Bo, Tao Huang, Zhen-Kai Wang, Jian-Ya Chen, Yun-Jie Liu, and LIU
Jiang. Adaptive Scheme Based on Status Feedback for Virtual Network Map-
ping. The Journal of China Universities of Posts and Telecommunications,
2011.
[17] Niv Buchbinder, Kamal Jain, and Joseph SeﬃNaor. Online Primal-Dual Al-
gorithms for Maximizing Ad-Auctions Revenue.
In Proceedings of the 15th
Annual European Symposium on Algorithms, 2007.
[18] Niv Buchbinder and Joseph Naor. Online Primal-Dual Algorithms for Covering
and Packing Problems. In Algorithms-ESA, 2005.
[19] Niv Buchbinder and Joseph Naor. The Design of Competitive Online Algo-
rithms via a Primal: Dual Approach. Foundations and Trends in Theoretical
Computer Science, 2009.
[20] Zhiping Cai, Fang Liu, Nong Xiao, Qiang Liu, and Zhiying Wang. Virtual
Network Embedding for Evolving Networks. In Proc. of IEEE GLOBECOM,
2010.
[21] K. Chen, C. Hu, X. Zhang, K. Zheng, Y. Chen, and A. V. Vasilakos. Survey
on Routing in Data Centers: Insights and Future Directions. IEEE Network,
2011.
[22] Nawal Cherﬁand Mhand Hiﬁ. A Column Generation Method for the Multiple-
Choice Multi-dimensional Knapsack Problem.
Computational Optimization
and Applications, 46(1):51–73, 2010.
[23] NM Mosharaf Kabir Chowdhury, Muntasir Raihan Rahman, and Raouf Bouta-
ba. Virtual Network Embedding with Coordinated Node and Link Mapping.
In Proc. of IEEE INFOCOM, 2009.
[24] Nikhil R Devanur and Zhiyi Huang. Primal Dual Gives Almost Optimal Energy
Eﬃcient Online Algorithms. In Proc. of ACM SODA, 2014.
[25] Xenofontas Dimitropoulos, Paul Hurley, Andreas Kind, and Marc Ph Stoeck-
lin.
On the 95-percentile Billing Method.
In Passive and Active Network
Measurement, pages 207–216. 2009.
[26] Shahar Dobzinski, Aranyak Mehta, Tim Roughgarden, and Mukund Sun-
dararajan. Is Shapley Cost Sharing Optimal? In Algorithmic Game Theory,
pages 327–336. Springer, 2008.
[27] Flavio Esposito and Ibrahim Matta. A Decomposition-based Architecture for
Distributed Virtual Network Embedding. ACM SIGCOMM DCC Workshop,
2014.
[28] Guy Even and Moti Medina. Online Multi-Commodity Flow with High De-
mands. In Approximation and Online Algorithms. 2013.


Bibliography
129
[29] Guy Even, Moti Medina, Gregor Schaﬀrath, and Stefan Schmid. Competitive
and Deterministic Embeddings of Virtual Networks. In Distributed Computing
and Networking, pages 106–121. 2012.
[30] Joan Feigenbaum, Christos Papadimitriou, and Scott Shenker. Sharing the
Cost of Muliticast Transmissions. In Proc. of ACM STOC, pages 218–227,
2000.
[31] Z. Feng, Y. Zhu, Q. Zhang, L. M Ni, and A. V. Vasilakos. TRAC: Truthful
Auction for Location-Aware Collaborative Sensing in Mobile Crowdsourcing.
In Proc. of IEEE INFOCOM, 2014.
[32] Zhenni Feng, Yanmin Zhu, Qian Zhang, Lionel M. Ni, and Athanasios V Vasi-
lakos. TRAC: Truthful Auction for Location-Aware Collaborative Sensing in
Mobile Crowdsourcing. In Proc. of IEEE INFOCOM, 2014.
[33] Haoming Fu, Zongpeng Li, and Chuan Wu. Core-Selecting Auction Design for
Dynamically Allocating Heterogeneous VMs in Cloud Computing. In Proc. of
IEEE ICLOUD, 2014.
[34] Nandan Garg and Daniel Grosu. A Faithful Distributed Mechanism for Sharing
the Cost of Multicast Transmissions. IEEE TPDS, 2009.
[35] Georgii Gens and Evgenii Levner. Complexity of Approximation Algorithms
for Combinatorial Problems: a Survey.
ACM SIGACT News, 12(3):52–65,
1980.
[36] Andrew V Goldberg, Jason D Hartline, and Andrew Wright.
Competitive
Auctions and Digital Goods. In Proc. of ACM-SIAM symposium on Discrete
algorithms, 2001.
[37] Leana Golubchik, Samir Khuller, Koyel Mukherjee, and Yuan Yao. To Send
or Not to Send: Reducing the Cost of Data Transmission. In Proc. of IEEE
INFOCOM, 2013.
[38] Robert Grandl, Ganesh Ananthanarayanan, Srikanth Kandula, Sriram Rao,
and Aditya Akella. Multi-Resource Packing for Cluster Schedulers. In Proc. of
ACM SIGCOMM, 2014.
[39] A. Greenberg, J. Hamilton, D. A. Maltz, and P. Patel. The Cost of a Cloud:
Research Problems in Data Center Networks. In Proc. of ACM SIGCOMM,
volume 39, pages 68–73, 2008.
[40] Chuanxiong Guo, Guohan Lu, Helen J Wang, Shuang Yang, Chao Kong, Peng
Sun, Wenfei Wu, and Yongguang Zhang. Secondnet: a Data Center Network
Virtualization Architecture with Bandwidth Guarantees.
In Proc. of ACM
CoNEXT, 2010.
[41] J. Guo, F. Liu, X. Huang, J. C.S. Lui, M. Hu, Q. Gao, and H. Jin. On Eﬃcient
Bandwidth Allocation for Traﬃc Variability in Datacenters. In Proc. of IEEE
INFOCOM, 2014.


Bibliography
130
[42] H Hong, D Chen, C Huang, K Chen, and C Hsu. Placing Virtual Machines to
Optimize Cloud Gaming Experience. IEEE Transactions on Cloud Computing,
2015.
[43] Sushant Jain, Alok Kumar, Subhasree Mandal, Joon Ong, Leon Poutievski,
Arjun Singh, Subbaiah Venkata, Jim Wanderer, Junlan Zhou, Min Zhu, et al.
B4: Experience with a Globally-Deployed Software Deﬁned WAN. In Proc. of
ACM SIGCOMM, 2013.
[44] Nikolaos Laoutaris, Michael Sirivianos, Xiaoyuan Yang, and Pablo Rodriguez.
Inter-datacenter Bulk Transfers with NetStitcher. In Proc. of ACM SIGCOM-
M, 2011.
[45] Nikolaos Laoutaris, Georgios Smaragdakis, Pablo Rodriguez, and Ravi Sun-
daram. Delay Tolerant Bulk Data Transfers on the Internet. In Proc. of ACM
SIGMETRICS, 2009.
[46] Ron Lavi and Noam Nisan.
Competitive Analysis of Incentive Compatible
On-line Auctions. In Proc. of ACM EC, 2000.
[47] Ron Lavi and Chaitanya Swamy. Truthful and Near-Optimal Mechanism De-
sign via Linear Programming. In Proc. of FOCS, 2005.
[48] Aurel A Lazar and Nemo Semret.
Design and Analysis of the Progressive
Second Price Auction for Network Bandwidth Sharing.
Telecommunication
Systems, 13, 2001.
[49] Daniel Lehmann, Liadan Ita O´
callaghan, and Yoav Shoham. Truth Revelation
in Approximately Eﬃcient Combinatorial Auctions. Journal of the ACM, 49,
2002.
[50] Xin Li, Jie Wu, Shaojie Tang, and Sanglu Lu. Let’s Stay Together: Towards
Traﬃc Aware Virtual Machine Placement in Data Centers. In Proc. of IEEE
INFOCOM, 2014.
[51] R. T.B. Ma, D.M. Chiu, J. C.S. Lui, M. Vishal, and D. Rubenstein. Inter-
net Economics: The use of Shapley value for ISP settlement.
IEEE/ACM
Transactions on Networking, 18(3):775–787, 2010.
[52] Jeﬀrey K MacKie-Mason and Hal R Varian. Pricing the Internet. Public Access
to the Internet, 1994.
[53] Aleksander Madry. Reducing Truth-Telling Online Mechanisms to Online Op-
timization. In Proc. of ACM STOC, 2003.
[54] Aleksander Madry. Faster Approximation Schemes for Fractional Multicom-
modity Flow Problems via Dynamic Graph Algorithms.
In Proc. of ACM
STOC, 2010.


Bibliography
131
[55] Siva Theja Maguluri, R Srikant, and Lei Ying.
Stochastic Models of Load
Balancing and Scheduling in Cloud Computing Clusters. In Proc. of IEEE
INFOCOM, 2012.
[56] Patrick Maill´
e and Bruno Tuﬃn. Pricing the Internet with Multibid Auctions.
IEEE/ACM Transactions on Networking, 14(5):992–1004, 2006.
[57] Douglas C Montgomery, Elizabeth A Peck, and G Geoﬀrey Vining. Introduc-
tion to Linear Regression Analysis. John Wiley & Sons, 2012.
[58] Rafael Moreno-Vozmediano, Rub´
en S Montero, and Ignacio M Llorente. IaaS
Cloud Architecture: From Virtualized Datacenters to Federated Cloud Infras-
tructures. Computer, (12):65–72, 2012.
[59] Ahuva Mu’Alem and Noam Nisan.
Truthful Approximation Mechanism-
s for Restricted Combinatorial Auctions.
Games and Economic Behavior,
64(2):612–631, 2008.
[60] Roger B Myerson. Graphs and Cooperation in Games. Mathematics of opera-
tions research, 2(3):225–229, 1977.
[61] Noam Nisan. Algorithmic Game Theory. Cambridge University Press, 2007.
[62] K. K. Ramakrishnan, Prashant Shenoy, and Jacobus Van der Merwe. Live
Data Center Migration across WANs: a Robust Cooperative Context Aware
Approach.
In Proc. of the 2007 SIGCOMM workshop on Internet Network
Management, 2007.
[63] Henrique Rodrigues, Jose Renato Santos, Yoshio Turner, Paolo Soares, and
Dorgival Guedes. Gatekeeper: Supporting Bandwidth Guarantees for Multi-
tenant Datacenter Networks. In WIOV, 2011.
[64] M Rodriguez Sossa and Rajkumar Buyya. Deadline based Resource Provi-
sioning and Scheduling Algorithmfor Scientiﬁc Workﬂows on Clouds. IEEE
Transactions on Cloud Computing, 2014.
[65] Michael H Rothkopf, Aleksandar Pekeˇ
c, and Ronald M Harstad. Computation-
ally Manageable Combinational Auctions. Management science, 44(8):1131–
1147, 1998.
[66] Ganesha Shanmuganathan, Ajay Gulati, and Peter Varman. Defragmenting
the Cloud Using Demand-Based Resource Allocation. In Proc. of ACM SIG-
METRICS, 2013.
[67] Lloyd S Shapley. A Value for N-person Games. Technical report, Rand Corp
Santa Monica (No. RAND-P-295), 1952.
[68] Weijie Shi, Linquan Zhang, Chuan Wu, Zongpeng Li, and Francis C. M. Lau.
An Online Auction Framework for Dynamic Resource Provisioning in Cloud
Computing. In Proc. of ACM SIGMETRICS, 2014.


Bibliography
132
[69] Rade Stanojevic, Nikolaos Laoutaris, and Pablo Rodriguez.
On Economic
Heavy Hitters: Shapley Value Analysis of 95th-Percentile Pricing. In Proc. of
ACM IMC, 2010.
[70] Patrick Stuedi and Gustavo Alonso. Recall and Precision in Distributed Band-
width Allocation. In Quality of Service, 2007 Fifteenth IEEE International
Workshop on. IEEE, 2007.
[71] William Vickrey. Counterspeculation, Auctions, and Competitive Sealed Ten-
ders. The Journal of Finance, 16(1):8–37, 1961.
[72] Lin Wang, Fa Zhang, Jordi Arjona Aroca, Athanasios V Vasilakos, Kai Zheng,
Chenying Hou, Dan Li, and Zhiyong Liu. GreenDCN: a General Framework
for Achieving Energy Eﬃciency in Data Center Networks. IEEE JSAC, 2014.
[73] Lin Wang, Fa Zhang, Athanasios V Vasilakos, Chenying Hou, and Zhiyong
Liu.
Joint Virtual Machine Assignment and Traﬃc Engineering for Green
Data Center Networks. ACM SIGMETRICS Performance Evaluation Review,
2014.
[74] Qian Wang, Kui Ren, and Xiaoqiao Meng. When Cloud Meets EBay: Towards
Eﬀective Pricing for Cloud Computing. In Proc. of IEEE INFOCOM, 2012.
[75] Wei Wang, Ben Liang, and Baochun Li. Revenue Maximization with Dynamic
Auctions in IaaS Cloud Markets. In Proc. of IEEE ICDCS, 2013.
[76] Chuan Wu, Zongpeng Li, Xuanjia Qiu, and Francis C. M. Lau. Auction-Based
P2P VoD Streaming: Incentives and Optimal Scheduling. ACM Transactions
on Multimedia Computing, Communications and Applications, 2012.
[77] Y. Wu, C. Wu, B. Li, L. Zhang, Z. Li, and F. C. M. Lau. Scaling Social Media
Applications onto Geo-distributed Clouds. In Proc. of IEEE INFOCOM, 2012.
[78] D. Xu, X. Liu, and A. V. Vasilakos. Traﬃc-Aware Resource Provisioning for
Distributed Clouds. IEEE Cloud Computing, 2015.
[79] Fei Xu, Fangming Liu, Hai Jin, and Athanasios V Vasilakos. Managing Per-
formance Overhead of Virtual Machines in Cloud Computing: a Survey, State
of the Art, and Future Directions. Proc. of the IEEE, 2014.
[80] Fei Xu, Fangming Liu, Linghui Liu, Hai Jin, and Bo Li.
iAware: Making
Live Migration of Virtual Machines Interference-Aware in the Cloud. IEEE
Transactions on Computers, 2013.
[81] Hong Zhang, Bo Li, Hongbo Jiang, Fangming Liu, Athanasios V Vasilakos,
and Jiangchuan Liu.
A Framework for Truthful Online Auctions in Cloud
Computing with Heterogeneous User Demands. In Proc. of IEEE INFOCOM,
2013.


Bibliography
133
[82] Linquan Zhang, Zongpeng Li, and Chuan Wu. Dynamic Resource Provisioning
in Cloud Computing: A Randomized Auction Approach. In Proc. of IEEE
INFOCOM, 2014.
[83] Qi Zhang, Mohamed Faten Zhani, Maissa Jabri, and Raouf Boutaba. Venice:
Reliable Virtual Data Center Embedding in Clouds. In Proc. of IEEE INFO-
COM, 2014.
[84] Dengji Zhao, Dongmo Zhang, and Laurent Perrussel. Multi-unit Double Auc-
tion under Group Buying. In ECAI, 2012.
[85] Zhi Zhou, Fangming Liu, Hai Jin, Bo Li, Baochun Li, and Hongbo Jiang. On
Arbitrating the Power-Performance Tradeoﬀin SaaS Clouds. In Proc. of IEEE
INFOCOM, 2013.
[86] Yuefei Zhu, Baochun Li, and Zongpeng Li. Truthful Spectrum Auction Design
for Secondary Networks. In Proc. of IEEE INFOCOM, 2012.