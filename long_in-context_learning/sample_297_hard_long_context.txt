Comparative Analyses with
GAMS
Once a model is
completed, it is
almost always
used to
investigate
alternative
scenarios where
the analyst
compares the
results of various
scenario
assumptions. In
this tutorial we
will show how
such
comaparative
analyses (also
called sensitivity
analyses) are
done with GAMS.
We will first
demonstrate an
easy approach,
where we will
manually change
input
parameters, use
repeated solves
and generate
reports. In a
second step, we
will introduce
Table of Contents
Manual Approach
Writing Cross-Scenario Reports
Resetting Data to Base Levels
An Automated Approach - Avoiding
Repeated Work
Adding A Scenario
Changing the Structure of a
Model
Ranging analysis
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 15:37
Comparative Analyses with GAMS
https://www.gams.com/latest/docs/UG_ComparativeAnalysis.html
1/14


another
approach, where
a loop structure
will be used to
automatically
cycle through the
scenarios. We recommend to read the sections on the manual
approach first, since the sections on the automated approach
build on code blocks developed in the early sections.
Manual Approach
Suppose we wish to do a comparative analysis by altering some
input data in a model. We will use as an example the farm
profit-maximizing model farmcomp.gms. The following vector of
prices for primary commodities is a part of the input data:
We will use these data as a base case and compare it with two
alternative scenarios: in the first scenario we will change the
price of beef to $0.70 and in the second scenario we will change
the price of corn to $2.70.
The GAMS file farmrep.gms is related to our example model. It
contains only calculations for report writing and may be
included with the dollar control option $include. It will
generate a report based on the solution of the last solve that
was executed in the GAMS program farmcomp.gms. The report
consists of several tables. We will focus on the table
Farm Summary that is associated with the parameter summary.
The relevant code is given below:
Parameter price(primary)  'prices for products i
         / corn  2.20, soybeans   5.00, beef   0
Set  alli 'allitems'
        / corn, soybeans, beef, cattle,
          water, cropland, pastureland,
          fertilizer, seed, othercost, veterinar
          "April labor", "May labor", "summer la
          cattlefeed, total / ;
Set  measures 'output measures'
        / "Net Income",  "Land Use", "Dry Croppi
          "Livestock", "Resource Value", "Produc
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:37
Comparative Analyses with GAMS
https://www.gams.com/latest/docs/UG_ComparativeAnalysis.html
2/14


Note that the table for the parameter summary will contain
rows for the commodities which are elements of the set alli
and columns for all elements of the set measures.
We will use a third GAMS file, mancomp.gms,for our
comparative analysis. The code of this third GAMS file follows:
Note that this code first solves the original model that also
contains the set definitions for the report, displays the initial
prices and generates a report. In a second step the price for
beef is changed to $0.70, the modified model is solved, the
prices for the first alternative scenario are displayed and a
report is generated. In a third step the price for corn is
changed to $2.70, the model is solved again, the prices for the
second alternative scenario are displayed and a third report is
generated. Note that in the second alternative scenario (the
third solve) the beef price is $0.70, since it was not reset to base
levels after the second run.
There will be three tables associated with the parameter
summary in the listing file, one for each solve. The first table
reports the results associated with the base case:
Parameter summary(alli,measures)   'Farm Summary
$include farmcomp.gms
display price;
$include farmrep.gms
price("beef") = 0.70;
solve farm using LP maximizing netincome;
display price;
$include farmrep.gms
price("corn") = 2.70;
solve farm using LP maximizing netincome;
display price;
$include farmrep.gms
----    279 PARAMETER summary  Farm Summary
             Net Income    Land use  Dry Cropp~ 
Corn                                      20.00 
Soybeans                                 480.00 
Beef                                            
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:37
Comparative Analyses with GAMS
https://www.gams.com/latest/docs/UG_ComparativeAnalysis.html
3/14


The second table reports the results from the first alternative
scenario where the price for beef was changed to $0.70:
And the third table reports the results from the second
alternative scenario where the price for corn was changed to
$2.70 and the price for beef stayed at $0.70:
cattle                                          
Water                                           
Cropland                     700.00             
Pastureland                  130.00             
April Labor                                     
May Labor                                       
Oct Labor                                       
Cattlefeed                                      
Total         162685.05                  500.00 
----    351 PARAMETER summary  Farm Summary
             Net Income    Land use  Dry Cropp~ 
Corn                                      22.84 
Soybeans                                 489.86 
Beef                                            
cattle                                          
Cropland                     673.55
Pastureland                  130.00             
April Labor                                     
May Labor                                       
Sept Labor                                      
Oct Labor                                       
Cattlefeed                                      
Total         373686.10                  512.70 
----    423 PARAMETER summary  Farm Summary
             Net Income    Land use  Dry Cropp~ 
Corn                                      31.98 
Soybeans                                 410.24 
Beef                                            
cattle                                          
Water                                           
Cropland                     642.22
Pastureland                  130.00             
April Labor                                     
May Labor                                       
Sept Labor                                      
Oct Labor                                       
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:37
Comparative Analyses with GAMS
https://www.gams.com/latest/docs/UG_ComparativeAnalysis.html
4/14


This quick way to do a comparative analysis has the following
drawbacks:
The relevant output is spread over more than 140 lines.
There is no cross-scenario report.
The price of beef in the second alternative scenario is
problematic, since it was not automatically reset to the
original base price.
The handling of solves and report writing is repetitive.
The first two issues will be addressed in section Writing Cross-
Scenario Reports,a solution for the third issue will be given in
section Resetting Data to Base Levels and an alternative
approach that will resolve the last issue is presented in section
An Automated Approach - Avoiding Repeated Work.
Writing Cross-Scenario Reports
We will generate a cross-scenario report by introducing two
new sets and a new parameter in a revised version of the third
GAMS file, mancompb.gms:
Note that the set scenarios contains the base case and the
two alternative scenarios and the set ordr introduces places to
save the assumptions and results of the different runs. The new
parameter savsumm is similar to the parameter summary
introduced above, but it has two additional dimensions.
Observe that the first assignment copies the current setup of
the price vector and the second assignment copies the results
that are stored in the parameter summary.
The full code follows:
Cattlefeed                                      
Total         375839.30                  442.22 
Set scenarios / base, beefp, beefcorn /;
Set ordr      / "Scenario Setup", "Scenario Resu
Parameter savsumm(ordr,*,alli,scenarios)  'Compa
savsumm("Scenario Setup","price",primary,"base")
savsumm("Scenario Results",measures,alli,"base")
$include farmcomp.gms
$include farmrep.gms
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:37
Comparative Analyses with GAMS
https://www.gams.com/latest/docs/UG_ComparativeAnalysis.html
5/14


Observe that the last index in the assignments for savsumm is
"base" after the first solve, "beefp" after the second solve
and "beefcorn" after the third solve. Note that option
statement in the penultimate line of the code customizes the
output generated by the display statement that follows. For
details see section Local Display Control. The listing file will
contain the following output:
Set ordr / "Scenario Setup", "Scenario Results" 
Set scenarios / base, beefp, beefcorn /;
Parameter savsumm(ordr,*,alli,scenarios)  'Compa
savsumm("Scenario Setup","price",primary,"base")
savsumm("Scenario Results",measures,alli,"base")
price("beef") = 0.70;
solve farm using LP maximizing netincome;
display price ;
$include farmrep.gms
savsumm("Scenario Setup","price",primary,"beefp"
savsumm("Scenario Results",measures,alli,"beefp"
price("corn") = 2.70;
display price ;
solve farm using LP maximizing netincome;
$include Farmrep.gms
savsumm("Scenario setup","price",primary,"beefco
savsumm("Scenario Results",measures,alli,"beefco
option savsumm:2:3:1;
display savsumm;
----    436 PARAMETER savsumm  Comparative Farm 
                                                
Scenario Setup  .price         .Corn            
Scenario Setup  .price         .Soybeans        
Scenario Setup  .price         .Beef            
Scenario Results.Net Income    .Total         16
Scenario Results.Land use      .Cropland        
Scenario Results.Land use      .Pastureland     
Scenario Results.Dry Cropping  .Corn            
Scenario Results.Dry Cropping  .Soybeans        
Scenario Results.Dry Cropping  .Total           
Scenario Results.Irr Cropping  .Corn            
Scenario Results.Irr Cropping  .Total           
Scenario Results.Livestock     .cattle          
Scenario Results.Resource Value.Water           
Scenario Results.Resource Value.Cropland        
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:37
Comparative Analyses with GAMS
https://www.gams.com/latest/docs/UG_ComparativeAnalysis.html
6/14


In this cross-scenario report all output is in one table and it is
easy to compare the base case with the two alternative
scenarios.
We could also add percentage change calculations by
introducing a further parameter, savsummp:
Note that both assignment statements are conditional
assignments. The first assignment computes percentage
changes rounded to one decimal place and the second
assignment sets the percentage change to NA if the value in the
base case is zero. The output generated by the display
statement follows:
Scenario Results.Resource Value.Pastureland     
Scenario Results.Resource Value.April Labor     
Scenario Results.Resource Value.May Labor       
Scenario Results.Resource Value.Sept Labor      
Scenario Results.Resource Value.Oct Labor       
Scenario Results.Product Value .Corn            
Scenario Results.Product Value .Soybeans        
Scenario Results.Product Value .Beef            
Scenario Results.Product Value .Cattlefeed      
Parameter savsummp(ordr,*,alli,scenarios) 'Compa
savsummp(ordr,measures,alli,scenarios)$savsumm(o
   round{ [savsumm(ordr,measures,alli,scenarios)
   / savsumm(ordr,measures,alli,"base"),1 };
savsummp(ordr,measures,alli,scenarios)
   $[(savsumm(ordr,measures,alli,"base") = 0) an
   = na;
option savsummp:1:3:1;
display savsummp;
----    450 PARAMETER savsummp  Comparative Farm
                                                
Scenario Results.Irr Cropping  .Corn            
Scenario Results.Irr Cropping  .Total           
Scenario Results.Livestock     .cattle          
Scenario Results.Resource Value.Water           
Scenario Results.Resource Value.Cropland        
Scenario Results.Resource Value.Pastureland     
Scenario Results.Resource Value.April Labor     
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:37
Comparative Analyses with GAMS
https://www.gams.com/latest/docs/UG_ComparativeAnalysis.html
7/14


Resetting Data to Base Levels
In the example above the price for beef was changed to $0.70
for the first alternative scenario and it stayed at $0.70 in the
second alternative scenario, since we did not reset it manually
to the base level. However, in most cases users find it
preferable to reset all data to base levels before a new scenario
is run. This may be done by saving the base level data in a new
parameter, say saveprice, and then resetting the data to base
levels before each scenario. In the following final version of the
third GAMS file, mancompc.gms, the levels of the commodity
prices are reset before each new run:
Scenario Results.Resource Value.May Labor       
Scenario Results.Resource Value.Sept Labor      
Scenario Results.Resource Value.Oct Labor       
Scenario Results.Product Value .Corn            
Scenario Results.Product Value .Beef            
Scenario Results.Product Value .Cattlefeed      
$include farmcomp.gms
$include farmrep.gms
Parameter saveprice(alli) 'saved prices';
saveprice(alli) = price(alli);
Set scenarios / base, beefp, beefcorn /;
Parameter savsumm(ordr,*,alli,scenarios)  'Compa
savsumm("Scenario Setup","price",primary,"base")
savsumm("Scenario Results",measures,alli,"base")
price(alli) = saveprice(alli);
price("beef" ) = 0.70;
solve farm using LP maximizing netincome;
display price ;
$include farmrep.gms
savsumm("Scenario setup","price",primary,"beefp"
savsumm("Scenario Results",measures,alli,"beefp"
price(alli) = saveprice(alli);
price("corn") = 2.70;
display price ;
solve farm using LP maximizing netincome;
$include farmrep.gms
savsumm("Scenario setup","price",primary,"beefco
savsumm("Scenario Results",measures,alli,"beefco
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:37
Comparative Analyses with GAMS
https://www.gams.com/latest/docs/UG_ComparativeAnalysis.html
8/14


In this section we demonstrated how to do a comparitive
analysis manually, including a cross-scenario report and
resetting the data before each new scenario is run. However,
there is still a lot of repetition in how the solves and reports
are handled. This issue will be addressed in the next section.
An Automated Approach - Avoiding
Repeated Work
The basic structure of a comparative analysis that avoids
repetitive instructions for solves and report writing is outlined
in the Figure below. Note that the first three boxes represent
preparatory steps that are the usual parts of a GAMS program:
the initial data is set up, the model is defined and solved. The
comparative model analysis begins with the box labeled "Step
1". In Step 1 names for the scenarios are introduced and the
scenario data is defined. In Step 2 the base data that will be
changed during the scenario runs are saved in a new
parameter. We will use this parameter later to restore the data
to their base levels before each new scenario run. Starting with
Step 3 we enter a loop, where the looping set is the set of
scenarios introduced in Step 1. As usual, the statements in the
loop are executed for each scenario to be analyzed. The first
statement restores the data to their base levels (Step 3). Thus
we will always start with the same data. In Step 4 the data and
the model is updated for the current scenario and in Step 5 the
model solved. In Step 6 a report for the individual scenarios is
generated. In Step 7 parameters for cross-scenario comparative
reports are saved. In Step 8 we check if more scenarios are to
be solved and if this is the case, we return to repeat Steps 3-8
until all scenarios are completed. Finally, we display a
comparative report that presents the information saved across
scenarios.
option savsumm:2:3:1;
display savsumm;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:37
Comparative Analyses with GAMS
https://www.gams.com/latest/docs/UG_ComparativeAnalysis.html
9/14


This flow chart is implemented in the file compare.gms that is
given below. Note that it is based on the farm profit-maximizing
example discussed in section Manual Approach above. All sets
and parameters were introduced in the sections above, only the
table scenprice in the implementationof Step 1 is new.
*Step 1 - Setup scenarios
Set ordr      / "Scenario Setup", "Scenario Resu
Set scenarios / base, beefp, beefcorn /;
Parameter savsumm(ordr,*,alli,scenarios) 'Compar
Table     scenprice(primary,scenarios)   'price 
                base    beefp   beefcorn
corn                               2.70
soybeans
beef                     0.70            ;
*Step 2 - Save data
Parameter savprice(primary) 'save primary commod
savprice(primary) = price(primary);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:37
Comparative Analyses with GAMS
https://www.gams.com/latest/docs/UG_ComparativeAnalysis.html
10/14


Note that the main feature that facilitates this automatic
approach is a loop statement. Loop statements are introduced
and discussed in section The Loop Statement. Note further, that
in Step 4 we used a conditional assignment to restrict the
change of data to those primary commodities that have
nonzero entries for the respective scenario in parameter
scenprice. For details on conditional assignments, see section
Conditional Assignments.
Adding A Scenario
Given the implementation of an automated comparative
analysis above, it is easy to add a new scenario. Only two small
modifications are needed: a name for the new scenario has to
be added to the set scenarios and the respective data has to
be added to the table scenprice. Both changes are in Step 1.
The lines of the respective code are given below:
*Step 3 - Reset data to base level
loop(scenarios,
    price(primary) = savprice(primary);
*Step 4 - Change data to levels needed in scenar
    price(primary)$scenprice(primary,scenarios) 
    display price;
*Step 5 - Solve model
   solve farm using LP maximizing netincome;
*Step 6 - Single scenario report writing
   $include farmrep.gms
*Step 7 - Cross-scenario report writing
    savsumm("Scenario Setup","price",primary,sce
    savsumm("Scenario Results",measures,alli,sce
*Step 8 - End of loop
    );
*Step 9 - Compute and display final results
option savsumm:2:3:1;
display savsumm;
Set scenarios / base, beefp, beefcorn, new/;
Table scenprice(primary,scenarios)  'price alter
                base    beefp   beefcorn  new
corn                               2.70
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:37
Comparative Analyses with GAMS
https://www.gams.com/latest/docs/UG_ComparativeAnalysis.html
11/14


Note that we added a third alternative scenario called new,
where the price of soybeans is changed to $4.32.Note further,
that the remainder of the code is not changed. Once the new
scenario is added to the set scenarios and the respective
data is specified in the table, it will enter the loop and thus all
the statements in the loop will be executed for the new
scenario.
Observe that the new scenario above was similar to the other
scenarios: the price for a primary commodity was modified.
However, in some cases new scenarios require that other data,
like resources, are changed. For example, assume that in a new
scenario the landtype "cropland" is increased by 30%. Note
that the available resources were defined in the parameter
available(alli), where available("cropland") equals
700. To accomodate this new scenario we will add the following
lines of code to Steps 1 to 4:
Note that in Step 1 we added a new table, scenavailable, to
specify the resource alternations by scenario. Observe that the
values of scenavailable will be used as multipliers in Step 4.
In Step 2 we introduced the parameter saveavailable, that
will play a similar role for the available resources like the
parameter savprice does for the prices of the primary
soybeans                                  4.32
beef                     0.70                 ;
*Step 1 - Setup scenarios
Set scenarios / base, beefp, beefcorn, new /;
Table scenavailable(alli,scenarios)  'resource a
                base    beefp   beefcorn  new
cropland                                  1.3;
*Step 2 - Save data
Parameter saveavailable (alli) 'save available r
saveavailable (alli) = available (alli);
*Step 3 - Reset data to base level
loop(scenarios,
    available (alli) = saveavailable (alli);
*Step 4 - Change data to levels needed in scenar
    available(alli)$scenavailable(alli,scenarios
       available(alli)*scenavailable(alli,scenar
    display price, available;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 15:37
Comparative Analyses with GAMS
https://www.gams.com/latest/docs/UG_ComparativeAnalysis.html
12/14


commodities: the base levels are saved in this parameter and
we will use it to restore the values of available to their base
levels before each new scenario run. This is implemented with
the new assignment in Step 3. In Step 4 the data levels of the
parameter available are modified as required for the current
scenario using a conditional assignment. Note the similarities
to the assignment for updating the values of price in Step 4
above. Steps 5 to 9 remain unchanged. Thus we achieved an
automated comparative analysis with an additional scenario
where another parameter is modified by adding just a few lines
of code. The full code is given in the GAMS file
compareother.gms.
Changing the Structure of a Model
Many studies require modifications of the structure of a model.
In GAMS, context-sensitive model structures may be
implemented with dollar conditions. Dollar conditions may be
used to control equations as well as specific terms.
To illustrate, we will extend the profi-maximizing farm model
from the previous sections to include a conditional constraint
that limits the number of cattle. This constraint will be only
active if a scalar that varies with the scenarios is nonzero.
Consider the lines of code that follow. Note that the set
animals is a subset of the set alli, the elements of the set
livemanage denote various ways of managing crops and
animals, and liveprod is a positive variable for livestock
production.
$include farmcomp.gms
$include farmrep.gms
Scalar   cowlim   'activates cowlimit constraint
Equation cowlimit 'conditional equation on cow l
cowlimit$cowlim..   sum((animals,livemanage), li
Model farmcowlim /all/;
Set ordr      / "Scenario setup", "Scenario Resu
Set scenarios / base, cowlim /;
Parameter savprice(primary) 'save primary commod
savprice(primary) = price(primary);
Parameter cowlims(scenarios) 'cowlimit by scenar
          / base 0, cowlim 1/;
loop(scenarios,
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:37
Comparative Analyses with GAMS
https://www.gams.com/latest/docs/UG_ComparativeAnalysis.html
13/14


Note that in the loop the value of the scalar cowlim is updated
before each scenario is run. Note further, that this value
determines whether the new equation cowlimit will be active
or not. The complete code is given in the GAMS file
comparemod.gms.
Ranging analysis
Some users are interested in getting ranging output in the form
of LP cost and right hand side ranging results. Unfortunately,
the base version of GAMS does not yield such information. The
user wishing such information has two alternatives. First, one
may cause the model to be repeatedly solved under a set of
values for the key parameter using the procedures discussed
above, but this is cumbersome if a lot of parameters are
involved. Second, one can use solver dependent features of
GAMS that can be retrieved into a GAMS parameter. Please refer
to the solver manuals (e.g. for GAMS/CPLEX: Sensitivity
Analysis) for further information how to use them.
    cowlim = cowlims(scenarios);
    solve farmcowlim using LP maximizing netinco
);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:37
Comparative Analyses with GAMS
https://www.gams.com/latest/docs/UG_ComparativeAnalysis.html
14/14


Good NLP Formulations
In this tutorial we
offer some
advice and
guidance on how
to set up or
formulate an NLP
model so that a
solver will be
able compute a
good solution
and do so
quickly, reliably,
and predictably.
Much of this
applies to other
model classes
allowing
nonlinear
functions, but for
ease and
simplicity of
exposition we
focus on the NLP
case here.
A good
formulation for
an NLP model
typically involves
several things,
including
specifying
sensible initial
values, setting
Table of Contents
Specifying Initial Values
Setting Variable Bounds
Avoiding Expressions in Nonlinear
Functions
Scaling Variables and Equations
Blocking Degenerate Cycling
Reformulating DNLP Models
Reformulating and
Approximating the Function ABS
Reformulating and
Approximating the Function MAX
Reformulating and
Approximating the Function MIN
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 15:36
Good NLP Formulations
https://www.gams.com/latest/docs/UG_NLP_GoodFormulations.html
1/13


variable bounds,
and scaling
variables and
equations. Other
factors to
consider are techniques for blocking degenerate cycling and
the potential benefits of avoiding expressions in nonlinear
functions. Finally we look at reformulations and
approximations for discontinuous functions like abs, max and
min in section Reformulating DNLP Models.
Specifying Initial Values
The variable levels and equation marginals in GAMS are
typically passed to a solver to be used as the initial point. The
initial values specified are especially important for NLP models
for several reasons:
Non-convex models may have multiple local solutions.
Local NLP solvers search for a local solution and return it
when it is found. An initial point in the neighborhood of
a desired solution is more likely to return that solution.
Initial values that (almost) satisfy many of the
constraints reduce the work involved in finding a first
feasible solution.
Initial values that are close to a local optimum reduce
the work required to find that local optimum, therefore
reducing solution time.
The progress of the optimization algorithm is based on
good directional information, i.e on good derivatives. The
derivatives in a nonlinear model depend on the current
point, so an improved initial point can improve solver
performance.
Variable levels and equation marginals are specified by setting
the variable attribute .L and the equation attribute .m before
solution. This is often done with assignments that occur before
the solve statement, e.g.:
domPrice.L(i,region,t) = domPrice0(i,region,t);
flowLim.m(arcs) = 1;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:36
Good NLP Formulations
https://www.gams.com/latest/docs/UG_NLP_GoodFormulations.html
2/13


Note
The default value for the variable levels and
equation marginals is 0.
The variable bounds also play a role in determining the initial
point passed to the NLP solver. When a solve occurs, the levels
for all variables in the model are first projected onto the set
defined by the variable bounds. Thus, setting a variable's lower
bound to a positive value ensures that the initial value of this
variable will never be zero. This is very useful, since in many
cases zero is an unsuitable initial value for nonlinear variables.
For example, based on the product term 
, an initial value of
zero for  will lead to an initial derivative value of zero wrt , so
it will appear as if the function does not depend on . Variables
at zero can also cause numerical difficulties with logarithms,
real powers, or divisions. These difficulties occur not just at
zero but also for very small values (i.e. values very close to
zero) as well.
We recommend to specify as many sensible initial values for
the nonlinear variables as possible. It may be desirable to
initialize all variables to 1 or to the scale factor if the GAMS
scaling option is used. A better alternative is to first select
reasonable values for some variables that are known from
context or experience to be important and then to use some of
the equations of the model to compute the values for other
variables. For example, consider the following equation, where
pm, pwm and er are variables and tm is a parameter:
The following assignment statements use the equation to
derive consistent initial values for the variable pm from sensible
initial values for the variables pwm and er:
pmDef(i)..   pm(i) =e= pwm(i)*er*(1+tm(i));
pwm.L(i) = 1;
er.L = 1;
pm.L(i) = pwm.L(i)*er.L*(1+tm(i));
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:36
Good NLP Formulations
https://www.gams.com/latest/docs/UG_NLP_GoodFormulations.html
3/13


It would be a mistake to assign only to pwm and er and assume
that the solver will choose to adjust the variable pm to make
the equation feasible: it could choose to adjust pwm or er
instead. With all the assignments above made, we can be
assured that the equation pmDef will be satisfied at the initial
point.
Setting the initial point by loading a prior solution that has
been saved via the savepoint mechanism is also an effective
strategy that is very easy to implement.
Setting Variable Bounds
Lower and upper bounds on variables are set by assigning
values to the variable attributes .lo and .up in the following
way:
Lower and upper bounds on variables in nonlinear models
serve multiple purposes. Some bounds represent constraints
based on the reality that is being modeled. For example, a
certain production level must be non-negative or an arc in a
network has a flow capacity of at most ten. These bounds are
called model bounds. Other bounds help the algorithm by
preventing it from moving far away from any optimal solution
and/or into regions with singularities in the nonlinear
functions or unreasonably large function or derivative values.
These bounds are called algorithmic bounds. Solver
performance can be improved and execution errors (see
domLim and domUsd) avoided when algorithmic bounds on
variables are introduced.
Model bounds are determined by the reality being modeled
and do not cause any problems. However, algorithmic bounds
must be carefully chosen by the modeler. We recommend to
pay particular attention if a variable is the argument in log(x),
log10(x) or exp(x) and if a variable occurs in the denominator of
a division. If log(x) or log10(x) appears in a model, where x is a
price.lo(i,region,t) = 1e-4;
flow.up(arcs) = arcCap(arcs);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:36
Good NLP Formulations
https://www.gams.com/latest/docs/UG_NLP_GoodFormulations.html
4/13


variable, we recommend a lower bound of 1.e-3 for x since
log(x) gets very small as x approaches zero and is undefined
for negative values of x. In addition, the first derivative gets
very large as x approaches zero. If exp(x) features in a model,
where x is a variable, we recommend an upper bound between
20 and 25 for x. If a variable x appears in the denominator, we
recommend a lower bound of 1.e-2 for x, since 1/x is
extremenly nonlinear for small arguments. Small values for
variables used with negative exponents are also not desirable.
Solver performance can be improved and execution errors
avoided when one introduces algorithmic bounds on variables.
Note that lower and upper bounds facilitate finding a feasible
solution as most solvers will honor bounds at all times, but
inequalities are not necessarily satisfied at intermediate points.
A further advantage of variable bounds compared to
inequalities is improved presolve performance: NLP solver
preprocessors will typically incur little or no computational
overhead due to variable bounds.
Avoiding Expressions in Nonlinear
Functions
It is often useful to avoid nonlinear functions of expressions
(e.g. a division by the sum of many variables). Instead, an
intermediate variable can be used for the expression. This
applies in particular if the expressions depend on many
variables. Consider the following example:
This example could be reformulated via the intermediate
variable xsum and its defining equation xsumdef in the
following way:
variable x(i), y;
equation ydef;
ydef..   y =e= 1 / sum(i, x(i));
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:36
Good NLP Formulations
https://www.gams.com/latest/docs/UG_NLP_GoodFormulations.html
5/13


In the equation ydef, the intermediate variable xsum appears
in the denominator instead of the original summation. This
allows us to impose a lower bound on the variable xsum to
avoid dividing by zero. Of course, the model will contain more
rows and columns if intermediate variables are introduced, but
this increase in size is offset by a decrease in complexity and, in
many cases, by an increase in sparsity as well.
Scaling Variables and Equations
Recall that nonlinear programming algorithms use the
derivatives of the objective function and the constraints to find
good search directions and they use function values to
determine if constraints are satisfied or not. The relative size of
the derivatives and the function values is influenced by the
units of measurement that are used for the variables and
constraints, and will have an effect on the performance of the
solver and the result computed. Therefore, a proper, consistent
scaling of the model is important to the success of the solution
algorithm and the quality of the answer returned.
For example, assume that two goods are equally costly: both
cost $1 per kg. However, the first is specified in grams and the
second in metric tons, so that their coefficients in the cost
function will be vastly different: $1000 per gram and $0.001 per
ton respectively. If cost is measured in $1000 units, then the
coefficients will be 1 and 1.e-6 respectively. This discrepency in
size may cause the algorithm to ignore the variable with the
smaller coefficient, since the coefficient is comparable to some
of the zero tolerances. To avoid such problems, the units of
measurements need to be carefully chosen, that is, variables
and constraints need to be properly scaled.
We recommend scaling with the following goals in mind:
variable x(i), y, xsum;
equation xsumdef, ydef;
xsumdef..   xsum =e= sum(i, x(i));
ydef   ..   y =e= 1/xsum;
xsum.lo = 1.e-2;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:36
Good NLP Formulations
https://www.gams.com/latest/docs/UG_NLP_GoodFormulations.html
6/13


Solution level values of variables should fall into a range
around 1, e.g. from 0.01 to 100.
The magnitude of the nonzero constraint marginals at
solution should fall into a range around 1, e.g. from 0.01
to 100.
The magnitude of the derivatives of the nonlinear terms
(i.e. the Jacobian elements) should fall into a range
around 1, e.g. from 0.01 to 100, both at the initial point
and at the solution.
The constants in the equations should have absolute
values around 1, e.g. from 0.01 to 100.
Well-scaled variables are measured in appropriate units. In
most cases users should select the unit of measurement for the
variables such that their expected value is around unity. Of
course, there will always be some variation. For example, if
x(i) is the production at location i, one could select the same
unit of measurement for all components of x, say, a value
around the average capacity.
In well-scaled equations the individual terms are measured in
appropriate units. After choosing units for the variables users
should choose the unit of measurement for the equations such
that the expected values of the individual terms are around 1.
For example, if these rules are followed, material balance
equations will usually have coefficients of 1 and -1.
Usually well-scaled variables and equations result in well-
scaled derivatives. To check whether the derivatives are well-
scaled, we recommend running the model with a positive value
for the option limrow and inspecting the coefficients in the
equation listing of the GAMS list file.
For more about scaling in GAMS, see section Model Scaling -
The Scale Option. Note that while many solvers have internal
scaling procedures, a better result can generally be achieved by
a judicious choice of units by the model developer.
Blocking Degenerate Cycling
Most commercial linear programming solvers use a
perturbation technique to avoid degenerate cycling during the
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:36
Good NLP Formulations
https://www.gams.com/latest/docs/UG_NLP_GoodFormulations.html
7/13


solution process: they temporarily add small numbers to the
right-hand sides of equations. In general, NLP solvers do not
have such an internal feature. Sometimes the success and
performance of an NLP solver can be enhanced by a manual
perturbation formulation.
In particular, if users observe that the NLP solution process has
a large number of iterations where the solver does not make
significant progress in altering the objective function value, we
recommend to modify the equations in the model by replacing
the value of zero on the right-hand side with a small number.
This may accelerate the solution process. Assume that we have
the following equation:
This could be reformulated as:
Here we set  to 1 if we wish to keep the addition and to zero
otherwise. The value of 0.001 is just an example and needs to
be adjusted based on the model context. The number should
be chosen such that it does not introduce significant
distortions into the problem solution. Such an addition quite
frequently reduces solution time by helping the solver avoid
degenerate cycling. If it is done correctly, the resulting model
solution is not qualitatively different from the original model
solution. Users may also first solve the model with 
 and
subsequently with 
 to get rid of the effects of the small
numbers.
We recommend that user avoid using the same number but
instead use some systematically varying number or a random
number. The technique of adding a small number on the right-
hand side may also be used in problems where many equations
have the same nonzero value on the right-hand side.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:36
Good NLP Formulations
https://www.gams.com/latest/docs/UG_NLP_GoodFormulations.html
8/13


Reformulating DNLP Models
Nonlinear models in GAMS belong to one of the following two
classes: smooth and discontinuous. Typically, all functions with
endogenous arguments contained in the model are smooth
functions (i.e. functions with continuous derivatives) like sin,
exp and log. These models can be solved using NLP. If any of
the endogenous functions in the model are not smooth (i.e. are
discontinuous), the model cannot be solved as an NLP: the
DNLP model type must be used instead. Examples of non-
smooth functions include ceil and sign, where the function
itself is not continuous, and max, min, and abs, where the
derivatives are not continuous. Typically, NLP solvers are
designed to work with continuous derivatives, and much of the
convergence theory behind them assumes this continuity.
Discontinuous functions or derivatives may cause numerical
problems, poor performance, spurious (i.e. wrong) solutions,
and other issues, so they should be used with special care and
only if necessary.
N.B.: to avoid a proliferation of model types, nonlinear
programming is the only model type split into smooth (NLP)
and nonsmooth (DNLP) variants. All other model types allowing
nonlinear functions (e.g. MINLP, MCP, CNS) include both smooth
and nonsmooth functions. This is not because nonsmooth
functions are less problematic in these contexts. It simply
became too unwieldy to maintain this distinction across all
types of nonlinear models.
A powerful and effective way to model discontinuous functions
is with binary variables, which results in a model of type MINLP.
The model [ABSMIP] demonstrates this formulation technique
for the functions abs, min, max and sign. Alternatively,
reformulations or approximations may be used to model
discontinuous functions such that the resulting model is of
type NLP. Here we offer some guidance on how to reformulate
or approximate the discontinuous functions abs, max and min
using only smooth functions and continuous variables and thus
transform a DNLP model into an NLP. This transformation is
generally more reliable than solving the original as a DNLP.
Note that some of the reformulations suggested below enlarge
the feasible space. They rely on the objective function to
choose a solution that is contained in the original feasible
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 15:36
Good NLP Formulations
https://www.gams.com/latest/docs/UG_NLP_GoodFormulations.html
9/13


space, i.e. where the relationship defined by the nonsmooth
function holds. If the objective cannot be relied on to do this, it
is also possible to use one of the smooth approximations for
the nonsmooth functions defined below.
Reformulating and Approximating the Function
ABS
The function abs(x) returns the absolute value of the
argument x. If we are minimizing an absolute value, then we
can split this value into its positive and negative parts (both
represented by positive variables) and minimize the sum of
these variables. This formulation enlarges the feasible region
but the optimal solution will be the one where the sum of the
positive and negative parts is equal to the absolute value.
Note that the discontinuity in the derivative of the function abs
has been converted into lower bounds on the new variables
xPlus, xMinus, etc: these bounds are handled routinely by any
NLP solver. Note too that the feasible space is larger than
before. For example, many pairs xPlus and xMinus satisfy our
equation x =E= xPlus - xMinus;. However, our objective
ensures that one of xPlus and xMinus will be zero at the
solution so that the sum of xPlus and xMinus wil be the
absolute value of x.
variables x, y, z;
equations
  obj  '1-norm'
  f ;
obj.. abs(x) + abs(y) =E= z;
f  .. sqr(x-3) + sqr(y+5) =L= 1;
model nonsmooth  / obj, f /;
solve nonsmooth using dnlp min z;
positive variables xPlus, xMinus, yPlus, yMinus;
equations
  obj2 'smooth version of 1-norm'
  xDef
  yDef
  ;
obj2.. xPlus + xMinus + yPlus + yMinus =E= z;
xDef.. x =E= xPlus - xMinus;
yDef.. y =E= yPlus - yMinus;
model smooth / obj2, xDef, yDef, f /;
solve smooth using nlp min z;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:36
Good NLP Formulations
https://www.gams.com/latest/docs/UG_NLP_GoodFormulations.html
10/13


In case the objective function does not contain a term that tries
to minimize the absolute value, a smooth approximation can be
used instead of the reformulation described above. This
approximation should be close to the absolute value and also
have smooth derivatives. Such an approximation for
abs(f(x)) is:
Here delta is a small scalar. The value of delta controls the
accuracy of the approximation and the curvature around
f(x)=0. The approximation error is largest when f(x)=0 and
decreases as f(x) gets farther from zero. A value for delta
ranging between 1.e-3 and 1.e-4 should be appropriate in most
cases. Users could also use a larger value in an initial
optimization, reduce it and solve the model again. If delta is
reduced below 1.e-4, then large second order terms might lead
to slow convergence or even prevent convergence. An example
of this approximation used for the previous example is below:
Note the use of the macro facility to encapsulate the smooth
reformulation. As mentioned above, this approximation has its
largest error where f(x)=0. If it is important to get accurate
values at this point, then we recommend the following
alternative approximation:
Note that the only difference is the subtraction of the constant
term delta. In this case, the error will equal zero at f(x)=0
and it will increase to -delta as f(x) moves away from zero.
sqrt(sqr(f(x)) + sqr(delta))
$macro MYABS(t,d) [sqrt(sqr(t)+sqr(d))]
equation obj3;
obj3.. MYABS(x,1e-4) + MYABS(y,1e-4) =E= z;
model approx / obj3, f /;
solve approx using nlp min z;
sqrt(sqr(f(x)) + sqr(delta)) - delta
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:36
Good NLP Formulations
https://www.gams.com/latest/docs/UG_NLP_GoodFormulations.html
11/13


Reformulating and Approximating the Function
MAX
The function max(x1,x2,x3,...) returns the maximum value
of the arguments, where the number of the arguments may
vary. Typically, the equation
is replaced by two inequalities:
Here x, y and t are variables and f(x) and g(y) are some
functions depending x and y respectively. Provided the
objective function has some term that tries to minimize t, one
of the constraints will become binding at solution and t will
equal the maximum of the two terms. The extension to more
than two arguments in the function max should be obvious. A
simple example follows:
In case the objective function does not force the max-term to
be minimized, a smooth approximation for max(f(x),g(y))
can be used, as in the following example code:
t >= max(f(x),g(y))
t >= f(x)
t >= g(y)
variables
  x  / LO 0, L 0.2, UP [pi/2] /
  mx 'max[sin(x),cos(x)]'
  z  'objective var'
  ;
equation oDef;
oDef.. x / 100 + max[sin(x),cos(x)] =E= z;
model nonsmooth  / oDef /;
solve nonsmooth using dnlp min z;
equations oDef2, sinBnd, cosBnd;
oDef2.. x / 100 + mx =E= z;
sinBnd.. mx =G= sin(x);
cosBnd.. mx =G= cos(x);
model smooth / oDef2, sinBnd, cosBnd /;
solve smooth using nlp min z;
[f(x) + g(y) + sqrt(sqr(f(x)-g(y)) + sqr(delta))
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:36
Good NLP Formulations
https://www.gams.com/latest/docs/UG_NLP_GoodFormulations.html
12/13


Here delta is a small scalar, preferably ranging from 1.e-2 to
1.e-4. The approximation error takes its maximum of delta/2
when f(x)=g(y) and decreases as one moves away from this
point. To shift the error away from the point of discontinuity,
the following approximation can be used:
Reformulating and Approximating the Function
MIN
The reformulation of and approximation to the min function is
similar to the max case above and will not be repeated in full
here. Briefly,
is replaced by:
and is effective as long as the objective maximizes t. If not, this
smooth approximation for min(f(x),g(y)) can be used:
$macro MYMAX(t1,t2,d) [0.5 * [t1 + t2 + sqrt(sqr
equation oDef3;
oDef3.. x / 100 + MYMAX(sin(x),cos(x),1e-4) =E= 
model approx / oDef3 /;
solve approx using nlp min z;
[f(x) + g(y) + sqrt(sqr(f(x)-g(y)) + sqr(delta))
t =e= min(f(x),g(y))
t =l= f(x)
t =l= g(y)
[f(x) + g(y) - sqrt(sqr(f(x)-g(y)) + sqr(delta))
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:36
Good NLP Formulations
https://www.gams.com/latest/docs/UG_NLP_GoodFormulations.html
13/13


Good Coding Practices
The GAMS
language is quite
flexible regarding
the syntax and
format of the
code it accepts,
offering users
considerable
latitude in how
they organize
and format their
GAMS code. Most
modelers
develop their
own style as they
gain experience
with the GAMS
system. This
tutorial reflects
the coding
preferences of
Bruce A. McCarl
(currently
professor of
Agricultural
Economics at
Texas A&M
University). Note
that Bruce has
extensive
experience with
GAMS, both as a
modeler and an
Table of Contents
Using Longer Names and
Descriptive Text
Including Comments on
Procedures and the Nature and
Sources of Data
Choosing Raw Data Instead Of
Computed Data
Avoiding the Universal Set in the
Context of Data Input
Defining Sets and Subsets Wisely
Structuring and Formatting Files to
Improve Readability
Other Suggestions
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 15:35
Good Coding Practices
https://www.gams.com/latest/docs/UG_GoodPractices.html
1/13


educator, and
many GAMS users
know, use, and
benefit from his
work. The goal of
this tutorial is not to present a rigid set of rules to follow
arbitrarily, but rather to help users develop their own coding
preferences and style. The larger goal is to build self-
documenting models that are easy to read and understand, to
edit, and to debug: both for the developer working in the
present, and for a larger group of colleagues and consultants
working with the model over a span of months or years.
We will cover the following topics:
Using Longer Names and Descriptive Text
Including Comments
Choosing Raw Data Instead Of Computed Data
Avoiding the Universal Set in the Context of Data Input
Defining Sets and Subsets Wisely
Structuring and Formatting Files to Improve Readability
Other Suggestions
Using Longer Names and
Descriptive Text
The readability of GAMS code may be significantly improved by
using longer self-explanatory names for identifiers (e.g. names
of sets, parameters, variables, etc). Consider the following lines
of code from the production and inventory model [ROBERT]:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:35
Good Coding Practices
https://www.gams.com/latest/docs/UG_GoodPractices.html
2/13


These lines may be reformatted in the following way (see
(good.gms)):
Sets  p     'products'       / low, medium, high
      r     'raw materials'  / scrap, new /
      tt    'long horizon'   / 1*4 /
      t(tt) 'short horizon'  / 1*3 /;
Table  a(r,p)  input 'coefficients'
          low  medium  high
 scrap      5     3      1
 new        1     2      3;
Table  c(p,t)  'expected profits'
            1    2    3
 low       25   20   10
 medium    50   50   50
 high      75   80  100;
Variables  x(p,tt)  'production and sales'
           s(r,tt)  'opening stocks'
           profit;
 Positive variables x, s;
 Equations  cc(t)    'capacity constraint'
            sb(r,tt) 'stock balance'
            pd       'profit definition' ;
 cc(t)..       sum(p, x(p,t)) =l= m;
 sb(r,tt+1)..  s(r,tt+1) =e= s(r,tt) - sum(p, a(
 pd..          profit =e= sum(t, sum(p, c(p,t)*x
                        - sum(r, misc("storage-c
                        + sum(r, misc("res-value
 s.up(r,"1") = misc("max-stock",r);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:35
Good Coding Practices
https://www.gams.com/latest/docs/UG_GoodPractices.html
3/13


Note that the two formulations are equivalent in their effect,
but in the second formulation longer, more descriptive names
were used for the sets, tables, variables and equations. In
addition, longer names were used for the set elements and in
the definition of the set process the set elements have
additional explanatory text. Observe that the second
formulation is easier to understand. This will be particularly
useful if and when the code is revisited in 5 years' time.
Sets process          'available production proc
       / low    'uses a low amount of new materi
         medium 'uses a medium amount of new mat
         high   'uses a high amount of new mater
     rawmateral        'source of raw materials'
     Quarters          'long horizon'           
     quarter(Quarters) 'short horizon'          
 Table  usage(rawmateral,process)  'input coeffi
          low  medium  high
 scrap      5     3      1
 new        1     2      3
 Table  expectprof(process,quarters)  'expected 
         spring summer fall
 low        25    20    10
 medium     50    50    50
 high       75    80   100;
 Variables  production(process,Quarters)    'pro
            openstock(rawmateral,Quarters)  'ope
            profit ;
 Positive variables production, openstock;
 Equations  capacity(quarter)               'cap
            stockbalan(rawmateral,Quarters) 'sto
            profitacct                      'pro
 capacity(quarter)..
        sum(process, production(process,quarter)
 stockbalan(rawmateral,Quarters+1)..
      openstock(rawmateral,Quarters+1) =e=
      openstock(rawmateral,Quarters)
      - sum(process, usage(rawmateral,process)
                   *production(process,Quarters)
 profitacct.. profit =e=
   sum(quarter,
       sum(process, expectprof(process,quarter)
                    *production(process,quarter)
     - sum(rawmateral, miscdata("store-cost",raw
                       openstock(rawmateral,quar
     + sum(rawmateral, miscdata("endinv-value",r
                      *openstock(rawmateral,"win
 openstock.up(rawmateral,"spring") = miscdata("m
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:35
Good Coding Practices
https://www.gams.com/latest/docs/UG_GoodPractices.html
4/13


Note
Recall that GAMS allows long names for
identifiers and labels (set elements). Users
may exploit this feature to introduce long
descriptive names. However, note that names
for labels that are longer than 10 characters
do not work well in multi-column displays.
See the paragraph on customizing display
width for details.
Use explanatory text for identifiers to
indicate units, sources, descriptions, etc. It's
not that hard to do and it pays dividends
later.
Similarly, use explanatory text for set
elements as appropriate.
For example, the descriptive text in the in the second line in the
following code snippet is much more informative than the text
in the first line:
Note that the descriptive text will be displayed whenever the
respective identifier is displayed. Hence, including units in the
text will save time if results will have to be interpreted later.
Including Comments on Procedures
and the Nature and Sources of Data
We recommend that the documentation of the code offers
answers to the following questions:
What are the units of the variables and parameters?
Where did the data come from?
What are the characteristics of the data such as units and
year of applicability?
Parameter vehsales(r)   'regional vehicle sales'
Parameter vehsales(r)   'regional vehicle sales 
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:35
Good Coding Practices
https://www.gams.com/latest/docs/UG_GoodPractices.html
5/13


Why was a constraint set up in the way it is
implemented?
In addition, it is often helpful to add comments that describe
assumptions, the intent of equation terms, data sources,
including document name, page number, table number, year of
applicability, units, URL etc.
Consider the following example where various forms of
comments are illustrated:
For more information on comments in GAMS, see section
Comments.
Choosing Raw Data Instead Of
Computed Data
Modelers often have a choice how they enter data: they could
either use raw data and transform it to the extent needed
inside GAMS or process data externally and enter the final
results into GAMS.
The second choice may be attractive if the raw data is available
in a spreadsheet where it can be manipulated before it is
introduced to GAMS. However, over time spreadsheets and
other data manipulation programs change or get lost and often
these programs are not documented well. Therefore, we
recommend to enter data into GAMS in a form that is as close
as possible to the actual collected data and then manipulate
* this is a one line comment that could describe
$ontext
My data could be described in this multi-line co
This is the second line
$offtext
* The following dollar control option activates 
* and redefines the symbol for end-of-line comme
$eolCom #
x = sum(i, z(i)) ; # this is an end-of-line comm
* The following dollar control option activates 
* and redefines the symbols for in-line comments
$inLineCom (*  *)
x = sum(i, z(i)) ; (* this is an in-line comment
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:35
Good Coding Practices
https://www.gams.com/latest/docs/UG_GoodPractices.html
6/13


the data with GAMS to obtain the desired form. This will make it
much easier to update models later or to work out implicit
assumptions.
Avoiding the Universal Set in the
Context of Data Input
While GAMS permits using the universal set * as an index in a
parameter or table statement, in most cases it is not advisable
to do so. Consider the following example from the production
and inventory model [ROBERT]:
Note that the definition of the table misc indicates that any
entry in the first index position is allowed. There is no domain
checking. Consequently, if the label res-value is misspelled
as res-val in the equation pd, GAMS will compile and execute
the program without signaling an error, but instead of the
expected values (i.e. misc(r,"res-value")), the values of
misc(r,"res-val") will be used in the equation. These zero
values will lead to faulty results, and the modeler will not be
alerted to this fact. To ensure that the results of a GAMS run are
reliable and trustworthy, we strongly recommend to use
domain checking by introducing a new set for the labels in the
first index position of the table misc:
Sets   r          'raw materials'  / scrap, new 
Table  misc(*,r)  'other data'
            scrap  new
 max-stock    400  275
 storage-c     .5    2
 res-value     15   25   ;
...
pd.. profit =e= sum(t, sum(p, c(p,t)*x(p,t))
              - sum(r, misc("storage-c",r)*s(r,t
              + sum(r, misc("res-value",r)*s(r,"
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:35
Good Coding Practices
https://www.gams.com/latest/docs/UG_GoodPractices.html
7/13


Observe that the new set miscitem contains exactly the labels
that appear in the rows of the table misc. Hence the set
miscitem may be used in the first index position of the
definition of misc without loss of generality, but with the
benefit of domain checking.
Defining Sets and Subsets Wisely
Generally, the elements of a set have a feature in common or
they are similar in some way. In this section we will give some
guidance on how to partition the labels in the data into sets. In
addition, we will discuss in which contexts it is useful to
introduce subsets. For an introduction to sets in GAMS, see
chapter Set Definition.
For example, suppose we have three grades of oil and three
processes to crack it. The question arises whether we should
introduce one set with nine elements or two sets with three
elements and a two-dimensional set. We recommend the
second alternative.
In another example, we consider a budget for farm spending:
we have annual (i.e. cumulative yearly) spending for fertilizer
and for seed and also monthly spending for labor and for
water. There are 26 decisions or items in the budget. We could
introduce a set with 26 elements or we could use the following
formulation:
Sets   r         'raw materials'
         / scrap, new /
       miscitem  'misc input items'
         / max-stock, storage-c, res-value /;
Table  misc(miscitem,r)  'other data'
            scrap  new
 max-stock    400  275
 storage-c     .5    2
 res-value     15   25   ;
Sets resources  / fertilizer, seed, labor, water
     periods    / jan, feb, mar, apr, may, jun, 
     use(resources,periods)
                / (fertilizer,seed).annual
                      (labor,water)    .(jan,feb
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:35
Good Coding Practices
https://www.gams.com/latest/docs/UG_GoodPractices.html
8/13


We recommend the formulation above and to err on the side of
being more extensive or exact with set definitions.
Occasionally it is necessary to group some labels into one set
for a certain purpose and then single out some of them for
another purpose. Subsets facilitate modeling such a case. For
example, a set of all cities in a model may be needed to enter
distances and compute related transportation costs. In
addition, a subset can be used to specify the cities that are
hubs for some activity, since some equations should be
restricted to these hubs.
Structuring and Formatting Files to
Improve Readability
In this section we will offer some guidlines on structuring and
formatting the GAMS code to make it easy to read.
There are several ways to structure the GAMS code. Two styles
are outlined in section Organization of GAMS Programs. The
following recommendation to enter the sections of the code in
a fixed order is an extended version of the first style:
1. Set definitions for sets that are data related
2. Parameter, scalar and table definitions, possibly
intermixed with calculations
3. Variable definitions
4. Equation declarations
5. Equation definitions (algebraic specification of
equations)
6. Model and solve statement(s)
7. Definitions of sets and parameters for report writing
8. Calculations for report writing
9. Display statement(s) for reports
Note that the code will be easiest to navigate if each section of
the code contains only one type of statements. For example,
interspersing set definitions with parameter definitions will
make the code unnecessarily difficult to read.
In addition to following a fixed structure, it is also essential to
properly format the code. Of course, formatting is in many
respects a matter of taste. The following list offers some ideas:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 15:35
Good Coding Practices
https://www.gams.com/latest/docs/UG_GoodPractices.html
9/13


Align the names of identifiers and descriptive text, as
demonstrarted in the examples in this tutorial and in the
GAMS User's Guide in general.
Use spacing and indents.
Use blank lines to highlight something and to mark
sections of the code.
Ensure that variables and all their index positions are on
one line in equation definitions.
Indent in indexed operations like sums and programming
flow control structures like loops and if statements to
delineate terms. The structure of a long and complex
statement may be revealed through careful indentation
and thoughtful placement of closing parentheses.
We will demonstrate the effect of proper formatting with the
following two examples. The first example contains valid GAMS
code, but is deliberately poorly formatted:
The second example contains the same code as the first
example, but is carefully formatted:
Sets  products  'available production process' /
medium 'uses medium new materials', high 'uses h
rawmateral    'source of raw materials'  / scrap
Quarters    'long horizon'   / spring, summer, f
quarter(Quarters) 'short horizon'  / spring, sum
Variables  production(products,Quarters)  'produ
openstock(rawmateral,Quarters)  'opening stocks'
Positive variables production, openstock;
Equations  capacity(quarter)  'capacity constrai
stockbalan(rawmateral,Quarters) 'stock balance',
profitacct  profit definition ;
profitacct.. profit =e= sum(quarter, sum(product
products,quarter) *production(products,quarter))
rawmateral,miscdata("store-cost",rawmateral)*ope
  ,quarter)))+ sum(rawmateral, miscdata("endinv-
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:35
Good Coding Practices
https://www.gams.com/latest/docs/UG_GoodPractices.html
10/13


Observe that inserting blank lines, aligning the names of
identifiers and descriptive text, and indenting and formatting
closing parentheses in the sums makes the code much easier
to read and understand (both now and in the future) and is well
worth adopting as standard practice when writing GAMS code.
Other Suggestions
We will complete this tutorial by offering some other useful
suggestions that may help modelers develop their own
conventions.
Even though GAMS is case insensitive, it is advisable to
establish some convention on the use of upper and lower case
letters. For example, Paul N. Leiby (currently at Oak Ridge
National Laboratory) uses lower case for texts and comments,
and upper case for GAMS reserved words and variable and
parameter names. The casing used when an identifier or label
is first encountered in a GAMS program is the casing stored by
Sets products          'available production pro
       / low    'uses a low amount of new materi
         medium 'uses a medium amount of new mat
         high   'uses a high amount of new mater
     rawmateral        'source of raw materials'
     Quarters          'long horizon'           
     quarter(Quarters) 'short horizon'          
Variables  production(products,Quarters)   'prod
           openstock(rawmateral,Quarters)  'open
           profit ;
Positive Variables production, openstock ;
Equations  capacity(quarter)               'capa
           stockbalan(rawmateral,Quarters) 'stoc
           profitacct                      'prof
profitacct..
    profit =e=
    sum(quarter,
       sum(products, expectprof(products,quarter
                    *production(products,quarter
           )
      - sum(rawmateral, miscdata("store-cost",ra
                       openstock(rawmateral,quar
           )
       )
   + sum(rawmateral, miscdata("endinv-value",raw
                   *openstock(rawmateral,"winter
       )
  ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:35
Good Coding Practices
https://www.gams.com/latest/docs/UG_GoodPractices.html
11/13


GAMS and used in subsequent outputs like the listing file or a
GDX file. Any casing can be used (so noWhere is equivalent to
nowHere) but the casing stored is determined by first use.
A similar situation holds for label quoting: the type of quotes
stored (if any) are determined by first use.
Note that the dollar control option $onSymList will cause a list
of all identifier names to be displayed in the compilation
output of the output file. This list may be used to review the
spelling and casing of the identifiers as they will appear in
output files. Similarly, the dollar control option $onUELList will
cause an ordered list of all labels to be displayed in the
compilation output of the output file. This is useful for checking
both the case and order of the labels used in the GAMS
program. For more on issues related to label ordering, see
section Ordered and Unordered Sets.
To keep track of the data types of identifier names, some
modelers always start set names with s_, names of parameters
with d_ (for "data"), variables names with v_ and equation
names with e_.
Some experienced GAMS users always surround explanatory
text with quotes: this makes the text stand out, prevents it from
being interpreted as a label or identifier, and allows special
characters like $, - and & to be used.
If a file is used by several modelers and is updated
occasionally, a file modification log at the top of the file will be
in order. It should contain the following information: the
modification date, version number, modification(s) made and
who made the modification. For example, a set called version
may be used to keep track of the dates the input files were
modified:
Note that the display statement will generate a display of all
elements of the set version, each indicating on which day a
Set version(*,*,*,*);
. . .
version("my_file","May","19","2016") = yes;
version("my_include_file","Sep","30","2016") = y
. . .
display version;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:35
Good Coding Practices
https://www.gams.com/latest/docs/UG_GoodPractices.html
12/13


component of the model was modified.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:35
Good Coding Practices
https://www.gams.com/latest/docs/UG_GoodPractices.html
13/13


Using GAMS Studio
This tutorial on
using GAMS
Studio was
written initially
by and is
distributed by
courtesy of Bruce
A. McCarl 1).
Bruce has
extensive
experience with
GAMS, both as a
modeler and an
educator, and
many GAMS users
know, use, and
benefit from his
work. This
tutorial presents
a guided tour to
the usage of
GAMS Studio and
on some items it
reflects Bruce's
personal view
and preferences.
What Is
It?
A multi platform
(not only PCs
Using STUDIO after Installation
Getting Started
Create or open an existing
GMS file
Prepare file for execution
Make sure right file is
executed
Run GAMS by clicking the
run button
Navigate with process
window
Navigate with LXI window
Working with your own files
The Welcome and Explorer
Windows
Fixing Compilation Errors
Ways to find and/or replace text
strings
Matching Parentheses
Moving Blocks
Syntax Coloring
Showing where a symbol appears
Accessing Documentation Via the
Help
Making GDX files
Examining GDX files
A difficulty you will have
Command Line Parameters
Solver Option Files
Using Libraries
Using reference files - Listing and
Unraveling Data items
All Symbols Tab
Sets, Parameters etc. Tabs
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
1/32


with Windows)
graphical
interface to run
GAMS
GAMS uses two phases.
1. Text edit
First, one uses a text editor and creates a file which
contains GAMS instructions.
2. File submission
Second, one submits that file to GAMS which executes
those instructions causing calculations to be done,
solvers to be used and a solution file of the execution
results to be created.
Approaches to use GAMS.
1. More batch oriented traditional method use a text editor
set up the model then use DOS (or UNIX) command line
instructions to find errors in and run the model.
2. GAMS STUDIO or GAMS IDE alternatives. Graphical
interfaces to create, debug, text edit and run GAMS files.
Summary of steps to using
1. Install GAMS and STUDIO on your computer
2. Open STUDIO through the icon
3. Open or create a file by going to the file selection in the
upper left corner.
4. Prepare the file so you think it is ready for execution
5. Run the file with GAMS by clicking the run button or
pressing F9
6. Open and navigate around the output
g
p
When is it Not Worth Using?
What does it not do?
What does it not do so well?
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
2/32


Installation
Install GAMS and STUDIO
GAMS STUDIO is automatically installed when GAMS is installed
and you get the choice of whether to use STUDIO or the IDE as
primary editor. To install do the following steps
1. Download the GAMS installation file from www.gams.com
under Resources and Download
2. Start the installation
Installer should place an icon on the desktop yielding
Using STUDIO after Installation
During the install you will find
Which allows you to choose which graphical interface to use as
the default. For now choose STUDIO.
Open STUDIO through the icon
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
3/32


Open the File menu choice. Select a file.
Note, the file location determines where all generated files are
placed (to place files elsewhere use the save as dialogue) and
where GAMS looks for files when executing. I recommend that
you make sure your file is in a place where you want it also
making sure that place contains all associated files ie this is the
file storage directory for this endeavor.
Fix defaults and suppress cursor driven object highlighting.
When first opening Studio go to settings and I would make sure
check marks are as follows especially the checked ones in the
red boxes and the unchecked green one
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
4/32


Here selecting the Process Log and possibly the Explorer are of
interest.
The Explorer will open automatically when a file is opened and
the Process Log will open when a solve is done. I usually hide
the Explorer and sometimes want to get rid of the Process
window.
Getting Started
Create or open an existing GMS file
Several cases are possible
1. Create a new file (covered later)
2. Open an existing file – at first this will be in
then you see something like
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
5/32


3. Open the GAMS model library explorer under the GAMS
tab or press F6 (this is the simplest for first time users
and the one we will use)
Select a model like trnsport.gms
It will be automatically saved in the last directory you used or
in the STUDIO default Workspace directory.
Prepare file for execution
When using model library trnsport.gms should now appear as
part of your STUDIO screen.
The STUDIO contains a full-featured editor. Go through the file
and change what you want.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
6/32


You can also customize the appearance somewhat through the
settings choice under the File menu.
There you can change font size (under editor), tabs, default file
location (called workspace) and some other features on how
GAMS runs. For now leave it alone.
Make sure right file is executed
Unlike a lot of other programs, STUDIO does not necessarily
execute the file you have been working on rather executing
what it calls the "main" file.
In particular, if you activate the explorer view then the main file
is the one marked with a green triangle as below. If the triangle
is not marking the file to be run you need to right click on that
file and then choose Set as main file. In turn the triangle will
move.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
7/32


Run GAMS by clicking the run button
The Process Log window (green) will then appear which logs
the steps executed in running the model. The LST file (red) and
the navigation window (magenta) also appear. Note to save
space I would close the Explorer window and drag the Process
Log window (green) to the bottom or the right hand side. The
process window on the bottom is illustrated here and it is on
the right side on the following picture.
Here it is after reconfiguring by dragging the Process Log up and
to the right then resizing and repositioning.
Now use the process window (green) to navigate the LST file or
open created files. By double clicking on lines in that window
you access the LST file at particular locations or open created
files. What and where you access is determined by the color of
the line you click on.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
8/32


Color of
Line
Function and Destination When Double Clicked
Blue
line
Opens LST file and jumps to corresponding
place.
Non-
bolded
black
line
Control click on this takes you to LST file. Double
click on error message takes you to spot in LST
file.
Red line
Marks errors encountered. Cursor is positioned
at first red line. When clicked on cursor jumps to
Source (GMS) file location of error. Control click
takes you to error location in LST file. Error
description text is in execution process log and
in LST file. You can use a little red icon in source
to jump to error message in LST file or a green
arrow in the LST to go to error location in source.
Green
line
Causes studio to open a file that was created
during the run like a GDX, PUT or REF file
Navigate with process window
After double-clicking on any non-red line, or if we used the
automatically open list file option our main editing window is
augmented by the LST file (green) (see the magenta tabs)
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
9/32


We can navigate as we would with an editor or word processor,
as we are automatically in STUDIO text editor.
Sometimes I want to get the process window and explorer out
of the way. I can do this through the view window and also
through the icons (red) on the right side of the top bar
Clicking on these opens and closes the explorer and the
process window.
Navigate with LXI window
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
10/32


Navig. Line
Function and Destination When Clicked.
Compilation
Jumps to top of echo print in LST file
Error Mess.
Jumps to list of error messages when errors
present
Equat. listing
Jumps to list of equation contents
Equation
Expandable allowing jump list of equation
contents
Variab.
listing
Jumps to list of variable
Variable
Expandable allowing jump to list of variable
contents
Model stat.
Jumps to model statistics part of LST file
Solut.Report
Jumps to model summary solution report
SolEQU
Expandable allowing jump solution for each
equation
SolVAR
Expandable allowing jump to solution for
variable
Execution
Jumps to beginning of post solve execution
Display
Jump to displays of specific parameters and
other items
Working with your own files
Now you are ready to work with your own files. You may already
have a file or you may need to create one.
Creating a new file - Two principal ways
1. Open an existing file through the library or from a
location on your hard disk. Then use the save as dialogue
from the file menu to change its name. Now modify
contents to what you want. You may cut and paste as in
other Windows programs.
2. Open the file menu and use the new option. You will
then be prompted for a name (I called it mine) with the
extension .gms and then have a blank screen (green) into
which you may type GAMS instructions
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
11/32


Save that file wherever you want and reopen it that will
become the new default directory (this only occurs upon
an open not a save as) and any subsequent non library
opens, simple includes or saves will go there. Imports
from the library go to the default workspace.
The Welcome and Explorer Windows
As you have worked with STUDIO you will find it shows a
Welcome (magenta) window (unless you told it not to in
settings), that remembers previous files plus gives access to
documentation.
There as of now you get links to files recently used, and links to
some documentation.
Also on the left hand side is an Explorer (green) window that
shows recent files and allows you to open by double clicking.
This remains whether you are in the welcome page or editing
files unless it is not checked in the View dialogue.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
12/32


Fixing Compilation Errors
No one is perfect, errors always occur. The STUDIO can help you
in finding and fixing those errors.
Let's look at an example with a small typo to illustrate (note:
source vs. sorce). A run yields the windows below where the
right part is the process window (green) positioned to show the
first error and the center is the lst file (magenta) positioned to
show the first error.
The red lines in the process window mark errors with error
messages just below. To see where the errors occurred click on
the very first red line which opens the source file or look at the
LST file where the marking $ appears
A click on the red line takes you to the place in the source
where the error was made. The tip here is always start at the
top of the process file when doing this.
A double click on a black line takes you to the error location in
the LST file.
Also in the source file window note the small red circle that
appears on the line with the error
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
13/32


Clicking on that transfers you to the LST file where the error
message appears.
And there a small gray circle with an arrow in it that when
clicked on will transfer you back to the source file
Ways to find and/or replace text
strings
For finding you can use the search menu under the Edit tab or
control F
Subsequently you get
Which allows both search and replace. As of now this opens
with the last option you used and may start with initially with
an all files setting.
After the search you find
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
14/32


Where all occurrences of the search term in the current file are
highlighted in yellow and to the right there is a list of all files
that contain that search term (green) in all of the directories
corresponding to files opened in the explorer.
The search dialogue is straight forward with arrow keys to jump
to next (F3 also works for forward and shift F3 for backward)
and the all files can be manipulated as shown (in yellow).
Matching Parentheses
The STUDIO provides you with a way of checking on how the
parentheses match up in your GAMS code. This involves
positioning your cursor just before an open parentheses or just
after a close (Just after also works if there are not multiple
parentheses). In either case the corresponding close or open is
highlighted in green. Additionally positioning the cursor right
before the beginning parentheses and tapping Ctrl + b will
lead you to the matching ending parentheses whether it be 1,
100, or 1000+ lines away and vice versa.
When the expression in parentheses carries on the several lines
the marking is in multiple lines and Ctrl + b will transfer
position back and forth
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
15/32


This feature will also match up { } or [ ] with a red marking if
the types don’t match.
Moving Blocks
The STUDIO allows one to move text blocks through standard
Cut and Paste Operations in two fashions.
1. One can identify a continuous block of text with the
mouse or the keyboard (the latter involves putting the
cursor at a beginning point then hold the shift key down
and use the arrow keys).
2. One can identify a column block of text (blue) with the
mouse or the keyboard (these involve holding alt and
shift down then moving the mouse or the cursor with the
arrow keys.
In turn copy, cut, and paste can be done with the Edit menu or
with control c, x and v respectively as in normal windows.
Control insert also pastes.
Also if one types with a column block highlighted than the
character goes in all rows of the block and replaces what was
there before
with an * typed becomes
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
16/32


Syntax Coloring
A feature in the STUDIO is syntax coloring. The STUDIO
recognizes a subset of the GAMS syntax and reflects this in the
display colors. Note in the display below that commands,
explanatory text and set elements are differentially colored.
For now unlike in the IDE one cannot alter these syntax colors.
Showing where a symbol appears
Studio has a feature that identifies where a symbol is used.
Taking the library file agreste.gms and positioning the cursor
over a symbol like c (blue) then double clicking places a (gray)
highlight over all visible instances of that symbol
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
17/32


Accessing Documentation Via the
Help
To access GAMS documentation choose help or F1
And if you choose documentation you get access through a
window in lower right corner as shown. Therein you can
navigate, search, and look at the index.
If your cursor is on a reserved word in the source file and you
press F1 an index opens to all treatments of that word although
in some strange places.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
18/32


There is a document that explains features in the STUDIO and a
YouTube video that can be accessed through the welcome page
or in the general GAMS documentation under Tools.
Making GDX files
STUDIO can create and show GDX files. To create in STUDIO use
the GAMS tab and choose a GDX creating choice. Alternatively
use one of the other ways in the language as we will discuss
elsewhere.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
19/32


To browse a GDX file open it with the file open dialogue or click
on green lines for ones created during a run in the process
window and then for the transport example
Here in the left-hand panel one gets an alphabetical listing of
the items in the GDX file and their characteristics. Then clicking
on a left-hand panel item leads to the item contents being
revealed in the right hand panel. As of now you can reorder
columns and filter values then in table mode can move things
in rows into columns and vice versa.
Examining GDX files
When you have opened a GDX file and selected an item then
you get a window like that on the previous page
If in the right-hand panel you dragged i to the right of value
(brown below) you get
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
20/32


Also by clicking on the header you cause the array to be sorted
with a ^ marking the sort order and by clicking on
you can establish a filter (green above and brown below) and
choose what elements to display (blue below).
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
21/32


A difficulty you will have
When using and teaching both the IDE and STUDIO, I find that
file locations sometimes gives me fits. I have a rule of thumb to
avoid problems, but you will most likely inadvertently not
follow it.
When working with a model with multiple files make sure they
are located in the same directory location.
You do not have to follow this rule but deviations are the same
as asking for trouble. When you are actively working on a file
that you have opened from a directory then STUDIO will look
for files in the directory where active file is located.
Also when you run a file which contains includes GAMS will look
in the directory where the active file is located.
Command Line Parameters
Experienced DOS or UNIX based GAMS users are used to having
command line parameters associated with their GAMS
execution commands. In STUDIO a command line parameter
entry box (magenta) is available just to the right of the execute
button. The parameters are associated with a file and STUDIO
will remember these whenever the file is opened.
This is particularly useful for save, restart, limrow, limcol, pw
and rf parameters as once they are defined they are associated
with every subsequent use of the file.
As of now there is no way to provide command line parameters
for use in every run (like a wide page width) as there was in the
IDE.
GAMS provides assistance with command line parameters
through the command line parameter editor. To activate it
check the
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
22/32


symbol at the far right (red) up top. Then part of the screen
becomes as below. In the left hand part existing command line
parameters (purple) in use (magenta) are listed along with
their values. On the right all possible command line parameters
are listed with definitions (green) and a search dialogue is
provided (blue).
The search dialogue looks for text in any of the fields, thus
typing in wid brings up page width as does pw and maxi brings
up those with maximum in the description.
Note pressing F1 while the cursor is on a command line entry
opens help to a place with a detailed description of that
parameter.
Solver Option Files
STUDIO allows you to edit or create a solver option file. When
using the solver Conopt you create conopt.opt or with Cplex
use cplex.opt (or .op1 or .o10 or .111) and more generally
solvername.opt. Specifying such a file allows you to
manipulate the way the solver works on the model. For
example, you can alter scaling, tolerances, iteration limits,
solver algorithm, and branch and bound strategy along with
many other things.
Now in Studio the option file editor is accessed by either
Right clicking on the group name (red) for a group where
you want an option file then choosing add new solver
option file (blue) and picking the appropriate solver
name (magenta)
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
23/32


Creating a file like baron.opt then when you bring that
up in the editor the option file editor appears. In the
editor you see options in use (blue), possibilities and
definitions (red)
Using Libraries
STUDIO allows one to access libraries under the GAMS menu
item and choosing the Model Library Explorer (purple).
In turn this opens a screen which identifies names of the
libraries in tabs with a count of included files and, for the tab
selected, the library contents. Furthermore across the top are
tabs that when clicked on cause sorts. The picture below came
after I clicked on the tab name with the model library active
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
24/32


Users can define their own libraries. They have to define what's
called a GLB file and the formatting creation of this is discussed
in my newsletter in the second issue:
https://www.gams.com/mccarl/newsletter/news2.htm.
Using reference files - Listing and
Unraveling Data items
GAMS has a command line parameter to create reference files
(aka. .ref files) called reference (short: rf). These files give
information on where things are defined and used.
Why? GAMS Modelers sometimes have to deal with complex
implementations that
Use include statements to incorporate numerous files.
Have been developed by others.
Have a complex structure with definitions and uses of
items widely spread in a file or files.
Contain items that are defined but never used.
Were developed some time ago but are not extensively
documented.
When faced with such cases one often asks
Are there items defined in the program that are not used
and if so what are they and where are they?
In what files is an item defined, declared and used?
To resolve these questions some years ago I wrote a Fortran
program called GAMSMAP but never made it widely available.
Subsequently it was included into the GAMSIDE and then
STUDIO.
When a .ref file is opened it creates a window as follows
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
25/32


The column on the left (red) gives tags that can be clicked on
and the key ones are
Column
Description
All
Symbols
a list of items that are declared and a count of
them
Set
a list of the sets that exist in the program and
a count
Variable
a list of the variables in the program and a
count
Parameter
a list of the parameters (items defined in
scalar, parameter or table statements) and a
count.
Equation
a list of the equations in the program and the
names of files in which they appear
Model
a list of the models that exist in the program
and the names of files in which they appear
Unused
a list of items that are declared or that are not
used anywhere in the model
File used
a list of the files included into the model
All Symbols Tab
The all symbols tab causes the output to appear as follows:
This shows all symbols used. The columns give
the symbol name (Name),
it’s type(Type),
its dimension (Dim),
the sets over which it is dimensioned (Domain)
the explanatory text used in it’s declaration (Text).
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
26/32


Things can be sorted by clicking on the column headings.
One can search for symbols using the box at the bottom
Sets, Parameters etc. Tabs
The display contains 5 lines that when activated give
information for sets, parameters etc. The resultant display lists
all items falling in a class (for all things that are sets or
parameters etc.) and information on their characteristics and
use. Specifically one gets output as follows (for the sets in this
case)
In this output once clicked on the entries tell the names of the
files in which certain things happen relative to the identified
items. The categories of things include the file name, line and
column where items are declared, defined and used as
discussed below.
Clicking on a line takes you to the file and place where the item
appears.
Clicking on a column name causes it to be sorted.
After clicking on an item one gets
Entries in location columns identify files where items are
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
27/32


Column
Description
Declared
places where the named item is declared in
a Set, Parameter, Table, Scalar, Variable,
Equation, Acronym, File or Model command.
This will be the first appearance.
Defined
places set elements or data are explicitly
entered. For equations this tells where the ..
specification begins.
Assigned
places where items appear on left hand side
of an assignment statement
Implicitly-
Assigned
places where an equation or variable has
data put into it by the results of a solve
statement.
Controlled
places where set is used in controlling a sum
or defining an equation
Ref
places where item is on left hand side of
assignment statement or in a model
equation
Clicking on lines here opens the subject file in the specific
place
File used Tab
The file used tab causes the output to appear as follows:
This gives the names of the files included in the program with
their full path references.
Unused Tab
The unused tab identifies items that are declared (in set
parameter etc. statements) but are never used on the right
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
28/32


hand side of an assignment (=) statement or in a model
equation:
which shows the same information as in the All Symbols tab
except when an item is clicked on one gets information on the
files where it is declared.
Steps to use the Reference File Viewer
The Reference File Viewer will only work after a particular
“reference file” has been created by a GAMS run. The file is
generated by adding the rf option to the command line call
entering a command in the command line box of Studio as
follows (a=c cause compilation only)
Once the file has been run with the rf option the logfile is
augmented with the (green) line identifying the .ref file name
as below
Double clicking on this opens the Reference File Viewer
window.
The run of GAMS with the rf option places the name of the
.ref file in green in the GAMS log file and double clicking on
that line causes the Reference File Viewer to be opened.
Several notes about the run
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
29/32


The rf= command specifies the name of the file the
Reference File Viewer will use. Generally, the Reference
File Viewer expects it to have the extension .ref.
The .ref file only covers the program components in a
run and does not include any information from restart
files. In general it is best to explicitly use all the files in
one program without use of save and restart.
It is often useful to just generate the reference file
without any execution on behalf of the GAMS program.
This is done by including the a=c option on the
command line or in the command parameter IDE box.
Editing Solver Option Files
Sometimes it is desirable to change solver specific options. This
includes modifying things like branch and bound strategy,
degree of scaling, barrier versus simplex solution approach,
solution tolerances etc. The specific options allowed are
described in the solver manuals. In addition Studio contains a
solver option file editor that presents a solver specific menu of
all possible options, default values and ones that have been
altered. This is activated by either
Opening or saving a file with solvername.opt (Like
MINOS.opt)
Right clicking on a group file name (red) in the Studio
Explorer then selecting add new solver option file (blue)
and subsequently selecting one of the many available
solver names (magenta and only a few shown). This will
create a file you then need to save.
Once it opens the general format of the solve option editor is
as follows. Note the specific content depends on the solver
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
30/32


chosen and in this case I use GAMSCHK.
Here in the right part we see a list of all possible options
(magenta) for this solver with boxes checked for those that are
in the option file. A brief description of default values (blue),
entry type (red), if relevant allowable settings (yellow) and a
one sentence description of the option (green). In the left part
we see the current entries (purple) in the option file and their
settings (purple).
Subsequently when this file is opened or its tab activated then
this solver option editor appears.
Note, pressing F1 while on an option opens help to a place with
a detailed description of that option.
When is it Not Worth Using?
There are costs and benefits of these approaches.
The STUDIO is much easier for simple models and can run
across platforms.
The DOS/command line approach is generally better for models
in customized environments.
A development strategy for more complex implementations
1. Use the STUDIO to get it right
2. Debug components of large models using save and
restart
3. Then use script files or DOS/UNIX with batch files such as
GAMS mymodel  -lo 0 -s ./t/save1
call myprogram.exe
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
31/32


What does it not do?
A number of IDE features are currently missing. Just to
inventory (note the last three are pretty unimportant to me.)
Ability to save output from the reference files
Ability to change the file associations when clicking on
them in Windows Explorer (you get more than I like at
the moment and sometimes I want more)
Project files (mixed blessing)
Text file differencing (can use other programs)
Spell checking
What does it not do so well?
Here are also some difficulties with it as of today
Washed out colors – on my machine the syntax and error
coloring is not very prominent.
Excessive library choices and no way to put the ones you
have no interest in somewhere out of the way. Plus any
user defined libraries are at the end and there is no way
to reorder.
1) Specialist in Applied Optimization, Distinguished Professor of
Agricultural Economics, Texas A&M University, Principal, McCarl
and Associates, mccarl[at]tamu.edu, brucemccarl[at]gmail.com,
http://agecon2.tamu.edu/people/faculty/mccarl-bruce/
GAMS moremod  -lo 0 -r ./t/save1
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 15:34
Using GAMS Studio
https://www.gams.com/latest/docs/UG_studio_tutorial.html
32/32


User's Guide
This
documentation
guides GAMS
users through
several topics in
the GAMS system.
Table of Contents
Installation
Tutorials and Examples
GAMS Language and Environment
Glossary
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 15:41
User's Guide
https://www.gams.com/latest/docs/UG_MAIN.html#UG_INSTALL
1/5


Installation
This part leads step by step through the installation process on
three main platforms:
Supported Platforms
Installation Notes for macOS
Installation Notes for Unix
Installation Notes for Windows
Standard Locations
Note
Information on licensing can be found on our
website.
Tutorials and Examples
This part describes step by step through several selected
tutorials and a small number of examples.
A GAMS Tutorial by Richard E. Rosenthal
Quick Start Tutorial
Good Coding Practices
Fixing Compilation Errors
Finding and Fixing Execution Errors and Performance
Problems
Comparative Analyses with GAMS
Good NLP Formulations
Data Exchange with Other Applications
Data Exchange with Text Files
Data Exchange with Microsoft Excel
Data Exchange with Databases
Executing GAMS from other Environments
Using GAMS Studio
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:41
User's Guide
https://www.gams.com/latest/docs/UG_MAIN.html#UG_INSTALL
2/5


There are also tutorials and examples of the Application
Programming Interfaces
.NET Tutorial and Examples
C++ Tutorial and Examples
Java Tutorial and Examples
Python Tutorial and Examples
GAMS Language and Environment
This part introduces the components of the GAMS language in
an ordered way, interspersed with detailed examples that are
often drawn from the model library.
Introduction - an introduction to the GAMS User's Guide.
GAMS Programs - The structure of the GAMS language
and its components
Set Definition - The declaration and initialization of sets,
subsets, and domain checking.
Dynamic Sets - The membership assignment, the usage
of dollar controls, and set operations.
Sets as Sequences: Ordered Sets - Special features used
to deal with a set as if it were a sequence.
Data Manipulations with Parameters - The declaration
and assignment of GAMS parameters.
Data Entry: Parameters, Scalars and Tables - Three basic
forms of GAMS data types : Parameters, Scalars and
Tables.
Variables - The declaration and attributes of GAMS
variables.
Equations - The definition and declaration of GAMS
equations.
Model and Solve Statements Model - The specificiation
of a GAMS model and how to solve it.
Conditional Expressions, Assignments and Equations -
The conditional assignments, expressions and equations
in GAMS.
The Display Statement - The syntax, control, and label
order in display.
Programming Flow Control Features - The GAMS
programing flow control features : loop, if-elseif, while,
and for statements.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:41
User's Guide
https://www.gams.com/latest/docs/UG_MAIN.html#UG_INSTALL
3/5


The Option Statement - The list and detailed description
of options.
System Attributes - The system attributes
The Grid and Multi-Threading Solve Facility - The basic
concepts and Grid Features.
Special Features for Mathematical Programs - Special
features in GAMS that do not translate across solvers, or
are specific to certain model types.
The following discusses the execution of GAMS, the use of
special features, and other miscellaneous topics.
GAMS Output - The control of GAMS compilation output,
execution output, output produced by a solve statement,
and error reporting.
GAMS Log
The GAMS Call and Command Line Parameters - The list
and detailed description of GAMS command line
parameters.
Dollar Control Options - The list and detailed description
of dollar control options.
The Put Writing Facility - The put writing facility of the
GAMS language.
Solver Usage - Controlling solvers.
The Save and Restart Feature - The GAMS save and
restart feature and the work file.
Embedded Code Facility - The Embedded Code Facility
(e.g. how to embed Python code into GAMS).
GAMS Connect - The GAMS Connect Framework.
Extrinsic Functions - The extrinsic function library and
comparison with external equations.
External Equations - A facility for connecting code
written in different programming languages to equations
and variables in a GAMS model.
GAMS Return Codes - The structure of error codes, the
return codes of the GAMS compiler and execution
system, and the driver return codes.
GAMS Data eXchange (GDX) - GAMS Data eXchange (GDX)
facilities and utilities for Binary Data Exchange.
Extended Mathematical Programming (EMP) - Extended
Mathematical Programming (EMP).
Accessing Model Libraries - Introduction of GAMS Model
Library.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 15:41
User's Guide
https://www.gams.com/latest/docs/UG_MAIN.html#UG_INSTALL
4/5


Mathematical Programming System for General
Equilibrium analysis (MPSGE) - A mathematical
programming system for general equilibrium analysis
which operates as a subsystem within GAMS.
Introduction to MPSGE
MPSGE Models in GAMS
Demand Theory and General Equilibrium: An
Intermediate Level Introduction to MPSGE
Constant Elasticity of Substitution Functions: Some
Hints and Useful Formulae
A Library of Small Examples for Self-Study
Linking Implan Social Accounts to MPSGE
The MPSGE guide is also available as PDF
Glossary
An alphabetical list of GAMS terms is available in the Glossary.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:41
User's Guide
https://www.gams.com/latest/docs/UG_MAIN.html#UG_INSTALL
5/5


A GAMS Tutorial by Richard
E. Rosenthal
Table of Contents
Introduction
Structure of a GAMS Model
Sets
Data
Data Entry by Lists
Data Entry by Tables
Data Entry by Direct Assignment
Variables
Equations
Equation Declaration
GAMS Summation (and Product)
Notation
Equation Definition
Objective Function
Model and Solve Statements
Display Statements
The .lo, .l, .up, .m Database
Assignment of Variable Bounds
and/or Initial Values
Transformation and Display of
Optimal Values
GAMS Output
Echo Prints
Error Messages
Reference Maps
Equation Listings
Model Statistics
Status Reports
Solution Reports
Summary
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
1/39


Introduction
Richard E. Rosenthal of the Naval Postgraduate School in
Monterey, California wrote a detailed example of the use of
GAMS for formulating, solving, and analyzing a small and simple
optimization problem. The example is a quick overview of GAMS
and its main features. Many references are made to other parts
of the documentation, but they are only to tell you where to
look for more details; the material here can be read profitably
without reference to the rest of the documentation.
The example is an instance of the transportation problem of
linear programming, which has historically served as a
'laboratory animal' in the development of optimization
technology. [See, for example, Dantzig (1963) 1) ] It is a good
choice for illustrating the power of algebraic modeling
languages like GAMS because the transportation problem, no
matter how large the instance at hand, possesses a simple,
exploitable algebraic structure. You will see that almost all of
the statements in the GAMS input file we are about to present
would remain unchanged if a much larger transportation
problem were considered.
In the familiar transportation problem, we are given the
supplies at several plants and the demands at several markets
for a single commodity, and we are given the unit costs of
shipping the commodity from plants to markets. The economic
question is: how much shipment should there be between each
plant and each market so as to minimize total transport cost?
The algebraic representation of this problem is usually
presented in a format similar to the following.
Indices:
 = plants
 = markets
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
2/39


Given Data:
Decision Variables:
Constraints:
Note that this simple example reveals some modeling practices
that we regard as good habits in general and that are
consistent with the design of GAMS. First, all the entities of the
model are identified (and grouped) by type. Second, the
ordering of entities is chosen so that no symbol is referred to
before it is defined. Third, the units of all entities are specified,
and, fourth, the units are chosen to a scale such that the
numerical values to be encountered by the optimizer have
relatively small absolute orders of magnitude. (The symbol $K
here means thousands of dollars.)
The names of the types of entities may differ among modelers.
For example, economists use the terms exogenous variable and
endogenous variable for given data and decision variable,
respectively. In GAMS, the terminology adopted is as follows:
indices are called sets, given data are called parameters,
decision variables are called variables, and constraints and
the objective function are called equations.
The GAMS representation of the transportation problem closely
resembles the algebraic representation above. The most
 = supply of commodity of plant  (in cases)
 = demand for commodity at market 
 = cost per unit shipment between plant  and
market 
 = amount of commodity to ship from plant  to
market 
where 
, for all , 
Observe supply limit at plant :    
 for all 
   (cases)
Satisfy demand at market :    
 for all    
(cases)
Objective Function:    Minimize 
    ($K)
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
3/39


important difference, however, is that the GAMS version can be
read and processed by a computer.
Table 1: Data for the transportation problem (adapted from
Dantzig, 1963) illustrates Shipping Distances from Plants to
Markets (1000 miles) as well as Market Demands and Plant
Supplies.
Plants ↓
New
York
Chicago
Topeka
←Markets
Seattle
2.5
1.7
1.8
350
San Diego
2.5
1.8
1.4
600
Demands
→
325
300
275
Supplies
↑
As an instance of the transportation problem, suppose there
are two canning plants and three markets, with the data given
in table Table 1. Shipping distances are in thousands of miles,
and shipping costs are assumed to be $90.00 per case per
thousand miles. The GAMS representation of this problem is as
follows:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
4/39


If you submit a file containing the statements above as input to
GAMS , the transportation model will be formulated and solved.
Details vary on how to invoke GAMS on different of computers,
but the simplest ('no frills') way to call GAMS is to enter the
word GAMS followed by the input file's name. You will see a
number of terse lines describing the progress GAMS is making,
including the name of the file onto which the output is being
written. When GAMS has finished, examine this file, and if all
$title a transportation model
Sets
     i   canning plants   / seattle, san-diego /
     j   markets          / new-york, chicago, t
Parameters
     a(i)  capacity of plant i in cases
       /    seattle     350
            san-diego   600  /
     b(j)  demand at market j in cases
       /    new-york    325
            chicago     300
            topeka      275  / ;
Table d(i,j)  distance in thousands of miles
                  new-york       chicago      to
    seattle          2.5           1.7          
    san-diego        2.5           1.8          
Scalar f  freight in dollars per case per thousa
Parameter c(i,j)  transport cost in thousands of
          c(i,j) = f * d(i,j) / 1000 ;
Variables
     x(i,j)  shipment quantities in cases
     z       total transportation costs in thous
Positive Variable x ;
Equations
     cost        define objective function
     supply(i)   observe supply limit at plant i
     demand(j)   satisfy demand at market j ;
cost ..        z  =e=  sum((i,j), c(i,j)*x(i,j))
supply(i) ..   sum(j, x(i,j))  =l=  a(i) ;
demand(j) ..   sum(i, x(i,j))  =g=  b(j) ;
Model transport /all/ ;
Solve transport using lp minimizing z ;
Display x.l, x.m ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
5/39


has gone well the optimal shipments will be displayed at the
bottom as follows.
You will also receive the marginal costs (simplex multipliers)
below.
These results indicate, for example, that it is optimal to send
nothing from Seattle to Topeka, but if you insist on sending one
case it will add .036 $K (or $36.00) to the optimal cost.
Structure of a GAMS Model
For the remainder of the tutorial, we will discuss the basic
components of a GAMS model, with reference to the example
above. The basic components are listed in table Table 2.
Table 2: The basic components of a GAMS model
             new-york     chicago      topeka
seattle        50.000     300.000
san-diego     275.000                 275.000
              chicago      topeka
seattle                     0.036
san-diego       0.009
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
6/39


Type
Component
Inputs
Sets
Data (Parameters, Tables, Scalars)
Variables
Assignment of Variable Bounds and/or Initial
Values (optional)
Equations
Model and Solve Statements
Display Statements (optional)
Outputs
Echo Prints
Reference Maps
Equation Listings
Status Reports
Solution Reports
There are optional input components, such as edit checks for
bad data and requests for customized reports of results. Other
optional advanced features include saving and restoring old
models, and creating multiple models in a single run, but this
tutorial will discuss only the basic components.
Before treating the individual components, we give a few
general remarks.
1. A GAMS model is a collection of statements in the GAMS
Language. The only rule governing the ordering of
Declaration
Assignment of members
Declaration
Assignment of values
Declaration
Assignment of type
Declaration
Definition
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
7/39


statements is that an entity of the model cannot be
referenced before it is declared to exist.
2. GAMS statements may be laid out typographically in
almost any style that is appealing to the user. Multiple
lines per statement, embedded blank lines, and multiple
statements per line are allowed. You will get a good idea
of what is allowed from the examples in this tutorial, but
precise rules of the road are given in the next Chapter.
3. When you are a beginning GAMS user, you should
terminate every statement with a semicolon, as in our
examples. The GAMS compiler does not distinguish
between upper-and lowercase letters, so you are free to
use either.
4. Documentation is crucial to the usefulness of
mathematical models. It is more useful (and most likely
to be accurate) if it is embedded within the model itself
rather than written up separately. There are at least two
ways to insert documentation within a GAMS model. First,
any line that starts with an asterisk in column 1 is
disregarded as a comment line by the GAMS compiler.
Second, perhaps more important, documentary text can
be inserted within specific GAMS statements.
5. As you can see from the list of input components above,
the creation of GAMS entities involves two steps: a
declaration and an assignment or definition. Declaration
means declaring the existence of something and giving it
a name. Assignment or definition means giving
something a specific value or form. In the case of
equations, you must make the declaration and definition
in separate GAMS statements. For all other GAMS entities,
however, you have the option of making declarations and
assignments in the same statement or separately.
6. The names given to the entities of the model must start
with a letter and can be followed by up to 62 more letters
or digits.
Sets
Sets are the basic building blocks of a GAMS model,
corresponding exactly to the indices in the algebraic
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
8/39


representations of models. The Transportation example above
contains just one Set statement:
The effect of this statement is probably self-evident. We
declared two sets and gave them the names i and j. We also
assigned members to the sets as follows:
You should note the typographical differences between the
GAMS format and the usual mathematical format for listing the
elements of a set. GAMS uses slashes '/' rather than curly
braces '{}' to delineate the set. Note also that multiword names
like 'New York' have to be quoted ((e.g. 'New York' or "New
York") or you must use hyphens instead of blanks (e.g. New-
York').
The words after the set names in the sets statement above are
called text. Text is optional. It is there only for internal
documentation, serving no formal purpose in the model. The
GAMS compiler makes no attempt to interpret the text, but it
saves the text and 'parrots' it back to you at various times for
your convenience.
It was not necessary to combine the creation of sets  and  in
one statement. We could have put them into separate
statements as follows:
The placement of blank spaces and lines (as well as the choice
of upper- or lowercase) is up to you. Each GAMS user tends to
develop individual stylistic conventions. (The use of the
singular set is also up to you. Using set in a statement that
makes a single declaration and sets in one that makes several
Sets
     i   canning plants   / seattle, san-diego /
     j   markets          / new-york, chicago, t
 = {Seattle, San Diego}
 = {New York, Chicago, Topeka}.
Set    i   canning plants   / seattle, san-diego
Set    j   markets          / new-york, chicago,
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
9/39


is good English, but GAMS treats the singular and plural
synonymously.)
A convenient feature to use when you are assigning members to
a set is the asterisk. It applies to cases when the elements
follow a sequence. For example, the following are valid set
statements in GAMS.
Here the effect is to assign
Note that set elements are stored as character strings, so the
elements of  are not numbers.
Another convenient feature is the alias statement, which is
used to give another name to a previously declared set. In the
following example:
the name tp is like a  in mathematical notation. It is useful in
models that are concerned with the interactions of elements
within the same set.
The sets i, j, t, and m in the statements above are examples of
static sets, i.e., they are assigned their members directly by the
user and do not change. GAMS has several capabilities for
creating dynamic sets, which acquire their members through
the execution of set-theoretic and logical operations. Dynamic
sets are discussed in chapter Dynamic Sets. Another valuable
advanced feature is multidimensional sets, which are discussed
in section Multi-Dimensional Sets.
Set    t   time periods         /1991*2000/;
Set    m   machines             /mach1*mach24/;
 = {1991,1992,1993, ....., 2000}
 = {mach , mach ,......, mach 
 }.
Alias (t,tp);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
10/39


Data
The GAMS model of the transportation problem demonstrates
three of the different formats that are allowable for entering
data. The three formats are:
Lists
Tables
Direct assignments
The next three subsections will discuss each of these formats in
turn.
Data Entry by Lists
The first format is illustrated by the first Parameters statement
of the example, which is repeated below.
This statement has several effects. Again, they may be self-
evident, but it is worthwhile to analyze them in detail. The
statement declares the existence of two parameters, gives them
the names a and b, and declares their domains to be i and j,
respectively. (A domain is the set, or tuple of sets, over which a
parameter, variable, or equation is defined.) The statement also
gives documentary text for each parameter and assigns values
of a(i) and b(j) for each element of i and j. It is perfectly
acceptable to break this one statement into two, if you prefer,
as follows.
Parameters
     a(i)  capacity of plant i in cases
       /    seattle     350
            san-diego   600  /
     b(j)  demand at market j in cases
       /    new-york    325
            chicago     300
            topeka      275  / ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
11/39


Here are some points to remember when using the list format.
1. The list of domain elements and their respective
parameter values can be laid out in almost any way you
like. The only rules are that the entire list must be
enclosed in slashes and that the element-value pairs
must be separated by commas or entered on separate
lines.
2. There is no semicolon separating the element-value list
from the name, domain, and text that precede it. This is
because the same statement is being used for
declaration and assignment when you use the list format.
(An element-value list by itself is not interpretable by
GAMS and will result in an error message.)
3. The GAMS compiler has an unusual feature called domain
checking, which verifies that each domain element in the
list is in fact a member of the appropriate set. For
example, if you were to spell 'Seattle' correctly in the
statement declaring Set i but misspell it as 'Seatle' in a
subsequent element-value list, the GAMS compiler would
give you an error message that the element 'Seatle' does
not belong to the set i.
4. Zero is the default value for all parameters. Therefore,
you only need to include the nonzero entries in the
element-value list, and these can be entered in any
order.
5. A scalar is regarded as a parameter that has no domain.
It can be declared and assigned with a Scalar statement
containing a degenerate list of only one value, as in the
following statement from the transportation model.
If the domain of a parameter has two or more dimensions, it
can still have its values entered by the list format. This is very
Parameters a(i)  capacity of plant i in cases
     / seattle     350
       san-diego   600  / ;
Parameters b(j)  demand at market j in cases
    / new-york    325
      chicago     300
      topeka      275  / ;
Scalar f freight in dollars per case per th
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
12/39


useful for entering arrays that are sparse (having few non-
zeros) and super-sparse (having few distinct non-zeros).
Data Entry by Tables
Optimization practitioners have noticed for some time that
many of the input data for a large model are derived from
relatively small tables of numbers. Thus, it is very useful to
have the table format for data entry. An example of a two-
dimensional table (or matrix) is provided in the transportation
model:
The effect of this statement is to declare the parameter d and
to specify its domain as the set of ordered pairs in the
Cartesian product of i and j. The values of d are also given in
this statement under the appropriate heading. If there are
blank entries in the table, they are interpreted as zeroes.
As in the list format, GAMS will perform domain checking to
make sure that the row and column names of the table are
members of the appropriate sets. Formats for entering tables
with more columns than you can fit on one line and for
entering tables with more than two dimensions are given in
Chapter Data Entry: Parameters, Scalars and Tables.
Data Entry by Direct Assignment
The direct assignment method of data entry differs from the list
and table methods in that it divides the tasks of parameter
declaration and parameter assignment between separate
statements. The transportation model contains the following
example of this method.
It is important to emphasize the presence of the semicolon at
the end of the first line. Without it, the GAMS compiler would
Table d(i,j)  distance in thousands of miles
                  new-york       chicago      to
    seattle          2.5           1.7          
    san-diego        2.5           1.8          
Parameter c(i,j)  transport cost in thousands of
          c(i,j) = f * d(i,j) / 1000 ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
13/39


attempt to interpret both lines as parts of the same statement.
(GAMS would fail to discern a valid interpretation, so it would
send you an error message.)
The effects of the first statement above are to declare the
parameter c, to specify the domain (i,j), and to provide some
documentary text. The second statement assigns to c(i,j) the
product of the values of the parameters f and d(i,j).
Naturally, this is legal in GAMS only if you have already assigned
values to f and d(i,j) in previous statements.
The direct assignment above applies to all (i,j) pairs in the
domain of c. If you wish to make assignments for specific
elements in the domain, you enclose the element names in
quotes. For example,
is a valid GAMS assignment statement.
The same parameter can be assigned a value more than once.
Each assignment statement takes effect immediately and
overrides any previous values. (In contrast, the same parameter
may not be declared more than once. This is a GAMS error
check to keep you from accidentally using the same name for
two different things.)
The right-hand side of an assignment statement can contain a
great variety of mathematical expressions and built-in
functions. If you are familiar with a scientific programming
language such as C, you will have no trouble in becoming
comfortable writing assignment statements in GAMS. (Notice,
however, that GAMS has some efficiencies not shared by C. For
example, we were able to assign c(i,j) values for all (i,j)
pairs without constructing 'loops'.)
The GAMS standard operations and supplied functions are
given later. Here are some examples of valid assignments. In all
cases, assume the left-hand-side parameter has already been
declared and the right-hand-side parameters have already
been assigned values in previous statements.
c('Seattle','New-York')  = 0.40;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
14/39


The summation and product operators to be introduced later
can also be used in direct assignments.
Variables
The decision variables (or endogenous variables ) of a GAMS-
expressed model must be declared with a Variables
statement. Each variable is given a name, a domain if
appropriate, and (optionally) text. The transportation model
contains the following example of a Variables statement.
This statement results in the declaration of a shipment variable
for each (i,j) pair. (You will see in chapter Equations, how
GAMS can handle the typical real-world situation in which only
a subset of the (i,j) pairs is allowable for shipment.)
The z variable is declared without a domain because it is a
scalar quantity. Every GAMS optimization model must contain
one such variable to serve as the quantity to be minimized or
maximized.
Once declared, every variable must be assigned a type. A
selection of permissible types are given in table Table 3. For a
full list, see section Variable Types.
Table 3 : Permissible variable types
csquared       = sqr(c);
e              = m*csquared;
w              = l/lamda;
eoq(i)         = sqrt( 2*demand(i)*ordcost(i)/ho
t(i)           = min(p(i), q(i)/r(i), log(s(i)))
euclidean(i,j) = qrt(sqr(xi(i) - xi(j) + sqr(x2(
present(j)     = future(j)*exp(-interest*time(j)
Variables
    x(i,j)  shipment quantities in cases
    z       total transportation costs in thousa
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
15/39


Variable Type
Allowed Range of Variable
free(default)
 to 
positive
 to 
negative
 to 
binary
 or 
integer
 (default)
The variable that serves as the quantity to be optimized must
be a scalar and must be of the free type. In our transportation
example, z is kept free by default, but x(i,j) is constrained to
non-negativity by the following statement.
Note that the domain of x should not be repeated in the type
assignment. All entries in the domain automatically have the
same variable type.
Section The .lo, .l, .up, .m Database describes how to assign
lower bounds, upper bounds, and initial values to variables
Equations
The power of algebraic modeling languages like GAMS is most
apparent in the creation of the equations and inequalities that
comprise the model under construction. This is because
whenever a group of equations or inequalities has the same
algebraic structure, all the members of the group are created
simultaneously, not individually.
Equation Declaration
Equations must be declared and defined in separate
statements. The format of the declaration is the same as for
other GAMS entities. First comes the keyword, Equations in
this case, followed by the name, domain and text of one or
more groups of equations or inequalities being declared. Our
Positive variable x ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
16/39


transportation model contains the following equation
declaration:
Keep in mind that the word Equation has a broad meaning in
GAMS. It encompasses both equality and inequality
relationships, and a GAMS equation with a single name can
refer to one or several of these relationships. For example,
cost has no domain so it is a single equation, but supply
refers to a set of inequalities defined over the domain i.
GAMS Summation (and Product) Notation
Before going into equation definition we describe the
summation notation in GAMS. Remember that GAMS is designed
for standard keyboards and line-by-line input readers, so it is
not possible (nor would it be convenient for the user) to
employ the standard mathematical notation for summations.
The summation notation in GAMS can be used for simple and
complex expressions. The format is based on the idea of always
thinking of a summation as an operator with two arguments:
Sum(index of summation, summand) A comma separates
the two arguments, and if the first argument requires a comma
then it should be in parentheses. The second argument can be
any mathematical expression including another summation.
As a simple example, the transportation problem contains the
expression
that is equivalent to 
.
A slightly more complex summation is used in the following
example:
Equations
     cost        define objective function
     supply(i)   observe supply limit at plant i
     demand(j)   satisfy demand at market j ;
Sum(j, x(i,j))
Sum((i,j), c(i,j)*x(i,j))
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
17/39


that is equivalent to 
.
The last expression could also have been written as a nested
summation as follows:
In section Conditional Indexed Operations, we describe how to
use the dollar operator to impose restrictions on the
summation operator so that only the elements of i and j that
satisfy specified conditions are included in the summation.
Products are defined in GAMS using exactly the same format as
summations, replacing Sum by Prod. For example,
is equivalent to: 
.
Summation and product operators may be used in direct
assignment statements for parameters. For example,
Equation Definition
Equation definitions are the most complex statements in GAMS
in terms of their variety. The components of an equation
definition are, in order:
1. The name of the equation being defined
2. The domain
3. Domain restriction condition (optional)
4. The symbol '..'
5. Left-hand side expression
6. Relational operator: =l=, =e=, =g= or others. For a
complete list, see Table Equation Types.
7. Right-hand side expression
The transportation example contains three of these statements.
Sum(i, Sum(j, c(i,j)*x(i,j)))
prod(j, x(i, j))
scalar totsupply   total supply over all plants;
totsupply = sum(i, a(i));
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
18/39


Here are some points to remember.
The power to create multiple equations with a single
GAMS statement is controlled by the domain. For
example, the definition for the demand constraint will
result in the creation of one constraint for each element
of the domain j, as shown in the following excerpt from
the GAMS output.
The key idea here is that the definition of the demand
constraints is exactly the same whether we are solving
the toy-sized example above or a 20,000-node real-world
problem. In either case, the user enters just one generic
equation algebraically, and GAMS creates the specific
equations that are appropriate for the model instance at
hand. (Using some other optimization packages,
something like the extract above would be part of the
input, not the output.)
In many real-world problems, some of the members of
an equation domain need to be omitted or differentiated
from the pattern of the others because of an exception of
some kind. GAMS can readily accommodate this loss of
structure using a powerful feature known as the dollar or
'such-that' operator, which is not illustrated here. The
domain restriction feature can be absolutely essential for
keeping the size of a real-world model within the range
of solvability.
The relational operators have the following meanings:
It is important to understand the difference between the
symbols '=' and '=e='. The '=' symbol is used only in direct
cost ..        z  =e=  sum((i,j), c(i,j)*x(i,j))
supply(i) ..   sum(j, x(i,j))  =l=  a(i) ;
demand(j) ..   sum(i, x(i,j))  =g=  b(j) ;
demand(new-york)..x(seattle,new-york) + x(s
demand(chicago).. x(seattle,chicago) + x(sa
demand(topeka)..  x(seattle,topeka) + x(san
=l=    less than or equal to
=g=    greater than or equal to
=e=    equal to
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
19/39


assignments, and the '=e=' symbol is used only in
equation definitions. These two contexts are very
different. A direct assignment gives a desired value to a
parameter before the solver is called. An equation
definition also describes a desired relationship, but it
cannot be satisfied until after the solver is called. It
follows that equation definitions must contain variables
and direct assignments must not.
Variables can appear on the left or right-hand side of an
equation or both. The same variable can appear in an
equation more than once. The GAMS processor will
automatically convert the equation to its equivalent
standard form (variables on the left, no duplicate
appearances) before calling the solver.
An equation definition may appear anywhere in the GAMS
input, provided the equation and all variables and
parameters to which it refers were previously declared.
(Note that it is permissible for a parameter appearing in
the equation to be assigned or reassigned a value after
the definition. This is useful when doing multiple model
runs with one GAMS input.) The equations need not be
defined in the same order in which they were declared.
Objective Function
This is just a reminder that GAMS has no explicit entity called
the objective function. To specify the function to be optimized,
you must create a variable, which is free (unconstrained in sign)
and scalar-valued (has no domain) and which appears in an
equation definition that equates it to the objective function.
Model and Solve Statements
The word model has a very precise meaning in GAMS. It is
simply a collection of equations. Like other GAMS entities, it
must be given a name in a declaration. The format of the
declaration is the keyword model followed by the name of the
model, followed by a list of equation names enclosed in
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
20/39


slashes. If all previously defined equations are to be included,
you can enter /all/ in place of the explicit list. In our example,
there is one model statement:
This statement may seem superfluous, but it is useful to
advanced users who may create several models in one GAMS
run. If we were to use the explicit list rather than the shortcut
/all/, the statement would be written as
The domains are omitted from the list since they are not part of
the equation name. The list option is used when only a subset
of the existing equations comprises a specific model (or sub-
model) being generated.
Once a model has been declared and assigned equations, we
are ready to call the solver. This is done with a solve
statement, which in our example is written as
The format of the solve statement is as follows:
1. The key word solve
2. The name of the model to be solved
3. The key word using
4. An available solution procedure. A complete list is given
below. For further details, see section Classification of
model transport  /all/  ;
model transport / cost, supply, demand / ;
solve transport using lp minimizing z ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
21/39


Models.
Solution
Description
lp
for linear programming
qcp
for quadratic constraint programming
nlp
for nonlinear programming
dnlp
for nonlinear programming with
discontinuous derivatives
mip
for mixed integer programming
rmip
for relaxed mixed integer programming
miqcp
for mixed integer quadratic constraint
programming
rmiqcp
for relaxed mixed integer quadratic
constraint programming
minlp
for mixed integer nonlinear programming
rminlp
for relaxed mixed integer nonlinear
programming
mcp
for mixed complementarity problems
mpec
for mathematical programs with
equilibrium constraints
rmpec
for relaxed mathematical program with
equilibrium constraints
cns
for constrained nonlinear systems
emp
for extended mathematical programming
5. The keyword 'minimizing' or 'maximizing'
6. The name of the variable to be optimized
Display Statements
The solve statement will cause several things to happen when
executed. The specific instance of interest of the model will be
generated, the appropriate data structures for inputting this
problem to the solver will be created, the solver will be
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
22/39


invoked, and the output from the solver will be printed to a file.
To get the optimal values of the primal and/or dual variables,
we can look at the solver output, or, if we wish, we can request
a display of these results from GAMS. Our example contains the
following statement:
that calls for a printout of the final levels, x.l, and marginal (or
reduced costs), x.m, of the shipment variables, x(i,j). GAMS
will automatically format this printout in to dimensional tables
with appropriate headings.
The .lo, .l, .up, .m Database
GAMS was designed with a small database system in which
records are maintained for the variables and equations. The
most important fields in each record are:
The format for referencing these quantities is the variable or
equation's name followed by the field's name, followed (if
necessary) by the domain (or an element of the domain).
GAMS allows the user complete read-and write-access to the
database. This may not seem remarkable to you now, but it can
become a greatly appreciated feature in advanced use. Some
examples of use of the database follow.
Assignment of Variable Bounds and/or Initial
Values
The lower and upper bounds of a variable are set automatically
according to the variable's type (
free, positive, negative, binary, or integer), but
display x.l, x.m ;
.lo    lower bound
.l    level or primal value
.up    upper bound
.m    marginal or dual value
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
23/39


these bounds can be overwritten by the GAMS user. Some
examples follow.
It is assumed in the first and third examples that
capacity(i,j) is a parameter that was previously declared
and assigned values. These statements must appear after the
variable declaration and before the Solve statement. All the
mathematical expressions available for direct assignments are
usable on the right-hand side.
In nonlinear programming it is very important for the modeler
to help the solver by specifying as narrow a range as possible
between lower and upper bound. It is also very helpful to
specify an initial solution from which the solver can start
searching for the optimum. For example, in a constrained
inventory model, the variables are quantity(i), and it is
known that the optimal solution to the unconstrained version
of the problem is a parameter called eoq(i). As a guess for the
optimum of the constrained problem we enter
(The default initial level is zero unless zero is not within the
bounded range, in which case it is the bound closest to zero.)
It is important to understand that the .lo and .up fields are
entirely under the control of the GAMS user. The .l and .m
fields, in contrast, can be initialized by the user but are then
controlled by the solver.
Transformation and Display of Optimal Values
(This section may be skipped on first reading if desired.)
After the optimizer is called via the solve statement, the
values it computes for the primal and dual variables are placed
in the database in the .l and .m fields. We can then read these
results and transform and display them with GAMS statements.
x.up(i,j)    =  capacity(i,j)  ;
x.lo(i,j)    =  10.0  ;
x.up('seattle','new-york') = 1.2*capacity('seatt
quantity.l(i)  =  0.5*eoq(i)  ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
24/39


For example, in the transportation problem, suppose we wish
to know the percentage of each market's demand that is filled
by each plant. After the solve statement, we would enter
Appending these commands to the original transportation
problem input results in the following output:
For an example involving marginal, we briefly consider the ratio
constraints that commonly appear in blending and refining
problems. These linear programming models are concerned
with determining the optimal amount of each of several
available raw materials to put into each of several desired
finished products. Let y(i,j) be the variable for the number
of tons of raw material  put into finished product j. Suppose
the ratio constraint is that no product can consist of more than
25 percent of one ingredient, that is,
for all i, j. To keep the model linear, the constraint is written as
rather than explicitly as a ratio.
The problem here is that ratio.m(i,j), the marginal value
associated with the linear form of the constraint, has no
intrinsic meaning. At optimality, it tells us by at most how much
we can benefit from relaxing the linear constraint to
parameter pctx(i,j)  perc of market j's demand f
pctx(i,j) =  100.0*x.l(i,j)/b(j) ;
display pctx ;
pctx    percent of market j's demand filled by p
          new-york   chicago   topeka
seattle     15.385   100.000
san-diego   84.615            100.000
y(i,j)/q(j) =l=   .25 ;
ratio(i,j).. y(i,j) - .25*q(j)  =l=  0.0  ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
25/39


Unfortunately, this relaxed constraint has no realistic
significance. The constraint we are interested in relaxing (or
tightening) is the nonlinear form of the ration constraint. For
example, we would like to know the marginal benefit arising
from changing the ratio constraint to
We can in fact obtain the desired marginals by entering the
following transformation on the undesired marginals:
Notice that the assignment statement for amr accesses both .m
and .l records from the database. The idea behind the
transformation is to notice that
is equivalent to
GAMS Output
The default output of a GAMS run is extensive and informative.
For a complete discussion, see chapter GAMS Output. This
tutorial discusses output partially as follows:
Echo Print
Reference Maps
Status Reports
y(i,j) - .25*q(j)  =l=  1.0 ;
y(i,j)/q(j)  =l=  .26  ;
parameter  amr(i,j)  appropriate marginal for ra
amr(i,j)  =  ratio.m(i,j)*0.01*q.l(j) ;
display amr ;
y(i,j)/q(j)  =l=  .26  ;
y(i,j) - .25*q(j)  =l=  0.01*q(j)  ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
26/39


Error Messages
Model Statistics
Solution Reports
A great deal of unnecessary anxiety has been caused by
textbooks and users' manuals that give the reader the false
impression that flawless use of advanced software should be
easy for anyone with a positive pulse rate. GAMS is designed
with the understanding that even the most experienced users
will make errors. GAMS attempts to catch the errors as soon as
possible and to minimize their consequences.
Echo Prints
Whether or not errors prevent your optimization problem from
being solved, the first section of output from a GAMS run is an
echo, or copy, of your input file. For the sake of future
reference, GAMS puts line numbers on the left-hand side of the
echo. For our transportation example, which luckily contained
no errors, the echo print is as follows:
   2  Sets
   3       i   canning plants   / seattle, san-d
   4       j   markets          / new-york, chic
   5
   6  Parameters
   7
   8       a(i)  capacity of plant i in cases
   9         /    seattle     350
  10              san-diego   600  /
  11
  12       b(j)  demand at market j in cases
  13         /    new-york    325
  14              chicago     300
  15              topeka      275  / ;
  16
  17  Table d(i,j)  distance in thousands of mil
  18                    new-york       chicago  
  19      seattle          2.5           1.7    
  20      san-diego        2.5           1.8    
  21
  22  Scalar f  freight in dollars per case per 
  23
  24  Parameter c(i,j)  transport cost in thousa
  25
  26            c(i,j) = f * d(i,j) / 1000 ;
  27
  28  Variables
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
27/39


The reason this echo print starts with line number 2 rather than
line number 1 is because the input file contains a dollar-print-
control statement. This type of instruction controls the output
printing, but since it has nothing to do with defining the
optimization model, it is omitted from the echo. The dollar
print controls must start in column 1.
The $title statement causes the subsequent text to be
printed at the top of each page of output. Other available
instructions are given in chapter Dollar Control Options.
Error Messages
When the GAMS compiler encounters an error in the input file,
it inserts a coded error message inside the echo print on the
line immediately following the scene of the offense. These
messages always start with **** and contain a '$' directly
below the point at which the compiler thinks the error
occurred. The $ is followed by a numerical error code, which is
explained after the echo print. Several examples follow.
  29       x(i,j)  shipment quantities in cases
  30       z       total transportation costs in
  31
  32  Positive Variable x ;
  33
  34  Equations
  35       cost        define objective function
  36       supply(i)   observe supply limit at p
  37       demand(j)   satisfy demand at market 
  38
  39  cost ..        z  =e=  sum((i,j), c(i,j)*x
  40
  41  supply(i) ..   sum(j, x(i,j))  =l=  a(i) ;
  42
  43  demand(j) ..   sum(i, x(i,j))  =g=  b(j) ;
  44
  45  Model transport /all/ ;
  46
  47  Solve transport using lp minimizing z ;
  48
  49  Display x.l, x.m ;
  50
$title a transportation model
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
28/39


Example 1 : Entering the statement
Example 2 : Another common error is the omission of a
semicolon preceding a direct assignment or equation
definition. In our transportation example, suppose we omit the
semicolon prior to the assignment of c(i,j), as follows.
results in the echo
In this case, the GAMS compiler indicates that
something is wrong with the set element sum. At the
bottom of the echo print, we see the interpretation of
error code 160:
The problem is that sos1 is a reserved word, which can
not be used as identifiers in general. The complete list
of reserved words is shown in this chapter. Thus our set
element must have a unique name like 'summer'. This
is a common beginner's error.
set  q  quarterly time periods  / spring, 
      1  set  q  quarterly time periods  /
****                                      
Error Message
160  Unique element expected....
Here is the resulting output.
Parameter c(i,j)  transport cost in 1000s 
c(i,j)  = f * d(i,j)  /  1000  ;
  16   Parameter c(i,j) transport cost in 
  17             c(i,j)  = f * d(i,j)/1000
****                     $97       $195,96
Error Message
 96  Blank needed between identifier and t
       (-or- illegal character in identifi
       (-or- check for missing ';' on prev
 97  Explanatory text can not start with 
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
29/39


Example 3 : Many errors are caused merely by spelling mistakes
and are caught before they can be damaging. For example, with
'Seattle' spelled in the table differently from the way it was
introduced in the set declaration, we get the following error
message.
It is not uncommon for one little offense like our
missing semicolon to generate five intimidating error
messages. The lesson here is: concentrate on fixing the
first error and ignore the other! The first error detected
(in line 17), code 97, indicate that GAMS thinks the
symbols in line 17 are a continuation of the
documentary text at the end of line 16 rather than a
direct assignment as we intended. The error message
also appropriately advises us to check the preceding
line for a missing semicolon.
Unfortunately, you cannot always expect error
messages to be so accurate in their advice. The
compiler cannot read your mind. It will at times fail to
comprehend your intentions, so learn to detect the
causes of errors by picking up the clues that abound in
the GAMS output. For example, the missing semicolon
could have been detected by looking up the c entry in
the cross-reference list (to be explained in the next
section) and noticing that it was never assigned.
       (-or- check for missing ';' on prev
195  Symbol redefined with a different typ
409  Unrecognizable item - skip to find a 
       looking for a ';' or a key word to 
SYMBOL      TYPE      REFERENCES
c           PARAM     declared     15   re
   4   sets
   5          i   canning plants  /seattle
   6          j   markets  /new-york, chic
   7
   8   table d(i,j)  distance in thousand 
   9           new-york   chicago   topeka
  10      seatle       2.5      1.7       
****         $170
  11      san-diego    2.5      1.8       
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
30/39


Example 4 : Similarly, if we mistakenly enter dem(j) instead of
b(j) as the right-hand side of the demand constraint, the
result is
Example 5 : The next example is a mathematical error, which is
sometimes committed by novice modelers and which GAMS is
adept at catching. The following is mathematically inconsistent
and, hence, is not an interpretable statement.
More information about error reporting is given in section Error
Reporting. Comprehensive error detection and well-designed
Error Message
170  Domain violation for element
   45   demand(j)  ..   sum(i,  x(i,j)  ) 
****                                      
    Error Message
    140  Unknown symbol
There are two errors in this equation, both having to do
with the co ntrol of indices. Index  is over-controlled
and index  is under-controlled.
You should see that index  is getting conflicting
orders. By appearing in the quantifier 'for all ', it is
supposed to remain fixed for each instance of the
equation. Yet, by appearing as an index of summation,
it is supposed to vary. It can't do both. On the other
hand, index  is not controlled in any way, so we have
no way of knowing which of its possible values to use.
If we enter this meaningless equation into GAMS, both
errors are correctly diagnosed.
   meaninglss(i)  ..    sum(i, x(i,j))   =
****                        $125   $149
Error Messages
125  Set is under control already         
149  Uncontrolled set entered as constant 
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
31/39


error messages are a big help in getting models implemented
quickly and correctly.
Reference Maps
The next section of output, which is the last if errors have been
detected, is a pair of reference maps that contain summaries
and analyses of the input file for the purposes of debugging
and documentation.
The first reference map is a cross-reference map such as one
finds in most modern compilers. It is an alphabetical, cross-
referenced list of all the entities (sets, parameters, variables,
and equations) of the model. The list shows the type of each
entity and a coded reference for each appearance of the entity
in the input. The cross-reference map for our transportation
example is as follows (we do not display all tables). To turn the
cross-reference map on, please add the line
at the beginning of your model right after the $title
statement.
For example, the cross-reference list tells us that the symbol a
is a parameter that was declared in line 9, defined (assigned
value) in line 10, and referenced in line 42. The symbol i has a
more complicated entry in the cross-reference list. It is shown
to be a set that was declared and defined in line 4. It is
$onSymXRef
SYMBOL      TYPE   REFERENCES
a            PARAM declared        9  defined   
b            PARAM declared       13  defined   
c            PARAM declared       25 assigned   
cost         EQU   declared       36  defined   
d            PARAM declared       18  defined   
demand       EQU   declared       38  defined   
f            PARAM declared       23  defined   
i            SET   declared        4  defined   
j            SET   declared        5  defined   
supply       EQU   declared       37  defined   
transport    MODEL declared       46  defined   
x            VAR   declared       30 impl-asn   
z            VAR   declared       31 impl-asn   
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
32/39


referenced once in lines 9, 18, 25, 27, 30, 37, 44 and referenced
twice in lines 40 and 44. Set i is also used as a controlling
index in a summation, equation definition or direct parameter
assignment in lines 27, 40, 42 and 44.
For the GAMS novice, the detailed analysis of the cross-
reference list may not be important. Perhaps the most likely
benefit he or she will get from the reference maps will be the
discovery of an unwanted entity that mistakenly entered the
model owing to a punctuation or syntax error.
The second part of the reference map is a list of model entities
grouped by type and listed with their associated documentary
text. For example, this list is as follows.
Equation Listings
Once you succeed in building an input file devoid of
compilation errors, GAMS is able to generate a model. The
question remains, and only you can answer it, does GAMS
generate the model you intended?
The equation listing is probably the best device for studying
this extremely important question. A product of the solve
command, the equation listing shows the specific instance of
SETS
i             canning plants
j             markets
PARAMETERS
a             capacity of plant i in cases
b             demand at market j in cases
c             transport cost in thousands of dol
d             distance in thousands of miles
f             freight in dollars per case per th
VARIABLES 
x             shipment quantities in cases
z             total transportation costs in thou
EQUATIONS 
cost          define objective function
demand        satisfy demand at market j
supply        observe supply limit at plant i
MODELS
transport
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
33/39


the model that is created when the current values of the sets
and parameters are plugged into the general algebraic form of
the model. For example, the generic demand constraint given in
the input file for the transportation model is
while the equation listing of specific constraints is
The default output is a maximum of three specific equations for
each generic equation. To change the default, insert an input
statement prior to the solve statement:
where r is the desired number.
The default output also contains a section called the column
listing, analogous to the equation listing, which shows the
coefficients of three specific variables for each generic variable.
This listing would be particularly useful for verifying a GAMS
model that was previously implemented in MPS format. To
change the default number of specific column printouts per
generic variable, the above command can be extended:
where c is the desired number of columns. (Setting limrow and
limcol to 0 is a good way to reduce the size of your lst file
after your model has been debugged.) In nonlinear models, the
GAMS equation listing shows first-order Taylor approximations
of the nonlinear equations. The approximations are taken at
the starting values of the variables.
demand(j)  ..   sum(i, x(i,j))  =g=  b(j)  ;
--------demand   =g=   satisfy demand at market 
demand(new-york)..  x(seattle, new-york) +x(san-
demand(chicago)..  x(seattle, chicago) +x(san-di
demand(topeka)..  x(seattle, topeka) +x(san-dieg
option limrow  =  r ;
option limrow  =  r,  limcol  = c ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
34/39


Model Statistics
The last section of output that GAMS produces before invoking
the solver is a group of statistics about the model's size, as
shown below for the transportation example.
The BLOCK counts refer to the number of generic equations and
variables. The SINGLE counts refer to individual rows and
columns in the specific model instance being generated. For
nonlinear models, some other statistics are given to describe
the degree of non-linearity in the problem.
Status Reports
After the solver executes, GAMS prints out a brief Solve
Summary whose two most important entries are
SOLVER STATUS and the MODEL STATUS. For our
transportation problem the solve summary is as follows:
The status reports are preceded by the same **** string as an
error message, so you should probably develop the habit of
searching for all occurrences of this string whenever you look
at an output file for the first time. The desired solver status is 1
NORMAL COMPLETION, but there are other possibilities,
documented in section The Solve Summary, which relate to
various types of errors and mishaps.
MODEL STATISTICS
BLOCKS OF EQUATIONS       3     SINGLE EQUATIONS
BLOCKS OF VARIABLES       2     SINGLE VARIABLES
NON ZERO ELEMENTS        19
               S O L V E      S U M M A R Y
     MODEL   TRANSPORT           OBJECTIVE  z
     TYPE    LP                  DIRECTION  MINI
     SOLVER  CPLEX               FROM LINE  49
**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      1 Optimal
**** OBJECTIVE VALUE              153.6750
 RESOURCE USAGE, LIMIT          0.031      1000.
 ITERATION COUNT, LIMIT         4    2000000000
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
35/39


There are eleven possible model statuses, including the usual
linear programming termination states (
1 Optimal, 3 Unbounded, 4 Infeasible), and others
relating to nonlinear and integer programming. In nonlinear
programming, the status to look for is 2 Locally Optimal.
The most the software can guarantee for nonlinear
programming is a local optimum. The user is responsible for
analyzing the convexity of the problem to determine whether
local optimality is sufficient for global optimality. In integer
programming, the status to look for is 8 Integer Solution.
This means that a feasible integer solution has been found.
More detail follows as to whether the solution meets the
relative and absolute optimality tolerances that the user
specifies.
Solution Reports
If the solver status and model status are acceptable, then you
will be interested in examining the results of the optimization.
The results are first presented in as standard mathematical
programming output format, with the added feature that rows
and columns are grouped and labeled according to names that
are appropriate for the specific model just solved. In this
format, there is a line of printout for each row and column
giving the lower limit, level, upper limit, and marginal. Generic
equation block and the column output group the row output by
generic variable block. Set element names are embedded in the
output for easy reading. In the transportation example, the
solver outputs for supply(i), demand(j), and x(i,j) are as
follows:
---- EQU supply      observe supply limit at pla
             LOWER     LEVEL     UPPER    MARGIN
seattle       -INF    350.000   350.000      EPS
san-diego     -INF    550.000   600.000      .
---- EQU demand      satisfy demand at market j
            LOWER     LEVEL     UPPER    MARGINA
new-york   325.000   325.000     +INF      0.225
chicago    300.000   300.000     +INF      0.153
topeka     275.000   275.000     +INF      0.126
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
36/39


The single dots '.' in the output represent zeroes. The entry
EPS, which stands for epsilon, mean very small but nonzero. In
this case, EPS indicates degeneracy. (The slack variable for the
Seattle supply constraint is in the basis at zero level. The
marginal is marked with EPS rather than zero to facilitate
restarting the optimizer from the old basis.)
If the solvers results contain either infeasibilities or marginal
costs of the wrong sign, then the offending entries are marked
with INFES or NOPT, respectively. If the problem terminates
unbounded, then the rows and columns corresponding to
extreme rays are marked UNBND.
At the end of the solvers solution report is a very important
report summary, which gives a tally of the total number of non-
optimal, infeasible, and unbounded rows and columns. For our
example, the report summary shows all zero tallies as desired.
After the solver's report is written, control is returned from the
solver back to GAMS. All the levels and marginals obtained by
the solver are entered into the GAMS database in the .l and .m
fields. These values can then be transformed and displayed in
any desired report. As noted earlier, the user merely lists the
quantities to be displayed, and GAMS automatically formats
and labels an appropriate array. For example, the input
statement.
---- VAR x           shipment quantities in case
                      LOWER     LEVEL     UPPER 
seattle  .new-york      .       50.000     +INF 
seattle  .chicago       .      300.000     +INF 
seattle  .topeka        .         .        +INF 
san-diego.new-york      .      275.000     +INF 
san-diego.chicago       .         .        +INF 
san-diego.topeka        .      275.000     +INF 
**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
display x.l, x.m  ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
37/39


results in the following output.
As seen in reference maps, equation listings, solution reports,
and optional displays, GAMS saves the documentary text and
'parrots' it back throughout the output to help keep the model
well documented.
Summary
This tutorial has demonstrated several of the design features of
GAMS that enable you to build practical optimization models
quickly and effectively. The following discussion summarizes
the advantages of using an algebraic modeling language such
as GAMS versus a matrix generator or conversational solver.
By using an algebra-based notation, you can describe an
optimization model to a computer nearly as easily as you
can describe it to another mathematically trained
person.
Because an algebraic description of a problem has
generality, most of the statements in a GAMS model are
reusable when new instances of the same or related
problems arise. This is especially important in
environments where models are constantly changing.
You save time and reduce generation errors by creating
whole sets of closely related constraints in one
statement.
You can save time and reduce input errors by providing
formulae for calculating the data rather than entering
----     50 VARIABLE  x.L           shipment qua
             new-york     chicago      topeka
seattle        50.000     300.000
san-diego     275.000                 275.000
----     50 VARIABLE  x.M           shipment qua
              chicago      topeka
seattle                     0.036
san-diego       0.009
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
38/39


them explicitly.
The model is self-documenting. Since the tasks of model
development and model documentation can be done
simultaneously, the modeler is much more likely to be
conscientious about keeping the documentation
accurate and up to date.
The output of GAMS is easy to read and use. The solution
report from the solver is automatically reformatted so
that related equations and variables are grouped
together and appropriately labeled. Also, the display
command allows you to modify and tabulate results very
easily.
If you are teaching or learning modeling, you can benefit
from the insistence of the GAMS compiler that every
equation be mathematically consistent. Even if you are
an experienced modeler, the hundreds of ways in which
errors are detected should greatly reduce development
time.
By using the dollar operator and other advanced features
not covered in this tutorial, one can efficiently
implement large-scale models. Specific applications of
the dollar operator include:
1. It can enforce logical restrictions on the allowable
combinations of indices for the variables and
equations to be included in the model. You can
thereby screen out unnecessary rows and columns
and keep the size of the problem within the range
of solvability.
2. It can be used to build complex summations and
products, which can then be used in equations or
customized reports.
3. It can be used for issuing warning messages or for
terminating prematurely conditioned upon
context-specific data edits.
1) Dantzig, George B. (1963). Linear Programming and Extensions,
Princeton University Press, Princeton N.J.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
A GAMS Tutorial by Richard E. Rosenthal
https://www.gams.com/latest/docs/UG_Tutorial.html
39/39


Quick Start Tutorial
GAMS (the
General Algebraic
Modeling System)
is a high-level
modeling system
for mathematical
programming
problems. This
tutorial is aimed
at modelers who
are new to GAMS
and are looking
for a quick
introduction to
the core features
of GAMS. Note
that the text
contains many
links to the GAMS
User's Guide for
further
exploration.
Observe that this
tutorial is
adapted from the
Quick Start
Tutorial from
Bruce McCarl.
Another
introductory text
is the tutorial A
GAMS Tutorial by
Table of Contents
Three Basic Models
First Example: Solving a Linear
Programming Problem (LP)
Second Example: Solving for an
Economic Equilibrium
Third Example: Solving a
Nonlinear Equation System
Components of the Example
Models
Variables in the Example Models
Equations in the Example
Models
Model Definitions in the
Example Models
Solve Statements in the
Example Models
Starting Points
Running a GAMS Job
Running GAMS on the Command
Line
Running GAMS with GAMS Studio
Examining The Output
The Echo Print
Model Generation Output
The Equation Listing
The Column Listing
Model Statistics
The Solution Report
The Solve Summary
The Solver Report
The Solution Listing
Exploiting the Algebraic Structure
Revised First Example
Revised Second Example
Components of the Revised
Example Models
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
1/43


Richard E.
Rosenthal.
Three
Basic
Models
Most modelers who are interested in GAMS have one (or more)
of the following backgrounds:
They wish to solve constrained optimization problems
with objective functions.
They are looking for a system to solve general
equilibrium problems that are arise in various areas of
economics.
They wish to solve nonlinear systems of equations that
arise in engineering.
GAMS is well equipped to model and solve all three types of
problems. We will start by introducing examples for all three
areas and the discussions that will follow will refer to these
three basic examples.
First Example: Solving a Linear Programming
Problem (LP)
The simplest constrained optimization problem is an LP.
Assume we wish to solve the following LP that represents a
simple farm model where profit is maximized:
Note that there are three decision variables: 
 denotes the
land assigned to growing corn, 
 is the land assigned to
growing wheat and 
 represents the land where cotton is
grown. In the first line the total profit is expressed as a function
of the land allotted to the three crops, the multipliers represent
the expected profit per acre depending of the type of crop. The
first inequality imposes a limit on the available land, the
Sets in the Revised Examples
Data Entry in the Revised
Examples
Indexed Variables and
Equations in the Revised
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
2/43


second inequality imposes a limit on the available labor and
the final three lines restrict the decision variables to
nonnegative values.
This problem may be expressed in GAMS as follows:
We will analyze this formulation and discuss every part of it
after introducing the other two basic examples.
Second Example: Solving for an Economic
Equilibrium
The simplest general equilibrium model is the single good,
single market problem. Assume we wish to solve the following
equilibrium problem:
Here 
 is the market clearing price, 
 is the demand curve,
 denotes the quantity demanded, 
 the supply curve and
 the quantity supplied. Note that this is a problem in 3
equations and 3 variables. The variables are 
, 
, and 
.
Note that 
 and 
 are not variables, since they can be
computed from the equality relations.
Usually all equality constraints are used for such a set up.
However, we will use a more general setup, because it relaxes
some assumptions and more accurately depicts a model ready
to be implemented in GAMS. In particular, we permit the case
Positive Variables    Xcorn, Xwheat, Xcotton;
Variables             Z;
Equations     obj, land, labor;
obj..  Z =e= 109 * Xcorn + 90 * Xwheat + 115 * X
land..             Xcorn +      Xwheat +       X
labor..        6 * Xcorn +  4 * Xwheat +   8 * X
Model farmproblem / obj, land, labor /;
solve farmproblem using LP maximizing Z;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
3/43


where the supply curve price intercept may be above the
demand curve price intercept and thus the market may clear
with a nonzero price but a zero quantity. In addition, we allow
the market price to be above the demand curve price and
below the supply curve price. We also impose some additional
conditions based on Walras' Law to ensure a proper solution in
such cases.
Here the quantity demanded is nonzero only if the market
clearing price equals the demand curve price, the quantity
supplied is nonzero only if the market clearing price equals the
supply curve price and the market clearing price is only
nonzero if 
.
The simplest GAMS formulation is given below. Note that we
needed to rearrange the equation Psupply in order to achieve
a greater than inequality, thus we accomodated the
requirements of the solver PATH.
We will analyze this formulation and discuss every component
of it after introducing the third example.
Third Example: Solving a Nonlinear Equation
System
Engineers often wish to solve a nonlinear system of equations.
Examples include chemical equilibria or problems in the
context of oil refining. Many other such problems of this type
exist. The problem that follows is adapted from the paper Wall,
T W, Greening, D, and Woolsey , R E D, "Solving Complex
Positive Variables  P, Qd , Qs;
Equations     Pdemand, Psupply, Equilibrium;
Pdemand..     P            =g= 6 - 0.3*Qd;
Psupply..    ( 1 + 0.2*Qs) =g= P;
Equilibrium.. Qs           =g= Qd;
Model problem / Pdemand.Qd, Psupply.Qs, Equilibr
solve problem using MCP;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
4/43


Chemical Equilibria Using a Geometric-Programming Based
Technique" Operations Research 34, 3 (1987).
Note that this is a nonlinear system of equations with the
variables ba, so4, baoh, oh, hso4 and h. The following
formulation in GAMS is from the model [WALL] in the GAMS
model library.
Components of the Example Models
Now that we have our three basic models in place, we will
analyze them and identify and discuss their components,
including variables, equations, model definitions, solve
statements and starting points.
ba * so4 = 1
baoh / ba / oh = 4.8
hso4 / so4 / h = 0 .98
h * oh = 1
ba + 1e-7*baoh = so4 + 1e-5*hso4
2 * ba + 1e-7*baoh + 1e-2*h = 2 * so4 + 1e-5*hso
Variables ba, so4, baoh, oh, hso4, h ;
Equations r1, r2, r3, r4, b1, b2 ;
r1..  ba * so4 =e= 1 ;
r2..  baoh / ba / oh =e= 4.8 ;
r3..  hso4 / so4 / h =e= .98 ;
r4..  h * oh =e= 1 ;
b1..  ba + 1e-7*baoh =e= so4 + 1e-5*hso4 ;
b2..  2 * ba + 1e-7*baoh + 1e-2*h =e= 2 * so4 + 
Model wall / all / ;
ba.l=1; so4.l=1; baoh.l=1; oh.l=1; hso4.l=1; h.l
solve wall using nlp minimizing ba;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
5/43


Variables in the Example Models
Variables in GAMS have to be declared as variables with a
variable statement. The variable statements in the examples
above are repeated below:
First example:
Second example:
Third example:
Note that variable(s) is a keyword in GAMS. Positive is
another keyword, it serves as a modifier to the keyword
variable and has the effect that the variables that follow may
take only nonnegative values. Variables that are declared with
the keyword variable without a modifier are unresticted in
sign. For more details on variable declarations and variable
types, see sections Variable Declarations and Variable Types
respectively.
Observe that GAMS is not case sensitive and allows a line feed
to be used instead of a comma. Thus, the following three
variable declarations are all valid and have the same effect:
In the GAMS formulation of the first example, we have
introduced the variable Z in addition to the three variables that
Positive Variables    Xcorn, Xwheat, Xcotto
Variables             Z;
Positive Variables     P, Qd , Qs;
Variables ba, so4, baoh, oh, hso4, h ;  
POSITIVE VARIABLES  Xcorn, Xwheat, Xcotton;
Positive Variables  xcorn, 
                    xwheat, 
                    xcotton;
positive variables  Xcorn
                    Xwheat , Xcotton;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
6/43


featured in the mathematical formulation. Note that GAMS
requires the optimization model
to have the following form:
Here z is a variable, also called objective variable. Observe that
it is the objective variable that is maximized, not the function
cx. The name of the objective variable may be chosen freely by
the user, like any other variable name. The objective variable is
a free variable, which means that it has no bounds. Hence, it
each optimization problem there must always be at least one
free variable.
Given the requirement of an objective variable in an
optimization problem, we need to declare a new free variable
and introduce an equation for it. In our first example we
declared Z as a free variable, then we declared and specified
the equation obj setting Z equal to the objective function
expression and we instructed the solver to maximize Z. The
relevant lines of code from the first example follow:
Note
In some optimization problems users do not need
to introduce a new variable to serve as an objective
variable, but a free variable that already features in
the model may be used. For example, in the second
example above, ba is a free variable that is used as
objective variable, since the model type NLP
Maximize cx
Maximize z
         z = cx
Variables     Z;
Equation     obj,  land ,  labor;
obj..   Z =e= 109 * Xcorn + 90 * Xwheat + 115 * 
solve farmproblem using LP maximizing Z;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
7/43


requires an objective variable. We will discuss this
further below.
Equations in the Example Models
Each equation in a model must first be declared with a
equation declaration statement and then defined with a
equation definition statement. We repeat the respective
statement from the three examples below:
First example:
Second example:
Third example:
Note that the equation declaration statement begins with the
keyword Equation(s). Its main purpose is to name the
equation(s). For further details on equation declarations, see
section Declaring Equations.
The algebraic structure of the equation is specified in the
equation definition statement, where the name of the equation
is followed by two dots .. and the algebra. The relation
Equations     obj, land, labor;
obj..  Z =e= 109 * Xcorn + 90 * Xwheat + 11
land..             Xcorn +      Xwheat +   
labor..        6 * Xcorn +  4 * Xwheat +   
Equations     Pdemand, Psupply, Equilibrium
Pdemand..     P            =g= 6 - 0.3*Qd;
Psupply..    ( 1 + 0.2*Qs) =g= P;
Equilibrium.. Qs           =g= Qd;
Equations r1, r2, r3, r4, b1, b2 ;
r1..  ba * so4 =e= 1 ;
r2..  baoh / ba / oh =e= 4.8 ;
r3..  hso4 / so4 / h =e= .98 ;
r4..  h * oh =e= 1 ;
b1..  ba + 1e-7*baoh =e= so4 + 1e-5*hso4 ;
b2..  2 * ba + 1e-7*baoh + 1e-2*h =e= 2 * s
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
8/43


between the left-hand side and right-hand side is specified by
special symbols indicating the equation type. The most
common symbols are =e= for equality, =l= for a less than or
equal to relation and =g= for a greater than or equal to
relation. An overview of all GAMS equation types is given in
Table Equation Types. For more information on equation
definitions, see sections Defining Equations and Conditional
Equations.
Model Definitions in the Example Models
Once all structural elements of a model have been defined and
specified, a model statement is used to define the model that
will be solved. The model statement form the three examples
follow.
First example:
Second example:
Third example:
Note that a model statement always starts with the keyword
model. It is follwed by the name of the model which users may
choose freely and a list of the equations that are part of the
model. Observe that the list of equations in the first example
contains all equations that were declared and defined.
However, this need not be the case. It is possible to declare and
define an equation and then not use it in a model. For example,
users could define several models that contain different
subsets of equations. If all equations that were previously
declared and defined enter the model, the keyword all may be
used as a shortcut, like in the third example.
Model farmproblem / obj, land, labor /;
Model problem / Pdemand.Qd,  Psupply.Qs, Eq
Model wall / all / ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
9/43


Attention
Only equations that have been declared may be
listed in a model statement. All equations in a
model must have been defined before the model
can be solved.
Note that equilibrium problems like the second example are
solved as Mixed Complementarity Problems (MCPs). MCPs
require a special variant of the model statement where not
only the equations are listed , but also their complementarity
relationships. The complementarity relationship between an
equation and its associated variable is marked with a dot ".".
Hence, in the second example, the equation Pdemand is
perpendicular to the the variableQd, the equation Psupply is
perpendicular to the variable Qs and the equation
Equilibrium is perpendicular to the variable P.
In the three model statements above the name of the model
was immediately followed by the list of the equations included
in the model. Observe that an optional explanatory text may be
inserted after the name of the model.
Solve Statements in the Example Models
After the model has been defined it remains to be solved, i.e. to
find a solution for the variables. The solve statement directs
GAMS to use a solver to optimize the model or solve the system
of equations. The solve statements of the three examples
follow:
First example:
Second example:
Third example:
solve farmproblem using LP maximizing Z;
solve problem using MCP;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
10/43


Note that a solve statement always begins with the keyword
solve follwed by the name of the model, as previously
specified with a model statement, the keyword using and the
type of the model. We have an LP (linear programming
problem) in the first example, an MCP (mixed compementarity
problem) in the second example and an NLP (nonlinear
programming program) in the third example. A complete list of
GAMS model types is given in section Classification of Models.
After the model type the direction of the optimization is given:
either maximizing as in the first example orminimizing as in
the third example. In the final position is the name of the
objective variablethat is to be optimized.
Note
MCPs and systems of equations of the model type
Constrained Nonlinear System (CNS) do not have
objective variables. Therefore their solve
statements end with the model type.
Observe that the system of nonlinear equations in the second
example was expressed as an NLP that requires an objective
function and a related objective variable. Actually this is an
older practice in GAMS as the GAMS model type CNS was added
after this example was initially formulated. Hence, we could
alternatively use the following solve statement:
However, note that the model type CNS can only be solved by
select solvers and cannot incorporate integer variables. A
formulation as an optimization problem relaxes these
restrictions, thus allowing the use of the model type MINLP and
all NLP solvers. If the model type NLP or one of its variants is
chosen, one of the variables must be selected as objective
variable to be optimzed. Observe that which variable is chosen
may not really have any effect since a feasible solution requires
all of the simultaneous equations to be solved. Thus, while in
the third example the variable ba is maximized, there is no
solve wall using nlp minimizing ba;
solve wall using cns;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
11/43


inherent interest in attaining its maximum - it is just
convenient.
Starting Points
In the third example we have the following line before the solve
statement:
Note that this line provides starting points for the variables in
the model. The suffix .l appended to a variable name denotes
the level value of that variable. If a level value of a variable is
specified before the solve statement, this value will act as a
starting point for the search algorithms. The level value of a
variable is one example of a variable attribute. Other examples
include lower and upper bounds which may be set with the
suffixes .lo and .up. For more information on variable
attributes, see section Variable Attributes. For guidance on how
to choose good starting points, see the tutorial Good NLP
Formulations. Specifying starting points may be important for
avoiding numerical problems in the model solution. For more
on this topic, see the tutorial Finding and Fixing Execution
Errors and Performance Problems.
Observe that the statetements above are the first examples of
assignment statements in this tutorial. Assignment statements
play a crucial role in GAMS, they are introduced in section The
Assignment Statement.
Running a GAMS Job
The model formulation of a GAMS model is saved in a text file
with the extension .gms, say myfile.gms. Then the file is
submitted to GAMS. GAMS will execute the instructions in the
.gms file, with the result that calculations are done, solvers are
used and an output file with the solution results is created. The
output file is also called the listing file. By default, the name
listing file of the input file myfile.gms will be myfile.lst.
ba.l=1; so4.l=1; baoh.l=1; oh.l=1; hso4.l=1; h.l
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
12/43


There are two ways to submit a job to GAMS: via the command
line and via the IDE GAMS Studio.
Running GAMS on the Command Line
The myfile.gms file may be run with GAMS using the following
call:
Note the extension .gms may be omitted. This basic GAMS call
may be extended with arguments that are called command line
parameters. The following example serves as illustration:
Note that there are three command line parameters: the first
will set the page width to 80, the second will set the page
length to 9999 and the third will have the effect that a work file
named mysave is saved. GAMS offers many command line
parameters, they are introduced and discussed in detail in
chapter The GAMS Call and Command Line Parameters.
Running GAMS with GAMS Studio
GAMS Studio is an integrated development environment for
Windows, macOS, and Linux that facilitates editing,
development, debugging GAMS models and running GAMS jobs.
Examining The Output
The output of a GAMS run is saved in the output or listing file.
The listing file may contain many parts. Some parts may be
suppressed by the modeler, other parts are suppressed by
default and need to be activated. For an introduction and
detailed discussion, see chapter GAMS Output.
In this section we will review the output that is generated by
running the three example models.
   > gams myfile
   > gams trnsport pw=80 ps=9999 s=mysave
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
13/43


The Echo Print
The listing file always begins with the echo print. The echo print
is a copy of the input file with added line numbers. For
example, the echo print of the first example is given below:
Note that the echo print of the other two examples follows the
same principles. Note further, that the echo print serves as an
important reference guide since GAMS reports the line numbers
of any errors that were detected and of solve and display
statements.
Observe that usually the code of even experienced GAMS
modelers will contain compilation errors. They are marked in
the echo print. For more information on compilation error and
how to resolve them, see section Compilation Errors and the
tutorial Fixing Compilation Errors.
Model Generation Output
Once GAMS has successfully compiled the input file and any
numerical computations in assignments have been performed,
the solve statements will be executed. The first step is
generating a computer readable version of the equations in the
problem that will be passed on to an appropriate solver
system. During the model generation phase GAMS creates the
following output:
A listing of the equations of the model.
A listing of the variables of the model.
A summary of the model structure.
If errors were detected during model generation they will
be reported as well.
   1  Positive Variables    Xcorn, Xwheat, Xcott
   2  Variables             Z;
   3
   4  Equations     obj, land, labor;
   5
   6  obj..  Z =e= 109 * Xcorn + 90 * Xwheat + 1
   7  land..             Xcorn +      Xwheat +  
   8  labor..        6 * Xcorn +  4 * Xwheat +  
   9
  10  Model farmproblem / obj, land, labor /;
  11
  12  solve farmproblem using LP maximizing Z;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
14/43


The Equation Listing
The equation listing is the first part of the output generated by
a solve statement. By default, the first three equations in every
block are listed. The equation listing of the first two equations
of each of the three examples are given below:
First example:
Second example:
Third example:
Equation Listing    SOLVE farmproblem Using
---- obj  =E=
obj..  - 109*Xcorn - 90*Xwheat - 115*Xcotto
---- land  =L=
land..  Xcorn + Xwheat + Xcotton =L= 100 ; 
Equation Listing    SOLVE problem Using MCP
---- Pdemand  =G=
Pdemand..  P + 0.3*Qd =G= 6 ; (LHS = 0, INF
---- Psupply  =G=
Psupply..  - P + 0.2*Qs =G= -1 ; (LHS = 0)
Equation Listing    SOLVE wall Using NLP Fr
---- r1  =E=
r1..  (1)*ba + (1)*so4 =E= 1 ; (LHS = 1)
---- r2  =E=
r2..  - (1)*ba + (1)*baoh - (1)*oh =E= 4.8 
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
15/43


Note that the equation listing is a representation of the
algebraic structure of the linear terms in the equation and a
local representation containing the first derivatives of the
nonlinear terms. The nonlinear terms are automatically placed
in parentheses to indicate a local approximation. For further
details, see section The Equation Listing in chapter GAMS
Output.
The Column Listing
The column or variable listing contains a list of the individual
coefficients sorted by column rather than by row (like in the
equation listing). By default, the first three entries for each
variable are shown, along with their lower bound .lo, upper
bound .up and current level values .l. The column listing of
the first two variables for each of the three examples are given
below.
First example:
Second example:
Column Listing      SOLVE farmproblem Using
---- Xcorn
Xcorn
                (.LO, .L, .UP, .M = 0, 0, +
     -109       obj
        1       land
        6       labor
---- Xwheat
Xwheat
                (.LO, .L, .UP, .M = 0, 0, +
      -90       obj
        1       land
        4       labor
Column Listing      SOLVE problem Using MCP
---- P
P
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
16/43


Third example:
Model Statistics
The final information generated while a model is being
prepared for solution, is the statistics block. Its most obvious
use is to provide details on the size and nonlinearity of the
model. The model statistics of the third example follow.
                (.LO, .L, .UP, .M = 0, 0, +
        1       Pdemand
       -1       Psupply
---- Qd
Qd
                (.LO, .L, .UP, .M = 0, 0, +
        0.3     Pdemand
       -1       Equilibrium 
Column Listing      SOLVE wall Using NLP Fr
---- ba
ba
                (.LO, .L, .UP, .M = -INF, 1
       (1)      r1
      (-1)      r2
        1       b1
        2       b2
---- so4
so4
                (.LO, .L, .UP, .M = -INF, 1
       (1)      r1
      (-1)      r3
       -1       b1
       -2       b2  
MODEL STATISTICS
BLOCKS OF EQUATIONS           6     SINGLE EQUAT
BLOCKS OF VARIABLES           6     SINGLE VARIA
NON ZERO ELEMENTS            20     NON LINEAR N
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
17/43


For more information on model statistics, see section The
Model Statistics in chapter GAMS Output.
The Solution Report
The final major component of the listing file is the solution
output. It consists of a summary, some solver-specific output
and a report of the solutions for equations and variables.
The Solve Summary
The solve summary is very important since it contains an
overview of key information of the solution. The solve summary
of the third example is given below.
For details on the solve summary including possible values for
SOLVER STATUS and MODEL STATUS, see section The Solve
Summary in chapter GAMS Output.
The Solver Report
The next part of the listing file is the solver report. It contains
solver specific output. The respective output of the third
example follows:
DERIVATIVE POOL              20     CONSTANT POO
CODE LENGTH                  22
              S O L V E      S U M M A R Y
     MODEL   wall                OBJECTIVE  ba
     TYPE    NLP                 DIRECTION  MINI
     SOLVER  CONOPT              FROM LINE  16
**** SOLVER STATUS     1 Normal Completion
**** MODEL STATUS      2 Locally Optimal
**** OBJECTIVE VALUE                1.0000
 RESOURCE USAGE, LIMIT          0.034      1000.
 ITERATION COUNT, LIMIT         7    2000000000
 EVALUATION ERRORS              0             0
CONOPT 3         24.7.3 r58181 Released Jul 11, 
 
 
    C O N O P T 3   version 3.17A
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
18/43


For more on solver reports, see section Solver Report in
chapter GAMS Output.
The Solution Listing
The solution listing is a row-by-row then column-by-column
listing of the solutions returned to GAMS by the solver program.
Each individual equation and variable is listed including their
level and marginal values and their lower and upper bounds.
The solution listing of the first example follows:
Note that single dots '.' represent zeros. The extended range
arithmetic symbols -INF and +INF denote minus and plus
infinity respectively. EPS is another extended range arithmetic
symbol that often appears in solution listings. In this context, it
is used to indicate basis status in the degenerate case. For
example, a basic variable is indicated by a zero (single dot)
marginal, while a non-basic variable whose marginal is (nearly)
zero is indicated by a marginal of EPS. For further details, see
section The Solution Listing in chapter GAMS Output.
    Copyright (C)   ARKI Consulting and Developm
                    Bagsvaerdvej 246 A
                    DK-2880 Bagsvaerd, Denmark
                  Pre-triangular equations:   0
                  Post-triangular equations:  0
 
 
 ** Optimal solution. There are no superbasic va
                           LOWER          LEVEL 
---- EQU obj                 .              .   
---- EQU land              -INF          100.000
---- EQU labor             -INF          500.000
                           LOWER          LEVEL 
---- VAR Xcorn               .            50.000
---- VAR Xwheat              .            50.000
---- VAR Xcotton             .              .   
---- VAR Z                 -INF         9950.000
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
19/43


Exploiting the Algebraic Structure
GAMS was deliberately designed to make it easy to express
algebraic relationships. Thus it provides notation for indexed
operations like sums. Assume that  is defined as the sum over
 where 
:
This can be expressed in GAMS in the following way:
Here i is a set with three elements, z is a scalar or variable and
x(i) is a parameter or variable defined over the set i. Note
that the keyword sum automatically cycles through all elements
of the set i.
Indexed operations like sum may be used in the algebraic
specification of equations or in the context of assignments
where the value of identifiers are computed. In the following
two sections we will introduce revised versions of the first two
examples, where we illustrate how using sum simplifies the
code and enables more general formulations.
Revised First Example
Recall that the first example is the following LP:
Note that this is a special case of the general resource
allocation problem that can be written as follows:
 z = sum(i, x(i));
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
20/43


where
.
This model may be formulated in GAMS in the following way:
We will discuss the components of this model in section
Components of the Revised Example Models below.
Revised Second Example
Recall that the second example is an economic equilibrium
model with a single commodity:
Set       j        / corn, wheat, cotton /
          i        / land, labor /;
Parameter c(j)     / corn 109, wheat 90, cotton 
          b(i)     / land 100 , labor 500 /;
Table     a(i,j)
            corn    wheat    cotton
land          1        1        1
labor         6        4        8      ;
Positive Variables x(j);
Variables          profit;
Equations          objective
                   constraint(i) ;
objective..      profit =e= sum(j, (c(j))*x(j));
constraint(i)..  sum(j, a(i,j) *x(j))  =l=   b(i
Model resalloc /all/;
solve resalloc using LP maximizing profit;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
21/43


A more general formulation of this model accomodates
multiple commodities. Consider the following formulation
where  denotes the commodities:
where
 is the price of commodity ,
 is the quantity demanded of commodity ,
 is the price from the inverse demand curve for
commodity ,
 is the quantity supplied of commodity ,
 is the price from the inverse supply curve for
commodity ,
 is an alternative notation for the commodities and is
equivalent to ,
 is the inverse demand curve intercept for ,
 is the slope of the inverse demand curve. It is
used to model the effect of buying one unit of
commodity 
 on the demand price of commodity .
When 
 it is an own commodity effect and when
 it is a cross commodity effect.
 is the inverse supply curve intercept for ,
 is theslope of the inverse supply curve. It is used
to model the effect of supplying one unit of commodity
 on the supply price of commodity . When 
 it is
an own commodity effect and when 
 it is a cross
commodity effect.
This model may be formulated in GAMS in the following way:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
22/43


Components of the Revised
Example Models
The revised example models have several new features
including sets, specific data entry, and variables and equations
that are defined over sets. In addition, if the models are run,
modelers will notice some differences in the output. In this
section we will discuss these new language features and the
differences in the output they entail.
Sets in the Revised Examples
In the revised examples we used the subscripts i, j,
commodities and cc. In GAMS, subscripts are sets. They have
Set commodities / corn, wheat /;
Set curvetype   / supply, demand/;
Table intercepts(curvetype,commodities)
                  corn   wheat
         demand    4       8
         supply    1       2;
Table slopes(curvetype,commodities,commodities)
                   corn  wheat
     demand.corn   -.3    -.1
     demand.wheat  -.07   -.4
     supply.corn    .5     .1
     supply.wheat   .1     .3  ;
Positive Variables  P(commodities)
                    Qd(commodities)
                    Qs(commodities);
Equations     PDemand(commodities)
              PSupply(commodities)
              Equilibrium(commodities);
Alias (cc,commodities);
Pdemand(commodities)..
    P(commodities) =g= intercepts("demand",commo
                       + sum(cc,slopes("demand",
Psupply(commodities)..
    intercepts("supply",commodities) 
    + sum(cc,slopes("supply",commodities,cc)* Qs
Equilibrium(commodities)..
     Qs(commodities) =g=  Qd(commodities);
Model problem / Pdemand.Qd, Psupply.Qs,Equilibri
solve problem using MCP;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
23/43


to be defined before they may be used as subscripts. Sets are
defind with set statements. Consider the set statement from
the first revised example:
Note that the statement begins with the keyword set followed
by the name of the set and a list of the elements of the set.
Note further, that more than one set may be defined with one
set statement. In addition, an optional explanatory text may be
inserted after the name of the set and also after each set
element. For more details on set definitions, see chapter Set
Definition.
Observe that the following line appears in the revised second
example:
This is an alias statement that introduces a new alternative
name for a set that was defined earlier. In our example, the set
commodities was defined in the first line of the code and cc is
the alias, the alternative name for the set commodities. Note
that more than one alias may be defined in an alias statement.
For further information on aliases, see section The Alias
Statement: Multiple Names for a Set.
Note that in our example the alias facilitates to consider both
the effects of own and cross commodity quantity on the
demand and supply price for an item.
Data Entry in the Revised Examples
GAMS provides three formats for data entry: scalars, parameters
and tables. Usually scalars are defined with a scalar statement,
data vectors are defined with a parameter statement and
matrices are defined with a table statement.
Note that we used parameter and table statements in the
revised examples. In this section we will discuss parameter and
Set  j   / corn, wheat, cotton /
     i   / land, labor /;
Alias (cc,commodities);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
24/43


table statements. For details on scalar statements, see section
Scalars.
Parameters
The parameter format is used to enter items defined over sets.
Generally, the parameter format is used for data items that are
one-dimensional (vectors), but multi-dimensional data may be
entered with a parameter statement as well. Consider the
parameter statement from the first revised example:
Note that the statement begins with the keyword parameter
followed by the name of the parameter and the set over which
the parameter is defined, the index or domain. Then a list
follows where a numerical value is assigned to each member of
the index set. Note that the referenced elements must have
been defined to be members of the respective set. By default,
elements of the domain that are not listed in the parameter
statement are assigned the value of zero. Note that more than
one parameter may be defined with one parameter statement.
For further details on parameter statements, see section
Parameters.
Tables
The table format is used to enter data that are dependent on
two or more sets. Consider the following two table statements
from the revised examples:
Note that the statement begins with the keyword table
followed by the name of the table and the sets over which the
table is defined. The next line serves as header for the columns
Parameter c(j)     / corn 109, wheat 90, cotton 
          b(i)     / land 100, labor 500 /;
Table a(i,j) crop data
             corn  wheat cotton
    land      1     1      1
    labor     6     4      8      ;
Table intercepts(curvetype,commodities)
                  corn   wheat
         demand    4       8
         supply    1       2;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
25/43


of the table, the elements of the set in the second index
position are listed here. The elements of the set in the first
index position are the headers of the rows. Thus the elements
of the two index positions span a grid where numerical values
may be entered. Like in the parameter format, the referenced
set elements must have been defined to be members of the
respective set.
Note
Alignment is crucial in table statements. The
numerical entries must be placed in one and only
one column of the table.
By default, elements of the domain that are not listed in the
table statement are assigned the value of zero. Note that only
one table may be defined with a table statement. For further
details on table statements, see section Tables. Observe that
data may also be entered with assignment statements. For
more information, see section Data Entry by Assignment.
Indexed Variables and Equations in the Revised
Examples
When the algebraic structure of a problem is exploited in
modeling, variables and equations are often defined over one
or more sets, they are indexed. For example, in the first revised
example we have the following lines:
Note that here the variable x is defined over the set j and the
equation constraint is indexed over the set i. Similarly, in
the second revised example we have the following variable and
equation statements:
Positive Variable x(j);
Equations         constraint(i);
Positive Variables P(commodities)
                   Qd(commodities)
                   Qs(commodities) ;
Equations  PDemand(commodities)
           PSupply(commodities)
           Equilibrium(commodities)  ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
26/43


Observe that here all positive variables and all equations are
indexed over the set commodities. Such definitions indicate
that the variables and equations are potentially defined for
every element of the defining set. Thus, for example, a variable
P could exist for each and every element of the set
commodities. However, how many of these potential cases are
activated is determined by the respective equation definion
statement(s) where the variable P is used. For further details on
indexed variables and equations,see chapter Variables and
section Indexed Equations respectively.
Next, we will discuss the equation definition statements. The
respectives lines from the first revised example follow:
Note that the equation constraint is indexed over the set i
and there are no restrictions specified in the equation
definition statement. Thus, GAMS will generate a separate
equation for every element of the set i in the model
generation phase.
The same logic applies to the indexed equations of the second
revised example whose definition statements are repeated
below:
Observe that equations may be defined over only a part of their
domain. This restriction is usually achieved with dollar
conditions. For details see section Conditional Equations.
objective..      profit =e= sum(j, (c(j))*x(j));
constraint(i)..  sum(j, a(i,j) *x(j)) =l= b(i);
Pdemand(commodities)..
    P(commodities) =g= intercepts("demand",commo
                       + sum(cc,slopes("demand",
Psupply(commodities)..
    intercepts("supply",commodities) + sum(cc,sl
                     =g= P(commodities);
Equilibrium(commodities).. 
    Qs(commodities) =g=  Qd(commodities);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
27/43


Differences in the Output
If variables and equations are defined over sets, some parts of
the listing file will look different. In particular, there are some
changes in the equation listing, the variable listing and the
solution listing.
Revised Models: The Equation Listing
Note that indexed variables are given with their indices in the
equation listing. In addition, the specific equations generated
for each element of the domain are listed under the name of
an indexed equation. To illustrate, we present the equation
listing of the first revised example below:
Revised Models: The Column Listing
Similar to indexed equations in the equation listing, each
instance of a variable is listed under the name of an indexed
variable in the variable listing. The respective output of the first
revised model follows.
---- objective  =E=
objective..  - 109*x(corn) - 90*x(wheat) - 115*x
---- constraint  =L=
constraint(land)..  x(corn) + x(wheat) + x(cotto
constraint(labor)..  6*x(corn) + 4*x(wheat) + 8*
---- x
x(corn)
                (.LO, .L, .UP, .M = 0, 0, +INF, 
     -109       objective
        1       constraint(land)
        6       constraint(labor)
x(wheat)
                (.LO, .L, .UP, .M = 0, 0, +INF, 
      -90       objective
        1       constraint(land)
        4       constraint(labor)
x(cotton)
                (.LO, .L, .UP, .M = 0, 0, +INF, 
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
28/43


Revised Models: The Solution Listing
In the solution listing of the revised models there is a separate
line for each element of the index set. The respective output of
the first revised model is given below:
Documenting the GAMS Code
We have now covered the essential GAMS features. However,
any good code includes documentation, otherwise it might be
useless if it is revisited after a longer time. GAMS offers three
ways to document the code: comments, explanatory texts and
naming.
Comments
There are several ways to add comments in GAMS. The most
common are single line comments and block comments. Single
line comments may be inserted on any line by placing an
asterisk * in the first column position. The text that follows the
asterisk will be completely ignored by the GAMS compiler and
may contain any content including GAMS keywords. Note that
several successive lines may be single line comments. Block
comments are marked with the dollar control option $ontext at
the beginning of the comment block and the dollar control
     -115       objective
        1       constraint(land)
        8       constraint(labor)
---- EQU constraint
             LOWER          LEVEL          UPPER
land         -INF          100.0000       100.00
labor        -INF          500.0000       500.00
---- VAR x
              LOWER          LEVEL          UPPE
corn            .            50.0000        +INF
wheat           .            50.0000        +INF
cotton          .              .            +INF
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
29/43


option $offtext at the end of the comment. Block comments
usually span several lines, but they may also contain just one
line on the one hand and whole sections of the code on the
other hand.
In addition, users may freely enter blank lines to set off certain
sections of the code and generally enhance readability. For
further details on comments, see section Comments.
Explanatory Text
Declarations of sets, parameters, variables and equations may
include an optional descriptive text that follows the name of
the identifier. In addition, the elements of sets may be
accompanied by a text. This text is more than a comment: it is
retained by GAMS and is displayed whenever results are written
for the respective identifier in the output file. Note that the
explanatory textmay be quoted or unquoted and single or
double quotes may be used, but they must match. An example
is given below. For further details, see section Text.
Naming
Apart from avoiding reserved words, names for identifiers in
GAMS may be freely chosen. Some modelers, particularly if they
have a background in mathematics, prefer short names like
x(i). Other modelers strongly prefer longer descriptive names
that makes it easier for them to recall what quantities are
denoted. In this case naming is regarded as part of the
documentation. GAMS accomodates both styles and modelers
may choose which style works best for them. If short names are
used, we recommend to generously use descriptive texts and
comments for documentation.
To illustrate the virtues of comments, blank lines, explanatory
text and long names we will repeat the code of the revised LP
from above and then offer an alternative, documented
formulation.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
30/43


The documented version with longer names follows:
Set       j        / corn, wheat, cotton /
          i        / land , labor /;
Parameter c(j)     / corn 109, wheat 90, cotton 
          b(i)     / land 100 , labor 500 /;
Table     a(i,j)
            corn    wheat    cotton
land          1        1        1
labor         6        4        8      ;
Positive Variables x(j);
Variables          profit;
Equations          objective
                   constraint(i) ;
 
objective..      profit =e= sum(j, (c(j))*x(j));
constraint(i)..  sum(j, a(i,j) *x(j))  =l=   b(i
Model resalloc /all/;
solve resalloc using LP maximizing profit;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
31/43


Guidelines on Ordering GAMS
Statements and Formatting GAMS
Programs
A GAMS program is a collection of GAMS statements. In this
section we will offer some general guidelines on ordering GAMS
statements and formatting GAMS programs.
$ontext
  well formatted algebraic version of the first 
$offtext
Set       products  'Items produced by farm'
              / corn   'in acres'
                wheat  'in acres'
                cotton 'in acres' /
          resources  'Resources limiting farm pr
              / land   'in acres'
                labor  'in hours' /;
Parameter netreturns(products)  'Net returns per
              / corn 109 , wheat 90, cotton 115 
          endowments(resources) 'Amount of each 
              / land 100, labor 500 /;
Table     resourceusage(resources,products) 'Res
                          corn    wheat  cotton
               land          1       1       1
               labor         6       4       8  
Positive Variables   production(products) 'Numbe
Variables            profit               'Total
Equations            profitAcct           'Profi
                     available(resources) 'Resou
$ontext
      Specify definition of profit
$offtext
profitAcct..
      profit
      =e= sum(products, netreturns(products)*pro
$ontext
      Limit available resources
      Fix at exogenous levels
$offtext
available(resources)..
      sum(products,
          resourceusage(resources,products) *pro
      =l= endowments(resources);
Model resalloc /all/;
solve resalloc using LP maximizing profit; 
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
32/43


GAMS is case insensitive. This applies to GAMS keywords
as well as to user-defined names. For example, the
keyword VARIABLE is identical to Variable and
variable and the user-defined name mincost is
identical to minCost and minCOST. However, note that
the spelling in the output file is determined by the
spelling in the first occurence of an identifier or label.
Individual GAMS statements may be formatted in almost
any style. Multiple lines may be used for a statement,
blank lines may be embedded and any number of spaces
or tabs may be inserted. In addition, several statements
may be placed on one line. Note that they have to be
separated by semicolons ;.
We recommend that every GAMS statement is terminated
with a semicolon ;. However, note that semicolons are
not manadatory if the next word is a GAMS keyword.
Identifiers like sets, parameters, scalars, tables,
acronyms, variables, equations, models and files must
first be declared and defined before they may be used in
the code. An identifier is named in a declaration
statement and specific values are assigned to it when it
is defined. Often identifiers are defined at the same time
they are declared. Note that for equations the
declaration and definition statements are always distinct.
The names for identifiers and labels and the explanatory
text must follow certain rules. See chapter GAMS
Programs and the tutorial Good Coding Practices for
more information.
Statements must be ordered such that identifiers are
declared before they are used. If identifiers are used on
the right-hand side of an assignment statement, they
must also have been defined. If they are used in an
equation and the equation is included in a model, then
they must be assigned data before a solve statement for
the respective model. Note that compilation errors will
be triggered if this order is not followed.
Adding Complexity
There are several GAMS features that are widely used and serve
to add subtlety and compexity to models. They include
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
33/43


exception handling through conditionals, displaying data in the
output file and report writing where the information from the
optimal solution is used to create reports that meet the needs
of modelers and their clients.
Conditionals
Assignments are often valid only for certain cases and
sometimes equations should reasonably be restricted to a
subset of the domain over which they were defined. It is easy to
model such assignments and equations in GAMS with
conditionals. Conditional expressions in GAMS are introduced
and discussed in detail in chapter Conditional Expressions,
Assignments and Equations. In this section we will only give a
quick overview to demonstrate the capabilities of conditionals
in GAMS.
Note that the dollar condition is at the heart of conditionals in
GAMS. The general form of a conditional expression is as
follows:
This translates to: "Do something with 'term' only if the logical
condition is true." Observe that term may be a number, a set, a
parameter, a variable or an equation. The dollar operator $ is a
GAMS speciality and one of the most powerful features of
GAMS. The logical condition may take many different forms, see
section Logical Conditions for details.
The following examples illustrate how conditionals in GAMS
may be used.
Conditional Assignments
Consider the following example:
Note that x is assigned the value of ten only if the the scalar y
is greater than zero, otherwise no assignment is made and x
term $ logical_condition
x $ (y > 0) = 10;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
34/43


keeps its previous value. For more information, see section
Conditional Assignments.
Conditional Indexed Operations
Consider the following example:
Note that the term x(i) will only be included in the sum if
y(i) is nonzero. For further information, see section
Conditional Indexed Operations.
Conditionals in the Domain of Definition of Equations
Consider the following equation definition statements:
Note that in each equation the domain of definition is
restricted to those cases where the logical condition evaluates
to TRUE. For further details, see section Dollar Control over the
Domain of Definition.
Conditionals in the Algebraic Formulation of Equations
Our last example illustrates how a dollar condition may be
used in the body of an equation:
Note that the term yvar is included in the equation only if qq
is greater than zero, otherwise yvar is treated as if it were zero.
For more information, see section Dollar Operators within the
Algebra of Equations.
Displaying Data
In GAMS, the display statement is a quick way to write data into
the output file. For example, assume we add the following
z = sum[i $ (y(i) <> 0), x(i)];
Eq1 $ (qq > 0)..            xvar =e= 3;
Eq2 $ (sum(i, q(i)) > 0)..  yvar =l= 4;
Eq3(i) $ (a(i) > 0)..       ivar(i) =g= -a(i);
Eq4 . .    xvar + yvar $ (qq > 0) =e= 3;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
35/43


statement after the solve statement in the revised and
documented version of the farm linear programming model
above:
Recall that profit and production are variables. The suffix
.l indicates that we wish to display the variable attribute
level. The following output will be generated in the listing file:
Observe that the name of the variable, the explanatory text and
the respective numerical values are given. In addition to data
like parameters, sets, variable attributes, equation attributes
and model attributes, quoted text may be displayed. Note that
numerical entries that equal zero will not be displayed. For a
more detailed introduction, see chapter The Display Statement.
Report Writing
In many cases modelers wish to summarize the most important
results of the solution in a table for a quick overview. GAMS
allows post-solution computations where information form the
solution may be used to assign values to new parameters that
are then displayed. The information from the solution most
often used for report writing includes the level values of
variables and equations and the marginal values of equations
(also called dual values or shadow prices). Note that variable
and equation attributes are accessed as follows:
Here var_name and eqn_name is the name of the variable and
equation in GAMS respectively. The attribute is denoted by
.sfx, where sfx may be l for level and m for marginal. Note
display profit.l, production.l;
----     47 VARIABLE profit.L              =    
----     47 VARIABLE production.L  Number of uni
corn  50.000,    wheat 50.000
var_name.sfx
eqn_name.sfx
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
36/43


that the suffix sfx may take other values as well. For details
see sections Variable Attributes and Equation Attributes.
Observe that the numerical values of the levels and marginals
of variables and equations are generally undefined until a solve
statement is executed. After GAMS has retrieved the solution
from the solver, the respective values from the solution are
assigned to the attributes. These values remain unchanged
until the next solve, where they are replaced with the values
from the most recent solution.
In the remainder of this section we will present two examples
to illustrate report writing. Assume we add the following report
writing sequence after the solve statement to the revised and
documented version of the farm linear programming model
above:
Note that both, equation marginals (
available.m(resources)) and variable levels (
production.l(products)) are included in the calculations.
The predefined symbol sameas in the logical condition above
returns the value TRUE if the element of the set products is
equivalent to the element of the set qitem and FALSE
otherwise. Thus this condition ensures that the third index of
the parameter Thisreport is identical to the element of the
set products in the sum. Observe that with the option
statement in the penultimate line the appearance of the
display is customized. For details see section Local Display
Control. The following report will be generated by the display
statement:
 Set item   / Total, "Use by", Marginal /;
 Set qitem  / Available, Corn, Wheat, Cotton, Va
 
 Parameter Thisreport(resources,item,qitem) 'Rep
 Thisreport(resources,"Total","Available") = end
 Thisreport(resources,"Use by",qitem) =
    sum(products$sameas(products,qitem),
        resourceusage(resources,products) * prod
 Thisreport(resources,"Marginal","Value") =
         available.m(resources);
     
 option thisreport:2:1:2;
 display thisreport;
 ----     61 PARAMETER Thisreport  Report on res
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
37/43


Similarly, we could add the following report writing sequence to
the revised version of the equilibrium model above:
Note that in the new parameter the level values for supply and
demand as well as the market clearing price are saved. The
resulting report follows:
For more on report writing, see chapters The Display Statement
and The Put Writing Facility.
Advantages of Algebraic Modeling in
General
We will conclude this tutorial with a discussion of the
advantages of using algebraic modeling in general.
Algebraic modeling languages like GAMS facilitate model
formulations in general algebaric terms, that are very concise
and readable. Language elements that are essential include
sets that may serve as indices, algebraic expressions, indexed
operations, powerful sparse index and data handling variables
            Total      Use by      Use by    Mar
        Available        corn       wheat       
land       100.00       50.00       50.00       
labor      500.00      300.00      200.00       
 Set         qitem / Demand, Supply, "Market Cle
 Set         item  / Quantity, Price /;
 
 Parameter myreport(qitem,item,commodities);
 myreport("Demand","Quantity",commodities) = Qd.
 myreport("Supply","Quantity",commodities) = Qs.
 myreport("Market Clearing","Price",commodities)
 
 display myreport;
----     39 PARAMETER myreport
                               Corn       Wheat
Supply         .Quantity       1.711       8.156
Demand         .Quantity       1.711       8.156
Market Clearing.Price          2.671       4.618
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
38/43


and constraints with user-defined names. Model formulations
are largely independent of the data and exact application
contexts. Such formulations may be easily transferred to
different contexts, data may be added without the need to
reformulate the model and the model may be extended to
reflect additional complexity.
However, GAMS algebraic requirements and the summation
notation are difficult for some users. Some modelers will
always prefer the exact problem context, not an abstract
general formulation. This may lead to a strategy most modelers
use: Start with a small concrete formulations that capture the
essence of the problem and support the development of more
general GAMS models.
One Model - Different Contexts
In the linear programming problem above we modeled profit
maximizing in a farm. This model may easily be transferred to
another context as follows:
Set       products  'Items produced'
            / Chairs, Tables, Dressers /
          resources  'Resources limiting product
            / RawWood, Labor, WarehouseSpace /;
Parameter Netreturns(products)  'Net returns per
            / Chairs 19, Tables 50, Dressers 75 
          Endowments(resources) 'Amount of each 
            / RawWood 700, Labor 1000,  Warehous
Table     Resourceusage(resources,products) 'Res
                          Chairs   Tables  Dress
          RawWood            8        20      32
          Labor             12        32      45
          WarehouseSpace     4        12      10
Positive Variables   Production(products) 'Numbe
Variables            Profit               'Total
Equations            ProfitAcct           'Profi
                     Available(resources) 'Resou
 ProfitAcct..
      Profit
      =e= sum(products, netreturns(products) * p
 Available(resources)..
      sum(products,
          resourceusage(resources,products) * pr
      =l= endowments(resources);
Model resalloc /all/;
solve reasalloc using LP maximizing Profit;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
39/43


Note that in this model we have chairs, tables and dressers
instead of corn, wheat and cotton and raw wood, labor and
warehouse space instead of land and labor, but the algebraic
structure of the model is the same. Thus we still have sets for
products and resources, parameters for net returns per unit
produced and available resources, a table for resource usage
per unit produced and exactly the same variables and
equations, the same model and solve statement. Hence, if the
algebraic structure for a type of problem is built, it may be used
in another context of the same problem type with just minor
modifications in the data.
Adding More Data
It is easy to add more data to a model. For example, we could
add two new products and two new resources to the carpenter
model above in the following way:
Set       products  'Items produced'
              / Chairs, Tables, Dressers, HeadBo
          resources  'Resources limiting product
              / RawWood, Labor, WarehouseSpace, 
Parameter Netreturns(products)  'Net returns per
            / Chairs 19, Tables 50, Dressers 75,
          Endowments(resources) 'Amount of each 
            / RawWood 700, Labor 1000, Warehouse
Table     Resourceusage(resources,products) 'Res
                          Chairs   Tables  Dress
          RawWood            8        20      32
          Labor             12        32      45
          WarehouseSpace     4        12      10
          Hardware           1         1       3
          Shoptime           6         8      30
Positive Variables   Production(products) 'Numbe
Variables            Profit               'Total
Equations            ProfitAcct           'Profi
                     Available(resources) 'Resou
 ProfitAcct..
      Pofit
      =e= sum(products, netreturns(products) * p
 Available(resources)..
      sum(products,
          resourceusage(resources,products) * pr
      =l= endowments(resources);
Model resalloc /all/;
solve reasalloc using LP maximizing Profit;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
40/43


Observe that the elements HeadBoards and Cabinets were
added to the set Products and the elements Hardware and
ShopTime were added to the set Resources. In addition, the
data in the two parameters and the table was updated to
reflect these new labels. However, the model structure
remained unchanged. Thus, GAMS models may easily be
extended from smaller to larger data sets. Note that this
feature may be exploited for model development. Users may
develop a model with a small data set and test and debug it.
Afterwards, they may move to the full problem data set without
having to alter the algebraic structure of the model.For more
details on this strategy, see section Small to Large: Aid in
Development and Debugging.
Extending the Model
Assume we wish to make a model more complex by adding new
features. For example, we could extend the carpenter model
above to reflect the possibility of renting or hiring additional
resources subject to a maximum limit. Consider the following
code:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
41/43


Observe that we introduced the set hireterms, the table
Hiredata, the positive variable HireResource and the
equation Hirelimit. In addition, we included new terms in the
equations Profit and Available to reflect that through
hiring the resources are increased, but hiring comes with a cost
diminishing the profit. Thus the algebraic structure of the
earlier model could be used as the core for this model that has
additional features.
Set       products  'Items produced' 
              / Chairs, Tables, Dressers /
          resources  'Resources limiting product
              / RawWood, Labor, WarehouseSpace/
          hireterms  'Resource hiring terms'
              / Cost, Maxavailable /;
Parameter Netreturns(products)  'Net returns per
              / Chairs 19, Tables 50, Dressers 7
          Endowments(resources) 'Amount of each 
              / RawWood 700, Labor 1000, Warehou
Table     Resourceusage(resources,products) 'Res
                          Chairs   Tables  Dress
          RawWood            8        20      32
          Labor             12        32      45
          WarehouseSpace     4        12      10
Table     Hiredata(resources,hireterms)  'Resour
                          Cost   Maxavailable
          RawWood            3        200
          Labor             12        120
          WarehouseSpace     4        112;
Positive Variables   Production(products)    'Nu
                     HireResource(resources) 'Re
Variables            Profit                  'To
Equations            ProfitAcct              'Pr
                     Available(resources)    'Re
                     Hirelimit(resources)    'Re
 ProfitAcct..
      Profit
      =e= sum(products, Netreturns(products) * P
         - sum(resources, Hiredata(resources,"co
 
 Available(resources)..
      sum(products,
          Resourceusage(resources,products) * Pr
      =l= Endowments(resources) +  HireResource(
 Hirelimit(resources)..
          HireResource(resources) =l= Hiredata(r
Model resalloc /all/;
solve reasalloc using LP maximizing Profit;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
42/43


Note that this method may also be exploited for model
development. Users may adapt models from other studies
customizing them for the problem at hand and thus speeding
up the development process. In addition to adapting models
from related earlier studies that were done by the modeler or
his group, model development may be jumpstarted by adapting
models from the extensive GAMS Model Library.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Quick Start Tutorial
https://www.gams.com/latest/docs/UG_TutorialQuickstart.html
43/43


Fixing Compilation Errors
As detailed in
chapter GAMS
Output, the
execution of a
GAMS program
passes through
several stages,
where the
compilation is
the first stage.
Often when a
program is run
for the first time,
it cannot be
solved
successfully
because of
compilation
errors. This can
be very
frustrating,
especially for
new users. In this
tutorial we will
explain the
causes of the
most common
compilation
errors and offer
some advice on
how to fix them.
For an
introduction to
Table of Contents
Preliminary Remarks
Finding Compilation Errors
Repositioning Compilation Error
Messages
Resolving Common Compilation
Errors
Error A: Misplaced Semicolons
Error B: Missing Semicolons
Error C: Spelling Mistakes
Error D: Missing Set Elements
Error E: Problems with Indices
Error F: Summing over Sets that
are Already Indexed
Error G: Uncontrolled Sets
Error H: Mismatched
Parentheses
Error I: Mistakes Relating to
Equations
Error J: Issues with Nonlinear
Expressions
Error K: Using Undefined Data
Error L: Referencing Set
Elements Without Quotes
Error M: Missing Declaration
Statements
Error N: Using the Same Name
for Different Identifiers
Error O: Using ORD with an
Unordered Set
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
1/26


compilation
errors, see
section
Compilation
Errors. In
addition, the tutorial A GAMS Tutorial by Richard E. Rosenthal
offers some detailed material on this topic.
Note
Frequently, many compilation errors in the latter
part of the code are actually consequential errors
that will disappear as soon as the compilation
errors in the beginning have been resolved.
Therefore we recommend to start with fixing the
first few errors and to run the program again. More
often than not, many subsequent compilation
errors will have vanished.
Preliminary Remarks
Before we will turn to an overview of the most common errors,
examples that illustrate them and advice how to resolve them,
we will provide some basic information on compilation errors
and error messages.
Finding Compilation Errors
Compilation errors are marked with four asterisks (****) in the
compilation output of the GAMS listing file (also called output
file or lst file, since it has the extension .lst), hence it is easy
to detect lines where compilation errors occured by inspection.
Note
Compilation error messages also appear in the LOG
file. And, if GAMS Studio is used, a click at an error
message in the LOG will navigate directly to the
problematic code in the source file.
Consider the following simple example:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
2/26


If this set statement appears in a program, the resulting
compilation output will contain the following lines:
Note that in the echo print of the input file a line starting with
**** is inserted and the dollar sign $ followed by a number
appears on this line. This indicates that a compilation error - in
this case error 172 - was discovered in the line above. In
addition, a list of all errors with explanatory error messages is
given at the end of the echo print.
In our example, the error refers to wheat and the error
message addresses the cause of the error: the respective
element is redefined. Thus we check the other elements of the
set and quickly realize that wheat appears a second time. If we
delete the second instance of wheat and run the code again,
this line will not cause any errors anymore. Note that many
compilation errors are as easy to fix as demonstrated here.
Repositioning Compilation Error Messages
By default, the error messages are shown directly beneath the
line where the respective error is marked. GAMS allows to
customize this position with the command line parameter
ErrMsg: the value of 0 for ErrMsg will list all error messages at
the end of the echo print and the value of 2 will suppress the
error messages in the lst file completely. Note that the default
is 1.
Consider the following simple example.
Set c "crops"   / barley, wheat, soy, wheat, ric
   1  Set c "crops"   / barley, wheat, soy, whea
****                                           $
...
Error Messages
172  Element is redefined
Set       a    / a1 * a7 /;
Set       b(a) / a7 * a9 /;
Parameter p(k) / i3 47 /;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
3/26


The resulting compilation output will contain the following
lines:
Observe that the error messages are placed on the line after
the error is marked. This can be especially useful if the program
contains many lines of code. Next, we run the same code with
the following call:
The resulting compilaton output follows.
Now the error messages are displayed at the end of the
compiler listing.
Note
Default values for command line parameters and
environment variables can be specified using a
configuration file gamsconfig.yaml. The GAMS
Configuration Editor can be used to view and edit
the GAMS configuration file but any other text editor
can be used as well. Alternatively, users may change
the system level defaults by entering the line
ErrMsg=0 in the file gmsprmnt.txt on Windows,
   1  Set       a    / a1 * a7 /;
   2  Set       b(a) / a7 * a9 /;
****                         $170
**** 170  Domain violation for element
   3  Parameter p(k) / i3 47 /;
****              $120
**** 120  Unknown identifier entered as set
  > gams test  ErrMsg=0
   1  Set       a    / a1 * a7 /;
   2  Set       b(a) / a7 * a9 /;
****                         $170
   3  Parameter p(k) / i3 47 /;
****              $120
...
Error Messages
120  Unknown identifier entered as set
170  Domain violation for element
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
4/26


or gmsprmun.txt on Unix machines as in the
following example:
Resolving Common Compilation
Errors
There are hundreds of compilation errors in GAMS, but some of
them are particularly frequent. In the table below we present
these common errors, with a brief description of the possible
cause and a link to a subsection below where examples and
more details are given. We recommend that users also read the
error messages, since they often contain additional hints.
************************************************
* GAMS 2.50 Default Parameterfile for Windows NT
* Gams Development Corp.                        
* Date : 20 Mar, 1998                           
************************************************
* entries required by CMEX, put in by gams.exe:
* SYSDIR
* SCRDIR
* SCRIPTNEXT
* INPUT
errmsg=0
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
5/26


GAMS
Error
Common Cause of Error
Subsections
with Examples
and More
Details
8
Closing parentheses, square
brackets or braces are missing.
H
36
The two dots .. are missing in
the equation definition.
I
37
The equation type (eg. =L=) is
missing in the body of the
equation.
I
51-
60
There are prohibited nonlinear
expressions.
J
66
A data item which has not been
given numerical values appears
in an equation.
K
71
The equation has been
declared, but not defined.
I
96, 97
A statement followed by
another statement is not
terminated with ;.
B
120
GAMS cannot find a set with
this name. Check for typos in
the set name and set elements
that are referenced without
quotes.
C, L
125
The set is controlled more than
once, e.g., by an indexed
operation like sum and by an
equation definition.
F
140
GAMS is looking for a keyword
or declared item and cannot
find it. Check spelling and
declarations.
A, C, K, M
141
The parameter without data is
used or problems with solve
and therefore attributes .l and
.m are empty.
K
148
The identifier is referenced with
more or less indexed sets than
in the declaration
E
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
6/26


in the declaration.
149
The set is not controlled,
neither by an indexed
operation like sum, nor by an
equation definition, nor by a
loop or similar.
G, L
170
The referenced set element
cannot be found in the set
defined for this index position.
Check for typos, omissions in
the set declaration, missing
quotes and references to the
wrong set.
C, D
171
A domain error. The wrong set
is referenced for the respective
index position.
E, L
195
The name used here was
already used for another
identifier.
N
198
Using the operation ord or a
lag/lead operation with a set
that is not ordered.
O
256
Something is wrong with the
model specification. This is
often a consequential error of
another error. Look for other
error messages immediately
after the solve statement.
I, J
257
The solver is not checked. This
may be a consequential error of
any GAMS error.
340
Probably the quotes in a set
element reference are missing.
L
408
Surplus closing parentheses,
square brackets or braces.
H
Error A: Misplaced Semicolons
Maybe the most common error for new users is related to
semicolons. Consider the following example adapted from the
well-known transportation model [TRNSPORT]:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
7/26


The resulting compilation output will contain the following
lines:
Sets  i   "canning plants"   / Seattle, San-Dieg
      j   "markets"          / New-York, Chicago
   20    Sets i   canning plants   / Seattle, Sa
   21         j   markets          / New-York, C
****         $140      $36
...
Error Messages
 36  '=' or '..' or ':=' or '$=' operator expect
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
8/26


What went wrong? GAMS statements like the set statement in
our example have to terminate with a semicolon, unless the
next line of code begins with a reserved word. Now, set
statements may extend over several lines and define several
sets. In our example, the set statement extends over two lines
and two sets are declared. However, there is a semicolon at the
end of the first line, therefore GAMS assumes that the set
statement ends there. The symbol j at the beginning of the
next line has not been declared yet and it is not a GAMS
keyword, thus it is marked as Unknown symbol. Note that error
36 is a consequential error that will disappear as soon as the
first error has been resolved.
How do we fix this? There are two ways: either we could drop
the semicolon at the end of the first line and thus indicate that
the set statement continues to the second line or we could
insert the keyword Set at the start of the second line and thus
introduce a new set statement. These two alternatives are
illustrated below:
or
Note
In general, GAMS statements have to be
terminated with a semicolon. The semicolon
may be omitted if the next line starts with a
GAMS keyword.
Even if it is not required, it is good practice to
always end a statement with a semicolon.
     rest of statement ignored
140  Unknown symbol
Sets  i   "canning plants"   / Seattle, San-Dieg
      j   "markets"          / New-York, Chicago
Sets  i   "canning plants"   / Seattle, San-Dieg
Set   j   "markets"          / New-York, Chicago
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
9/26


Error B: Missing Semicolons
Consider the following example adapted from the well-known
transportation model [TRNSPORT]:
The resulting compilation output will contain the following
lines:
What went wrong? GAMS statements like the equation
declaration in our example have to terminate with a semicolon,
unless the next line of code begins with a GAMS keyword. In our
example, we omitted the semicolon at the end of the equation
declaration statement and started a new statement after a
blank line.
How do we fix this? We simply add a semicolon after the last
explanatory text at the end of the equation declaration
statement.
Note
A missing semicolon is often associated with error
96 or 97.
Equations
       cost        "define objective function"
       supply(i)   "observe supply limit at plan
       demand(j)   "satisfy demand at market j"
cost ..        z  =e=  sum((i,j), c(i,j)*x(i,j))
   52    Equations
   53         cost        define objective funct
   54         supply(i)   observe supply limit a
   55         demand(j)   satisfy demand at mark
   56
   57    cost ..        z  =e=  sum((i,j), c(i,j
****         $97                      $195,96,19
...
Error Messages
 96  Blank needed between identifier and text
       (-or- illegal character in identifier)
       (-or- check for missing ';' on previous l
 97  Explanatory text can not start with '$', '=
       (-or- check for missing ';' on previous l
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
10/26


Error C: Spelling Mistakes
This error occurs if sets, set elements, parameters, etc. are
referenced with a different name than the name they were
declared with. Note that differences in capitalization are not
considered spelling mistakes since GAMS is case insensitive.
Consider the following example adapted from the well-known
transportation model [TRNSPORT]:
The resulting compilation output will contain the following
lines:
Sets i   "canning plants"   / Seattle, San-Diego
     j   "markets"          / New-York, Chicago,
Parameters a(i)  "capacity of plant i in cases"
          /   Seatle      350
              san-diego   600  / ;
...
Equations
       cost        "define objective function"
       supply(i)   "observe supply limit at plan
       demand(j)   "satisfy demand at market j" 
cst ..        z  =e=  sum((i,j), c(i,j)*x(i,j)) 
   20    Sets i   canning plants   / Seattle, Sa
   21         j   markets          / New-York, C
   22
   23    Parameters a(i)  capacity of plant i in
   24            /   Seatle      350
****                     $170
   25                san-diego   600  / ;
...
   49    Equations
   50         cost        define objective funct
   51         supply(i)   observe supply limit a
   52         demand(j)   satisfy demand at mark
   53
   54    cst ..        z  =e=  sum((i,j), c(i,j)
****      $140
...
Error Messages
140  Unknown symbol
...
170  Domain violation for element
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
11/26


What went wrong? Note that in line 24 the set element Seattle
was referenced as Seatle. GAMS does not recognize this
symbol as an element of the set i and thus marks this with
error 170: Domain violation. GAMS catches this error since it
automatically performs domain checking. The typo in line 54,
where the equation cost is referenced as cst, is marked with
error 140 (Unknown symbol), since cst was not declared
before.
Note
Set name misspellings are associated with error
120, set element misspellings with 170 and other
misspellings with 140.
Fixing errors like these is as easy as fixing typos.
Error D: Missing Set Elements
Sometimes users forget to include an element in a set
statement, but reference it later. Consider the following simple
example:
The resulting compilation output will contain the following
lines:
What went wrong? Note that the symbol rice was not defined
as an element of the set c, thus GAMS does not recognize it and
marks it with error 170: Domain violation. GAMS catches this
error since it automatically performs domain checking.
Set       c    "crops"                 / barley,
Parameter d(c) "demand in metric tons" / rice 3,
   1  Set            c    "crops"               
   2  Parameter      d(c) "demand in metric tons
****                                            
...
Error Messages
170  Domain violation for element
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
12/26


Note
If symbols are not defined as set elements, but are
referenced as if they belong to the set later, error
170 will occur.
This is easy to fix: we just add the missing element(s) to the
elements of the respective set.
Error E: Problems with Indices
Recall that variables, sets, parameters and equation may be
defined over one or more indices. If the identifiers are
referenced later in the program, the indices must appear
exactly in the order that was specified in the respective
definition statement. Consider the following example adapted
from the well-known transportation model [TRNSPORT]:
The resulting compilation output will contain the following
lines:
What went wrong? Note that the parameter c was declared over
two indices, but in the assignment statement in line 41 it is
referenced with three indices. Such a mistake is marked with
Sets i   "canning plants"   / seattle, san-diego
     j   "markets"          / new-york, chicago,
Table d(i,j)  "distance in thousands of miles"
                    new-york       chicago      
      seattle          2.5           1.7        
      san-diego        2.5           1.8        
Scalar    f       "freight in dollars per case p
Parameter c(i,j)  "transport cost in thousands o
c(i,j,j) = f * d(j,i) / 1000 ;
   40    Parameter c(i,j)  transport cost in tho
   41    c(i,j,j) = f * d(j,i) / 1000 ;
****           $148       $171,171
...
Error Messages
148  Dimension different - The symbol is referen
        indices as declared
171  Domain violation for set
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
13/26


error 148. Note further, that the indices of d are referenced in
the wrong order, which is marked with error 171.
Note
If an identifier is referenced with more or less
indices as declared, then the error 148 will be
triggered. If the indices are in the wrong order, the
error 171 will be triggered.
This is easy to fix: we just check the declaration or definition
statement(s) and adjust the reference.
Observe that the domain error 171 is also triggered if an
identifier is referenced with index say i, but was defined over
say j. However, there will be no domain error if i is a subset of
j or i and j reference the same set since they are aliases.
Error F: Summing over Sets that are Already
Indexed
Consider the following equation definition that is adapted from
the well-known transportation model [TRNSPORT]:
The resulting compilation output will contain the following
lines:
What went wrong? Note that the equation is indexed over the
set i, therefore the indexed operation sum in the body of the
equation may not be controlled by the index i again.
Note
supply(i) ..   sum((i,j), x(i,j))  =l=  a(i) ;
   59    supply(i) ..   sum((i,j), x(i,j))  =l= 
****                         $125
...
Error Messages
125  Set is under control already
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
14/26


Summing over sets that are already indexed will
trigger error 125.
How do we fix this? We need to carefully check the indexed
operation and drop the surplus index. In other cases the
controlling index may have to be dropped from the equation
name. Note that an error like this is often indicative of a lack of
clarity in thinking.
Error G: Uncontrolled Sets
Consider the following equation definition that is adapted from
the well-known transportation model [TRNSPORT]:
The resulting compilation output will contain the following
lines:
What went wrong? Note that the variable x is indexed over the
sets i and j, but, while i is the index of the indexed operation
sum, j is "free": it does neither appear as index of the equation
nor as controlling index in sum. Therefore it was entered as if it
were a constant. Note further, that j is also used as an index on
the right-hand side of the equation without being controlled.
Note
Error 149 marks instances when an index is not
controlled in the context of an equation or an
indexed operation like sum or prod.
How do we fix this? We have to think what we actually want to
model. In this case we need to enter j as a controlling index for
demand ..   sum(i, x(i,j))  =g=  b(j) ;
   61    demand ..   sum(i, x(i,j))  =g=  b(j) ;
****                            $149        $149
...
Error Messages
149  Uncontrolled set entered as constant
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
15/26


the equation. But it would also be possible to add it as a
controlling index for sum (but not both!). In the latter case there
would still be the error on the right-hand side which needed to
be taken care of with another indexed operation, e.g., sum
again. Both approaches would remove the compilation error,
but one has to think about what actually should be modeled to
decide which is the right fix here.
Error H: Mismatched Parentheses
Consider the following two equations adapted from the model
[CHENERY]:
The resulting compilation output will contain the following
lines:
What went wrong? Note that in the first equation we have one
surplus closing parenthesis, this is marked with error 408. The
error marked with 409 is a consequential error, it will disappear
once the first error has been fixed. In the second equation, one
closing parenthesis is missing resulting in error 8.
Attention
Opening and closing parentheses ( ), square
brackets [ ] and braces (curly brackets) { } must
mb(i).. x(i) =g= y(i) + sum(j, aio(i,j)*x(j)) + 
...
dvv(i)$(sig(i) <> 0)..  vv(i) =e= (pi*(1-del(i))
   137   mb(i).. x(i) =g= y(i) + sum(j, aio(i,j)
****                                            
...
   155   dvv(i)$(sig(i) <> 0)..  vv(i) =e= (pi*(
****                                            
...
Error Messages
  8  ')' expected
...
408  Too many ),] or }
409  Unrecognizable item - skip to find a new st
       looking for a ';' or a key word to get st
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
16/26


match.
Note
Surplus closing parentheses, bracketes and braces
are marked with error 408 and missing closing
parenthesis, brackets and braces are marked with
error 8. Missing opening parentheses, brackets and
braces may result in GAMS marking surplus closing
parentheses, brackets and braces; surplus opening
parentheses, brackets and braces may result in
GAMS marking missing closing parentheses,
brackets and braces.
While fixing errors like these entails carefully counting opening
and closing parentheses, there are strategies that help to
prevent mismatching parentheses errors. Many text editors (like
GAMS Studio) offer a feature that identifies matching
parentheses and will issue a warning if there is a mismatch. We
recommend to use this feature. Further, we recommend to also
use the alternatives to parentheses: square brackets and
braces. They are especially useful if there are several opening
parentheses since it is easier to determine by inspection if
each has a matching closing symbol.
Error I: Mistakes Relating to Equations
Recall that each declared equation must be defined if it is to be
used in a model statement. If the equation definition is
missing, GAMS will mark an error beneath the solve statement
that refers to a model which references the respective
undefined equation. Consider the following example adapted
from the well-known transportation model [TRNSPORT]:
Equations
       cost        "define objective function"
       supply(i)   "observe supply limit at plan
       demand(j)   "satisfy demand at market j" 
cost ..        z  =e=  sum((i,j), c(i,j)*x(i,j))
supply(i) ..   sum(j, x(i,j))  =l=  a(i) ;
Model transport /all/ ;
solve transport using lp minimizing z ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
17/26


The resulting compilation output will contain the following
lines:
What went wrong? Note that the equation demand was declared
and included in the model transport, but it was not defined.
GAMS detects that the equation definition is missing when it
compiles the solve statement that relates to the model
transport. Therefore the error 71 appears only there. The
error 256 is a consequential error, it will disappear once the
missing equation definition has been added (before the solve
statement).
Note
Error 71 marks a missing equation definition. The
message associated with this error is a nice
example of an error message that is very
descriptive and offers advice on how to fix the error.
Apart from forgetting to define a declared equation and
forgetting to terminate the equation definition statement with
a semicolon (see above), two other mistakes relating to
equations are frequent: omitting the syntax element .. after
the name of the equation and not properly defining the
equation type in the equation definition statement. The
following simple example adapted from the portfolio analysis
model [ALAN] illustrates these mistakes:
   60    Model transport /all/ ;
   61    solve transport using lp minimizing z ;
****                                          $7
**** The following LP errors were detected in mo
****  71 demand is an undefined equation
...
Error Messages
 71  The symbol shown has been declared as an eq
        Symbolic equation (..) was found. hint -
        Documentation text for the equations. us
        Text or eliminate the commas.
256  Error(s) in analyzing solve statement. More
     Below the solve statement above
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
18/26


The resulting compilation output will contain the following
lines:
What went wrong? Note that in the first equation the two dots
.. are missing, which is marked with error 36, and in the
second equation the equation type is not properly specified,
which leads to error 37.
Error J: Issues with Nonlinear Expressions
The compilation error messages 51 to 60 refer to issues with
nonlinear expressions involving variables in equations. For
example, nonlinear expressions in an LP model will cause
errors of this sort. So will discontinuous functions with
endogenous arguments in an NLP model. For information on
endogenous arguments in functions, see section Functions in
Equation Definitions. For an overview of GAMS model types, see
section Classification of Models.
Consider the following simple artificial example:
fsum       sum(i, x(i))               =e=  1.0;
dmean..    sum(i, mean(i)*x(i))        =   targe
   45  fsum     sum(i, x(i))                 =e=
****             $36
   46  dmean..    sum(i, mean(i)*x(i))        = 
****                                       $37
...
Error Messages
36  '=' or '..' or ':=' or '$=' operator expecte
     rest of statement ignored
37  '=l=' or '=e=' or '=g=' operator expected
Variables x, y, z ;
Equations eq1, eq2 ;
eq1.. x**2 - y =e= z ;
eq2.. min(x,y) =l= 20 ;
Model silly / all / ;
solve silly using lp maximizing z ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
19/26


The resulting compilation output will contain the following
lines:
Note that error 54 marks the nonlinear expression 
 in a
linear model and error 51 refers to the discontinuous function
min that may be used with variables only in models of the type
DNLP. The error 256 is a consequence of the two previous
errors.
Error K: Using Undefined Data
Referencing data items that were not declared with a scalar,
parameter or table statement will cause error 140: GAMS will
indicate that the respective symbol is unknown. More often
data items are declared, but not defined, i.e. they are not
initialized with values.
Consider the following example adapted from the well-known
transportation model [TRNSPORT]. Assume that the scalar f is
declared, but has no numerical value. The resulting compilation
output will contain the following lines:
   7  Model silly / all / ;
   8  solve silly using lp maximizing z ;
****                                    $54,51,2
**** The following LP errors were detected in mo
****  54 equation eq1.. VAR operands for **
****  51 equation eq2.. the function MIN is call
Error Messages
51  Endogenous function argument(s) not allowed 
54  Endogenous operands for ** not allowed in li
256  Error(s) in analyzing solve statement. More
     Below the solve statement above
   40    Scalar f  freight in dollars per case p
   41
   42    Parameter c(i,j)  transport cost in tho
   43
   44              c(i,j) = f * d(i,j) / 1000 ;
****                       $141 
...
   61    Model transport /all/ ;
   62    solve transport using lp minimizing z ;
****                                          $2
   63
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
20/26


What went wrong? Note that the scalar f was declared, but
there was no value assigned to it. Thus, when it is referenced in
the calculation in line 44, the "empty" scalar causes error 141.
Error 257 is a consequential error and leads to the second
error 141. This error occurs in the context of variable attributes
in the display statement. Recall that variable attributes are
data associated with variables. As the solve statement could
not be checked, the level and marginal values of the variable x
are not defined and hence error 141 follows.
Note
Error 141 marks places where data items, that have
not been defined, are referenced in computations in
the context of assignment statements. It also marks
places where undefined variable (or equation)
attributes are referenced.
In addition, undefined data items may be referenced in the
context of equation definitions. Suppose we declare the
parameter c in model [TRNSPORT], but forget the
corresponding assignment statement. Then the compilation
output will contain the following lines:
   64    display x.l, x.m ;
****              $141
...
Error Messages
141  Symbol declared but no values have been ass
        data definition, assignment, data loadin
        via a solve statement.
        A wild shot: You may have spurious comma
        text of a declaration. Check symbol refe
257  Solve statement not checked because of prev
   57    cost ..        z  =e=  sum((i,j), c(i,j
 ...
   62    solve transport using lp minimizing z ;
****                                          $6
**** The following LP errors were detected in mo
****  66 equation cost.. symbol "c" has no value
...
Error Messages
 66  The symbol shown has not been defined or as
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
21/26


Note that the missing data in the body of the equation cost is
marked with error 66 and the following error is a consequential
error which will disappear once 66 has been fixed.
Note
Referencing undefined data items in the body of an
equation causes error 66.
Error L: Referencing Set Elements Without
Quotes
Recall that if set elements are referenced, they need to appear
in single or double quotes. Omitting the quotes may cause
different errors depending on the context. The following
example is adapted from the well-known transportation model
[TRNSPORT]. Suppose we start by defining the two sets and the
two parameters and then add the following statements:
The resulting compilation output will contain the following
lines:
        A wild shot: You may have spurious comma
        text of a declaration. Check symbol refe
256  Error(s) in analyzing solve statement. More
     Below the solve statement above
Scalar s;
s = a(seattle);
   37  Scalar s;
   38  s = a(seattle);
****              $120,340,149,171
...
Error Messages
120  Unknown identifier entered as set
149  Uncontrolled set entered as constant
171  Domain violation for set
340  A label/element with the same name exist. Y
        to quote a label/element reference. For 
        set i / a,b,c /; parameter x(i); x('a') 
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
22/26


What went wrong? On the right-hand side of the assignment
statement we have a reference with missing quotes. Note that
this creates four (!) errors:
120 - GAMS expects a controlling set and Seattle is not
recognized and therefore considered an unknown
identifier.
340 - Then GAMS realizes that actually there is a label
called Seattle in the program and helpfully offers a
hint:
You may have forgotten to quote a
label/element reference.
149 - See section Error G: Uncontrolled Sets above.
171 - See section Error E: Problems with Indices above.
This is a nice example for one mistake triggering several errors
that may look daunting. However, fixing them is as easy as
adding single or double quotes.
Error M: Missing Declaration Statements
Recall that sets, parameters, variables and equations have to
be declared before they may be used in definition or
assignment statements. Suppose the equation demand in the
well-known transportation model [TRNSPORT] was defined but
not declared. Then the compilation output would contain the
following lines:
Note that as demand was not declared, GAMS does not
recognize it and therefore marks it with error 140:
Unknown symbol.
Note
If error 140 is reported, the respective declaration
statement is probably missing. However, the
underlying cause may also be a simple typo.
   59    demand(j) ..   sum(i, x(i,j))  =g=  b(j
****         $140
...
Error Messages
140  Unknown symbol
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
23/26


Error N: Using the Same Name for Different
Identifiers
Recall that each GAMS identifier must have a unique name. If
the same name is used more than once, an error will be
triggered. Consider the following modification of the
transportation model [TRNSPORT]:
The resulting compilation output will contain the following
lines:
What went wrong? Note that demand was first declared as a
parameter and later as an equation. GAMS will mark this
repeated use of the same name with error 195.
Error O: Using ORD with an Unordered Set
Recall that the operation ord is only defined for ordered sets. If
ord is used with an unordered set, error 198 will be triggered.
Consider the following example:
Parameters  capacity(i)  "capacity of plant i in
                / Seattle 350, San-Diego 600 /
            demand(j)    "demand at market j in 
                / New-York 325, Chicago 300, Top
...
Equations
       cost        "define objective function"
       supply(i)   "observe supply limit at plan
       demand(j)   "satisfy demand at market j" 
   47    Equations
   48         cost        define objective funct
   49         supply(i)   observe supply limit a
   50         demand(j)   satisfy demand at mark
****              $195
...
Error Messages
195  Symbol redefined with a different type
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
24/26


The resulting compilation output will contain the following
lines:
What went wrong? Two elements of the set b featured already
in set a that was defind before set b. Therefore the order of the
elements in set b is as follows:
Obviously, this set is not orderd and hence GAMS marks error
198 when the operator ord is applied to it.
How do we fix this? In this case it is easy: we just define the set
b before set a and b will be an ordered set.
Consider one last example:
Set    a   "a couple of the elements" / r2, r3 /
Set    b   "more elements"            / r1*r4 /;
Scalar c   "counter"                  / 0 /;
loop( b $ (ord(b) > 3), 
    c = c + 1 );
display c;
   5  loop( b $ (ord(b) > 3),
****                $198
   6      c = c + 1 );
...
Error Messages
198  Set used in 'ord' or lag is not ordered.
        Hint: Some of the elements of the set we
        was initialized and the order was differ
        in this set. Try to initialize the set e
        $offOrder allows lag operations on dynam
        $onOrder
r2 r3 r1 r4
Set    a   "all elements"                / r1*r1
Set    b   "elements in different order" / r3, r
Scalar c   "counter"                     / 0 /;
loop( b $ (ord(b) > 3),
    c = c +1 );
display c;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
25/26


The resulting compilation output will contain the following
lines:
What went wrong? Note that even though all elements in set b
are also elements of set a, they are not specified in the same
order. Therefore the set b is unordered. For more details, see
section Ordered and Unordered Sets.
   5  loop( b $ (ord(b) > 3),
****                 $198
   6      c = c +1 );
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:42
Fixing Compilation Errors
https://www.gams.com/latest/docs/UG_FixingErrors.html
26/26


Finding and Fixing
Execution Errors and
Performance Problems
This tutorial is
structured in four
main parts: we
will discuss how
to find and
resolve errors
that are detected
during execution
of a GAMS model,
we will give some
guidance for
model
development and
debugging and
we will present
techniques to
increase
efficiency by
reducing GAMS
execution time
and memory use.
Resolving
Execution
Errors
Recall that GAMS
passes through a
program file
Table of Contents
Resolving Execution Errors
Arithmetic Errors
Exceeding GAMS Limits
Resolving Model Generation
Errors
Resolving Solve Errors
Resolving Function
Evaluation Errors
Presolve Errors
Solver Specific Limits
Managing Execution Errors with
the Function execError
Small to Large: Aid in Development
and Debugging
An Illustrative Example
Motivation and Step by Step
Guide
Modeling Techniques
Isolating Problem Areas
through Saving and
Restarting
Introducing Strategical
Subsets
Reducing Data
Increasing Efficiency: Reducing
GAMS Execution Time
Finding the Causes for Slow
Program Execution
Generating an Execution
Profile
Isolating Terms in Slow
Statements
Observing the Log File
Eliminating the Main Causes for
Slow Program Execution
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
1/36


several times in
the process of
generating and
solving a model.
Errors may occur
in each phase. In
this section we
will give some
guidance on how to resolve errors that occur during execution,
so after compilation. For advice on resolving compilation
errors, see the tutorial Fixing Compilation Errors. For more
information on the process of generating and solving a model
in GAMS, see the introduction to chapter GAMS Output.
At execution, several things could go wrong and cause an error.
We will look at these potential error sources separately in this
section. First we look at arithmetic errors and exceeded
internal limits during data manipulation, we will continue with
problems during model generation and model solution. At the
end, we will briefly discuss how execution errors may be
managed with the function execError.
Arithmetic Errors
GAMS execution errors may be caused by illegal arithmetic
operations like a negative argument for log, division by zero
and exponentiation where the base is a negative number. The
following simple example serves as illustration:
The first sign that something in the execution went wrong is the
following flag in the log output:
Set       s     / s1*s5 / ;
Parameter p(s)  "data to be exponentiated"
          d(s)  "divisors"
          r(s)  "result";
p(s)    = 1;
p("s2") = -1;
d(s)    = 1;
d("s3") = 0;
r(s)    = p(s)**2.1 / d(s)
display r;
*** Status: Execution error(s)
Ordering Indices
Consistently
Replace loops with
assignments
Restricting Assignments
and Equations to Relevant
Cases
Assignments
Variables and
i
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
2/36


The resulting execution output will contain the following lines:
Observe that the execution output begins with two error
messages that can be easily found since they are marked with
four asterisks ****. The error messages are very informative:
they indicate the line where the errors occurred and provide
details about the nature of the errors. Further, the output
generated by the display statement shows that the errors
occurred when the values for r("s2") and r("s3") were
computed. Inspecting the assignment statement for these two
values, we realize that in the first instance the base for the
exponentiation is -1, which obviously is a negative number and
hence is not allowed in this operation. In the second instance,
the problem is that we divide by d("s3") which equals zero.
In this example, the errors are easily resolved with data
revisions. In general, we recommend to use conditional
assignments to prevent errors like these.
Note that in the example above the error messages indicated
exactly where the problem was and it was easy to find the
cause of the error. However, this is not always the case. In
particular, if the problem is within a multi-dimensional item the
user will need more patience. Usually it helps to display the
results of the problematic operation and look for faulty entries.
In addition, displaying the input data to the respective
operation will help to investigate the numerical properties of
the data that was entered in the computation. Often more
displays will be needed to trace faulty input data through the
program. Eventually this will lead the user to understand why
the data has taken on the specific numerical values it has.
Exceeding GAMS Limits
By default, GAMS stops the solve of a model after 1e10 seconds
(wall clock time) or 2e9 iterations. These limits may be adjusted
E x e c u t i o n
**** Exec Error at line 10: rPower: FUNC DOMAIN:
**** Exec Error at line 10: division by zero (0)
----     11 PARAMETER r  result
s1 1.000,    s2  UNDF,    s3  UNDF,    s4 1.000,
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
3/36


with the options reslim and iterlim respectively. Note that both
options are also available as command line parameters and
model attributes. In addition, the workspace may be limited
with the command line parameters WorkFactor and WorkSpace.
Note that these options are also available as model attributes.
If any of these limits are exceeded, the execution of the solve
statement will be interrupted.
For example, we could add the following option statement
somewhere before the solve statement in the production model
[CHENERY]:
Note that this statement reduces the iteration limit to just 20.
The log output will contain the following lines:
Also the solve summary in the listing file notes the interrupt:
Observe that the solver status Iteration Interrupt
indicates that the execution terminated because the iteration
option iterlim = 20;
 ** Feasible solution. Value of objective =    1
 
 ** The iteration limit has been reached.
 
--- Restarting execution
--- chenery.gms(228) 2 Mb
--- Reading solution for model chenrad
*** Status: Normal completion
--- Job chenery.gms Stop 11/21/16 16:52:43 elaps
               S O L V E      S U M M A R Y
     MODEL   chenrad             OBJECTIVE  td
     TYPE    NLP                 DIRECTION  MAXI
     SOLVER  CONOPT              FROM LINE  228
**** SOLVER STATUS     2 Iteration Interrupt
**** MODEL STATUS      7 Feasible Solution
**** OBJECTIVE VALUE             1058.9199
 RESOURCE USAGE, LIMIT          0.078      1000.
 ITERATION COUNT, LIMIT        20            20
 EVALUATION ERRORS              0             0
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
4/36


limit has been reached resulting in a feasible solution, but not
the optimal solution. The line ITERATION COUNT, LIMIT ...
reports that 20 iterations were performed and that 20 was also
the limit for the number of iterations. Setting iterlim to a
larger value will resolve this issue.
Similarly, allocating too little work space will cause the solver
to terminate with no solution. For example, restricting the work
space for the nonlinear test model [MHW4D] to just 0.1 MB and
running it with the solver MINOS will produce the following
lines in the log output:
The solve summary in the listing file will contain the following
information:
Note that increasing the work space to at least the minimum
amount requested by the solver will resolve this issue.
When dealing with large nonlinear expressions defined over a
very large domain, one can face the following error.
 Work space requested by solver --     0.77 Mb
 Work space requested by user   --     0.10 Mb
 Work space allocated           --     0.10 Mb
  Reading Rows...
  Reading Columns...
  Reading Instructions...
 EXIT - Not enough storage to solve the model.
        Request at least    0.19 Mbytes.
               S O L V E      S U M M A R Y
     MODEL   wright              OBJECTIVE  m
     TYPE    NLP                 DIRECTION  MINI
     SOLVER  MINOS               FROM LINE  32
**** SOLVER STATUS     9 Setup Failure
**** MODEL STATUS      13 Error No Solution
*** Status: Terminated due to limits in NLCodeAd
***         Cannot handle more than 2147483647 i
***         Inspect listing file for more inform
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
5/36


The first thing to check in this case is correctness of the model
i.e., if you are not generating anything more than necessary. If
this is not the case and the model is indeed large, a generic
advise is to introduce intermediate variables to get a smaller
code size per block of equations. One can also consider
partitioning the domains so that one can have more number of
smaller blocks.
Resolving Model Generation Errors
Further execution errors may be detected when GAMS is
generating the model before passing it to the solver. These
errors may be arithmetic errors in the body of equations or
errors in the structure of the model that cause the model to be
inherently infeasible.
Consider the following simple example with arithmetic errors in
the body of the equations. They are similar to the errors in the
assignment in the example in section Arithmetic Errors above.
If we run this model, the log output will contain the followng
lines:
Set       s     / s1*s5 / ;
Parameter p(s)  "data to be exponentiated"
          d(s)  "divisors"
          m(s)  "multipliers";
p(s)    = 1;
p("s2") = -1;
d(s)    = 1;
d("s3") = 0;
m(s)    = 1;
m("s4") = 0;
Positive variable x(s);
Variable          z;
Equations obj  "objective function"
          xlim;
obj..      z =e= sum(s,p(s)**2.2*x(s));
xlim(s)..  m(s) / d(s)*x(s) =e= 1;
Model mymodel / all /;
solve mymodel using lp maximizing z;
*** SOLVE aborted
--- Executing CPLEX: elapsed 0:00:00.006
--- test.gms(23) 4 Mb 3 Errors
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
6/36


Observe that the solve was aborted since there are 3 execution
errors. The equation listing in the listing file will contain further
details about these execution errors:
Note that there is an arithmetic error relating to exponentiation
in the first equation and an arithmetic error and an infeasibility
in the second equation.
In our example, it was easy to detect the execution errors and
their cause. However, an error in a multi-dimensional equation
block may be much more difficult to find. Note that by default,
only the first three entries in each equation block are shown in
the equation listing. We recommend to use the option limrow
to get a full listing, as this is the easiest way to inspect
execution errors in the body of equations.
Resolving Solve Errors
In the solution phase, an external solver program processes the
model and creates output with details about the solution
process. Solve errors may be either function evaluation errors
or presolve errors.
*** Status: Execution error(s)
--- Job test.gms Stop 11/21/16 19:10:12 elapsed 
Equation Listing    SOLVE mymodel Using LP From 
**** Exec Error at line 19: rPower: FUNC DOMAIN:
---- obj  =E=  objective function
obj..  - x(s1) + UNDF*x(s2) - x(s3) - x(s4) - x(
**** Exec Error at line 20: division by zero (0)
**** Exec Error at line 20: Equation infeasible 
**** INFEASIBLE EQUATIONS ...
---- xlim  =E=
xlim(s4)..  0 =E= 1 ; (LHS = 0, INFES = 1 ****)
REMAINING 4 ENTRIES SKIPPED
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
7/36


Resolving Function Evaluation Errors
Some solve statements require the evaluation of nonlinear
functions and the computation of derivatives. Since these
calculations are not carried out by GAMS but by other
subsystems not under the direct control of GAMS, errors
associated with these calculations are reported in the solution
report.
Function evaluation errors are numerical errors like those
discussed in section Arithmetic Errors above. Other examples
include square roots of negative variables and squaring a
negative term, say x, using the syntax x**2.
Attention
Squaring a negative term, say x, using the syntax
x**2 will cause an error. However, the alternatives
sqr(x) and x*x will work (see here for an
explanation).
Note that by default the solver subsystems will interrupt the
solution process if arithmetic errors are encountered. Users
may wish to permit a certain number of arithmetic errors and
have reported error warnings instead. The option domlim
facilitates this modification. Note that the default value for
domlim is zero.
The best way to avoid evaluating functions outside their
domain of definition is to specify reasonable variable bounds.
However, there are cases when bounds are not enough.
Consider the following simple example:
Set       i  / i1*i5 /;
Variables x(i), z;
Equations r1, r2(i);
r1..     z =e= log(sum(i, x(i)));
r2(i)..  x(i) =l= 10;
x.lo(i) = 0;
x.l(i)  = 5;
Model takelog / all /;
solve takelog using nlp minimizing z;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
8/36


If we try to solve this little program with the solver MINOS, the
log output will contain the following line:
The solution report in the listing file will have more detailed
information:
Note that the solver status has a value of 5 (Evaluation
Interrupt), which means that the solver has been interrupted
as more evaluation errors have been encountered than
specified with the option domlim. In our case domlim equals its
default value zero, thus one error is enough to cause the
interruption. The equation in which the evaluation error
occurred and the type of error is reported a few lines later. In
our example, the equation r1 is problematic, since we take the
logarithm of the expression sum(i, x(i)), an expression
which may become zero.
EXIT - Function evaluation error limit exceeded.
               S O L V E      S U M M A R Y
     MODEL   takelog             OBJECTIVE  z
     TYPE    NLP                 DIRECTION  MINI
     SOLVER  MINOS               FROM LINE  12
**** SOLVER STATUS     5 Evaluation Interrupt
**** MODEL STATUS      7 Feasible Solution
**** OBJECTIVE VALUE                0.0000
 RESOURCE USAGE, LIMIT          0.183      1000.
 ITERATION COUNT, LIMIT         0    2000000000
 EVALUATION ERRORS              2             0
...
 EXIT - Function evaluation error limit exceeded
**** ERRORS/WARNINGS IN EQUATION r1
     2 error(s): log: FUNC DOMAIN: x < 0 (RETURN
...
**** REPORT SUMMARY :        1     NONOPT ( NOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
                             1     ERRORS ( ****
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
9/36


Note that in models such as this each individual variable x(i)
should be allowed to become zero, but the sum should not.
This may be achieved by introducing an intermediate variable,
say xsum, adding a lower bound greater than zero for it and
using this variable as the argument for the function log:
For more information on intermediate variables, see section
Avoiding Expressions in Nonlinear Functions in the tutorial
Good NLP Formulations.
Observe that solvers report the type of arithmetic problem
encountered and the problematic equation, but do not identify
the particular offending variable or the labels in the index of an
equation that cause the error. If the cause is not obvious, users
will have to investigate the numerical properties of the
variables, labels and parameters in the body of the respective
equation. This may involve the following:
Displaying the input data items to the nonlinear terms in
the respective equation.
Searching the solution for equations that are infeasible (
INFES) and variables that are nonoptimal (NOPT) in order
to see where problems are present and which variables
were being manipulated at the end of the run.
Investigating variables and equations whose level values
are zero, negative or very large at the end of the run.
Deactivating part of the code to narrow down the
problem as discussed in section Isolating Terms in Slow
Statements below.
Resolving function evaluation errors will usually entail the
following techniques:
Adding lower bounds to variables to keep them above
zero.
Adding upper bounds to variables to prevent them from
getting too large.
Variable xsum;
xsum.lo = 0.0001;
Equations defxsum, r1;
defxsum ..    xsum =e= sum(i, x(i));
r1..          z =e= log(xsum);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
10/36


Reformulating the model, for example, introducing
intermediate variables.
Providing better starting points that direct the solver
search to a more relevant region. See section Specifying
Initial Values in tutorial Good NLP Formulations for
details.
Fixing faulty input data.
Presolve Errors
Some solvers use a pre-processing step where the program is
presolved to make the main solution process faster. During this
step model errors could already be discovered, as in the
following example:
For this problem, Cplex detects in the presolve already, that
there is no feasible integer solution. This is reported in the log:
Here, Cplex makes it clear, where we have a problem: Row r4 is
infeasible, because all entries are at their "implied bounds".
Lets look at r2 and r3 to see what this means: These equations
set a lower bound of 0.1 for y1 and y2. Since both variables are
defined as Integer Variables, they get an implicit lower
bound of 1. Given that, equation r4 must be infeasible.
Variables         z;
Integer Variables y1,y2;
Equations         r1,r2,r3,r4;
   r1..  z=e=y1+y2;
   r2..  y1=g=0.10;
   r3..  y2=g=0.10;
   r4..  y1+y2=l=1;
Model badpresol /all/;
solve badpresol using mip maximizing z;
Row 'r4' infeasible, all entries at implied boun
Presolve time = 0.00 sec. (0.00 ticks)
...
CPLEX Error  1217: No solution exists.
Problem is integer infeasible.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
11/36


Solver Specific Limits
Many solvers have internal limits that may be exceeded and
may cause the listing file to report an execution error. These
errors may be resolved by using either GAMS options or solver
specific options to increase the respective limits. Usually, the
listing file will contain information about which options to use.
Note that the solver manuals distributed with GAMS list the
options that may be specified for each solver. For example, to
relax the MINOS major iteration limit, the user may create a file
named minos.opt with the following line:
More about solver option files can be found in section The
Solver Options File.
Managing Execution Errors with the Function
execError
The function execError facilitates implementing procedures
that manage execution errors. Consider the following example,
which is an extension of the example in section Arithmetic
Errors above.
Observe that we introduced a new scalar z that is deliberately
undefined. In the if statement that follows, we use the function
execError in the logical condition and the undefined scalar in
the conditional assignment. The if statement has the effect that
Major iterations 1000
Set       s     / s1*s5 / ;
Parameter p(s)  "data to be exponentiated"
          d(s)  "divisors"
          r(s)  "result";
p(s)    = 1;
p("s2") = -1;
d(s)    = 1;
d("s3") = 0;
r(s)    = p(s)**2.1 / d(s)
display r;
*cause z to be undefined
Scalar z;
z = 1/0;
if(execError > 0,
   r(s)$(r(s) = z) = 0;);
display r;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
12/36


undefined entries are removed from the array of the parameter
r, as illustrated in the following lines of the execution output:
In addition, the function execError may be used to reset the
count of the number of execution errors. Typically, it is reset to
zero so that GAMS will terminate with the status message
Normal completion. For example, we could add the following
line at the end of the code in the example above:
Note
Setting execError = 0; will not only result in a
normal completion in the example above. A solve
statement will not be executed if there were
execution errors before by default. Setting
execError = 0; before the solve statement, will
allow to execute it again.
Setting execError = 0; results also in a notification in the
log:
E x e c u t i o n
**** Exec Error at line 10: rPower: FUNC DOMAIN:
**** Exec Error at line 10: division by zero (0)
----     11 PARAMETER r  result
s1 1.000,    s2  UNDF,    s3  UNDF,    s4 1.000,
**** Exec Error at line 16: division by zero (0)
----     20 PARAMETER r  result
s1 1.000,    s4 1.000,    s5 1.000
execError = 0;
********************************
*** Errors have been cleared ***
********************************
*** Status: Normal completion
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
13/36


Small to Large: Aid in Development
and Debugging
Many GAMS users are overly impressed with how easily GAMS
handles large models. Modelers often feel such a facility means
they should always work on the full model. The result is often a
large, sometimes extremely large, model in the early stages of
model development. Debugging such large formulations is not
easy.
The algebraic modeling style employed in GAMS is inherently
expandable. This offers interesting possibilities in terms of the
strategy that may be employed for model development and
debugging which are discussed herein.
An Illustrative Example
The set based algebraic modeling style implemented in GAMS is
by its very nature easy to expand. It is easy to use the same
model formulation on differently sized data sets. We will
illustrate this based on the transportation model [TRNSPORT].
Note that we included some post-solution calculations at the
end.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
14/36


This model may be easily extended by adding more data:
* Data section
Sets  i   "canning plants"   / Seattle, San-Dieg
      j   "markets"          / New-York, Chicago
     
Parameters  a(i)  "capacity of plant i in cases"
               / Seattle   350, San-Diego  600/
            b(j)  "demand at market j in cases"
               / New-York 325, Chicago 300, Tope
    
Table       d(i,j)  "distance in thousands of mi
                          New-York       Chicago
           Seattle          2.5             1.7 
           San-Diego        2.5             1.8 
    
Scalar f  "freight in dollars per case per thous
Parameter   c(i,j)  "transport cost in thousands
c(i,j) = f * d(i,j) / 1000 ;
* Model Section
Positive Variable  x(i,j)  "shipment quantities 
Variable           z       "total transportation
Equations cost        "define objective function
          supply(i)   "observe supply limit at p
          demand(j)   "satisfy demand at market 
    
cost ..        z  =e=  sum((i,j), c(i,j) * x(i,j
supply(i) ..   sum(j, x(i,j))  =l=  a(i) ;
demand(j) ..   sum(i, x(i,j))  =g=  b(j) ; 
Model transport /all/ ;
solve transport using lp minimizing z ;
Parameter   m(*,*)  "commodity movement";
m(i,j) = x.l(i,j);
m("total",j) = sum(i, x.l(i,j));
m(i,"total") = sum(j, x.l(i,j));
m("total","total") = sum(j, m("total",j));
option decimals = 0;
display m;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
15/36


Observe that the two sets (i and j) were enlarged, the capacity
(a) and demand (b) data were expanded to cover the new plant
and market entries and the distance table (d) was adjusted
accordingly. However, the data calculation, equations, model
definition, model solution and report writing sections are
identical in the two models.
Motivation and Step by Step Guide
As we have demonstrated in the example above, GAMS allows
the model structure, calculations and report writing to be
developed and implemented using a small data set, that may
* Data section
Sets  i   "canning plants"   / Seattle, San-Dieg
      j   "markets"          / New-York, Chicago
     
Parameters  a(i)  "capacity of plant i in cases"
               / Seattle   350, San-Diego  600, 
            b(j)  "demand at market j in cases"
               / New-York 325, Chicago 300, Tope
    
Table       d(i,j)  "distance in thousands of mi
                          New-York    Chicago   
           Seattle          2.5          1.7    
           San-Diego        2.5          1.8    
           Baltimore        0.2          0.7    
           Dallas           1.5          0.9    
Scalar f  "freight in dollars per case per thous
Parameter   c(i,j)  "transport cost in thousands
c(i,j) = f * d(i,j) / 1000 ;
* Model Section
Positive Variable  x(i,j)  "shipment quantities 
Variable           z       "total transportation
Equations cost        "define objective function
          supply(i)   "observe supply limit at p
          demand(j)   "satisfy demand at market 
    
cost ..        z  =e=  sum((i,j), c(i,j) * x(i,j
supply(i) ..   sum(j, x(i,j))  =l=  a(i) ;
demand(j) ..   sum(i, x(i,j))  =g=  b(j) ; 
Model transport /all/ ;
solve transport using lp minimizing z ;
Parameter   m(*,*)  "commodity movement";
m(i,j) = x.l(i,j);
m("total",j) = sum(i, x.l(i,j));
m(i,"total") = sum(j, x.l(i,j));
m("total","total")=sum(j, m("total",j));
option decimals = 0;
display m;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
16/36


be easily expanded to larger data sets. Thus, we strongly
recommend to start with a representative purposefully small
data set and enlarge it to its full size once the work of model
development, testing and debugging has been done. In short:
work from small to large.
The larger the model the longer it takes to compile it, generate
the model, execute and solve it. Generally, time expands
exponentially. Working with a large model from the start will
often lead to frustration even when the user is trying to find
some relatively small data problems.
If a model that has already been completed needs some
modification, it will be tempting to use the large data set
instead of developing the modifications on a small data set. We
strongly advise to use a small data set in this case, as
experience shows that this way a considerable amount of time
may be saved.
We recommend to follow these steps in model development:
1. Set up a small data set representing the full model with
all structural features, set names, parameters etc.
2. Implement all data calculations, model features and
report writing calculations.
3. Test the results of step 2 thoroughly.
4. Save the small model. Then implement a larger version
with the full data set. Create separate files for data,
calculation, model definition and report writing to
maintain size independence. Use include files or the save
and restart feature.
5. Test the larger model. Use the modeling techniques
discussed below to facilitate your work.
6. Keep the small model current. As additional structural
features are added to the large model, use it to test
them. See section Introducing Strategical Subsets below
for an easy way to maintain a small model.
Modeling Techniques
If users follow the steps for model development outlined in
section Motivation and Step by Step Guide above, they will
notice that it will not always be possible to model every
needed feature with the small model. It is important to
carefully choose the small data set so that it has all features of
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
17/36


the larger data set. However, occasionally the peculiarities and
interrelationships of the full data set cannot be reproduced in
the small data set. In this section we will introduce some
modeling techniques for finding problems that arise only when
the full data set is used. They include saving and restarting to
isolate the problem area, strategically introducing subsets and
data reduction.
Isolating Problem Areas through Saving and
Restarting
Suppose we have a model with a large data set that takes
several hours to run and we wish to add some lines of code in a
relatively small segment. The best way to do this is by isolating
the relevant part. Isolating the part we wish to modify makes it
possible to do tests and repairs without having to input data,
do initial calculations and solve the whole model with each
run. We recommend to use save and restart files.
For example, in chapter The Save and Restart Feature we
demonstrate how to split the transportation model [TRNSPORT]
in three parts: the file tranmodel.gms contains the data and
the model, the file transolve.gms contains the solve
statement and the file tranreport.gms contains a display
statement. To run the whole model we use the following
sequence, saving and restarting from the saved file:
Assume we want a more elaborate report than just the display
of some level values. As the file tranreport.gms contains the
code relevant for reporting, we will modify only this file. Then
we will test the result by running only this file, restarting from
s2, without having to solve the whole model repeatedly.
Introducing Strategical Subsets
When full data sets are used in debugging or development, it is
often helpful to narrow the focus on a few items in a set by
introducing subsets. The following example is a modified
version of the extended transportation model from section An
Illustrative Example above.
   > gams tranmodel s=s1
   > gams transolve  r=s1  s=s2
   > gams tranreport r=s2
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
18/36


Observe that we introduced the subsets plants and markets
that contain only some of the elements of their supersets i
and j. Note that all tables, parameters and variables are
defined with the supersets, the equations are declared over the
supersets, but defined over the subsets and the calculation of
the parameter c is also restricted to the subsets. Hence the
model is restricted to the elements of the subsets. However, it
is easy to change the restricted model back to the full model by
removing the asterisks indicating a comment line:
* Data section
Sets  i   "canning plants"   / Seattle, San-Dieg
      j   "markets"          / New-York, Chicago
Sets  plants(i)   "a reduced set of canning plan
                           / Seattle, San-Diego 
      markets(j)  "a reduced set of demand marke
                           / New-York, Chicago, 
        
*plants(i) = yes; markets(j) = yes;
Parameters  a(i)  "capacity of plant i in cases"
               / Seattle   350, San-Diego  600, 
            b(j)  "demand at market j in cases"
               / New-York 325, Chicago 300, Tope
    
Table       d(i,j)  "distance in thousands of mi
                          New-York    Chicago   
           Seattle          2.5          1.7    
           San-Diego        2.5          1.8    
           Baltimore        0.2          0.7    
           Dallas           1.5          0.9    
Scalar f  "freight in dollars per case per thous
Parameter   c(i,j)  "transport cost in thousands
c(plants,markets) = f * d(plants,markets) / 1000
* Model section
Positive Variable  x(i,j)  "shipment quantities 
Variable           z       "total transportation
Equations cost        "define objective function
          supply(i)   "observe supply limit at p
          demand(j)   "satisfy demand at market 
    
cost ..              z  =e=  sum((plants,markets
supply(plants) ..    sum(markets, x(plants,marke
demand(markets) ..   sum(plants, x(plants,market
Model transport /all/ ;
solve transport using lp minimizing z ;
plants(i) = yes; markets(j) = yes;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
19/36


Observe that the sets plants and markets are now dynamic
sets. Note that this assignment could be inserted anywhere in
the code. Thus, introducing strategic subsets may be combined
with isolating problem areas, as detailed in section Isolating
Problem Areas through Saving and Restarting above.
Introducing strategic subsets has proven to be an effective way
of maintaining a small data set with little effort. Users only
have to choose elements that are representative for model
development and debugging from the full sets.
Reducing Data
Recall that GAMS skips cases where data items equal zero. Thus
a large model may be reduced by temporarily removing data
from data sets by simply setting items to zero. Consider the
following example:
Note that we introduced strategic subsets and used them in the
logical condition of a conditional assignment to set almost all
entries of the parameter dist to zero. Note further, that the
assignment for the parameter cost is conditioned on nonzero
entries for the distance. Now, if the model were conditioned on
nonzero transportation costs, the size of the whole model
would be greatly reduced.
Sets      o         'origin'                    
          d         'destination'               
Parameter dist(o,d) 'distance';
dist(o,d) = 120 + 50*ord(d) - 0.5*ord(o);
 
Sets      so(o)     'small set of origins for te
          sd(d)     'small set of destinations' 
 
dist(o,d) $ (not (so(o) and sd(d))) = 0;
Parameter cost(o,d) 'transportation cost';
cost(o,d) $ dist(o,d) = 3 + 2*dist(o,d);
display cost, dist;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
20/36


Increasing Efficiency: Reducing
GAMS Execution Time
GAMS can take a long time for computations and model
generation. There are some signs which indicate that it may be
possible to reduce the execution time, e.g., an execution time
that is unexpectedly long in general or a long execution of a
single line, which could be seen, if the log shows the same line
number for a long time.
In this section we will discuss how to find the causes for slow
program execution and how to eliminate the main causes for
slow execution.
Finding the Causes for Slow Program Execution
The best strategy for discovering the causes for slow execution
is a combination of the techniques discussed in section Small
to Large: Aid in Development and Debugging above and the
techniques that we will introduce in this section, including
generating an execution profile and isolating terms in slow
statements. We will also touch briefly on observing the log file
and we will point out why this is not the first choice.
Generating an Execution Profile
The quickest way to find GAMS statements that take particularly
long to execute, is generating an execution profile in the output
file. The execution profile contains the individual and
cumulative time required to execute the sections of the GAMS
model as well as information on memory use. An execution
profile is generated when the option profile is assigned a value
larger than zero (zero is the default). This can be done either by
setting a command line parameter or by using the option
statement. We will show an example of an execution profile
below. For more information on execution profiles, further
examples and details on the values the option profile may
take, see the detailed description here.
Consider the following example:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
21/36


The listing file will contain an execution profile like this (spread
over the file):
The first column shows the line number in the input file of the
GAMS statement that is executed. The second column reports
the type of statement. For an overview of all GAMS statements,
see section Classification of GAMS Statements. The next two
columns give the individual time needed to execute the
respective statement and the cumulative time spent so far. The
option profile = 1;
option limrow = 0; option limcol = 0;
option solprint = off;
Sets    a / 1*22 /, b / 1*22 /, c / 1*20 /,
        d / 1*20 /, e / 1*22 /;
Parameters x(e,d,c,b,a), y, z(a,b,c,d,e);
x(e,d,c,b,a) = 10;
z(a,b,c,d,e) = x(e,d,c,b,a);
y            = sum((a,b,c,d,e), z(a,b,c,d,e)*x(e
Variable obj;
Positive Variable var(e,b,a);
Equations objeq, r(b,c,d), q(a,b,c);
objeq..      obj =e= sum((a,b,c,d,e), z(a,b,c,d,
r(b,c,d)..   sum((a,e), var(e,b,a)) =l= sum((a,e
q(a,b,c)..   sum((d,e), var(e,b,a)/x(e,d,c,b,a)*
Model slow /all/;
solve slow maximizing obj using lp;
Parameter sumofvar;
sumofvar = sum((a,b,c,d,e), z(a,b,c,d,e)*x(e,d,c
display sumofvar;
----      9 Assignment x             0.374     0
----     10 Assignment z             2.231     2
----     11 Assignment y             2.324     4
----     23 Solve Init slow          0.000     4
----     18 Equation   objeq         3.510     8
----     19 Equation   r             3.088    11
----     20 Equation   q             5.741    17
----     23 Solve Fini slow          0.780    18
----     23 GAMS Fini                0.359     0
----      1 InitE                    0.032     0
----      1 ExecInit                 0.000     0
----     23 Solve Alg  slow          0.000     0
----     23 Solve Read slow          0.000     0
----     26 Assignment sumofvar      2.620     2
----     27 Display                  0.032     2
----     27 GAMS Fini                0.000     0
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
22/36


memory use follows and finally, the number of assignments
generated in the respective line is shown.
In addition, there is a Profile Summary at the end of the lst
file showing the most expensive statements:
This shows that the execution of the statements in line
numbers 20, 18, 19, 26, 11 and 10 are the most expensive ones
(in this order). One reason is an inconsistent order when sets
are referenced; we will discuss this topic in section Ordering
Indices Consistently below.
Note that the execution profile may contain many lines that are
not informative since the execution times reported are
negligible. These lines may be suppressed by using the the
option profileTol to specify the minimum execution time (in
seconds) that is to be included. Observe that the option
profileTol is available as command line parameter and
option statement.
Note further, that the command line parameter profileFile
facilitates writing the profiling information to a separate file
(instead of the listing file).
Isolating Terms in Slow Statements
In some cases the execution profile shows that the cause for a
long execution time is connected with a very long statement.
For example, the objective function in some models and some
report calculations may take hundreds of lines of code and can
contain many terms that are added. If such a long statement is
problematic in terms of execution time, it will be necessary to
deactivate parts of the code and run the program repeatedly to
---- Profile Summary (19 records processed)
     5.741   0.470GB        20 Equation   q (968
     3.510   0.287GB        18 Equation   objeq 
     3.088   0.464GB        19 Equation   r (880
     2.620   0.287GB        26 Assignment sumofv
     2.324   0.286GB        11 Assignment y (0)
     2.231   0.286GB        10 Assignment z (425
     0.780   0.470GB        23 Solve Fini slow (
     0.374   0.109GB         9 Assignment x (425
     0.359   0.470GB        23 GAMS Fini
     0.032   0.213GB         1 InitE
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
23/36


find the precise lines that are at the root of the problem. This
can be done by using comments.
Observing the Log File
Some modelers choose to examine the log file or watch the
screen during execution to find the causes for slow program
execution. However, we advise against this approach for the
following reasons:
Statements that are executed slowly are easily missed
and often statements are misidentified. In addition,
screen watchers may be distracted and will have to
repeat the process.
GAMS line reporting can be misleading if flow control
statements like if statements and loop statements are
executed. For example, individual calculations in a loop
are not reported to the screen. A user watching the
screen would notice that the loop takes a lot of time, but
there is no indication which statement within the loop is
problematic. This applies to all GAMS control structures.
Therefore we recommend to use the option profile as the
main tool for finding the causes for slow program execution.
For details, see section Generating an Execution Profile above.
In addition, see the techniques outlined in section Advice for
Repairing Puzzling Nonworking Code below.
Eliminating the Main Causes for Slow Program
Execution
The main reasons for a slow program execution include an
inconsistent index order when sets are referenced and taking
irrelevant cases into consideration. In this section we will give
some guidance on how to eliminate these causes, and also
point to problems due to the scaling of a model which could
cause a unnecessarily long execution time for the solver.
Ordering Indices Consistently
GAMS employs a sparse matrix data storage scheme. For
example, consider the parameter p(a,b,c). Assume that the
set a has  elements, the set b has  elements and c has 
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
24/36


elements. Then the entries for p are stored in the following
order:
Note that it is a systematic order where the last entry varies the
fastest and the first the slowest. Observe that GAMS will
withdraw entries from memory fastest if they are referenced in
an order consistent with the storage order. Thus, in the
following example, the first assignment statement will be
processed faster than the second assignment statement.
Note
GAMS will execute a program fastest if the sets are
always referenced in the same order in definitions,
assignments and equations.
The example that follows illustrates this principle. First we will
solve a program where the indices appear in an arbitrary order
and we will record the output generated by setting the option
profile to 1. Then we will reformulate the program so that the
indices will always appear in an alphabetical order and solve it
again, recording the profile output. In the final step, we will
compare the execution times of the two runs. We will use the
example introduced above.
Note that the indices in the parameters and equations appear
in a random order. Here is the profile from the six most
expensive statements again:
a1 b1 c1
a1 b1 c2
...
a1 b1 cm
a1 b2 c1
...
a1 b2 cm
...
a1 bn cm
a2 b1 c1
...
ak bn cm
x(a,b,c) = p(a,b,c);
y(b,c,a) = p(a,b,c);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
25/36


In the next step we reformulate the program such that the
indices always appear in the same order. For example, we
define the parameter x as x(a,b,c,d,e) instead of
x(e,d,c,b,a). Here is the complete rewritten model:
After running the modified program, the profile for expensive
statements looks like this:
Observe that executing for example the assignment to z took
just 0.593 seconds compared to 2.231 seconds in the first run.
----     10 Assignment z             2.231     2
----     11 Assignment y             2.324     4
----     18 Equation   objeq         3.510     8
----     19 Equation   r             3.088    11
----     20 Equation   q             5.741    17
----     26 Assignment sumofvar      2.620     2
option profile = 1;
option limrow = 0; option limcol = 0;
option solprint = off;
Sets    a / 1*22 /, b / 1*22 /, c / 1*20 /,
        d / 1*20 /, e / 1*22 /;
Parameters x(a,b,c,d,e), y, z(a,b,c,d,e);
x(a,b,c,d,e) = 10;
z(a,b,c,d,e) = x(a,b,c,d,e);
y            = sum((a,b,c,d,e), z(a,b,c,d,e)*x(a
Variable obj;
Positive Variable var(a,b,e);
Equations objeq, r(b,c,d), q(a,b,c);
objeq..      obj =e= sum((a,b,c,d,e), z(a,b,c,d,
r(b,c,d)..   sum((a,e), var(a,b,e)) =l= sum((a,e
q(a,b,c)..   sum((d,e), var(a,b,e)/x(a,b,c,d,e)*
Model slow /all/;
solve slow maximizing obj using lp;
Parameter sumofvar;
sumofvar = sum((a,b,c,d,e), z(a,b,c,d,e)*x(a,b,c
display sumofvar;
----     10 Assignment z             0.593     0
----     11 Assignment y             0.671     1
----     18 Equation   objeq         1.778     3
----     19 Equation   r             2.215     5
----     20 Equation   q             1.763     7
----     26 Assignment sumofvar      0.952     0
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
26/36


Substantial percentage reductions were achieved in all time
consuming cases by consistently referencing the sets in the
same order.
Replace loops with assignments
The following statement assigns a constant value to a
parameter.
The following assignment is preferred instead.
Restricting Assignments and Equations to Relevant
Cases
Assignments
Assume that we have a set of cities with different production
capacities and demands for various products. We want to know
the maximum transportation cost (which depends on the
distance, the amount shipped and a fixed factor) from each city
to all others. This cost can be calculated in the following way:
The performance profile will tell us something like this:
loop((i,j,k),p(i,j,k)=2;)
p(i,j,k)=2;
Sets c "cities"   / c1*c800 /
     p "products" / p1*p10  /;
Alias (c,cc);
Parameter capacity(c,p)  "Production capacity fo
          demand(c,p)    "Demand for product p i
          distance(c,cc) "Distance between two c
*Generate some sparse, random data
capacity(c,p)$(uniform(0,1)<0.05) = uniformInt(1
demand(c,p)$(uniform(0,1)<0.025)  = uniformInt(5
distance(c,cc)$(not sameas(c,cc)) = uniformInt(1
Parameter maxCost(c,cc) "Maximum transportation 
maxCost(c,cc) = sum(p, min(capacity(c,p), demand
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
27/36


Since we know, that the parameter maxCost will be zero for a
pair of cities if there is no product with production capacity in
the first city and demand in the second one, we could reduce
the execution time for the last assignment:
So we did not do the calculation of maxCost if we knew before,
that it must be zero anyway. This results in a reduced runtime:
Note
To restrict computations in assignment to the
relevant cases, we recommend using dollar
conditions and filtering sets. These concepts are
introduced and discussed in detail in chapter
Conditional Expressions, Assignments and
Equations.
For more examples, see sections Conditional Assignments and
Conditional Indexed Operations.
Variables and Equations
Like assignments, variables and equations need to be
restricted to relevant cases to avoid unnecessary inefficiencies.
----     16 Assignment maxCost       0.265     0
Sets c "cities"   / c1*c800 /
     p "products" / p1*p10 / ;
Alias (c,cc);
Parameter capacity(c,p)  "Production capacity fo
          demand(c,p)    "Demand for product p i
          distance(c,cc) "Distance between two c
*Generate some sparse, random data
capacity(c,p)$(uniform(0,1)<0.05) = uniformInt(5
demand(c,p)$(uniform(0,1)<0.025)  = uniformInt(5
distance(c,cc)$(not sameas(c,cc)) = uniformInt(1
Parameter maxCost(c,cc) "Maximum transportation 
maxCost(c,cc)$sum(p, capacity(c,p)*demand(cc,p))
  = sum(p, min(capacity(c,p), demand(cc,p))*dist
----     17 Assignment maxCost       0.031     0
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
28/36


Dollar conditions and filtering sets may be used over the
domain of definition as well as in the body of an equation.
Lets extend the assignment example from the previous
paragraph and use the generated data in a transportation
model:
The Profile Summary tells us, that the equations are rather
expensive to generate and also the reading of the solution
takes some time because of the size of the model:
Sets c "cities"   / c1*c800 /
     p "products" / p1*p10 / ;
Alias (c,cc);
Parameter capacity(c,p)  "Production capacity fo
          demand(c,p)    "Demand for product p i
          distance(c,cc) "Distance between two c
*Generate some sparse, random data
capacity(c,p)$(uniform(0,1)<0.05) = uniformInt(1
demand(c,p)$(uniform(0,1)<0.025)  = uniformInt(5
distance(c,cc)$(not sameas(c,cc)) = uniformInt(1
Parameter shipCost(c,cc) "Transportatin costs be
          maxCost(c,cc)  "Maximum transportatin 
shipCost(c,cc) = distance(c,cc)*90;
maxCost(c,cc)$sum(p, capacity(c,p)*demand(cc,p))
  = sum(p, min(capacity(c,p), demand(cc,p))*ship
Variables
     x(c,cc,p)  "shipment quantities in cases"
     z          "total transportation costs in t
Positive Variable x ;
Equations
     cost         "define objective function"
     supply(c,p)  "observe supply limit at plant
     dem(cc,p)    "satisfy demand at market j" ;
cost..         z  =e=  sum((c,cc,p), shipCost(c,
supply(c,p)..  sum(cc, x(c,cc,p)) =l=  capacity(
dem(cc,p)..    sum(c,  x(c,cc,p)) =g=  demand(cc
Model transport /all/ ;
Solve transport using lp minimizing z ;
---- Profile Summary (18 records processed)
    98.780   1.070GB        34 Equation   dem (8
    26.864   0.515GB        38 Solve Read transp
    25.303   0.454GB        32 Equation   cost (
     6.599   0.813GB        33 Equation   supply
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
29/36


However, as in the previous example, we know, that a product p
won't be shipped from city c to city cc if there is either no
production capacity in the first city or no demand in the second
one. So we could reduce the size of our model by not
generating variables and equations from which we know, that
they are irrelevant for the solution. Here is a improved
formulations of the equations:
This decreases the size of the model and thus the execution
time to generate the model and load the solution significantly:
Note that the equation dem does not even show up in the
summary anymore since its generation was done to quickly.
For more details on conditions in equations, see section
Conditional Equations.
Keep the model well scaled
Model solutions within GAMS frequently require manipulation
of large matrices and many computations. The heart of most
solvers includes many numerical procedures such as a sparse
matrix inverter and sets of convergence and infeasibility
tolerances. Numerical problems often arise within such
procedures. Poorly scaled models can cause excessive time to
be taken in solving or can cause the solver to fail. GAMS can
assist the user to formulate a well scaled model. Details about
this can be found in the sections Model Scaling - The Scale
Option and Scaling Variables and Equations.
Other Approaches
In addition to the techniques discussed in section Eliminating
the Main Causes for Slow Program Execution above, the
cost..                       z  =e=  sum((c,cc,p
supply(c,p)$capacity(c,p)..  sum(cc$demand(cc,p)
dem(cc,p)$demand(cc,p)..     sum(c$capacity(c,p)
---- Profile Summary (18 records processed)
     0.031   0.035GB        33 Equation   cost (
     0.031   0.034GB        39 Solve Read transp
     0.016   0.035GB        34 Equation   supply
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
30/36


following approaches may help to reduce the time needed for
program execution:
Trying another appropriate solver.
Reformulating the model. This may yield particularly
good results, if the model is reformulated in such a way
that another model type is used, that is easier to solve or
for which more advanced solver technology is available.
Using starting points for NLP models, as discussed in
section Specifying Initial Values.
Trading memory for time.
We conclude the discussion of this topic with an example that
demonstrates how memory may be traded for time. If an
extensive calculation is repeated many times in a model, it may
be possible to restructure the code so that the calculation is
performed only once, then the result is saved and accessed
later. Consider the following equation:
The execution time may be substantially reduced by defining a
new parameter, say p, for the second sum and using this
parameter in the equation:
There is only one caveat: Users need to carefully consider
whether the input data, here u(m,i), is modified between the
assignment for the new parameter p and the equation where p
is used. If u is updated, then the assignment statement needs
to be repeated, otherwise the data that enters the equation will
not be current.
obj..   z =e= sum[(i,j,k,l), a(i,j,k,l)*sum(m, u
Parameter p(i);
p(i) = sum(m, u(m,i));
...
obj..   z =e= sum[(i,j,k,l), a(i,j,k,l)*p(i)];
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
31/36


Increasing Efficiency: Reducing
Memory Use
Besides slow program execution, excessive memory use may be
of concern for modelers. In this section we will present some
approaches on how to find the causes for extraordinary
memory use and give some advice on eliminating the main
causes for it.
Finding the Causes for Excessive Memory Use
The main techniques for finding the causes for excessive
memory use are the same as those for finding the causes for
slow program execution. We discussed these techniques in
section Finding the Causes for Slow Program Execution above.
In addition, the option dmpUserSym is useful in this context.
GAMS will report the number of records stored for each symbol
at the point in the program where the option dmpUserSym is
inserted together with some rough memory estimate.
Consider the following example:
Note that an option statement with dmpUserSym was added
before the solve statement. It generates the following memory
dump that is included in the execution output of the listing file:
Sets i /1*5 /,  j /1*5 /,  k /1*5 /,  l /1*5 /,
     m /1*5 /,  n /1*5 /,  o /1*5 /;
Parameters y(i,j,k,l,m,n,o)
           q(i,j,k);
Variables  x(i,j,k,l,m,n,o)
           f(i,j,k)
           obj;
y(i,j,k,l,m,n,o)       = 10;
q(i,j,k)               = 10;
x.up(i,j,k,l,m,n,o)    = 10;
x.scale(i,j,k,l,m,n,o) = 1000;
 
Equations  z(i,j,k,l,m,n,o)
           res(i,j,k)
           ob;
    
ob..                obj  =e= sum((i,j,k,l,m,n,o)
z(i,j,k,l,m,n,o)..  x(i,j,k,l,m,n,o) =l= 8;
res(i,j,k)..        f(i,j,k) =l= 7;
Model memory /all/;
option dmpUserSym;
solve memory maximizing obj using lp;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
32/36


The column ID contains the names of the symbols, the column
TYPE gives the data type of the respective entry, the column
DIM reports the number of indices and the column LENGTH
gives the number of records that is related to memory use,
which is estimated in the column MEMORYEST. Note that the
other columns are not relevant for this discussion.
Observe that the rows with high counts in column LENGTH
indicate symbols within the GAMS program which have large
numbers of internal records that must be stored. This is
associated with corresponding memory requirements. Note
also that not all length counts are of equal significance. In
particular, variables and equations use more memory per
element than parameters, since they have bounds, levels,
marginals and scales that are associated with them. Parameters
use more memory per element than sets, since sets may need
just one indicator for yes or no. However, the explanatory text
for set elements might increase the memory requirements for
set elements.
Nevertheless, users may use this report to identify items with
many records and verify that all of them are actually needed.
For more details, see section Eliminating the Main Causes for
Excessive Memory Use below.
SYMBOL TABLE DUMP (USER SYMBOLS ONLY), NR ENTRIE
ENTRY                               ID   TYPE DI
  135                                i    SET   
  136                                j    SET   
  137                                k    SET   
  138                                l    SET   
  139                                m    SET   
  140                                n    SET   
  141                                o    SET   
  142                                y  PARAM   
  143                                q  PARAM   
  144                                x    VAR   
  145                                f    VAR   
  146                              obj    VAR   
  147                                z    EQU   
  148                              res    EQU   
  149                               ob    EQU   
  150                           memory  MODEL   
END OF SYMBOL TABLE DUMP
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
33/36


Eliminating the Main Causes for Excessive
Memory Use
As detailed in section Eliminating the Main Causes for Slow
Program Execution above, the main causes for a slow program
execution include an inconsistent index order when sets are
referenced and taking irrelevant cases into consideration.
These programming habits also tend to cause excessive
memory use. In this section we will give some advice on
avoiding memory traps and show how the memory may be
cleared of data that is no longer needed.
Avoiding Memory Traps
Users may inadvertently use a lot of memory if they import
data from a database with long explanatory text for sets or set
elements. In addition, setting variable attributes for scaling or
bounds may be problematic. Consider the following example:
These assignments will probably set many more values than are
relevant for a particular problem. Therefore we recommend to
carefully consider which label combinations are actually
necessary and to restrict the assignments to these cases by the
use of dollar conditions or filtering sets. For more information,
see section Conditional Assignments.
Clearing Memory of Unneeded Data
Sometimes a lot of memory space is used for data that is
needed at some point, but not later. Consider the following
simple example:
x.scale(i,j,k,l,m) = 100;
x.lo(i,j,k,l,m) = 10;
x.up(i,j,k,l,m) = 77;
set i /1*1000/
    j /1*1000/;
parameter distance(i,j)
          cost(i,j);
distance(i,j) = 100+ord(i)+ord(j);
cost(i,j)     = 4+8*dist(i,j);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
34/36


Assume that the parameter distance is used only here, but
nowhere else in the program. Therefore users may wish to free
the memory space occupied by the data connected with
distance. The option clear may be used to achieve this:
This will reset all entries in the matrix associated with
distance to zero.
Alternatively, an identifier that is no longer needed could be
reset to its default value(s) with an assignment statement. In
the example above, we could write:
This statement will have the same effect as the option
statement. The advantage of the option statements is that they
offer a more compact alternative that is particularly useful if
equations or variables are to be cleared and multiple equation
attributes or variable attributes are affected.
Note that the dollar control options $clear and $kill may also
be used to free memory. These are compile time directives,
which have a similar effect on the memory consumption but
have different side effects: while $clear will reset the values
to their defaults, $kill will completely remove the identifier
from the program. Hence an identifier that was "killed" may be
used later in another declaration and definition statement. For
example, the following code snippet is legal:
With $clear instead of $kill this would cause a compilation
error.
option clear = distance;
distance(i,j) = 0;
Set i /1, 2 ,3/;
$kill i
Set i /a, b, c/;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
35/36


Setting Memory Limits with HEAPLIMIT
In a server environment and in other cases (e.g. to avoid the
use of virtual memory) the amount of memory a GAMS run is
allowed to use may have to be limited. The command line
parameter heapLimit serves this purpose: the amount of
memory for GAMS compilation and execution is limited to a
specified number (in MB). If the data storage exceeds this limit,
the job will be terminated with return code 10, out of memory
. In addition, the function heapLimit may be used to interrogate
the current limit and to reset it.
Note that limiting memory use for solver execution is not
possible from within the GAMS program. However, some solvers
like the NLP solver CONOPT have their own heapLimit option
which ensures that the solver will not use more dynamic
memory than specified.
Advice for Repairing Puzzling Nonworking Code
Assume a GAMS run was terminated and we cannot get a profile
output (e.g. because GAMS ran out of memory and crashes). A
memory overrun error causes the operating system buffer
handling procedures to generally lose the last few lines of
profile information when the job malfunctioned. How do we
find the problem in this case?
We recommend to use the techniques outlined in section
Modeling Techniques above. In addition, successively
deactivating code in search for the last GAMS statement that
worked will help in most cases. This can be done by using
comments. If at some point the run terminates properly, the
user will slowly activate parts of the last statements that were
deactivated until the code performance will get worse again. By
iteratively activating and deactivating terms, the precise
problematic terms may be found. The save and restart feature
could also be used to save the results until a certain statement
and then to execute only the statements that are suspected to
be problematic.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Finding and Fixing Execution Errors and Performance Problems
https://www.gams.com/latest/docs/UG_ExecErrPerformance.html
36/36


Executing GAMS from other
Environments
Some
General
Table of Contents
Some General Comments
The GAMS architecture
Spawning GAMS from VBA
Spawning GAMS from Excel
A Simple Example
Sudoku Example
Problem
Solution
Efficient frontier example
Spawning GAMS from C
Spawning GAMS from Visual Basic
Spawning GAMS from Delphi
Spawning GAMS from Visual C++
Spawning GAMS from C#
Spawning GAMS from Java
Spawning GAMS from a Web Server
Spawning GAMS from PHP
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 15:43
Executing GAMS from other Environments
https://www.gams.com/latest/docs/UG_spawning_gams.html
1/23


Comments
Nowadays the objected-oriented APIs are the most efficient
and elegant way to interact with the GAMS system. They allow
the effective communication of data, and do parameterized
runs of GAMS. This whole chapter describes a much more basic
interaction of GAMS through calling the GAMS executable from
different environments. This still can be useful, e.g. if no object-
oriented API is available for the particular target language (e.g.
VBA).
While the principle of calling the GAMS executable holds for all
operating systems, this chapter often focuses on the Windows
platform.
One of the interesting problems one faces when spawning
GAMS.EXE in a Windows environment is multi-threading. If one
does not take precautions, a call to Shell (VB function) or
CreateProcess (Win32 API function) causes GAMS to run
asynchronously: the function will return while GAMS is still
running. In order to read the results one would need to wait
until the GAMS job has finished. The machinery for this requires
some Windows trickery, and for Visual Basic version 6 and
Delphi version 4 we have implemented some small examples
that illustrate how this can be done.
Another issue that needs to be addressed is that GAMS needs a
place to put its scratch files. By default this is the current
directory, a concept that is not always clear in a windowing
environment. A good way of dealing with his is to set both the
current drive and the current directory before running the
GAMS job. It should be noted that GAMS needs write permission
there. In the examples we use the Windows TEMP directory for
this, but in a real application you may want to use a designated
directory. The Windows TEMP directory is found by calling the
API function GetTempPath.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Executing GAMS from other Environments
https://www.gams.com/latest/docs/UG_spawning_gams.html
2/23


The GAMS architecture
GAMS itself is a console mode application. In fact it is not a
single program, but a driver program (GAMS.EXE on Windows,
otherwise GAMS) that executes in turn the GAMS language
compiler (GAMSCMEX) or one of the solvers. For a model with a
single solve statement, GAMS.EXE will first call GAMSCMEX to
compile the GAMS model. Then GAMSCMEX will start executing
the internal code that was generated by the compiler. As soon
as it hits the instructions belonging to a SOLVE statement it will
generate model instance, and GAMSCMEX will exit. Then
GAMS.EXE will spawn a solver capable of solving the model. As
soon as the solver is finished, GAMS.EXE will execute GAMSCMEX
again so it can read the solution and can continue with
executing instructions.
Spawning GAMS from VBA
Visual Basic for Applications (VBA) is a programming language
that is built into most Microsoft Office applications, e.g. Excel
and Access. A VBA program may include modules, which can be
imported from files, i.e. in the VBA editor you can choose menu
“File”→“Import File”. The GAMS distribution includes some VBA
modules, which can be found from:
Attention
In order to avoid issues, it's recommended to
use the latest version of the modules , i.e. the
modules found in the latest GAMS release.
For example, the following modules can be found:
gamsglobals.bas: Global constants that are used in other
modules
gdxvba.bas: GAMS Data Exchange Object
idxvba.bas: GAMS IDX Object
  <GAMS System Directory>\apifiles\VBA\api, e.g.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Executing GAMS from other Environments
https://www.gams.com/latest/docs/UG_spawning_gams.html
3/23


optvba.bas: GAMS Option Object
For more information, see Expert-Level APIs. VBA
programs that use the API can be found from:
The models can also be retrieved via GAMS Studio ->
GAMS --> Model Library Explorer -> GAMS Data Utilities
Models.
Spawning GAMS from Excel
Calling GAMS out of Excel requires some more work than just
Data Exchange with Microsoft Excel. The application calling
GAMS out of Excel has to:
1. Locate the GAMS system directory and adjust the system
path accordingly.
2. Copy the GAMS model into a temporary directory (by
default the temporary directory of Windows)
3. Extract the model data from the spreadsheet into a GAMS
readable format (gdx)
4. Execute GAMS (solve the model, write the slution back to
gdx file)
5. Import the model results back from the gdx files into the
spread sheet
6. Update the spreadsheet (graphics, tables)
Using VisualBasic for Applications (VBA) this can be
implemented with a few lines of code:
  <GAMS System Directory>\apifiles\VBA, e.g
Sub solve()
   Dim WorkDir As String
   WorkDir = TempDir()
   Call ClearSolution
   If (Not AddGAMSPath()) Then ' needed to find 
      Exit Sub
   End If
   Call ExportGDXFile(WorkDir)
   Call WriteGAMSModel(WorkDir & "portfolio.gms"
   Call RunGAMS(WorkDir & "portfolio.gms", WorkD
   Call ReadListing(WorkDir & "portfolio.lst")
   Call ImportGDXFile(WorkDir)
End Sub
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Executing GAMS from other Environments
https://www.gams.com/latest/docs/UG_spawning_gams.html
4/23


For further details, please inspecte the VBA part of the
examples below.
A Simple Example
This very simple example shows how GAMS can be invoked
from an Excel spreadsheet. The "example spreadsheet" has a
button, which will cause GAMS to run the trnsport.gms model
stored in c:/tmp. There is no data exchange.
A more complete application will write an include file for a
GAMS model, and will import a comma delimited file with
results when the run is finished. An example of such a complete
application is described in
http://www.gams.com/mccarl/excelgams.pdf.
Sudoku Example
This spreadsheet is a complete example that uses GDX files to
exchange information solves a 25x25 Sudoku problem using
CPLEX. It comes with the GAMS distribution in
apifiles/VBA/sudoku.xlsm. You will need a GAMS/CPLEX license
to be able to run the spreadsheet. The MIP model solves very
easily: the solution is found in the presolve phase.
Note: This spreadsheet requires distribution 22.6 or younger to
work properly.
Problem
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Executing GAMS from other Environments
https://www.gams.com/latest/docs/UG_spawning_gams.html
5/23


Solution
Efficient frontier example
This example solves a series of NLPs to create an efficient
frontier of a portfolio optimization problem. It comes with the
GAMS distribution in apifiles/VBA/portfolio.xlsm.
Note: This spreadsheet requires distribution 22.6 or younger to
work properly.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Executing GAMS from other Environments
https://www.gams.com/latest/docs/UG_spawning_gams.html
6/23


Spawning GAMS from C
The example below shows an absolute minimal version of
calling GAMS from a C program:
As can be seen the GAMS executable gams.exe is called via a
simple invocation of system(). The extra command line
parameter lo=2 indicates that the log file is not written to the
screen (this is the default) but to a file model.log.
If we want to generate some data from the application program
(e.g. parameter DEMAND), we can use an include file which is
written by the application. Of the way back results can be read
from a PUT file. The GAMS file can now look like:
#include <stdio.h>
 
 
int main(int argc, char** argv)
{
   system("gams trnsport lo=2");
   return 0;
}
Sets
       i   canning plants   / seattle, san-diego
       j   markets          / new-york, chicago,
  Parameters
       a(i)  capacity of plant i in cases
         /    seattle     350
              san-diego   600  /
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Executing GAMS from other Environments
https://www.gams.com/latest/docs/UG_spawning_gams.html
7/23


The corresponding C program could look like:
       b(j)  demand at market j in cases
         /
$include demand.inc
         / ;
  Table d(i,j)  distance in thousands of miles
                    new-york       chicago      
      seattle          2.5           1.7        
      san-diego        2.5           1.8        
  Scalar f  freight in dollars per case per thou
  Parameter c(i,j)  transport cost in thousands 
            c(i,j) = f * d(i,j) / 1000 ;
  Variables
       x(i,j)  shipment quantities in cases
       z       total transportation costs in tho
  Positive Variable x ;
  Equations
       cost        define objective function
       supply(i)   observe supply limit at plant
       demand(j)   satisfy demand at market j ;
  cost ..        z  =e=  sum((i,j), c(i,j)*x(i,j
  supply(i) ..   sum(j, x(i,j))  =l=  a(i) ;
  demand(j) ..   sum(i, x(i,j))  =g=  b(j) ;
  Model transport /all/ ;
  Solve transport using lp minimizing z ;
  Display x.l, x.m ;
file fout /results.txt/;
put fout;
loop((i,j),
   put x.l(i,j):17:5/;
);
putclose;
//
// example of running a GAMS model
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Executing GAMS from other Environments
https://www.gams.com/latest/docs/UG_spawning_gams.html
8/23


//
 
#include <stdio.h>
 
// number of supply and demand locations
#define M 2
#define N 3
 
char*  dist[M] = {"seattle", "san-diego" };
char*  city[N] = {"new-york","chicago", "topeka"
double demand[N] = { 325.0, 300.0, 275.0 };
 
double ship[M][N];
 
 
int main(int argc, char** argv)
{
   FILE *f;
   int i,j;
 
   //
   // write include file
   //
   f = fopen("demand.inc","wt");
   if (f == NULL) {
      perror("fopen");
      exit(1);
   }
   for (i=0; i<N; ++i)
       fprintf(f,"%s %g\n",city[i],demand[i]);
   fclose(f);
 
   //
   // call GAMS
   //
   system("gams trnsport lo=2");
 
   //
   // read solution
   //
   f = fopen("results.txt","rt");
   if (f == NULL) {
      perror("fopen");
      exit(1);
   }
   for (i=0; i<M; ++i)
      for (j=0; j<N; ++j)
          fscanf(f,"%lg",&(ship[i][j]));
   fclose(f);
 
   //
   // display results
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Executing GAMS from other Environments
https://www.gams.com/latest/docs/UG_spawning_gams.html
9/23


Spawning GAMS from Visual Basic
This example shows how GAMS can be invoked from a VB
program.
When executed a simple window appears where a GAMS model
can be specified and possible other command line options. The
[GAMS] button will execute the model.
When the Normal display is used, a console window will be
opened. This console window will be closed automatically at
the end of the run if the Close process window on completion
check box is checked. Minimized does not show a window, but
in the taskbar an icon will appear. If the job takes a long time,
the user can click on this icon to make the console window
visible. The Hidden option prevents any GAMS associated
window or icon to appear.
Note: it is required for this program to work, that the GAMS
system directory is in the path. If this is not the case, an error
code of -1 is returned.
The main program is attached below.
   //
   for (i=0; i<M; ++i)
      for (j=0; j<N; ++j)
          printf("%s->%s %g\n",dist[i],city[j],s
 
 
   return 0;
}
Attribute VB_Name = "vbGAMS"
Option Explicit
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Executing GAMS from other Environments
https://www.gams.com/latest/docs/UG_spawning_gams.html
10/23


' ------------------------------
' Module Name: VBGams
' File:  gams.bas
' Version: 1.1
'
'
' Functions:
'   VB_Gams32   - sets up process directory, par
'                 looping of gams compiler and s
'
 
' --------
' Function VB_Gams32
'   Sets up process directory, parameter file, a
'   looping of gams compiler and solver.
'
' Parameters
'   sParams       String      Command line argum
'   nDisplayMode  Integer     GAMS_NORMAL, GAMS_
'   bCloseWin     Boolean     Close the console 
'
' Returns
'   1000 missing input string
'   2000 16 bit spawn failed
'   -or-
'   nCmexRC + 100 * nVB_GamsRC
'
'   nCmexRC : return code from last run of GAMS 
'             (for DOS/Win XX)
'         0 : normal return
'         1 : solve is next (should not happen)
'         2 : compilation error
'         3 : execution error
'         4 : system limits
'         5 : file error
'         6 : parameter error
'         7 : licensing error
'         8 : GAMS system error
'         9 : GAMS could not be started
'
'    nVB_GamsRC:  vbGams specific error codes
'         0 : normal return
'         1 : could not create process dir
'         2 : could not run gamsparm script
'         3 : could not append user input to par
'         4 : could not spawn gamscmex.exe
'         5 : could not shell off "gamsnext" scr
'         6 : could not delete process directory
'
Public Function VB_Gams32(sParams As String, nDi
                          bCloseWin As Boolean) 
Dim lAlloc As Long, lRetAPI As Long
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Executing GAMS from other Environments
https://www.gams.com/latest/docs/UG_spawning_gams.html
11/23


Spawning GAMS from Delphi
This is a Delphi 4 application that has similar features as the
Visual Basic application described in the previous paragraph.
Dim nSpawn As Long
 
 
    If nDisplayMode = GAMS_NORMAL Then   ' alloc
        lAlloc = AllocConsole()
        Dim sConTitle As String, hWnd As Long, n
        sConTitle = "VB GAMS "
        lAlloc = SetConsoleTitle(sConTitle)  ' s
        ' if the console window is to stay open,
        If Not bCloseWin Then
            Call Sleep(100)   ' necessary so con
            hWnd = FindWindow(vbNullString, sCon
            If hWnd <> 0 Then
                nTop = 20
                nLeft = 20
                lAlloc = SetWindowPos(hWnd, HWND
                Call CloseHandle(hWnd)
            End If
        End If
    End If
 
    nSpawn = Spawn("gams.exe " & sParams, nDispl
 
    If nDisplayMode = GAMS_NORMAL Then
        If Not bCloseWin Then
            Beep
            MsgBox "Click here to close console.
        End If
        lAlloc = FreeConsole()
    End If
 
 
    VB_Gams32 = nSpawn
    ShowWait False
 
 
End Function
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Executing GAMS from other Environments
https://www.gams.com/latest/docs/UG_spawning_gams.html
12/23


Note: it is required for this program to work, that the GAMS
system directory is in the path. If this is not the case, an error
code of -1 is returned. The main code is attached below.
unit main;
 
interface
 
uses
  Windows, Messages, SysUtils, Classes, Graphics
  StdCtrls;
 
type
  TMainForm = class(TForm)
    FileEdit: TEdit;
    FileOpenDialog: TOpenDialog;
    filelabel: TLabel;
    BrowseButton: TButton;
    CmdLineOptionsEdit: TEdit;
    CmdLineLabel: TLabel;
    RunButton: TButton;
    ReturnLabel: TLabel;
    ConsoleComboBox: TComboBox;
    ConsoleLabel: TLabel;
    CloseConsoleButton: TButton;
    procedure BrowseButtonClick(Sender: TObject)
    procedure RunButtonClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure CloseConsoleButtonClick(Sender: TO
  private
    { Private declarations }
    function GSExec(const ProgName,ProgParams: s
                const wShowWindow : word;
                var rc: integer): integer;
    function ExecuteGAMS(
         const ProgName,ProgParams: string;
         wShowWindow : word;  { SW_NORMAL, SW_HI
         AutoClose : boolean;  { close console a
         var rc: integer): integer;
  public
    { Public declarations }
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Executing GAMS from other Environments
https://www.gams.com/latest/docs/UG_spawning_gams.html
13/23


  end;
 
var
  MainForm: TMainForm;
 
implementation
 
{$R *.DFM}
 
 
 
function TMainForm.GSExec(const ProgName,ProgPar
                         const wShowWindow : wor
                         var rc: integer): integ
{execute program:
  Result: error code for starting the program
  rc    : error code returned by the program}
var
   Command            : String;
   ProcessInformation : TProcessInformation;
   StartupInfo        : TStartupInfo;
   exitcode           : dword;
begin
// Initialise the startup information to be the 
// calling application.  This is easier than ini
// individual startup information fields and sho
// cases.
GetStartupInfo(StartupInfo);
// StartupInfo.wShowWindow determines whether th
// will be initially displayed normal, maximises
// other subtle variations
StartupInfo.wShowWindow := wShowWindow;
StartupInfo.dwFlags := StartUpInfo.dwFlags or ST
Command := ProgName + ' ' + ProgParams;
if not CreateProcess(
    Nil,                   {ApplicationName}
    PChar(Command),        {lpCommandLine }
    Nil,                   {lpProcessAttributes}
    Nil,                   {lpThreadAttribute}
    false,                 {bInheritedHandles}
    NORMAL_PRIORITY_CLASS,  {dwCreationFlags}
    Nil,                   {lpEnvironment}
    Nil,                   {lpCurrentDirectory}
    StartupInfo,           {lpStartupInfo}
    ProcessInformation     {lpProcessInformation
    )
then
   begin
   rc := 0;
   Result := GetLastError  {failed to execute}
   end
else
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Executing GAMS from other Environments
https://www.gams.com/latest/docs/UG_spawning_gams.html
14/23


   begin
   with ProcessInformation
   do begin
      WaitForSingleObject(hProcess,INFINITE);
      GetExitCodeProcess(hProcess,exitcode);
      CloseHandle(hThread);
      CloseHandle(hProcess);
      end;
   Rc := exitcode;
   Result := 0;
   end;
 
end;
 
function TMainform.ExecuteGAMS(
         const ProgName,ProgParams: string;
         wShowWindow : word;  { SW_NORMAL, SW_HI
         AutoClose : boolean;  { close console a
         var rc: integer): integer;
var ok : BOOL;
begin
   if AutoClose then begin
      { this is the easy one }
      result := GSExec(ProgName, ProgParams, wSh
      exit;
   end;
 
   { in the case we want to let the user close t
     we need to allocate the console ourselves }
    ok := AllocConsole();
    result := GSExec(ProgName, ProgParams, wShow
 
    { if our console was used, show button to ge
    if (ok) then
       CloseConsoleButton.Enabled := true;
end;
 
procedure CdTemp;
{ cd to windows temp directory }
const maxpath=260;
var path : string;
begin
  setlength(path,maxpath);
  GetTempPath(maxpath,Pchar(path));
  path := ExpandFileName(path); { just to be sur
  ChDir(path);  { will also change drive }
end;
 
procedure TMainForm.BrowseButtonClick(Sender: TO
begin
    { popup file open dialog }
    if FileOpenDialog.Execute then
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Executing GAMS from other Environments
https://www.gams.com/latest/docs/UG_spawning_gams.html
15/23


       FileEdit.text := FileOpenDialog.Filename;
end;
 
procedure TMainForm.RunButtonClick(Sender: TObje
var
  rc : integer; { return code from GAMS.EXE }
  result : integer; { return code from GsExe }
  params : string; { command line params for GAM
  s : string; { for assembly of error messages }
  wShowWindow: word;
  AutoClose : boolean;
begin
  { set current directory }
  CdTemp;
 
  { extract command line parameters from edit co
  { there may be blanks in the filenames, so add
  params := '"' + FileEdit.Text + '" ' + CmdLine
 
  { get wShowWindow information }
  case ConsoleComboBox.ItemIndex of
    0, 1 : wShowWindow := SW_NORMAL;
    2 : wShowWindow := SW_SHOWMINIMIZED;
    3 : wShowWindow := SW_HIDE;
  end;
  AutoClose := not (ConsoleComboBox.ItemIndex = 
 
  { inform user GAMS is running }
  ReturnLabel.Caption := 'Running GAMS...';
  ReturnLabel.Font.Color := ClGreen;
  Refresh;
 
  { run GAMS.EXE }
  result := ExecuteGAMS('gams.exe', params, wSho
 
  { check for results }
  if (result <> 0) then begin
     str(result,s);
     ReturnLabel.Caption := 'Exec failed: result
     ReturnLabel.Font.Color := ClRed;
  end else if (rc <> 0) then begin
     str(rc,s);
     ReturnLabel.Caption := 'GAMS failed: rc = '
     ReturnLabel.Font.Color := ClRed;
  end else begin
     ReturnLabel.Caption := 'OK';
     ReturnLabel.Font.Color := ClBlack;
  end;
 
 
end;
 
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Executing GAMS from other Environments
https://www.gams.com/latest/docs/UG_spawning_gams.html
16/23


Spawning GAMS from Visual C++
In "this example" we call GAMS from a simple Visual C++
application.
The additional concern is here that we want to intercept the
GAMS screen output so it can be written to a multi-line edit
control. For more information about the used technique see the
Microsoft publication: [HOWTO: Spawn Console Processes with
Redirected Standard Handles (Q190351)]
(https://support.microsoft.com/en-us/kb/190351) in the
Microsoft Knowledge Base.
 
procedure TMainForm.FormCreate(Sender: TObject);
begin
   ConsoleComboBox.ItemIndex := 0;
end;
 
procedure TMainForm.CloseConsoleButtonClick(Send
begin
   FreeConsole();
   CloseConsoleButton.Enabled := false;
end;
 
end.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Executing GAMS from other Environments
https://www.gams.com/latest/docs/UG_spawning_gams.html
17/23


Spawning GAMS from C#
Below is a simple example:
The command line formed here is
gams modelname LO=0 –runid=xxx. The option LO
(logoption) will disable writing a log, and the option –runid
passes a parameter to the GAMS model (inside the model you
can access this through %runid%).
Spawning GAMS from Java
Java has a class Runtime that implements spawning of
processes using the Exec() method. This is quite trivial to use in
applications, but in applets the default security settings don't
allow this operation (in general). The problem can be solved by
loading the applet from a local drive or by using a signed
applet. Similarly if the Java classes are loaded from inside a
database, this operation may require additional privileges. For
an example see the previous section, where GAMS is called
from Oracle using a Java Stored Procedure. The relevant code
may look like:
using System.Diagnostics;
void RunGamsModel()
{
    Process p = new Process();
    p.StartInfo.FileName = gamsexe;
    p.StartInfo.WorkingDirectory = tempdir;
    p.StartInfo.Arguments = "\"" + modelname + "
    p.Start();
    p.WaitForExit();
}
import java.io.File;
 
class RunGAMS {
 
        public static void main(String[] args) {
                System.out.println("Start");
                String[] cmdArray = new String[5
                cmdArray[0] = "<PATH/TO/GAMS>" +
                cmdArray[1] = "<PATH>" + File.se
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Executing GAMS from other Environments
https://www.gams.com/latest/docs/UG_spawning_gams.html
18/23


Below another example, which avoids problems, if the model
has a long screen log (the buffer gets filled and locks the
execution), which could happen if GAMS does not write the log
to the file like above. This example is based on suggestion
made by Edson Valle.
                cmdArray[2] = "WDIR=<PATH>" + Fi
                cmdArray[3] = "SCRDIR=<PATH>" + 
                cmdArray[4] = "LO=2";
                try {
                       Process p = Runtime.getRu
                       p.waitFor();
                }
                catch (java.io.IOException e )
                {
                       System.err.println(">>>>"
                       e.printStackTrace();
                }
                catch (InterruptedException e )
                {
                       System.err.println(">>>>"
                       e.printStackTrace();
                }
                System.out.println("Done");
        }
} 
import java.io.File;
import java.io.BufferedReader;
import java.io.InputStreamReader;
 
class RunGAMS {
 
      public static void main(String[] args) {
              System.out.println("Start");
              String[] cmdArray = new String[5];
              cmdArray[0] = "<PATH/TO/GAMS>" + F
              cmdArray[1] = "<PATH>" + File.sepa
              cmdArray[2] = "<PATH>" + File.sepa
              cmdArray[3] = "LO=3";
 
              try {
                     Process p = Runtime.getRunt
                     BufferedReader stdInput = n
                     String s = null;
                     while((s=stdInput.readLine(
                        System.out.println(s);
                     }
                     p.waitFor();
 
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Executing GAMS from other Environments
https://www.gams.com/latest/docs/UG_spawning_gams.html
19/23


For an example of GAMS usage from a Java based server
environment see Alexander Sokolov, Information environment
and architecture of decision support system for nutrient
reduction in the Baltic Sea, Department of Systems Ecology,
Stockholm University.
Spawning GAMS from a Web Server
Running GAMS remotely using a Web based thin-client
architecture requires that GAMS is executed directly or
indirectly from the Web server or HTTP server. A simple way of
doing this is via a CGI process. Common Gateway Interface (CGI)
programs can be written in many languages such as C, Perl or
Delphi. CGI is relatively slow, as for each interaction, even the
most simple one, a process needs to be started. Alternatives
exist in the form of CGI extensions such as FastCGI or using
DLLs or shared libraries. A basic algorithm for a CGI script could
be:
Create a unique directory, and CD to that directory.
Get information from user forms and save it as GAMS
readable files.
Run GAMS making sure it does not write the log to the
screen (i.e. use the option LO=2 (log to a file) or LO=3 (log
to stdout)).
Let the model write solution info to text files using the
PUT statement.
              }
              catch (java.io.IOException e )
              {
                     System.err.println(">>>>" +
                     e.printStackTrace();
              }
              catch (InterruptedException e )
 
              {
                     System.err.println(">>>>" +
                     e.printStackTrace();
              }
              System.out.println("Done");
      }
}
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Executing GAMS from other Environments
https://www.gams.com/latest/docs/UG_spawning_gams.html
20/23


Read solution, and create formatted HTML to send back
to the user.
Remove temp files and directory.
Complications arise when there is a need to show graphics
(files need to be stored somewhere and discarded after a
while), when jobs take a long time to finish (you will need to
add a facility where the user can pick up results at a later
moment) or when the server resources can be exhausted (e.g.
because of a large number of simultaneous users or because of
large models).
An important complicating issue in the above list are jobs that
take more time to finish: web servers like to respond to the
user within a short time, and time out errors will occur if a job
takes a long time. The solution is to use a queue based
approach. An actual implementation available is the NEOS
Server - there is also a GAMS interface to NEOS: KESTREL -
Remote Solver Execution on NEOS Servers.
Spawning GAMS from PHP
A minimal example
index.html
calling_gams.php
<html>
  <body>
    <form action="calling_gams.php" method="post
      Solve transport with f = <select name="f">
          <option>70</option>
          <option>80</option>
          <option>90</option>
          <option>100</option>
        </select>
      <input type="submit" value="call GAMS"/>
    </form>
  </body>
</html>
<?php
 
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 15:43
Executing GAMS from other Environments
https://www.gams.com/latest/docs/UG_spawning_gams.html
21/23


trnsport_php.gms
$f = $_POST['f'];
 
//some model data
$modelfile = 'trnsport_php.gms';
$city   = array('new-york','chicago', 'topeka');
$demand = array(325.0, 300.0, 275.0);
 
//write demand.inc
$fh = fopen('./demand.inc', 'w+');
for($i=0; $i<count($city); $i++){
  fwrite($fh, $city[$i]." ".$demand[$i]."\n");
}
fclose($fh);
 
//write f.inc
$fh = fopen('./f.inc', 'w+');
fwrite($fh, $f);
fclose($fh);
 
//call gams
system('</path/to/gams>/gams '.$modelfile.' lo=2
 
//read solutions
$fh = fopen('./results.txt', 'r');
echo '<p><b>result of '.$modelfile.' (f='.$f.') 
while (!feof($fh)){
   $line = fgets($fh);
   echo '<p>'.$line.'</p>';
}
fclose($fh);
 
?>
Sets
       i   canning plants   / seattle, san-diego
       j   markets          / new-york, chicago,
  Parameters
       a(i)  capacity of plant i in cases
         /    seattle     350
              san-diego   600  /
       b(j)  demand at market j in cases
         /
$include demand.inc
         / ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Executing GAMS from other Environments
https://www.gams.com/latest/docs/UG_spawning_gams.html
22/23


  Table d(i,j)  distance in thousands of miles
                    new-york       chicago      
      seattle          2.5           1.7        
      san-diego        2.5           1.8        
  Scalar f  freight in dollars per case per thou
$include f.inc
         / ;
  Parameter c(i,j)  transport cost in thousands 
            c(i,j) = f * d(i,j) / 1000 ;
  Variables
       x(i,j)  shipment quantities in cases
       z       total transportation costs in tho
  Positive Variable x ;
  Equations
       cost        define objective function
       supply(i)   observe supply limit at plant
       demand(j)   satisfy demand at market j ;
  cost ..        z  =e=  sum((i,j), c(i,j)*x(i,j
  supply(i) ..   sum(j, x(i,j))  =l=  a(i) ;
  demand(j) ..   sum(i, x(i,j))  =g=  b(j) ;
  Model transport /all/ ;
  Solve transport using lp minimizing z ;
  Display x.l, x.m ;
  file fout /results.txt/;
  put fout;
  loop((i,j),
    put i.tl:0 '->' j.tl:0 ':  ' x.l(i,j)/;
  );
  put 'cost: 'z.l/;
  putclose;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:43
Executing GAMS from other Environments
https://www.gams.com/latest/docs/UG_spawning_gams.html
23/23


GAMS Programs
Introduction
This chapter provides a
look at the structure of
the GAMS language
and its components. It
should be emphasized
again that GAMS is a
programming
language, and that
programs must be
written in the language
to use it. A GAMS
program is contained
in a disk file, which is
usually constructed
with a text editor of
choice (e.g. GAMS
Studio). When GAMS is
'run', the file
containing the
program (the input file)
is submitted to be
processed. After this
processing has
finished, the results,
which are in the output
file(s), can be
inspected. By default
the GAMS log appears
on the screen while
GAMS runs, keeping
the user informed
about progress and
error detection. It is
the responsibility of
Table of Contents
Introduction
The Structure of GAMS Programs
Format of GAMS Input
Classification of GAMS
Statements
Organization of GAMS Programs
Data Types and Definitions
Language Items
Characters
Reserved Words
Identifiers
Labels
Text
Numbers
Delimiters
Comments
Blank Lines
Single Line Comments
Block Comments
End-of-Line Comments
In-Line Comments
Outside Margin Comments
Hidden Comments
Summary
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 15:44
GAMS Programs
https://www.gams.com/latest/docs/UG_GAMSPrograms.html
1/19


the user to inspect the
output file(s) carefully
to see the results and
to diagnose any errors.
The Structure of GAMS Programs
GAMS programs consist of one or more statements (sentences) that
define data structures, initial values, data modifications, and
symbolic relationships (equations). While there is no fixed order in
which statements have to be arranged, the order in which data
modifications are carried out is important. Symbols must be declared
as to type before they are used, and must have values assigned
before they can be referenced in assignment statements. Each
statement is followed by a semicolon except the last statement,
where a semicolon is optional.
Note
The semicolon at the end of a statement can be omitted
if a new GAMS keyword follows. However, to improve
readability of the code, it is recommended to use the
semicolon at the end of a statement anyway.
Format of GAMS Input
GAMS input is free format. A statement may be placed anywhere on a
line, multiple statements may appear on a line, or a statement may
be continued over any number of lines as follows:
Blanks and end-of-lines may generally be used freely between
individual symbols or words. GAMS is not case sensitive. This means
that lower and upper case letters may be mixed freely but are
treated identically. Up to 80,000 characters may be placed on a line
and completely blank lines may be inserted for easier reading.
Not all lines are a part of the GAMS language. Two special symbols,
the asterisk '*' and the dollar symbol '$' may be used in the first
position on a line to indicate a non-language input line. An asterisk
statement;
statement;
statement; statement; statement;
the words that you are now reading is an example of a
long statement which is stretched over two lines;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
GAMS Programs
https://www.gams.com/latest/docs/UG_GAMSPrograms.html
2/19


in column one means that the line will not be processed, but treated
as a comment. For more on comments, see section Comments. A
dollar symbol in the first position indicates that compiler options or
directives are contained in the rest of the line (see chapter Dollar
Control Options for more information).
For example, multiple files may be used as input through the use of
the $include facility. In short, the statement
inserts the contents of the specified file (file1 in this case) at the
location of the call. A more complex versions of this is the option
$batinclude. Both options are introduced and discussed in details in
chapter Dollar Control Options.
Classification of GAMS Statements
Each statement in GAMS is classified into one of two groups:
1. Declaration and
definition statements.
2. Execution statements.
A
declaration statement describes the class of a symbol. Often
initial values are provided in a declaration, then it may be called a
definition. The specification of symbolic relationships for an
equation is a definition. The declaration and definition statements
are:
acronym
alias
equation
declaration
equation
definition
file
function
model
parameter
scalar
set
table
variable
Execution statements are instructions to carry out actions such as
data transformation, model solution, and report generation. The
execution statements are:
abort
assignment
break
continue
display
execute
for
if
loop
option
put
put_utility
putclear
putclose
puthd
putpage
puttl
repeat
solve
while
$include file1
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
GAMS Programs
https://www.gams.com/latest/docs/UG_GAMSPrograms.html
3/19


Note
While an assignment is an execution statement, it also
defines the symbol on the left hand side of the
assignment.
Although there is great freedom about the order in which statements
may be placed in a GAMS program, certain arrangements are
commonly used. The two most common are discussed next.
Organization of GAMS Programs
One common style of organizing GAMS statements places the data
first, followed by the model and the solution statements.
Style 1:
In this style of organization, the sets are placed first. Then the data is
specified with parameter, scalar, and table statements. Next, the
model is defined with the variable declarations, equation
declarations, equation definitions and one or more model
statements. Finally, the model is / models are solved and the results
are displayed. One can refer to the model trnsport as an example for
this style.
Data:
Model:
Solution:
Set declarations and definitions
Parameter declarations and definitions
Assignments
Displays
Variable declarations
Equation declarations
Equation definitions
Model definition(s)
Solve(s)
Displays
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
GAMS Programs
https://www.gams.com/latest/docs/UG_GAMSPrograms.html
4/19


A second style emphasizes the model by placing it before the data.
This is a particularly useful order when the model is to be solved
repeatedly with different data sets.
Style 2:
Here, there is a separation between declaration and definition. For
example, sets and parameters may be declared first with the
following statements:
Later they may be defined with the statements:
Model:
Data:
Solution:
Set declarations
Parameter declarations
Variable declarations
Equation declaration
Equation definition
Model definition
Set definitions
Parameter definitions
Assignments
Displays
Solve
Displays
Set       c         "crops" ;
Parameter yield(c)  "crop yield" ;
Set        c        / wheat, clover, beans / ;
Parameter  yield(c) / wheat     1.5
                      clover    6.5
                      beans     1.0  / ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
GAMS Programs
https://www.gams.com/latest/docs/UG_GAMSPrograms.html
5/19


The first statement declares that the identifier c is a set and the later
statement defines the elements in this set. Similarly, in the second
statement yield is declared to be a parameter and later the
corresponding data is given.
Note
Sets and parameters that are used in equations must be
declared before the equations are specified. However,
they may be defined after the equation specifications but
before the specific equation is used in a solve statement.
This gives GAMS programs substantial organizational
flexibility.
Data Types and Definitions
Each symbol or identifier has exactly one of the following basic GAMS
data types:
acronyms
equations
files
functions
models
parameters
sets
variables
Note
Scalars and tables are not separate data types
but convenient input formats for the data type
parameter. For details see the overview
Parameters, Scalars and Tables.
GAMS uses shorthand symbols for each data type
in the output. For details see the overview GAMS
Data Types and their Shorthand Symbols.
Declarations have common characteristics. The following example
has a typical structure:
The structure is:
Parameter    a(i,j)        "input-output matrix" ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
GAMS Programs
https://www.gams.com/latest/docs/UG_GAMSPrograms.html
6/19


Keyword for data type - identifier (with index list) -
explanatory text ;
.
Note that the index list (or domain list) and the explanatory text are
always optional characteristics. However, we recommend to specify
the index list if the data type is defined over a domain; the
advantages of this practice are outlined in section Domain Checking.
Note
Variables, sets, parameters and equations may be
declared and defined over one or more indices or
dimensions. Currently the maximum number of
dimensions for all these data types is 20.
It is also recommend to add an explanatory text for reasons of
clarity. For more on explanatory texts, see section Text below. Other
examples for declarations follow:
Observe that in the last example a number of identifiers (separated
by commas) is declared in one statement.
Language Items
Before proceeding with more language details, a few basic symbols
need to be defined
and the rules for recognizing and writing them in GAMS established.
These basic symbols are often called lexical elements and form the
building blocks of the language. They are:
characters
comments
delimiters
identifiers
(idents)
labels
numbers
reserved words
and tokens
text
Each of these items is discussed in detail in the following
subsections.
Attention
Set         time     "time periods" ;
Model       turkey   "turkish fertilizer model" ;
Variables   x,y,z ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
GAMS Programs
https://www.gams.com/latest/docs/UG_GAMSPrograms.html
7/19


As noted previously, GAMS is not case sensitive, so we
may use any mix of lower and upper case.
Characters
A few characters are not allowed in a GAMS program, because they
are illegal or ambiguous on some machines. Generally, all
unprintable and control characters are illegal. The only place where
any character is legal, is in an $ontext-$offtext block as
illustrated in section Block Comments below. For completeness, the
full set of legal characters are listed in Table 1. Note that most of the
uncommon punctuation characters are not part of the language, but
they may be used freely in the context of explanatory texts,
comments, and labels (if quoted). Similarly, special language specific
characters (e.g. ä, ß, à, é, ç, ț, ș) may also be used freely in
explanatory texts, comments, and labels (if quoted).
Table 1: Legal Characters
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
GAMS Programs
https://www.gams.com/latest/docs/UG_GAMSPrograms.html
8/19


Legal Characters
Description
A to Z
alphabet
a to z
alphabet
0 to 9
numerals
+
plus
-
minus
=
equals
<
less than
>
greater than
( )
parenthesis
[ ]
square brackets
{ }
braces
'
single quote
"
double quote
\
back slash
/
slash
,
comma
:
colon
;
semicolon
.
dot
?
question mark
!
exclamation mark
space
_
underscore
&
ampersand
^
circumflex
#
pound sign
*
asterisk
%
percent
@
at
$
dollar
Note
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
GAMS Programs
https://www.gams.com/latest/docs/UG_GAMSPrograms.html
9/19


Not every character listed above is allowed to be used in
every place (for example, identifiers have certain
limitations).
Reserved Words
GAMS, like other programming languages such as C and Java, uses
reserved words (often also called keywords) that have predefined
meanings. Users are in general not permitted to use these for their
own definitions, neither as identifiers nor labels. The complete list of
reserved words is given below. In addition, a small number of
symbols constructed from non-alphanumeric characters have a
meaning in GAMS.
Note
While it is not allowed to use reserved words as
identifiers and labels in general, it is still possible (put
not recommended) in certain cases which are explained
in more detail further below.
abort
acronym[s]
alias
all
and
binary
break
card
continue
diag
display
do*
else
elseif
endfor*
endif*
endloop*
endwhile*
eps
equation[s]
execute
execute_load
execute_loaddc
execute_loadhandle
execute_loadpoint
execute_unload
execute_unloaddi
execute_unloadidx
file[s]
for
free
function[s]
gdxLoad
if
inf
integer
logic
loop
model[s]
na
negative
nonnegative
no
not
option[s]
or
ord
parameter[s]
positive
procedure[s]
(deprecated)
prod
put
put_utility/put_ut
putclear
putclose
putfmcl
puthd
putheader
putpage
puttitle
puttl
repeat
sameas
sand
scalar[s]
semicont
semiint
set[s]
singleton
smax
smin
solve
sor
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
GAMS Programs
https://www.gams.com/latest/docs/UG_GAMSPrograms.html
10/19


sos1
sos2
sum
system
table[s]
then*
undf
until
variable[s]
while
xor
yes
Attention
Some of the keywords above can actually be used as an
identifier (e.g. sameas). But if they get used as identifier,
their built-in meaning as part of the GAMS language can
not be accessed anymore.
Note
The words marked with * in the list above are no
reserved words by default. However, they get a special
meaning if the dollar control option $onEnd is set.
The following list shows words which have a special meaning in GAMS
(e.g. they are part of the solve statement), but can be used as
identifiers anyway:
eq
eqv
ge
gt
imp
le
lt
maximizing
minimizing
ne
scenario
using
The reserved non-alphanumeric symbols are:
..
=l=
=g=
=e=
=n=
=x=
=c=
=b=
--
++
**
->
<=>
Identifiers
Identifiers are the names given to sets, parameters, variables,
models, etc. GAMS requires an identifier to start with a letter
followed by more letters or digits. The length of an identifier is
currently limited to 63 characters. Identifiers may only contain
alphanumeric characters (letters or numbers) or underscores (_).
Examples of legal identifiers are:
a   a15   revenue   x0051
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
GAMS Programs
https://www.gams.com/latest/docs/UG_GAMSPrograms.html
11/19


Note that the following identifiers are incorrect:
Attention
A name used for one data type cannot be reused for
another.
Labels
Labels are set elements. They may be up to 63 characters long and
may be used in quoted or unquoted form.
The
unquoted form is simpler to use but places restrictions on characters
allowed, in that any unquoted label must start with a letter or digit
and can only be followed by letters, digits, underscores (_) or the
sign characters + and -. Examples of valid unquoted labels are:
Quotes can be used to delimit labels. Quoted labels may begin with
and include any legal character. Either single or double quotes may
be used but the closing quote has to match the opening quote. A
label quoted with double quotes may contain a single quote (and
vice versa). Most experienced users avoid quoted labels because they
can be tedious to enter and confusing to read. There are a couple of
special circumstances though. If we want to make a label stand out,
we could put asterisks in it and indent it. A more subtle example is
that GAMS keywords may be used as labels if they are quoted. So
labels like parameter, put or while may be used if they are quoted.
Some examples of quoted labels follow:
Note
Labels do not have any numerical value. The label
'1986' does not have the numerical value 1986 and
the label '01' is different from the label '1'. One can
15   $casg      milk&meat
Phos-Acid      1986      1952-53   A
September      H2S04      Line-1
'  *TOTAL*'   "MATCH"   '10%-INCR'   '12" / FOOT'   "
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
GAMS Programs
https://www.gams.com/latest/docs/UG_GAMSPrograms.html
12/19


access the numerical value of a label with the Set
Attributes .val attribute.
Leading blanks in a label are significant and
preserved while trailing blanks are trimmed. So
' label1' is different from 'label1', but
'label2 ' is identical to 'label2'.
Labels are, like the rest of the GAMS language, case
insensitive. Note, however, that case insensitivity
for labels applies only to ASCII characters. Labels
with non-ASCII characters are case sensitive:
To summarize, set names are identifiers and set elements are labels.
An overview of the rules for constructing identifiers and labels is
given in the following table.
Identifiers
Unquoted Labels
Quoted
Labels
Number of
characters
63
63
63
Must begin
with
A letter
A letter or a
number
Any
character
Permitted
special
characters
Underscore
(_)
Underscore (_)
and the
characters + and
–
Any but the
starting
quote
Table 2: Rules for constructing identifiers and labels
Text
Identifiers and set elements may also be associated with a line of
descriptive text. This text is more than a comment: it is retained by
GAMS and is displayed whenever results are written for the identifier.
Text may be quoted
or unquoted. Quoted text may contain any character except the
quote character used. Single or double quotes may be used but they
must match. Text has to fit on one line and cannot exceed 255
* This defines two different labels
Set i / "Ä", "ä" /; 
display i;
* This gives a compilation error
Set j / "A", "a" /;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
GAMS Programs
https://www.gams.com/latest/docs/UG_GAMSPrograms.html
13/19


characters in length. Text used in unquoted form must follow a
number of mild restrictions. Unquoted text cannot start with a
reserved word, '..' or '=' and must not include
semicolons ';', commas ',', or slashes '/'.
End of lines terminate a text. These restrictions are a direct
consequence of the GAMS syntax and are usually followed naturally
by the user. Some examples are:
Numbers
Numeric values are entered in a style similar to that used in other
computer languages
Attention
Blanks cannot be used in a number: GAMS treats a
blank as a separator.
The common distinction between real and integer
data types does not exist in GAMS. If a number is
used without a decimal point it is still stored as a
real number.
In addition, GAMS uses an extended range arithmetic that contains
special symbols for infinity (INF), negative infinity (-INF), undefined
(UNDF), epsilon (EPS), and not available (NA). The user cannot enter
UNDF; it is only produced by an operation that does not have a
proper result, such as division by zero. All the other special symbols
may be entered and used as if they were ordinary numbers. For more
details, see section Extended Range Arithmetic.
The following example shows various legal ways of entering numbers:
The letter e denotes the well-known scientific notation allowing
convenient representation of very large or small numbers. For
example,
this is text
final product shipment (tpy)
"quoted text containing otherwise illegal characters 
'use single quotes to put a "double" quote in text'
  0      156.70   -135      .095     1. 
  2e10   2e+10    15.e+10   .314e5   +1.7 
  0.0    .0       0.        INF      -INF 
  EPS    NA
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
GAMS Programs
https://www.gams.com/latest/docs/UG_GAMSPrograms.html
14/19


Note
GAMS uses a smaller
range of numbers than many computers are able to
handle. This has been done to ensure that GAMS
programs will behave in the same way on a wide
variety of machines, including personal computers.
GAMS will create an error if a number with an
absolute value greater or equal to 1.0e+300 is
used.
A number may be entered with up to 16 significant
digits. The dollar control option $offDigit can be
used to control the behavior if this number is
exceeded.
Delimiters
As mentioned before, statements are separated by a semicolon ';'.
However, if the next statement begins with a reserved word (often
called keyword in succeeding chapters), then GAMS does not require
that the semicolon is used.
The characters
comma ',' and
slash '/' are used as delimiters in data lists, to be introduced later.
The comma terminates a data element (as does an end-of-line) and
the slash terminates a data list.
Comments
A comment is an explanatory text that is not processed or retained
by the computer. There are several ways to include comments in a
GAMS program.
Blank Lines
The user may freely enter blank lines to set off certain sections and
enhance readability. For example, in trnsport there are blank lines
between the different parameters:
  1e-5 = 1 * 10^{-5} = 0.00001;
  3.56e6 = 3.56 * 10^6 = 3,560,000;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 15:44
GAMS Programs
https://www.gams.com/latest/docs/UG_GAMSPrograms.html
15/19


Single Line Comments
Users may insert a single line comment on any line by placing an
asterisk * in column 1. The text that follows the asterisk is the
comment and may contain GAMS reserved words, messages or any
other content. It is completely ignored by the GAMS compiler. Note
that several successive lines may be single line comments as in the
example below.
The default asterisk * may be replaced by other symbols. GAMS
provides the dollar control option $comment to customize the
comment character (for more on dollar control options, see chapter
Dollar Control Options). The new comment character cannot be used
in column 1 as before, since now it has a special meaning. The
change of comment character should be used with great care. An
example can be seen here:
In the fourth line, the new comment character ! replaces the GAMS
default * as the comment delimiter. Note that single line comments
appear in the echo print of the GAMS output as numbered lines. For
details see section The Echo Print of the Input File.
Block Comments
For longer comments special 'block' delimiters may be used that
cause GAMS to ignore an entire section of the program. The dollar
control option $ontext marks the beginning of the comment block
and the option $offtext marks the end. Note that the $ symbol must
  Sets
       i   "canning plants"   / seattle, san-diego /
       j   "markets"          / new-york, chicago, to
  Parameters
       a(i)  "capacity of plant i in cases"
         /    seattle     350
              san-diego   600  /
       b(j)  "demand at market j in cases"
         /    new-york    325
              chicago     300
              topeka      275  / ;
*normal comment
*next line is a deactivated GAMS statement
*  x=sum(I,z(i));
$comment !
!comment with new character
$comment *
*now we are back to how it should be
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
GAMS Programs
https://www.gams.com/latest/docs/UG_GAMSPrograms.html
16/19


be in the first character position. The example below illustrates the
use of the block comment and also contains some useful
information. For more on dollar control options, see chapter Dollar
Control Options.
Note that block comments appear in the echo print without line
numbers. For details see section The Echo Print of the Input File.
End-of-Line Comments
Comments may also be placed at the end of a line that contains
GAMS code. The dollar control option $onEolCom activates end-of-
line comments. The default symbol to indicate that the comment
begins is a double exclamation mark !!. This symbol may be reset
with the option $eolCom followed by the desired symbol which may
be one character or a two-character sequence. The following
example serves as illustration. For more on dollar control options,
see chapter Dollar Control Options.
Note that the option to add end-of-line comments may be
deactivated with the dollar control option $offEolCom. End-of-line
comments appear in the echo print on the appropriate lines. For
details see section The Echo Print of the Input File.
In-Line Comments
Comments may also appear in a line of GAMS code. The dollar control
option $onInline activates in-line comments. By default, the in-line
comment symbols are set to the two character pairs ' 
' and ' 
',
where ' 
' indicates that the in-line comment begins and ' 
'
indicates that the in-line comment ends. The comment may span
lines till the end-of-comment characters are encountered. The in-line
$ontext
Following a $ontext directive in column 1 all lines 
ignored by GAMS but printed on the output file until 
in column 1. This facility is often used to logicall
that are not used every time, such as statements pro
Every $ontext must have a matching $offtext in the s
$offtext
Scalar x /0/;
$onEolCom
x=x+1;       !! eol comment
x = x        !! eol comment in line of GAMS statement
   +1;
$eolCom &&
x=x+1;       && eol comment with new symbol
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
GAMS Programs
https://www.gams.com/latest/docs/UG_GAMSPrograms.html
17/19


comment symbols may be reset with the option $inLineCom followed
by the desired pair of characters. The following example serves as
illustration. For more on dollar control options, see chapter Dollar
Control Options.
Note that the option to add in-line comments may be deactivated
with the dollar control option $offInline. In-line comments appear in
the echo print on the appropriate lines. For details see section The
Echo Print of the Input File. Note that in-line comments may be
allowed to be nested using the dollar control option $onNestCom.
Outside Margin Comments
GAMS provides the facility to define margins. The active code is
within the margins, everything outside the set margins is ignored by
the compiler and treated as comment. The dollar control option
$onMargin activates margin marking and $offMargin deactivates it.
The option $minCol is used to specify the first column, where GAMS
code that is to be compiled may appear. Similarly, the option
$maxCol is used to specify the last column for GAMS code. The
following example shows how this works. For more on dollar control
options, see chapter Dollar Control Options.
The text before column 20 and after column 45 is treated as a
comment. Note that the full content of the lines is copied to the echo
print, including everything outside the margins. For details see
section The Echo Print of the Input File.
Scalar x /0/;
$onInLine
x=x      /* in-line comment*/ +1;
x=x      /* in-line comment in line
            that continues to next line */
   +1;
$inLineCom /&  &/
x=x      /& in-line comment with new character &/ +1;
$ontext
         1         2         3         4         5   
12345678901234567890123456789012345678901234567890123
$offtext
$onMargin minCol 20 maxCol 45
Now I have          Set i plant /US, UK/     This def
turned on the       Scalar x / 3.145 /       A scalar
margin marking.     Parameter a, b;          Define s
                                             paramete
$offMargin
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
GAMS Programs
https://www.gams.com/latest/docs/UG_GAMSPrograms.html
18/19


Hidden Comments
Finally, GAMS also allows hidden comments, that are not copied to
the echo print of the GAMS output file. These comments contain
information that is only relevant for the person manipulating the file.
They are single line comments starting with the dollar control option
$hidden. An example follows. For more on dollar control options, see
chapter Dollar Control Options.
Summary
This completes the discussion of the components of the GAMS
language. Many unfamiliar terms used in this chapter are further
explained in the Glossary.
$hidden a comment I do not want in LST file
set a /a1,a2/;
set b /a2,c2/;
set c /a3,d3/;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
GAMS Programs
https://www.gams.com/latest/docs/UG_GAMSPrograms.html
19/19


Set Definition
Table of Contents
Introduction
Simple Sets
Defining a Simple Set: The
Syntax
Illustrative Examples
Sequences as Set Elements
Declaring Multiple Sets
Using Previously Defined Sets in
Set Definitions
The Alias Statement: Multiple
Names for a Set
Subsets
Multi-Dimensional Sets
One-to-one Mapping
Many-to-Many Mapping
The Table Format for Multi-
Dimensional Sets
Projection and Aggregation of
Sets
Singleton Sets
The Universal Set: * as Set
Identifier
Set and Set Element Referencing
Referencing the Whole Set
Referencing a Single Element
Referencing a Part of a Set
Set Attributes
Finding Sets from Data
Domain Checking
Implicit Set Definition (or: Domain
Defining Symbol Declarations)
Summary
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
1/31


Introduction
Sets are fundamental building blocks in any GAMS model. They
allow the model to be succinctly stated and easily read. In this
chapter we will introduce how sets are declared and initialized.
More advanced set concepts, such as assignments to sets, and
lag and lead operations are covered in the chapters Dynamic
Sets and Sets as Sequences. The topics discussed in this
chapter will be enough to provide a good start on most models.
We will introduce simple sets, subsets, multi-dimensional sets,
singleton sets and the universal set. The chapter will be
concluded by a topic on domain checking, a very important
feature of GAMS, and a section about Domain Defining Symbol
Declarations.
Simple Sets
Using common mathematical notation, a set  that contains
the elements ,  and  is written as:
Using GAMS notation, the same set is defined in the following
way:
The set statement begins with the keyword set, S is the name
of the set, and its members are a, b, and c. They are labels, but
are often referred to as elements or members.
Defining a Simple Set: The Syntax
In general, the syntax for simple sets in GAMS is as follows:
Set S / a, b, c /;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
2/31


Set[s] is the keyword that indicates that this is a set
statement.
Set_name is the internal name of the set in GAMS, it is an
identifier. The optional explanatory text may be used to
describe the set or a specific set element for future reference
and to ease readability. The list of set elements is delimited by
forward slashes.
Element is the name of the set element(s). Note that each
element in a set must be separated from other elements by a
comma or by an end-of-line, and each element is separated
from any associated text by a blank.
Consider the following example from the Egyptian fertilizer
model [FERTS], where the set of fertilizer nutrients could be
written as
or as
The order in which the set members are listed is usually not
important. However, if the members represent, for example,
time periods, then it may be useful to refer to the next or
previous member. There are special operations to do this, and
they are discussed in chapter Sets as Sequences: Ordered Sets.
For now, it is enough to remember that the order in which set
elements are specified is not relevant, unless and until some
operation implying order is used. At that time, the rules change,
and the set becomes what we will later call an ordered set.
Note
The data statement, i.e. specification of set
elements in forward slashes can be omitted.
set[s] set_name ["text"] [/element [text] {,elem
     {,set_name ["text"] [/element [text] {,elem
Set cq "nutrients" / N,  P2O5 /;
Set cq "nutrients" / N
                     P2O5  /;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
3/31


In such cases a set is declared without being
defined.
More than one set may be declared and
defined in one set statement. Examples are
given in subsection Declaring Multiple Sets
below.
Illustrative Examples
Consider the following example based on the model
[SHALE]:
The set statement is introduced with the keyword set, the
name of the set is cf and the explanatory text
"final products" describes the set. The set has five
elements with explanatory texts that contain details of the
units of measurement.
Usually sets are declared and defined once and then referenced
in the model. There are two exceptions: the dollar control
option onMulti allows adding more elements later, and
dynamic sets. For details on dynamic sets, see chapter Dynamic
Sets. The following code sightly varies the previous example to
demonstrate the option $onMulti:
After $onmulti additional elements are added to the set cf.
Note that without the dollar control option $onMulti that
would generate an error as per default a symbol can have at
most one data statement.
Set cf "final products" / syncrude "refined crud
                          lpg      "liquefied pe
                          ammonia  "ammonia (mil
                          coke     "coke (mil to
                          sulfur   "sulfur (mil 
Set cf "final products"      / syncrude "refined
                               lpg      "liquefi
                               ammonia  "ammonia
$onmulti
Set cf "more final products" / coke     "coke (m
                               sulfur   "sulfur 
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
4/31


Sequences as Set Elements
The asterisk '*' plays a special role in set definitions. It is used
to relieve the tedium of typing a sequence of elements for a
set, and to make intent clearer. For example, in a simulation
model there might be ten annual time periods from 1991 to
2000. Instead of typing ten years, the elements of this set can
be written as:
This means that the set includes the ten elements 1991, 1992,
..., 2000. GAMS builds up these label lists by looking at the
differences between the two labels. If the only characters that
differ are digits, with the number L formed by these digits in
the left and R in the right, then a label is constructed for every
integer in the sequence L to R. Any non-numeric differences or
other inconsistencies cause errors.
The following example illustrates the most general form of the
'asterisked' definition:
Note that this is not the same as:
Both sets have 20 members, but they have only 11 members in
common.
Lists in decreasing order are also possible:
As a last example, the following set definitions are both illegal
because they are not consistent with the rule given above for
making lists:
Set t "time" / 1991 * 2000 /;
Set g1 / a1bc * a20bc /;
Set g2 / a01bc * a20bc /;
Set y "years in decreasing order" / 2000 * 1991 
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
5/31


Declaring Multiple Sets
The keyword set does not need to be used for each set, rather
only at the beginning of a group of sets. It is often convenient
to put a group of set declarations (and definitions) together at
the beginning of the program. When this is done the set
keyword needs only be used once. Those who prefer to
intermingle set declarations with other statements, have to use
a new set statement for each additional group of sets. Note
that the keywords set and sets are equivalent. The following
example below shows how two sets can be declared together.
Note that the semicolon is used only after the last set is
declared.
Using Previously Defined Sets in Set Definitions
The following notation allows previously defined sets to be
used in a new set definition:
The set k contains all elements of the sets i and j. Note that
the hash sign '#' followed by a set name is a shorthand for
referring to all the elements in a set. The notation
set.set_name works identically and is just a different way to
refer to all elements in a previously defined set.
Set illegal1 / a1x1 * a9x9 /
    illegal2 / a1 * b9 /;
Sets s "Sectors" / manuf, agri, services, govern
     r "Regions" / north, eastcoast, midwest, su
Set i / i1 * i4 /
    j / j6 * j9 /
    k / #i, set.j /;    
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
6/31


The Alias Statement: Multiple
Names for a Set
Sometimes it is necessary to have more than one name for the
same set. In input-output models for example, each commodity
may be used in the production of all other commodities and it
is necessary to have two names for the set of commodities to
specify the problem without ambiguity. In the general
equilibrium model
[ORANI], the set of commodities c is written as
A second name for the set c is established with either of the
following statements:
Here cp is the new set name that can be used instead of the
original set name c.
Note
The newly introduced set name may be used as an
alternative name for the original set; the associated
set will always contain the same elements as the
original set.
With the alias statement more than one new name may be
introduced for the original set:
Here cp, cpp, cppp are all new names for the original set c.
Note
Set c "Commodities" / food, clothing /;
Alias (c, cp) ;
Alias (cp, c) ;
Alias (c,cp, cpp, cppp);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
7/31


The order of the set names in the alias statement
does not matter. The only restriction is that exactly
one of the sets in the statement must be defined
earlier. All the other sets are introduced by the alias
statement.
Typical examples for the usage of aliases are problems where
transportation costs between members of one set have to be
modeled. The following code snippet is adapted from the
Andean fertilizer model [ANDEAN]:
The alias statement introduces ip as another name for the set
i. The table tran is two-dimensional and both indices are the
set i. The data for the transport cost between the plants is
given in this table; note that the transport costs are given only
for one direction here, i.e. the costs from pto-suarez to
palmasola are explicitly specified in the table while the costs
in the opposite direction are not given at all. The parameter
mui is also two-dimensional and both indices refer to the set i,
but this time the alias ip is used in the second position. The
parameter mui is defined with the assignment statement in the
next line: mui contains the transport costs from one plant
location to the other, in both directions. Note that if mui were
defined without the alias, then all its entries would have been
zero. For other examples where aliases are used, see sections
The Universal Set and Finding Sets from Data below.
Set i "plant locations" / palmasola, pto-suarez,
Alias(i,ip);
Table tran(i,i) "transport cost for interplant s
              palmasola    pto-suarez     potosi
 pto-suarez       87.22
 potosi           31.25         55.97
 baranquill       89.80        114.56      70.68
 cartagena        89.80        114.56      70.68
;
Parameter mui(i,ip) "transport cost: interplant 
mui(i,ip) = (tran(i,ip) + tran(ip,i));
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
8/31


Subsets
It is often necessary to define sets whose members must all be
members of some larger set. The syntax is:
Here set is the keyword indicating that this is a set statement,
and set_ident1 is a subset of the larger set set_ident2. The
larger set is also called superset.
For instance, we may wish to define the sectors in an economic
model following the style in [CHENERY].
Some types of economic activity, for example exporting and
importing, may be logically restricted to a subset of all sectors.
In order to model the trade balance we need to know which
sectors are traded, and one obvious way is to list them
explicitly, as in the definition of the set t above. The
specification t(i) means that each member of the set t must
also be a member of the set i. GAMS will enforce this
relationship, which is called domain checking. Obviously, the
order of declaration and definition is important: the
membership of i must be known before t is defined, otherwise
checking cannot be done.
Note
All elements of the subset must also be elements of
the superset.
It is legal but unwise to define a subset without reference to
the larger set, as is done above for the set nt. In this case
domain checking cannot be performed: if services were
misspelled no error would be marked, but the model may give
incorrect results. Hence, it is recommended to use domain
checking whenever possible. It catches errors and allows to
set set_ident1(set_ident2) ;
Set i    "all sectors"        / light-ind, food+
    t(i) "traded sectors"     / light-ind, food+
    nt   "non-traded sectors" / services /;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
9/31


write models that are conceptually cleaner because logical
relationships are made explicit.
An alternative way to define elements of a subset is with
assignments:
In the last line the element food+agr of the set i is assigned
to the subset t. Assignments may also be used to remove an
element from a subset:
Note that yes and no are reserved words in GAMS. Note further
that if a subset is assigned to, it then becomes a dynamic set.
For more on assignments in GAMS in general, see section The
Assignment Statement.
Attention
A subset can be used as a domain in the
declaration of other sets, variables, parameters and
in equations as long as it is no dynamic set.
This completes the discussion of sets in which the elements are
simple. This is sufficient for many GAMS applications. However,
there are a variety of problems for which it is useful to have
sets that are defined in terms of two or more other sets.
Multi-Dimensional Sets
It is often necessary to provide mappings between elements of
different sets. For this purpose, GAMS allows the use of multi-
dimensional sets. For the current maximum number of
permitted dimensions, see Dimensions. The next two
Set i    "all sectors"    / light-ind, food+agr,
    t(i) "traded sectors" / light-ind,  heavy-in
t('food+agr') = yes;
t('light-ind') = no;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
10/31


subsections explain how to express one-to-one and many-to-
many mappings between sets.
One-to-one Mapping
Consider a set whose elements are pairs:
. In this set there are three
elements and each element consists of a pair of letters. This
kind of set is useful in many types of modeling. For example, in
the world aluminum model
[ALUM] a port has to be associated with a nearby mining region
Here i is the set of mining regions, n is the set of ports and in
is a two dimensional set that associates each port with a
mining region.
The dot between china and shanghai is used to create one
such pair. Blanks may be used freely around the dot for
readability. The set in has four elements, and each element
consists of a region-port pair. The notation (i,n) after the set
name in indicates that the first member of each pair must be a
member of the set i of mining regions, and that the second
must be in the set n of ports. GAMS will domain check the set
elements to ensure that all members belong to the appropriate
sets.
Many-to-Many Mapping
A many-to-many mapping is needed in certain cases. Consider
the following sets:
Set i       "mining regions"     / china, ghana,
    n       "ports"              / accra, freeto
    in(i,n) "mines to ports map" / china  .shang
                                   ghana  .accra
                                   ee+ussr.lenin
                                   s-leone.freet
Set  i         / a, b /
     j         / c, d, e /
     ij1(i,j)  / a.c, a.d /
     ij2(i,j)  / a.c, b.c /
     ij3(i,j)  / a.c, b.c, a.d, b.d /;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
11/31


Here the set ij1 presents a one-to-many mapping where one
element of the set i maps onto many elements of the set j.
The set ij2 represents a many-to-one mapping where many
elements of the set i map onto one element of the set j. The
set ij3 is the most general case: a many-to-many mapping
where many elements of the set i map to many elements of
the set j.
These sets may be written compactly as:
The parenthesis provides a list of elements that is expanded
when creating pairs. Note that the dot '.', if used like above, acts
as product operator and supports building the Cartesian
product of sets.
Attention
When complex sets like this are created, it is
important to check that the desired set has been
obtained. The checking can for example be done be
done by using a display statement.
GAMS provides more notation to define multi-dimensional sets
in a succinct way. As introduced above the hash sign '#'
followed by a set name is a shorthand for referring to all the
elements in a set.
The matching operator ':' may be used to map ordered sets.
This operator is similar to the product operator '.'. However,
in this case elements are matched pairwise by mapping
elements with the same order number. The examples below
demonstrate these concepts.
Set  i        / a, b /
     j        / c, d, e /
     ij1(i,j) / a.(c,d) /
     ij2(i,j) / (a,b).c /
     ij3(I,j) / (a,b).(c,d) /;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
12/31


Note that set names that differ only by the last letter denote
identical sets. For example, set ij4a is identical to set ij4b.
Observe that set i has two elements and set j has three
elements, where e is the element with the highest order. Set
ij6a is an ordered mapping of all elements of set i to all
elements of set j. However, since there is a mismatch in the
number of elements, element e is not mapped to.
These concepts may be generalized to sets with higher
dimensions. Mathematically, these are called -tuples, -
tuples, or more generally, -tuples.
Some examples for the compact representation of sets of -
tuples using combinations of dots, parentheses, and commas
are shown in Table 1.
Compact
Notation
Result
(a,b).c.d
a.c.d, b.c.d
(a,b).(c,d)
.e
a.c.e, b.c.e, a.d.e, b.d.e
(a.1*3).c
(a.1, a.2, a.3).c or
a.1.c, a.2.c, a.3.c
1*3. 1*3. 1*3
1.1.1, 1.1.2, 1.1.3, ..., 3.3.3
Table 1: Examples for compact representation of multi-
dimensional sets
Note that the asterisk may also be used in conjunction with the
dot. Recall that the elements of the list 1*4 are 
.
A powerful and very compact way to define multi-dimensional
sets is with a special option that takes an identifier as value
Set
i         / a, b /
j         / c, d, e /
ij4a(i,j) / a.#j /
ij4b(i,j) / a.c, a.d, a.e /
ij5a(i,j) / #i.#j /
ij5b(i,j) / a.c, a.d, a.e, b.c, b.d, b.e /
ij6a(i,j) / #i:#j /
ij6b(i,j) / a.c, b.d /;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
13/31


and carries out identifier operations like index matching using
the matching operator ':'. The following example illustrates
the method.
The set b is a three-dimensional set, the option statement
specifies which permutations of the elements of i, j, and k are
elements of b. The matching operator ':' is between i and j,
so we must first match the elements of the sets i and j. That
gives us the the first two positions. For the third position we
cycle through all elements of the set k. This results in the
following elements for the set b:
The set c is a four-dimensional set. Note that the first three
dimensions are identical to the domain of the set b. The option
statement specifies that in the first three positions we will have
elements of the set b and and these are matched with the
elements of the set h which are in the fourth position. Now, the
set h has only three elements, so only the first three elements
of the set b are matched with the members of the set h. This
results in the following set:
As recommended above, it is important to always check
whether the multi-dimensional sets generated with compact
statement like these are indeed the sets that were intended.
For more sophisticated examples of how to use the matching
operator within an option statement please see section Index
Matching .
Set i / i1*i4 /
    j / j1*j5 /
    k / k1,k2 /
    h / h1*h3 /;
Set b(i,j,k), c(i,j,k,h);
Option b(i:j,k), c(b:h);
display b, c;
i1.j1.k1, i1.j1,k2, i2.j2.k1, ... , i4.j4.k2
i1.j1.k1.h1, i1.j1.k2.h2, i2.j2.k1.h3
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
14/31


The Table Format for Multi-Dimensional Sets
An alternative way to declare multi-dimensional sets is with
tables. We show by example how tables may be used in the
context of set definitions:
The set linked_1 is a two-dimensional set that is defined with
the dot notation introduced above. The set linked_2 is the
same set defined using the table notation: the keyword set is
followed by the keyword table and the name of the set with
its domain. The table itself consists of the elements of the first
index in the first column, the elements of the second index in
the first row, and the data in the grid positions. Note that the
keyword yes indicates that a label combination is part of the
two-dimensional set and the keyword no or a blank indicates
that the label combination is not contained in the new set.
Please see section Tables for detailed requirements for
inputting data in the table format.
Alternatively, the multi-dimensional set may be declared first
without any elements, and the elements are added later in a
separate table statement:
Instead of the keywords yes and no users may also use
numbers to specify membership in the two-dimensional set:
nonzero numeric entries mean that a label combination is part
of the set and zero or a blank indicates that the label
combination is not contained in the set.
Set origins      / Berlin, Paris /
    destinations / London, Chicago, Budapest /
    linked_1(origins,destinations) "cities linke
                 / Berlin.London, Berlin.Budapes
                   Paris .London, Paris .Budapes
Set Table linked_2(origins,destinations)
           London       Chicago     Budapest
Berlin       yes          no           yes
Paris        yes                       yes  ;
Set   origins      / Berlin, Paris /
      destinations / London, Chicago, Budapest /
      linked_2(origins,destinations) "cities lin
Table linked_2(origins,destinations)
           London       Chicago     Budapest
Berlin       yes          no           yes
Paris        yes                       yes;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
15/31


Projection and Aggregation of Sets
In GAMS, projection and aggregation operations on sets can be
performed in two different ways: with an option statement and
with an assignment. For a detailed discussion, see section
Projection and Aggregation of Sets and Parameters.
Singleton Sets
A singleton set in GAMS is a special set that has at most one
element (zero elements are allowed as well). Like other sets,
singleton sets may have a domain with several dimensions. For
the current maximum number of permitted dimensions, see
Dimensions.
Singleton sets are declared and defined with the keyword
singleton that acts as a modifier to the keyword set:
The sets j, k and l are declared as singleton sets, each of them
has just one element. The set k is a subset of the set i and the
set l is a two-dimensional set.
Note that a data statement for a singleton set with more than
one element will create a compilation error:
It also possible to assign an element to a singleton set. In this
case the singleton set is automatically cleared of the previous
element first. For example, adding the following line to the
code above will result in set k containing only element a after
execution:
Set            i      / a, b, c /;
Singleton Set  j      / d       /
               k(i)   / b       /
               l(i,i) / b.c     /;
   1  Singleton Set s / s1*s3 /;
****                          $844
   2  display s;
Error Messages
844  Singleton with more than one entry (see $on
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
16/31


The dollar control option offStrictSingleton may be used to
allow sets that are declared as singleton sets to have more
than one element in compile time definitions. However, in this
case only the first listed element is a valid element of the set.
Note that the value of zero for the command line parameter
strictSingleton has the same effect for execution time
definitions of singleton sets via assignment statements.
For more on dollar control options, see chapter Dollar Control
Options. For more on GAMS command line parameters,see
chapter The GAMS Call and Command Line Parameters. For
more on compilation errors, see section Compilation Errors.
Singleton sets can be especially useful in assignment
statements since they do not need to be controlled by a
controlling index or an indexed operator like other sets.
Consider the following examples:
The singleton sets k and h are both subsets of the set i. The
parameter n is defined over the set i. The scalar z1 is assigned
a value of the parameter n without naming the respective label
explicitly in the assignment. It is already specified in the
definition of the singleton set k. The assignment statement for
the scalar z2 contains an expression where the singleton sets k
and h are referenced without a controlling index or an indexed
operation.
Note
Singleton sets cannot be used as domains.
k('a') = yes;
Set            i      / a, b, c /;
Singleton Set  k(i)   / b /
               h(i)   / a /;
Parameter      n(i)   / a 2, b 3, c 5 /;
Scalar z1, z2;
z1 = n(k);
z2 = n(k) + 100*n(h);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
17/31


The Universal Set: * as Set Identifier
GAMS provides the universal set denoted by '*' for cases
where the user wishes not to specify an index but have only a
placeholder for it. The following examples show two ways how
the universal set is introduced in a model. We will discuss the
advantages and disadvantages of using the universal set later.
The first example is from the production and inventory model
[ROBERT]:
A table is an input format for the data type parameter and
has at least two dimensions. For details see section Tables. In
our example, the first index is the universal set '*' and the
second index is the previously defined set r. Since the first
index is the universal set any entry whatsoever is allowed in
this position. In the second position elements of the set r must
appear, they are domain checked, as usual.
The second example illustrates how the universal set is
introduced in a model with an alias statement.
The alias statement links the universal set with the set name
new_universe. Set k is a subset of the universal set and
Chicago is declared to be an element of k. Any item may be
added freely to k.
The universal set is particularly useful for generating reports,
since it allows the use of any labels without having to define
special sets for them. For an example, see section Set
Attributes below. For more on report writing, see chapter The
Put Writing Facility.
Sets   r          "raw materials"  / scrap, new 
Table  misc(*,r)  "other data"
           scrap  new
max-stock    400  275
storage-c     .5    2
res-value     15   25;
Alias (new_universe,*);
Set k(new_universe)    / Chicago / ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
18/31


Attention
It is recommended to not use the universal set for
data input, since there is no domain checking and
thus typos will not be detected and data that the
user intends to be in the model might actually not
be part of it.
Observe that in GAMS a simple set is always regarded as a
subset of the universal set. Thus the set definition
is the same as
GAMS follows the concept of a domain tree for domains in
GAMS. It is assumed that a set and its subset are connected by
an arc where the two sets are nodes. Now consider the
following one dimensional subsets:
These subsets are connected with arcs to the set i and thus
form a domain tree that is rooted in the universe node '*'.
This particular domain tree may be represented as follows:
Note that with the construct i(jjj) we may access ii iterating
through the members of jjj. For an example, see domain tree
in the loop statement.
Observe that the universal set is assumed to be ordered and
operators for ordered sets such ord, lag and lead may be
applied to any sets aliased with the universal set.
Set i / i1*i10 /; 
Set i(*)  / i1*i10 /;
Set i, ii(i), j(i), jj(j), jjj(jj);
* - i - ii
      |
      - j - jj - jjj
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
19/31


Set and Set Element Referencing
Sets or set elements are referenced in many contexts, including
assignments, calculations, equation definitions and loops.
Usually GAMS statements refer to the whole set or a single set
element. In addition, GAMS provides several ways to refer to
more than one, but not all elements of a set. In the following
subsections we will show by example how this is done. GAMS
also has set functions that specifically reference sets and are
introduced in the chapter about logical conditions.
Referencing the Whole Set
Most commonly whole sets are referenced as in the following
examples:
The parameter k is declared over the set i, in the assignment
statement in the next line all elements of the set i are
assigned the value 4. The scalar z is defined to be the sum of
all values of the parameter k(i).
Referencing a Single Element
Sometimes it is necessary to refer to specific set elements. This
is done by using single or double quotes around the label(s).
We may add the following line to the example above:
This statement changes the value of k('i77') to 15, all the
other values of k remain 4.
Referencing a Part of a Set
There are multiple ways to restrict the domain to more than
one element, e.g. subsets, conditionals and tuples. Suppose we
Set i / i1*i100 /;
Parameter k(i);
k(i) = 4;
Scalar z;
z = sum(i, k(i));
k('i77') = 15;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
20/31


want the parameter k from the example above to be assigned
the value 10 for the first 8 elements of the set i. The following
two lines of code illustrate how easily this may be
accomplished with a subset:
First we define the set j to be a subset of the set i with exactly
the elements we are interested in. Then we assign the new
value to the elements of this subset. The other values of the
parameter k remain unchanged. For examples using
conditionals and tuples, see sections Restricting the Domain:
Conditionals and Restricting the Domain: Tuples respectively.
Set Attributes
A GAMS set element has several numbers attached to it. These
values are called attributes; they may be recovered during
execution. The attributes are listed in Table 3.
Set j(i) / i1*i8 /;
k(j) = 10;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
21/31


Set
Attribute
Symbol
Description
Position
.pos
Element position in the current set
(set does not have to be ordered),
starting with 1.
Ord
.ord
Same as .pos but for ordered sets
only.
Offset
.off
Element position in the current set
minus 1. So .off = .pos - 1 (set
does not have to be ordered).
Reverse
.rev
Reverse element position in the
current set, so the value for the last
element is 0, the value for the
penultimate is 1, etc. (set does not
have to be ordered)
Unique
Element
.uel
Element position in the unique
element list. For details see section
Ordered and Unordered Sets
Length
.len
Length of the set element name (a
count of the number of characters).
Text
Length
.tlen
Length of the set element text (a
count of the number of characters).
Value
.val
If a set element is a number, this
attribute gives the value of the
number. For extended range
arithmetic symbols, the symbols are
reproduced. If a set element is a
string that is not a number, then
this attribute is not defined and
trying to use it results in an error.
Text
Value
.tval
If a set element text is a number,
this attribute gives the value of the
number. For extended range
arithmetic symbols, the symbols are
reproduced. If a set element text is
a string that is not a number, then
this attribute is not defined and
trying to use it results in an error.
First set
element
.first
Returns 1 for the first set element,
otherwise 0.
Last set
.last
Returns 1 for the last set element,
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
22/31


element
otherwise 0.
Table 3: Set Attributes
The attributes may be accessed with an assignment statement:
Here data is a parameter, set_name is the name of the set and
.attribute is one of the attributes listed above. The following
example serves as illustration:
The parameter report is declared to have two dimensions with
the set id in the first position and the universal set in the
second position. In the following seven statements the values
of report are defined for seven entries of the universal set.
Note how the flexibility of the universal set is used here to
make reporting easy. The display statement generates the
output that follows.
data(set_name) = set_name.attribute ;
Set       id            "example set"           
Parameter report(id,*)  "set attribute values";
report(id,'position')    = id.pos ;
report(id,'reverse')     = id.rev ;
report(id,'offset')      = id.off ;
report(id,'length')      = id.len ;
report(id,'textLength')  = id.tlen ;
report(id,'first')       = id.first;
report(id,'last')        = id.last ;
display report;
----     11 PARAMETER report  set attribute valu
            position     reverse      offset    
Madison        1.000       4.000                
tea-time       2.000       3.000       1.000    
-inf           3.000       2.000       2.000    
-7             4.000       1.000       3.000    
13.14          5.000                   4.000    
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
23/31


Finding Sets from Data
Sometimes it is desirable to find a set from the available data
in order to use it later in the model. We will show by example
how this may be accomplished using the alias statement, the
universal set and conditionals. Suppose we have only the data
related to the transportation model [TRNSPORT] and we want
to identify the sets. We can tell from the data that there are two
sets that we are interested in. First, we define these two sets as
aliases of the universal set, which means that no elements are
specified:
Then we enter the data that contain an indicator of which set
elements are valid entries in the sets to be computed. We use
the table format.
Next we define subsets that we will need in the calculations
that follow:
Now we have everything that we need to do the calculation
using the data on hand. In our case, a label qualifies as an
element of the set source if it has an entry for totalsupply
in the table above, and a label is an element of the set
destination if it has an entry for totalneed in the table
trandata:
Alias(sources, places, *);
Table trandata (sources,places)    "data from sp
                     Newyork     Chicago    tota
      Seattle          2.5          1.7         
      Sandiego         2.5          1.8         
      totalneed        325           75         
Set  source(sources)       "sources in spreadshe
     destination(places)   "destination in sprea
source(sources)$(trandata(sources,"totalsupply")
destination(places)$(trandata("totalneed", place
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
24/31


These conditional assignments define the elements of the sets
source and destination. From this point on these sets may
be used in the model. However, note that the resulting sets are
dynamic sets. Hence they cannot be used as domains in
declaration statements of other sets, parameters, variables and
equations. But they may be referenced and used in equation
definitions.
Such computations may for example be useful if the user gets a
data table from elsewhere and needs to specify the sets.
Alternatively, if the data is available in gdx format, the dollar
control option load provides functionality to project sets from
data contained in a GDX file.
See also section Implicit Set Definition (or: Domain Defining
Symbol Declarations).
Domain Checking
The GAMS compiler performs a check to ensure that each label
quoted as a member of a set is indeed an element of the
respective set, and each element defined in a subset is in fact a
member of the superset. This screening for consistency is
called domain checking. It is done whenever a domain is
referenced, be it in set, variable, parameter or equation
declarations and definitions, or in assignments. The following
examples serve as illustration.
The set as is declared to be a subset of the set i, therefore
domain checking will test every label for inconsistencies. It will
catch two errors: there is a typo in Shanhai and Calcutta is
not a member of the set i, so it cannot legally be a member of
a subset.
Set   i     "all cities"      / Lima, Toronto, W
      as(i) "Asian cities"    / Wuhan, Shanhai, 
      am    "American cities" / Lima, Toront /;
   1  Set   i     "all cities"      / Lima, Toro
   2        as(i) "Asian cities"    / Wuhan, Sha
****                                            
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
25/31


The user can rectify the spelling error, and either delete
Calcutta from the subset as or add it to the superset i. The
following line will pass domain checking:
Note that am is not declared as a subset of the set i even
though it apparently should contain cities contained in i.
Hence, am cannot be domain checked and the typo in Toront
will go undetected. This has consequences for the next line:
In this parameter definition the domain of the parameter pam is
the set am. GAMS will report an error here, since domain
checking does not recognize the label Toronto. Toront, as
specified in the definition of the set am above would be
accepted.
A further example for domain checking concerns multi-
dimensional domains where the user accidentally switches the
positions of the indices:
Observe that we assume that the typo in the label Toronto has
been rectified. The parameter h is defined over the domain
(as,am). However, in the assignment statement in the last line
above, it is referenced with the domain (am,as). This mistake
is caught by domain checking and an error is reported.
As we have seen in the definition of the set am above, domain
checking is not compulsory. If the following statement is
entered, GAMS makes no assumptions about rho until further
information is provided.
**** 170  Domain violation for element
   3        am    "American cities" / Lima, Toro
Set   as(i) "Asian cities"    / Wuhan, Shanghai 
Parameter pam(am) "population in millions"  / Li
Parameter  h(as,am) / Wuhan.Lima  10, Wuhan.Toro
Parameter  d(as,am);
d(as,am) = 5*h(am,as) + 78;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
26/31


The modeler may later choose to domain check rho by
continuing the definition with the following line:
Alternatively, the modeler may choose not to domain check the
paramter rho, as is shown in the deliberately nonsensical (but
legal) statement that follows:
If a parameter is not domain-checked, the only restriction is
that the dimensionality must be constant. Once the number of
labels per data item has been established it is frozen; to refer
to the parameter differently is an error.
Note
Domain checking is automatic; it is only suppressed
in two cases:
1. The index is the universal set or a set aliased
to the universal set, see the examples above.
2. The dollar control option $onWarning is used.
It has the effect that warnings rather than
errors are reported for domain violations.
We urge modelers to use domain checking whenever possible.
It catches errors and allows users to write models that are
conceptually cleaner because logical relationships are made
explicit.
Note that the dollar control option $load is available in several
variations to enable domain checking when loading data from a
GDX file. For details, see $loadDC, $loadDCM and $loadDCR and
chapter GAMS Data eXchange (GDX).
set       t   years         / 1988 * 1995 /;
Parameter rho discount rate ;
Parameter rho(t)  / 1988 0.07, 1989*1994 0.10, 1
Parameter rho / 1988.January 0.07, strategy-1.co
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
27/31


Implicit Set Definition (or: Domain
Defining Symbol Declarations)
As seen above, sets can be defined through data statements in
the declaration. Alternatively, sets can be defined implicitly
through data statements of other symbols which use these sets
as domains. This is illustrated in the following example, which
is derived from the [TRNSPORT] model:
Note the < signs in the domain list of the declaration of d (
d(i<,j<)). These signal, that the set i will contain all
elements which define the first dimension of symbol d and that
the set j will contain all elements which define the second
dimension of symbol d, respectively. So, this is the output of
the Display statement at the end:
This syntax is not limited to the table statement, but can be
used with any symbol declaration. Also, one domain set can be
defined through multiple symbols using the same domain,
when using the dollar control option onMulti:
Set
   i 'canning plants'
   j 'markets';
Table d(i<,j<) 'distance in thousands of miles'
              new-york  chicago  topeka
   seattle         2.5      1.7     1.8
   san-diego       2.5      1.8     1.4;
Display i,j;
----     10 SET i  canning plants
seattle  ,    san-diego
----     10 SET j  markets
new-york,    chicago ,    topeka
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
28/31


This is the output of the Display statement:
Note
If the < sign is used to mark a declaration as
"domain defining", this attribute is not limited to
the data statement following this declaration, but
also influences other ways to define data at compile
time like the dollar control option load, as shown in
the following example:
Attention
Only non-zero elements in a symbol will add
elements to an implicitly defined set. This is
illustrated in the following two examples.
Set
   food
   fruits(food<)    / apple, orange       /
$onMulti
   vegetable(food<) / carrot, cauliflower /
   meat(food<)      / beef, pork          /;
Display food;
----      8 SET food
apple      ,    orange     ,    carrot     ,    
Set
   i 'canning plants'
   j 'markets';
Parameter d(i<,j<) 'distance in thousan
$gdxIn data.gdx
$load d
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
29/31


Note the empty column for chicago. Since there is no data,
chicago will not end up in the set j, which can be seen in the
output of the Display statement:
Also, an explicit 0 in a data statement does not add elements
to an an implicitly defined set (in contrast to an eps). This is
shown in the following GAMS code and output:
See also section Finding Sets from Data.
Summary
In GAMS, a simple set consists of a set name and the elements
of the set. Both the name and the elements may have
Set
   i 'canning plants'
   j 'markets';
Table d(i<,j<) 'distance in thousands of miles'
              new-york  chicago  topeka
   seattle         2.5              1.8
   san-diego       2.5              1.4;
Display i,j;
----     10 SET j  markets
new-york,    topeka
Set
   j 'markets';
Parameter
   b(j<) 'demand at market j in cases'
        / new-york   325
          chicago      0
          topeka     eps /;
Display j;
----     10 SET j  markets
new-york,    topeka
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
30/31


associated text that explains the name or the elements in more
detail. More complex sets have elements that are pairs or even
-tuples. These sets with pairs and -tuples are ideal for
establishing relationships between the elements in different
sets. GAMS also uses a domain checking capability to help
catch labeling inconsistencies and typographical errors made
during the definition of related sets.
The discussion here has been limited to sets whose members
are all specified as the set is being declared. For many models
this is all the user needs to know about sets. Later we will
discuss more complicated concepts, such as sets whose
membership changes in different parts of the model
(assignment to sets) and other set operations such as unions,
complements and intersections.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Set Definition
https://www.gams.com/latest/docs/UG_SetDefinition.html
31/31


Dynamic Sets
Table of Contents
Introduction
Assigning Membership to Dynamic
Sets
The Syntax
Illustrative Example
Dynamic Sets with Multiple
Indices
Equations Defined over the
Domain of Dynamic Sets
Assigning Membership to
Singleton Sets
Set Operations
Using Dollar Controls with Dynamic
Sets
Dynamic Sets in Conditional
Assignments
Conditional Indexed Operations
with Dynamic Sets
Conditional Equations with
Dynamic Sets
Filtering through Dynamic Sets
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 15:44
Dynamic Sets
https://www.gams.com/latest/docs/UG_DynamicSets.html
1/16


Introduction
Sets in general are covered in chapter Set Definition. In this
chapter we introduce a special type of sets: dynamic sets. The
sets that we discuss in detail in chapter Set Definition have
their elements stated at compile time (e.g. enclosed in slashes
at the set declaration or when loading a set from gdx via $load)
and during execution time the membership is never changed.
Therefore they are called static sets. In contrast, the elements
of dynamic sets are not fixed, but may be added and removed
during execution of the program. Dynamic sets are most often
used as controlling indices in assignments or equation
definitions and as the conditional set in a dollar-controlled
indexed operation. We will first show how assignments are used
to change set membership in dynamic sets. Then we will
introduce set operations and the last part of this chapter
covers dynamic sets in the context of dollar conditions.
Assigning Membership to Dynamic
Sets
Dynamic Sets may be assigned to in a similar way as other data
types. There are only two possible values: yes and no. Note
that arithmetic operations cannot be performed on sets in the
same way as on value typed identifiers (parameters, variables
and equations subtypes). However, there are special set
operations.
The Syntax
Like any other set, a dynamic set has to be declared before it
may be used in the model. Often, a dynamic set is declared as
subset of a static set. Dynamic sets in GAMS may also be multi-
dimensional like static sets. The maximum number of
permitted dimensions follows the rules of the basic Data Types
and Definitions. For multi-dimensional dynamic sets the index
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Dynamic Sets
https://www.gams.com/latest/docs/UG_DynamicSets.html
2/16


sets can also be specified explicitly at declaration. That way
dynamic sets are domain checked. Of course it is also possible
to use dynamic sets that are not domain checked. This provides
additional power and flexibility but also a lack of intelligibility
and danger. Any label is legal as long as such a set's dimension,
once established, is preserved.
In general, the syntax for assigning membership to dynamic
sets in GAMS is:
Set_name is the internal name of the set in GAMS, index_list
refers to the domain of the dynamic set and label is one
specific element of the domain. An assignment statement may
assign membership to the dynamic set either to the whole
domain or to a subset of the domain or to one specific
element. Note that, as usual, a label must appear in double or
single quotes.
Yes and no are keywords in GAMS. They are used to add
members to or remove them from the dynamic set. Examples
are given in the following subsections.
Illustrative Example
Throughout this chapter we will use examples adapted from
the database model [ZLOOF] to illustrate the introduced
concepts. Here we start with assignments of membership to
dynamic sets.
Note that the sets subitem1 and subitem2 are declared like
any other set. The two sets become dynamic as soon as they
are assigned to a few lines later. They are also domain checked:
the only members they will ever be able to have must also be
members of the set item.
set_name(index_list | label) = yes | no ;
Set  item            "all items"              / 
     subitem1(item)  "first subset of item"   / 
     subitem2(item)  "second subset of item";
subitem1('ink')      = yes ;
subitem1('lipstick') = yes ;
subitem2(item)       = yes  ;
subitem2('perfume')  = no ;
display subitem1, subitem2;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Dynamic Sets
https://www.gams.com/latest/docs/UG_DynamicSets.html
3/16


The first assignment not only makes the set subitem1
dynamic, it also has the effect that its superset item becomes
a static set and from then on its membership is frozen. The first
two assignments each add one new element to subitem1. Note
that both are also elements of item, as required. The third
assignment is an example of the familiar indexed assignment:
subitem2 is assigned all the members of item. The last
assignment removes the label 'perfume' from the dynamic
set subitem2. The output generated by the display statement
is shown below:
Note that even though the labels 'pen' and 'pencil' were
declared to be members of the set subitem1 before the
assignment statements that added the labels 'ink' and
'lipstick' to the set, they appear in the listing above at the
end. The reason is that elements are displayed in the internal
order, which in this case is the order specified in the
declaration of the set item.
Alternatively, the elements of the set subitem2 could be
assigned in the following way:
The first statement removes all elements from the set
subitem2. The second statement adds all elements of the set
subitem1. Note that this assignment is permitted since the set
subitem1 is a proper subset of the set item (which is the
domain of subitem2). The third statement adds one additional
element.
----      9 SET subitem1  first subset of item
ink     ,    lipstick,    pen     ,    pencil
----      9 SET subitem2  second subset of item
dish    ,    ink     ,    lipstick,    pen     ,
subitem2(item)     = no;
subitem2(subitem1) = yes;
subitem2('dish')   = yes;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Dynamic Sets
https://www.gams.com/latest/docs/UG_DynamicSets.html
4/16


Dynamic Sets with Multiple Indices
As mentioned earlier, dynamic sets may be multi-dimensional.
The following lines continue the example above and illustrate
assignments for multi-dimensional sets.
Note that supply is a two-dimensional dynamic set. It links
sold items with their respective suppliers. Other examples with
multi-dimensional dynamic sets are in subsections Dynamic
Sets in Conditional Assignments and Conditional Indexed
Operations with Dynamic Sets below.
All the mechanisms using asterisks and parenthesized lists that
were introduced in section Multi-Dimensional Sets in chapter
Set Definition are available for dynamic sets as well.
Equations Defined over the Domain of Dynamic
Sets
Generally, dynamic sets are not permitted as domains in
declarations of sets, variables, parameters and equations.
However, they may be referenced and sometimes it is necessary
to define an equation over a dynamic set.
Note
The trick is to declare the equation over the entire
domain but define it over the dynamic set.
For example, defining an equation over a dynamic set can be
necessary in models that will be solved for arbitrary groupings
of regions simultaneously. We assume there are no explicit
links between regions, but that we have a number of
independent models with a common data definition and
common logic. We illustrate with an artificial example, leaving
out lots of details.
Sets sold(item)        "items sold" / pencil, pe
     sup               "suppliers"  / bic, parke
     supply(sold,sup) ;
supply('pencil','bic')  = yes ;
supply('pen',sup)       = yes ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Dynamic Sets
https://www.gams.com/latest/docs/UG_DynamicSets.html
5/16


To repeat the important point: the equation is declared over
the set allr, but defined over r, a subset. Note that the
variables and data are declared over allr but referenced over
r. Then the set r may be assigned arbitrary combinations of
elements of the set allr, and the model may be solved any
number of times for the chosen groupings of regions.
Assigning Membership to Singleton Sets
Singleton sets have only one element. Hence any assignment to
a singleton set first clears or empties the set, no explicit action
to clear the set is necessary. This is illustrated with the
following example:
Note that both ii and si are subsets of the set i, but only si
is declared as a singleton set. The assignment statements
assign to both sets the element 'c'. While 'c' is added to the
set ii, it replaces the original element in the singleton set si.
The output from the display statement confirms this:
Set        allr            "all  regions"  /  N,
           r(allr)         "region subset for pa
           type            "set for various type
Scalar     price                         /10/ ;
Parameter  revenue(allr);
Table      data(allr,type) "all other data ..." 
Variables  activity1(allr) "first activity"
           activity2(allr) "second activity"
           revenue(allr)   "revenue"          ;
Equations  resource1(allr) "first resource const
           prodbal1(allr)  "first production bal
resource1(r)..  activity1(r)       =l=  data(r,'
prodbal1(r)..   activity2(r)*price =e= revenue(r
Set            i     "Static Set"            / a
               ii(i) "Dynamic Set"           /  
Singleton Set  si(i) "Dynamic Singleton Set" /  
ii('c') = yes;
si('c') = yes;
display ii, si;
----      8 SET ii  Dynamic Set
b,    c
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Dynamic Sets
https://www.gams.com/latest/docs/UG_DynamicSets.html
6/16


For more information on singleton sets in GAMS, see section
Singleton Sets.
Attention
That an assignment to a singleton set first
clears the set always, means that it is even cleared
if there would be no change at all for a regular set:
Here is the output from the display statement in the listing
file:
The assignment behavior can be changed with the option and
command line parameter strictSingleton which affects the
behavior of a membership assignment to a Singleton Set. With
strictSingleton=0 GAMS does not complain about an
assignment with more than one element on the right hand side
but takes the first one. With strictSingleton=1 (default),
such an assignment raises an error. Consider the following
example:
By default, the above code will trigger an error as an
assignment to a singleton set with more than one element on
the right hand side is forbidden:
----      8 SET si  Dynamic Singleton Set
c
Singleton Set s / 1 /;
s(s)$0 = yes;
display s;
----      3 SET s
                                                
Set            i     "Static Set"            / a
Singleton Set  si(i) "Dynamic Singleton Set";
si(i) = ord(i) > 1;
display si;
*** Error at line 3: Multiple assignment to Sing
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Dynamic Sets
https://www.gams.com/latest/docs/UG_DynamicSets.html
7/16


However, with option (or command line parameter)
strictSingleton=0 GAMS does not complain about such an
assignment with more than one element on the right hand side
but takes the first one:
The output from the display statement confirms this:
Set Operations
GAMS provides symbols for arithmetic set operations that may
be used with dynamic sets. An overview of the set operations in
GAMS is given in Table 1. Examples and alternative formulations
for each operation follow. Note that in the table below the set i
is the static superset and the sets j and k are dynamic sets.
Set            i     "Static Set"            / a
Singleton Set  si(i) "Dynamic Singleton Set";
option strictSingleton = 0;
si(i) = ord(i) > 1;
display si;
----      5 SET si  Dynamic Singleton Set
b
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Dynamic Sets
https://www.gams.com/latest/docs/UG_DynamicSets.html
8/16


Set
Operation
Operator
Description
Set Union
j(i) +
k(i)
Returns a subset of i that
contains all the elements of
the sets j and k.
Set
Intersection
j(i) *
k(i)
Returns a subset of i that
contains the elements of the
set j that are also elements
of the set k.
Set
Complement
not
j(i)
Returns a subset of i that
contains all the elements of
the set i that are not
elements of the set j.
Set
Difference
j(i) -
k(i)
Returns a subset of i that
contains all the elements of
the set j that are not
elements of the set k.
Table 1: Set Operations with Dynamic Sets
The following examples draw on the database model [ZLOOF]
that we introduced above. Recall that the set item is the
superset of the dynamic sets subitem1 and subitem2. We add
new dynamic sets for the results of the respective set
operations. The following example illustrates that the dynamic
set operations are equivalent to the following alternative ways
of representation.
The display statements will show that the above assignment
statements for each operation result in the same dynamic set
Sets union1(item), intersection1(item), compleme
     union2(item), intersection2(item), compleme
union1(item) = subitem1(item) + subitem2(item); 
union2(subitem1) = yes; union2(subitem2) = yes; 
intersection1(item) = subitem1(item) * subitem2(
intersection2(item) = yes$(subitem1(item) and su
complement1(item) = not subitem1(item);         
complement2(item) = yes; complement2(subitem1) =
difference1(item) = subitem2(item) - subitem1(it
difference2(item) = yes$(subitem2(item)); differ
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Dynamic Sets
https://www.gams.com/latest/docs/UG_DynamicSets.html
9/16


like using the set operator. Observe that the alternative
formulations for the set intersection and set difference involve
conditional assignments. Conditional assignments in the
context of dynamic sets are discussed in depth in the next
section.
Note
The indexed operation sum may be used for set
unions. Similarly, the indexed operation prod may
be used for set intersections. For examples see
section Conditional Indexed Operations with
Dynamic Sets below.
Using Dollar Controls with Dynamic
Sets
The remainder of this chapter assumes familiarity with the
dollar condition that is introduced in chapter Conditional
Expressions, Assignments and Equations. All the dollar control
machinery is available for use with dynamic sets. In fact, the
full power of dynamic sets can be exploited using these dollar
controls.
Recall that set membership of subsets and dynamic sets may
be used as a logical condition; see subsection Logical
Conditions: Set Membership and Set Functions for details. Set
membership may also be a building block in complex logical
conditions that are constructed using the logical operators not,
and, or, xor, imp and eqv. Moreover, the set operations
introduced in the previous section may also be used in logical
conditions. Like other dollar conditions, dollar conditions with
dynamic sets are used in the context of assignments, indexed
operations and equations. We will discuss in detail each of
these in the following subsections.
Apart from being part of logical conditions, dynamic sets may
be assigned members with conditional assignments. Examples
are given in the next subsection.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Dynamic Sets
https://www.gams.com/latest/docs/UG_DynamicSets.html
10/16


Dynamic Sets in Conditional Assignments
Dynamic sets may be used in two ways in conditional
assignments: they may be the item on the left-hand side that is
assigned to and they may be part of the logical condition.
Below we present examples for both. The examples are again
based on the database model [ZLOOF] that we introduced
above.
The conditional assignment adds the members of dynamic set
subitem1 to the dynamic set subitem2. Thus subitem2 will
have the following elements:
Note that instead of using subitem1 in a dollar condition we
could also write:
In the next example of a conditional assignment, a dynamic set
features in the logical condition on the right-hand side. The
first statement clears the set subitem2 of any previously
assigned members and the second statement assigns all
members of subitem1 to subitem2. The following conditional
assignment will have the same result:
The logical condition in this assignment is subitem1(item). It
is satisfied for all members of the set subitem1. Hence the
statement assigns all elements of the domain item that are
Set  item            "all items"              / 
     subitem1(item)  "first subset of item"   / 
     subitem2(item)  "second subset of item";
subitem2(item)$subitem1(item) = yes;
display subitem2; 
----      6 SET subitem2  second subset of item
ink     ,    lipstick,    pen     ,    pencil 
subitem2(subitem1) = yes; 
subitem2(item) = no;
subitem2(item) = yes$subitem1(item);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 15:44
Dynamic Sets
https://www.gams.com/latest/docs/UG_DynamicSets.html
11/16


members of the set subitem1 to the dynamic set subitem2.
Note that in this assignment the dollar operator is on the right.
In the section Dollar on the Right we show that conditional
assignments with the dollar operator on the right-hand side
imply an if-then-else structure where the else case is
automatically zero. Unlike parameters, dynamic sets cannot be
assigned the value of zero, they are assigned the value no
instead. Therefore a more explicit formulation of the
conditional assignment above would be:
For more on sets in logical conditions, see section Logical
Conditions: Set Membership and Set Functions. For more on
conditional assignments, see section Conditional Assignments.
Conditional Indexed Operations with Dynamic
Sets
Indexed operations in GAMS are introduced in section Indexed
Operations. They may be controlled by dollar conditions as
discussed in section Conditional Indexed Operations. The
domain of conditional indexed operations is often restricted by
a set, called the conditional set. Dynamic sets may be used as
conditional sets or they may be assigned to with a statement
that features a conditional indexed operation on the right-hand
side. We will illustrate both cases with examples.
Suppose we have a set of origins, a set of destinations and a
table specifying the flight distance between them:
We wish to find the longest distance that we can travel given
that we have a limit of 3500 miles.
subitem2(item) = no;
subitem2(item) = yes$subitem1(item) + no$(not su
Set   i           "origins"       / Chicago, Phi
      j           "destinations"  / Vancouver, B
Table d(i,j)      "distance (miles)"
                  Vancouver   Bogota   Dublin   
    Chicago          1777      2691     3709    
    Philadelphia     2438      2419     3306    
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Dynamic Sets
https://www.gams.com/latest/docs/UG_DynamicSets.html
12/16


The dynamic set can_do contains all connections that are less
than 3500 miles. The scalar maxd is defined by a conditional
assignment where the indexed operation smax scans all entries
of the parameter d whose label combinations are members of
the set can_do and chooses the largest value. The output
generated by the display statements is shown below:
There is a shorter alternative formulation for this assignment;
see subsection Filtering through Dynamic Sets below for
details.
Finally, we also wish to know which flight connection is linked
to the longest possible distance. Consider the following two
lines:
The dynamic singleton set is assigned the member of the
dynamic set can_do whose distance equals the maximum
distance.
The full power of indexed operators becomes apparent with
multi-dimensional dynamic sets. As earlier in this chapter, we
illustrate with fragments of code adapted from the relational
database model [ZLOOF].
Set   can_do(i,j) "connections with less than 35
can_do(i,j)$(d(i,j) < 3500) = yes;
display can_do;
Scalar maxd  "longest distance possible"
maxd = smax((i,j)$can_do(i,j), d(i,j));
display maxd;
----     11 SET can_do  connections with less th
               Vancouver      Bogota      Dublin
Chicago              YES         YES
Philadelphia         YES         YES         YES
----     15 PARAMETER maxd                 =    
Singleton set maxc(i,j)  "maximum distance conne
maxc(i,j) = yes$can_do(i,j) and (d(i,j) = maxd);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Dynamic Sets
https://www.gams.com/latest/docs/UG_DynamicSets.html
13/16


The assignment above is used to create the set of departments
that sell items supplied by 'parker'. Note that the set g03 is
a subset of the set dep. Its members are specified by
assignment, hence it is a dynamic set. Note that the assignment
is made to a set, therefore the indexed operator sum refers to a
set union (and not to an addition as would be the case if the
assignment were made to a parameter). The indexed operation
is controlled by the two-dimensional set supply with the label
'parker' in the second index position. This logical condition
is TRUE for all members of the set supply where the second
index is 'parker'. Hence the summation is over all items sold,
provided that the supplier is 'parker'. Given the declaration
of the set supply, this means 'ink', 'pen' and 'pencil'.
The associated departments are thus all departments except
for 'cosmetics':
Now suppose we are interested in the departments that are
selling only items supplied by 'parker'. We introduce a new
dynamic set g11 and the following assignment adds the
desired departments:
Set  dep         "departments"  / cosmetics, har
     sup         "suppliers"    / bic, dupont, p
     item        "items sold"   / dish, ink, lip
sales(dep,item)  "departments and items sold"  /
                 cosmetics.  (lipstick,perfume)
                 hardware.    ink
                 houshold.   (dish,pen)
                 stationary. (dish,ink,pen,penci
                 toy.        (ink,pen,pencil)   
supply(item,sup) "items and suppliers"   /
                 dish.(bic,dupont)   , ink.(bic,
                 pen.(parker,revlon) , pencil.(b
Set g03(dep)    "departments selling items suppl
g03(dep) = sum(item$supply(item,'parker'), sales
display g03;
----     19 SET g03  departments selling items s
hardware  ,    houshold  ,    stationary,    toy
Set g11(dep) "departments only selling items sup
g11(dep) = prod(sales(dep,item), supply(item,"pa
display g11;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Dynamic Sets
https://www.gams.com/latest/docs/UG_DynamicSets.html
14/16


Note that the indexed operation prod refers to set
intersections in the context of assignments to dynamic sets.
From all departments linked with items only those are included
where all items sold are supplied by 'parker'. This means
that departments that additionally sell items that are not
supplied by 'parker' are excluded. Hence, only 'hardware'
and 'toy' are added to g11.
Conditional Equations with Dynamic Sets
Recall that dollar conditions in the context of equations may
restrict the domain of the equation and they may also feature
in the algebraic formulation of the equation; see section
Conditional Equations for more information. In both instances
dynamic sets may be used as part of the logical condition.
Dollar conditions with dynamic sets in the algebra of equations
are similar to conditional assignments with dynamic sets; see
section Dynamic Sets in Conditional Assignments above. The
example that follows illustrates the use of a dynamic set to
restrict the domain of definition of an equation. In section
Equations Defined over the Domain of Dynamic Sets above we
had the following equation definition:
Recall that r is a dynamic set and a subset of the set allr.
Hence this equation may be rewritten in the following way:
Note that both formulations achieve the same result: restricting
the domain of definition to those elements that belong to the
dynamic set r. While in the second formulation the condition is
specified explicitly, in the first formulation the domain is
filtered through the dynamic set r. This is the topic of the next
subsection.
prodbal1(r)..            activity2(r)*price    =
prodbal1(allr)$r(allr).. activity2(allr)*price =
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Dynamic Sets
https://www.gams.com/latest/docs/UG_DynamicSets.html
15/16


Filtering through Dynamic Sets
The filtering process is introduced and explained in section
Filtering Sets in chapter Conditional Expressions, Assignments
and Equations. In certain circumstances it is an alternative to
the dollar condition to restrict the domain of equations, sets,
variables, parameters and indexed operations. We already saw
an example for restricting the domain of definition of an
equation in the previous subsection. The next example refers to
restricting the domain in an indexed operation. In section
Conditional Indexed Operations with Dynamic Sets we had the
following assignment:
Recall that maxd is a scalar, i and j are sets, can_do is a
dynamic set and d is a two-dimensional parameter. Note that
the conditional set is the dynamic set can_do. The assignment
may be rewritten in the following way:
Here the indexed operation is filtered through the dynamic set
can_do, a dollar condition is not necessary.
maxd = smax((i,j)$can_do(i,j), d(i,j));
maxd = smax(can_do(i,j), d(i,j));
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Dynamic Sets
https://www.gams.com/latest/docs/UG_DynamicSets.html
16/16


Sets as Sequences: Ordered
Sets
Table of Contents
Introduction
Ordered and Unordered Sets
Sorting a Set
Ord and Card Operators
The Ord Operator
The Card Operator
Lag and Lead Operators
Lags and Leads in Assignments
Linear Lag and Lead
Operators in Assignments -
Reference
Linear Lag and Lead
Operators in Assignments -
Assignment
Circular Lag and Lead
Operators in Assignments
Lags and Leads in Equations
Linear Lag and Lead
Operators in Equations -
Domain Control
Linear Lag and Lead
Operators in Equations -
Reference
Circular Lag and Lead
Operators in Equations
Summary
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 15:44
Sets as Sequences: Ordered Sets
https://www.gams.com/latest/docs/UG_OrderedSets.html
1/17


Introduction
Sets are introduced in chapter Set Definition. There we state
that in general, sets in GAMS are regarded as an unordered
collection of labels. However, in some contexts, say, multi-
period planning models, some sets need to be treated as if
they were sequences. In this chapter we will establish the
notion of ordered sets and we will cover their special features
and the associated operations.
Examples where ordered sets are needed include economic
models that explicitly represent conditions in different time
periods that are linked, location problems where the
formulation may require a representation of contiguous areas,
as in a grid representation of a city, scheduling problems and
programs that model stocks of capital with equations of the
form 'stocks at the end of period  are equal to stocks at the
end of period 
 plus net gains during period '.
Note
Models involving sequences of time periods are
often called dynamic models, because they
describe how conditions change over time. This use
of the word dynamic unfortunately has a different
meaning from that used in connection with dynamic
sets, but this is unavoidable.
Ordered and Unordered Sets
Certain one-dimensional sets may be treated as if they were a
sequence. Those sets need to be ordered and static. A one-
dimensional set is ordered if the definition or initialization of
the elements in the set corresponds to the order of the labels
in the GAMS Entry order.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Sets as Sequences: Ordered Sets
https://www.gams.com/latest/docs/UG_OrderedSets.html
2/17


Note
The GAMS entry order is the order in which
the individual labels first appear in the GAMS
program, either explicitly or as a result of
using the shorthand asterisk notation.
For the sake of simplicity, sets that are static
and ordered are often just referred to as
ordered sets.
GAMS maintains a unique element list where all labels that are
used as elements in one or more sets are listed. The order of
the elements in any one set is the same as the order of those
elements in the unique element list. This means that the order
of a set may not be what it appears to be if some of the labels
were used in an earlier definition. The internal GAMS order of
the labels can be made visible with the dollar control option
$onUELlist. This directive generates a map that is shown in the
compilation output of the listing file. For details on the listing
file and GAMS output in general, see chapter GAMS Output. A
good rule of thumb is that if the user wants a set to be ordered
and the labels in the set have not been used already, then they
will be ordered.
In the example below we show ordered and unordered sets and
the map showing the order. The input is:
Note that the label "1987" is the first label seen by GAMS. It
appears again as the last label in the initialization list for the
set t2. This means that the set t2 is not ordered and any
attempt to use t2 in a context implying order, such as the
operations introduced later in this chapter, will cause error
messages. Observe that the set t3 is ordered, as all the
members of t3 have appeared in the GAMS program before,
and in the same order that they are listed in the definition of
t3.
$onUELlist
Set    t1  / 1987, 1988, 1989, 1990, 1991 /
       t2  / 1983, 1984, 1985, 1986, 1987 /
       t3  / 1987, 1989, 1991, 1983, 1985 / ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Sets as Sequences: Ordered Sets
https://www.gams.com/latest/docs/UG_OrderedSets.html
3/17


The unique element listing below shows the entry order (the
important one) and the sorted order, obtained by sorting the
labels into dictionary order. The single digits on the left are the
sequence numbers of the first label on that line.
A set can always be made ordered by moving its declaration
closer to the beginning of the program. With these restrictions
in mind, we will continue in the next section with the
operations that may be used with ordered sets.
Sorting a Set
Note that besides the entry order of unique elements there is
also a sorted (alphabetical) order. To obtain the sorted order
(of an ordered or unordered set) the special predefined two-
dimensional set SortedUELs(*,*) can be used. Consider the
following example where set j is reported in an alphabetically
sorted format:
The output generated by the display statement follows:
G e n e r a l   A l g e b r a i c   M o d e l i 
Unique Element Listing
Unique Elements in Entry Order
    1   1987       1988       1989       1990   
    7   1984       1985       1986
Unique Elements in Sorted Order
    1   1983       1984       1985       1986   
    7   1989       1990       1991
set j / c, a, b, 1, 2, 11 /;
display j;
alias(*,u);
file ordered /ordered.txt/;
loop(SortedUels(u,j), put ordered j.tl:0 '  ');
putclose ordered;
----      2 SET j
c ,    a ,    b ,    1 ,    2 ,    11
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Sets as Sequences: Ordered Sets
https://www.gams.com/latest/docs/UG_OrderedSets.html
4/17


Note that, as expected, the display statement shows the
elements of set j in the entry order not in alphabetical order.
However, the elements are listed in alphabetical order in the
file ordered.txt. Note furthermore, that alphabetical sorting
leads to an order where e.g. 11 precedes 2.
In the example above u is aliased with the Universal Set. For an
introduction to writing external files with put, see chapter The
Put Writing Facility.
Ord and Card Operators
As stated in section Labels in chapter GAMS Programs, labels in
GAMS do not have a numerical value. The examples used were
that the label '1986' does not have a numerical value of 1986
and the label '01' is different from the label '1'. This section
introduces two operators - ord and card - that return integer
values when applied to sets. While the integer values returned
do not represent the numerical value of the label, they can be
used for the same purpose.
Note
GAMS provides some string manipulation capability
by extending the card and ord operators to also
work on strings.
The Ord Operator
The operator ord returns the relative position of a member in a
set.
Attention
By default the operator ord may be used only with
one-dimensional sets that are static and ordered.
1  11  2  a  b  c
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Sets as Sequences: Ordered Sets
https://www.gams.com/latest/docs/UG_OrderedSets.html
5/17


Some examples show the usage.
Note that as a result of the statements above, the value of
val('1985') will be 1, val('1986') will be 2 and so on.
A common use of ord is in setting up vectors that represent
quantities growing in some analytically specified way. For
example, suppose a country has 56 million people in the base
period and the population is growing at the rate of 1.5 percent
per year. Then the population in succeeding years can be
calculated as follows:
It is often useful to simulate general matrix operations in GAMS.
The first index of a two dimensional parameter can
conveniently represent the rows, the second the columns and
order is necessary. The example below shows how to set the
upper triangle of a matrix equal to the row index plus the
column index, and the diagonal and lower triangle to zero.
Note that in the assignment statement the logical condition
(ord(i) < ord(j)) restricts the assignment to the entries of
the upper triangle. For more information on logical conditions
and conditional assignments in GAMS, see sections Logical
Conditions and Conditional Assignments respectively.
Note that the strict requirement that the set needs to be
ordered for the operator ord to be used may be relaxed with a
dollar control option called offOrder. Consider the following
lines where we revisit the example from the previous section.
Set       t      "time periods"  / 1985*1995 / ;
Parameter val(t) ;
val(t)  =  ord(t);
population(t)  =  56*(1.015**(ord(t) - 1)) ;
Set       i       "row and column labels"       
alias (i,j);
Parameter a(i,j)  "a general square matrix";
a(i,j) $ (ord(i) < ord(j)) = ord(i) + ord(j);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Sets as Sequences: Ordered Sets
https://www.gams.com/latest/docs/UG_OrderedSets.html
6/17


Note that, as we explained above, the set t2 is not ordered.
Therefore using ord(t2) somewhere in the model will usually
cause the program to be terminated with an error message.
However, with the dollar control option offOrder active, the
set t2 is treated as if it were ordered and the display statement
will generate the following output:
While this may be useful in some circumstances, the option
comes with a price, since the system will not be able to
diagnose odd and incorrect formulations and data sets. The
strict requirement that the set needs to be ordered for the ord
operator can be turned on again via onOrder.
The Card Operator
The operator card returns the number of elements in a set.
Note
The operator card may be used with any set: static
and dynamic sets, ordered and unordered sets.
The following example illustrates its use:
Note that s will be assigned the value 11 since the set t has 11
elements.
$offOrder
Set       t1    / 1987, 1988, 1989, 1990, 1991 /
          t2    / 1983, 1984, 1985, 1986, 1987 /
Parameter p(t2);
p(t2) = ord(t2);
display p;
----      6 PARAMETER p
1987 1.000,    1983 2.000,    1984 3.000,    198
Set    t  "time periods"  / 1985*1995 /;
Scalar s;
s  =  card(t);
Display s;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Sets as Sequences: Ordered Sets
https://www.gams.com/latest/docs/UG_OrderedSets.html
7/17


A common use of card is to specify some condition only for the
final period, for example to fix a variable. Consider the
following artificial example:
Note that the logical condition (ord(t) = card(t)) restricts
the assignment to the last element of the set t: no assignment
is made for other members of t. The advantage of this way of
fixing the variable c is that the membership of t can be
changed safely and this statement will always fix c for the last
element. For more information on logical conditions and
conditional assignments in GAMS, see sections Logical
Conditions and Conditional Assignments respectively.
Lag and Lead Operators
Lag and lead operators are used to relate the current member
of an ordered set to the previous or next member of the set.
GAMS provides two forms of lag and lead operators (linear and
circular), they are summarized in Table 1. Note that in the table
below t is a member of an ordered set and n is a positive
integer.
c.fx(t)$(ord(t) = card(t)) = demand(t);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Sets as Sequences: Ordered Sets
https://www.gams.com/latest/docs/UG_OrderedSets.html
8/17


Operation
Symbol
Description
Linear Lag
t - n
Refers to the element of the
ordered set whose relative position
in the set is ord(t)-n.
Linear
Lead
t + n
Refers to the element of the
ordered set whose relative position
in the set is ord(t)+n.
Circular
Lag
t --
n
Same as t - n, only here the first
element of the set is assumed to be
preceded by the last element of the
set, thus forming a circle of
elements.
Circular
Lead
t ++
n
Same as t + n, only here the last
element of the set is assumed to be
followed by the first element of the
set, thus forming a circle of
elements.
Table 1: Linear and Circular Lag and Lead Operators
Note that the only difference between linear and circular lag
and lead operators is how endpoints are treated. Linear
operators assume that there are no members preceding the
first and following the last member of the ordered set. This
assumption may result in elements of the set being referenced
that actually do not exist. Therefore the user must think
carefully about the treatment of endpoints: models with linear
lag and lead operators will need special exception handling
logic to deal with them. The next two sections will describe how
this issue is handled in GAMS in the context in which these
operators are typically used: assignments and equations. Linear
lag and lead operators are useful for modeling time periods
that do not repeat, like a set of years (say 1990 to 1997).
Circular lag and lead operators assume that the first and last
members of the set are adjacent, so as to form a circular
sequence of members. This means that 'first--1' is a
reference to 'last' and 'last++2' is the same as 'first++1'. All
references and assignments are defined. The assumption of
circularity is useful for modeling time periods that repeat, such
as months of the year or hours in the day. It is quite natural to
think of January as the month following December. Agricultural
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Sets as Sequences: Ordered Sets
https://www.gams.com/latest/docs/UG_OrderedSets.html
9/17


farm budget models and workforce scheduling models are
examples of applications where circular leads occur naturally.
Note
GAMS is able to distinguish the linear lag and
lead operators '-' and '+' from arithmetic
operators by context. To avoid ambiguity,
GAMS does not allow to mix lag and lead
operators with arithmetic operators. For
example, i+1+1 is not allowed, but writing
i+(1+1) would work.
Observe that the lag (or lead) value n does
not have to be an explicit constant: it can be
an arbitrary expression, provided that it
evaluates to an integer. If it does not, error
messages will be produced. A negative result
causes a switch in sense (from lag to lead, for
example).
Note that if lag and lead operators are used with an unordered
set, the program will terminate with an error message. The
strict requirement that the set be ordered may be relaxed with
the dollar control option offOrder. If the directive $offOrder is
added, in the lines that follow unordered sets are treated as if
they were ordered and therefore lag and lead operators may be
used with them. While this may be advantageous in some
circumstances, the option comes with a price, since the system
will not be able to diagnose odd and incorrect formulations
and data sets. The strict requirement that the set needs to be
ordered for the use of lag and lead operators can be turned on
again via onOrder.
The next two subsections will give some illustrative examples
on the use of lag and lead operators in assignment statements
and in equations respectively.
Lags and Leads in Assignments
Lag and lead operators may be used in assignment statements.
The use of a lag or lead operator on the right-hand side of an
assignment is called a reference, while their use on the left-
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Sets as Sequences: Ordered Sets
https://www.gams.com/latest/docs/UG_OrderedSets.html
10/17


hand side is called an assignment and involves the definition of
a domain of the assignment. The concepts behind reference
and assignment are equally valid for the linear and circular
forms of the lag and lead operators. However, the importance
of the distinction between reference and assignment is not
pronounced for circular lag and lead operators, because non-
existent elements are not referred to in this case.
Note
A reference to a non-existent element causes the
default value zero to be used, whereas an attempt
to assign to a non-existent element results in no
assignment being made.
We will first illustrate linear lag and lead operators for
reference and assignment. Then we will turn to the circular
form of the operators.
Linear Lag and Lead Operators in Assignments -
Reference
Consider the following example, where the lag operator is used
on the right-hand side of an assignment statement:
Note that the option statement suppresses the decimal places
from the display statement.
Note that, as expected, the values for the parameter a are 1987,
1988 up to 1991 corresponding to the labels "y-1987",
"y-1988" and so on. Observe that the parameter b is
Set       t             "time sequence"  / y-198
Parameter a(t), b(t);
a(t)  =  1986 + ord(t);
b(t)  =  -1;
b(t)  =  a(t-1);
option decimals = 0;
display a, b;
----      7 PARAMETER a
y-1987 1987,    y-1988 1988,    y-1989 1989,    
----      7 PARAMETER b
y-1988 1987,    y-1989 1988,    y-1990 1989,    
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Sets as Sequences: Ordered Sets
https://www.gams.com/latest/docs/UG_OrderedSets.html
11/17


initialized to 
 so that the result of the next assignment can
be seen clearly. Note that in the last assignment the lag
operator '-' is used on the right-hand side, resulting in the
values for b to equal the values for a from the previous period.
If there is no previous period, as with the first element,
"y-1987", the value zero is assigned, replacing the previous
value of 
 (values of zero for parameters are not displayed).
Linear Lag and Lead Operators in Assignments -
Assignment
Consider the following variation of the previous example. Here
the lead operator is used on the left-hand side of an
assignment statement:
Note that, as before, the option statement suppresses the
decimal places from the display statement.
The assignment to a is explained in the previous subsection.
Note that the parameter c is initialized to 
. The assignment
to c involving the lead operator on the left-hand side needs
special attention. It is best to spell out step by step how this
assignment is made. For each member of t in sequence, find
the member of c associated with t+2. If it exists, replace its
value with the value of a(t). If not (as with labels "y-1990"
and "y-1991") make no assignment. The first member of the
set t is "y-1987", therefore the first assignment is made to
c("y-1989") which takes the value of a("y-1987"), that is
1987. No assignments at all are made to c("y-1987") and
c("y-1988"): these two retain their previous values of 
.
Set       t            "time sequence"  / y-1987
Parameter a(t), c(t) ;
a(t)    =  1986 + ord(t) ;
c(t)    =  -1;
c(t+2)  =  a(t) ;
option decimals = 0;
display a, c ;
----      7 PARAMETER a
y-1987 1987,    y-1988 1988,    y-1989 1989,    
----      7 PARAMETER c
y-1987   -1,    y-1988   -1,    y-1989 1987,    
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 15:44
Sets as Sequences: Ordered Sets
https://www.gams.com/latest/docs/UG_OrderedSets.html
12/17


Circular Lag and Lead Operators in Assignments
The following example illustrates the use of circular lag and
lead operators in assignment statements.
Note that, as before, the option statement suppresses the
decimal places from the display statement. The results are
shown below.
In the example parameter lagval is used for reference while
leadval is used for assignment. Notice that the case of
circular lag and lead operators does not refer to any non-
existent elements. The difference between reference and
assignment is therefore not important. Note that the following
two statements from the example above,
are equivalent to
Set       s          "seasons" / spring, summer,
Parameter val(s)               / spring 10, summ
          lagval(s)
          leadval(s);
lagval(s)     = -1 ;
lagval(s)     = val(s--2) ;
leadval(s)    = -1 ;
leadval(s++1) = val(s) ;
option decimals = 0;
display val, lagval, leadval;
-----     10 PARAMETER val
spring 10,    summer 15,    autumn 12,    winter
----     10 PARAMETER lagval
spring 12,    summer  8,    autumn 10,    winter
----     10 PARAMETER leadval
spring  8,    summer 10,    autumn 15,    winter
lagval(s)     = val(s--2) ;
leadval(s++1) = val(s) ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Sets as Sequences: Ordered Sets
https://www.gams.com/latest/docs/UG_OrderedSets.html
13/17


The use of reference and assignment have been reversed with
no difference in effect.
Lags and Leads in Equations
The principles established in the previous section follow quite
naturally into equation definitions. A lag or lead to the left of
the '..' symbol is a modification of the domain of definition of
the equation. The linear form may cause one or more individual
equations to be suppressed. A lag or lead operation in the body
of an equation (to the right of the '..' symbol) is a reference. If
the associated label is not defined, the term vanishes.
Note
All lag and lead operands must be exogenous. For
more information, see section Functions in
Equation Definitions.
In the next two subsections we will provide examples
illustrating the use of the linear form of the lag and lead
operators in equations to modify the domain of definition and
for reference respectively. In the last subsection we will turn to
circular lag and lead operators in equations.
Linear Lag and Lead Operators in Equations -
Domain Control
Consider the following simple artificial multi-period example.
We specify a complete model and encourage users to solve it
and further explore it.
lagval(s++2)  = val(s) ;
leadval(s)    = val(s--1) ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Sets as Sequences: Ordered Sets
https://www.gams.com/latest/docs/UG_OrderedSets.html
14/17


Note that the equation kk is declared over the set t, but it is
defined over the domain (t+1). Therefore the first equation
that will be generated is the following:
Note that the value of the variable k('t1') is fixed at the
value of scalar k0. Observe that for the last element of t, the
term k(t+1) is not defined and therefore the equation will not
be generated. If lag or lead operators are used in the domain of
definition of an equation, the equation listing can be a useful
tool to verify whether the equations that have been generated
are those that were intended:
To summarize, the lead operator in the domain of definition
has restricted the number of constraints generated so that
there are no references to non-existent variables.
For a more realistic model that illustrates the usage of linear
lag operators in equations, see for example the optimal
economic growth model [RAMSEY].
Sets      t           / t1*t5 /
          tfirst(t);
Parameter i(t)        / #t 1 /;
Scalar    k0          / 3.00 /;
tfirst(t)  =  yes$(ord(t) = 1);
Variables k(t), z;
k.fx(tfirst) = k0;
Equations kk(t), dummy;
dummy..      z =e= 0;
kk(t+1)..    k(t+1) =e=  k(t) + i(t);
model m /all/;
option limrow = 10;
solve m using lp min z;
k('t2')  =e=  k('t1') + i('t1');
kk(t2)..  - k(t1) + k(t2) =E= 1 ; (LHS = 0, INFE
kk(t3)..  - k(t2) + k(t3) =E= 1 ; (LHS = 0, INFE
kk(t4)..  - k(t3) + k(t4) =E= 1 ; (LHS = 0, INFE
kk(t5)..  - k(t4) + k(t5) =E= 1 ; (LHS = 0, INFE
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Sets as Sequences: Ordered Sets
https://www.gams.com/latest/docs/UG_OrderedSets.html
15/17


Linear Lag and Lead Operators in Equations -
Reference
In the previous subsection we showed how to write the
equation kk using the lead operator for domain control in
combination with fixing the variable k(tfirst) to k0. An
alternative formulation could neglect the fixing of k(tfirst)
and use a lag operator and a dollar condition in the body of the
equation while the domain of definition is unrestricted:
Note that for the first element of the set t the terms k(t-1)
and i(t-1) are not defined and therefore vanish. Without the
conditional term, the resulting equation would be:
However, this would lead to different results as k('t1') would
not be set to the value of k0 anymore. Therefore the
conditional expression k0$tfirst(t) is added. Observe that
in this formulation equations are generated for all time
periods, no equation is suppressed.
In general, the choice between using lag and lead operators as
reference like in the last example or in domain control is often
a matter of taste.
Circular Lag and Lead Operators in Equations
In the case of circular lag and lead operators, the difference
between their use in domain control and as reference is not
important because it does not lead to any equations or terms
being suppressed. Consider the following artificial example.
kk(t)..  k(t) =e= k(t-1) + i(t-1) + k0$tfirst(t)
k('t1') =e= 0;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Sets as Sequences: Ordered Sets
https://www.gams.com/latest/docs/UG_OrderedSets.html
16/17


In this example four individual equations are generated. They
are listed below.
Note that for the last element of the set s the term
avail(s++1) is evaluated to avail('spring'). This term is
well defined and therefore it does not vanish. Similarly, using
the circular lead operator in the domain of definition like in the
following line will result in the same four equations being
generated as above and no equation being suppressed.
Summary
This chapter introduced the concept of ordered sets. All the
features in GAMS that deal with this issue including the ord
and card operators, as well as the linear and circular forms of
the lag and lead operators were described in detail.
Set      s        "seasons" / spring, summer, au
Variable produ(s) "amount of goods produced in e
         avail(s) "amount of goods available in 
         sold(s)  "amount of goods sold in each 
Equation matbal(s);
matbal(s)..  avail(s++1) =e= avail(s) + produ(s)
avail('summer')  =e=  avail('spring') + produ('s
avail('autumn')  =e=  avail('summer') + produ('s
avail('winter')  =e=  avail('autumn') + produ('a
avail('spring')  =e=  avail('winter') + produ('w
matbal(s++1)..  avail(s++1) =e= avail(s) + produ
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:44
Sets as Sequences: Ordered Sets
https://www.gams.com/latest/docs/UG_OrderedSets.html
17/17


Data Manipulations with
Parameters
Table of Contents
Introduction
The Assignment Statement
Scalar Assignments
Indexed Assignments
Restricting the Domain in
Assignments
Restricting the Domain:
Explicit Labels
Restricting the Domain:
Subsets
Restricting the Domain:
Conditionals
Restricting the Domain:
Tuples
Issues with Controlling Indices
Expressions
Standard Arithmetic Operations
Indexed Operations
Functions
Intrinsic Functions
Mathematical Functions
String Manipulation
Functions
Logical Functions
Time and Calendar
Functions
GAMS Utility and
Performance Functions
Extrinsic Functions
Function Suffixes
Extended Range Arithmetic and
Error Handling
Predefined Symbols
Summary
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
1/38


Introduction
In this chapter we explicitly cover only parameter manipulation,
including all aspects of data handling. Much of this material is
relevant elsewhere (e.g. to sets), but for specifics related to
assignment to sets, to conditions, and to assignments within
flow control constructs such as the loop statement, see
chapters Dynamic Sets, Conditional Expressions, Assignments
and Equations and Programming Flow Control Features
respectively.
Once initialized, data often requires manipulation in order to
bring it into a form most suitable for use in a model or an
application. The assignment statement is the way to do this. All
the possible components of the assignment statement except
conditions are introduced and discussed in this chapter.
The Assignment Statement
The assignment statement is the fundamental data
manipulation statement in GAMS. It may be used to define or
alter values associated with sets, parameters, variables or
equations.
A
simple assignment is written in the style associated with many
other computer languages. GAMS uses the traditional symbols
for addition (+), subtraction (-), multiplication (*) and
division (/). We will use them in the examples that follow, and
give more details in section Expressions.
Scalar Assignments
Consider the following artificial sequence:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
2/38


The scalar x is initialized to be 1.5. The second statement
changes the value to 1.2, and the third changes it to 3.2. The
second and third statements are assignments: each replaces
the current value of x with a new one.
Note that the same symbol can be used on the left and right of
the = sign. The new value is not available until the calculation
is complete, and the operation gives the expected result.
Note
An assignment cannot start with a reserved word. A
semicolon is therefore required as a delimiter
before all assignments.
Note that extended range identifiers (e.g. INF) and acronyms
may also be used in assignment statements. For specific
details, see sections Extended Range Arithmetic and Acronym
Usage respectively.
Indexed Assignments
The GAMS syntax for performing indexed assignments is
extremely powerful. This operation offers what may be thought
of as simultaneous or parallel assignments and provides a
concise way of specifying large amounts of data.
Consider the mathematical statement 
 for
all elements of . This means that for every member of the set
, a value is assigned to 
. This can be written in GAMS as
follows:
This assignment is known technically as an indexed assignment
and set d as the
controlling index or controlling set.
scalar x / 1.5 /;
x = 1.2;
x = x + 2;
dj(d) = 2.75*da(d) ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
3/38


Attention
The index set(s) on the left hand side of an indexed
assignment are referred to synonymously as the
controlling indices, controlling sets, or controlling
domain of the assignment.
The extension to two or more controlling indices should be
obvious. There will be an assignment made for each label
combination that can be constructed using the indices inside
the parentheses. Consider the following example of an
assignment to all 100 data elements of the parameter a.
The calculation in the last statement is carried out for each of
the 100 unique two-label combinations that can be formed
from the elements of row and col. An explicit formulation of
the first of these assignments follows:
Note that for indexed assignments a copy of the symbols on
the right hand side is installed before the assignment is carried
out. That means it does not work "in-place" or recursively.
Consider the following example where we compute the first ten
Fibonacci numbers and store them in parameter f using a loop.
The example also illustrates how such a recursive calculation
does not work with a parallel assignment statement for
parameter g.
sets  row            / r-1*r-10 /
      col            / c-1*c-10 /
      sro(row)       / r-7*r-10 / ;
parameters  r(row)   /r-1*r-7 4, r-8*r-10 5/
            c(col)   /c-1*c-5 3, c-6*c-10 2/;
parameters  a(row,col);
a(row,col)  =  13.2 + r(row)*c(col)  ;
a('r-1','c-1') = 13.2 + r('r-1')*c('c-1');
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
4/38


The display statement results in the following output.
Restricting the Domain in Assignments
Sometimes it is necessary to make assignments over selected
elements of a set instead of over the entire domain. There are
several ways to accomplish this: using explicit labels, subsets,
conditionals and tuples.
Restricting the Domain: Explicit Labels
The strongest restriction of the domain is assigning a value to
just one element. Labels may be used explicitly in the context
of assignments to accomplish this. The following example
illustrates:
This statement assigns a constant value to just one element of
the parameter a. All other elements of a remain unchanged.
Labels must be quoted when used in this way.
set i / i1*i10 /
parameter
    f(i) / i1 1 /
    g(i) / i1 1 /;
loop(i$(ord(i)>=2),
  f(i) = f(i-2) + f(i-1);
);
g(i)$(ord(i)>=2) = g(i-2) + g(i-1)
display f,g;
----      9 PARAMETER f
i1   1.000,    i2   1.000,    i3   2.000,    i4 
i6   8.000,    i7  13.000,    i8  21.000,    i9 
----      9 PARAMETER g
i1 1.000,    i2 1.000,    i3 1.000
a('r-7','c-4') = -2.36 ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
5/38


Restricting the Domain: Subsets
In general, wherever a set name may occur in an indexed
assignment, a subset may be used instead.
Consider the following example:
Since the set sro was declared as a subset of the set row, we
can use sro as a controlling index in the assignment above to
make the assignment only for the elements of sro.
Restricting the Domain: Conditionals
Conditional assignments are discussed in detail in section
Conditional Assignments in chapter Conditional Expressions,
Assignments and Equations. For details on the types of logical
conditions, see section Logical Conditions. Here we present a
simple example to illustrate:
This assignment has the following effect: all elements of the
parameter a whose value was at least 100 are assigned the
value INF, while all other elements of a remain unchanged.
Restricting the Domain: Tuples
Tuples or multi-dimensional sets are introduced in section
Many-to-Many Mapping. In this simple example we show how
they may be used to restrict the domain. The example builds on
the first example in this section. We repeat the whole code here
for clarity.
a(sro,'col-10') = 2.44 -33*r(sro) ;
a(row,col)$[a(row,col) >= 100] = INF ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
6/38


Note that we have introduced the new set tuple. It is two-
dimensional and contains just four elements. As before, the
parameter a is first assigned values for all its 100 elements. We
then change some of these values using the set tuple as
domain. The values of the elements of the parameter a that are
not elements of the set tuple remain unchanged.
For a more elaborate example involving tuples, see section
Filtering Sets in Assignments.
Issues with Controlling Indices
Attention
The number of controlling indices on the left of the
= sign should be at least as large as the number of
indices on the right. There should be no index on
the right-hand side of the assignment that is not
present on the left unless it is operated on by an
indexed operator. For more on indexed operators,
see section Indexed Operations.
Consider the following statement:
GAMS will flag this statement as an error since col is an index
on the right-hand side of the equation but not on the left.
Note that there would be no error here if col were a
singleton set. Since there is only one element in a singleton
set, the intent and behavior is well-defined even when col is
not under control.
sets  row            / r-1*r-10 /
      col            / c-1*c-10 /
      sro(row)       / r-7*r-10 / ;
set tuple(row,col)   /r-1.c-1, r-1.c-10, r-10.c-
parameters  r(row)   /r-1*r-7 4, r-8*r-10 5/
            c(col)   /c-1*c-5 3, c-6*c-10 2/;
parameters  a(row,col), b(row,row);
a(row,col)  =  13.2 + r(row)*c(col)  ;
a(tuple(row,col)) = 7 + r(row)*c(col)  ;
a(tuple) = 0.25 * a(tuple)  ;
a(row,'col-2') = 22 - c(col) ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
7/38


Attention
Each set is counted only once to determine the
number of controlling indices. If the intent is for a
set to appear independently more than once within
the controlling domain, the second and subsequent
occurrences of the set should be aliases of the
original set, so that the number of controlling
indices is equal to the number of indices. For
details on aliases, see section The Alias Statement:
Multiple Names for a Set.
Consider the following statement as an illustration:
This statement has only one controlling index, namely row. One
element (on the diagonal of b) is assigned for each element of
row, for a total of 10 assigned values. None of the off-diagonal
elements of b will be changed!
If the intent is to assign values to each element of b, this can be
done by introducing an alias rowp for row and using this alias
in the second index position. There will then be two controlling
indices and GAMS will make assignments over all 100 values of
the full Cartesian product. The following example illustrates
this method:
Expressions
An expression is an arbitrarily complicated specification for a
calculation, with parentheses nested as needed for clarity and
intent. In this section the discussion of parameter assignments
will continue by showing in more detail the expressions that
may be used on the right of the = sign. We will cover standard
b(row,row) = 7.7 - r(row) ;
alias(row,rowp) ;
b(row,rowp) = 7.7 - (r(row) + r(rowp))/2 ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
8/38


arithmetic operations and indexed operations here, and
functions and extended range arithmetic in the next two
sections.
Standard Arithmetic Operations
The standard arithmetic symbols and operations and their
order of precedence are given in Table 1. Note that 1 denotes
the highest order of precedence and 3 denotes the lowest order
of precedence. Parentheses can be used to override the default
precedence order in the usual way. Operators (including
exponentiation) on the same level are evaluated from left to
right.
Operation
Symbol
Order of Precedence
Exponentiation
**
1
Multiplication
*
2
Division
/
2
Addition
+
3
Subtraction
-
3
Table 1: Standard Arithmetic Operations
Note that the full GAMS operator precedence hierarchy also
includes logical operators; it is given in section Mixed Logical
Conditions. Note further that the symbols for addition,
subtraction and multiplication have a different meaning if they
are used in the context of sets. For details see sections Set
Operations and Lag and Lead Operators.
Attention
The operation x**y is equivalent to the function
rPower(x,y) and is calculated internally as 
.
This operation is not defined if  is negative; an
error will result in this case. If the possibility of
negative values for  is to be admitted and the
exponent
is known to be an integer, then the function
power(x,n) may be used.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
9/38


Like many GAMS intrinsic functions, the operation
x**y is not defined for all possible input values.
When evaluating nonlinear functions and operators
GAMS guards against evaluating at or very near
singular points and in such cases signals an error or
returns an appropriate function value.
Note
As usual, operations within parentheses or brackets
are evaluated before other numerical calculations,
where the innermost parentheses are resolved first.
Any of the pairs (), [] and {} are allowed.
Consider for example:
For clarity, this could have been written as follows:
In both cases the result is 41.
Note
It is often better to use parentheses than to rely on
the order of precedence of operators, since this
prevents errors and clarifies intentions.
Note that expressions may be freely continued over many lines:
an end of line is permissible at any point where a blank may be
used. Blanks may be used for readability around identifiers,
parentheses and operation symbols. Blanks are not allowed
within identifiers or numbers, and are significant inside the
quotes used to delimit labels.
x = 5 + 4*3**2;
x = 5 + (4*[3**2]) ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
10/38


Indexed Operations
In addition to the simple operations in Table 1, GAMS also
provides the following six indexed operations.
Operation
Keyword
Summation
sum
Product
prod
Minimum value
smin
Maximum value
smax
Conjunction
sand
Disjunction
sor
Table 2: Indexed Operations
These six operations are performed over one or more
controlling indices. The syntax in GAMS for these operations is:
Indexed_op is one of the four keywords for indexed
operations, index_list is the list of the controlling indices
and expression is the expression to be evaluated. If there is
only one controlling index, the parentheses around it may be
removed. Consider the following simple example adapted from
[ANDEAN]:
The index over which the summation is done, i, is separated
from the reserved word sum by a left parenthesis and from the
data term capacity(i,m) by a comma. The set i is called the
controlling index for this operation. The scope of the control is
the pair of parentheses () that start immediately after the
indexed_op( (index_list), expression);
sets i   plants  / cartagena, callao, moron /
     m   product / nitr-acid, sulf-acid, amm-sul
parameter capacity(i,m) capacity in tons per day
          totcap(m)     total capacity by proces
totcap(m) = sum(i, capacity(i,m));
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
11/38


sum. Note that using normal mathematical representation the
last line could be written as: 
.
It is also possible to sum simultaneously over the domain of
two or more sets as in the first assignment that follows. The
second assignment demonstrates the use of a less trivial
expression than an identifier within the indexed operation.
The equivalent mathematical forms are:
Note that the following alternative notation may be used for
the first assignment above:
In the context of sets the sum operator may be used to compute
the number of elements in a set and for projections. For details
see section Projection and Aggregation of Sets.
The smin and smax operations are used to find the largest and
smallest values over the domain of the index set or sets. The
index for the smin and smax operators is specified in the same
manner as in the index for the sum operator. In the following
example we want to find the largest capacity:
Attention
The indexed operations smin and smax may be
used in equation definitions only if the
corresponding model is of type DNLP. For more on
GAMS model types, see GAMS Model Types.
count = sum((i,j), a(i,j)) ;
emp = sum(t, l(t)*m(t)) ;
count = sum(i, sum(j, a(i,j)));
lrgunit = smax((i,m),capacity(i,m));
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
12/38


Note
In the context of assignment statements, the
attributes of variables and equations (e.g.
x.up(i,j)) may be used in indexed
operations just as scalars and parameters are
used. For more on variable and equations
attributes, see sections Variable Attributes
and Equation Attributes respectively.
In the context of equation definitions, scalars,
parameters and variables may appear freely
in indexed operations. For more on equation
definitions, see section Defining Equations.
Sometimes it is necessary to restrict the domain of indexed
operations. This may be done with the same techniques as in
indexed assignments, see section Restricting the Domain in
Assignments for details. See also section Conditional Indexed
Operations for more details on conditions in the context of
indexed operations.
We now turn to two additional capabilities that are available in
GAMS to add power and flexibility to expression calculations:
functions and extended range arithmetic.
Functions
Functions play an important role in the GAMS language,
especially for nonlinear models. Like other programming
languages, GAMS provides a number of built-in or intrinsic
functions. GAMS is used in an extremely diverse set of
application areas and this creates frequent requests for the
addition of new and quite sophisticated or specialized
functions. There is a trade-off between satisfying these
requests and avoiding a complexity not needed by most users.
The GAMS Function Library Facility provides the means for
managing this trade-off, see subsection Extrinsic Functions
below.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
13/38


Intrinsic Functions
GAMS provides many functions, ranging from commonly used
standard functions like exponentiation, logarithms, and
trigonometric functions to utility functions for controlling and
querying the running GAMS job or process. The complete list of
available functions is given in the following tables:
Mathematical Functions, String Manipulation Functions, Logical
Functions, Time and Calendar Functions, and GAMS Utility and
Performance Functions. For details specific to using these
functions in equations, see the section on Expressions in
Equation Definitions.
Some of the tables that follow contain an endogenous
classification column "End. Classif." that specifies in which
models the function may legally appear. In order of least to
most restrictive, the choices are DNLP, NLP, any, none. See
section Classification of Models for details on model types in
GAMS. Note well: functions classified as any are only permitted
with exogenous (constant) arguments.
Functions are typically used in assignment statements and
equations. In these cases, they are only evaluated at execution
time. Some functions can also be used at compile time, e.g. to
compute the factorial or square root of a scalar. Some of the
tables below contain a column "Compile Time" indicating which
functions can be used at compile time.
A word on the notation in the tables below: for function
arguments, lower case indicates that an endogenous variable is
allowed. For details on endogenous variables, see section
Functions in Equation Definitions. Upper case function
arguments indicate that a constant is required. Arguments in
square brackets may be omitted: the default values used in
such cases are specified in the function description provided.
Mathematical Functions
Mathematical functions may be used as expressions in
assignment statements and in equation definitions. We start
with some simple examples to illustrate. A list with all
mathematical functions available in GAMS is given in Table 3.
Exp(x)
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
14/38


The GAMS function exp(x) returns the exponential 
 of its
argument. The assignments above set 
 and 
respectively.
Log(x)
The GAMS function log(x) returns the natural logarithm of its
argument. The assignment above evaluates the logarithm once
for each element of the controlling domain j.
Max(x1,x2,x3,...)
The function max returns the maximum of a set of expressions
or terms. In the assignment above, x will be assigned the
maximum of 
, , and 
.
Round(x[,DECPL])
The function round rounds its argument x to the specified
number DECPL of places, where positive values of DECPL
indicating rounding to the right of the decimal point. If the
argument DECPL is not specified, it defaults to zero, and the
function rounds its argument to the nearest integer value. For
example,
In the first assignment q is rounded to the nearest integer
value, while in the second q is rounded to the number of
decimals specified by d. The result of the third assignment is
12.43, while the final assignment results in a value of 520.
a = exp(t);
b = exp(t+2);
z(j) = log(y(j));
x = max(y+2, t, t*t);
x = round(q);
y = round(q,d);
z = round(12.432,2);
h = round(515.5,-1);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
15/38


Table 3: Mathematical Functions
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
16/38


Function
Description
abs(x)
Absolute value of the argu
arccos(x)
Inverse cosine of the argu
and 1 and the output is in
arcsin(x)
Inverse sine of the argume
and 1 and the output is in
arctan(x)
Inverse tangent of the arg
output is in radians, see M
arctan2(y,x)
Four-quadrant arctan func
the vector 
 makes w
beta(x,y)
Beta function: 
betaReg(x,y,z)
Regularized beta function
binomial(n,k)
(Generalized) Binomial coefi
ceil(x)
Ceiling: returns the smalle
centropy(x,y[,Z])
Cross-entropy: 
Default 
cos(x)
Cosine of the argument ,
cosh(x)
Hyperbolic Cosine of , w
cvPower(X,y)
Real power: 
div(dividend,divisor)
Returns 
, but undefi
div0(dividend,divisor)
Returns 
, but 
eDist(x1[,x2,x3,...])
Euclidean or L-2 Norm: 
entropy(x)
Entropy: 
errorf(x)
Integral of the standard n
: 
.
execSeed
Reads or resets the seed f
Note that the state of the 
seed value; in such cases 
seed from the RNG, resett
seed.
exp(x)
Exponential of : 
, see M
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
17/38


fact(N)
Factorial of 
, where 
floor(x)
Floor: greatest integer less
frac(x)
Returns the fractional par
gamma(x)
Gamma function : 
gammaReg(x,a)
Lower Incomplete Regular
GammaRegularized[a,0
log(x)
Natural logarithm: logarith
logBeta(x,y)
Log Beta function: 
logGamma(x)
Log Gamma function as di
logit(x)
Logit Transformation: 
log10(x)
Common logarithm: logari
log2(x)
Binary logarithm: logarith
lseMax(x1[,x2,x3,...])
Smoothed Max via the Log
, see W
lseMaxSc(T,x1[,x2,x3,...])
Scaled smoothed Max via 
lseMaxSc(T,x) = lseM
lseMin(x1[,x2,x3,...])
Smoothed Min via the Log
,
lseMinSc(T,x1[,x2,x3,...])
Scaled smoothed Min via t
lseMinSc(T,x) = lseM
max(x1,x2,x3,...)
Maximum value of the arg
may vary.
min(x1,x2,x3,...)
Minimum value of the argu
may vary.
mod(x,y)
Remainder of  divided by
ncpCM(x,y,Z)
Chen-Mangasarian smoot
ncpF(x,y[,Z])
Fisher-Burmeister smooth
Default 
.
ncpVUpow(r,s[,μ])
NCP Veelken-Ulbrich (smo
Default 
.
ncpVUsin(r,s[,μ])
NCP Veelken-Ulbrich (smo
Default
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
18/38


Default 
.
normal(MEAN,STDDEV)
Generate a random numbe
MEAN and standard deviat
pi
Value of 
poly(x,A0,A1,A2[,A3,...])
Returns 
, where the p
.
power(x,Y)
Returns 
, where 
 mus
randBinomial(N,P)
Generate a random numbe
is the number of trials and
see MathWorld
randLinear(LOW,SLOPE,HIGH)
Generate a random numbe
distribution, SLOPE must 
randTriangle(LOW,MID,HIGH)
Generate a random numbe
distribution, MID is the mo
round(x[,DECPL])
Round  to DECPL decima
rPower(x,y)
Returns 
operation x**y, see Stand
sigmoid(x)
Sigmoid: 
, see Math
sign(x)
Sign of : 
signPower(x,Y)
Signed power: 
sin(x)
Sine of the argument , w
sinh(x)
Hyperbolic sine of , whe
slexp(x[,S])
Smooth (linear) exponent
where 
. Default 
sllog10(x[,S])
Smooth (linear) logarithm
.
slrec(x[,S])
Smooth (linear) reciprocal
. Default 
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
19/38


sqexp(x[,S])
Smooth (quadratic) expon
Default 
.
sqlog10(x[,S])
Smooth (quadratic) logari
Default 
.
sqrec(x[,S])
Smooth (quadratic) recipr
where 
. Default
sqr(x)
Square of argument .
sqrt(x)
Square root of , see Math
tan(x)
Tangent of the argument 
MathWorld
tanh(x)
Hyperbolic tangent of , w
trunc(x)
Truncation: returns the int
uniform(LOW,HIGH)
Generates a random numb
LOW and HIGH, see MathW
uniformInt(LOW,HIGH)
Generates an integer rand
distribution whose outcom
inclusive, see MathWorld
vcPower(x,Y)
Returns 
 for 
. 
String Manipulation Functions
GAMS provides some string manipulation capability by
extending the card and ord operators to work on strings as well
as sets. In Table 4 the extended behavior is described. In this
context, the functions take strings and places as arguments,
and the numeric places argument must be a constant. This
behavior only applies to execution-time usage of these
functions.
Table 4: String Manipulation Functions
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
20/38


Function
Description
card(STRING)
Returns the number of
characters in the string.
ord(STRING[,PLACE])
Returns the ASCII code number
of a character in a position in a
string. The optional place
entry defaults to 1 if omitted and
identifies the character position
within the string to be
examined (1 for the first, 2 for
the second, etc.)
There are four types or sources of strings in this context. A
string may be a string literal, i.e. a concatenation of letters and
blanks as in "drink it" in the example that follows. It may be
the symbol text (aka the explanatory text) associated with any
symbol. Or it may be the labels or text associated with the
elements of a set. The following table gives an overview:
Table 5: String Types
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
21/38


Notation
Description
Comments
characters
A concatenation
of characters and
blanks: all legal
GAMS characters
are allowed, see
section Characters
for details.
The characters
must be
surrounded by
double or single
quotes.
symbol_name.ts
The string is the
explanatory text
associated with a
symbol name.
If the
explanatory text
is missing, the
value of card is
0.
set_name.tl
The string is the
label for a set
element.
This string type
may be used
only when
set_name is part
of the controlling
domain.
set_name.te
The string is the
explanatory text
associated with a
set element.
This string type
may be used
only when
set_name is part
of the controlling
domain. If the
explanatory text
is missing, the
value of card is
0.
The string types are illustrated in the following example. Note
that the directive in the first line activates the end-of-line
comment option, see eolCom.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
22/38


Note that the strings teas.tl and teas.te are used in the
context of a loop statement (see section The Loop Statement).
This is a typical usage pattern.
Logical Functions
Logical functions may be used as expressions in assignment
statements as in the following example.
Here 
 if 
, otherwise 
.
The logical functions available in GAMS are given in Table 6.
Note that logical functions may also be used in conditions and
logic equations, see sections Logical Conditions and Logic
Equations respectively. Most of the logical functions can also
be indicated using the familiar operator notation, e.g. (x and y),
(x >= y), etc. In such cases, the operator notation is allowed at
compile time. The last column in Table 6 indicates if a logical
function can be used at compile time (yes) or if only its
alternative notation is available (alt). Further, note that the
inputs and outputs of these functions are often
logical/Boolean values, so GAMS does implicit conversions as
necessary. As expected, false becomes 0 and true becomes 1
when converting logical values to numeric, and 0 becomes false
and nonzero becomes true when numeric values are converted
to logicals. For details on behavior when the inputs are special
values, see sections Extended Range Arithmetic and Acronym
$oneolcom
variable z 'any symbol can have explanatory text
set teas "teas available to order"  / black "Eng
scalar p;
p = card("drink it");      !! result: p=8
p = card(z.ts);            !! result: p=36
p = card(teas.ts);         !! result: p=23
loop{teas,
    p = card(teas.tl)      !! length of set elem
    display "length of set element label", p;
    p = card(teas.te)      !! length of set elem
    display "length of set element explanatory t
};
x = ifthen(tt=2, 3, 4+y);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
23/38


Usage, but note that EPS, +INF, -INF, and acronyms become
true when converted to logicals.
Table 6: Logical Functions
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
24/38


Function
Alternative
Notation 1
Alternative
Notation 2
bool_and(x,y)
x and y
bool_eqv(x,y)
x eqv y
x <=> y
bool_imp(x,y)
x imp y
x -> y
bool_not(x)
not x
bool_or(x,y)
x or y
bool_xor(x,y)
x xor y
ifThen(cond,iftrue,else)
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
25/38


rel_eq(x,y)
x eq y
x = y
rel_ge(x,y)
x ge y
x >= y
rel_gt(x,y)
x gt y
x > y
rel_le(x,y)
x le y
x <= y
rel_lt(x,y)
x lt y
x < y
rel_ne(x,y)
x ne y
x <> y
Time and Calendar Functions
GAMS offers several functions that relate to time and dates. The
fundamental measurement of time in GAMS is the serial day
number beginning with January 1, 1900. This serial day number
is a real number whose integer part contains a unique number
for each day and whose fractional part contains information
about hours, minutes, and seconds. We can think of the serial
day number as being a date.time pair. The day information
extracted from serial day numbers is based on the Gregorian
calendar.
Note
In all functions given in Table 7, serial day 1 is
January 1, 1900.
All of the functions in Table 7 can be used at compile time.
Table 7: Time and Calendar Functions
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
26/38


 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
27/38


Function
Description
End.
Classif.
gday(SDAY)
Returns Gregorian
day from a serial
day number
date.time.
any
gdow(SDAY)
Returns Gregorian
day of week from a
serial day number
date.time.
any
ghour(SDAY)
Returns Gregorian
hour of day from a
serial day number
date.time.
any
gleap(SDAY)
Returns 1 if the
year that
corresponds to a
serial day number
date.time, is a
leap year, else
returns 0.
any
gmillisec(SDAY)
Returns Gregorian
milli second from a
serial day number
date.time.
any
gminute(SDAY)
Returns Gregorian
minute of hour
from a serial day
number
date.time.
any
gmonth(SDAY)
Returns Gregorian
month from a serial
day number
date.time.
any
gsecond(SDAY)
Returns Gregorian
second of minute
from a serial day
number
date.time.
any
gyear(SDAY)
Returns Gregorian
year from a serial
day number
any
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
28/38


date.time.
jdate(YEAR,MONTH,DAY)
Returns a serial
day number.
any
jnow
Returns the current
time as a serial day
number.
none
jstart
Returns the time of
the start of the
GAMS job as a
serial day number.
none
jtime(HOUR,MIN,SEC)
Returns fraction of
a day that
corresponds to
hour, minute and
second.
any
GAMS Utility and Performance Functions
GAMS provides several functions that may be used to get (and
in some cases set) GAMS system information, for example:
Table 8: GAMS Utility and Performance Functions
scalar o;
o = heapLimit;
heapLimit = 1024;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
29/38


Function
Description
En
Cla
embeddedHandle
Returns the
handle for
the last
embedded
code section
executed, see
section
Syntax in
chapter
Embedded
Code Facility
for details.
no
errorLevel
Return code
of the most
recently used
command.
no
execError
Get or set the
number of
execution
errors.
no
gamsRelease
Returns the
release
number of
the running
GAMS system,
for example
24.7.
no
gamsVersion
Returns the
version
number of
the running
GAMS system,
for example
247.
no
handleCollect(HANDLE)
Tests if the
solve of the
model
instance
identified by
the calling
argument
HANDLE is
no
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
30/38


HANDLE is
done: if so, it
loads the
solution into
GAMS. For
details, see
Table 1 in
section Grid
Computing.
handleDelete(HANDLE)
Deletes the
model
instance
identified by
HANDLE. For
details, see
Table 1 in
section Grid
Computing.
no
handleStatus(HANDLE)
Tests if the
solve of the
model
instance
identified by
HANDLE is
done: if so, it
loads the
solution into
a GDX file. For
details, see
Table 1 in
section Grid
Computing.
no
handleSubmit(HANDLE)
Resubmits
the model
instance
identified by
HANDLE for
solution. For
details, see
Table 1 in
section Grid
Computing.
no
heapFree
Get the
amount of
free memory
in the heap in
no
Extrinsic Functions
Using the GAMS Function Library Facility, functions may be
imported from an external library into a GAMS model. Apart
from the import syntax, the imported functions may be used in
the same way as intrinsic functions. In particular, they may be
used in equation definitions. Some function libraries are
included with the standard GAMS software distribution, but
GAMS users can also create their own libraries using an open
programming interface. The GAMS Test Library instances
[TRILIB01], [TRILIB02], [TRILIB03], and [CPPLIB00] are simple
examples (in the programming languages C, Delphi, Fortran and
C++, respectively) that come with every GAMS system.
For details on using and creating extrinsic function libraries,
and on the extrinsic function libraries that are provided with
GAMS, see the chapter on Extrinsic Functions.
Function Suffixes
Up to this point, this section has described and discussed
functions without mentioning their derivatives. These
derivatives are very important, though: most of the nonlinear
solvers integrated with GAMS will require first derivatives to
solve models, and many will also use or require second
derivatives as well. It is sometimes useful (e.g. when testing an
extrinsic function) to evaluate the derivatives of GAMS
functions instead of the functions themselves. This can be
done via function suffixes.
Function suffixes can specify the evaluation of a gradient (i.e.
first derivative), a Hessian (i.e. second derivative), a minimum
or maximum value of the function over a given range, or the
minimum or maximum value of the gradient over a given range.
A full list of function suffixes is given in Table 9. For functions
whose arguments are constant, the derivatives are zero, so
typically func is a mathematical function listed in Table 3
above. Note that function suffixes are not defined for functions
without arguments (for example, pi), so specifying something
like pi.grad results in a compilation error.
Table 9: Function Suffixes
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
31/38


MB, i.e.
memory
allocated to
the process
and available
for future use
by GAMS.
heapLimit
Get or set the
current heap
limit
(maximum
allowable
dynamic
memory
usage) in Mb.
no
heapSize
Get the
current heap
size in Mb.
no
jobHandle
Returns the
process ID (
PID) of the
last job
started.
no
jobKill(PID)
Sends a kill
signal to the
job with
process ID
PID. The
return value
is 1 if this was
successful, 0
otherwise.
no
jobStatus(PID)
Get the
status of the
job with
process ID
PID. Possible
return values
are:
    0: error
(input is not
a valid PID or
access is
denied)
    1: process
no
Function Suffix
Description
func.value(x)
Value of the function func at x,
equals func(x).
func.grad(x)
Value of the gradient of the
function func at x.
func.gradn(x)
Value of the gradient of the
function func at x, computed
numerically.
func.hess(x)
Value of the Hessian of the
function func at x.
func.hessn(x)
Value of the Hessian of the
function func at x, computed
numerically.
func.low(x1:x2)
Lower bound of the function
func(x) on the interval [x1,x2].
func.high(x1:x2)
Upper bound of the function
func(x) on the interval [x1,x2].
func.gradL(x1:x2)
Lower bound of the gradient of the
function func(x) on the interval
[x1,x2].
func.gradH(x1:x2)
Upper bound of the gradient of the
function func(x) on the interval
[x1,x2].
Consider the following simple example:
For univariate functions like sine or cosine, there is no need to
specify a variable index when evaluating derivatives. For
multivariate functions, the default is to take partial derivatives
w.r.t. the first variable. To specify other variables, the colon
syntax in the example below is used.
scalars g, l, h, gl, gh;
g  = sin.grad(0);
l  = sin.low(pi/3:pi/2);
h  = sin.high(pi/3:pi/2);
gl = sin.gradL(pi/3:pi/2);
gh = sin.gradH(pi/3:pi/2);
display g, l, h, gl, gh;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
32/38


is still
running
    2: process
is finished
with return
code which
could be
accessed by
errorlevel
    3: process
not running
anymore or
was never
running, no
return code
available
jobTerminate(PID)
Sends an
interrupt
signal to the
job with
process ID
PID. The
return value
is 1 if this was
successful, 0
otherwise.
no
licenseLevel
Get an
indicator for
the type of
license:
    0: demo
license,
limited to
small models
    1: full
unlimited
developer
license
    2: run time
license, no
new variables
or equations
can be
introduced
besides those
inherited
from a work
an
For more examples, see model [FUNCS4] in the GAMS Test
Library.
Note
The function suffixes value, grad, gradn,
hess and hessn are also defined for extrinsic
functions. When implementing an extrinsic
function, be aware that missing derivatives
will be computed numerically: see model
[TRILIB01] for an example.
To compute derivatives numerically, GAMS uses finite difference
approximations. This computation can be controlled with two
options: the FDOpt option controls which variant of the finite
difference method is used, while the FDDelta option controls
the step size.
scalars
  x   / 1 /
  ylo / -1 /
  yup / 2 /
  e0, e1, elo, ehi
  e_1, e_2
  e_11, e_22, e_21
  ;
e0 = edist(x,ylo);
e1 = edist(x,yup);
elo = edist.low (x,ylo:x,yup);
ehi = edist.high(x,ylo:x,yup);
e_1 = edist.grad(x,yup);
* e_1 = edist.grad(1:x,yup);  same as above
e_2 = edist.grad(2:x,yup);
e_11 = edist.hess(x,yup);
* e_11 = edist.hess(1:1:x,yup);  same as above
e_22 = edist.hess(2:2:x,yup);
e_21 = edist.hess(2:1:x,yup);
display x, ylo, yup, e0, e1, elo, ehi, e_1, e_2,
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
33/38


from a work
file
    3:
application
license, only
works with a
specific work
file which is
locked to the
license file
    5:
community
license,
limited to
somewhat
bigger
models
compared to
demo license.
licenseStatus
Returns non-
zero if a
license error
has occurred.
an
mapVal(x)
Returns an
integer value
that indicates
what special
value (if any)
is stored in
the input .
Possible
results:
    0:  is not
a special
value
    4:  is
UNDF
(undefined)
    5:  is NA
(not
available)
    6:  is INF
( 
)
    7:  is -INF
( 
)
    8:  is EPS
    >8:  is an
an
Extended Range Arithmetic and
Error Handling
GAMS uses an extended range arithmetic to handle missing
data, the results of undefined operations, infinite values, and
zeros that are stored explicitly. The special values used in this
arithmetic are listed and described in Table 10 below, along
with the value of the mapVal function that corresponds to
these values. We can think of special values as any value for
which mapVal does not return 0.
Special
value
Description
mapVal
INF
Plus infinity. Similar to IEEE plus
infinity. Behaves in the expected way
in computations, so that e.g.
min(x,INF) = x unless x is also special.
6
-INF
Minus infinity. Similar to IEEE minus
infinity. Behaves in the expected way
in computations, so that e.g.
max(x,INF) = x unless x is also special.
7
NA
Not available - used to indicate
missing data. It is a sticky value: e.g.
max(x,NA) = NA even for x = INF
5
UNDF
Undefined - indicates the result of an
undefined or illegal operation. Similar
to IEEE NaN. A user cannot directly set
a value to UNDF unless the dollar
control option onUNDF is active. For
details, see the chapter on Dollar
Control Options.
4
EPS
A stored zero value. If the dollar
control option onEPS is active, zeros
in a parameter or table statement are
treated as EPS. For details on dollar
control options, see chapter Dollar
Control Options.
8
Table 10: Special Values for Extended Range Arithmetic
Attention
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
34/38


acronym
maxExecError
Get or set the
maximum
number of
execution
errors. See
also
maxExecError.
no
numCores
Get the
number of
logical CPU
cores in the
system
an
platformCode
Returns an
integer
indicating the
current
platform.
Possible
return values
can be seen
here.
an
readyCollect(HANDLES[,MAXWAIT])
Waits until a
model
solution is
ready to be
collected. For
details, see
Table 1 in
section Grid
Computing.
no
sleep(SEC)
Pause or
sleep
execution for
SEC seconds.
no
timeClose
Returns the
accumulated
closedown
time, i.e. the
time GAMS
uses to save
its state to
disk prior to
a solve.
no
Avoid creating or using numbers with very large (
1.0e299 or above) or very small (1.0e-299 or
below) magnitudes. Large numbers may be treated
by GAMS as undefined (UNDF) or other special
values, leading to unpredictable and unusable
results. Always use INF (or -INF) explicitly for
arbitrarily large (or small) numbers.
GAMS has defined the results of all arithmetic operations and
all function evaluations that use these special values. The
behavior is designed to both maximize utility and minimize
surprise, and is illustrated in the library model
[CRAZY]. For example: 1+INF evaluates to INF, 1-EPS to 1, NA *
2 to NA, and EPS*INF to UNDF.
The following table shows a selection of results for
exponentiation and division for a variety of input parameters
including NA and INF.
a
b
a**b
power(a,b)
a/b
2
2
4
4
1
-2
2
UNDF
4
-1
2
2.1
4.28
UNDF
.952
NA
2.5
NA
NA
NA
3
0
1
1
UNDF
INF
2
INF
INF
INF
2
INF
UNDF
UNDF
0
Table 11: Extended Range Arithmetic in Exponentiation and
Division
Note that most extended range identifiers may be used in
assignment statements, as illustrated below.
a(row,'col-3') =  NA;
a(row,'col-4') =  INF;
a(row,'col-5') = -INF;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
35/38


timeComp
Returns the
compilation
time in
seconds.
no
timeElapsed
Returns the
elapsed time
since the
start of a
GAMS run in
seconds.
no
timeExec
Returns the
execution
time in
seconds.
no
timeStart
Returns the
accumulated
startup time,
i.e. the time
GAMS uses to
restore its
state from
disk after a
solve.
no
The values most often used in assignments are NA in
incomplete tables and INF for variable bounds.
The special value EPS is numerically equal to zero, so when
used in the context of numerical comparisons, it behaves as
zero. For example, the logical expressions x > 0 and x > EPS
have the same result. However, EPS is a stored zero, so setting a
parameter to zero (e.g. a(row,col)=0) results in no values
being stored for a, while setting a parameter to EPS (e.g.
a(row,col)=EPS) results in the value EPS being stored for
every (row,col) tuple. This is sometimes useful, especially if
a is used later in loops (see Programming Flow Control
Features) or dollar conditions (see Conditional Expressions,
Assignments and Equations). For example, consider the
statement
In the case where a was originally assigned to be zero, the
dollar-condition is always false so no infinities are assigned. If
a was originally assigned the value EPS, the dollar-condition is
always true and every tuple in a will be set to infinity.
When an attempted arithmetic operation is illegal or has
undefined results because of the value of arguments (division
by zero is the normal example), an error is reported and the
result is set to undefined (UNDF). The error is marked on the
output file with a row of four asterisks '****' making this
sequence a good search target in the editor. GAMS will also
report the line number of the offending statement and give as
much detail as possible about the cause. From there on, the
resulting UNDF is treated as a proper data value and does not
trigger additional error messages. For more on error messages,
see chapter GAMS Output.
Note
GAMS will not solve a model if an error has been
detected, and it will terminate with an error
condition.
a(row,col)$[a(row,col)] = INF ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
36/38


It is therefore wise to anticipate and avoid operations like
division by zero that will cause errors. This is most easily done
with the dollar control, and is discussed in section The Dollar
Condition.
Predefined Symbols
GAMS offers several predefined symbols including: sameAs,
diag, sortedUels, solvers, licenseCodes, and
solverCapabilities. With the exception of sameAs, diag,
and sortedUels these predefined symbols are for very special
(and mostly internal) purposes, but the way they work is
identical.
These symbols can be used in a GAMS program without being
declared but work in an idiosyncratic way. For example, the
complete program
compiles and executes without error and produces the
following result in the listing file:
However, if labels have been declared (in any set) that
corresponds to a solver name, then set solvers will contain
this label. Consider the following example:
Note that Antigone and Baron are the names of solvers in
GAMS and therefore they will be displayed as a member of the
display solvers, sameAs;
----      1 SET Solvers  Available Solvers
                                                
----      1 SET SameAs  Set Element Comparison W
                                                
Set titles / Lord, Baron, Duke /;
Set greeks / Euclid, Pythagoras, Antigone /;
display solvers, sameAs;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
37/38


set solvers. Also note that the set sameAs contains the
diagonal elements for both sets:
User defined symbols can have the same name as a predefined
symbol. In this case the user symbol hides the predefined
symbols as demonstrated in the following example:
The log will only contain the line diag is a set. The test
$if preType diag fails.
The list of all predefined symbols can be retrieved by declaring
and displaying a set using some system data
set pre /system.predefinedSymbols/; display pre;
which results in
Summary
GAMS provides powerful facilities for data manipulation with
parallel assignment statements, built-in functions and
extended range arithmetic.
----      3 SET Solvers  Available Solvers
Baron   ,    Antigone
----      3 SET SameAs  Set Element Comparison W
                  Lord       Baron        Duke  
Lord               YES
Baron                          YES
Duke                                       YES
Euclid                                          
Pythagoras                                      
Antigone                                        
Set diag / 1*3 /;
$if setType diag $log diag is a set
$if preType diag $log diag is a predefined type
----      1 SET pre
SameAs                 ,    Diag                
LicenseCodes           ,    SolverCapabilities  
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Manipulations with Parameters
https://www.gams.com/latest/docs/UG_Parameters.html
38/38


Data Entry: Parameters,
Scalars and Tables
Table of Contents
Introduction
Scalars
The Syntax
An Illustrative Example
Parameters
The Syntax
Illustrative Examples
Parameter Data for Higher
Dimensions
Tables
The Syntax
An Illustrative Example
Continued Tables
Tables with more than Two
Dimensions
Condensing Tables
Handling Long Row Labels
Constant Evaluation
Data Entry by Assignment
Acronyms
The Syntax
Acronym Usage
Summary
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 15:45
Data Entry: Parameters, Scalars and Tables
https://www.gams.com/latest/docs/UG_DataEntry.html
1/19


Introduction
Data handling is of crucial importance in all modeling
applications. The quality of the numbers and the intelligence
with which they are used is likely to be at least as important as
the logic of the model in determining if an application is
successful or not. GAMS has been designed to have a complete
set of facilities for entering information, manipulating it and
reporting on the results. In this chapter we will concentrate on
data entry. Chapter Data Manipulations with Parameters
introduces and discusses data manipulations. For details on
reporting, see chapters GAMS Output, The Display Statement,
The Put Writing Facility, and GAMS Data eXchange (GDX).
One very important principle will motivate all our discussions
on data:
Note
Data should be entered in its most basic form and
each data item should be entered only once.
There are two reasons for adopting this principle. Numbers are
almost certain to change, and when they do we want to be able
to make the process of changing them as easy and safe as
possible. We also want to make our model easy for others to
read and understand. Keeping the amount of data as small as
possible will certainly help. All the data transformations are
shown explicitly in the GAMS representation, which makes it
possible to reproduce the results of a study and shows the
reader all the assumptions made during data manipulation.
Another advantage is that everything needed to run or change
the model is included in one program that can easily be moved
from place to place or from one machine to another.
This chapter deals with the data type parameter. For other data
types, see section Data Types and Definitions. Data for
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Entry: Parameters, Scalars and Tables
https://www.gams.com/latest/docs/UG_DataEntry.html
2/19


parameters can be entered in three basic formats: scalar, list
oriented, or tables of two or more dimensions. For each of
these formats, GAMS offers a separate keyword:
Keyword
Description
Scalar
Single (scalar) data entry.
Parameter
List oriented data, defined over one or more
sets.
Table
Table oriented data, must involve two or more
dimensions.
Table 1: Parameters, Scalars and Tables
Note that the term parameter is used in two ways: as data type
and as keyword, so one could also see scalars and tables as
special formats of parameters. Each of the data input formats
will be introduced and discussed in the following sections. At
the end of the chapter the special data type acronym is
introduced.
Note
By default, parameters in all input formats
may only be initialized once, thereafter data
must be modified with assignment
statements. This can be changed using the
dollar control option $onMulti.
This chapters explains the complete syntax to
declare parameters which includes the
optional initialization. So, while it is possible
to initialize the data at declaration, often the
data is read from other sources like
databases or spreadsheets. More information
about this can be found in the chapter Data
Exchange with Other Applications.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Entry: Parameters, Scalars and Tables
https://www.gams.com/latest/docs/UG_DataEntry.html
3/19


Scalars
The
scalar statement is used to declare and (optionally) initialize
a GAMS parameter of dimensionality zero. This means that
there are no associated sets, so there is exactly one number
associated with the parameter.
The Syntax
In general, the syntax for a
scalar declaration in GAMS is as follows:
The keyword scalar[s] indicates that this is a scalar
statement and scalar_name is the internal name of the scalar
in GAMS, it is an identifier. The optional explanatory text is used
to describe the scalar and the optional numerical_value is
assigned to be the value of scalar_name. Numerical_value
can be given as fixed number or as constant evaluation.
Alternatively, the special data type acronym may be used as
value. For details on acronyms, see section Acronyms.
Note that more than one scalar may be declared in one scalar
statement. The entries have to be separated by commas or by
end of line. For advice on explanatory text and how to choose a
scalar_name, see the tutorial Good Coding Practices.
Note that scalars may be declared but not initialized in the
scalar statement. A value can also be assigned later as
illustrated in the example that follows.
An Illustrative Example
An example of a scalar definition
in GAMS is shown below.
scalar[s] scalar_name [text] [/numerical_value/]
       {  scalar_name [text] [/numerical_value/]
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Entry: Parameters, Scalars and Tables
https://www.gams.com/latest/docs/UG_DataEntry.html
4/19


The statement above initializes rho and life, but not irr.
Later on another scalar statement can be used to initialize irr
or an assignment statement could be used to provide the value:
For more on scalar assignments and parameter assignments in
general, see section Data Entry by Assignment.
Parameters
The parameter format
is used to enter list oriented data which can be indexed over
one or several sets.
The Syntax
In general, the syntax for a
parameter declaration in GAMS is as follows:
The keyword parameter[s] indicates that this is a parameter
statement and param_name is the internal name of the
parameter in GAMS, it is an identifier. A parameter may be
defined over one or more sets that may be specified in the
index_list. Note that the specification of the index list in the
declaration is optional. However, mostly it is advisable to
specify it for reasons of clarity and to enable domain checking.
For more on domain checking, see section Domain Checking.
Scalar
    rho  "discount rate"                        
    irr  "internal rate of return"
    life "financial lifetime of productive units
irr  =  0.07;
parameter[s] param_name[(index_list)] [text] [/ 
                                              {,
           {,param_name[(index_list)] [text] [/ 
                                              {,
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Entry: Parameters, Scalars and Tables
https://www.gams.com/latest/docs/UG_DataEntry.html
5/19


The optional explanatory text is used to describe the
parameter.
Parameter initialization requires a list of data elements, each
consisting of a label or label-tuple and a value. Element is an
element of the defining set or - if there is more than one
defining set - a combination of the elements of the defining
sets. The referenced set elements must belong to the set that
the parameter is indexed over. Finally, numerical_value is the
value assigned to the record defined by the set element or
element tuple. It can be given as fixed number or as constant
evaluation. Alternatively, the special data type acronym may be
entered as value. For details on acronyms, see section
Acronyms.
Note
The default value of a parameter is 0.
Slashes must be used at the beginning and end of the list, and
commas must be used if several data elements are listed in one
line. An equals sign or a blank separates the label tuple from its
associated value. A parameter can be defined in a similar
syntax to that used for a set. For advice on explanatory text and
how to choose a parameter name, see the tutorial Good Coding
Practices.
Note
Several parameters may be declared in one
parameter statement.
Illustrative Examples
The following example illustrates the parameter statement. It is
adapted from [MEXSS]. We also show the set definitions
because they make the example clearer. For more on sets
definitions, see chapter Set Definition.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Entry: Parameters, Scalars and Tables
https://www.gams.com/latest/docs/UG_DataEntry.html
6/19


The index specification for the parameter dd means that there
will be a vector of data associated with it, one number
corresponding to every member of the set j. The numbers are
specified along with the declaration in a format very
reminiscent of the way we specify sets: in this simple case a
label followed by a blank separator and then a value. Any of the
legal number entry formats are allowable for the value. For
details on number formats in GAMS, see subsection Numbers.
The default data value is zero. Since monterrey has been left
out of the data list, the value associated with
dd('monterrey') is zero. As with sets, commas are optional
at end of line.
We may also list several data elements on a line, separated by
commas as in the following example:
If a parameter is defined over a set and all elements of the set
are assigned the same value, then the following notation may
be used as a shortcut:
Here set is a reserved word and set_name is the name of the
set as it has been declared in a previous set declaration
statement. Instead of set. one could also use the # sign. The
following artificial example illustrates this notation:
Set i     "steel plants"   / hylsa      monterre
                             hylsap     puebla  
    j     "markets"        / mexico-df, monterre
Parameter
    dd(j) "distribution of demand"
                         /  mexico-df   55,
                            guadalaja   15 /;
Parameter
    a(i)  / seattle  =  350,  san-diego  =  600 
    b(i)  / seattle    2000,  san-diego    4500 
parameter param_name[(set_name)]  [text]  /(#|se
Set        j      /j1, j2/;
Parameter  hh(j)  /set.j 10/
           gg     /#j    10/;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Entry: Parameters, Scalars and Tables
https://www.gams.com/latest/docs/UG_DataEntry.html
7/19


This resolves in
hh('j1') = hh('j2') = gg('j1') = gg('j2') = 10.
Note
By default it is not possible to define an empty
parameter at declaration. This may be changed
using the dollar control option $onEmpty, as shown
in the following example:
That initializes a('seattle') and a('san-diego') to 0. So it
is not the same as this:
Here, a is declared, but not initialized (so, it is not defined yet)
and one would get an error when trying to read it.
Parameter Data for Higher Dimensions
A parameter may have several dimensions. For the current
maximum number of permitted dimensions, see Dimensions.
The list oriented data initialization through the parameter
statement can be easily extended to data of higher
dimensionality. The label that appears on each line in the one-
dimensional case is replaced by a label tuple for higher
dimensions. The elements in the -tuple are separated by
dots (.) just like in the case of multi-dimensional sets.
The following example illustrates the use of parameter data for
higher dimensions:
Set i     / seattle,  san-diego /;
$onEmpty
Parameter
    a(i)  /  /;
Set i     / seattle,  san-diego /;
Parameter
    a(i);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Entry: Parameters, Scalars and Tables
https://www.gams.com/latest/docs/UG_DataEntry.html
8/19


All the mechanisms using asterisks and parenthesized lists that
we introduced in our discussion of sets are available here as
well. For details see section Multi-Dimensional Sets. Below is
an artificial example, in which a very small fraction of the total
data points are initialized. GAMS will mark an error if the same
label combination (or label-tuple) appears more than once in a
data list.
In this example the twelve elements row1.col2 to row1.col7
and row4.col2 to row4.col7 are all initialized at 12, the
single element row10.col10 at 17, and the seven elements
rows1.col10 to row7.col10 at 33. The other 80 elements (out
of a total of 100) remain at their default value, which is 0. This
example shows the ability of GAMS to provide a concise
initialization or definition for a sparse data structure.
Tables
Tabular data can be declared and initialized in GAMS using a
table statement. For two and higher-dimensional parameters
this provides an easier and more concise method of data entry
than the list based approach, since - at least in smaller tables -
each label appears only once.
The Syntax
In general, the syntax for a table declaration in GAMS
is as follows:
Parameter
    salaries(employee,manager,department)
        / anderson  .murphy  .toy          = 600
          hendry    .smith   .toy          = 900
          hoffman   .morgan  .cosmetics    = 800
Set row / row1*row10 /
    col / col1*col10 /;
Parameter
    a(row, col)
        /  (row1,row4) . col2*col7    12
            row10      . col10        17
            row1*row7  . col10        33 /;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Entry: Parameters, Scalars and Tables
https://www.gams.com/latest/docs/UG_DataEntry.html
9/19


The keyword table indicates that this is a table declaration
and table_name is the internal name of the table in GAMS, it is
an identifier. The name of the parameter can be followed by the
index_list. In the index_list the sets are specified over
which the table is defined. Note that the specification of the
index list in the declaration is optional. However, mostly it is
advisable to specify it for reasons of clarity and to enable
domain checking. For more on domain checking, see section
Domain Checking. The optional explanatory text is used to
describe the table, followed by EOL which means "end of line",
a line break. Element is an element of one of the driving sets.
More details follow below. Numerical_value is the value of
the entry associated with the corresponding element
combination. It can be given as fixed number or as constant
evaluation. Alternatively, the special data type acronym may be
used as value. For details on acronyms, see section Acronyms.
For advice on explanatory text and how to choose a
table_name, see the tutorial Good Coding Practices.
Attention
By default, the table statement is the only
statement in the GAMS language that is not free
format. This may be changed using the dollar
control option $onDelim.
The following rules apply:
The relative positions of all entries in a table are
significant. This is the only statement where end of line
(EOL) has meaning. The character positions of the
numeric table entries must overlap the character
positions of the column headings.
The column section has to fit on one line.
The sequence of values forming a row must be on the
same line.
The element definition of a row can span more than one
line.
table table_name[(index_list)]  [text] [EOL
                element               { element 
  element    numerical_value       { numerical_v
 {element    numerical_value       { numerical_v
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Entry: Parameters, Scalars and Tables
https://www.gams.com/latest/docs/UG_DataEntry.html
10/19


A specific column can appear only once in the entire
table.
The rules for building simple tables are straightforward. The
components of the header line are
Note that the index_list and the text are optional.
Labels are used on the top and the left to map out a
rectangular grid that contains the data values. The order of
labels is unimportant, but if domain checking has been
specified (i.e. the index_list has been given in the first line of
the table declaration) each label must match one in the
associated set. Labels must not be repeated, but can be left out
if the corresponding numbers are all zero or not needed. At
least one blank must separate all labels and data entries. Blank
entries imply that the default value (zero) will be associated
with that label combination.
Note
Tables must have at least two dimensions.
For the current maximum number of
permitted dimensions, see Dimensions.
The table statement can also be terminated
with a ; in the first line, so without entering
data. In this case the parameter table_name
would be declared but not initialized.
In contrast to the set, scalar, and
parameter statements, only one identifier
may be initialized in a table statement,
though multiple ones could be declared.
An Illustrative Example
In the following example a simple table is presented. It is
adapted from
[KORPET], the relevant set definitions are also given.
keyword - identifier - index_list - text
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Entry: Parameters, Scalars and Tables
https://www.gams.com/latest/docs/UG_DataEntry.html
11/19


In this example the row labels are drawn from the set m and
those on the column from the set i. Note that the data for each
row is aligned under the corresponding column headings.
Entries that are not specified are assigned the default value
zero.
Note
If there is any uncertainty about which column a
number belongs to, GAMS will protest with an error
message and mark the ambiguous entry.
Attention
Special care has to be taken, if tabs are used. The
GAMS command line option TabIn controls the tab
spacing. Note that this spacing might be different
form the spacing that the editor is showing, hence
the visible alignment might be different from the
alignment that GAMS is actually using.
Continued Tables
If a table has too many columns to fit nicely on a single line,
then the columns that don't fit may be continued on additional
lines. We use the same example to illustrate:
Set i   "plants"
        / inchon, ulsan, yosu /
    m   "productive units" 
        / atmos-dist   "atmospheric distillation
          steam-cr     "steam cracker"
          aromatics    "aromatics unit"
          hydrodeal    "hydrodealkylator"  /;
Table ka(m,i) "initial cap. of productive units 
                     inchon      ulsan      yosu
    atmos-dist         3702      12910      9875
    steam-cr                       517      1207
    aromatics                      181       148
    hydrodeal                      180
;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Entry: Parameters, Scalars and Tables
https://www.gams.com/latest/docs/UG_DataEntry.html
12/19


The crucial item is the plus '+' sign above
the row labels and to the left of the column labels in the
continued part of the table. The row labels have been
duplicated, except that hydroreal has been left out, since it
does not have any associated data. Tables may be continued as
many times as necessary.
Tables with more than Two Dimensions
Tables may have more than two dimensions. For the current
maximum number of permitted dimensions, see Dimensions.
As usual, dots are used to separate adjacent labels and may be
used in the row or column position. The label on the left of the
row corresponds to the first set in the index list, and that on
the right of each column header to the last. Obviously, there
must be the same number of labels associated with each
number in the table, as there are sets in the index list.
The best layout depends on the size of the defining sets and
the amount of data. It should provide the most intuitively
satisfactory way of organizing and inspecting the data. For most
people it is easier to look down a column of numbers than
across a row. However, putting extra labels on the row has the
advantage of greater density of information.
The following example, adapted from [MARCO], illustrates the
use of tables with more than two dimensions.
Table ka(m,i) "initial cap. of productive units 
                   inchon    ulsan
    atmos-dist     3702      12910
    steam-cr                   517
    aromatics                  181
    hydrodeal                  180
        +          yosu
    atmos-dist     9875
    steam-cr       1207
    aromatics       148
;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Entry: Parameters, Scalars and Tables
https://www.gams.com/latest/docs/UG_DataEntry.html
13/19


The table attrib could also be laid out as shown below:
Condensing Tables
All the mechanisms using asterisks and parenthesized lists that
were introduced in the discussion of sets are available here as
well. For details on these mechanisms, see section Multi-
Dimensional Sets. The following example shows how repeated
columns or rows can be condensed with asterisks and lists in
parentheses. The set membership is not shown, but can easily
be inferred.
Set ci   "commodities :   intermediate"
         / naphtha    "naphtha"
           dist       "distillate"
           gas-oil    "gas-oil"  /
    cr   "commodities :   crude oils"
         / mid-c       "mid-continent"
           w-tex       "west-texas"  /
    q    "attributes of intermediate products"
         / density, sulfur /;
Table attrib(ci, cr, q) "blending attributes"
                          density    sulfur
    naphtha. mid-c         272        .283
    naphtha. w-tex         272       1.48
    dist   . mid-c         292        .526
    dist   . w-tex         297       2.83
    gas-oil. mid-c         295        .98
    gas-oil. w-tex         303       5.05
;
Table attrib (ci,cr,q) "blending attributes"
            w-tex.density  mid-c.density  w-tex.
     naphtha      272             272         1.
     dist         297             292         2.
     gas-oil      303             295         5.
;
Table upgrade(strat,size,tech)
                small.tech1  small.tech2  medium
    strategy-1       .05          .05           
    strategy-2       .2           .2            
    strategy-3       .2           .2            
    strategy-4                                  
Table upgradex(strat,size,tech) "alternative way
                                         tech1*t
    strategy-1.(small,medium)                 .0
    strategy-2*strategy-3.(small,medium)      .2
    strategy-4.medium                         .2
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 15:45
Data Entry: Parameters, Scalars and Tables
https://www.gams.com/latest/docs/UG_DataEntry.html
14/19


Handling Long Row Labels
It is possible to continue the row labels in a table on a second,
or even third line in order to accommodate a reasonable
number of columns. The break must come after a dot, and the
rest of each line containing an incomplete row label-tuple must
be blank.
The following example, adapted from
[INDUS], is used to illustrate. This table actually has nine
columns and many rows, here we have reproduced just a small
part to show continued row label-tuples.
Constant Evaluation
Instead of fixed numerical values, one can also use constant
expressions to assign values to parameters in a data statement.
The syntax of constant expressions used in data statements
follows the GAMS syntax as described in Data Manipulations
with Parameters, but is restricted to scalar values and a subset
of the GAMS intrinsic functions, as summarized below:
Real numbers only
Evaluation left to right
Operator precedence:
^ **
* /
+ - binary and unary
< <= = <> >= > LE LE EQ NE GE GT
NOT
AND
OR XOR EQV IMP
See Functions for list of supported functions
Table yield (c,t,s,w,z) "crop yield (metric tons
                                                
    wheat.(bullock, semi-mech).la-plant.
                                     (heavy, jan
    wheat.(bullock, semi-mech).la-plant. light  
    wheat.(bullock, semi-mech).la-plant. standar
    wheat.(bullock, semi-mech).(qk-harv, standar
                                     (heavy, jan
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Entry: Parameters, Scalars and Tables
https://www.gams.com/latest/docs/UG_DataEntry.html
15/19


When used in a data statement, the constant expressions have
to be enclosed in a pair of square brackets [ ] or curly brackets {
}. Spaces can be used freely inside those brackets. Here is a
little example:
Data Entry by Assignment
Data may also be entered using assignment statements.
Assignments are introduced and discussed in detail in section
The Assignment Statement. This section here is a short outlook
and shows how parameters that have already been declared
may be assigned values. The general assignment statement has
the following form:
Here parameter_name is the name of a parameter that has
been declared previously in a scalar, parameter or table
statement, index_list indicates the controlling indices and
may either contain a set or sets, a label or label tuple or a
combination of those, and expression may be a number, a
numerical expression or an acronym. For details on numerical
expressions, see section Expressions.
The following examples illustrate how assignments may be
used for data entry.
Scalars x "PI half"       / [pi/2] /
        e "famous number" / [ exp( 1 ) ] /;
Parameter y "demo" / USA.(high,low) [1/3]
                     USA.medium {1/4}    /;
parameter_name[(index_list)] = expression;
Set            j       /j1, j2, j3/;
Scalar         a1;
Scalars        a2      /11/;
Parameter      cc(j),
               bc(j)   /j2 22/;
a1 = 10;
a2 = 5;
cc(j) = bc(j)+10;
cc("j1") = 1;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Entry: Parameters, Scalars and Tables
https://www.gams.com/latest/docs/UG_DataEntry.html
16/19


The scalar a1 is declared but not initialized in the first scalar
statement. It is assigned the value of 10 in the first assignment.
The scalar a2 is initialized in the second scalar statement and
this value is changed to 5 in the second assignment. Note that
the original data is not retained. In the parameter statement
the parameter cc(j) is declared but not initialized and the
parameter bc(j) is only initialized for j2. This means that
bc('j2') = 22 and bc('j1') = bc('j3') = 0, the default
value. Now, the third assignment sets the parameter cc(j) and
assigns to all elements of the set j the value of the parameter
bc(j) plus 10. So we have cc('j2') = 32 and
cc('j1') = cc('j2') = 10. Note that in this example the
set j has only three elements so only 3 assignments are made
simultaneously. However, suppose that the number of set
elements is large, say 100,000, then to each element a value is
assigned with just one assignment statement. Finally, the value
of cc('j1') is changed to 1.
Observe that in the examples above assignments either refer to
one specific set element or to the whole set. It is also possible
to make assignments to only a part of the set. The mechanisms
for partial set references are discussed in section Restricting
the Domain in Assignments. Set elements that are not assigned
new values in an assignment with a partial set reference retain
their previous values. Recall that these may be the default
value, values from the parameter or table statement, or values
resulting from previous calculations.
Acronyms
An acronym is a special data type that allows the use of strings
as values. Note that acronyms have no numeric values and are
treated as character strings only.
The Syntax
The declaration for an acronym is similar to a set or parameter
declaration. The basic format is as follows:
Acronym[s]  acronym_name [text] {, acronym_name 
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Entry: Parameters, Scalars and Tables
https://www.gams.com/latest/docs/UG_DataEntry.html
17/19


The keyword acronym[s] indicates that this is an acronym
statement and acronym_name is the internal name of the
acronym in GAMS, it is an identifier. The optional explanatory
text is used to describe the acronym. For advice on explanatory
text and how to choose an acronym_name, see the tutorial
Good Coding Practices.
Note that more than one acronym may be declared in one
acronym statement. The entries have to be separated by
commas or by end of line. A simple example illustrates this:
Acronym Usage
Acronyms may be used as data in scalar, parameter and table
statements. An example for acronyms in a parameter statement
follows.
Acronyms may also be used in assignments as in the example
below. For more on assignments, see section The Assignment
Statement.
Note that numerical operations like addition or subtraction are
not allowed with acronyms. Such operations would be
meaningless since acronyms do not have numeric values.
Another context where acronyms may be used is in logical
conditions. For more on logical conditions, see chapter
Acronym Monday, Tuesday, Wednesday, Thursday, Fr
Set machines / m-1*m-5 / ;
Acronym 
    Monday, Tuesday, Wednesday, Thursday, Friday
Parameter 
    shutdown(machines) 
     /   m-1  Tuesday
         m-2  Wednesday
         m-3  Friday
         m-4  Monday
         m-5  Thursday /;
Acronym Monday, Tuesday, Wednesday, Thursday, Fr
Scalar dayOfWeek;
dayOfWeek = Wednesday;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Entry: Parameters, Scalars and Tables
https://www.gams.com/latest/docs/UG_DataEntry.html
18/19


Conditional Expressions, Assignments and Equations. This is
shown in the following example:
Note that only the equality and inequality operators may be
used with acronyms. Other operations like addition and
division are meaningless since acronyms do not have numeric
values.
Acronyms are specific to GAMS and hence difficult to deal with
when exchanging data with other systems. Users often replace
parameters that contain acronyms with dynamic sets that have
an additional index whose values correspond to the acronyms
found in the original parameter. The machine shutdown data
from above can be represented via a two-dimensional set as
follows:
Summary
In this chapter, the declaration and initialization of parameters
with the Scalar, Parameter, and Table statement have been
discussed. Chapter Data Manipulations with Parameters will
describe how this data can be changed with assignment
statements.
Acronym Monday, Tuesday, Wednesday, Thursday, Fr
Scalar dayOfWeek
       workHours /6/;
dayOfWeek = Wednesday;
workHours$(dayOfWeek <> Friday) = 8;
Set machines / m-1*m-5 / 
    weekdays / Monday, Tuesday, Wednesday, Thurs
    shutdown(machines,weekdays) 
     /   m-1.Tuesday
         m-2.Wednesday
         m-3.Friday
         m-4.Monday
         m-5.Thursday /;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Data Entry: Parameters, Scalars and Tables
https://www.gams.com/latest/docs/UG_DataEntry.html
19/19


Variables
Table of Contents
Introduction
Variable Declarations
The Syntax
Variable Types
Styles for Variable Declaration
Variable Attributes
Bounds on Variables
Fixing Variables
Activity Levels of Variables
Variables in Display and
Assignment Statements
Assigning Values to Variable
Attributes
Variable Attributes in
Assignments
Displaying Variable Attributes
Summary
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 15:45
Variables
https://www.gams.com/latest/docs/UG_Variables.html
1/21


Introduction
This chapter covers the declaration and manipulation of GAMS
variables. Many of the concepts covered in the previous
chapters are directly applicable here.
A variable is the GAMS name for what are called endogenous
variables by economists, columns or activities by linear
programming experts, and decision variables by industrial
Operations Research practitioners. They are the entities whose
values are generally unknown until after a model has been
solved. A crucial difference between GAMS variables and
columns in traditional mathematical programming terminology
is that one GAMS variable is likely to be associated with many
columns in the traditional formulation.
Variable Declarations
A GAMS variable, like all other identifiers, must be declared
before it may be referenced.
The Syntax
The declaration of a variable is similar to a set or
parameter declaration, in that domain lists and explanatory
text are allowed and recommended, and several variables may
be declared in one statement. The syntax is given below.
The keyword var_type denotes the optional variable type that
is explained in detail in the next subsection. Variable[s] is
the keyword that indicates that this is a variable statement.
Var_name is the internal name of the variable in GAMS, it is an
identifier. In the optional index_list the set or sets may be
specified over which an indexed variable is declared. The
[var_type] variable[s] var_name [(index_list)] [
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Variables
https://www.gams.com/latest/docs/UG_Variables.html
2/21


optional explanatory text may be used to describe the variable
for future reference and to ease readability. Specifying variable
data is another optional element in the variable statement.
Variable data allows to initialize variable attributes at compile
time. For an example and details on variable attributes, see
section Variable Attributes.
A typical variable statement adapted from the model
[RAMSEY] is shown below for illustration:
The declaration of k above implies, as usual, that references to
k are restricted to the domain of the set t. A model that
includes k will probably have several corresponding variables
in the associated mathematical programming problem: most
likely one for each member of t. In this way, very large models
can be constructed using a small number of variables. (It is
quite unusual for a model to have as many as 50 distinct
variables.) It is still unclear from the declaration whether
utility is not domain checked or whether it is a scalar
variable, i.e., one without associated sets. Later references will
be used to settle the issue. For more details on domain
checking, see section Domain Checking.
As the syntax indicates, the explanatory text is optional.
However, it is important that variable declarations include
explanatory text and that this be as descriptive as possible,
since the text is used to annotate the solution output. Note the
use of 'per' instead of '/' in the text above: slashes are illegal in
all unquoted text.
Note
Variable names, the contained set element
names plus the explanatory text must obey
the general rules for language items.
Variables can be defined over from 0 up to 20
sets
Variables
   k(t)      capital stock (trillion rupees)
   c(t)      consumption (trillion rupees per ye
   i(t)      investment (trillion rupees per yea
   utility   utility measure;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Variables
https://www.gams.com/latest/docs/UG_Variables.html
3/21


The sets over which variables are declared
indicate that these variables are potentially
defined for every element of the defining
sets. However the actual definition of
variables does not occur until variables
appear in an equation definition where the
equation needs to be part of a model that in
turn occurs in a solve statement.
Variable Types
There are nine basic types of variables that may be used in
variable statements. These are shown in table Table 1.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Variables
https://www.gams.com/latest/docs/UG_Variables.html
4/21


Keyword
Description
Default
Lower
Bound
Default
Upper
Bound
free (default)
No bounds on
variable. Both
bounds may be
changed from the
default values by the
user.
-inf
+inf
positive or
nonnegative
No negative values
are allowed for
variable. The user
may change both
bounds from the
default value.
0
+inf
negative
No positive values
are allowed for
variables. The user
may change both
bounds from the
default value.
-inf
0
binary
Discrete variable
that can only take
values of 0 or 1. For
details see section
Types of Discrete
Variables. In relaxed
Model types the
integrality
requirement is
relaxed.
0
1
integer
Discrete variable
that can only take
integer values
between the bounds.
The user may change
both bounds from
the default value.
The default upper
bound inside GAMS
is +inf but when
the variable is
passed on to the
solver, the option or
0
+inf
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Variables
https://www.gams.com/latest/docs/UG_Variables.html
5/21


command line
parameter IntVarUp
decides what upper
bound (by default
+inf) is passed on
to the solver in case
GAMS has upper
bound +inf. In
relaxed Model types
the integrality
requirement is
relaxed.
sos1
A set of variables,
such that at most
one variable within a
group may have a
non-zero value. For
details see section
Types of Discrete
Variables.
0
+inf
sos2
A set of variables,
such that at most
two variables within
a group may have
non-zero values and
the two non-zero
values are adjacent.
For details see
section Types of
Discrete Variables.
0
+inf
semicont
Semi-continuous,
must be zero or
above a given
minimum level. For
details see section
Types of Discrete
Variables.
1
+inf
semiint
Semi-integer, must
be zero or above a
given minimum level
and integer. For
details see section
Types of Discrete
Variables. The
default upper bound
inside GAMS is +inf
1
+inf
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Variables
https://www.gams.com/latest/docs/UG_Variables.html
6/21


inside GAMS is inf
but when the
variable is passed on
to the solver, the
option or command
line parameter
IntVarUp decides
what upper bound
(by default +inf) is
passed on to the
solver in case GAMS
has upper bound
+inf. In relaxed
Model types the
integrality
requirement is
relaxed.
Table 1: Variable types and default bounds
The default type is free, which means that if the type of the
variable is not specified, it will not be bounded at all. The most
frequently used types are free and positive. The type
positive variables is used for variables for which negative
values are meaningless, such as capacities, quantities or prices.
Note that bounds may be changed using variable attributes
and assignment statements, see section Variable Attributes.
Note
Every optimization model must contain at
least one unrestricted named variable (i.e.
one declared with the keywords Variable or
Free Variable). This variable is the
objective variable. Even an objective variable
can have lower and upper bounds assigned
via the .lo and .up variable attribute.
If a model is unbounded, a frequent cause for
the unboundedness is that the modeler
forgot to make a variable positive.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Variables
https://www.gams.com/latest/docs/UG_Variables.html
7/21


Styles for Variable Declaration
Two styles are commonly used to declare variable types. The
first is to list all variables with domain specifications and
explanatory text as a group, and later to group them separately
as to type. The example shown below is adapted from [MEXSS].
The default type is free, so phi and phipsi will be free
variables in the example below. Note the use of variable names
derived from the original mathematical representation.
The commas in the list of positive variables are required
separators.
Attention
It is possible to declare an identifier more than
once. However, the second and any subsequent
declarations should only add new information that
does not contradict what has already been entered.
The second popular way of declaring variables is to list them in
groups by type. We rewrite the example above using this
second method:
The choice between the two approaches is best based on
clarity.
Variables
    u(c,i)  "purchase of domestic materials (mil
    v(c,j)  "imports            (mill tpy)"
    e(c,i)  "exports            (mill tpy)"
    phi     "total cost         (mill us$)"
    phipsi  "raw material cost  (mill us$)";
Positive Variables  u, v, e;
Free Variables
    phi     "total cost         (mill us$)"
    phipsi  "raw material cost  (mill us$)"
Positive Variables
    u(c,i)  "purchase of domestic materials (mil
    v(c,j)  "imports   (mill typ)"
    e(c,i)  "exports   (mill typ)";
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Variables
https://www.gams.com/latest/docs/UG_Variables.html
8/21


Variable Attributes
While a GAMS parameter has one number associated with each
unique label combination, a variable has several. They
represent:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Variables
https://www.gams.com/latest/docs/UG_Variables.html
9/21


Variable
Attribute
Symbol
Description
Lower
bound
.lo
Lower bound for the variable. Set
by the user either explicitly or
through default values associated
with the variable type.
Upper
bound
.up
Upper bound for the variable. Set
by the user either explicitly or
through default values associated
with the variable type.
Fixed
value
.fx
A fixed value for the variable. If set
it results in the upper and lower
bounds of the variable to be set to
the value of the .fx attribute.
Activity
level
.l
Activity level for the variable, also
the current value or starting point.
This attribute is reset to a new
value when a model containing the
variable is solved. The activity level
is used to construct a basis for the
model.
Marginal
.m
The marginal value (or reduced
cost) for the variable. This attribute
is reset to a new value when a
model containing the variable is
solved. The activity level is used to
construct a basis for the model.
Scale
factor
.scale
Numerical scaling factor for all
coefficients associated with the
variable if the model attribute
scaleopt is set to 1. For more on
scaling, see section Model Scaling -
The Scale Option. Only applicable
for continuous variables.
Branching
priority
.prior
Branching priority value used in
mixed integer programming models
if the model attribute prioropt is
set to 1. For details see section
Setting Priorities for Branching. It
can also be used to relax discrete
restrictions by setting
.prior = +inf regardless of the
prioropt setting. Only applicable
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Variables
https://www.gams.com/latest/docs/UG_Variables.html
10/21


for discrete variables.
Stage
.stage
This attribute allows to assign
variables to stages in a stochastic
program or other block structured
model. Thus, among other places, it
is used for 2-stage stochastic
programs solved with DECIS or the
Benders partition in Cplex.
Table 2: Variable Attributes
Users distinguish between these values when necessary by
appending the suffix to the variable name. Examples are given
below.
It is possible to specify initial values for these variable
attributes at compile time. This can be done within the variable
declaration statement as illustrated in the following example or
during execution time as explained in section Assigning Values
to Variable Attributes.
The upper bound of the variable x1("j1") is set to 10, the
lower bound is set to 5, the starting value for the activity level
is set to 7 and the starting value for the marginal is set to 0. The
variable is also scaled by the factor 20, which means it is
multiplied by 20.
Note that it is also possible to use a table structure to assign
values to variable attributes. The following example is adapted
from model [TRNSPORT].
Note
.fx and attributes .lo and .up on the same
variable cannot be in a data statement. .fx
Variable x1(j) my first  / j1.up 10 , j1.lo 5, j
Variable Table x(i,j) initial values
                            l      m
    seattle.  new-york      50
    seattle.  chicago      300
    san-diego.new-york     275
    san-diego.chicago           0.009;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Variables
https://www.gams.com/latest/docs/UG_Variables.html
11/21


sets both .lo and .up and hence we would
have a double definition of the same
attribute. Since attribute .scale is
applicable for continuous variables and
attribute .prior for discrete variables, they
share the same internal space in a GAMS
variable. Some solvers can make use of
priorities even for continuous variables (e.g.
BARON). Such priorities need to be supplied
via a solver option file.
The attribute .stage uses the same internal
space as .scale and .prior. So a model
cannot specify scale factor and branching
priorities together with stages.
Fixing a semi-continuous or semi-integer
variable to a non-zero value like x.fx = 4
does not result in a truly fixed variable. The
domain of the variable remains {0,4}. To
really fix a semi-continuous or semi-integer
variable, the discrete restriction could be
relaxed by setting the branching priority to
infinity (x.prior=inf).
For variables in discrete models (such as MIP,
MINLP), the .m attribute provides the
marginals obtained by fixing all the discrete
variables and solving the resulting
continuous problem (such as LP, NLP). Many
solvers allow to enable/disable solving such
a fixed problem. When disabled, no marginals
will be provided for discrete models.
In addition to the variable attributes introduced above, there
are a number of variable attributes that cannot be assigned or
exported via execute_unload* but may be used in
computations. They are given in Table 3.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 15:45
Variables
https://www.gams.com/latest/docs/UG_Variables.html
12/21


Variable
Attribute
Symbol
Description
Range
.range
The difference between the
lower and upper bounds for a
variable. It becomes zero if the
lower equals the upper bound,
e.g. if the fx attribute is set.
Slack upper
bound
.slackup
Slack from variable upper
bound. This is defined as the
greater of two values: zero or
the difference between the
upper bound and the level
value of a variable.
Slack lower
bound
.slacklo
Slack from variable lower
bound. This is defined as the
greater of two values: zero or
the difference between the
level value and the lower
bound of a variable.
Slack
.slack
Minimum slack from variable
bound. This is defined as the
minimum of two values: the
slack from the variable lower
bound and the slack from the
variable upper bound.
Infeasibility
.infeas
Amount by which a variable is
infeasible falling below its
lower bound or above its upper
bound. This is defined as the
smallest of three values: zero,
the difference between the
lower bound and the level
value, the difference between
the level value and the upper
bound of a variable, i.e. max(0,
lower-level, level-upper).
Table 3: Additional Variable Attributes that Cannot Be Assigned
but May Be Used in Computations.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Variables
https://www.gams.com/latest/docs/UG_Variables.html
13/21


Bounds on Variables
All default bounds set at declaration time may be changed
using assignment statements.
Attention
For discrete variable types, the consequences of the
type declaration cannot be completely undone (e.g.
the scale attribute is not available) but their value
domain can be changed to continuous by setting
attribute prior to infinity.
Bounds on variables are the responsibility of the user. After
variables have been declared, default bounds have already
been assigned: for many purposes, especially in linear models,
the default bounds are sufficient. In nonlinear models,
however, bounds play a far more important role. It may be
necessary to provide bounds to prevent undefined operations,
such as division by zero. In nonlinear programming it is often
necessary to define a 'reasonable' solution space that will
assist in efficiently finding a solution.
Attention
The lower bound cannot be greater than the upper
bound: if you happen to impose such a condition,
GAMS will generate an execution error, namely
"**** Matrix error - lower bound > upper
bound"
when executing a solve statement.
Note that the upper bound on integer and semi-integer
variables needs special consideration. The default upper bound
is +inf and the option or command line parameter IntVarUp
controls what upper bound is sent to the solver. With the
current default value (0) of IntVarUp, an upper bound of +inf is
sent to the solver. Setting IntVarUp to one will pass 100 as the
default upper bound to the solver. The other available values
for IntVarUp work like zero, but enable special
reports/execution errors in case the solution reports a level
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Variables
https://www.gams.com/latest/docs/UG_Variables.html
14/21


value greater than 100 for any integer variable with a default
bound of +inf.
Fixing Variables
GAMS allows the user to fix variables through the .fx variable
suffix. This is almost equivalent to setting the lower bound and
upper bound equal to the fixed value. The attribute .fx also
resets the activity level .l to the fixed value. When setting .lo
and .up the activity level remains unchanged. A solve
statement will project the activity level within the active
bounds. Fixed variables can subsequently be freed by changing
the lower and upper bounds.
Activity Levels of Variables
GAMS allows the user to set the activity levels of variables
through the .l variable suffix. These activity levels of the
variables prior to the solve statement serve as initial value
for the solver. This is particularly important for nonlinear
programming problems. For discrete models in many cases the
solver needs an additional indicator to interpret the activity
levels as a feasible integer solution via a solver option (e.g.
Cplex' mipstart).
Attention
GAMS only stores variables with non-default
values (similar to storing only non-zero
values of parameters). Non-default variables
can be accidentally created by using
harmlessly looking assignments like
Even if the equations only reference such
variables over a small subset of (i,j,k,l)
this statement creates
card(i)*card(j)*card(k)*card(l)
variable records in the GAMS database. Such
fixings of x(i,j,k,l) to 0 can be avoided by
x.up(i,j,k,l) = 0;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Variables
https://www.gams.com/latest/docs/UG_Variables.html
15/21


using dynamic sets or dollar conditions in the
equation algebra to only reference tuples of
(i,j,k,l) for which x(i,j,k,l) can
possible have a non-zero value.
In order to filter only necessary tuples for an
equation the filtering conditions needs to be
provided only once when defining the
equation (equ(i,j,k)). This is different for
variables because they appear in many
equations and the filtering condition needs
to be potentially repeated many time.
Therefore it is good practice and reduces
GAMS model generation time if the filtering of
the variables is governed by a dynamic set:
versus
Variables in Display and Assignment
Statements
GAMS allows the modeler to use the values associated with the
various attributes of each variable in assignment and display
statements. The next two subsections explain the use of
variables on the left and right-hand sides of assignment
statements respectively. Then we will explain the use of
variables in display statements.
Assigning Values to Variable Attributes
Assignment statements operate on one variable attribute at a
time, and require the suffix to specify which attribute is being
used. Any index list comes after the suffix.
sum((i,j)$(ord(i)>ord(j) and cap(i
set net(i,j); net(i,j) = ord(i)>or
sum(net(i,j), x(i,j))
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Variables
https://www.gams.com/latest/docs/UG_Variables.html
16/21


The following code snippets are from models [MEXSS] and
[RAMSEY]. The first example illustrates the use of assignment
statements to set upper and lower bounds on variables.
A very common use is to bound one particular entry
individually:
Or to put small lower bounds on a variable identifier used as a
divisor in a nonlinear program:
Or to provide initial values for a nonlinear problem:
Remember that the order is important in assignments, and
notice that the two pairs of statements below produce very
different results. In the first case, the lower bound for
c('1985') will be 0.01, but in the second, the lower bound is 1.
Everything works as described in the previous chapter,
including the various mechanisms described there of indexed
operations, dollar operations, subset assignments and so on.
An example from model LOCATION follows.
x.up(c,i,j)  =  1000 ;  phi.lo  =  inf  ;
p.up('pellets', 'ahmsa', 'mexico-df')  = 200  ;
c.lo(t)   =  0.01  ;
c.l(t)   =  4*cinit(t)  ;
c.fx('1985') = 1;               c.lo(t)       = 
c.lo(t)      = 0.01 ;           c.fx ('1985') = 
ship_sm.lo(sl,m)$(ord(sl) = 1 and ord(m) = 1) = 
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Variables
https://www.gams.com/latest/docs/UG_Variables.html
17/21


The lower bound of the variable ship_sm(sl,m) is set to 1 and
this assignment is only valid for ship_sm('s1','d1'), the
realization of the variable where both indices are the first
members of their respective sets.
Variable Attributes in Assignments
Using variable attributes on the right-hand side of assignment
statements is important for a variety of reasons. Two common
uses are for generating reports and for generating initial values
for some variables based on the values of other variables. For
more on variable attributes in report writing, see section
Displaying Variable Attributes below and especially chapter The
Put Writing Facility.
The following examples adapted from model [CHENERY]
illustrate the use of variable attributes on the right-hand side
of assignment statements:
As with parameters, a variable must have some non-default
data values associated with it before it can be used in a
display statement or on the right-hand side of an assignment
statement. After a solve statement has been processed or if
non-default values have been set with an assignment
statement, this condition is satisfied. Solve statements are
introduced and discussed in chapter Model and Solve
Statements.
* initial values for variables
y.l(i) = 250 ; x.l(i) = 200 ;
e.l(t) =   0 ; m.l(t) =   0 ;
g.l(t) = mew(t) + xsi(t)*m.l(t) ;
h.l(t) = gam(t) - alp(t)*e.l(t) ;
[...]
* generating report after solve 
Scalar
    cva   "total value added at current prices"
    rva   "real value added"
    cli   "cost of living index"  ;
cva  =  sum (i, v.l(i)*x.l(i))  ;
cli  =  sum(i, p.l(i)*ynot(i))/sum(i, ynot(i))  
rva  =  cva/cli  ;
Display cli, cva, rva ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Variables
https://www.gams.com/latest/docs/UG_Variables.html
18/21


Attention
The .fx suffix is mostly just a shorthand for .lo
and .up and can therefore only be used only on the
left-hand side of an assignment statement.
Note
In general, the variable level needs to be specified
via the attribute .l for assignment statements.
However, the dollar control option $on/offDotL
allows the implicit use of the attribute .l in
assignment statements, thus it facilitates using the
same algebra in model definitions and assignment
statements. This is especially useful in the context
of macros.
Displaying Variable Attributes
The display statement is introduced and discussed in detail
in chapter The Display Statement. Here we demonstrate how
variable attributes are used in display statements.
Since several values are associated with each variable, the user
must specify which attribute should be displayed when using
variables in display statements. As before, appending the
appropriate suffix to the variable name does this and no
domain specification may appear. As an example, we show how
to display the level of phi and the level and the marginal
values of v from [MEXSS]:
The output looks similar, except that (of course) the listing
shows which of the values is being displayed. Because zeroes,
and especially all zero rows or columns, are suppressed, the
patterns seen in the level and marginal displays will be quite
different, since non-zero marginal values are often associated
with activity levels of zero.
display phi.l, v.l, v.m;
Mexico Steel - Small Static   (MEXSS,SEQ=15)
E x e c u t i o n
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Variables
https://www.gams.com/latest/docs/UG_Variables.html
19/21


We should mention here a clarification of our previous
discussion of displays. It is actually the default values that are
suppressed on display output. For parameters and variable
levels and marginals, the default is zero, and so zero entries are
not shown. For bounds, however, the defaults can be non-zero.
The default value for the upper bound of a positive variable is
+INF, and if we would also display v.up above, for example, we
would see:
If any of the bounds have been changed from the default value,
then only the entries for the changed elements will be shown.
This may sound confusing, but since few users display bounds
it has not proved troublesome in practice.
Note
The attribute .range may be used in display
statements. It provides a convenient way to check
whether a variable is fixed as it lists the 0 values
explicate because the default for range (which
won't be displayed) is +inf.
Summary
Remember that wherever a parameter may appear in a display
or an assignment statement, a variable may also appear -
provided that it is qualified with one of the suffixes. The only
----    203 VARIABLE  PHI.L                =    
                                                
----    203 VARIABLE  V.L           imports
                                    (mill tpy)
                    ( ALL       0.000 )
----    203 VARIABLE  V.M           imports
                                    (mill tpy)
        mexico-df   monterrey   guadalaja
steel       7.018      18.822       6.606
----    203 VARIABLE  V.UP          imports
                                    (mill tpy)
                    ( ALL        +INF )
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Variables
https://www.gams.com/latest/docs/UG_Variables.html
20/21


places where a variable name may appear without a suffix is in
a variable declaration, as has been shown in this chapter, in an
equation definition, which is discussed in chapter Equations, or
in a $on/offDotL block.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:45
Variables
https://www.gams.com/latest/docs/UG_Variables.html
21/21


Equations
Table of Contents
Introduction
Declaring Equations
The Syntax
An Illustrative Example
Defining Equations
The Syntax
An Illustrative Example
Scalar Equations
Indexed Equations
Using Labels Explicitly in
Equations
Logic Equations
Expressions in Equation Definitions
Functions in Equation
Definitions
Preventing Undefined
Operations in Equations
Equation Attributes
Summary and Quick Reference
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 15:46
Equations
https://www.gams.com/latest/docs/UG_Equations.html
1/20


Introduction
The keyword equation defines GAMS names that may be used
in the model statement. A GAMS equation name is associated
with the symbolic algebraic relationships that will be used to
generate the constraints in a model. The algebraic relationships
are defined by using constants, mathematical operators,
functions, sets, parameters and variables. As with variables,
one GAMS equation may be defined over a group of sets and in
turn map into several individual constraints associated with the
elements of those sets. Most of the example code in this
chapter is from the model location.
This chapter is organized as follows. First, we introduce how
equations are declared and defined, then we discuss
expressions in equation definitions, followed by a section on
equation attributes. A summary and quick reference conclude
the chapter.
Declaring Equations
An equation must be declared before it can be defined and
used in a model.
The Syntax
The declaration of an equation is similar to a set or
parameter declaration. The syntax is given below.
Equation[s] is the reserved word that indicates that one or
more blocks of equations are about to be declared. A block of
equations may initiate one or more individual constraints.
Eqn_name is the internal name of the equation, an identifier in
GAMS. In the optional index_list the set or sets are specified
Equation[s] eqn_name [(index_list)] [explanatory
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Equations
https://www.gams.com/latest/docs/UG_Equations.html
2/20


over which an indexed equation is declared. The optional
explanatory text may be used to describe the equation for
future reference and to ease readability. Specifying equation
data is another optional element in the equation declaration.
Equation data allows to initialize equation attributes at
compile time. For an example see the next section. For more on
equation attributes see section Equation Attributes.
One or more equations may be declared in one equation
statement. The equation names have to be separated by
commas or by a line break as in the example that follows. The
end of the declaration statement is indicated by a semicolon.
Note
It is good practice to end the equation declaration
with a semicolon, even though it is not mandatory if
the next statement starts with a GAMS keyword.
For advice on choosing equation names and phrasing the
explanatory text see chapter Good Modeling Practices.
An Illustrative Example
The following example is from the model location. In addition
to the equation declarations the relevant set definitions are
given.
The keyword Equations marks the beginning of the equation
declaration. Each equation name is optionally followed by its
domain (associated set or sets) unless it is a scalar equation. It
is possible but not good practice to declare indexed equations
without their domains. The name of the first equation is
tcost_eq and it is followed by the explanatory text '
total cost accounting equation'. The name of the
Sets
  sl                      'supply locations'    
  wh                      'warehouse locations' 
Equations
  tcost_eq                'total cost accounting
  supply_eq(sl)           'limit on supply avail
  capacity_eq(wh)         'warehouse capacity'  
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Equations
https://www.gams.com/latest/docs/UG_Equations.html
3/20


equation tcost_eq is not followed by any associated sets.
Since we follow good practice here we assume that tcost_eq
is a scalar equation. Scalar equations do not have any
associated sets and will generally produce one equation in the
model. For more on scalar equations see subsection Scalar
Equations.
The other two equations are indexed equations, they are
declared over a set. The equation supply_eq is declared over
the set sl and the equation capacity_eq is declared over the
set wh. In typical circumstances an indexed equation
declaration implies that a block of constraints will be
generated. For example, equation supply_eq(sl) implies that
two constraints will be generated, one for each element of the
set sl. For more on indexed equations see subsection Indexed
Equations.
The declaration of the equation capacity_eq specifies some
equation attributes. The first entry indicates that the equation
capacity_eq('a') is scaled by a factor of 50, which means
division of all entries in that equation by 50 upon model
passage to the solver. For more on scaling see section Model
Scaling - The Scale Option. The second entry sets the initial
value of the equation capacity_eq('a') to 10 and b.m
means that the initial marginal value of the equation
capacity_eq('b') is set to 20. Alternatively, a table structure
may be used to specify the values of equation attributes. The
following table may replace the notation above.
For more on equation attributes see section Equation
Attributes.
Note
An equation may be declared over more than one
set.
Equation Table capacity_eq(wh)  'warehouse capac
      scale    l       m
   a   50      10
   b                   20 ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Equations
https://www.gams.com/latest/docs/UG_Equations.html
4/20


Defining Equations
After declaring equations they have to be defined. The
definition of an equation specifies the algebraic structure of
the equation in GAMS. The syntax is given first, an illustrative
example follows and in the remainder of this section some of
the key components of equation definitions are discussed.
The Syntax
The syntax for defining an equation is as follows:
Eqn_name is the name of the equation as introduced in the
equation declaration, that may be followed by an index_list
for indexed equations. In the index_list the set or sets are
specified over which an indexed equation is defined. These sets
are also called domain of definition of the equation. One or
more logical conditions are optional. For an example see
Indexed Equations. For more on logical conditions in equation
definitions see Dollar Control over the Domain of Definition.
The two dots '..' are mandatory and indicate the start of the
algebra. It is good practice to end the definition of an equation
with a semicolon, even though it is not mandatory if the next
statement starts with a GAMS keyword.
Attention
An equation must be declared before it is defined.
Expression refers to an algebraic expression which may
include variables, parameters, functions, and constants among
other items. For details on expressions in GAMS, see section
Expressions.
Attention
Only variables that appear at least once with a
nonzero coefficient in an equation definition will
appear in a model.
eqn_name(index_list)[$logical_condition(s)].. ex
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Equations
https://www.gams.com/latest/docs/UG_Equations.html
5/20


Eqn_type refers to the equation type denoted by the symbol
between the right-hand side and left-hand side expressions
that form the equation. The symbols that are allowed are given
in Table 1.
Type
Description
=e=
Equality: right-hand side must equal left-hand side.
=g=
Greater than: left-hand side must be greater than or
equal to right-hand side.
=l=
Less than: left-hand side must be less than or equal
to right-hand side.
=n=
No relationship implied between left-hand side and
right-hand side. This equation type is ideally suited
for use in MCP models and in variational
inequalities.
=x=
Equation is defined by external programs. See
External Equations.
=c=
Conic constraint. See Conic Programming in GAMS.
=b=
Boolean equations. See Logic Equations.
Table 1: Equation Types
Equation definitions may be carried over as many lines of input
as needed. Blanks may be inserted to improve readability, and
expressions may be arbitrarily complicated.
Note that an equation can only be defined once. By using
logical conditions it is possible to control which constraints are
generated. In addition, the components of an equation may be
modified by changing the data it uses. However, if the logic of
the equation needs to be changed then a new equation with a
new name has to be declared and defined.
An Illustrative Example
Consider the following example adapted from the model
[mexss]. The associated variable and equation declarations are
also included.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Equations
https://www.gams.com/latest/docs/UG_Equations.html
6/20


The name of the equation being defined is obj and the symbol
=e= indicates that this is an equality. Any of the following forms
of the equation are mathematically equivalent.
Note
The arrangement of the terms in the equation is a
matter of choice, but often a particular one is
chosen because it makes the model easier to
understand.
Scalar Equations
A scalar equation will produce one equation in the associated
optimization problem. The equation obj defined above is an
example of a scalar equation which contains only scalar
variables. Note that scalar equations may contain indexed
variables. However, they must occur with an indexed operator
such as sum or prod, unless the indexed variables refer to a
singleton set (a set with only one element). Consider the
following example from the model location. Note that the set
wh has three elements.
The variable build is defined over the set wh, it is an indexed
variable. It may be used in the scalar equation configure_eq
since it occurs in conjunction with the indexed operator sum.
Variables  phi, phipsi, philam, phipi, phieps ;
Equations  obj ;
obj.. phi  =e=  phipsi + philam + phipi - phieps
obj..  phipsi + philam + phipi - phieps =e= phi 
obj..  phieps - phipsi  =e=  philam - phi + phip
obj..  phi + phieps - phipsi - philam - phipi  =
obj..  0 =e= phi + phieps - phipsi - philam - ph
configure_eq..  sum(wh,build(wh)) =l= 1;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Equations
https://www.gams.com/latest/docs/UG_Equations.html
7/20


Indexed Equations
All the set references in scalar equations are within the scope
of indexed operators or they refer to singleton sets; thus many
variable, set and parameter references can be included in one
equation. In addition, GAMS also allows for equations to be
defined over a domain, thereby developing a compact
representation for constraints. The index sets to the left of '..'
are called the domain of definition of the equation.
Note
Domain checking ensures that the domain
over which an equation is defined is the set
(or the sets) or a subset of the set (or the
sets) over which the equation was declared.
As a corollary, domain checking also catches
the error of the indices being listed in an
inconsistent order. For example, declaring an
equation as myequation(s,t) and then
naming it in the definition as
myequation(t,s) causes an error (unless s
and t are aliases of the same set). For more
information, see section Domain Checking.
The following indexed equation with a single index generates a
separate constraint for each member of the driving (or
controlling) set. It is taken from the model [chenery]. In this
example, t is a set with three members, mew and xsi are
parameters and m and g are variables.
As the set t has three members, three constraints will be
generated, one for each member of t specifying the
dependence of g on m. The data associated with the parameters
mew and xsi are used to build the individual constraints. This
data does not have to be known when the equation is defined,
but it has to be populated before a model containing the
equation is solved.
dg(t)..  g(t)  =e= mew(t) + xsi(t)*m(t)  ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Equations
https://www.gams.com/latest/docs/UG_Equations.html
8/20


The extension to two or more indices on the left of '..' is
obvious. There will be one constraint generated for each
combination of set elements that can be constructed using the
indices inside the parenthesis. Here are two examples from the
model [aircraft], a scheduling model.
The domain of definition of both equations is the Cartesian
product of j and h: constraints will be generated for every set
element pair that can be constructed from the members of
these two sets.
The next example illustrates the use of the optional logical
conditions in the definition of equations. It is taken from the
production and distribution model [ferts].
CC is a capacity constraint defined for elements of the sets m
and i. However, in this case not all cases of m exist at each
location i, and the mapping set mpos(m,i) tells the cases
where m exists at i and thus is used to restrict the domain
cases for which the constraints are actually generated. The
control of the summation over p with ppos(p,i) is an
additional logical condition, and is required because not all
processes p are possible at all locations i.
The equation may alternatively written in the following way:
Instead of defining the equation over the indices (m,i) the
equation is defined over the set mpos that is itself defined over
the indices (m,i). A similar logic applies to restricting the
summation.
Conditional expressions are introduced and discussed in the
section Conditional Expressions, Assignments and Equations.
bd(j,h)..  b(j,h)  =e=  dd(j,h) - y(j,h) ;
yd(j,h)..  y(j,h)  =l=  sum(i, p(i,j)*x(i,j)) ;
CC(m,i)$mpos(m,i)..  sum(p$ppos(p,i), b(m,p)*z(p
CC(mpos(m,i))..  sum(ppos(p,i), b(m,p)*z(p,i)) =
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Equations
https://www.gams.com/latest/docs/UG_Equations.html
9/20


See specifically Dollar Control over the Domain of Definition for
logical conditions in equation definitions.
Using Labels Explicitly in Equations
Sometimes it can be necessary to refer to specific set elements
in equations. This can be done as with parameters - by using
quotes or double quotes around the label. Consider the
following example from the model location:
Logic Equations
Logic equations use Boolean algebra and have to evaluate to
TRUE (or 1) to be feasible. The Boolean functions available in
GAMS and the default order of precedence of the operators are
given in Table 2. Note that 1 denotes the highest order of
precedence or the most binding operator and 3 denotes the
lowest order of precedence or the least binding operators. As
usual, the default order of precedence holds only in the
absence of parentheses and operators on the same level are
evaluated from left to right.
sum(m, ship_wm(wh,m)) =l= build(wh)*data(wh,"cap
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Equations
https://www.gams.com/latest/docs/UG_Equations.html
10/20


Function
Operator
Alternative
Notation
Return
Values
p
Negation
not x
bool_not(x)
returns 1 if
,
else
returns 0
Logical
conjunction
x and y
bool_and(x,y)
returns 1 if
 and
,
else
returns 0
Logical
disjunction
x or y
bool_or(x,y)
returns 0 if
, else
returns 1
Exclusive
disjunction
x xor y
bool_xor(x,y)
returns 1 if
exactly
one
argument
is 
,
else
returns 0
Material
implication
x imp y
or
x -> y
bool_imp(x,y)
returns 0 if
 and
,
else
returns 1
Material
equivalence
x eqv y
or
x <=> y
bool_eqv(x,y)
returns 0 if
exactly
one
argument
is 0, else
returns 1
Table 2: Boolean Functions and Operator Precedence
There are three ways to declare and define logic equations:
1. The logic equation is declared using the keyword
Logic Equation and the definition contains only
Boolean algebra symbols.
2. The logic equation is declared like any other equation
using the keyword Equation and in the definition the
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Equations
https://www.gams.com/latest/docs/UG_Equations.html
11/20


symbol =b= appears indicating that it is a logic equation.
3. This is a combination of the first two options: the
equation is declared with the keyword Logic Equation
and defined using the symbol =b=.
The following example demonstrates the first way to declare
and define a logic equation. It is adapted from the food
manufacturing problem [foodemp]. In this problem the
blending of oils is modeled.
The variable induse is a binary variable, it can only take the
values 0 and 1. The equation ensures that in an optimal
solution if either vegetable oil v1 or vegetable oil v2 is blended
in a product, then non-vegetable oil o3 is also blended in that
product.
An alternative formulation of the equation deflogic using the
=b= notation is given below.
Note that the value of 1 on the right-hand side means that the
logic expression on the left-hand side must evaluate to TRUE in
a feasible solution. To illustrate further, we could negate the
left-hand side expression using the logic operator not and then
the right-hand side would have to evaluate to zero or FALSE to
yield the same result as above. The respective equation
definition follows.
Sets
  m             "planning period (month)"    / m
  p             "raw oils"                   / v
Variables
  induse(m,p)   "indicator for usage of raw oil 
Binary variable induse;
Logic Equation
  deflogic(m)  "if some vegetable raw oil is use
deflogic(m)..  induse(m,'v1') or  induse(m,'v2')
deflogic(m)..  induse(m,'v1') or induse(m,'v2') 
deflogic(m)..  not (induse(m,'v1') or  induse(m,
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 15:46
Equations
https://www.gams.com/latest/docs/UG_Equations.html
12/20


Logic equations with binary variables and boolean
functions/operators are reformulated into linear constraints by
the LOGMip solver using GAMS model type EMP. Solver CONVERT
writes scalar models with logic equations, but no other solver
currently can utilize logic equations. In principle (but currently
not implemented), logic constraints can be used to express
complex algebra, like indicator constraints:
Expressions in Equation Definitions
The arithmetic operators and some of the functions that are
described in section Expressions may be used in equation
definitions.
Consider the following example adapted from the model
[chenery] demonstrating the use of parentheses and
exponentiation.
A list of arithmetic operators is given in subsections Standard
Arithmetic Operations and Indexed Operations.
Functions in Equation Definitions
All available GAMS functions are listed in the section Functions.
Some functions are not allowed at all in equation definitions.
They include random distribution functions and are marked
with none in the third column of the tables listing all functions.
Attention
Some functions like uniform and normal are not
allowed in equation definitions.
defindic(m)..  induse(m,'v1') = 1 -> sum(p, use(
dem(i) ..    y(i)  =e= ynot(i)*(pd*p(i))**thet(i
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Equations
https://www.gams.com/latest/docs/UG_Equations.html
13/20


The use of the other functions is determined by the type of
arguments in the model. There are two types of arguments:
1. Exogenous arguments: The arguments are known.
Parameters and variable attributes (for example, .l and
.m attributes) are used as arguments. The expression is
evaluated once when the model is being set up and most
mathematical functions as well as time and calendar
functions are allowed.
2. Endogenous arguments: The arguments are variables and
therefore unknown at the time of model setup. The
function will be evaluated many times at intermediate
points while the model is being solved. Note that the
occurrence of any function with endogenous arguments
implies that the model is not linear.
Functions that are allowed only with exogenous arguments are
marked with any in the tables listing all functions.
There are two types of functions allowing endogenous
arguments: smooth functions and discontinuous functions.
Smooth functions are continuous functions with continuous
derivatives (like sin, exp, log). Discontinuous functions
include continuous functions with discontinuous derivatives
(like max, min, abs) and discontinuous functions (like ceil,
sign). Smooth functions may be used routinely in nonlinear
models. However, discontinuous functions may cause
numerical problems and should be used only if unavoidable,
and only in a special model type called DNLP. For more details
on model types see section Classification of Models.
Attention
The best way to model discontinuous functions is
with binary variables. The result is a model of the
type MINLP. The model [ABSMIP] demonstrates this
formulation technique for the functions abs, min,
max and sign. See also section Reformulating DNLP
Models. We strongly discourage the use of the DNLP
model type.
In Table 3 the use of functions in equation definitions is
summarized.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Equations
https://www.gams.com/latest/docs/UG_Equations.html
14/20


Functions are
allowed ...
Description of Functions
not at all
Functions that are marked none in the
third column of the tables listing all
functions in section Functions.
only with
exogenous
arguments
Functions that are marked any in the
third column of the tables listing all
functions in section Functions.
with
endogenous
arguments
Smooth functions. They are marked NLP
in the third column of the tables listing
all functions in section Functions.
with
endogenous
arguments
Discontinuous functions. They are
marked DNLP in the third column of the
tables listing all functions in section
Functions.
Table 3: Functions in Equation Definitions
Preventing Undefined Operations in Equations
Some operations are not defined at particular values of the
arguments. Two examples are division by 0 and the log- of 0.
While this can easily be identified at model setup for
exogenous functions and expressions, it is a lot more difficult
when the terms involve variables. The expression may be
evaluated many times when the problem is being solved and
the undefined result may arise only under certain cases. One
way to avoid an expression becoming undefined is adding
bounds to the respective variables. Consider the following
example from the model [ramsey]:
Specifying a lower bound for c(t) that is slightly larger than 0
prevents the log-function from becoming undefined.
c.lo(t) = 0.01 ;
util ..   utility  =e= sum(t, beta(t)*log(c(t)))
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Equations
https://www.gams.com/latest/docs/UG_Equations.html
15/20


Equation Attributes
Equation attributes may be specified in a similar way as
variable attributes. Five values are associated with each unique
label combination of every equation. They are denoted by the
suffixes .l, .m, .lo, .up and .scale. A list of the attributes
and their description is given in Table 4.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Equations
https://www.gams.com/latest/docs/UG_Equations.html
16/20


Equation
Attribute
Symbol
Description
Lower
bound
.lo
Negative infinity for =l= equations.
Right hand side value for =g=, =e=,
and =b= equations. Zero for =c=
equations.
Upper
bound
.up
Positive infinity for =g= and =c=
equations. Right hand side value for
=l=, =e=, and =b= equations.
Equation
level
.l
Level of the equation in the current
solution, equal to the level of all
terms involving variables.
Marginal
.m
Marginal value for equation. This
attribute is reset to a new value
when a model containing the
equation is solved. The marginal
value for an equation is also known
as the shadow price for the
equation and in general not defined
before solution but if present it can
help to provide a basis for the
model
Scale
factor
.scale
Numerical scaling factor that scales
all coefficients in the equation. This
is only used when the model
attribute scaleopt is set to 1. For
more on scaling, see section Model
Scaling - The Scale Option.
Stage
.stage
This attribute allows to assign
equations to stages in a stochastic
program or other block structured
model. Its current use is limited to
2-stage stochastic programs solved
with DECIS.
Table 4: Equation Attributes
Note that all attributes except for .scale and .stage contain
the attribute values of equations after a solution of the model
has been obtained. For some solvers it can be useful to specify
marginal values .m and level values .l on input to provide
starting information. Also note that the marginal value is also
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Equations
https://www.gams.com/latest/docs/UG_Equations.html
17/20


known as the dual or shadow price. Roughly speaking, the
marginal value .m of an equation is the amount by which the
value of the objective variable would change if the equation
level were moved one unit.
Equation attributes may be referenced in expressions and can
be used to specify starting values (see section Declaring
Equations). In addition, they serve for scaling purposes and for
reporting after a model was solved. For example, they may be
displayed using the display statement. The following example
is from the model location.
The display statement generates the following output at the
end of the listing file:
The level values of the equation supply_eq are displayed. As
expected, there are two level values, one for each member of
the set sl over which the equation supply_eq was defined.
Note
By default, all equation attributes introduced above
except for .scale are echoed to the solution report
that is part of the listing file.
In addition to the equation attributes introduced above, there
are a number of equation attributes that cannot be assigned or
exported via execute_unload* but may be used in
computations. They are given in Table 5.
Model warehouse 'warehouse location model'  /all
solve warehouse using mip min tcost;
display supply_eq.l;
----    108 EQUATION supply_eq.L  limit on suppl
s1 50.000,    s2 75.000
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Equations
https://www.gams.com/latest/docs/UG_Equations.html
18/20


Equation
Attribute
Symbol
Description
Range
.range
The difference between the
lower and upper bounds of an
equation.
Slack lower
bound
.slacklo
Slack from equation lower
bound. This is defined as the
greater of two values: zero or
the difference between the
level value and the lower
bound of an equation.
Slack upper
bound
.slackup
Slack from equation upper
bound. This is defined as the
greater of two values: zero or
the difference between the
upper bound and the level
value of an equation.
Slack
.slack
Minimum slack from equation
bound. This is defined as the
minimum of two values: the
slack from equation lower
bound and the slack from
equation upper bound.
Infeasibility
.infeas
Amount by which an equation
is infeasible falling below its
lower bound or above its
upper bound. This is defined
as max(0, lower bound - level,
level - upper bound).
Table 5: Additional Equation Attributes that Cannot Be Assigned
but May Be Used in Computations.
Summary and Quick Reference
In this chapter we have covered the declaration and definition
of equations in GAMS, arithmetic operations and functions
that may be used in equations and equation attributes. A list
summarizing the main points to keep in mind follows.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Equations
https://www.gams.com/latest/docs/UG_Equations.html
19/20


Equations must be declared before they may be defined.
[1]
It is good practice to add an explanatory text to the
declaration. [2]
More than one equation may be declared at once. The
equation names have to be separated by commas or by a
line break. [3]
Equations may be declared and defined over sets which
are called the domain of definition of the equation. [4]
One indexed equation may generate many constraints
depending on the size of the set(s) over which it is
defined. [5]
Equations may be defined over subsets. The dollar
condition may be used to filter the members of a set so
that only a subset of the members are considered. [6]
The set(s) over which an equation is defined must be
consistent with the set(s) over which the equation was
declared, being the set(s) themselves or a subset of the
set(s). [7]
The arrangement of terms in an equation is up to the
other. Variables can appear on both sides of an equation.
[8]
Labels of specific set elements may be used explicitly in
equations. [9]
All arithmetic operations that may be used to evaluate
expressions are also allowed in equations. [10]
Many functions that are defined in GAMS may be used in
equations. [11]
It is good practice to set bounds for variables to avoid
undefined operations if equations contain operations
that are undefined at certain values. [12]
Equations have attributes similar to variables (.l, .m,
.lo, .up and .scale). [13]
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Equations
https://www.gams.com/latest/docs/UG_Equations.html
20/20


Model and Solve
Statements
Table of Contents
Introduction
The Model Statement
The Syntax
Limited domain for
variables
Classification of Models
Linear Programming (LP)
Nonlinear Programming
(NLP)
Quadratically Constrained
Programs (QCP)
Nonlinear Programming
with Discontinuous
Derivatives (DNLP)
Mixed Integer Programming
(MIP)
Mixed Integer Nonlinear
Programming (MINLP)
Mixed Integer Quadratically
Constrained Programs
(MIQCP)
Mixed Complementarity
Problem (MCP)
Constrained Nonlinear
System (CNS)
Mathematical Program with
Equilibrium Constraints
(MPEC)
Extended Mathematical
Programs (EMP)
Model Attributes
Model Attributes Mainly
Used Before Solve
Model Attributes Mainly
Used After Solve
The Solve Statement
The Syntax of the Solve
Statement
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
1/42


Introduction
This chapter brings together all the concepts discussed in
previous chapters by explaining how to specify a model and
solve it.
The Model Statement
The model statement is used to collect equations into groups
and to label them so that they can be solved. The simplest form
of the model statement uses the keyword all: the model
consists of all equations declared before the model statement
is entered. For most simple applications this is all the user
needs to know about the model statement.
The Syntax
In general, the syntax for a
model declaration in GAMS is as follows:
The keyword model[s] indicates that this is a model statement
and model_name is the internal name of the model in GAMS, it
is an identifier. The optional explanatory text is used to
describe the model, all is a keyword as introduced above and
eqn_name is the name of an equation that has been declared
prior to the model statement. Var_name(set_name) is a
couple of previous declared variable and and set to limit the
domain of variables in the model. More details about this are
described in the following subsection. For advice on
model[s] model_name [text] [/ (all | eqn_name {,
       {,model_name [text] [/ (all | eqn_name {,
Actions Triggered by the Solve
Statement
Programs with Several Solve
Statements
Several Models
Loop: One Model, Different Data
Customizing Solution
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
2/42


explanatory text and how to choose a model_name, see the
tutorial Good Coding Practices.
Note
Model statements for Mixed Complementarity
Problem (MCP) and Mathematical Program with
Equilibrium Constraints (MPEC) models require a
slightly different notation, since complementarity
relationships need to be included. For details see
subsections Mixed Complementarity Problem (MCP)
and Mathematical Program with Equilibrium
Constraints (MPEC).
An example of
a model definition in GAMS is shown below.
The model is called transport and the keyword all is a
shorthand for all known (declared) equations.
Several models may be declared (and defined) in one model
statement. This is useful when experimenting with different
ways of writing a model, or if one has different models that
draw on the same data. Consider the following example,
adapted from
[PROLOG], in which different groups of the equations are used
in alternative versions of the problem. Three versions are
solved: the linear, nonlinear, and 'expenditure' versions. The
model statement to define all three is:
Here cb, rc, etc. are the names of the equations. We will
describe below how to obtain the solution to each of the three
models.
Note
Model transport "a transportation model" / all /
Model  nortonl   "linear version"      / cb,rc,d
       nortonn   "nonlinear version"   / cb,rc,d
       nortone   "expenditure version" / cb,rc,d
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
3/42


If several models are declared and defined with one
model statement, the models have to be separated
by commas or linefeeds and a semicolon
terminates the entire statement.
If several models are declared then it is possible to use one
previously declared model in the declaration of another. The
following examples illustrate this:
Model one is declared and defined using the general syntax,
model two contains all the equations of model one and the
equation balance_eq, and model three contains all of model
two and the equations capacity_eq and configure_eq.
In addition to nesting models as illustrated above, it is also
possible to use the symbols + and - to augment or remove
items relative to models that were previously defined. The
following examples serve as illustration:
Model four contains the equations from model three except
for those that belong to model one. Model five contains all
equations from model three except for equation
configure_eq. Model six contains the union of the equations
in model four and two. Note that both model names and
equation names may be used in association with the symbols +
and -.
Limited domain for variables
As mentioned above, it is possible to limit the domain of
variables used in a model in the model statement. This allows
to restrict the generation of blocks of variables in a single place
instead of using, e.g., dollar conditions at every place where
Model one   "first model"                       
      two   "second model that nests first"     
      three "third model that nests first and se
Model four "fourth model: model three minus mode
      five "fifth model: model three without eqn
      six  "sixth model: model four plus model t
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
4/42


this variable block is used in equations (which might be
required for an efficient model generation).
The following examples is based on the basic transportation
model [TRNSPORT]. To limit the transportation network in that
model to certain links (e.g. because some are blocked because
of some reason) one could introduce a subset of the free links
and use that with dollar conditions in the equations like this:
Now, instead of adding the dollar condition to each appearance
of x in the model, one could simply add a domain restriction
for that variable to the model statement directly by specifying a
variable and the set that limits its domain. Using this approach,
the previous example looks like this:
Note
If one adds the domain restriction to the model
statement, internally GAMS inserts a dollar
condition to every appearance of the restricted
variables in equations of the model. When doing
* Initialize whole network as free
Set freeLinks(i,j) Useable links in the network 
cost..      z =e= sum((i,j), c(i,j)*x(i,j)$freeL
supply(i).. sum(j, x(i,j)$freeLinks(i,j)) =l= a(
demand(j).. sum(i, x(i,j)$freeLinks(i,j)) =g= b(
* Block a particular link
freeLinks('san-diego','topeka') = no;
Model transport / all /;
solve transport using lp minimizing z;
* Initialize whole network as free
Set freeLinks(i,j) Useable links in the network 
cost..      z =e= sum((i,j), c(i,j)*x(i,j));
supply(i).. sum(j, x(i,j)) =l= a(i);
demand(j).. sum(i, x(i,j)) =g= b(j);
* Block a particular link
freeLinks('san-diego','topeka') = no;
Model transport / all, x(freeLinks) /;
solve transport using lp minimizing z;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
5/42


this, the indices are copied as they appear with the
variable. So, in the example above, x(i,j)
becomes x(i,j)$freeLinks(i,j). In the same
way x(i-1,j+1) becomes
x(i-1,j+1)$freeLinks(i-1,j+1) and
x('seattle','chicago') becomes
x('seattle','chicago')$freeLinks('seattle',
.
Attention
As a consequence of above's note one could see
some unexpected results, like "division by zero
errors", if it is not done carefully. For example, the
following dummy model, will trigger such an error,
since we sum over all i, but some x were excluded
leaving a 0 as divisor:
Classification of Models
Various types of problems can be solved with GAMS. Note that
the type of the model must be known before it may be solved.
The
model types are briefly discussed in this section. GAMS checks
that the model is in fact the type the user thinks it is, and
issues explanatory error messages if it discovers a mismatch -
for instance, that a supposedly linear model contains nonlinear
terms. Some problems may be solved in more than one way,
and the user has to choose which way to use. For instance, if
there are binary or integer variables
in the model, it can be solved either as a MIP or as a RMIP.
Set i      / i1*i3 /
    sub(i) / i2    /;
Positive Variable x(i);
Variable          z;
Equation          obj;
obj.. z =e= sum(i, 1/x(i));
x.lo(i) = 1;
Model m / obj, x(sub) /;
solve m min z use nlp;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
6/42


The model types and their identifiers, which are needed in the
a solve statement, are given in Table 1. For details on the solve
statement, see section The Solve Statement.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
7/42


GAMS
Model
Type
Model Type
Description
Requirements and
Comments
LP
Linear Program
Model with no nonlinear
terms or discrete (i.e.
binary, integer, etc)
variables.
NLP
Nonlinear Program
Model with general
nonlinear terms involving
only smooth functions, but
no discrete variables. For a
classification of functions
as to smoothness, see
section Functions.
QCP
Quadratically
Constrained
Program
Model with linear and
quadratic terms, but no
general nonlinear terms or
discrete variables.
DNLP
Discontinuous
Nonlinear Program
Model with non-smooth
nonlinear terms with
discontinuous derivatives,
but no discrete variables.
This is the same as NLP,
except that non-smooth
functions may appear as
well. These models are
more difficult to solve
than normal NLP models
and we strongly advise not
to use this model type.
MIP
Mixed Integer
Program
Model with binary, integer,
SOS and/or semi
variables, but no
nonlinear terms.
RMIP
Relaxed Mixed
Integer Program
Like MIP, except that the
discrete variable
requirement is relaxed.
See the note below on
relaxed model types.
MINLP
Mixed Integer
Nonlinear Program
Model with both nonlinear
terms and discrete
variables.
RMINLP
Relaxed Mixed
Like MINLP except that the
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
8/42


RMINLP
Relaxed Mixed
Integer Nonlinear
Program
Like MINLP except that the
discrete variable
requirement is relaxed.
See the note below on
relaxed model types.
MIQCP
Mixed Integer
Quadratically
Constrained
Program
Model with both quadratic
terms and discrete
variables, but no general
nonlinear term.
RMIQCP
Relaxed Mixed
Integer
Quadratically
Constrained
Program
Like MIQCP except that the
discrete variable
requirement is relaxed.
See the note below on
relaxed model types.
MCP
Mixed
Complementarity
Problem
A square, possibly
nonlinear, model that
generalizes a system of
equations. Rows and
columns are matched in
one-to-one
complementary
relationships.
CNS
Constrained
Nonlinear System
Model solving a square,
possibly nonlinear system
of equations, with an
equal number of variables
and constraints.
MPEC
Mathematical
Programs with
Equilibrium
Constraints
A difficult model type for
which solvers and
reformulations are
currently being developed.
RMPEC
Relaxed
Mathematical
Program with
Equilibrium
Constraints
A difficult model type for
which solvers and
reformulations are
currently being developed.
See the note below on
relaxed model types.
EMP
Extended
Mathematical
Program
A family of mathematical
programming extensions.
MPSGE
General
Equilibrium
Not actually a model type
but mentioned for
completeness, see MPSGE.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
9/42


 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
10/42


Table 1: GAMS Model Types
Note
The relaxed model types RMIP, RMINLP,
RMIQCP, and RMPEC solve the problem as the
corresponding model type (e.g. MIP for RMIP)
but relax the discrete requirement of the
discrete variables. This means that integer
and binary variables may assume any values
between their bounds. SemiInteger and
SemiCont variables may assume any values
between 0 and their upper bound. For SOS1
and SOS2 variables the restriction of the
number of non-zero values is removed.
Many "LP" solvers like Cplex offer the
functionality of solving convex quadratic
models. So the Q matrices in the model need
to be positive semidefinite. An extension to
to this are the second-order cone programs
(SOCP) with either symmetric or rotated
cones. See the solver manuals (e.g. on
MOSEK) for details.
Unlike other checks on the model algebra
(e.g. existence of discrete variables or general
non-linear terms), the GAMS compiler does
not enforce a quadratic model to only consist
of quadratic and linear terms. This
requirement is enforced at runtime for a
particular model instance.
Linear Programming (LP)
Mathematically, the Linear Programming (LP) problem looks
like:
where  is a vector of variables that are continuous real
numbers, 
 is the objective function, and 
 represents
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
11/42


the set of constraints. Here,  is an equation operator. For
details on the equation types allowed in GAMS, see Equation
Types. 
 and 
 are vectors of lower and upper bounds on the
variables.
GAMS supports free (unrestricted) variables, positive variables,
and negative variables. Note that users may customize lower
and upper bounds, for details see section Bounds on Variables.
For information on LP solvers that can be used through GAMS
see the Solver/Model type Matrix.
Nonlinear Programming (NLP)
Mathematically, the Nonlinear Programming (NLP) problem
looks like:
where  is a vector of variables that are continuous real
numbers, 
 is the objective function, and 
represents the set of constraints. For details on the equation
types allowed in GAMS, see Equation Types. Note that the
functions 
 and 
 have to be differentiable. 
 and 
 are
vectors of lower and upper bounds on the variables.
For information on NLP solvers that can be used through GAMS
see the Solver/Model type Matrix. See also the tutorial Good
NLP Formulations.
Note
NLP models may have the nonlinear terms inactive.
In this case setting the model attribute TryLinear to
1 causes GAMS to check the model and use the
default LP solver if possible. For details on model
attributes, see subsection Model Attributes.
Quadratically Constrained Programs (QCP)
Mathematically, the Quadratically Constrained Programming
(QCP) problem looks like:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
12/42


where  denotes a vector of variables that are continuous real
numbers, 
 is the linear part of the objective function, 
is the quadratic part of the objective function, 
 represents
the linear part of the th constraint, 
 its quadratic part
and 
 its right-hand side. For details on the equation types
allowed in GAMS, see Equation Types. Further, 
 and 
 are
vectors of lower and upper bounds on the variables.
Note that a QCP is a special case of the NLP in which all the
nonlinearities are required to be quadratic. As such, any QCP
model can also be solved as an NLP. However, most "LP"
vendors provide routines to solve LP models with a quadratic
objective. Some allow quadratic constraints as well. Solving a
model using the QCP model type allows these "LP" solvers to
be used to solve quadratic models as well as linear ones. Some
NLP solvers may also take advantage of the special (quadratic)
form when solving QCP models.
Attention
In case a model with quadratic constraints is
passed to a QCP solver that only allows a quadratic
objective, a capability error will be returned (
solver status 6 CAPABILITY PROBLEMS).
Some solvers will fail when asked to solve a non-
convex quadratic problems as described above.
Note
Using the model attribute TryLinear causes GAMS to
see if the problem can be solved as an LP problem.
For details on model attributes, see subsection
Model Attributes.
For information on QCP solvers that can be used through GAMS
see the Solver/Model type Matrix.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
13/42


Nonlinear Programming with Discontinuous
Derivatives (DNLP)
Mathematically, the Nonlinear Programming with Discontinuous
Derivatives (DNLP) problem looks like:
where  is a vector of variables that are continuous real
numbers, 
 is the objective function, 
 represents
the set of constraints, and 
 and 
 are vectors of lower and
upper bounds on the variables. For details on the equation
types allowed in GAMS, see Equation Types. Note that this is the
same as NLP, except that non-smooth functions, like abs, min,
max may appear in 
 and 
.
For information on DNLP solvers that can be used through
GAMS see the Solver/Model type Matrix.
Attention
We strongly advise against using the model
type DNLP. The best way to model
discontinuous functions is with binary
variables, which results in a model of the
type MINLP. The model [ABSMIP]
demonstrates this formulation technique for
the functions abs, min, max and sign. See
also section Reformulating DNLP Models.
Solvers may have difficulties when dealing
with the discontinuities, since they are really
NLP solvers and the optimality conditions
and the reliance on derivatives may be
problematic. Using a global solver may
alleviate this problem.
Mixed Integer Programming (MIP)
Mathematically, the Mixed Integer Linear Programming (MIP)
problem looks like:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
14/42


where
 is the
objective function,
represents the set of constraints of various equality and
inequality forms,
 is a vector of variables that are continuous real
numbers,
 is a vector of variables that can only take integer
values smaller than 
,
 is a vector of binary variables,
 is a vector of variables that belong to SOS1 sets; this
means that at most one variable in the set is nonzero,
 is a vector of variables that belong to SOS2 sets; this
means that at most two adjacent variables in the set are
nonzero,
 is a vector of variables that are semi-continuous; they
are either zero or larger than 
,
 is a vector of variables that are semi-integer; they are
integer and either zero or larger than 
.
For details on the equation types allowed in GAMS, see
Equation Types. For more details on MIPs in GAMS, especially
the use of SOS and semi variables, see section Special Mixed
Integer Programming (MIP) Features.
For information on MIP solvers that can be used through GAMS,
see the Solver/Model type Matrix.
Attention
Not all MIP solvers cover all the cases associated
with SOS and semi variables. Please consult the
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
15/42


solver manuals for details on capabilities.
Mixed Integer Nonlinear Programming (MINLP)
Mathematically, the Mixed Integer Nonlinear Programming
(MINLP) problem looks like:
where  is a vector of variables that are continuous real
numbers,  denotes a vector of variables that can only take
integer values, 
 is the objective function,
 represents the set of constraints, and 
 and 
are vectors of lower and upper bounds on the variables. For
details on the equation types allowed in GAMS, see Equation
Types. Further, 
 is the integrality restriction
on .
For information on MINLP solvers that can be used through
GAMS see the Solver/Model type Matrix.
Note
SOS and semi variables can also be
accommodated by some solvers. Please
consult the solver manuals for details on
capabilities.
The model attribute TryLinear causes GAMS
to examine whether the problem may be
solved as a MIP problem. For details on
model attributes, see subsection Model
Attributes.
Mixed Integer Quadratically Constrained Programs
(MIQCP)
A Mixed Integer Quadratically Constrained Program (MIQCP) is a
special case of the MINLP in which all the nonlinearities are
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
16/42


required to be quadratic. For details see the description of the
QCP, a special case of the NLP.
For information on MIQCP solvers that can be used through
GAMS, see the Solver/Model type Matrix.
Note
The model attribute TryLinear causes GAMS to
examine whether the problem may be solved as a
MIP problem. For details on model attributes, see
subsection Model Attributes.
Mixed Complementarity Problem (MCP)
Unlike the other model types we have introduced so far, the
Mixed Complementarity Problem (MCP) does not have an
objective function. An MCP is specified by three pieces of data:
a function 
, lower bounds
 and upper bounds 
. A
solution is a vector 
 such that for each 
,
one of the following three conditions hold:
This problem can be written compactly as
where the symbol 
 (which means "perpendicular to",
shortened to "perp to") indicates pair-wise complementarity
between the function 
 and the variable  and its bounds.
The following special case is an important and illustrative
example:
In this example, the unstated but implied upper bound  is
infinity. Since  is finite, we cannot have 
 and the third
condition above cannot hold: this implies 
. The
remaining two conditions imply pair-wise complementarity
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
17/42


between 
 and 
. This is exactly the Nonlinear
Complementarity Problem, often written as
None of this rules out the degenerate case (i.e. 
 and 
both zero). In practice, these can be difficult models to solve.
Another special case arises when the bounds 
 and 
 are
infinite. In this case, the second and third conditions above
cannot hold, so we are left with 
, a square system of
nonlinear equations. And finally, we should mention a special
case that occurs frequently in practice: if 
 (i.e. 
 is
fixed) then we have a complementary pair: one of the three
conditions will hold as long as 
 is defined. Essentially,
fixing a variable removes or obviates the matching equation.
This is often useful when modeling with MCP.
The definition above describes the canonical MCP model as it
exists when GAMS passes it to an MCP solver. Some models
have exactly this form even in the GAMS code, but usually some
processing is done by the GAMS system to arrive at a model in
this form. Here we'll describe the steps of this process and
illustrate with an example from the model library.
1. The process starts with the list of rows (aka single
equations) and columns (aka single variables) that make
up the MCP model, and potentially some matching
information.
The usual rules apply: rows are part of the model
because their associated equations are included in
the model statement, but columns only become
part of the model by use: a column enters the
model only if it is used in some row of the model.
Therefore including a variable symbol as part of a
match in the model statement will not influence
the set of columns belonging to the model.
Matches (where they exist) are pointers from rows
to columns.
Technically, the MCP is defined via a function 
while a model contains constraints. Given a
constraint, we define an associated function as
LHS - RHS, so e.g. 
 is consistent with a =G=
constraint.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
18/42


2. The explicit matches are processed: each match creates a
complementary pair. What remains after the explicit
matches are consumed are the unmatched rows and
unmatched columns.
It is an error for any column to be matched to
multiple rows, so the row-column matching is one-
to-one.
For each match some consistency checks between
the column bounds and the row type are made. For
details, see Table 2.
For example, matching an =N= row with any column
is good, matching an =E= row with a free column is
good, matching an =E= row with a lower-bounded
column is allowed, and matching a =G= row with an
upper-bounded column results in an error.
3. Any fixed columns remaining are ignored: these columns
can be treated like exogenous variables or parameters.
4. If what remains is a set of =E= rows and an equal number
of unbounded columns, these can be matched up in any
order and we have a well-defined MCP. If this is not what
remains, an error is triggered.
To illustrate how this works, consider the spatial equilibrium
model [SPATEQU] with the following model statement:
1. The model P2R3_MCP includes the rows from equations
dem, sup, in_out and dom_trad and exactly the
columns used by these rows. Checking the listing file, we
see columns for Qd, Qs, x, and p. In addition, the model
statement specifies two matches: in_out.p and
dom_trad.x. These matches always take the form of an
equation.variable pair, with no indices or domains
included.
2. In this example, the rows corresponding to the equation
in_out match up perfectly with the columns from the
variable p: there are no holes in the set of rows or
columns because of some dollar conditions in the
equation definition. We have a one-to-one match so all
the rows of in_out and columns of p are consumed by
the match in the model statement. The same holds for
Model  P2R3_MCP        / dem, sup, in_out.p, dom
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
19/42


the dom_trad.x pair, so what is left are the rows of dem
and sup and the columns of Qd and Qs, all of which are
unmatched.
3. There are no fixed variables to remove.
4. Since dem and sup are =E= constraints and Qd and Qs are
free variables, we can match them in any order without
changing the solution set for this model. The counts of
these unmatched equality rows and unmatched free
variables are equal, so we get a well-defined MCP.
When rows are matched explicitly to columns, some care must
be taken to match them consistently. For example, consider a
row-column match g.y. The row g can be of several types: =N=,
=E=, =G=, or =L=. An =N= row can be matched to any sort of
variable: the =N= doesn't imply any sort of relationship, which
works perfectly with our definition of 
 above: the allowed sign
or direction of g is determined completely by the bounds on
the complementary variable y. If g is an =E= row, this is
consistent with a free variable y, but what if y has an active
lower bound? By definition we allow g to be positive at
solution, but this violates the declaration as an =E= row. Such
cases can be handled by marking the row with a redef. The total
number of redefs for a given model is available via the
NumRedef model attribute and is shown in the report
summary. Note that the set of rows marked depends on the
solution: in the example above, if g is zero at solution it will not
be marked as a redef, regardless of what the bounds are on y.
Finally, some combinations are simply not allowed: they will
result in a model generation error. The table below lists the
outcome for all possible combinations.
Table 2: MCP Matching
Column Bounds
=N=
=E=
=G=
=L=
lower
OK
redef
OK
ERROR
upper
OK
redef
ERROR
OK
free
OK
OK
OK
OK
double
OK
redef
redef
redef
fixed
OK
redef
redef
redef
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
20/42


The definition, process, and rules above have several
implications for valid MCP models:
It is always acceptable to use the =N= notation when
defining the equations in an MCP model, provided these
equations are matched explicitly. In this case the bounds
on F(z) are implied by the bounds on the matching
columns, and redefs will never occur.
Variables that are known to be lower-bounded (no upper
bound) will match consistently with =G= equations.
Variables that are known to be upper-bounded (no lower
bound) will match consistently with =L= equations.
Variables that are known to be unbounded will match
consistently with =E= equations.
Where the bound structure is not known in advance, or
both upper and lower bounds exist, a match with an =N=
equation will always be consistent. Other equation types
will result in errors or redefs.
The model may initially have fewer rows than columns,
as long as the "extra" columns are unmatched fixed
columns that ultimately get removed from the MCP
passed to the solver.
Any bounded-but-not-fixed column must be matched
explicitly to a row.
The only rows that may be unmatched are =E= rows.
It is customary to re-use the constraints of an LP or NLP
model when formulating the MCP corresponding to the
Karush-Kuhn-Tucker (KKT) conditions. If the original
model is a minimization, the LP/NLP marginals .m and
the variables for these marginals in the MCP will use the
same sign convention, and the orientation for the
constraints will be consistent between the two models,
making re-use easier.
As mentioned above, it is typical to use the same equations in
both NLP and MCP models. Sometimes, it is not the original
equation that is wanted for the MCP, but rather the reoriented
(aka negated or flipped) equation. For example, the flipped
version of x**1.5 =L= y is y =G= x**1.5, while
sqr(u) - sqr(v) =E= 5 becomes
- sqr(u) + sqr(v) =E= -5. Instead of re-implementing the
equation in flipped form, the same result can be achieved by
prefixing the equation name with a - in the model statement.
See the [mcp10] model for an example of such usage. When
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
21/42


equations are used in flipped form, they are marked with a
redir in the listing file's solution listing.
An example of complementarity that should be familiar to
many is the relationship between a constraint and its
associated dual multiplier: if the constraint is non-binding, its
dual multiplier must be zero (i.e. at bound) while if a dual
multiplier is nonzero the associated constraint must be
binding. In fact, the KKT or first-order optimality conditions for
LP and NLP models can be expressed and solved as an MCP.
These complementarity relationships found in optimization
problems are useful in understanding the marginal values
assigned to rows and columns in the GAMS solution for MCP.
With no objective function, the usual definition for marginal
values and their interpretation isn't useful. Instead, the GAMS
MCP convention for the marginal values of columns is to return
the slack of the associated row (i.e. its value when interpreted
and evaluated as a function). For the marginal values of rows,
the level value (not the slack) of the associated column is
returned. When we apply this convention to the NCP (
) we see pairwise
complementarity between the levels and marginals returned
for each of the rows and columns in the model. This is also the
case if we take the KKT conditions of an LP in a suitable
standard form: minimization, 
.
MCPs arise in many application areas including applied
economics, game theory, structural engineering and chemical
engineering. For further details on this class of problems, see
http://www.neos-guide.org/content/complementarity-
problems.
For information on MCP solvers that can be used through GAMS,
see Solver/Model type Matrix.
Constrained Nonlinear System (CNS)
The Constrained Nonlinear System (CNS) is the second GAMS
model type that does not have an objective function.
Mathematically, a CNS model looks like:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
22/42


where  is a set of continuous variables and 
 is a set of
nonlinear equations of the same dimension as . This is a key
property of this model type: the number of equations equals
the number of variables, so we have a square system. The
(possibly empty) constraints 
 are not intended to
be binding at the solution, but instead are included to
constrain the solution to a particular domain, to avoid regions
where 
 is undefined, or perhaps just to give the solver a
push in the right direction. The (possibly empty) constraints
 are intended to serve the same purpose as the
variable bounds and are silently converted to equations with
bounded slacks.
Note that since there is no objective in a CNS model, there are
no marginal values for variables and equations. Any marginal
values already stored in the GAMS database will remain
untouched. CNS models also make use of some model status
values that allow a solver to indicate if the solution is unique
(e.g. for a non-singular linear system) or if the linearization is
singular at the solution. For singular models (solved or
otherwise), the solver can mark one or more dependent rows
with a depnd. The total number of rows so marked for a given
model is available via the NumDepnd model attribute and is
shown in the report summary.
The CNS model is a generalization of a square system of
equations 
. Such a system could also be modeled as
an NLP with a dummy objective. However, there are a number
of advantages to using the CNS model type, including:
A check by GAMS that the model is really square,
solution/model diagnostics by the solver (e.g. singular at
solution, (locally) unique solution),
CNS-specific warnings if the side constraints 
or 
 are active at a solution,
and potential improvement in solution times, by taking
better advantage of the model properties.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
23/42


For information on CNS solvers that can be used through GAMS,
see the Solver/Model type Matrix.
Mathematical Program with Equilibrium Constraints
(MPEC)
Mathematically, the Mathematical Program with Equilibrium
Constraints (MPEC) problem looks like:
where  and  are vectors of continuous real variables. The
variables  are often called the control or upper-level variables,
while the variables  are called the state or lower-level
variables. 
 is the objective function. 
represents the set of traditional (i.e. NLP-type) constraints;
some solvers may require that these constraints only involve
the control variables . The function 
 and the bounds
 and 
 define the equilibrium constraints. If  is fixed, then
 and the bounds 
 and 
 define an MCP; the
discussion of the "perp to" symbol 
 in that section applies
here as well. From this definition, we see that the MPEC model
type contains NLP and MCP models as special cases of MPEC.
A simple example of an entire MPEC model is given below.
Note that as in the MCP, the complementarity relationships in
an MPEC are specified in the model statement via equation-
variable pairs: the h1.y1 specifies that the equation h1 is
variable z, x1, x2, y1, y2;
positive variable y1;
y2.lo = -1;
y2.up =  1;
equations cost, g, h1, h2;
cost..  z =E= x1 + x2;
g..     sqr(x1) + sqr(x2) =L= 1;
h1..    x1 =G= y1 - y2 + 1;
h2..    x2 + y2 =N= 0;
model example / cost, g, h1.y1, h2.y2 /;
solve example using mpec min z;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
24/42


perpendicular to the variable y1 and the h2.y2 specifies that
the equation h2 is perpendicular to the variable y2. For details
on the solve statement, see section The Solve Statement.
While the MPEC model formulation is very general, it also
results in problems that can be very difficult to solve. The
state-of-the-art for MPEC solvers is not nearly as advanced as
that for other model types. As a result, you should expect the
MPEC solvers to be more limited by problem size and/or
robustness issues than solvers for other model types.
For information on MPEC solvers that can be used through
GAMS, see the Solver/Model type Matrix. For more details on
MPECs and solver development, see https://neos-
guide.org/guide/types/mpec/.
Extended Mathematical Programs (EMP)
Extended Mathematical Programming (EMP) is an
(experimental) framework for automated mathematical
programming reformulations. Using EMP, model formulations
that GAMS cannot currently handle directly or for which no
robust and mature solver technology exists can be
automatically and reliably reformulated or transformed into
models for which robust and mature solver technology does
exist within the GAMS system. For more details, see the chapter
on EMP. Currently EMP supports:
Equilibrium problems including variational inequalities,
Nash games, and Multiple Optimization Problems with
Equilibrium Constraints (MOPECs).
Hierarchical optimization problems such as bilevel
programs.
Disjunctive programs for modeling discrete choices with
binary variables.
Stochastic programs including two-stage and multi-stage
stochastic programs, chance constraints and risk
measures such as Variance at Risk (VaR) and Conditional
Variance at Risk (CVaR).
Apart from the disjunctive and stochastic programming models
mentioned above, EMP models are typically processed (aka
solved) via the JAMS solver: this solver does the work of
reformulation/transformation, calling GAMS to solve this
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
25/42


reformulation, and post-processing the solution that results to
bring it back in terms of the original EMP model.
Examples demonstrating how to use the EMP framework and
the JAMS and DE solvers are available in the GAMS EMP Library.
These solvers require no license of their own to run but can
and do call subsolvers that do require a license.
Model Attributes
Models have attributes that hold a variety of information,
including
information about the results of a solve performed, a
solve statement, the solution of a model,
information about certain features to be used by GAMS
or the solver,
information passed to GAMS or the solver specifying
various settings that are also subject to option
statements.
Model attributes are accessed in the following way:
Here model_name is the name of the model in GAMS and
.attribute is the specific attribute that is to be accessed.
Model attributes may be used on the left-hand side and the
right-hand side of assignments. Consider the following
example:
In the first line the attribute .resLim of the model transport
is specified to be 600 (seconds). In the second line the value of
the attribute .modelStat of the model transport is assigned
to the scalar x. Note that model attributes may also be used in
display statements.
Some of the attributes are mainly used before the solve
statement to provide information to GAMS or the solver link.
model_name.attribute
transport.resLim = 600;
x = transport.modelStat;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
26/42


Others are set by GAMS or the solver link and hence are mainly
used after a solve statement.
Moreover, some of the attributes used before the solve may
also be set via an option statement or the command line.
Consider the following example:
This line is an option statement and applies to all models. One
can set the model attribute .ResLim to overwrite the global
ResLim option. In order to revert the individual .ResLim to the
global ResLim option, one needs to set the model attribute to
NA. For more on option statements, see chapter The Option
Statement.
This sets the global ResLim option when invoking the gams run
(e.g. from the command line). For more on command line
parameters, see chapter The GAMS Call and Command Line
Parameters.
Note that a model-specific option takes precedence over the
global setting specified with an option statement and that a
setting via an option statement takes precedence over a setting
via the command line parameter.
The complete list of model attributes is given below. Observe
that each entry is linked to a detailed description of the
respective attribute, including information of whether the
attribute is also available as command line parameter or
option statement. Note that detailed descriptions of all GAMS
command line parameters, options and model attributes are
given in section Detailed Descriptions of All Options.
option ResLim=10;
gams mymodel ResLim=10
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
27/42


Model Attributes Mainly Used Before Solve
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
28/42


Attribute
Description
bRatio
Basis detection threshold
cheat
Cheat value, i.e. minimum solution
improvement threshold
cutOff
Cutoff value for branch and bound
defPoint
Indicator for passing on default point
dictFile
Force writing of a dictionary file if dictfile > 0
domLim
Domain violation limit solver default
fdDelta
Step size for finite differences
fdOpt
Options for finite differences
holdFixed
Treat fixed variables as constants
integer1..5
Integer communication cells
iterLim
Iteration limit of solver
limCol
Maximum number of columns listed in one
variable block
limRow
Maximum number of rows listed in one
equation block
MCPRHoldFx
Print list of rows that are perpendicular to
variables removed due to the holdfixed
setting
nodLim
Node limit in branch and bound tree
optCA
Absolute Optimality criterion solver default
optCR
Relative Optimality criterion solver default
optFile
Default option file
priorOpt
Priority option for variable attribute .prior
real1..5
Real communication cells
reform
Reformulation level
resLim
Wall-clock time limit for solver
savePoint
Save solver point in GDX file
scaleOpt
Employ user specified variable and equation
scaling factors
solPrint
Solution report print option
solveLink
Solver link option
l
l i l
l
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
29/42


solveOpt
Multiple solve management
sysOut
Solver Status file reporting option
threads
Number of processors to be used by a solver
tolInfeas
Infeasibility tolerance for an empty row of
the form a.. 0*x =e= 0.0001;
tolInfRep
This attribute sets the tolerance for marking
infeasible in the equation listing
tolProj
Tolerance for setting solution values to a
nearby bound when reading a solution
tryInt
Whether solver should make use of a partial
integer-feasible solution
tryLinear
Examine empirical NLP model to see if there
are any NLP terms active. If there are none
the default LP solver will be used
workFactor
Memory Estimate multiplier for some solvers
workSpace
Work space for some solvers in MB
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
30/42


Model Attributes Mainly Used After Solve
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
31/42


Attribute
Description
domUsd
Number of domain violations
etAlg
Solver dependent timing information
etSolve
Elapsed time it took to execute a solve
statement in total
etSolver
Elapsed time taken by the solver only
handle
Unique handle number of SOLVE statement
iterUsd
Number of iterations used
line
Line number of last solve of the
corresponding model
linkUsed
Integer number that indicates the value of
SolveLink used for the last solve
marginals
Indicator for marginals present
maxInfes
Maximum of infeasibilities
meanInfes
Mean of infeasibilities
modelStat
Integer number that indicates the model
status
nodUsd
Number of nodes used by the MIP solver
number
Model instance serial number
numDepnd
Number of dependencies in a CNS model
numDVar
Number of discrete variables
numEqu
Number of equations
numInfes
Number of infeasibilities
numNLIns
Number of nonlinear instructions
numNLNZ
Number of nonlinear nonzeros
numNOpt
Number of nonoptimalities
numNZ
Number of nonzero entries in the model
coefficient matrix
numRedef
Number of MCP redefinitions
numVar
Number of variables
numVarProj
Number of bound projections during model
generation
objEst
Estimate of the best possible solution for a
mixed-integer model
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
32/42


g
objVal
Objective function value
procUsed
Integer number that indicates the used
model type
resCalc
Time spent in function and derivative
calculations (deprecated)
resDeriv
Time spent in derivative calculations
(deprecated)
resGen
Time GAMS took to generate the model in
wall-clock seconds
resIn
Time to import model (deprecated)
resOut
Time to export solution (deprecated)
resUsd
Time the solver used to solve the model in
seconds
rngBndMax
Maximum absolute non-zero value of bounds
passed to the solver (excluding infinity)
rngBndMin
Minimum absolute non-zero value of bounds
passed to the solver
rngMatMax
Maximum absolute non-zero value of
coefficients in the model matrix passed to
the solver (excluding infinity)
rngMatMin
Minimum absolute non-zero value of
coefficients in the model matrix passed to
the solver
rngRhsMax
Maximum absolute non-zero value of right
hand sides passed to the solver (excluding
infinity)
rngRhsMin
Minimum absolute non-zero value of right
hand sides passed to the solver
rObj
Objective function value from the relaxed
solve of a mixed-integer model when the
integer solver did not finish
solveStat
Indicates the solver termination condition
sumInfes
Sum of infeasibilities
sysIdent
Solver identification number
sysVer
Solver version
The Solve Statement
Once a model has been defined using the model statement, the
solve statement prompts GAMS to call one of the available
solvers for the particular model type. This section introduces
and discusses the solve statement in detail. For a list of GAMS
model types, see Table 1. For information on how to specify
desired solvers, see section Choosing a Solver.
Note
It is important to remember that GAMS does not
solve the problem, but passes the problem
definition to one of a number of separate solver
programs that are integrated with the GAMS system.
The Syntax of the Solve Statement
In general, the syntax for a solve statement is as follows. Note
that there are two alternatives that are equally valid:
The keyword solve indicates that this is a solve statement.
Model_name is the name of the model as defined by a model
statement. Note that the model statement must be placed
before the solve statement in the program.
The keyword using is followed by model_type, which is one of
the GAMS model types described above, see Table 1.
The keywords maximizing or minimizing indicate the
direction of the optimization.
Var_name is the name of the objective variable that is being
optimized. An example of a solve statement in GAMS is shown
below.
Solve and using are reserved words, transport is the name
of the model, lp is the model type, minimizing is the
direction of optimization, and cost is the objective variable.
solve model_name using model_type maximizing|min
solve model_name maximizing|minimizing var_name 
Solve transport using lp minimizing cost ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
33/42


Note that an objective variable is used instead of an objective
row or function.
Attention
The objective variable must be scalar and of type
free, and must appear in at least one of the
equations in the model.
Recall that some model types (e.g. the Constrained Nonlinear
System (CNS) or the Mixed Complementarity Problem (MCP)) do
not have an objective variable. So their solve statement syntax
is slightly different:
As before, solve and using are keywords, model_name is the
name of the model as defined by a model statement and
model_type is the GAMS model type CNS or MCP. There is no
objective variable and consequently no direction of
optimization. An example from the spatial equilibrium model
[SPATEQU] illustrates this solve statement:
P2R3_MCP is the model name, the model type is MCP and as
expected, there is no objective variable.
The EMP model type serves many purposes including some
experimental ones. The solve statement with model type EMP
can be with or without the objective variable and optimization
direction. For more information, see chapter Extended
Mathematical Programming (EMP).
Actions Triggered by the Solve Statement
When GAMS encounters a solve statement during compilation
(the syntactic check of the input file) or execution (actual
execution of the program), it initiates a number of special
actions. The purpose is to prevent waste that would be caused
solve model_name using model_type;
Solve P2R3_MCP using mcp;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
34/42


by solving a model that has apparently been incorrectly
specified. During compilation the following are verified:
1. All symbolic equations have been defined and the
objective variable is used in at least one of the
equations.
2. The objective variable is scalar and of type free (even
though lower and upper bounds may have been
specified)
3. MCP models are checked for appropriate
complementarity and squareness.
4. Each equation fits into the specified problem class
(linearity for LP, continuous derivatives for NLP, as
outlined above).
5. All sets and parameters in the equations have values
assigned.
Note
GAMS issues explanatory error messages if it
discovers that the model is not according to type;
for example, the presence of nonlinear terms in a
supposedly LP model. For details on error
messages, see chapter GAMS Output.
At execution time the solve statement triggers the following
sequence of steps:
1. The model is translated into the representation required
by the solution system to be used.
2. Debugging and comprehension aids that the user wishes
to see are produced and written to the output file (
EQUATION LISTING, etc). For customizing options (e.g.
LimRow and LimCol), see chapter The Option Statement.
3. GAMS verifies that there are no inconsistent bounds or
unacceptable values (for example, NA or UNDF) in the
problem.
4. Any errors detected at this stage cause termination with
as much explanation as possible, using the GAMS names
for the identifiers causing the trouble.
5. GAMS designs a solution strategy based on the possible
availability of level values or basis information from a
previous solution: all available information is used to
provide efficiency and robustness of operation. Any
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
35/42


specifications provided by the user (Iteration limits etc.)
are incorporated. A solver is chosen which is either the
default solver for that problem type, the solver specified
on the command line or the solver chosen by an option
statement. For details see section Choosing a Solver.
6. GAMS passes control to the solution subsystem and waits
while the problem is being solved.
7. GAMS reports on the status of the solution process and
loads solution values back into the GAMS database. This
causes new values to be assigned to the .l and .m fields
for all individual equations and variables in the model. In
addition, the post solution model attributes are
assigned. The procedure for loading back the data
associated with level and marginal values may be
customized using the SolveOpt model attribute and
option. A row by row and column by column listing of the
solution is provided by default. It may be suppressed by
the SolPrint model attribute or option. Any apparent
difficulty with the solution process will cause explanatory
messages to be displayed. Errors caused by forbidden
nonlinear operations are reported at this stage.
Note
When the solver does not provide a dual solution
(.m), then GAMS does not print the marginal column
in the solution listing and set the marginal field in
variables and equations to NA.
The outputs from these steps, including any possible error
messages, are discussed in detail in chapter GAMS Output.
Programs with Several Solve
Statements
Several solve statements can be processed in the same
program. The next few subsections discuss various instances
where several solve statements may be needed in the same
file. If sequences of expensive or difficult models are to be
solved, it might be useful to interrupt program execution and
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
36/42


continue later. For details on this topic, see chapter The Save
and Restart Feature.
Several Models
If there are different models then the solves may be sequential,
as below. Each of the models in
[PROLOG] consists of a different set of equations, but the data
are identical, so the three solves appear in sequence with no
intervening assignments:
When there is more than one solve statement in the program,
GAMS uses as much information as possible from the previous
solution to provide a starting point or basis in the search for
the next solution.
Loop: One Model, Different Data
Multiple solves may also occur as a result of a solve statement
within a loop statement. Loop statements are introduced and
discussed in detail in chapter Programming Flow Control
Features; here we show that they may contain a solve
statement and thus lead to multiple solves within one model.
The example from [MEANVAR] computes the efficient frontier
for return and variance for a portfolio selection problem at
equidistance points.
The set p is a set of point between the minimum and maximum
variance, it is the driving set of the loop. A variance variable v is
fixed at a equidistance points. With each iteration through the
loop another variance level is used, the NLP model var1 is
Solve nortonl using nlp maximizing z;
Solve nortonn using nlp maximizing z;
Solve nortone using nlp maximizing z;
loop(p(pp),
   v.fx = vmin + (vmax-vmin)/(card(pp)+1)*ord(pp
   Solve var1 maximizing m using nlp ;
   xres(i,p)         = x.l(i);
   xres('mean',p)    = m.l;
   xres('var',p)     = v.l;
);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
37/42


solved for each iteration and the outputs are stored in the
parameter xres(*,pp), to be used later for reporting. As often
for reporting purposes, the universal set * is used.
This example demonstrates how to solve the same model (in
terms of variables and equations) multiple times with slightly
different data. For such situations the Gather-Update-Solve-
Scatter (GUSS) facility improves on the loop implementation by
saving generation time and minimizing the communication with
the solver. GUSS is activated by the additional keyword
scenario in the solve statement followed by a set name that
provides mapping information between parameters in the
model and the scenario containers. A GUSS implementation of
the loop would look as follows:
Customizing Solution Management: SolveOpt
It is important to consider how GAMS manages solutions if
multiple models are solved. By default, GAMS merges
subsequent solutions with prior solutions. This is not an issue
if all models operate over the same set of variables. However,
recursive procedures, different equation inclusions or logical
conditions may cause only part of the variables or different
variables to appear in the models to be solved. In such a case it
might be useful to modify the solution management procedure
using the model attribute or option SolveOpt.
Sensitivity or Scenario Analysis
Multiple solve statements can be used not only to solve
different models, but also to conduct sensitivity tests, or to
perform case (or scenario) analyses of models by changing data
or bounds and then solving the same model again. While some
commercial LP systems allow access to "sensitivity analysis"
through GAMS it is possible to be far more general and not
parameter vfx(p), px(p,i), pm(p);
set dict / p  .scenario.''
           v  .fixed   .vfx
           x  .level   .px
           m  .level   .pm /;
vfx(p(pp)) = vmin + (vmax-vmin)/(card(pp)+1)*ord
Solve var1 maximizing m using nlp scenario dict;
xres(i,p)      = px(p,i);
xres('mean',p) = pm(p);
xres('var',p)  = vfx(p);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
38/42


restrict the analysis to either solver or model type. This facility
is even more useful for studying many scenarios since no
commercial solver will provide this information.
An example of sensitivity testing is in the simple oil-refining
model
[MARCO]. Because of pollution control, one of the key
parameters in oil refinery models is an upper bound on the
sulfur content of the fuel oil produced by the refinery. In this
example, the upper bound on the sulfur content of fuel oil was
set to 3.5 percent in the original data for the problem. First, the
model is solved with this value. Next, a slightly lower value of
3.4 percent is used and the model is solved again. Finally, the
considerably higher value of 5 percent is used and the model is
solved for the last time. Key solution values are saved for later
reporting after each solve. This is necessary because a
following solve replaces any existing values. The key solution
values are the activity levels of the process level z, a variable
that is defined over a set of processes p and a set of crude oils
cr. The complete sequence is:
Note that the parameter report is defined over the universal
set or short universe. In general, the universe is useful when
generating reports, otherwise it would be necessary to provide
special sets containing the labels used in the report. Any
mistakes made in spelling labels used only in the report should
be immediately apparent, and their effects should be limited to
the report. The parameter qs is used to set the upper bound on
the sulfur content in the fuel-oil, and the value is retrieved
parameter report(*,*,*) "process level report";
qs('upper','fuel-oil','sulfur') = 3.5  ;
Solve oil using lp maximizing phi;
report(cr,p,'base')  =  z.l(cr,p) ;
report('sulfur','limit','base') = qs('upper','fu
qs ('upper','fuel-oil','sulfur') = 3.4  ;
Solve oil using lp maximizing phi ;
report(cr,p,'one') = z.l(cr,p) ;
report('sulfur','limit','one') = qs ('upper','fu
qs('upper','fuel-oil','sulfur') = 5.0  ;
Solve oil using lp maximizing phi ;
report(cr,p,'two') = z.l(cr,p) ;
report('sulfur','limit','two') = qs('upper','fue
Display report ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
39/42


for the report. Note that the display statement in the final
line is introduced and discussed in detail in chapter The
Display Statement. This example shows not only how simply
sensitivity analysis can be done, but also how the associated
multi-case reporting can be handled.
The output from the display statement is shown below.
Observe that there is no production at all if the permissible
sulfur content is lowered. The case attributes have been listed
in the row SULFUR.LIMIT. Section Global Display Controls
contains more details on how to arrange reports in a variety of
ways.
Note
For other ways to do comparative analyses with
GAMS, see the tutorial Comparative Analyses with
GAMS.
Iterative Implementation of Non-Standard
Algorithms
Another use of multiple solve statements is to permit iterative
solution of different blocks of equations, most often using
solution values from the first solve as data for the next solve.
These decomposition methods are useful for certain classes of
problems because the subproblems being solved are smaller,
and therefore more tractable. One of the most common
examples of such a method is the Dantzig-Wolfe
decomposition.
----    225 PARAMETER report  process level repo
                         base         one       
mid-c .a-dist          89.718                  3
mid-c .n-reform        20.000                   
mid-c .cc-dist          7.805                   
w-tex .cc-gas-oil                               
w-tex .a-dist                                  6
w-tex .n-reform                                1
w-tex .cc-dist                                  
w-tex .hydro                                   2
sulfur.limit            3.500       3.400       
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
40/42


An example of a problem that is solved in this way is a multi-
commodity network flow problem in [DANWOLFE].
Choosing a Solver
After a model has been checked and prepared as described
above, GAMS passes the model to a solver. When the GAMS
system is installed default solvers for all model types are
specified and these solvers are used if the user doesn't specify
anything else. It is easy to switch to other appropriate solvers
provided the user has the corresponding license. There are
multiple ways to switch solvers:
1. Using a command line parameter of the following form:
For example,
2. With an option command of the following form that is
placed before the solve statement:
Here option is a keyword, model_type is the same
model type that is used in the solve statement and
solver_name is the name of one of the available
solvers. For example,
The MINLP=default switches back to the default solver
for the MINLP model type.
3. Instead of providing a particular solver for a model type,
the option Solver can be used to use a given solver for all
model types this solver can handle.
gams mymodel model_type=solver name
gams mymodel lp=cbc
Option model_type=solver_name;
Option LP=cbc, NLP=conopt, MIP=cbc, MINLP=d
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
41/42


4. (Re)running gamsinst at any time and altering the
choice of default solver as described in the installation
notes.
Note
A list of all solvers and current default solvers may
be generated in the listing file with
Option SubSystems;.
Making New Solvers Available with
GAMS
This short section is to encourage those of you who have a
favorite solver not available through GAMS. Linking a solver
program with GAMS requires some programming skills and the
use of libraries provided by GAMS. There is a collection of open
source solver links to GAMS at the COIN-OR project GAMSLinks.
The benefits of a link with GAMS to the developer of a solver
are several. They include:
Immediate access to a wide variety of test problems.
An easy way of making performance comparisons
between solvers.
The guarantee that a user has not somehow provided an
illegal input specification.
Elaborate documentation, particularly of input formats,
is not needed.
Access to the existing community of GAMS users, for
marketing or testing.
This completes the discussion of the model and solve
statements.
Option Solver=cbc;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Model and Solve Statements
https://www.gams.com/latest/docs/UG_ModelSolve.html
42/42


Conditional Expressions,
Assignments and Equations
Table of Contents
Introduction
The Dollar Condition
Logical Conditions
Logical Conditions: Numerical
Expressions
Logical Conditions: Numerical
Relational Operators
Logical Conditions: Logical
Operators
Logical Conditions: Set
Membership and Set Functions
Numerical Values of Logical
Conditions
Mixed Logical Conditions
Nested Dollar Conditions
Conditional Assignments
Dollar on the Left
Sparse Assignments
Dollar on the Right
Conditional Indexed Operations
Conditional Equations
Dollar Operators within the
Algebra of Equations
Dollar Control over the Domain
of Definition
Filtering Sets
Filtering Sets in Assignments
Filtering Controlling Indices in
Indexed Operations
Filtering the Domain of
Definition
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
1/28


Introduction
This chapter deals with the way in which conditional
assignments, expressions and equations are made in GAMS. The
index operations already described are very powerful, but it is
necessary to allow for exceptions of one sort or another. For
example, heavy trucks may not be able to use a particular route
because of a weak bridge, or some sectors in an economy may
not produce exportable products. Exceptions such as these may
easily be modeled with a logical condition combined with the
dollar operator '$', a very powerful feature of GAMS
introduced in this chapter.
This chapter is organized as follows: We will introduce the
general form of the dollar condition first and then we will focus
on the various types of logical conditions. Next, we will discuss
how dollar conditions are used to build conditional
assignments, conditional indexed operations and conditional
equations. We will conclude the chapter by showing that in
certain cases conditions may be modeled using filtering sets
instead of the dollar operator. Programming flow control
features such as the if statement, the loop, the while
statement, and the for statement are not covered in this
chapter. These can be found in the chapter Programming Flow
Control Features.
The Dollar Condition
The dollar operator is one of the most powerful features in
GAMS. The general syntax for a conditional expression is:
term $ logical_condition
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
2/28


Here, term can be a number, a (indexed) symbol, and also a
complex expression. The dollar operator may be read as under
the condition that the following logical_condition
evaluates to TRUE (or is unequal 0).
Consider the following simple condition, where a and b are
scalars.
This can be written in GAMS using the dollar operator as
follows.
Note that the term is the scalar a and the logical condition
is the expression 
. If the condition is not satisfied, no
assignment is made. To make it clear, this conditional
assignment may be read as: 'given that b is greater than 1.5, a
equals 2'.
Logical conditions may take various forms, they are introduced
in the next section. Conditional expressions may be used in the
context of assignments, indexed operations and equations.
These topics are covered in later sections of this chapter.
Note
Logical conditions used with the dollar operator
cannot contain variables. However, variable
attributes are allowed.
Logical Conditions
Logical conditions are special expressions that evaluate to a
value of either TRUE or FALSE. Logical conditions may be
numerical expressions and numerical relations, they may refer
to set membership and they may also contain acronyms. In the
following subsections this is shown in the context of simple
if (b > 1.5), then a = 2
a $ (b > 1.5) = 2 ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
3/28


conditional assignments with the dollar operator on the left-
hand side (compare section Dollar on the Left).
In this section we use many examples to illustrate the concepts
that are being introduced. In all these examples a and b are
scalars, s, t, u and v are parameters, and i and j are sets.
Logical Conditions: Numerical Expressions
Numerical expressions may serve as logical conditions: a result
of zero is treated as the logical value FALSE and a non-zero
result is treated as the logical value TRUE. The following
example illustrates this point.
Here the numerical expression 
 is the logical
condition. The numerical expression is zero if a equals 2, and
non-zero otherwise. Hence the logical value of the expression is
FALSE for 
 and TRUE for all other values of a. The
assignment is only made if the numerical expression evaluates
to TRUE, otherwise no assignment is made.
Attention
Values of the extended range arithmetic such as
inf are also allowed in logical conditions. If the
result of a numerical expression used as a logical
condition takes any of these values, the logical
value is TRUE, even for e.g. eps, which is
numerically 0.
Observe that functions are also allowed in logical conditions. If
they evaluate to zero, the logical condition is FALSE, otherwise
it is TRUE. Consider the following example:
Note that the assignment is only made if the cosine of a does
not equal zero.
b $ (2*a - 4) = 7;
b $ cos(a) = 7;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
4/28


Logical Conditions: Numerical Relational
Operators
Numerical relational operators compare two numerical
expressions and return a logical value. For completeness, all
numerical relational operators are listed in Table 1.
Relation
Operator
Alternative
Notation
Return Values
Strictly less
than
x < y
x lt y
Returns TRUE if
, else
returns FALSE.
Less than or
equal to
x <= y
x le y
Returns TRUE if
, else
returns FALSE.
Equal to
x = y
x eq y
Returns TRUE if
, else
returns FALSE.
Not equal
to
x <> y
x ne y
Returns TRUE if
, else
returns FALSE.
Greater
than or
equal to
x >= y
x ge y
Returns TRUE if
, else
returns FALSE.
Strictly
greater
than
x > y
x gt y
Returns TRUE if
, else
returns FALSE.
Table 1: Numerical Relational Operators
Consider the following examples.
In the first line the logical condition is the relational expression
. The assignment is only made if this expression is
TRUE, that is, if the scalar a is negative. The logical condition in
the second line is a bit more complex. It evaluates to FALSE if
. For all other values of a, it evaluates to TRUE. So
b $ (a < 0) = 10;
b $ (sqr(a) > a) = 12;
a $ ( sum(i, s(i)) > 0 ) = 7;
t(i) $ (a <> 0) = t(i) + 1;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
5/28


the assignment is made for all values of a, except for those
values of a that are in the closed interval 
. Note that if
, then the logical condition in the first line will be TRUE,
so b will become 10. In addition, the logical condition in the
second line will be TRUE, so b will change to 12. The logical
condition in the third line evaluates to TRUE if the sum of all
values of the parameter s is strictly positive. Then a is assigned
the value of 7. The assignment in the last line depends on
whether a is non-zero. If a is zero no assignment is made,
otherwise all entries of the parameter t are updated.
Note that acronyms may also be used with relational operators
to build logical conditions. However, only the equality operator
= and inequality operator <> are allowed in the context of
acronyms, since they have no numerical values and the other
operators would be meaningless. For an example, see section
Acronym Usage.
Logical Conditions: Logical Operators
GAMS offers standard logical operators that may combine two
or more logical conditions to build complex logical expressions.
For example, if several expressions are required to be TRUE
simultaneously, they may be connected with the operator and.
The logical operators available in GAMS are listed in Table 2 and
Table 3. Another way to construct complex logical conditions is
by nesting them. For details, see subsection Nested Dollar
Conditions below.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
6/28


Operation
Operator
Alternative
Notation
Description
Negation
not x
The logical
condition x has to
be FALSE, in
order for the
expression to be
TRUE.
Logical
conjunction
x and y
Two logical
conditions are
TRUE
simultaneously.
Logical
disjunction
x or y
At least one of
two logical
conditions
applies.
Exclusive
disjunction
x xor y
Exactly one of two
logical conditions
applies.
Logical
implication
x imp y
x -> y
If the logical
condition x is
TRUE but at the
same time the
logical condition
y is FALSE, then
the whole
expression is
FALSE, in all
other cases the
expression
evaluates to TRUE
.
Logical
equivalence
x eqv y
x <=> y
Both logical
conditions are
either TRUE
simultaneously or
FALSE
simultaneously
for the whole
expression to be
TRUE.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
7/28


Table 2: Logical Operators
The logical values of these operators are summarized in the
following truth table.
x
y
not x
x and
y
x or
y
x xor
y
x im
y
FALSE
FALSE
TRUE
FALSE
FALSE
FALSE
TRU
FALSE
TRUE
TRUE
FALSE
TRUE
TRUE
TRU
TRUE
FALSE
FALSE
FALSE
TRUE
TRUE
FALS
TRUE
TRUE
FALSE
TRUE
TRUE
FALSE
TRU
Table 3: Truth Table of Logical Operators
The following somewhat artificial examples serve as
illustration.
Note that there are three conditional assignments for the
parameter u. In the first assignment the logical condition is
(not s(i)). This condition holds for all entries of s that are
not specified and therefore zero by default: s('i3') and
s('i5'). Hence u('i3') and u('i5') are assigned the values
of v('i3') and v('i5') respectively. The value of v('i3') is
2 and the value of v('i5') is zero by default. After the first
assignment we have u('i2')=1 and u('i3')=2, all other
values of u are zero. Note that the logical condition failed for
u('i2') and therefore its value remained unchanged. The
logical condition in the second assignment is TRUE for those
labels of the set i that have non-zero entries in the parameters
s, u and t simultaneously. This condition holds only for i2.
Therefore u('i2')=s('i2')=5 and all other values of u
remain unchanged, resulting in non-zero values only for
u('i2') and u('i3'). The logical condition in the last
Set       i     / i1*i5 /;
Parameter s(i)  / i1 3, i2 5, i4 8 /
          t(i)  / i1*i4 13 /
          u(i)  / i2 1 /
          v(i)  / i1 7, i3 2 /;
u(i) $ (not s(i))               = v(i);
u(i) $ (s(i) and u(i) and t(i)) = s(i);
u(i) $ (s(i) or v(i) or t(i))   = 4;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
8/28


assignment evaluates to TRUE for all labels of the set i that
have at least one non-zero entry in the parameters s, v and t.
This holds for all labels except for i5. Therefore u('i5') stays
zero and all other values of u are changed to 4. These examples
demonstrate the power of the dollar operator combined with
logical operators. Even more complex logical conditions are
possible; see subsection Mixed Logical Conditions below for
details.
Logical Conditions: Set Membership and Set
Functions
Apart from numerical and relational expressions, set
membership and functions referencing set elements may be
used as a logical condition. Consider the following example as
illustration for set membership as logical condition.
Note that the set j is a subset of the set i and that the
parameter t is declared but not defined. The conditional
expression t(i)$j(i) in the last line restricts the assignment
to the members of the subset j since only they satisfy the
condition j(i). The values for t('i4') and t('i5') remain
unchanged. In this case this means that they are zero (by
default). Note that there is an alternative formulation for this
type of conditional assignment; for details see subsection
Filtering Sets in Assignments below.
Note
Only the membership of subsets and dynamic sets
may be used as logical conditions.
The use of set membership as a logical condition is an
extremely powerful feature of GAMS, see section Conditional
Equations below for more examples.
Set        i     / i1*i5 /
           j(i)  / i1*i3 / ;
Parameter  s(i)  / i1 3, i2 5, i3 11, i4 8, i5 1
           t(i);
t(i) $ j(i) = s(i) + 3;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
9/28


Logical conditions may contain predefined symbols or
operators that return particular values depending on the
position of elements in sets, the size of sets or the comparison
of set elements to each other or text strings:
Predefined Symbol / Operator
Description and
Comments
sameAs(element1,element2) or
sameAs("text",element2) or
sameAs(element1,"text")
Predefined symbol
that returns TRUE if
element1 is identical
to element2 or
element1 is identical
to text, and FALSE
otherwise.
diag(element1,element2) or
diag("text",element2) or
diag(element1,"text")
Like sameAs, but
returns numerical
value 1 for TRUE and
0 for FALSE.
card(set_name)
Returns the number
of elements in a set.
Note that this can
also be called with a
quoted text and
returns the number of
characters of that text
in that case. For more
details, see section
The Card Operator.
ord(set_name)
Returns the relative
position of an
element in a set. Note
that ord may be used
only with one-
dimensional, static,
ordered sets. For
more details, see
section The Ord
Operator.
Table 4: Predefined Symbols / Operators Referencing Sets
In the following example we have two sets of cities and we
want to know how many of them feature in both sets.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
10/28


Note that in the assignment statement we sum over both sets
and we use the predefined symbol sameAs to restrict the
domain of the indexed operation to those label combinations
(i,j) where sameAs evaluates to TRUE. Thus only identical
elements are counted.
Note that in this example the predefined symbol diag could
have been used with the same result.
The operators ord and card are frequently used to single out
the first or last element of an ordered set. For example, we may
want to fix a variable for the first and last elements of a set:
In the first assignment the variable x is fixed for the first
element of the set i and in the second assignment x is fixed for
the final element of i.
Note
As an alternative to the formulation above, one
could also use the set attributes first and last to
get the same result:
Numerical Values of Logical Conditions
We have seen that logical conditions may take the form of
numerical expressions, expressions with relational operators,
complex expressions using logical operators, set membership
and set functions. However, GAMS does not have a Boolean
data type.
Set     i     / Beijing, Calcutta, Mumbai, Sydne
Set     j     / Rome, Paris, Boston, Cairo, Muni
Scalar  b;
b = sum((i,j)$sameAs(i,j),1);
x.fx(i) $ (ord(i) = 1)       = 3;
x.fx(i) $ (ord(i) = card(i)) = 7;
x.fx(i) $ (i.first) = 3;
x.fx(i) $ (i.last)  = 7;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
11/28


Attention
GAMS follows the convention that the result of a
relational operation is zero if the assertion is FALSE
, and 1 if it is TRUE.
Consider the following example as illustration.
The expression to the right of the assignment evaluates to 2
since both logical conditions within parentheses are TRUE and
therefore assume a value of 1. Note that this is different from
the assignment below:
This assignment evaluates to 1, since both statements to the
left and right of or are TRUE and therefore the whole
expression is TRUE.
Mixed Logical Conditions
The building blocks introduced in the subsections above may
be combined to generate more complex logical conditions.
These may contain standard arithmetic operations, numerical
relational operations and logical operations. All operations,
their symbols and their order of precedence are given in Table
5. Note that 1 denotes the highest order of precedence and 7
denotes the lowest order of precedence. As usual, the default
order of precedence holds only in the absence of parentheses
and operators (symbols) on the same level are evaluated from
left to right.
x = (1 < 2) + (2 < 3);
x = (1 < 2) or (2 < 3)
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
12/28


Type of
Operation
Operation
Operator
Order of
precedence
Standard
arithmetic
operation
Exponentiation
**
1
Standard
arithmetic
operation
Multiplication,
Division
*, /
2
Standard
arithmetic
operation
Unary operators:
Plus, Minus
+, -
3
Standard
arithmetic
operation
Binary
operators:
Addition,
Subtraction
+, -
3
Numerical
Relational
operation
All
<, <=,
=, <>,
>=, >
4
Logical
operation
Negation
not
5
Logical
operation
Logical
Conjunction
and
6
Logical
operation
All other logical
operations
or, xor,
imp, eqv
7
Table 5: Complete Hierarchy for Operator Precedence in GAMS
Note
We recommend to use parentheses rather than
relying on the order of precedence of operators.
Parentheses prevent errors and make the intention
clear.
Consider the following example:
x - 5*y and z - 5
(x - (5*y)) and (z-5)
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
13/28


These two complex logical conditions are equivalent. However,
the parentheses make the second expression easier to
understand.
Some simple examples of complex logical conditions, their
numerical values and their logical values are given in Table 6.
Logical Condition
Numerical
Value
Logical
Value
(1 < 2) + (3 < 4)
2
TRUE
(2 < 1) and (3 < 4)
0
FALSE
(4*5 - 3) + (10/8)
18.25
TRUE
(4*5 - 3) or (10 -
8)
1
TRUE
(4 and 5) + (2*3 <=
6)
2
TRUE
(4 and 0) + (2*3 <
6)
0
FALSE
Table 6: Examples of Complex Logical Conditions
Nested Dollar Conditions
An alternative way to model complex logical conditions is by
nesting them. The syntax is:
Note that in nested dollar conditions all succeeding
expressions after the dollar operator must be enclosed in
parentheses. The nested expression is equivalent to the
following conditional expression that uses the logical operator
and instead of the nesting:
Consider the following example. Note that i, j(i) and k(i)
are sets, and u(i) and v(i) are parameters.
term $ (logical_condition1$(logical_condition2$(
term $ (logical_condition1 and logical_condition
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
14/28


The assignment will be made only for those members of the set
i that are members of both sets j and k. Note the position of
the parentheses in the dollar condition. The assignment
statement above can be rewritten in the following way.
Note
We recommend to use the logical and operator
instead of nesting dollar operators, because this
formulation is easier to read.
Conditional Assignments
A conditional assignment is an assignment statement with a
dollar condition on the left-hand side or on the right-hand
side. Most examples until now were conditional assignments
with the dollar operator on the left.
Attention
The effect of the dollar condition is significantly
different depending on which side of the
assignment it is located.
The next two subsections describe the use of the dollar
condition on each side of the assignment. Note that in many
cases it may be possible to use either of the two forms of the
dollar condition to describe an assignment. We recommend to
choose the clearer formulation.
Note that if the logical condition in an assignment statement
refers to set membership, then under certain conditions the
restriction may be expressed without the use of the dollar
u(i) $ (j(i)$k(i)) = v(i) ;
u(i) $ (j(i) and k(i)) = v(i) ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
15/28


operator. For details, see section Filtering Sets in Assignments
below.
Dollar on the Left
If the dollar condition is on the left-hand side of an
assignment, an assignment is made only in case the logical
condition is satisfied. If the logical condition is not satisfied
then no assignment is made and the previous content of the
parameter on the left will remain unchanged. In case the
parameter on the left-hand side of the assignment has not
previously been initialized or assigned any values, zeros will be
used for any label for which the assignment was suppressed.
Consider the following example adapted from [CHENERY]. Note
that the parameter sig has been previously defined in the
model.
In this assignment rho(i) is calculated and the dollar
condition on the left protects against dividing by zero. If any of
the values associated with the parameter sig turns out to be
zero, no assignment is made and the previous values of rho(i)
remain. As it happens, rho(i) was not previously initialized,
and therefore all the labels for which sig(i) is zero will result
in a value of zero.
Now recall the convention that non-zero implies TRUE and zero
implies FALSE. The assignment above could therefore be
written as:
In the following examples i is a set and s and t are
parameters.
rho(i) $ (sig(i) <> 0) = (1./sig(i)) - 1. ;
rho(i) $ sig(i)  =  (1./sig(i)) - 1. ;
s(i) $ t(i) = t(i);
s(i) $ ((t(i)-1) > 0) = t(i)**0.5;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
16/28


Note that the first assignment is suppressed if the value of the
parameter t equals zero. The second assignment is suppressed
for values of the parameter t that are smaller or equal to 1.
Note
The first of the last two examples is special in the
way that the logical condition used with the dollar
on the left and the expression on the right hand
side of the assignment are actually the same. This
allows to use a shorter notation using the
combined $= assignment. That assignment is
equivalent to the following one (which called sparse
assignment):
Sparse Assignments
Sparse assignments will assign a value to the left-hand side of
the = sign only if the right-hand side is nonzero. This behavior
is triggered using the $= notation as in the following example.
Note that in the final assignments above, the values of the
parameter d3(i) are replaced with values from parameter
d2(i) only if the entry in d2(i) is non-zero, the other values
are left untouched. Both assignments are equivalent.
s(i) $= t(i);
Set       i                                     
Parameter d1(i)  "Initial data"                 
          d2(i)  "Data to be used to overwrite d
          d3(i)  "Empty data parameter";
    
* Initialize d3 to d1
d3(i) = d1(i);
* Use dollar on the left to overwrite d3 with no
d3(i)$d2(i) = d2(i);
* Result: d3('a')=1; d3('b')=-2; d3('c')=1;
* Re-Initialize d3 to d1
d3(i) = d1(i);
* Use sparse assignment to overwrite d3 with non
d3(i) $= d2(i);
* Result: d3('a')=1; d3('b')=-2; d3('c')=1;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
17/28


Dollar on the Right
If the dollar condition is on the right-hand side of an
assignment statement, an assignment will always be made. In
case the logical condition is not satisfied the value of zero is
assigned.
Above we had the following simple conditional assignment:
Now we move the dollar condition to the right-hand side:
This is equivalent to:
Note that an if-then-else type of construct is implied, but
the else operation is predefined and never made explicit. The
else could be made explicit with the following formulation:
The use of this feature is more apparent in instances when an
else condition needs to be made explicit. Consider the next
example adapted from the fertilizer model
[FERTD] . The set i is the set of plants, and we are calculating
mur(i), the cost of transporting imported raw materials. In
some cases a barge trip must be followed by a road trip
because the plant is not alongside the river and we must
combine the separate costs. The assignment is:
a $ (b > 1.5) = 2;
a = 2 $ (b > 1.5)  ;
if (b > 1.5)   then (a = 2),    else (a = 0)
a = 2 $ (b > 1.5) + 0 $ (b <= 1.5) ;
mur(i) = (1.0 +. 0030*ied(i,'barge')) $ ied(i,'b
       + (0.5 + .0144*ied(i,'road' )) $ ied(i,'r
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
18/28


This means that if the entry in the distance table ied is not
zero, then the cost of shipping using that link is added to the
total cost. If there is no distance entry, there is no contribution
to the cost, presumably because that mode is not used.
Consider another example for a conditional assignment with
the dollar operator on the right:
Here a and b are scalars, i is a set and t is a parameter. If the
scalar a is positive, the scalar b is assigned the sum of all
values of the parameter t plus 4. If a is zero or negative, b
becomes just 4. Note that the sum is only computed if the
condition holds, this potentially makes the program faster.
Conditional Indexed Operations
We have seen how exceptions in assignments are modeled with
dollar conditions. Dollar conditions are also used in indexed
operations, where they control the domain of operation. This is
conceptually similar to the conditional assignment with the
dollar on the left.
Consider the following example adapted from [GTM], a gas
trade model for interrelated gas markets. Here the set i
contains supply regions and the parameter supc models supply
capacities. The scalar tsupc is computed with the following
statement:
This assignment restricts the sum to the finite values of the
parameter supc.
In indexed operations the logical condition is often a set. This
set is called the conditional set and assignments are made only
for labels that are elements of the conditional set. This concept
plays an important role in dynamic sets.
b = sum(i,t(i)) $ (a > 0) + 4;
tsupc  =  sum(i $ (supc(i) <> inf), supc(i))  ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
19/28


Multi-dimensional sets are introduced in section Multi-
Dimensional Sets. In the example used there a two-dimensional
set is used to define the mapping between countries and ports.
Another typical example for a multi-dimensional set is a set-to-
set mapping that defines the relationship between states and
regions. This is useful for aggregating data from the state to the
regional level. Consider the following example:
The set corr links the states to their respective regions, the
parameter income is the income of each state. The parameter y
is computed with the following assignment statement:
The conditional set corr(r,s) restricts the domain of the
summation: for each region r the summation over the set s is
restricted to the label combinations (r,s) that are elements of
the set corr(r,s). Conceptually, this is analogous to the
Boolean
value TRUE or the arithmetic value non-zero. The effect is that
only the contributions of vermont and maine are included in
the total for north, and south is the sum of the incomes from
only texas and florida.
Note that the summation above can also be written as:
In this formulation the parameter income is controlled by the
conditional set corr instead of the index s. Note that both
formulations yield the same result, but the second alternative
is more difficult to read.
Sets r          "regions" / north, south /
     s          "states"  / florida, texas, verm
     corr(r,s)            / north.(vermont,maine
                            south.(florida,texas
Parameter y(r)      "income for each region"
          income(s) "income of each state"
                          / florida   4.5, vermo
                            texas     6.4, maine
y(r) = sum(s $ corr(r,s), income(s)) ;
y(r) = sum(s,income(s) $ corr(r,s));
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
20/28


In the next example the logical condition on the right-hand
side appears in the context of an indexed operation, but it does
not refer to the index. Thus it is treated similarly to a dollar on
the right logical condition. Note that a and b are scalars, i is a
set and s is a parameter.
Here the scalar b is assigned the sum of the values of the
parameter s only if a does not equal zero. Otherwise b will be
assigned the value zero. Observe that the following alternative
formulation will generally be faster than the assignment above:
Note that if the logical condition in the context of indexed
operations refers to set membership, then under certain
conditions the restriction may be expressed without the use of
the dollar operator. For details, see section Filtering Controlling
Indices in Indexed Operations below.
Conditional Equations
The dollar operator is also used for exception handling in
equations. The next two subsections discuss the two main uses
of dollar operators in the context of equations: in the body of
an equation and over the domain of definition.
Dollar Operators within the Algebra of Equations
A dollar operator in the algebraic formulation of an equation is
analogous to the dollar control on the right of assignments, as
presented in section Dollar on the Right. Assuming that "the
right" means the right of the '..' then the analogy is even
closer. As in the context of assignments, an if-else operation
is implied. It is used to exclude parts of the definition from
some of the generated constraints.
b = sum(i $ a, s(i));
b = sum(i, s(i)) $ a;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
21/28


Consider the following example adapted from the production
model
[CHENERY].
Note that in the equation definition in the last line, the term
(e(i) - m(i)) on the right-hand side of the equation is
added only for those elements of the set i that also belong to
the subset t(i), so that the element services is excluded.
Further, conditional indexed operations may also feature in
expressions in equation definitions. The supply balance
equation from the gas trade model [GTM] is an example. Note
that the set i contains the supply regions, the set j contains
the demand regions, and the two-dimensional set ij is the set
of feasible links; the variable x denotes the shipment of natural
gas and the variable s denotes the regional supply.
Similar to the assignment example seen before, the conditional
set ij(i,j) restricts the domain of the summation: for each
supply region i the summation over the demand regions j is
restricted to the label combinations (i,j) that are elements of
the set of feasible links ij(i,j).
Dollar Control over the Domain of Definition
In case constraints should only be included in the model if
particular conditions are met, a dollar condition in the domain
of definition of an equation may be used to model this
restriction. Such a dollar condition is analogous to the dollar
control on the left of assignments. Assuming that "the left"
Set        i       "sectors"     / light-ind, fo
           t(i)    "tradables"   / light-ind, fo
Variables  x(i)    "quantity of output"
           y(i)    "final consumption"
           e(i)    "quantity of exports"
           m(i)    "quantity of imports";
Equations  mb(i)   "material balance";
mb(i)..    x(i) =g= y(i) + (e(i) - m(i)) $ t(i) 
sb(i)..  sum(j $ ij(i,j), x(i,j))  =l=  s(i)  ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
22/28


means the left of the symbols '..' then the analogy is even
closer.
Note
The dollar control over the domain of definition of
equations restricts the number of constraints
generated to less than the number implied by the
domain of the defining sets.
Consider the following example adapted from the Andean
fertilizer model [ANDEAN] :
Here w, wp and te are sets, ple is a two-dimensional
parameter, yw is a variable and dpack is a scalar. Note that the
dollar condition restricts the first two indices of the domain of
the equation to those label combinations that have non-zero
entries in the two-dimensional parameter ple.
Sometimes the desired restriction of an equation may be
achieved either way: through a condition in the algebra or a
condition in the domain of definition. Compare the following
two lines, where eq1 and eq2 are equations, i and j are sets, b
is a scalar, s is a parameter and x is a two-dimensional
variable.
In the first line the dollar condition is in the domain of
definition, in the second line the dollar conditions are in the
algebraic formulation of the equation. If b is non-zero, the
generated equations eq1 and eq2 will be identical. However, if
b is 0, no equation eq1 will be generated, but for each i we will
see a trivial equation eq2 of the form 0 =g= 0;.
Note that if the logical condition in the domain of definition of
an equation refers to set membership, then under certain
conditions the restriction may be expressed without the use of
gple(w,wp,te) $ ple(w,wp)..  yw(w,te) - yw(wp,te
eq1(i) $ b..  sum(j, x(i,j))     =g=  -s(i);
eq2(i)..      sum(j, x(i,j)) $ b =g=  -s(i) $ b;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
23/28


the dollar operator. For details, see section Filtering the
Domain of Definition below.
Filtering Sets
If the logical condition refers to set membership, the restriction
modeled with a dollar condition may sometimes be achieved
without the dollar operator. Consider the following statement,
where i and j(i) are sets, and u and s are parameters:
Note that the assignment is made only for those elements of
the set i that are also elements of the subset j. This
conditional assignment may be rewritten in a shorter way:
In this statement the assignment has been filtered through the
condition without the dollar operator by using the subset j as
the domain for the parameters u and s. This formulation is
cleaner and easier to understand. It is particularly useful in the
context of multi-dimensional sets (tuples), and it may be used
in assignments, indexed operations and the domain of
definition of equations.
Filtering Sets in Assignments
Suppose we want to compute the transportation cost between
local collection sites and regional transportation hubs for a
fictional parcel delivery service. We define sets for the
collection sites and transportation hubs and a two-dimensional
set where the collection sites are matched with their respective
hubs:
u(i) $ j(i) = s(i) ;
u(j) = s(j) ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
24/28


The distance between collection sites and transportation hubs
is given in the table. The last line is a conditional assignment
for the parameter shipcost. This assignment is only made if
the label combination (i,j) is an element of the set r. Note
that in each instance the indices i and j appear together. Thus
the assignment may be simply written as:
Note that the assignment is explicitly restricted to the members
of the set r; the dollar operator is not necessary. Observe that
if the indices i or j appear separately in any assignment, the
above simplification cannot be made. For example, consider
the case where the shipping cost depends not only on the
parameter factor and the distance between collection sites
and regional hubs, but also on the congestion at the regional
hub. We introduce a new parameter congestfac that models
the congestion at each regional hub and is indexed only over
the set j:
Set i       "local collection sites"       / mia
    j       "regional transportation hubs" / new
Set r(i,j)  "regional transportation hub for eac
    boston   .newyork
    miami    .atlanta
    houston  .atlanta
    chicago  .detroit
    phoenix  .losangeles  / ;
Table distance(i,j)     "distance in miles"
           newyork     detroit  losangeles     a
miami         1327        1387        2737      
boston         216         699        3052      
chicago        843         275        2095      
houston       1636        1337        1553      
phoenix       2459        1977         398      
Parameter factor        "cost estimate per unit 
          shipcost(i,j) "cost of transporting pa
factor = 0.009 ;
shipcost(i,j) $ r(i,j) = factor*distance(i,j) ;
shipcost(r) = factor*distance(r) ;
Parameter congestfac(j)   "congestion factor"  /
   newyork      1.5
   detroit      0.7
   losangeles   1.2
   atlanta      0.9/ ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
25/28


The new cost of shipment is computed as follows:
Note that this conditional assignment cannot be reformulated
as:
In the representation above the index j appears on the right-
hand side, but not on the left-hand side. GAMS will flag this
assignment as an error. However, the following representation
will work:
In this formulation the set r is explicitly denoted as a tuple of
the sets i and j. The set j may then appear on the right-hand
side.
Filtering Controlling Indices in Indexed
Operations
Similarly, the controlling indices in indexed operations may be
filtered through the conditional set without the use of the
dollar operator. We continue with the shipping cost example
from the last subsection. The total cost of shipment is obtained
through the equation that follows. We also include the variable
definitions for clarity.
Here the variable shipped is the number of parcels shipped
from the local collection site i to the regional transportation
hub j, and the variable totcost is the total cost of all
shipments. Note that she summation in the equation is
shipcost(i,j) $ r(i,j) = factor*congestfac(j)*di
shipcost(r) = factor*congestfac(j)*distance(r) ;
shipcost(r(i,j)) = factor*congestfac(j)*distance
Variable shipped(i,j), totcost ;
Equation costequ ;
costequ.. totcost =e= sum((i,j) $ r(i,j), shipco
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
26/28


restricted to the label combinations that are elements of the
set r. Alternatively, the equation above may be written as:
In this formulation the summation is performed explicitly only
over the elements of the set r, no dollar condition is necessary.
However, if the expression in the equation included a term
dependent only on index j, then we would have to reformulate
differently. Suppose the equation included also the congestion
factor congestfac that is indexed only over j:
In this case the equation needs to be simplified in the following
way:
Like before, the domain of the indexed operation sum is the set
r. But this time the domain of r has to be named explicitly, so
that the parameter congestfac which is indexed only over the
set j is permitted in the scope of the indexed operation. Note
that this reasoning is analogous to the reasoning for filtering
sets in assignments in the subsection above.
Filtering the Domain of Definition
The rules for filtering sets that we have introduced in
subsections Filtering Sets in Assignments and Filtering
Controlling Indices in Indexed Operations also apply in the
context of equation domains. We continue with the parcel
transport example introduced above and add a binary variable
bin, the parameter bigM and the equation connect to the
model. Recall that shipped(i,j) is a variable and r(i,j) is a
set.
costequ.. totcost =e= sum(r, shipcost(r)*shipped
cost.. totcost =e= sum((i,j) $ r(i,j), factor*co
cost.. totcost =e= sum(r(i,j), factor*congestfac
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
27/28


The dollar condition restricts the domain of definition of the
equation connect to those label combinations of the sets i
and j that are elements of the set r. The equation relates the
continuous variable shipped(i,j) to the binary variable
bin(i,j). Note that each domain in the equation is the index
pair (i,j). So the equation may be simplified as follows:
In this formulation the domain of the equation is explicitly
restricted to the members of the set r, without the use of a
dollar condition. Note that if the right-hand side of the
equation contained any term that was indexed over i or j
separately, then the domain of definition of the equation would
have to be simplified as:
The reasoning is the same as in the case of assignments and
indexed operations.
Parameter        bigM(i,j) ;
Binary variable  bin(i,j) ;
Equation         connect(i,j) ;
connect(i,j) $ r(i,j).. shipped(i,j) =l= bigM(i,
connect(r).. shipped(r) =l= bigM(r)*bin(r) ;
connect(r(i,j))
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Conditional Expressions, Assignments and Equations
https://www.gams.com/latest/docs/UG_CondExpr.html
28/28


Programming Flow Control
Features
Table of Contents
Introduction
The If Statement
The If Statement: Syntax
The If Statement: Examples
The Loop Statement
The Loop Statement: Syntax
The Loop Statement: Examples
The While Statement
The While Statement: Syntax
The While Statement: Examples
The For Statement
The For Statement: Syntax
The For Statement: Examples
The Repeat Statement
The Repeat Statement: Syntax
The Repeat Statement:
Examples
The Break Statement
The Break Statement: Syntax
The Break Statement: Examples
The Continue Statement
The Continue Statement: Syntax
The Continue Statement:
Examples
The Abort Statement
The Abort Statement: Syntax
The Abort Statement: Examples
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 15:46
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
1/23


Introduction
In this chapter we will describe the programming flow control
features available in GAMS. The if statement facilitates
expressing complex conditional statements (see also chapter
Conditional Expressions, Assignments and Equations). In
addition, GAMS offers four loop constructs to handle looping
requirements: the loop statement, the while statement, the for
statement and the repeat statement. At the end of this chapter
we will introduce the break, and continue statements, which
give additional control over the execution of loop structures,
and the abort statement, a statement that may be used to
terminate the execution of a program.
Note that this chapter deals with programming flow control
features at execution time. In addition, GAMS provides a dollar
control option that allows for conditional processing of input
files at compile time. For more information, see the detailed
description of the option $if. For details on dollar control
options in general, see chapter Dollar Control Options.
The If Statement
The if statement is useful to branch conditionally around a
group of statements. In some cases this can also be written as a
set of dollar conditions, but the if statement may make the
GAMS code more readable. An optional else and/or elseif
part allows the user to formulate traditional if-then-else
constructs.
The If Statement: Syntax
The syntax for an if statement in GAMS is as follows:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
2/23


The keyword if indicates that this is an if statement. The
logical condition is followed by one or more statements that
are executed if the logical condition is satisfied. For details on
the various forms of logical conditions in GAMS, see sections
Logical Conditions and Filtering Sets. The if statement may
end at this point, without any specifications for cases when the
logical condition is FALSE and no action is taken in these
cases. However, GAMS also allows further specifications:
optional alternative if tests and optional statements for cases
when all previous if tests have failed. The keyword elseif
introduces an alternative if test with a logical condition and
one or more statements. Note that the elseif case is optional
and may be repeated multiple times. Note further that the
elseif case implies that the logical condition of the if case
has not been satisfied. The keyword else introduces the final
part of the construct. It is optional and allows specification for
cases when the logical condition of the if case (and possibly
the elseif case(es)) has not been satisfied.
Attention
Only execution statements are permitted in
programming flow control statements.
Consequently declaration statements and equation
definitions are not allowed inside an if statement.
Examples are given in the next subsection. Note that there is an
alternative syntax that is more in line with the syntax of some
popular programming languages. For more information, see the
detailed description of the dollar control option onEnd.
The If Statement: Examples
Consider the following set of conditional assignment
statements that use dollar conditions:
if (logical_condition,
    statement; {statement;}
{ elseif logical_condition, 
    statement; {statement;} }
[ else 
    statement; {statement;} ]
);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
3/23


They may be expressed using an if-elseif-else statement:
Note that the body of the if statement may contain solve
statements. For instance, consider the bit of GAMS code that
follows. Note that ml is a GAMS model, z is a free variable, j is
a set and x is a variable.
First the model ml is solved. For details on solve statements in
GAMS, see section The Solve Statement. Then a post solution
analysis is done with the if statement. If the model is
infeasible, the upper bound on the variable x is relaxed and the
model is solved again. If the original model is not infeasible
and it is not optimal either, then the compilation is aborted
and the error message above is reported. For more information
on GAMS output, see chapter GAMS Output, particularly
subsection Model Status for a list of all GAMS model statuses.
The display statement is introduced in chapter The Display
Statement. For details on the abort command, see abort.
p(i)$(f <= 0) = -1 ;
p(i)$((f > 0) and (f < 1)) = p(i)**2 ;
p(i)$(f >= 1) = p(i)**3 ;
q(j)$(f <= 0) = -1 ;
q(j)$((f > 0) and (f < 1)) = q(j)**2 ;
q(j)$(f >= 1) = q(j)**3 ;
if (f <= 0,
    p(i) = -1 ;
    q(j) = -1 ;
elseif ((f > 0) and (f < 1)),
    p(i) = p(i)**2 ;
    q(j) = q(j)**2 ;
else
    p(i) = p(i)**3 ;
    q(j) = q(j)**3 ;
) ;
solve ml using lp minimizing z;
if (ml.modelstat = 4,
     display "model ml was infeasible, relax bou
     x.up(j) = 2*x.up(j) ;
     solve ml using lp minimizing z ;
else
    if (ml.modelstat <> 1,
        abort "error solving model ml" ;
    );
);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
4/23


The following GAMS code is illegal since it is not permitted to
define equations inside an if statement.
The following GAMS code is also illegal since declarations
inside an if statement are not allowed.
The Loop Statement
The loop statement facilitates executing a group of statements
for each member of a set. Loop statements are particularly
useful for cases when parallel assignments are not sufficient.
This is the case most often when there is no analytic
relationship between the values to be assigned to a parameter.
It is, of course, also useful to have a looping statement for
general programming.
The Loop Statement: Syntax
The syntax for the loop statement in GAMS is as follows:
The keyword loop indicates that this is a loop statement. The
index_list is the controlling domain of the loop. Note that
loops may be controlled by more than one set. In this case
parentheses are required around the index list, which is also
called the loop set(s). Observe that dynamic sets are allowed as
loop sets. The loop set(s) may be restricted by a logical
condition. For details on the various forms of logical conditions
if (s > 0,
    eq.. sum(i,x(i)) =g= 2 ;
);
if (s > 0,
   scalar y ; y = 5 ;
);
loop(index_list[$(logical_condition)],
     statement; {statement;}
) ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
5/23


in GAMS, see sections Logical Conditions and Filtering Sets. For
an introduction to dollar conditions in general, see chapter
Conditional Expressions, Assignments and Equations.
The index list is followed by one or more statements. Except for
the final statement, each statement must end with a semicolon
';'. The loop statements are executed for each member of the
controlling domain in turn. The order of evaluation is the entry
order of the labels. A loop is thus another, more general, type
of indexed operation.
Attention
Only execution statements are permitted in
programming flow control statements.
Consequently declaration statements and
equation definitions are not allowed inside a
loop statement.
It is illegal to modify any controlling set
inside the body of the loop.
Loop statements in GAMS are often used for iterative
calculations, generating reports with put statements and doing
scenario based studies with solve statements. Examples are
given in the next subsection. Note that there is an alternative
syntax that is more in line with the syntax of some popular
programming languages. For more information, see the detailed
description of the dollar control option onEnd.
The Loop Statement: Examples
Consider a hypothetical case when a growth rate is empirical:
The loop statement is then used to calculate the cumulative
sums iteratively:
Set        t          / 1985*1990 /;
Parameter  pop(t)     / 1985  3456 /
           growth(t)  / 1985  25.3,  1986  27.3,
                        1988  27.1,  1989  26.6,
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
6/23


In this example the driving set is t and we have just one
statement in the scope of the loop.
The following small artificial examples illustrate the effects of a
dollar condition in a loop statement.
In the first loop statement the controlling domain is the set
pair (i,j). It is restricted to those label combinations whose
values associated with the parameter q are greater than zero.
The logical condition in the second loop statement is
. This is shorthand for 
. The
domain in the third loop statement is restricted to those
elements of the set i where the sum over j of the absolute
values of the parameter q does not equal zero. Note that this
condition is satisfied only for the label "i1". Observe that i
and j are both ordered sets. In the fourth loop statement the
first and the last element of the set j are excluded. For more on
the set operators ord and card, see sections The Ord Operator
and The Card Operator respectively. The dollar control in the
last loop statement excludes all label combinations that are
not members of the set k. For further details on dollar
conditions, see chapter Conditional Expressions, Assignments
and Equations.
Note
The dollar condition may be replaced by an if
statement; see the example below.
loop(t, pop(t+1)  = pop(t) + growth(t) ) ;
Sets       i       / i1*i3 /
           j       / j1*j5 /
           k(i,j)  / i1.j1, i1.j3, i3.j3, i3.j5 
Parameter  c(i)    / i1 3, i2 1 /
           q(i,j)  / i1.j1 1, i1.j2 3, i1.j4 2 /
Scalars    x, y, z;
x = 1; y = 3; z = 1;
loop ( (i,j) $ (q(i,j) > 0), x = x + q(i,j));
loop ( i $ (c(i) + c(i)**2), z = z + 1);
loop ( i $ sum(j, abs(q(i,j))), z = z + 1);
loop ( j $ (ord(j) > 1 and ord(j) < card(j)), z 
loop ( (i,j) $ k(i,j), y = y + ord(i) + 2*ord(j)
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
7/23


The next example shows how a model can be solved for each
element of a set i with different data using a loop statement.
Note that problemdata is a scalar, g(i) and d(i) are
parameters, mymodel is a GAMS model and profit is a free
variable.
In the first statement some data in the model is updated in
accordance with the 
 element of the parameter g. In the
second statement the model is solved. For details on the solve
statement, see section The Solve Statement. The objective
value for each iteration is saved in the parameter d in the third
statement.
A loop is often used to perform iterative calculations. Consider
the following example, which finds square roots by Newton's
method. This example is purely for illustration - in practice, the
function sqrt should be used. Newton's method is based on
the assertion that if  is an approximation to the square root of
, then 
 is a better approximation.
Note that in this example the dollar condition in the loop does
not restrict the driving set i, but it is used to terminate the
loop procedure. The scalar curacc is updated in every
loop (i,
  problemdata = g(i);
  solve mymodel using lp maximizing profit;
  d(i) = profit.l;
);
Set       i         "set to drive iterations"   
Parameter value(i)  "used to hold successive app
Scalars   target    "number whose square root is
          sqrtval   "final approximation to sqrt
          curacc    "accuracy of current approxi
          reltol    "required relative accuracy"
abort$(target <= 0) "argument to newton must be 
value("i-1") = target/2  ;
curacc       =  1  ;
loop(i$(curacc > reltol),
       value(i+1) =  0.5*(value(i) + target/valu
       sqrtval    =  value(i+1);
       curacc     =  abs (value(i+1)-value(i))/(
) ;
abort$(curacc > reltol) "square root not found"
option decimals=8;
display  "square root found within tolerance",  
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
8/23


iteration. As soon as it becomes equal to or smaller than the
required relative accuracy reltol the loop stops. As the output
below shows, this is the case after seven iterations. The body of
the loop statement consists of three statements. The first
statement calculates the current approximation and assigns it
to the parameter value. The second statement updates the
scalar sqrtval, and the third statements computes the
accuracy of the current approximation in each iteration. Note
that before and after the loop statement we added lines to
account for special cases. For details on the abort statement,
see section The Abort Statement at the end of this chapter. The
output generated by the display statement is given below.
Note that a statement within the body of a loop may be an if
statement (or any other programming flow control statement).
Moreover, the logical condition in a loop statement may be
expressed with an if statement instead of a dollar condition.
The following example serves as illustration. Observe that k is a
set and s, t, u and a are parameters.
Note that if the logical condition is not satisfied the assignment
is not made and the parameter u remains unchanged.
Recall that subsets are connected with their supersets by arcs
thus building a domain tree where the root node is the
universal set. The following example demonstrates how the
domain tree may be used in a loop statement.
----     19 square root found within tolerance
----     19 PARAMETER SQRTVAL              =   4
                                                
----     19 PARAMETER VALUE         used to hold
i-1 11.72800000,    i-2  6.86400000,    i-3  5.1
i-5  4.84314711,    i-6  4.84313948,    i-7  4.8
loop (k,
   if((s(k) < 0 and t(k)),
      u(k) = a(k);
   );
);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
9/23


Observe that the looping set is i(jjj). This means that we
loop over those elements of i that are also elements of the set
jjj. This construct is permitted since i is in the domain tree
on the path from jjj to the universe or universal set. It is
allowed to go up the domain tree on one path and go down on
another path. Therefore all the elements of jjj are assigned to
ii. The outcome of the display statement confirms this:
The While Statement
The while statement facilitates the repeated execution of one
or more statements as long as a logical condition is satisfied.
The While Statement: Syntax
The syntax for the while statement in GAMS is as follows:
The keyword while indicates that this is a while statement.
Inside the while statement a logical condition is followed by
one or more statements. For details on the various forms of
logical conditions in GAMS, see sections Logical Conditions and
Filtering Sets. The statements are executed as long as the
logical condition is TRUE.
Set i       / i1*i10 /
    ii(i) 
    j(i)    / i1*i9 / 
    jj(j)   / i1*i8 /
    jjj(jj) / i1*i7 /;
loop(i(jjj), ii(i) = yes;);
display ii;
----     8 SET ii
i1,    i2,    i3,    i4,    i5,    i6,    i7
while(logical_condition,
      statement; {statement;}
);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
10/23


Attention
Only execution statements are permitted in
programming flow control statements.
Consequently declaration statements and equation
definitions are not allowed inside a while
statement.
Examples are given in the next subsection. Note that there is an
alternative syntax that is more in line with the syntax of some
popular programming languages. For more information, see the
detailed description of the dollar control option onEnd.
The While Statement: Examples
Consider the following simple example:
Note that the scalar x is increased in each iteration until it
equals 10. Note further, that to ensure an exact result, in
numerical comparisons we need a stable check like we have
above (round(x,2) < 10), otherwise rounding errors may
occur. As soon as x reaches 10, the logical condition is no
longer satisfied and therefore there will be no further passes.
Hence the final value of x equals 10.
Note that the number of passes in a while statement may be
restricted using the command line parameter or option forlim.
For details on command line parameters and options, see
section Specifying Options Through the Command Line and
chapter The Option Statement respectively.
While statements may be used to control the solve
statement. For instance, consider the following implementation
of a random multi-start method for non-convex optimization.
Scalar x; x = 1;
while ( round(x,2) < 10,
   x = x + 0.01;
);
display x;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
11/23


Note that we start from a random starting point by setting the
initial level values randomly between the upper and lower
bounds. This assumes that the bounds have been previously
specified and are not infinity. When the method improves, that
is, if the logical condition (obj.l < globmin) is satisfied, the
best known solution is stored in the scalar globmin. The level
values associated with the best known solution so far are then
saved in the parameter bestsol. This procedure is repeated
1000 times. The model [PRIME] is another example where the
use of the while statement is illustrated. In this model the set
of all prime numbers smaller than 200 is generated.
The following GAMS code is illegal since equation definitions
inside a while statement are not permitted.
The following GAMS code is also illegal since declarations
inside a while statement are not allowed.
The For Statement
The for statement provides a compact way to iterate over a
range of values and execute one or more statements each time.
scalar count   /  1  /;
scalar globmin / inf /;
option bratio = 1 ;
while(count <= 1000,
      x.l(j) = uniform(x.lo(j),x.up(j)) ;
      solve ml using nlp minimizing obj ;
      if (obj.l < globmin,
          globmin = obj.l ;
          bestsol(j) = x.l(j) ;
      ) ;
      count = count+1 ;
) ;
while(s > 0,
      eq.. sum(i,x(i)) =g= 2 ;
);
while(s > 0,
      scalar y ; y = 5 ;
);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
12/23


The For Statement: Syntax
The syntax for the for statement in GAMS is as follows:
The keyword for indicates that this is a for statement. The
scalar a begins with the real number start_value and is
changed after each pass of the loop by the increment incr
until it reaches the real number end_value. Note that the
specification of an increment is optional, the default is 1. If the
increment is given, it has to be a positive real number. Note
further that to indicates that the scalar a is increased and
downto indicates that it is decreased. In each iteration one or
more statements are executed.
Attention
Only execution statements are permitted in
programming flow control statements.
Consequently declaration statements and equation
definitions are not allowed inside a for statement.
Examples are given in the next subsection. Note that there is an
alternative syntax that is more in line with the syntax of some
popular programming languages. For more information, see the
detailed description of the dollar control option onEnd.
The For Statement: Examples
Consider the following simple example:
Note that negative real numbers are possible for the start and
end values. The resulting listing file will contain the following
lines:
for (a = start_value to|downto end_value [by inc
     statement; {statement;}
);
Scalar s;
for (s = -3.8 to -0.1 by 1.4,
     display s ;
);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
13/23


Observe that the value of s was increased by 1.4 with each pass
of the loop as long as it did not exceed -0.1. In the next example
the value of s is decreased:
Note that the number of passes in a for statement may be
restricted using the command line parameter or option forlim.
For details on command line parameters and options, see
section Specifying Options Through the Command Line and
chapter The Option Statement respectively.
Like while statements, for statements may be used to control
the solve statement. The following example illustrates the use
of the for statement by replicating the random search for a
global optimum of a non-convex model that we discussed
above.
Note that the logical condition in the while loop (
count <= 1000) is replaced by the specification of the range
of values for the scalar i. The body of the for loop is identical
to the body of the while loop, except for the statement to
update the scalar count that we needed in the while loop.
This demonstrates the similarities and differences between the
two loops.
----      3 PARAMETER s                    =    
----      3 PARAMETER s                    =    
----      3 PARAMETER s                    =    
Scalar s;
for (s = 3 downto -0.1 by 1.4,
     display s ;
);
scalar i ;
scalar globmin / inf / ;
option bratio = 1 ;
for (i = 1 to 1000,
     x.l(j) = uniform(x.lo(j),x.up(j)) ;
     solve ml using nlp minimizing obj ;
     if (obj.l < globmin,
         globmin = obj.l ;
         bestsol(j) = x.l(j) ;
     );
);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
14/23


The following GAMS code is illegal since it is not allowed to
define equations inside a for statement.
The following GAMS code is also illegal since declarations
inside a for statement are not permitted.
The Repeat Statement
The repeat statement facilitates the repeated execution of one
or more statements. This is done unconditionally at least once
and stopped when a logical condition is satisfied.
The Repeat Statement: Syntax
The syntax for the repeat statement in GAMS is as follows:
The keyword repeat indicates that this is a repeat statement.
One or more statements are executed in each iteration. The
keyword until introduces the termination criterion: if the
logical condition is satisfied, the repeat loop is terminated.
For details on the various forms of logical conditions in GAMS,
see sections Logical Conditions and Filtering Sets.
Note that the repeat statement is similar to the while
statement, but a repeat loop is guaranteed to be executed at
least one time since the logical condition is stated after the
statements.
for (s = 1 to 5,
     eq.. sum(i,x(i)) =g= 2 ;
);
for (s = 1 to 5,
     scalar y ; y = 5 ;
);
repeat ( 
    statement; {statement;}
until logical_condition );
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
15/23


Attention
Only execution statements are permitted in
programming flow control statements.
Consequently declaration statements and equation
definitions are not allowed inside a repeat
statement.
Examples are given in the next subsection.
The Repeat Statement: Examples
Consider the following simple example:
The scalar a is increased in each iteration by 1. If a equals 5, the
termination criterion is satisfied and the loop stops. Note that
this example works nicely since both, the scalar and the
increment, are integer. In case the entity on the right-hand side
of the termination condition is not an integer or the increment
is not an integer, we recommend a formulation of the check
that is more stable to avoid rounding errors. An example for a
stable termination condition follows.
Observe that in the next example the termination condition is
TRUE from the start. In this case the statement in the body of
the repeat statement is executed once and then the loop is
terminated. Hence the final value of a will be 5.
Scalar a / 1 /;
repeat ( 
    a = a + 1;
    display a;
until a = 5 );
Scalar a / 1 /;
repeat (
    a = a + 0.1;
    display a;
until abs(a-5) < 1e-6 );
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
16/23


Note that the number of passes in a while statement may be
restricted using the command line parameter or option forlim.
For details on command line parameters and options, see
section Specifying Options Through the Command Line and
chapter The Option Statement respectively.
Here is a little more complex example. A repeat statement is
used to narrow the interval where a quadratic function passes
through zero. Note that, as is often the case, one of the
statements in the repeat loop is another programming flow
control statement, in this case an if statement.
The result of the display statement shows that the value of
min is 1.892 and the value of max is 2.432, the interval was
narrowed to 0.54, which is just a little less than the value of inc
. As expected, function_value1 and function_value2 differ
Scalar a / 4 /;
repeat (
    a = a + 1;
    display a;
until a >= 3 );
Scalar max             "current upper boundary o
       min             "current lower boundary o
       root            "value where function equ
       function_value1 "function value at min"
       function_value2 "function value at max"
       tolerance       "tolerance for root"     
       signswitch      "indicates that sign swit
       inc             "increment to try to find
function_value1 = 6 - 5*min + sqr(min);
inc             = (max - min)/37;
root            = min;
repeat (
   root = root + inc;
   function_value2 = 6 - 5*root + sqr(root);
   if((    sign(function_value1) <> sign(functio
       and abs(function_value1) > 0
       and abs(function_value2) > tolerance ),
      max = root;
      signswitch = 1;
   else
      if(abs(function_value2) > tolerance,
         function_value1 = function_value2;
         min = root;
      );
   );
until (signswitch > 0) or (root > max) );
display min, max, function_value1, function_valu
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 15:46
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
17/23


in sign, confirming that the root of the quadratic function is
indeed in the interval.
The Break Statement
The break statement gives additional control over the
execution of loop structures, namely the loop statement, the
while statement, the for statement and the repeat statement. It
allows to break the execution of a loop structure prematurely.
The Break Statement: Syntax
The syntax for the break statement is as follows:
The keyword break indicates that this is a break statement. It
terminates the n inner most control structures. n is optional
and if it is omitted, it is set to 1.
Most often break statements are used in the context of if
statements or with dollar conditions. For details on the various
forms of logical conditions in GAMS, see sections Logical
Conditions and Filtering Sets.
The Break Statement: Examples
This is a simple, artificial example using the break statement
to exit a loop statement:
break [n];
Set    i   / i1*i10 /;
Scalar cnt / 0 /;
loop(i,
  break$sameas('i6',i);
  cnt = cnt+1;
);
display cnt;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
18/23


The break statement in combination with the dollar condition
terminates the execution of the loop body in the 6th iteration.
This can be seen looking at the value of cnt after the loop,
which will be 5.
Here is a little more complex example which uses the optional
argument n to terminate more than one loop structure at once:
In this example, cnt will be 50 at the end. As in the previous
example, it is increased 5 times in the inner most loop, before
the break statement is executed. This time break is called
with the argument 2, which causes the two inner most control
structures (namely the loop and the while) to be terminated.
The outer most control structure (the for) is not influenced, so
that its body gets executed 10 times, which results in a total of
50 increments for the scalar cnt.
Note, if break would be called with the argument 3 instead of
2, also the for loop would be terminated, so that cnt would be
5 at the end. If break would be called with 1 (or without
additional argument) instead of 2, only the inner most loop
would be terminated so that cnt would be 500 at the end.
The Continue Statement
The continue statement gives additional control over the
execution of loop structures, namely the loop statement, the
while statement, the for statement and the repeat statement. It
Set    i   / i1*i10 /;
Scalar x, y,
       cnt / 0 /;
for(x = 1 to 10,
  y = 0;
  while(y < 10,
    y = y+1;
    loop(i,
      break$sameas('i6',i) 2;
      cnt = cnt+1;
    );
  );
);
display cnt;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
19/23


allows to jump to the end of the inner most loop structure
without executing the remaining statements in the body.
The Continue Statement: Syntax
The syntax for the continue statement is as follows:
The keyword continue indicates that this is a continue
statement. It jumps to the end of the inner most control
structure.
Most often continue statements are used in the context of if
statements or with dollar conditions. For details on the various
forms of logical conditions in GAMS, see sections Logical
Conditions and Filtering Sets.
The Continue Statement: Examples
This is a simple, artificial example using the continue
statement to skip parts of a loop body:
In that example, every 2nd iteration of the loop statement is
skipped. Therefore, cnt will be 5 at the end of the loop.
The Abort Statement
The abort statement is used to terminate the execution of a
program. Most often the abort statement is used in the context
of conditionals. Examples are given below. Also it may be used
continue;
Set    i   / i1*i10 /;
Scalar cnt / 0 /;
loop(i,
  continue$(mod(ord(i),2)=0);
  cnt=cnt+1
);
display cnt;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
20/23


to display a text or an identifier in the listing file similar to the
display statement but mostly to present the reason for the
termination of the execution.
Note that the abort statement is to be distinguished from the
dollar control option $abort which may be used to terminate
the compilation of a program.
The Abort Statement: Syntax
The syntax for the abort statement is as follows:
The keyword abort indicates that this is an abort statement.
Ident denotes an identifier. If the identifier is a set or a
parameter, only the name of the set or parameter itself is
specified, without any domains. If the identifier is a variable, an
equation or a model, it must be followed by a suffix, since only
attributes of variables, equations and models can be displayed.
For more on variable and equation attributes including full
lists, see sections Variable Attributes and Equation Attributes
respectively. For details on model attributes, see section Model
Attributes. Recall that sets also have attributes, they may also
be displayed using the suffix notation. For details on set
attributes, see section Set Attributes. As usual, quoted text
must be surrounded by single or double quotes. The identifiers
and the text may be mixed and matched in any order, and the
whole statement may be continued over several lines.
An abort statement causes the termination of the execution
with an execution error and the information in the statement
will be displayed.
There is also a variant with the extension .noError that
terminates the execution and displays the information, but
does not cause an execution error. The syntax is as follows:
Most often abort statements are used in the context of if
statements or with dollar conditions. The syntax is as follows:
abort ident | quoted text {, ident | quoted text
abort.noError ident | quoted text {, ident | quo
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
21/23


or
For details on the various forms of logical conditions in GAMS,
see sections Logical Conditions and Filtering Sets.
The Abort Statement: Examples
Consider the following artificial example:
Note that the abort statement is part of an if statement which
is part of a loop statement. The execution of this program will
be terminated with the following display and error message:
Observe that the values of p('1'), p('2') and p('3') were
updated, but the values of p('4') and p('5') are equal to the
initialization values since the program was terminated before
they could be updated.
If the extension .noError is used in the example above, the
following lines will appear in the listing file:
if (logical_condition, abort ident | quoted text
abort$logical_condition ident | quoted text {, i
Set       i    / i1*i5 /;
Parameter p(i) / i1 1, i2 2, i3 3, i4 5, i5 8 /;
loop(i, 
   if (p(i) > 3, abort "Parameter larger than 3"
   p(i) = p(i) + 2;
);
----      4 Parameter larger than 3
----      4 PARAMETER p
i1 3.000,    i2 4.000,    i3 5.000,    i4 5.000,
**** Exec Error at line 4: Execution halted: abo
----      4 Parameter larger than 3
----      4 PARAMETER p
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
22/23


Note that the execution of the program is aborted as before,
but there is no execution error in this case.
Instead of an if statement we may use a dollar condition in the
loop:
Observe that this alternative formulation has the same
outcome as above.
i1 3.000,    i2 4.000,    i3 5.000,    i4 5.000,
****
**** Execution halted from line 4: abort.noError
****
Set       i    / i1*i5 /;
Parameter p(i) / i1 1, i2 2, i3 3, i4 5, i5 8 /;
loop(i, 
   abort$(p(i) > 3) "Parameter larger than 3", p
   p(i) = p(i) + 2;
);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:46
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
23/23


The Option Statement
Table of Contents
Introduction
The Syntax of the Option
Statement
List of Options
Options that Control Output
Details
Options that Control Solver-
Specific Parameters
Options that Control the Choice
of Solver
Options that Affect Input
Program Control
Other Options
Special Options that Involve
Identifiers
Special Options: Identifier
Options
Special Options: Identifier
Operations
Display Control
Index Matching
Projection and
Aggregation of Sets
and Parameters
Permutation of Sets
and Parameters
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
1/25


Introduction
The option statement is used to set various global system
parameters to control among other things output detail, the
solution process and the layout of displays. GAMS provides
default values for global system parameters that are adequate
for the most purposes. However, there are always cases when
the user would like to maintain control of some aspects of the
run. In addition, the option statement provides an efficient and
compact syntax to perform powerful operations on identifiers.
Observe that option statements are processed at execution
time unlike dollar control options that are processed at
compile time.
This chapter is organized as follows. We will first introduce the
general syntax of the option statement, then we will continue
with a list of all available options that may be used with option
statements and provide links to their detailed explanations in
the GAMS Call chapter. Finally we turn to the special options
that involve identifiers.
The Syntax of the Option Statement
The general form of an option statement is as follows:
The keyword option or options indicates that this is an
option statement. It is followed by key1, which is one of the
options that are listed in this chapter. Consider the following
simple example:
Here the keyword option is followed by the key reslim. The
option reslim specifies the maximum time in seconds that a
solver may run before it terminates. Thus, in this example we
give the solver 800 seconds to come up with a solution.
option(s) key1 [= value1] { ,|EOL  key2 [= value
option reslim=800;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
2/25


Note
Option names are not reserved words and
therefore they do not conflict with other uses
of their names.
Option statements do not allow expressions.
It is therefore not possible to assign
parameter values to an option.
The following doesn't work:
However, if the desired option is available as
model attribute, one can assign parameter
values there:
Observe that it depends on the respective option whether a
value is expected and if so, what type of value. There are six
different cases. An overview is given in Table 1.
Key
Value
Type of Value
Examples
yes
no
-
dmpOpt, eject,
memoryStat
yes
yes
integer
number
decimals, limcol, seed
yes
yes
real number
FDDelta, optCR, resLim
yes
yes
text string
LP, solPrint, sysout
yes
yes
identifier
See identifier options.
no
no
-
See identifier operations.
Table 1: Types of Options
scalar p /3/;
option reslim=p;
scalar p /3/;
transport.reslim = p;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
3/25


Note that the last type is special: it does not involve a named
option or key, but the keyword option is followed by
identifiers and identifier operators. These special option
statements are discussed in detail in section Special Options:
Identifier Operations.
Observe that the value of an option may be reset as often as
necessary, the new value will replace the previous value each
time. Further, more than one option may be specified with one
option statement and commas or end-of-line characters are
both legal separators between options.
We will demonstrate with the following example how several
options may be used. The code snippet may be added to the
model [DICE].
Note that in the first option statement four options are
specified: option measure has no associated value, option
limcol expects an integer value, option optcr expects a real
value and option MIP expects a text string as value. The second
option statement specifies just one identifier option: clear,
which has the variable comp as value.
Attention
Option statements are executed in sequence with
other instructions. Therefore, if an option statement
is located between two solve statements, the new
values will be assigned between the solves and
thus they will apply only to the second solve
statement.
List of Options
The options available through the option statement are
grouped into the following functional categories:
option measure, limcol = 100
       optcr = 0.00, mip = xpress ;
solve xdice using mip max wnx;
option clear = comp;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
4/25


Options that affect output details
Solver specific parameters
Options that control choice of solver
Options that affect input program control
Other options
Special options that involve identifiers
In the following subsections we will offer brief descriptions of
the options in the first five categories. Note that each entry is
linked to a detailed description of the respective option.
Observe that detailed descriptions of all GAMS command line
parameters, options and model attributes are given in section
Detailed Descriptions of All Options. The options that belong to
the last category are special, they are introduced and discussed
in section Special Options that Involve Identifiers below.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
5/25


Options that Control Output Details
Option
Description
asyncSolLst
Print solution listing when asynchronous
solve (Grid or Threads) is used
decimals
Decimal places for display statements
dispWidth
Number of characters to be printed in
the column labels of all subsequent
display statements
eject
Inject a page break into the LST file
epsToZero
Treat eps as zero when unloading to GDX
limCol
Maximum number of columns listed in
one variable block
limRow
Maximum number of rows listed in one
equation block
maxGenericFiles
Maximum number of generic file names
tried at execution time file creation
MCPRHoldFx
Print list of rows that are perpendicular
to variables removed due to the
holdfixed setting
profile
Execution profiling
profileTol
Minimum time a statement must use to
appear in profile generated output
solPrint
Solution report print option
solSlack
Causes the equation output in the listing
file to contain slack variable values
instead of level values
sysOut
Solver Status file reporting option
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
6/25


Options that Control Solver-Specific Parameters
Option
Description
bRatio
Basis detection threshold
domLim
Domain violation limit solver default
holdFixedAsync
Allow HoldFixed for models solved
asynchronously as well
intVarUp
Set mode for default upper bounds on
integer variables
iterLim
Iteration limit of solver
optCA
Absolute Optimality criterion solver
default
optCR
Relative Optimality criterion solver
default
reform
Reformulation level
resLim
Wall-clock time limit for solver
savePoint
Save solver point in GDX file
solveLink
Solver link option
sys12
Pass model with generation errors to
solver
threads
Number of processors to be used by a
solver
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
7/25


Options that Control the Choice of Solver
Option
Description
CNS
Constrained Nonlinear Systems - default solver
DNLP
Non-Linear Programming with Discontinuous
Derivatives - default solver
EMP
Extended Mathematical Programs - default solver
LP
Linear Programming - default solver
MCP
Mixed Complementarity Problems - default solver
MINLP
Mixed-Integer Non-Linear Programming - default
solver
MIP
Mixed-Integer Programming - default solver
MIQCP
Mixed Integer Quadratically Constrained
Programs - default solver
MPEC
Mathematical Programs with Equilibrium
Constraints - default solver
NLP
Non-Linear Programming - default solver
QCP
Quadratically Constrained Programs - default
solver
RMINLP
Relaxed Mixed-Integer Non-Linear Programming -
default solver
RMIP
Relaxed Mixed-Integer Programming - default
solver
RMIQCP
Relaxed Mixed Integer Quadratically Constrained
Programs - default solver
RMPEC
Relaxed Mathematical Programs with Equilibrium
Constraints - default solver
solver
Default solver for all model types that the solver
is capable to process
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
8/25


Options that Affect Input Program Control
Option
Description
ECImplicitLoad
Allow implicit loading of symbols from
embedded code or not
fdDelta
Step size for finite differences
fdOpt
Options for finite differences
gdxUels
Unload labels or UELs to GDX either
squeezed or full
seed
Random number seed
solveOpt
Multiple solve management
strictSingleton
Error if assignment to singleton set has
multiple elements
sys18
Use backward compatible (i.e. pre-GAMS
31) scheme for reading floating-point
numbers
zeroToEps
Treat zero as eps
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
9/25


Other Options
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
10/25


Option
Description
checkErrorLevel
Check errorLevel automatically after
executing external program
dmpOpt
Debugging option: causes GAMS to echo
the runtime option settings
dmpSym
Debugging option: causes GAMS to echo
the symbol table to the listing file
dmpUserSym
Debugging option: causes GAMS to echo
the symbol table to the listing file for
user defined symbols only
dualCheck
Output on the reduced cost condition
forLim
GAMS looping limit
integer1..5
Integer communication cells
measure
Output of time and memory use since
the last measure statement or the
program beginning
memoryStat
Show memory statistics in the LST file
real1..5
Real communication cells
subSystems
Lists all solvers available as well as the
current default and active solvers in the
LST file
sys10
Changes rpower to ipower when the
exponent is constant and within 1e-12 of
an integer
sys11
Dynamic resorting if indices in
assignment/data statements are not in
natural order
sys15
Automatic switching of data structures
used in search records
sys16
Disable search record memory (aka
execute this as pre-GAMS 24.5)
sys17
Disable sparsity trees growing with
permutation (aka execute this as pre-
GAMS 24.5)
sys19
Disable permutation on Column
Generation (aka execute this as pre-
GAMS 36)
threadsAsync
Limit on number of threads to be used
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
11/25


y
for asynchronous solves (solveLink=6)
Special Options that Involve Identifiers
Several options involve identifiers: they either take identifiers
as values or have no key and value, but perform an operation
on an identifier. In the following two subsections we will
introduce and discuss these special options.
Special Options: Identifier Options
The value of identifier options is not a string or a number, but
an identifier. In this subsection we will describe these options
in detail.
clear
This option resets an identifier to its default value to free
memory. The syntax is as follows:
The following identifier types may be reset: sets, parameters,
equations and variables. The option will free up memory to the
GAMS heap manager, thus the memory may be used by GAMS
but not by the operating system. To force the memory to be
freed up to the operating system, the GAMS process needs to be
terminated. One way to do this is to restart the execution
system by solving a dummy model with the option solveLink set
to zero.
kill
This option is a synonym to option clear. Observe that the
dollar control option $kill is not a synonym to $clear.
shuffle
This option rearranges the values of a parameter in a random
order. The syntax is as follows:
option clear = identifier;
option shuffle = itemname;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
12/25


Here itemname is a one-dimensional parameter. One-
dimensional parameters may be declared (and defined) in four
different ways, depending on the domain and the data. The
following table gives an overview of the effect of the option
shuffle in the four cases.
No Data
Has Data
Universal
set as
domain
Use the universal
set to initialize the
data (case 1 in the
example below).
Use the universal set
to add zero values
before shuffling the
data (case 3 in the
example below).
Specific set
as domain
Use the domain to
initialize the data
(case 2 in the
example below).
Use the domain to add
zero values before
shuffling the data
(case 4 in the example
below).
If the parameter was declared without data (the second column
in the table above), the domain or the universal set will be
used to assign the numbers 1 to N, where N is the number of
elements in the domain or the universal set. If the parameter
was declared with data (the third column in the table above),
the domain or the universal set will be used to add zeroes for
possibly missing entries. These zero values will participate in
the random shuffle, but they will not be stored in the
parameter. The following example serves as illustration:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
13/25


The code above will generate the output that follows. Observe
that in this example, the universal set is the union of the sets i
and j, which means that all elements of the sets i and j are
members of the universal set. Note that we use random
numbers, therefore the outcomes from a different run may vary.
In the next example we will demonstrate how to generate a
random mapping of a set:
Set i / i1*i5 /
    j / j1*j5 /;
option decimals = 0;
*Case 1: universal set as domain and no data
Parameter A(*) "The universe is used to fill the
option shuffle = A;
display A;
*Case 2: set j as domain and no data
Parameter B(j) "The set j is used to fill the pa
option shuffle = B;
display B;
*Case 3: universal set as domain and has data
Parameter C(*) "The universe is used to add zero
option shuffle = C;
display C;
*Case 4: set i as domain and has data
Parameter D(i) "The set i is used to add zeroes"
option shuffle = D;
display D;
----      9 PARAMETER A  The universe is used to
i1  4,    i2  1,    i3  7,    i4  9,    i5  6,  
j4  8,    j5  2
----     14 PARAMETER B  The set j is used to fi
j1 1,    j2 5,    j3 2,    j4 4,    j5 3
----     19 PARAMETER C  The universe is used to
j1 2,    j2 4
----     24 PARAMETER D  The set i is used to ad
i2 30,    i4 50,    i5 10
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
14/25


A display of the set rmi follows. Note that there is exactly one
element in each row and each column:
Observe that each use of the option shuffle will generate a
new random data rearrangement.
Special Options: Identifier Operations
In some cases the keyword option in an option statement is
followed by an identifier and one or more operators to perform
identifier operations like display control, index matching,
projection and aggregation of sets and parameters and
permutation of sets and parameters.
Display Control
The display statement is introduced and discussed in chapter
The Display Statement. While GAMS provides defaults for the
displayed identifiers that suffice in most cases, the print format
may be customized with the following option statement:
The keyword option is followed by the name of an identifier
ident, a colon and an integer value d. Note that d may be
Set i        / i1*i6 /,
    rmi(i,i) "random mapping";
Parameter A(i);
option shuffle = A;
rmi(i, i + (- Ord(i) + A(i))) = yes;
display rmi;
----      7 SET rmi  random mapping
            i1          i2          i3          
i1                                              
i2                                             Y
i3         YES
i4                                 YES
i5                                              
i6                     YES
option ident:d;
option ident:d:r:c;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
15/25


between 0 and 8 and specifies the number of decimal places
that will be displayed for the respective identifier. The
specifications r and c are optional. They denote the number of
index positions printed as row labels and the number of index
positions printed as column labels respectively. Note that if r is
zero, a list format will be used. For more information and
examples, see sections Local Display Control and Display
Statement to Generate Data in List Format.
Index Matching
Index matching is a very compact way to define multi-
dimensional sets. The general syntax is as follows:
The keyword option is followed by the name of the set,
set_name, and two (or more) indices in parentheses that are
linked with the matching operator ':'. Note that the set must
have been declared earlier in the program. If the set has also
been defined earlier in the program, it will be cleared first and
then the matching operation will be processed. Note
furthermore that the list of identifiers may be expanded to
more than two and that besides the matching operator ':'
also ',' may be used and will be interpreted as product
operator. Consider the following example which also makes use
of display control:
In its simplest form the matching operator is used to create the
two dimensional set ij.
option set_name(index1:index2[:index3:...]);
Set i / i1,i2/
    j / j1,j2,j3 /
    k / k1*k5 /
    ij(i,j), ijk(i,j,k), kij(k,i,j);
* index matching
Option ij(i:j), ijk(i,j:k), kij(k:i,j);
* display control
Option ij:0:0:1, ijk:0:0:1, kij:0:0:1;
Display ij, ijk, kij;
----      9 SET ij
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
16/25


Note that each member of the index i has been matched with a
member of the index j until one of the indices ran out of
members.
The index matching operations to define the three-dimensional
sets ijk and kij illustrate a more sophisticated usage of the
index operator. The sets ijk and kij are built with the indices
from left to right using the product operator when a ',' is
encountered or the matching operator when a ':' is found.
For ijk the first operator is the ',' which is interpreted as
product operator for the sets i and j and hence builds the
Cartesian product of the two sets which has six 2-tuples as
elements (i1.j1, i1.j2, i1.j3, i2.j1, i2.j2, i2.j3).
The matching operator ':' is then applied to match those 2-
tuples with the five set elements in k. The resulting sets are:
The previous example can be extended to define sets of even
higher dimension in the following way:
i1.j1
i2.j2
----      9 SET ijk
i1.j1.k1
i1.j2.k2
i1.j3.k3
i2.j1.k4
i2.j2.k5
----      9 SET kij
k1.i1.j1
k1.i1.j2
k1.i1.j3
k2.i2.j1
k2.i2.j2
k2.i2.j3
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
17/25


Note that sets hijk_1 and hijk_2 will be different even
though hijk_1 uses set ijk and hijk_2 uses the same
matching and product operation used at definition of ijk but
spelled out. As already mentioned above, the matching
operator builds up the sets with the indices from left to right.
Hence, as set ijk is build first and then used on the right of the
matching operator the two sets are built up differently.
Projection and Aggregation of Sets and Parameters
In GAMS, projection and aggregation operations on sets may be
performed in two different ways: with an assignment and the
sum operator, and with an option statement.
Using an assignment and the sum operator is the slower but
more intuitive way. Assignments and the sum operator are
introduced and discussed in detail in chapter Data
Manipulations with Parameters and section Indexed Operations
respectively. Here we only show how they may be used in the
context of sets to perform projections and aggregations. The
following example serves as illustration.
set h / h1*h4 /
    hijk_1(h,i,j,k)
    hijk_2(h,i,j,k);
* index matching
Option hijk_1(h:ijk);
Option hijk_2(h:i,j:k);
* display control
Option hijk_1:0:0:1, hijk_2:0:0:1;
Display hijk_1, hijk_2;
----     19 SET hijk_1
h1.i1.j1.k1
h2.i1.j2.k2
h3.i1.j3.k3
h4.i2.j1.k4
----     19 SET hijk_2
h1.i1.j1.k1
h1.i1.j2.k2
h1.i1.j3.k3
h2.i2.j1.k4
h2.i2.j2.k5
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
18/25


Note that the set ijk is a three-dimensional set, its elements
are 3-tuples and all permutations of the elements of the three
sets i, j and k are in its domain. Thus the number of elements
of the set ijk is 3 x 2 x 4 = 24. The sets ij1a and ij1b are two-
dimensional sets that are declared in the set statement, but
not defined. The first assignment statement defines the
members of the set ij1a. This is a projection from the set ijk
to the set ij1a where the three-tuples of the first set are
mapped onto the pairs of the second set, such that the
dimension k is eliminated. This means that the four elements
"i1.j1.k1", "i1.j1.k2", "i1.j1.k3" and "i1.j1.k4" of
the set ijk are all mapped to the element "i1.j1" of the set
ij1a. Note that in this context, the result of the sum operation
is not a number but a set. The second and third assignments
are aggregations, where the number of elements of the two
sets are computed. As already mentioned, the result of the first
aggregation is 24 and the result of the second aggregation is 6 =
24 / 4.
The second way to perform projections and aggregations is
faster and more compact, it uses an option statement. The
general syntax of this option statement is as follows.
The keyword option is followed by the identifiers ident1 and
ident2 which are linked by the symbol '<' or '<='. Observe
that in most cases the two symbols have the same effect. The
exception is the special case when both identifiers are defined
Sets i            / i1*i3 /
     j            / j1*j2 /
     k            / k1*k4 /
     ijk(i,j,k)   / #i.#j.#k /
     ij1a(i,j)
     ij1b(i,j);
Scalars Count_1a, Count_1b, Count_2a, Count_2b;
* Method 1: Using an assignment and the sum oper
ij1a(i,j) = sum(k,ijk(i,j,k));
* Method 1: Using an assignment and the sum oper
Count_2a  = sum(ijk(i,j,k),1);
Count_1a  = sum(ij1a(i,j),1);
option ident1 < ident2 ;
option ident1 <= ident2 ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
19/25


over domains that use at least one shared index set more than
once, see the example below. Note that in general the
dimension of the item on the left has to be equal or less than
the dimension of the item on the right. Further, the index space
of the two identifiers must be matchable. If the dimensions of
the two identifiers are equal, then the same indices must
appear in both, albeit the order may differ. If the dimension of
the left item is less than the dimension of the right item, then
the indices on the left must also appear on the right.
Observe that if both identifiers are sets, the operation will be a
projection. However, if the identifier on the left-hand side is a
scalar or a parameter and the identifier on the right-hand side
is a set it will be an aggregation. The example that follows
shows how the projection and the two aggregations above are
accomplished with the option statement.
In the example above, the set on the left-hand side, ij1b, has
fewer indices than the set on the right-hand side, ijk. Observe
that if the two sets differ only in the order of the indices then a
projection will have the effect of a permutation of the tuple.
Note
The option statement for projection and
aggregation operations may also be applied to
parameters.
Until now the indices in the domain of the sets were unique. A
special case arises when sets are defined over a domain with
the same indices, for example the set s(i,i,i). In this case, a
projection always has the effect of a permutation. Users may
choose whether they wish to perform the permutation from left
to right or from right to left. The option statement
* Method 2: Option statement performs a projecti
Option ij1b < ijk;
* Method 2: Option statements performs aggregati
Option Count_2b < ijk;
Option Count_1b < ij1b;
display ijk, ij1a, ij1b, Count_1a, Count_1b, Cou
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
20/25


means a right-to-left permutation, while the option statement
entails a left-to-right permutation. The following example
clarifies the difference:
Note that in the right-to-left permutation, the element
"i1.i2.i3" is projected to "i3.i2" and the element
"i3.i3.i1" is projected to "i1.i3". In the left-to-right
permutation however, the the element "i1.i2.i3" is
projected to "i1.i2" and the element "i3.i3.i1" is
projected to "i3.i3". Hence, the left-to-right permutation (<=)
might be more intuitive.
Our examples so far involved only sets. As mentioned above,
projections and aggregations may also be performed with
parameters. However, there are some subtle differences. The
first difference refers to the terminology: we aggregate sets,
but we count parameters. The second difference is the result of
the operation if the domain of the left symbol is just a
permuted version of the domain of the right symbol. Consider
the following example:
Option item1 < item2 ;
Option item1 <= item2 ;
Set   i         / i1*i3 /
      s(i,i,i)  "Set members" / i1.i2.i3, i3.i3.
      pR1(i,i)  "projection right to left with a
      pR2(i,i)  "projection right to left with o
      pL1(i,i)  "projection left to right with a
      pL2(i,i)  "projection left to right with o
Alias (i,ii,iii);
* Right-to-left permutation, two ways
pR1(i,ii) = sum(s(iii,ii,i),1);
option pR2 < s;
* Left-to-right permutation, two ways
pL1(i,ii) = sum(s(i,ii,iii),1);
option pL2 <= s;
option s:0:0:1, pR1:0:0:1, pR2:0:0:1, pL1:0:0:1,
display s, pR1, pR2, pL1, pL2 ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
21/25


The output generated by the display statement follows:
Permutation of Sets and Parameters
In GAMS, the > sign can be used to create complete
permutations of one- and multi-dimensional sets and
parameters. Consider the following example based on the test
library model [PERM1]:
First, a set i for which all permutations should be computed is
declared and defined. A permutation of a one-dimensional set
i can be represented by a two-dimensional set like perm(i,i)
where the i index is duplicated. In the example, set perm(i,i)
represents permutation (1 2)(3) in cycle notation. For a set
with three elements, there are 3*2*1=6 permutations. The
statement option pall > i; results in all permutations of i
being computed and stored in three-dimensional set
pall(p,i,i) where the first index p serves as a counter to
enumerate all permutations.
Set i / i1*i3 /
    j / j1*j2 /;
Table p(i,j)
    j1 j2
i1   1  2
i2   3  4
i3   5  6;
parameter pperm(j,i);
option pperm < p;
option decimals = 0;
display p, pperm;
----     13 PARAMETER p
            j1          j2
i1           1           2
i2           3           4
i3           5           6
----     13 PARAMETER pperm
            i1          i2          i3
j1           1           3           5
j2           2           4           6
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
22/25


Note that we use display control such that the display
statement results in:
For multi-dimensional sets, the permutation operator follows
the same logic. Consider the following example:
Sets j, k and a two-dimensional set jk(j,k) are defined. In
order to find all permutations of jk(j,k), the indices are again
duplicated and a permutation index is introduced:
set i           'set to permute'        / i1*i3 
    perm(i,i)   'exemplary permutation' / i1.i2,
$eval pmax fact(card(i))
    p           'permutation index' / p1*p%pmax%
    pall(p,i,i) 'permutation set';
option pall > i;
option pall:0:0:1;
display pall;
----      8 SET pall  permutation set
p1.i1.i1
p1.i2.i2
p1.i3.i3
p2.i1.i1
p2.i2.i3
p2.i3.i2
p3.i1.i2
p3.i2.i1
p3.i3.i3
p4.i1.i2
p4.i2.i3
p4.i3.i1
p5.i1.i3
p5.i2.i1
p5.i3.i2
p6.i1.i3
p6.i2.i2
p6.i3.i1
set j / j1*j2 /, k / k1*k5 /
    jk(j,k) / j1.k3, j1.k5, j2.k1 /
$eval pmax fact(card(jk))
    p / p1*p%pmax% /
    pall(p,j,k,j,k);
option pall > jk;
option pall:0:0:1;
display pall;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
23/25


The display statement results in:
In addition to set elements, it is also possible to permute
numerical data in a GAMS parameter. Consider the following
example where all permutations of the numerical values stored
in the one-dimensional parameter a(i) are computed:
The display statement results in:
----      8 SET pall  
p1.j1.k3.j1.k3
p1.j1.k5.j1.k5
p1.j2.k1.j2.k1
p2.j1.k3.j1.k3
p2.j1.k5.j2.k1
p2.j2.k1.j1.k5
p3.j1.k3.j1.k5
p3.j1.k5.j1.k3
p3.j2.k1.j2.k1
p4.j1.k3.j1.k5
p4.j1.k5.j2.k1
p4.j2.k1.j1.k3
p5.j1.k3.j2.k1
p5.j1.k5.j1.k3
p5.j2.k1.j1.k5
p6.j1.k3.j2.k1
p6.j1.k5.j1.k5
p6.j2.k1.j1.k3
set i  / i1*i3 /
$eval pmax fact(card(i))
    p  / p1*p%pmax% /;
Parameter a(i) /i1 1, i2 2, i3 3/
          pall_a(p,i);
option pall_a > a;
option pall_a:0:1:1;
display pall_a;
----      8 PARAMETER pall_a  
            i1          i2          i3
p1           1           2           3
p2           1           3           2
p3           2           1           3
p4           2           3           1
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
24/25


The permutation can also be extended to multi-dimensional
parameters. Consider the following example where all
permutations of the numerical values stored in the two-
dimensional parameter b(j,k) are computed:
The display statement results in:
p5           3           1           2
p6           3           2           1
set j / j1*j2 /, k / k1*k5 /;
Parameter b(j,k) /j1.k3 1, j1.k5 2, j2.k1 3/;
$eval pmax fact(card(b))
set p / p1*p%pmax% /;
parameter pall_b(p,j,k);
option pall_b > b;
option pall_b:0:1:2;
display pall_b;
----      8 PARAMETER pall_b  
         j1.k3       j1.k5       j2.k1
p1           1           2           3
p2           1           3           2
p3           2           1           3
p4           2           3           1
p5           3           1           2
p6           3           2           1
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:47
The Option Statement
https://www.gams.com/latest/docs/UG_OptionStatement.html
25/25


System Attributes
Table of Contents
Introduction
System Suffixes
Execution-Time System Suffixes
Compile-Time System Suffixes
List of all System Suffixes
System Data
Power Set
Access to Hidden Functions
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 15:49
System Attributes
https://www.gams.com/latest/docs/UG_SystemAttributes.html
1/11


Introduction
System attributes give access to string constants in the GAMS
system environment. We will refer to these string constants as
system suffixes. Moreover, there are attributes that can be used
as data elements for user symbols. This way one can get access
e.g. to the solvers (as set elements) in the system. We will refer
to these data elements as system data. Two special system data
attributes, namely powerSetLeft and powerSetRight, for a
three dimensional set setName(n,s,b) create data which can
be interpreted as a numbering system with base b and s digits.
Finally, a system attribute can provide access to a system
function that was hidden by the compiler because of a name
conflict with a user symbol.
System Suffixes
System suffixes contain information about the GAMS system
environment during a run. There are two ways to reference
them: system.suffix and %system.suffix%. Here system is
a keyword and .suffix is the name of the system suffix. A full
list is given in section List of all System Suffixes below. Note
that system.suffix references the execution-time version of
the system suffix and %system.suffix% references the
compile-time version resulting in a textual replacement. The
execution-time system suffix can only be used in the context of
put files. Consider the following example where both versions
are used:
file fx;
put fx 'lp:' system.LP;
option lp=gurobi;
put  / 'lp:' system.LP
put  / 'lp:%system.LP%';
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:49
System Attributes
https://www.gams.com/latest/docs/UG_SystemAttributes.html
2/11


Observe that the compile-time string %system.LP% is
evaluated at compile time and does not change. However, the
execution-time system suffix system.LP is evaluated at
execution time and it does change. It is first CPLEX, since CPLEX
is the default LP solver. Then it changes to GUROBI as a result
of the execution-time command option LP=gurobi;. The
resulting put file fx.put follows:
In the following two subsection we will discuss execution-time
suffix in more detail.
Execution-Time System Suffixes
Execution-time system suffixes are only used in the context of
the put writing facility with commands like put , putclose and
put_utility. Consider the following simple example. We have the
files x.gms and dummy.gms, where x.gms contains just the
following line:
The file dummy.gms contains the following:
We run these files with the following calls:
Note that the value c for the command-line parameter action
causes the first input file to be compiled only. The result is
saved in the work file putVersion. Then we restart and
execute dummy.gms. Now, depending on the GAMS release
version, the put file fx will have a different content:
lp:CPLEX
lp:GUROBI
lp:CPLEX
file fx; put fx system.version;
$exit;
  > c:\gams\win64\24.7\gams x.gms action=c s=put
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:49
System Attributes
https://www.gams.com/latest/docs/UG_SystemAttributes.html
3/11


In contrast, the value of the compile-time system suffix
%system.version% is determined at compile time. Suppose
we change the file x.gms to contain the following line:
The file dummy.gms is not changed and we use the same calls
as above. Note that the put file will have the same content for
both versions of GAMS:
Compile-Time System Suffixes
Compile-time system suffixes may be placed anywhere a
compile-time variables makes sense, including code for
conditional compilation. The quoting of these compile-time
system suffixes depends on their use in the code. Consider the
following example:
The resulting output generated by the display statement
follows:
List of all System Suffixes
In the following table all system suffixes are listed.
c:\gams\win64\24.7\gams dummy.gms r=putVersion /
c:\gams\win64\24.8\gams dummy.gms r=putVersion /
file fx; put fx "%system.version%";
c:\gams\win64\24.7\gams dummy.gms r=putVersion /
c:\gams\win64\24.8\gams dummy.gms r=putVersion /
$set systemDATE %system.date%
display "system.date", "%system.date%";
$ifi %system.LP% == Xpress $log "LP solver is Xp
----      3 system.DATE
            11/07/16
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:49
System Attributes
https://www.gams.com/latest/docs/UG_SystemAttributes.html
4/11


System Suffix
Description
BuildCode
System build code
CNS
CNS solver that is active for CNS
model type
ComputerName
Operating system computer name
Date
Job date
Date1
Job date format
DirSep
File or directory separator in file
names
DNLP
DNLP solver that is active for DNLP
model type
Elapsed
Elasped time in seconds since start
of job
EMP
EMP solver that is active for EMP
model type
Error
Used to indicate unknown suffix
ErrorLevel
System Errorlevel
FE
File extension
FileSys
Name of the operating system (MSNT
for Windows, UNIX for Linux and
macOS)
FN
File name
FP
File path
GamsRelease
GAMS Release number
GamsReleaseMaint
GAMS Release number with
maintenance number suffix
GamsVersion
GAMS version number
GdxFileNameIn
GDX file name for input, set by
put_utility command gdxin
GdxFileNameOut
GDX file name for output, set by
put_utility command gdxout
GString
GAMS system audit string (exact
GAMS version being used)
HostPlatform
Host platform
IFile
Input file
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:49
System Attributes
https://www.gams.com/latest/docs/UG_SystemAttributes.html
5/11


ILine
Current source line number beeing
executed
IncLine
Include file line
IncName
Include file name
IncParent
Include file parent
IncParentL
Include file parent line number
IsAlphaBeta
Indicates an Alpha or Beta bulid
JobHandle
Job handle of last async call
LicenseFileName
The file name of the license file
currently used
LicenseLevel
GAMS license level
Line
Line number in source code
ListLine
Line number on listing file
LP
LP solver that is active for LP model
type
MACAddress
MAC address of the first network
adapter
MaxInput
Max input line length that can be
processed
MCP
MCP solver that is active for MCP
model type
Memory
Memory (in Mb) in use
MINLP
MINLP solver that is active for MINLP
model type
MIP
MIP solver that is active for MIP
model type
MIQCP
MIQCP solver that is active for
MIQCP model type
MPEC
MPEC solver that is active for MPEC
model type
NLP
NLP solver that is active for NLP
model type
NullFile
The null filename
OFile
Output (Listing) file
OPage
Current page number in output
(listing) file
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:49
System Attributes
https://www.gams.com/latest/docs/UG_SystemAttributes.html
6/11


(listing) file
Page
Current page number
PFile
Current put file
Platform
Job platform (DAX for macOS on
ARM64, DEX for macOS on x86_64,
LEX for Linux, WEX for Windows)
PrLine
Line on listing page
Procname
Model types LP MIP etc
PrPage
Listing page number
PutFileName
The filename of the currently active
PUT file
QCP
QCP solver that is active for QCP
model type
RDate
Restart file date
ReDirLog
Append redirection string into the
logfile
RFile
Restart file name
RMINLP
RMINLP solver that is active for
RMINLP model type
RMIP
RMIP solver that is active for RMIP
model type
RMIQCP
RMIQCP solver that is active for
RMIQCP model type
RMPEC
RMPEC solver that is active for
RMPEC model type
RTime
Restart file time
SFile
Save file name
SString
Subsystem (Solver) audit (last solver
used)
Tab
Tab character
TClose
Time to save GAMS
TComp
Time to compile
TExec
Time to execute
Time
Job time
Title
Current listing title
TStart
Time to restart GAMS
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:49
System Attributes
https://www.gams.com/latest/docs/UG_SystemAttributes.html
7/11


TStart
UserConfigDir
User writable directory that is
searched for gamsconfig.yaml
UserDataDir
User writable directory that is
searched for gamslice.txt and others
UserName
Operating system user name
VerID
GAMS version ID
Version
GAMS compiler version
A model that prints all system suffixes with its current values to
a put file can be found in model [SSUFFIX].
System Data
Some of the system relevant information does not fit into a
single string. Such system data can be stored in GAMS symbols.
The system data for this symbol can be accessed in the data
statement of the symbol, e.g.
set allSolvers / system.solverNames /;. Now you can
work with the solver names as you can work with any set. The
system data can be viewed as an internal set, so it can be used
to create more complex GAMS symbols with this information.
For example:
Here is the list and dimensionality of the system data:
set seq / 1*1000 /;
set solvermap(seq,*)   / set.seq:system.solverNa
parameter solverpar(*) / system.solverNames 1 /;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 15:49
System Attributes
https://www.gams.com/latest/docs/UG_SystemAttributes.html
8/11


System Data
Dimension
Description
dollarOptions
1
Dollar control
options
empty
1
Empty label
gamsFunctions
1
Intrinsic
functions
gamsParameters
1
Command
line
parameters
gamsParameterSynonymMap
2
Map between
command
line
parameters
and their
synonyms
gamsParameterSynonyms
1
Synonyms for
command
line
parameters
GUSSModelAttributes
1
Model
attributes
stored for
GUSS
scenarios
modelTypes
1
Model types,
e.g. LP, MIP, ...
platforms
1
Platform
code
powerSetLeft
3
Numbering
system with
base b and s
digits
powerSetRight
3
Numbering
system with
base b and s
digits
predefinedSymbols
1
Predefined
symbols, e.g.
SameAs, Diag
, ...
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:49
System Attributes
https://www.gams.com/latest/docs/UG_SystemAttributes.html
9/11


setConstants
1
System data
names (this
list)
solverNames
1
Names of
solvers and
tools
solverPlatformMap
2
Map between
solvers and
platforms
solverTypePlatformMap
3
Map between
solvers,
model types
and
platforms
systemSuffixes
1
System
suffixes
Power Set
The very special system attribute powerSetLeft and
powerSetRight do not provide access to static data relevant
to the system but produce data based on existing sets b and s.
This system data produced can be interpreted as a numbering
system with base b and s digits. The total number of tuples
created is power(card(b),card(s)). The first index of the
resulting set has to have at least this size. The following small
example demonstrates the functionality of powerSetRight:
With 3 digits the display results in the following output:
Changing powerSetRight to powerSetLeft reassigns the
order of the digits. So the lowest digit is on the left:
$set digits 3
set s / s1*s%digits% /, b / 0,1 /;
$eval nMax power(card(b),card(s))
set n        / n1*n%nMax% /
    x(n,s,b) / system.powerSetRight /;
option x:0:0:%digits%; display x;
----      6 SET x
n1.s1.0,    n1.s2.0,    n1.s3.0
n2.s1.0,    n2.s2.0,    n2.s3.1
n3.s1.0,    n3.s2.1,    n3.s3.0
n4.s1.0,    n4.s2.1,    n4.s3.1
n5.s1.1,    n5.s2.0,    n5.s3.0
n6.s1.1,    n6.s2.0,    n6.s3.1
n7.s1.1,    n7.s2.1,    n7.s3.0
n8.s1.1,    n8.s2.1,    n8.s3.1
----      6 SET x
n1.s1.0,    n1.s2.0,    n1.s3.0
n2.s1.1,    n2.s2.0,    n2.s3.0
n3.s1.0,    n3.s2.1,    n3.s3.0
n4.s1.1,    n4.s2.1,    n4.s3.0
n5.s1.0,    n5.s2.0,    n5.s3.1
n6.s1.1,    n6.s2.0,    n6.s3.1
n7.s1.0,    n7.s2.1,    n7.s3.1
n8.s1.1,    n8.s2.1,    n8.s3.1
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:49
System Attributes
https://www.gams.com/latest/docs/UG_SystemAttributes.html
10/11


Access to Hidden Functions
Intrinsic functions are not keywords but they are stored in a list
of predefined names. If a user program uses such a predefined
name of a function for a user symbol, GAMS will hide the
original function. For example,
will result in a compilation error in the second line because
GAMS expects uniform to be a set. The function uniform is
hidden for this GAMS program. Renaming the user symbol that
hides a function is often the best solution for this, but there
are a few cases (including GAMS code already compiled and
stored in a restart file) where renaming is not an option. A
hidden function can be accessed via the system attribute
system.functionName. So the following will successfully
compile and execute:
set uniform 'School Uniform' / skirt, blouse, bl
scalar randomNumber; 
randomNumber = uniform(0,1);
set uniform 'School Uniform' / skirt, blouse, bl
scalar randomNumber; 
randomNumber = system.uniform(0,1);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 15:49
System Attributes
https://www.gams.com/latest/docs/UG_SystemAttributes.html
11/11


The Grid and Multi-
Threading Solve Facility
Table of Contents
Introduction
The Grid Facility: Basic Concepts
The Grid Facility: A First Example
The Submission Loop
The Collection Loop
The Execution Log
Advanced Use of Grid Features
Very Long Job Durations: The
Submitting Program
Very Long Job Durations: The
Inquire Program
Very Long Job Durations: The
Collection Program
Summary of Grid Features
Grid Handle Functions
Grid Model Attributes
Grid Solution Retrieval
The Grid Directory
The Grid Facility: Architecture and
Customization
Grid Submission Testing
Multi-Threading
Multi-threading Submission
Testing
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 16:12
The Grid and Multi-Threading Solve Facility
https://www.gams.com/latest/docs/UG_GridComputing.html
1/21


Introduction
The GAMS Grid facility allows to take advantage of High
Performance Computing Grids and systems with multiple CPUs.
This language feature facilitates the management of
asynchronous submission and collection of model solution
tasks in a platform independent fashion. A simple architecture,
relying on existing operating system functionality allows for
rapid introduction of new environments and provides for an
open research architecture.
A typical application uses a coarse grain approach involving
hundreds or thousands of model solutions tasks which can be
carried out in parallel. Examples include but are not limited to
scenario analysis, Monte Carlo simulations, Lagrangian
relaxation, decomposition algorithms and advanced solution
approaches.
The grid features work on all GAMS platforms and have been
tailored to many different environments, like the Condor
Resource Manager, a system for high throughput computing
from the University of Wisconsin-Madison. Researchers using
Condor reported a delivery of 5000 CPU hours in 20 hours wall
clock time.
Similarly, the GAMS Multi-Threading Solve Facility allows the
asynchronous submission and collection of model solution
tasks on a single, multi-threaded machine while using efficient
in-memory communication between GAMS and the solver.
Disclaimer: The use of the term grid computing may be
offensive to some purists in the computer science world. We
use it very loosely to refer to a collection of computing
components that allow us to provide high throughput to certain
applications. One may also think of it as a resurrection of the
commercial service bureau concept of some 30 years ago.
Caution: Although these features have been tested on all
platforms and are part of our standard release we may change
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:12
The Grid and Multi-Threading Solve Facility
https://www.gams.com/latest/docs/UG_GridComputing.html
2/21


the approach and introduce alternative mechanisms in the
future.
Acknowledgments: Prof. Monique Guignard-Spielberg and
Antoine Sauré at that time at Wharton School at the University
of Pennsylvania introduced us to parallel Lagrangian relaxation
on the SUN Grid Environment. Prof. Michael Ferris from the
University of Wisconsin-Madison adopted our original GAMS
grid approach to the high throughput system Condor and
helped to make this approach a practical proposition.
The Grid Facility: Basic Concepts
The Grid facility separates the solution process into several
steps which then can be controlled separately. First we will
review the steps taken during synchronous solution and then
we will introduce the asynchronous or parallel solution steps.
When GAMS encounters a solve statement during execution it
proceeds in three basic steps:
1. Generation: The symbolic equations of the model are
used to instantiate the model using the current state of
the GAMS data base. This instance contains all
information and services needed by a solution method
to attempt a solution. This representation is independent
of the solver and computing platform.
2. Solution: The model instance is handed over to a solver
and GAMS will wait until it terminates.
3. Update: The detailed solution and statistics are passed
to GAMS from the solver to update the GAMS data base.
In most cases, the time taken to generate the model and
update the data base with the solution will be much smaller
than the actual time spent in a specific solver. The model
generation will take a few seconds, whereas the time to obtain
an optimal solution may take a few minutes to several hours or
even longer. If sequential model solutions do not depend on
each other, we can solve in parallel and update the data base in
a random order. All we need is a facility to generate models,
submit them for solution and continue. At a convenient point in
our GAMS program we will then look for the completed
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:12
The Grid and Multi-Threading Solve Facility
https://www.gams.com/latest/docs/UG_GridComputing.html
3/21


solutions and update the data base accordingly. To summarize,
solving in parallel entails two steps:
1. Submission Loop: In this phase we will generate and
submit models for solutions that can be solved
independently.
2. Collection Loop: The solutions of the previously
submitted models are collected as soon as a solution is
available. It may be necessary to wait for some solutions
to complete by pausing the execution for some time.
Note that we have assumed that there will be no errors in any
of these steps. Of course, this will not always be the case and
elaborate mechanisms are in place to make the operation fail-
safe.
Note
For scenario analysis the solver GUSS might be of
particular interest. The model [GUSSGRID]
demonstrates how GUSS is used together with the
Grid facility.
The Grid Facility: A First Example
In this section we will illustrate the use of the basic grid facility
with the model [QMEANVAR]. This model traces an efficiency
frontier for restructuring an investment portfolio. Each point on
the frontier requires the solution of independent quadratic
mixed integer models. The original solution loop is shown
below:
This loop will save the solutions of the model minvar for
different returns ret. As the solutions do not depend on the
loop(p(pp),
   ret.fx = rmin + (rmax-rmin)/(card(pp)+1)*ord(
   solve minvar min var using miqcp ;
   xres(i,p)         = x.l(i);
   report(p,i,'inc') = xi.l(i);
   report(p,i,'dec') = xd.l(i); 
);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:12
The Grid and Multi-Threading Solve Facility
https://www.gams.com/latest/docs/UG_GridComputing.html
4/21


order in which they are carried out, we can rewrite this loop to
operate in parallel.
The Submission Loop
The first step for solving in parallel using the Grid facility is to
write the submission loop:
The model attribute solveLink controls the behavior of the
solve statement. The value of 3 (which is equivalent to the
compile-time constant %solveLink.asyncGrid%) directs GAMS to
generate the model and submit it for solution and then
continue without waiting for the completion of the solution
step. Thus with setting minvar.solveLink to 3 we activate
grid computing.
A handle in the grid environment identifies the particular
model and data instances available. The model attribute
handle contains a unique identification of each submitted
solution request and is typically stored in a parameter defined
over a set that covers all model instances. The specific
numerical values of handles are assigned by GAMS and may be
used to recover solutions and manage models that are solved
on the grid. In our example, the handle parameter is h and the
set of all model instances is pp. The handle values that are
stored in h are later used to collect the solutions once the
solution processes are completed.
The Collection Loop
We collect the solutions with the following collection loop:
Parameter h(pp)      'model handles';
minvar.solveLink = 3;
loop(p(pp),
   ret.fx = rmin + (rmax-rmin)/(card(pp)+1)*ord(
   solve minvar min var using miqcp;
   h(pp) = minvar.handle;
);
loop(pp$handleCollect(h(pp)),
   xres(i,pp)         = x.l(i);
   report(pp,i,'inc') = xi.l(i);
   report(pp,i,'dec') = xd.l(i);
);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:12
The Grid and Multi-Threading Solve Facility
https://www.gams.com/latest/docs/UG_GridComputing.html
5/21


Note that the dollar condition restricts the looping set pp to
those elements which return a nonzero value to the function
handleCollect(h(pp)). The function handleCollect tests the
solution status for each element of the set pp. And if the
solution is available, it is read into the GAMS data base. In this
case the function returns a value of 1. If the solution is not
ready to be retrieved, the value zero will be returned.
Observe that the collection loop above has one big flaw. If a
solution has not been ready (that is if handleCollect equaled
zero), it will not be retrieved. We need to call this loop several
times until all solutions have been retrieved or we get tired of
it and quit. We will use a repeat until construct and the handle
parameter h to control the loop to look only for the solutions
that have not been loaded yet. The code follows:
Once we have extracted a solution we will set the handle
parameter h to zero. In addition, we want to remove the
instance from the system by calling the function handleDelete
which returns zero if successful. No harm is done if it fails but
we want to be notified via the conditional display statement.
Before running the collection loop again, we may want to wait a
while to give the system time to complete more solution steps.
This is done with the function readyCollect which waits until
another model instance with a handle in h is ready to be
collected (or the optionally defined number of seconds has
passed). The final wrinkle is to terminate if all model instances
have been deleted from the system since their solutions were
retrieved or after 100 seconds have elapsed, even if we did not
get all solutions. This is accomplished with the function
timeElapsed and is important, because if one of the solution
steps fails our program would never terminate. Recall that the
handle parameter h equals zero for all elements of the set pp
whose related models have been solved and their solutions
repeat
   loop(pp$handleCollect(h(pp)),
         xres(i,pp)         = x.l(i);
         report(pp,i,'inc') = xi.l(i);
         report(pp,i,'dec') = xd.l(i);
         display$handleDelete(h(pp)) 'trouble de
         h(pp) = 0; 
   ) ;
   display$readyCollect(h, 100) 'Problem waiting
until card(h) = 0 or timeelapsed > 100;
xres(i,pp)$h(pp) = na;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:12
The Grid and Multi-Threading Solve Facility
https://www.gams.com/latest/docs/UG_GridComputing.html
6/21


have been extracted. The last statement in the code above sets
the results of the missed solves to na to signal the failed solve.
The parameter h will now contain the handles of the failed
solves for later analysis.
Alternatively, we could use the function handleStatus and
collect the solutions that are stored in a GDX file. For example,
we could write:
The function handleStatus tests the solution process and
returns the value 2 if the solution process has been completed
and the results can be retrieved. The solution is stored in a GDX
file which can be loaded in a way similar to other GDX solution
points. First, we need to specify which solution to retrieve by
setting the the model attribute minvar.handle to the
appropriate value. Then we can use the statement
execute_loadhandle minvar; to load the solution for the
model minvar back into the GAMS data base.
Note
Except for the requirement of a model with a
previously specified handle, the command
execute_loadhandle operates like the procedure
execute_loadpoint.
Using the function handleStatus and the command
execute_loadhandle instead of the simpler handleCollect,
adds one more layer of control to the final collection loop. Now
we need one additional if statement inside the collection loop
above:
loop(pp$(handleStatus(h(pp)) = 2),
   minvar.handle = h(pp);
   execute_loadhandle minvar;
   xres(i,pp)         = x.l(i);
   report(pp,i,'inc') = xi.l(i);
   report(pp,i,'dec') = xd.l(i); 
);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:12
The Grid and Multi-Threading Solve Facility
https://www.gams.com/latest/docs/UG_GridComputing.html
7/21


Finally, we are ready to run the modified model.
The Execution Log
The execution log will contain some new information that may
be useful for more advanced applications:
Note that the log contains some additional information about
the submission, retrieval and removal of the solution instance.
In the following sections we will make use of this additional
information.
The execution log does not cotain any solver log. Though, if a
logOption value is set, that triggers writing to a file (i.e. 2 or 4),
the solver log of each job will be written to the corresponding
folder in the Grid Directory. So, if the solver log should be
inspected when the job is done, one needs to make sure, that
these folders do not get cleaned automatically, e.g. by setting
the gridDir command line parameter.
For a complete example for grid computing, see the grid
enabled transport model [TRNSGRID].
repeat
   loop(pp$h(pp),
      if(handleStatus(h(pp)) = 2,
         minvar.handle = h(pp);
         execute_loadhandle minvar;
         xres(i,pp)         = x.l(i);
         report(pp,i,'inc') = xi.l(i);
         report(pp,i,'dec') = xd.l(i);
         display$handleDelete(h(pp)) 'trouble de
         h(pp) = 0; 
      ); 
   ) ;
   display$readyCollect(h, 100) 'Problem waiting
until card(h) = 0 or timeelapsed > 100;
xres(i,pp)$h(pp) = na;
     --- LOOPS pp = p1
     ---   46 rows 37 columns 119 non-zeroes
     ---   311 nl-code 7 nl-non-zeroes
     ---   14 discrete-columns
     --- Submitting model minvar with handle gri
     --- Executing after solve
     ...
     --- GDXin=C:\answerv5\gams_srcdev\225j\grid
     --- Removing handle grid137000003
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:12
The Grid and Multi-Threading Solve Facility
https://www.gams.com/latest/docs/UG_GridComputing.html
8/21


Observe that we have made no assumptions about what kind of
solvers and what kind of computing environment we will
operate. The example above is completely platform and solver
independent and it runs on a Windows laptop or on a massive
grid network like the Condor system without any changes in the
GAMS source code.
Advanced Use of Grid Features
In this section we will describe a few special application
requirements and show how this can be handled with the
current system. Some of those applications may involve
thousands of model instances with solution times of many
hours each. Some may fail and require resubmission. More
complex examples require communication and the use of GAMS
facilities like the Branch-and-Cut-and-Heuristic Facility (BCH),
which submit other models from within a running solver.
Imagine a situation with thousands of model instances each
taking between minutes and many hours to solve. We will break
the master program into a submitting program, an inquire
program and a final collection program. We will again use the
model [QMEANVAR] to demonstrate the principle. We will split
the code of the modified [QMEANVAR] GAMS code into three
components: qsubmit, qcheck and qreport.
Very Long Job Durations: The Submitting
Program
The file qsubmit.gms will include everything up to and
including the new submission loop. To save the instances we
will need a unique grid directory gdir and to restart the
problem we will have to create a save file. For details on the
save and restart facility in GAMS, see chapter The Save and
Restart Feature. When running the first job, we will use the
command line parameter save or its synonym s to create the
required save file:
   > gams qsubmit s=submit gdir=c:\test\grid
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:12
The Grid and Multi-Threading Solve Facility
https://www.gams.com/latest/docs/UG_GridComputing.html
9/21


Very Long Job Durations: The Inquire Program
The solution of all the model instances may take hours. From
time to time we may run a quick inquiry job to learn about the
status. The following program qcheck.gms will list the current
status:
For details on the model attributes referenced in the code
above, see handle, solveStat, modelStat and resUsd. To run the
program above, we will restart from the previous save file by
using the command line parameter restart or its synonym r.
The output generated by the display statement may look like
the following:
We may want to do some more detailed analysis on one of the
solved model instances. The respective program, called
Parameter status(pp,*);
Scalar    handle;
Acronym   BadHandle, Waiting, Ready;
loop(pp,
   handle = handleStatus(h(pp));
   if(handle=0,
      handle = BadHandle;
   elseif handle=2,
      handle = Ready;
      minvar.handle = h(pp);
      execute_loadhandle minvar;
      status(pp,'solvestat') = minvar.solvestat;
      status(pp,'modelstat') = minvar.modelstat;
      status(pp,'seconds') = minvar.resusd;
   else
      handle = Waiting;
   );
   status(pp,'status') = handle;
);
display status;
   > gams qcheck r=submit gdir=c:\test\grid
   ----   173 PARAMETER status
       solvestat   modelstat   seconds     statu
   p1      1.000       1.000     0.328      Read
   p2      1.000       1.000     0.171      Read
   p3                                     Waitin
   p4                                     Waitin
   p5      1.000       1.000     0.046      Read
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:12
The Grid and Multi-Threading Solve Facility
https://www.gams.com/latest/docs/UG_GridComputing.html
10/21


qanalyze.gms, may inlcude the following lines of code:
For information on dollar control options, see chapter Dollar
Control Options, especially the detailed descriptions of the
options $if and $abort. Note that instance is a compile-time
variable. The program may be called using a double dash
paramter, which defines and sets a GAMS compile-time
variable:
Very Long Job Durations: The Collection Program
Once all jobs are completed we are ready for the collection
loop. For simplicity, we will not include the repeat loop,
because we would not run the final collection program unless
we were satisfied that we got most of the solutions that we
wanted. The file qreport.gms could look like the following:
We will restart the program above from the save file that was
created earlier:
$if not set instance $abort --instance is missin
if(not handleStatus(h('%instance%')),
     abort$yes 'model instance %instance% not re
minvar.handle = h('%instance%');
execute_loadhandle minvar;
display x.l,xi.l,xd.l;
...
    > gams qanalyze r=submit gdir=c:\test\grid -
loop(pp$handleStatus(h(pp)),
   minvar.handle = h(pp);
   execute_loadhandle minvar;
   xres(i,pp)         = x.l(i);
   report(pp,i,'inc') = xi.l(i);
   report(pp,i,'dec') = xd.l(i);
   display$handleDelete(h(pp)) 'trouble deleting
   h(pp) = 0; 
);
xres(i,pp)$h(pp) = na;
...
   > gams qreport r=submit gdir=c:\test\grid 
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:12
The Grid and Multi-Threading Solve Facility
https://www.gams.com/latest/docs/UG_GridComputing.html
11/21


Note that it is not necessary to run the job from the same
directory that we have used for the initial submission; it is even
possible to use a different operating system.
Summary of Grid Features
We introduced several GAMS features to facilitate the
asynchronous or parallel execution of the solve statement.
These GAMS features are summarized in the following
subsections.
In addition to the features described below, the option or
command line parameter ThreadsAsync was introduced.
ThreadsAsync controls the number of threads or CPU cores
that are used in multi-threading computing.
Grid Handle Functions
The grid handle functions are listed in Table 1. For details on
functions in GAMS in general and complete lists of all GAMS
functions, see section Functions. Note that the desired return
values - the return values that indicate that no error has
occurred - are marked with bold letters.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:12
The Grid and Multi-Threading Solve Facility
https://www.gams.com/latest/docs/UG_GridComputing.html
12/21


Function
Description
handleCollect(HANDLE)
Tests if the
solve of the
model instance
identified by
HANDLE is done:
if so, it loads
the solution
into the GAMS
data base. If the
option
asyncSolLst is
active the
solution listing
is printed to the
listing file.
Note that
handleCollect
ignores the
setting of the
option SolveOpt
and always uses
the default
value merge.
handleStatus(HANDLE)
Tests if the
solve of the
model instance
identified by
HANDLE is done.
Note that there
are compile-
time constants
that are related
to this function.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:12
The Grid and Multi-Threading Solve Facility
https://www.gams.com/latest/docs/UG_GridComputing.html
13/21


handleDelete(HANDLE)
Deletes the
model instance
identified by
HANDLE and
returns a
numerical
indicator of the
status of the
deletion. If the
HANDLE given is
not valid, an
execution error
is triggered.
handleSubmit(HANDLE)
Resubmits the
model instance
identified by
HANDLE for
solution. In case
of a nonzero
return an
execution error
is triggered.
Table 1: Grid Handle Functions
Note that GAMS might issue execution errors which could give
additional information that may help to identify the source of
problems. The function execError may be used to get and set
the number of execution errors.
Grid Model Attributes
Model attributes are introduced in section Model Attributes.
The following three model attributes are particularly relevant
for grid computing:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 16:12
The Grid and Multi-Threading Solve Facility
https://www.gams.com/latest/docs/UG_GridComputing.html
14/21


readyCollect(HANDLES[,maxWait])
Waits until a
model solution
is ready to be
collected.
HANDLES must
be either a
scalar or
parameter
containing one
or more model
handles or a
model with its
handle
attribute.
MaxWait
specifies the
maximum time
to wait in
seconds, the
default value is
+inf.
Function
Description
solveLink
Specifies the solver linking conventions. The
following values direct the solve statement to
use grid computing or multi-thread computing:
3, 4, 6 and 7.
Note that the default for this model attribute
can be set as command line parameter and
option statement.
For more information, see the detailed
description.
handle
Specifies the current instance handle. This is
used to identify a specific model instance and
to provide additional information needed for
the process signal management (compare
subsections The Submission Loop and The
Collection Loop above).
number
Specifies the current instance number. Any time
a solve is attempted for a model, the instance
number is incremented by one and the handle
is update accordingly. The instance number can
be reset by the user which then resynchronizes
the handle.
Table 2: Grid Handle Attributes
Grid Solution Retrieval
As an alternative to the function handleCollect a solution may
be retrieved with the following statement:
This statement will update the GAMS data base with the status
and solution for the current instance of mymodel. Note that the
underlying mechanism is a GDX file. Except for the requirement
of a model with a previously specified handle, this command
operates like the procedure execute_loadpoint. If the option
asyncSolLst is active the solution listing is printed to the listing
file.
execute_loadhandle mymodel;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:12
The Grid and Multi-Threading Solve Facility
https://www.gams.com/latest/docs/UG_GridComputing.html
15/21


The Grid Directory
The instantiated (generated) models and their corresponding
solutions are kept in unique directories that may be reached
from the submitting system. Each GAMS job may have only one
grid directory. By default, the grid directory is assumed to be
the scratch directory. This may be overwritten by using the
GAMS command line parameter GridDir, or short GDir. An
example follows.
If gridpath is not a fully qualified name, the name will be
completed using the current directory. If the grid path does not
exist, an error will be issued and the GAMS job will be
terminated. A related GAMS parameter is ScrDir or short SD.
Recall the following default mechanism: When a GAMS job is
started a unique process directory is created in the current
directory. These directories are named 225a to 225zz. When a
GAMS job terminates, the system will remove the process
directory at the completion of a GAMS job. Any file that has not
been created by the GAMS core system will be flagged. If the
call gamskeep instead of gams is used, another exit script will
be activated that results in the process directory to be kept.
Note that if we do not specify a scratch directory, the scratch
directory will be the same as the process directory. If we do not
specify a grid directory, the grid directory will be the same as
the scratch directory.
Observe that if we assume that some of the model instances
may fail or we want to break the GAMS program into several
pieces to run as separate jobs, we need to be careful not to
remove the model instance we have not completely processed.
In such cases we have to use the parameter GridDir, so that we
may access previously created model instances.
    > gams myprogram ... GDir=gridpath
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:12
The Grid and Multi-Threading Solve Facility
https://www.gams.com/latest/docs/UG_GridComputing.html
16/21


The Grid Facility: Architecture and
Customization
The current Grid facility relies on very basic operating system
features and does not attempt to offer real and direct job or
process control. The file system is used to signal the
completion of a submitted task and GAMS has currently no
other way to interact with the submitted process directly, like
forcing termination or change the priority of a submitted task.
This approach has its obvious advantages and disadvantages.
There are a number of attempts to use grid computing to
provide value added commercial remote computing services.
When GAMS executes a solve with the option solveLink set to 3
it will perform the following steps:
1. Create a subdirectory in the GridDir with the name
gridnnn. Here nnn stands for the numeric value of the
handle. The handle value is the internal symbol ID
number x 1e6 + the model instance number. For example,
in the [QMEANVAR] example the first grid subdirectory
was grid137000002.
2. Remove the completion signal in case the file already
exists. Currently the signal is a file called finished. For
example, grid137000002/finished.
3. Create or replace a GDX file called gmsgrid.gdx which
will contain a dummy solution with failed model and
solver status. This file will be overwritten by the final
step of the solution process and will be read when
calling execute_loadhandle.
4. Place all standard GAMS solver interface files into the
above instance directory.
5. Execute the submission wrapper called gmsgrid.cmd
under Windows or gmsgrid.run under Unix. These
submission scripts are usually located in the GAMS
system directory, they may be located via the current
path if they are not found in the GAMS system directory.
The grid submission script gmsgrid.cmd or gmsgrid.run is
called with four arguments that are needed to make a standard
GAMS solver call: the solver executable file name, the solver
control file name, the solver scratch directory, and the solver
name. The submission script then does the final submission to
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:12
The Grid and Multi-Threading Solve Facility
https://www.gams.com/latest/docs/UG_GridComputing.html
17/21


the operating system. This final script will perform the
following steps:
1. call the solver,
2. call a utility that will create the final GDX file
gmsgrid.gdx,
3. set the completion signal finished.
If we want to use the function handleSubmit we will also have
to create the script gmsrerun.cmd or gmsrerun.run. This
script could later be used to resubmit the job.
For example, the default submission script for Windows is
shown below:
Grid Submission Testing
The grid submission process can be tested on any GAMS
program without having to change the source text. The option
@echo off
: gams grid submission script
:
: arg1 solver executable
:    2 control file
:    3 scratch directory
:    4 solver name
:
: gmscr_nx.exe processes the solution and produc
:
: note: %3 will be the short name, this is neeed
:       the START command cannot handle spaces o
:       before we use %~3  will strip surroundin
:       makes the name short
:
: gmsrerun.cmd will resubmit runit.cmd
echo @echo off                      > %3runit.cm
echo %1 %2 %4                      >> %3runit.cm
echo gmscr_nx.exe %2               >> %3runit.cm
echo echo OK ^> %3finished ^& exit >> %3runit.cm
echo @start /b /belownormal %3runit.cmd ^> nul  
start /b /belownormal %3runit.cmd > nul
exit
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:12
The Grid and Multi-Threading Solve Facility
https://www.gams.com/latest/docs/UG_GridComputing.html
18/21


solveLink=4 instructs the solve statement to use the grid
submission process and then wait until the results are
available. Note that the option solveLink may be set via a GAMS
command line parameter, a GAMS option statement or via
assignment to the model attribute. Once the model instance
has been submitted for solution, GAMS will check if the job has
been completed. It will keep checking twice the reslim seconds
allocated for this optimization job and report a failure if this
limit has been exceeded. After successful or failed retrieval of
the solution, GAMS will remove the grid directory, unless we
have used the call gamskeep or have set the GAMS command
line parameter keep.
Multi-Threading
As we have described in this chapter, each solve is handled in
its own process space with the Grid facility. Recall that the Grid
facility is activated by setting the option or model attribute
solveLink to 3 or 4. If solveLink is set to 6 (or the compile-
time constant %solveLink.asyncThreads%) instead, a
separate thread is used. This allows efficient in-memory
communication between GAMS and the solver, like it is done if
the option solveLink is set to 5 (or the compile-time constant
%solveLink.loadLibrary%).
Apart from this, the multi-threading facility works in the same
way as the Grid facility. The solve statement generates the
model and passes it to the solver in a separate thread, then a
handle of the model instance may be stored using the model
attribute handle and the grid handle functions may be used to
collect the solution and deal with the model instance, namely
handleCollect, handleDelete, handleStatus and readyCollect.
Note that the option or command line parameter ThreadsAsync
sets the maximum number of threads that should be used for
the asynchronous solves.
The following matrix shows which solvers may be used with
solveLink = 6 on which platform:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:12
The Grid and Multi-Threading Solve Facility
https://www.gams.com/latest/docs/UG_GridComputing.html
19/21


Solver
x86 64bit
MS
Windows
x86
64bit
Linux
x86
64bit
macOS
arm
64bit
macOS
CONOPT3
×
×
×
×
CONOPT4
×
×
×
×
CONVERT
×
×
×
×
COPT
×
×
×
×
CPLEX
×
×
×
×
GUROBI
×
×
×
×
HIGHS
×
×
×
IPOPT
×
×
×
×
MOSEK
×
×
×
×
ODHCPLEX
×
×
RESHOP
×
×
×
×
SCIP
×
×
×
×
SHOT
×
×
×
×
SNOPT
×
Soplex
×
×
×
×
XPRESS
×
×
×
×
If a solver is selected for which solveLink = 6 is not
supported on the corresponding platform, solveLink = 3 will
be used instead and it will be noted in the log.
Multi-threading Submission Testing
The multi-threading submission process may be tested on any
GAMS program without having to change the source text. The
option solveLink = 7 (or, equivalently, the compile-time
constant %solveLink.threadsSimulate%) instructs the solve
statement to use the multi-threading submission process, wait
until the results are available and then load the solution into
the GAMS data base. Once the model instance has been
submitted for solution, GAMS will check if the job has been
completed. It will keep checking twice the reslim seconds
allocated for this optimization job and report a failure if this
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:12
The Grid and Multi-Threading Solve Facility
https://www.gams.com/latest/docs/UG_GridComputing.html
20/21


limit has been exceed. After successful or failed retrieval of the
solution GAMS will remove the thread handle.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:12
The Grid and Multi-Threading Solve Facility
https://www.gams.com/latest/docs/UG_GridComputing.html
21/21


Programming Flow Control
Features
Table of Contents
Introduction
The If Statement
The If Statement: Syntax
The If Statement: Examples
The Loop Statement
The Loop Statement: Syntax
The Loop Statement: Examples
The While Statement
The While Statement: Syntax
The While Statement: Examples
The For Statement
The For Statement: Syntax
The For Statement: Examples
The Repeat Statement
The Repeat Statement: Syntax
The Repeat Statement:
Examples
The Break Statement
The Break Statement: Syntax
The Break Statement: Examples
The Continue Statement
The Continue Statement: Syntax
The Continue Statement:
Examples
The Abort Statement
The Abort Statement: Syntax
The Abort Statement: Examples
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 16:13
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
1/23


Introduction
In this chapter we will describe the programming flow control
features available in GAMS. The if statement facilitates
expressing complex conditional statements (see also chapter
Conditional Expressions, Assignments and Equations). In
addition, GAMS offers four loop constructs to handle looping
requirements: the loop statement, the while statement, the for
statement and the repeat statement. At the end of this chapter
we will introduce the break, and continue statements, which
give additional control over the execution of loop structures,
and the abort statement, a statement that may be used to
terminate the execution of a program.
Note that this chapter deals with programming flow control
features at execution time. In addition, GAMS provides a dollar
control option that allows for conditional processing of input
files at compile time. For more information, see the detailed
description of the option $if. For details on dollar control
options in general, see chapter Dollar Control Options.
The If Statement
The if statement is useful to branch conditionally around a
group of statements. In some cases this can also be written as a
set of dollar conditions, but the if statement may make the
GAMS code more readable. An optional else and/or elseif
part allows the user to formulate traditional if-then-else
constructs.
The If Statement: Syntax
The syntax for an if statement in GAMS is as follows:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
2/23


The keyword if indicates that this is an if statement. The
logical condition is followed by one or more statements that
are executed if the logical condition is satisfied. For details on
the various forms of logical conditions in GAMS, see sections
Logical Conditions and Filtering Sets. The if statement may
end at this point, without any specifications for cases when the
logical condition is FALSE and no action is taken in these
cases. However, GAMS also allows further specifications:
optional alternative if tests and optional statements for cases
when all previous if tests have failed. The keyword elseif
introduces an alternative if test with a logical condition and
one or more statements. Note that the elseif case is optional
and may be repeated multiple times. Note further that the
elseif case implies that the logical condition of the if case
has not been satisfied. The keyword else introduces the final
part of the construct. It is optional and allows specification for
cases when the logical condition of the if case (and possibly
the elseif case(es)) has not been satisfied.
Attention
Only execution statements are permitted in
programming flow control statements.
Consequently declaration statements and equation
definitions are not allowed inside an if statement.
Examples are given in the next subsection. Note that there is an
alternative syntax that is more in line with the syntax of some
popular programming languages. For more information, see the
detailed description of the dollar control option onEnd.
The If Statement: Examples
Consider the following set of conditional assignment
statements that use dollar conditions:
if (logical_condition,
    statement; {statement;}
{ elseif logical_condition, 
    statement; {statement;} }
[ else 
    statement; {statement;} ]
);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
3/23


They may be expressed using an if-elseif-else statement:
Note that the body of the if statement may contain solve
statements. For instance, consider the bit of GAMS code that
follows. Note that ml is a GAMS model, z is a free variable, j is
a set and x is a variable.
First the model ml is solved. For details on solve statements in
GAMS, see section The Solve Statement. Then a post solution
analysis is done with the if statement. If the model is
infeasible, the upper bound on the variable x is relaxed and the
model is solved again. If the original model is not infeasible
and it is not optimal either, then the compilation is aborted
and the error message above is reported. For more information
on GAMS output, see chapter GAMS Output, particularly
subsection Model Status for a list of all GAMS model statuses.
The display statement is introduced in chapter The Display
Statement. For details on the abort command, see abort.
p(i)$(f <= 0) = -1 ;
p(i)$((f > 0) and (f < 1)) = p(i)**2 ;
p(i)$(f >= 1) = p(i)**3 ;
q(j)$(f <= 0) = -1 ;
q(j)$((f > 0) and (f < 1)) = q(j)**2 ;
q(j)$(f >= 1) = q(j)**3 ;
if (f <= 0,
    p(i) = -1 ;
    q(j) = -1 ;
elseif ((f > 0) and (f < 1)),
    p(i) = p(i)**2 ;
    q(j) = q(j)**2 ;
else
    p(i) = p(i)**3 ;
    q(j) = q(j)**3 ;
) ;
solve ml using lp minimizing z;
if (ml.modelstat = 4,
     display "model ml was infeasible, relax bou
     x.up(j) = 2*x.up(j) ;
     solve ml using lp minimizing z ;
else
    if (ml.modelstat <> 1,
        abort "error solving model ml" ;
    );
);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
4/23


The following GAMS code is illegal since it is not permitted to
define equations inside an if statement.
The following GAMS code is also illegal since declarations
inside an if statement are not allowed.
The Loop Statement
The loop statement facilitates executing a group of statements
for each member of a set. Loop statements are particularly
useful for cases when parallel assignments are not sufficient.
This is the case most often when there is no analytic
relationship between the values to be assigned to a parameter.
It is, of course, also useful to have a looping statement for
general programming.
The Loop Statement: Syntax
The syntax for the loop statement in GAMS is as follows:
The keyword loop indicates that this is a loop statement. The
index_list is the controlling domain of the loop. Note that
loops may be controlled by more than one set. In this case
parentheses are required around the index list, which is also
called the loop set(s). Observe that dynamic sets are allowed as
loop sets. The loop set(s) may be restricted by a logical
condition. For details on the various forms of logical conditions
if (s > 0,
    eq.. sum(i,x(i)) =g= 2 ;
);
if (s > 0,
   scalar y ; y = 5 ;
);
loop(index_list[$(logical_condition)],
     statement; {statement;}
) ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
5/23


in GAMS, see sections Logical Conditions and Filtering Sets. For
an introduction to dollar conditions in general, see chapter
Conditional Expressions, Assignments and Equations.
The index list is followed by one or more statements. Except for
the final statement, each statement must end with a semicolon
';'. The loop statements are executed for each member of the
controlling domain in turn. The order of evaluation is the entry
order of the labels. A loop is thus another, more general, type
of indexed operation.
Attention
Only execution statements are permitted in
programming flow control statements.
Consequently declaration statements and
equation definitions are not allowed inside a
loop statement.
It is illegal to modify any controlling set
inside the body of the loop.
Loop statements in GAMS are often used for iterative
calculations, generating reports with put statements and doing
scenario based studies with solve statements. Examples are
given in the next subsection. Note that there is an alternative
syntax that is more in line with the syntax of some popular
programming languages. For more information, see the detailed
description of the dollar control option onEnd.
The Loop Statement: Examples
Consider a hypothetical case when a growth rate is empirical:
The loop statement is then used to calculate the cumulative
sums iteratively:
Set        t          / 1985*1990 /;
Parameter  pop(t)     / 1985  3456 /
           growth(t)  / 1985  25.3,  1986  27.3,
                        1988  27.1,  1989  26.6,
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
6/23


In this example the driving set is t and we have just one
statement in the scope of the loop.
The following small artificial examples illustrate the effects of a
dollar condition in a loop statement.
In the first loop statement the controlling domain is the set
pair (i,j). It is restricted to those label combinations whose
values associated with the parameter q are greater than zero.
The logical condition in the second loop statement is
. This is shorthand for 
. The
domain in the third loop statement is restricted to those
elements of the set i where the sum over j of the absolute
values of the parameter q does not equal zero. Note that this
condition is satisfied only for the label "i1". Observe that i
and j are both ordered sets. In the fourth loop statement the
first and the last element of the set j are excluded. For more on
the set operators ord and card, see sections The Ord Operator
and The Card Operator respectively. The dollar control in the
last loop statement excludes all label combinations that are
not members of the set k. For further details on dollar
conditions, see chapter Conditional Expressions, Assignments
and Equations.
Note
The dollar condition may be replaced by an if
statement; see the example below.
loop(t, pop(t+1)  = pop(t) + growth(t) ) ;
Sets       i       / i1*i3 /
           j       / j1*j5 /
           k(i,j)  / i1.j1, i1.j3, i3.j3, i3.j5 
Parameter  c(i)    / i1 3, i2 1 /
           q(i,j)  / i1.j1 1, i1.j2 3, i1.j4 2 /
Scalars    x, y, z;
x = 1; y = 3; z = 1;
loop ( (i,j) $ (q(i,j) > 0), x = x + q(i,j));
loop ( i $ (c(i) + c(i)**2), z = z + 1);
loop ( i $ sum(j, abs(q(i,j))), z = z + 1);
loop ( j $ (ord(j) > 1 and ord(j) < card(j)), z 
loop ( (i,j) $ k(i,j), y = y + ord(i) + 2*ord(j)
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
7/23


The next example shows how a model can be solved for each
element of a set i with different data using a loop statement.
Note that problemdata is a scalar, g(i) and d(i) are
parameters, mymodel is a GAMS model and profit is a free
variable.
In the first statement some data in the model is updated in
accordance with the 
 element of the parameter g. In the
second statement the model is solved. For details on the solve
statement, see section The Solve Statement. The objective
value for each iteration is saved in the parameter d in the third
statement.
A loop is often used to perform iterative calculations. Consider
the following example, which finds square roots by Newton's
method. This example is purely for illustration - in practice, the
function sqrt should be used. Newton's method is based on
the assertion that if  is an approximation to the square root of
, then 
 is a better approximation.
Note that in this example the dollar condition in the loop does
not restrict the driving set i, but it is used to terminate the
loop procedure. The scalar curacc is updated in every
loop (i,
  problemdata = g(i);
  solve mymodel using lp maximizing profit;
  d(i) = profit.l;
);
Set       i         "set to drive iterations"   
Parameter value(i)  "used to hold successive app
Scalars   target    "number whose square root is
          sqrtval   "final approximation to sqrt
          curacc    "accuracy of current approxi
          reltol    "required relative accuracy"
abort$(target <= 0) "argument to newton must be 
value("i-1") = target/2  ;
curacc       =  1  ;
loop(i$(curacc > reltol),
       value(i+1) =  0.5*(value(i) + target/valu
       sqrtval    =  value(i+1);
       curacc     =  abs (value(i+1)-value(i))/(
) ;
abort$(curacc > reltol) "square root not found"
option decimals=8;
display  "square root found within tolerance",  
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
8/23


iteration. As soon as it becomes equal to or smaller than the
required relative accuracy reltol the loop stops. As the output
below shows, this is the case after seven iterations. The body of
the loop statement consists of three statements. The first
statement calculates the current approximation and assigns it
to the parameter value. The second statement updates the
scalar sqrtval, and the third statements computes the
accuracy of the current approximation in each iteration. Note
that before and after the loop statement we added lines to
account for special cases. For details on the abort statement,
see section The Abort Statement at the end of this chapter. The
output generated by the display statement is given below.
Note that a statement within the body of a loop may be an if
statement (or any other programming flow control statement).
Moreover, the logical condition in a loop statement may be
expressed with an if statement instead of a dollar condition.
The following example serves as illustration. Observe that k is a
set and s, t, u and a are parameters.
Note that if the logical condition is not satisfied the assignment
is not made and the parameter u remains unchanged.
Recall that subsets are connected with their supersets by arcs
thus building a domain tree where the root node is the
universal set. The following example demonstrates how the
domain tree may be used in a loop statement.
----     19 square root found within tolerance
----     19 PARAMETER SQRTVAL              =   4
                                                
----     19 PARAMETER VALUE         used to hold
i-1 11.72800000,    i-2  6.86400000,    i-3  5.1
i-5  4.84314711,    i-6  4.84313948,    i-7  4.8
loop (k,
   if((s(k) < 0 and t(k)),
      u(k) = a(k);
   );
);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
9/23


Observe that the looping set is i(jjj). This means that we
loop over those elements of i that are also elements of the set
jjj. This construct is permitted since i is in the domain tree
on the path from jjj to the universe or universal set. It is
allowed to go up the domain tree on one path and go down on
another path. Therefore all the elements of jjj are assigned to
ii. The outcome of the display statement confirms this:
The While Statement
The while statement facilitates the repeated execution of one
or more statements as long as a logical condition is satisfied.
The While Statement: Syntax
The syntax for the while statement in GAMS is as follows:
The keyword while indicates that this is a while statement.
Inside the while statement a logical condition is followed by
one or more statements. For details on the various forms of
logical conditions in GAMS, see sections Logical Conditions and
Filtering Sets. The statements are executed as long as the
logical condition is TRUE.
Set i       / i1*i10 /
    ii(i) 
    j(i)    / i1*i9 / 
    jj(j)   / i1*i8 /
    jjj(jj) / i1*i7 /;
loop(i(jjj), ii(i) = yes;);
display ii;
----     8 SET ii
i1,    i2,    i3,    i4,    i5,    i6,    i7
while(logical_condition,
      statement; {statement;}
);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
10/23


Attention
Only execution statements are permitted in
programming flow control statements.
Consequently declaration statements and equation
definitions are not allowed inside a while
statement.
Examples are given in the next subsection. Note that there is an
alternative syntax that is more in line with the syntax of some
popular programming languages. For more information, see the
detailed description of the dollar control option onEnd.
The While Statement: Examples
Consider the following simple example:
Note that the scalar x is increased in each iteration until it
equals 10. Note further, that to ensure an exact result, in
numerical comparisons we need a stable check like we have
above (round(x,2) < 10), otherwise rounding errors may
occur. As soon as x reaches 10, the logical condition is no
longer satisfied and therefore there will be no further passes.
Hence the final value of x equals 10.
Note that the number of passes in a while statement may be
restricted using the command line parameter or option forlim.
For details on command line parameters and options, see
section Specifying Options Through the Command Line and
chapter The Option Statement respectively.
While statements may be used to control the solve
statement. For instance, consider the following implementation
of a random multi-start method for non-convex optimization.
Scalar x; x = 1;
while ( round(x,2) < 10,
   x = x + 0.01;
);
display x;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
11/23


Note that we start from a random starting point by setting the
initial level values randomly between the upper and lower
bounds. This assumes that the bounds have been previously
specified and are not infinity. When the method improves, that
is, if the logical condition (obj.l < globmin) is satisfied, the
best known solution is stored in the scalar globmin. The level
values associated with the best known solution so far are then
saved in the parameter bestsol. This procedure is repeated
1000 times. The model [PRIME] is another example where the
use of the while statement is illustrated. In this model the set
of all prime numbers smaller than 200 is generated.
The following GAMS code is illegal since equation definitions
inside a while statement are not permitted.
The following GAMS code is also illegal since declarations
inside a while statement are not allowed.
The For Statement
The for statement provides a compact way to iterate over a
range of values and execute one or more statements each time.
scalar count   /  1  /;
scalar globmin / inf /;
option bratio = 1 ;
while(count <= 1000,
      x.l(j) = uniform(x.lo(j),x.up(j)) ;
      solve ml using nlp minimizing obj ;
      if (obj.l < globmin,
          globmin = obj.l ;
          bestsol(j) = x.l(j) ;
      ) ;
      count = count+1 ;
) ;
while(s > 0,
      eq.. sum(i,x(i)) =g= 2 ;
);
while(s > 0,
      scalar y ; y = 5 ;
);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
12/23


The For Statement: Syntax
The syntax for the for statement in GAMS is as follows:
The keyword for indicates that this is a for statement. The
scalar a begins with the real number start_value and is
changed after each pass of the loop by the increment incr
until it reaches the real number end_value. Note that the
specification of an increment is optional, the default is 1. If the
increment is given, it has to be a positive real number. Note
further that to indicates that the scalar a is increased and
downto indicates that it is decreased. In each iteration one or
more statements are executed.
Attention
Only execution statements are permitted in
programming flow control statements.
Consequently declaration statements and equation
definitions are not allowed inside a for statement.
Examples are given in the next subsection. Note that there is an
alternative syntax that is more in line with the syntax of some
popular programming languages. For more information, see the
detailed description of the dollar control option onEnd.
The For Statement: Examples
Consider the following simple example:
Note that negative real numbers are possible for the start and
end values. The resulting listing file will contain the following
lines:
for (a = start_value to|downto end_value [by inc
     statement; {statement;}
);
Scalar s;
for (s = -3.8 to -0.1 by 1.4,
     display s ;
);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
13/23


Observe that the value of s was increased by 1.4 with each pass
of the loop as long as it did not exceed -0.1. In the next example
the value of s is decreased:
Note that the number of passes in a for statement may be
restricted using the command line parameter or option forlim.
For details on command line parameters and options, see
section Specifying Options Through the Command Line and
chapter The Option Statement respectively.
Like while statements, for statements may be used to control
the solve statement. The following example illustrates the use
of the for statement by replicating the random search for a
global optimum of a non-convex model that we discussed
above.
Note that the logical condition in the while loop (
count <= 1000) is replaced by the specification of the range
of values for the scalar i. The body of the for loop is identical
to the body of the while loop, except for the statement to
update the scalar count that we needed in the while loop.
This demonstrates the similarities and differences between the
two loops.
----      3 PARAMETER s                    =    
----      3 PARAMETER s                    =    
----      3 PARAMETER s                    =    
Scalar s;
for (s = 3 downto -0.1 by 1.4,
     display s ;
);
scalar i ;
scalar globmin / inf / ;
option bratio = 1 ;
for (i = 1 to 1000,
     x.l(j) = uniform(x.lo(j),x.up(j)) ;
     solve ml using nlp minimizing obj ;
     if (obj.l < globmin,
         globmin = obj.l ;
         bestsol(j) = x.l(j) ;
     );
);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
14/23


The following GAMS code is illegal since it is not allowed to
define equations inside a for statement.
The following GAMS code is also illegal since declarations
inside a for statement are not permitted.
The Repeat Statement
The repeat statement facilitates the repeated execution of one
or more statements. This is done unconditionally at least once
and stopped when a logical condition is satisfied.
The Repeat Statement: Syntax
The syntax for the repeat statement in GAMS is as follows:
The keyword repeat indicates that this is a repeat statement.
One or more statements are executed in each iteration. The
keyword until introduces the termination criterion: if the
logical condition is satisfied, the repeat loop is terminated.
For details on the various forms of logical conditions in GAMS,
see sections Logical Conditions and Filtering Sets.
Note that the repeat statement is similar to the while
statement, but a repeat loop is guaranteed to be executed at
least one time since the logical condition is stated after the
statements.
for (s = 1 to 5,
     eq.. sum(i,x(i)) =g= 2 ;
);
for (s = 1 to 5,
     scalar y ; y = 5 ;
);
repeat ( 
    statement; {statement;}
until logical_condition );
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
15/23


Attention
Only execution statements are permitted in
programming flow control statements.
Consequently declaration statements and equation
definitions are not allowed inside a repeat
statement.
Examples are given in the next subsection.
The Repeat Statement: Examples
Consider the following simple example:
The scalar a is increased in each iteration by 1. If a equals 5, the
termination criterion is satisfied and the loop stops. Note that
this example works nicely since both, the scalar and the
increment, are integer. In case the entity on the right-hand side
of the termination condition is not an integer or the increment
is not an integer, we recommend a formulation of the check
that is more stable to avoid rounding errors. An example for a
stable termination condition follows.
Observe that in the next example the termination condition is
TRUE from the start. In this case the statement in the body of
the repeat statement is executed once and then the loop is
terminated. Hence the final value of a will be 5.
Scalar a / 1 /;
repeat ( 
    a = a + 1;
    display a;
until a = 5 );
Scalar a / 1 /;
repeat (
    a = a + 0.1;
    display a;
until abs(a-5) < 1e-6 );
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
16/23


Note that the number of passes in a while statement may be
restricted using the command line parameter or option forlim.
For details on command line parameters and options, see
section Specifying Options Through the Command Line and
chapter The Option Statement respectively.
Here is a little more complex example. A repeat statement is
used to narrow the interval where a quadratic function passes
through zero. Note that, as is often the case, one of the
statements in the repeat loop is another programming flow
control statement, in this case an if statement.
The result of the display statement shows that the value of
min is 1.892 and the value of max is 2.432, the interval was
narrowed to 0.54, which is just a little less than the value of inc
. As expected, function_value1 and function_value2 differ
Scalar a / 4 /;
repeat (
    a = a + 1;
    display a;
until a >= 3 );
Scalar max             "current upper boundary o
       min             "current lower boundary o
       root            "value where function equ
       function_value1 "function value at min"
       function_value2 "function value at max"
       tolerance       "tolerance for root"     
       signswitch      "indicates that sign swit
       inc             "increment to try to find
function_value1 = 6 - 5*min + sqr(min);
inc             = (max - min)/37;
root            = min;
repeat (
   root = root + inc;
   function_value2 = 6 - 5*root + sqr(root);
   if((    sign(function_value1) <> sign(functio
       and abs(function_value1) > 0
       and abs(function_value2) > tolerance ),
      max = root;
      signswitch = 1;
   else
      if(abs(function_value2) > tolerance,
         function_value1 = function_value2;
         min = root;
      );
   );
until (signswitch > 0) or (root > max) );
display min, max, function_value1, function_valu
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 16:13
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
17/23


in sign, confirming that the root of the quadratic function is
indeed in the interval.
The Break Statement
The break statement gives additional control over the
execution of loop structures, namely the loop statement, the
while statement, the for statement and the repeat statement. It
allows to break the execution of a loop structure prematurely.
The Break Statement: Syntax
The syntax for the break statement is as follows:
The keyword break indicates that this is a break statement. It
terminates the n inner most control structures. n is optional
and if it is omitted, it is set to 1.
Most often break statements are used in the context of if
statements or with dollar conditions. For details on the various
forms of logical conditions in GAMS, see sections Logical
Conditions and Filtering Sets.
The Break Statement: Examples
This is a simple, artificial example using the break statement
to exit a loop statement:
break [n];
Set    i   / i1*i10 /;
Scalar cnt / 0 /;
loop(i,
  break$sameas('i6',i);
  cnt = cnt+1;
);
display cnt;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
18/23


The break statement in combination with the dollar condition
terminates the execution of the loop body in the 6th iteration.
This can be seen looking at the value of cnt after the loop,
which will be 5.
Here is a little more complex example which uses the optional
argument n to terminate more than one loop structure at once:
In this example, cnt will be 50 at the end. As in the previous
example, it is increased 5 times in the inner most loop, before
the break statement is executed. This time break is called
with the argument 2, which causes the two inner most control
structures (namely the loop and the while) to be terminated.
The outer most control structure (the for) is not influenced, so
that its body gets executed 10 times, which results in a total of
50 increments for the scalar cnt.
Note, if break would be called with the argument 3 instead of
2, also the for loop would be terminated, so that cnt would be
5 at the end. If break would be called with 1 (or without
additional argument) instead of 2, only the inner most loop
would be terminated so that cnt would be 500 at the end.
The Continue Statement
The continue statement gives additional control over the
execution of loop structures, namely the loop statement, the
while statement, the for statement and the repeat statement. It
Set    i   / i1*i10 /;
Scalar x, y,
       cnt / 0 /;
for(x = 1 to 10,
  y = 0;
  while(y < 10,
    y = y+1;
    loop(i,
      break$sameas('i6',i) 2;
      cnt = cnt+1;
    );
  );
);
display cnt;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
19/23


allows to jump to the end of the inner most loop structure
without executing the remaining statements in the body.
The Continue Statement: Syntax
The syntax for the continue statement is as follows:
The keyword continue indicates that this is a continue
statement. It jumps to the end of the inner most control
structure.
Most often continue statements are used in the context of if
statements or with dollar conditions. For details on the various
forms of logical conditions in GAMS, see sections Logical
Conditions and Filtering Sets.
The Continue Statement: Examples
This is a simple, artificial example using the continue
statement to skip parts of a loop body:
In that example, every 2nd iteration of the loop statement is
skipped. Therefore, cnt will be 5 at the end of the loop.
The Abort Statement
The abort statement is used to terminate the execution of a
program. Most often the abort statement is used in the context
of conditionals. Examples are given below. Also it may be used
continue;
Set    i   / i1*i10 /;
Scalar cnt / 0 /;
loop(i,
  continue$(mod(ord(i),2)=0);
  cnt=cnt+1
);
display cnt;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
20/23


to display a text or an identifier in the listing file similar to the
display statement but mostly to present the reason for the
termination of the execution.
Note that the abort statement is to be distinguished from the
dollar control option $abort which may be used to terminate
the compilation of a program.
The Abort Statement: Syntax
The syntax for the abort statement is as follows:
The keyword abort indicates that this is an abort statement.
Ident denotes an identifier. If the identifier is a set or a
parameter, only the name of the set or parameter itself is
specified, without any domains. If the identifier is a variable, an
equation or a model, it must be followed by a suffix, since only
attributes of variables, equations and models can be displayed.
For more on variable and equation attributes including full
lists, see sections Variable Attributes and Equation Attributes
respectively. For details on model attributes, see section Model
Attributes. Recall that sets also have attributes, they may also
be displayed using the suffix notation. For details on set
attributes, see section Set Attributes. As usual, quoted text
must be surrounded by single or double quotes. The identifiers
and the text may be mixed and matched in any order, and the
whole statement may be continued over several lines.
An abort statement causes the termination of the execution
with an execution error and the information in the statement
will be displayed.
There is also a variant with the extension .noError that
terminates the execution and displays the information, but
does not cause an execution error. The syntax is as follows:
Most often abort statements are used in the context of if
statements or with dollar conditions. The syntax is as follows:
abort ident | quoted text {, ident | quoted text
abort.noError ident | quoted text {, ident | quo
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
21/23


or
For details on the various forms of logical conditions in GAMS,
see sections Logical Conditions and Filtering Sets.
The Abort Statement: Examples
Consider the following artificial example:
Note that the abort statement is part of an if statement which
is part of a loop statement. The execution of this program will
be terminated with the following display and error message:
Observe that the values of p('1'), p('2') and p('3') were
updated, but the values of p('4') and p('5') are equal to the
initialization values since the program was terminated before
they could be updated.
If the extension .noError is used in the example above, the
following lines will appear in the listing file:
if (logical_condition, abort ident | quoted text
abort$logical_condition ident | quoted text {, i
Set       i    / i1*i5 /;
Parameter p(i) / i1 1, i2 2, i3 3, i4 5, i5 8 /;
loop(i, 
   if (p(i) > 3, abort "Parameter larger than 3"
   p(i) = p(i) + 2;
);
----      4 Parameter larger than 3
----      4 PARAMETER p
i1 3.000,    i2 4.000,    i3 5.000,    i4 5.000,
**** Exec Error at line 4: Execution halted: abo
----      4 Parameter larger than 3
----      4 PARAMETER p
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
22/23


Note that the execution of the program is aborted as before,
but there is no execution error in this case.
Instead of an if statement we may use a dollar condition in the
loop:
Observe that this alternative formulation has the same
outcome as above.
i1 3.000,    i2 4.000,    i3 5.000,    i4 5.000,
****
**** Execution halted from line 4: abort.noError
****
Set       i    / i1*i5 /;
Parameter p(i) / i1 1, i2 2, i3 3, i4 5, i5 8 /;
loop(i, 
   abort$(p(i) > 3) "Parameter larger than 3", p
   p(i) = p(i) + 2;
);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Programming Flow Control Features
https://www.gams.com/latest/docs/UG_FlowControl.html
23/23


Special Features for
Mathematical Programs
Table of Contents
Introduction
Special Mixed Integer Programming
(MIP) Features
Types of Discrete Variables
Binary Variables
Integer Variables
Special Order Sets of Type 1
(SOS1)
Special Order Sets of Type 2
(SOS2)
Semi-Continuous Variables
Semi-Integer Variables
Setting Priorities for Branching
Miscellaneous Hints
Model Attributes for Mixed
Integer Programming in
GAMS
The Branch and Cut and
Heuristic Facility
Branch and Bound Output
Nonlinear MIPs
Model Termination
Conditions and
Recommended Actions
Frequent Problems
Model Scaling - The Scale Option
The Scale Option
Scaling Variables
Scaling Equations
Scaling Derivatives
Scaling Data
Conic Programming in GAMS
Introduction to Conic
Programming
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
1/32


Introduction
In this chapter we will introduce special GAMS features that are
useful for specific model types. The features include model
scaling, conic programming and features that facilitate mixed
integer as well as indicator constraints, a feature that does not
translate across solvers.
Special Mixed Integer Programming
(MIP) Features
Some special features have been added to GAMS to help
simplifying the modeling of Mixed Integer Programming (MIP)
problems. In GAMS MIP is the model type for mixed integer
linear programs, this section used MIP more generally, we
consider model with discrete variables, including non-linear
expressions and pure discrete problem. We will first present
details on discrete variables in GAMS, then we will discuss how
to customize priorities for the branching process. Next, we will
cover the model attributes that are important for MIPs and we
will conclude with some hints that will make mixed integer
programming with GAMS easier.
Types of Discrete Variables
Variables and variable types are introduced in chapter
Variables. GAMS provides six discrete variable types: binary,
integer, sos1, sos2, semicont and semiint. In the following
subsections we will present details and examples for each of
these discrete variable types. Note that if any discrete variables
feature in a model, it has to be a mixed integer model or one of
the related model types, like MINLP or MIQCP. See section
Classification of Models for a full listing of all GAMS model
types.
Implementation of Conic
Constraints in GAMS
Example
Sample Conic Models in GAMS
References and Links
Indicator Constraints
di
i
i h
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
2/32


Binary Variables
Binary variables can take values of 0 (zero) and 1 (one) only.
They are declared as follows:
The keyword binary indicates that this is a binary variable and
then the usual conventions for variable declarations are
followed. Alternatively, the variable may be declared first and
specified as binary later. Consider the following code snippets
from the orthogonal Latin Square model [LATIN]:
Note that the binary variable x is used in equation c1 to model
the restriction that in each cell only one item pair is allowed.
Binary variables are often used to model logical conditions
such as imposing mutual exclusivity or complementarity.
Note that the default lower bound is 0 (zero) and the default
upper bound is 1 (one). If the relaxed versions of the discrete
models is solved, binary variables are treated like positive
variables with the upper bound of 1. In addition, an infinite
priority may be used to override binary specifications, see
section Setting Priorities for Branching below for more
information.
Even though the only possible values are 0 and 1, a solver
might return a value for binary variable that is only close to 0
or 1. Every solver works with tolerances and also uses a
tolerance to determine if a value is close enough to an integer
values. So it is unwise to use code as
a(i)$(b.l(i)=1) = yes; because one will potentially miss
some elements. A safe way to write such code is:
a(i)$(b.l(i)>0.5) = yes;. Rounding the level of a binary
Binary Variable var_name [(index_list)] [text];
Sets k  "rows"      / row1*row4 /
     l  "columns"   / col1*col4 /
     v  "values"    / val1*val4 /;
alias (i,j,v);
Variables x(i,j,k,l) "pairs (i,j) allocated to c
          z          "some objective";
Binary Variable x;
Equations c1(i,j)    "for each cell pick only on
c1(i,j).. sum((k,l), x(i,j,k,l)) =e= 1;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
3/32


variable after the solve is also possible, but it is not done by
the solver or the solver link because even small rounding can
lead to infeasibilities.
A binary variable can also have a truely fractional value after a
solver if the model status does not indicate a feasible integer
solution (model status 1 or 8).
Integer Variables
Integer variables are discrete variables that can take only
values between their bounds. The user may change both
bounds from the default value. The default lower bound is 0
(zero) and the default upper bound inside GAMS is +inf, and
the same upper bound is passed on to the solver.
Note that in relaxed model types the integrality requirement is
relaxed. In addition, an infinite priority may be used to override
integer specifications, see section Setting Priorities for
Branching below for more information. Integer variables are
declared as follows:
The keyword integer indicates that this is an integer variable
and then the usual conventions for variable declarations are
followed. Alternatively, the variable may be declared first and
specified as integer later. Consider the following code
snippets from the power scheduling model [MAGIC]:
The integer variable n models the number of generators of
various types that are in use at any of the time blocks.
Special Order Sets of Type 1 (SOS1)
SOS1 variables are a set of variables, such that at most one
variable within the group may have a nonzero value. This
Integer Variable var_name [(index_list)] [text];
Sets t  "demand blocks" / 12pm-6am, 6am-9am, 9am
     g  "generators"    / type-1, type-2, type-3
Variables  x(g,t)  "generator output (1000mw)"
           n(g,t)  "number of generators in use"
           cost    "total operating cost (l)";
Integer Variable n; 
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
4/32


variable may take any positive value. Special ordered sets of
type 1 are defined as follows:
The keyword SOS1 indicates that this is a SOS1 variable and
then the usual conventions for variable declarations are
followed. Alternatively, the variable may be declared first and
specified as SOS1 later. Consider the following example:
Note that the members of the innermost (the right-most) index
belong to the same SOS set. For example in the sets defined
above, s1 represents one special ordered set of type 1 with i
elements, t1 defines k sets with j elements each and w1
defines (i,j) sets with k elements each.
The default bounds for SOS1 variables are zero and +inf. As
with any other variable, the user may change these bounds.
Further, the user may explicitly provide whatever convexity row
that the problem may need through an equation that requires
the members of the SOS1 set to be less than a certain value.
Any such convexity row will implicitly define bounds on each of
the variables.
Consider the following example:
The equation defsoss1 implicitly defines the nonzero value
that one of the elements of the SOS1 variable s1 may take as
equal to or smaller than 3.5. Note that it is also possible that all
variables s1 equal zero.
A special case arises when one of the elements of the set has
to be nonzero and equal to a number, say 3.5. In this case
equation defsoss1 will be:
SOS1 Variable var_name (index_list) [text];
SOS1 Variable s1(i), t1(k,j), w1(i,j,k) ;
SOS1 Variable s1(i); Equation defsoss1; 
defsoss1.. sum(i,s1(i)) =l= 3.5 ;
defsoss1.. sum(i,s1(i)) =e= 3.5 ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
5/32


Frequently the nonzero value equals 1. As a result, the SOS1
variable is effectively a binary variable. It is only treated
differently by the solver at the level of the branch and bound
algorithm. For example, consider the following example where
we want to model that one out of n options has to be selected.
This is expressed as:
The variable x can be made binary without any change in
meaning and the solution provided by the solver will be
indistinguishable from the SOS1 case.
The use of special ordered sets may not always improve the
performance of the branch and bound algorithm. If there is no
natural order the use of binary variables may be a better
choice. A good example of this is the classical assignment
problem (see [H.P. Williams (2013) Model Building in
Mathematical Programming], Wiley, Section 9.3.
Note that any model with SOS1 variables requires a MIP solver,
because the solution process needs to impose the restrictions
of at most one nonzero level values may be present.
For an example where SOS1 variables are used, see the
production scheduling model [PRODSCHX].
Special Order Sets of Type 2 (SOS2)
SOS2 variables are a set of variables, such that at most two
variables within the set may have nonzero values and these
variables have to be adjacent. This requirement implies that
the set is ordered, see chapter Sets as Sequences: Ordered Sets
for details on ordered sets in GAMS. Note that the nonzero
variables may take any positive value. Special ordered sets of
type 2 are defined as follows:
The keyword SOS2 indicates that this is a SOS2 variable and
then the usual conventions for variable declarations are
SOS1 Variable x(i); Equation defx;
defx.. sum(i, x(i)) =e= 1 ;
SOS2 Variable var_name [(index_list)] [text];
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
6/32


followed. Alternatively, the variable may be declared first and
specified as SOS2 later. Consider the following example:
The members of the innermost (the right-most) index belong to
the same set. For example, in the sets defined above, s2
represents one special ordered set of type 2 with elements for
each member of the set i. At most two variables s2 may be
nonzero and they must reference adjacent elements of the set
i. Note that the variables s2('i1') and s2('i2') are
adjacent, but the variables s2('i1') and s2('i3') are not.
Further, t2 defines k sets of SOS2 variables with j elements
each and the adjacency requirement refers to the set j which
must be ordered. Similarly, w2 defines (i,j) sets with k
elements each and the adjacency requirement refers to the set
k which must be ordered.
The default bounds for SOS2 variables are zero and +inf. As
with any other variable, the user may change these bounds.
SOS2 variables are most often used to model piece-wise linear
approximations to nonlinear functions. The production
scheduling model [PRODSCHX] shows SOS type formulations
with binary, SOS1 and SOS2 sets.
Note that any model with SOS2 variables requires a MIP solver,
because the solution process needs to impose the restrictions
of adjacency and that no more than two nonzero level values
may be present.
Semi-Continuous Variables
Semi-continuous variables are either zero or above a given
minimum level. This can be expressed algebraically as: either
 or 
. By default, the lower bound 
 is 1 and
the upper bound 
 is +inf. As usual, these bounds may be
changed with the variable attributes .lo and .up. Semi-
continuous variables are defined as follows:
Set i  / i1*i5 /;
SOS2 Variable s2(i), t2(k,j), w2(i,j,k);
SemiCont Variable var_name [(index_list)] [text]
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
7/32


The keyword semicont indicates that this is a semi-continuous
variable and then the usual conventions for variable
declarations are followed. Alternatively, the variable may be
declared first and specified as semicont later. Consider the
following example:
The slice of code above declares the variable x to be a semi-
continuous variable that may either be zero or behave as a
continuous variable between 1.5 and 23.1.
Note that any model with semi-continuous variables requires a
MIP solver, because the solution process needs to impose the
discontinuous jump between zero and the threshold value.
Note
Not all MIP solvers allow semi-continuous
variables. We recommend users to verify how
the solver they are interested in handles
semi-continuous variables by checking the
relevant section of the respective solver
manual.
The lower bound has to be less than the
upper bound, and both bounds have to be
greater than zero, otherwise GAMS will report
an error.
The variable solution listing might show the
level outside the lower and upper bound
which for other variables indicates an
infeasible variable, but not so for semi-
continuous variables.
Semi-continuous variables are especially
helpful if the upper bound is +inf and no
implicit bound can be easily derived. If a
finite upper bound is available it can be
computational more efficient to replace the
semi-continuous variable sc with lower
bound scLow by a continuous variable x and
SemiCont Variable x;
x.lo = 1.5;  x.up = 23.1;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
8/32


binary variable b and the following
equations:
Semi-Integer Variables
Semi-integer variables are either zero or integer and above a
given minimum value. This can be expressed algebraically as:
either 
 or 
. By default, the lower bound
 is 1 and the upper bound 
 inside GAMS is +inf and the
same values are passed on to the solver. As usual, these default
bounds may be changed with the variable attributes .lo and
.up. Note that in relaxed model types the integrality
requirement is relaxed. In addition, an infinite priority may be
used to override integer specifications, see section Setting
Priorities for Branching below for more information.
Semi-integer variables are defined as follows:
The keyword semiint indicates that this is a semi-integer
variable and then the usual conventions for variable
declarations are followed. Alternatively, the variable may be
declared first and specified as semiint later. Consider the
following example:
The slice of code above declares the variable x to be a semi-
integer variable that may either be zero or take any integer
value between 2 and 25. Note that the bounds for semiint
variables have to take integer values, otherwise GAMS will flag
an error during model generation. Note further, that any model
with semi-integer variables requires a MIP solver.
Equation xForceLowerBnd   "Force x
         xForceZero       "Force x
xForceLowerBnd.. x =g= scLow*b;
xForceZero..     x =l= x.up*b;
SemiInt Variable var_name [(index_list)] [text];
SemiInt Variable x;
x.lo = 2; x.up = 25;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
9/32


Note
Not all MIP solvers allow semi-integer
variables. We recommend users to verify how
the solver they are interested in handles
semi-integer variables by checking the
relevant section of the respective solver
manual.
The lower bound has to be less than the
upper bound, and both bounds have to be
greater than zero, otherwise GAMS will report
an error.
The variable solution listing might show the
level outside the lower and upper bound
which for other variables indicates an
infeasible variable, but not so for semi-
integer variables.
Semi-integer variables are especially helpful
if the upper bound is +inf and no implicit
bound can be easily derived (together with
the appropriate IntVarUp setting). If a finite
upper bound is available, it can be
computationally more efficient to replace the
semi-integer variable si, with lower bound
siLow, by an integer variable i and a binary
variable b and the following equations:
Setting Priorities for Branching
By setting priorities users may specify an order for choosing
variables to branch on during a branch and bound search for
MIP models. Without priorities the MIP algorithm will internally
determine which variable is the most suitable to branch on.
Priorities for individual variables may be used only if the model
attribute .prioropt is set to 1; the respective GAMS statement
is:
Equation iForceLowerBnd   "Force i
         iForceZero       "Force i
iForceLowerBnd.. i =g= siLow*b;
iForceZero..     i =l= i.up*b;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
10/32


Here mymodel is the name of the model specified in the model
statement. The default value is NA.
If the model attribute .prioropt is set to 1, the variable
attribute .prior may be used to set the priorities of individual
discrete variables. Note that there is one .prior value for each
individual component of a multidimensional variable. Priorities
may be set to any real value; the default value is 1. As a general
rule, the most important variables should be given the highest
priority. The highest priority is denoted by the lowest nonzero
value in the .prior attribute. Functionally, the attribute
.prior establishes in what order variables are to be branched
on in the branch-and-bound algorithm while searching for a
solution. Variables with a specific .prior value will branched
on earlier until all fractional variables with higher .prior
values have been branched on.
Note
The variable attribute .prior of a discrete variable
may be used to relax the discrete restriction on that
variable: setting the .prior value to +inf will relax
a variable permanently (or until .prior gets a
finite value assigned). This relaxation is done
independently of the model attribute .prioropt.
Consider the following example:
In this example the variables z(i,'large') are branched on
before the variables z(i,'medium'), which in turn are
branched on before the variables z(i,'small').
Note that knowledge about the problem may help to determine
which variables should be considered first. For example,
consider a problem with a binary variable u representing a
yes/no decision whether to build a factory and other binary
mymodel.prioropt = 1;
z.prior(i,'small')   = 3;
z.prior(i,'medium')  = 2;
z.prior(i,'large')   = 1;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
11/32


variables representing equipment selections within that
factory. We would naturally want to explore whether or not the
factory should be built before considering what specific
equipment to be purchased within the factory. Therefore we
would set the priority values lower for u. By assigning a higher
priority - a lower value of the attribute .prior - to the
build/nobuild decision variable u, we can force this logic into
the tree search and thus speed up computation time since
uninteresting portions of the tree are left unexplored.
Note
The lower the value given to the .prior
suffix, the higher the priority for branching.
All members of any SOS1 or SOS2 set should
be given the same priority value since it is
the set itself which is branched upon rather
than the individual members of the set.
While any value is accepted for .prior many
solvers scale all giving priorities in the
integer range of 
.
Branching priorities were a very important
feature in the early days of mixed integer
programming. Nowadays, it is not easy to find
branching priorities that improve on the
solvers default selection.
Global non-linear optimization solvers
branch on continuous variables too (see, for
example BARON). In GAMS one cannot set the
branching priority of a continuous variable.
Such branching priorities need to be
communicated via a solver option file.
Miscellaneous Hints
We will conclude the discussion of mixed integer models in
GAMS with this section where we offer a variety of hints that
are meant to make special facilities of mixed integer
programming solvers more accessible.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
12/32


Model Attributes for Mixed Integer Programming in
GAMS
GAMS offers several model attributes that may be used to
influence MIP solver performance or report on results of MIPs.
These model attributes include Cheat, CutOff, NodLim, ObjEst,
OptCA, OptCR, PriorOpt and TryInt.
The Branch and Cut and Heuristic Facility
Hard MIP problems can be solved faster with the help of user
supplied routines that generate cutting planes and good
integer feasible solutions. The GAMS Branch-and-Cut-and-
Heuristic (BCH) automates all major steps necessary to define,
execute and control the use of user defined routines within the
framework of general purpose branch-and-cut codes. It is
documented in Branch-and-Cut-and-Heuristic Facility (BCH).
Branch and Bound Output
While the log output for each solver differs, some key figures
are usually displayed for branch-and-bound based solvers. For
example, solving a linear mixed integer model with CPLEX will
yield output like the following:
       Nodes                                    
   Node  Left     Objective  IInf  Best Integer 
*     0+    0                            0.0000 
Found incumbent of value 0.000000 after 0.01 sec
      0     0   2.23031e+07    12        0.0000 
      0     0   2.23031e+07     7        0.0000 
*     0+    0                       2.23031e+07 
Found incumbent of value 2.2303094e+07 after 0.0
 ...
 
Fixing integer variables, and solving final LP..
...
Solution satisfies tolerances.
MIP Solution:     22303093.628684    (23 iterati
Final Solve:      22303093.628684    (0 iteratio
Best possible:    22303113.950091
Absolute gap:           20.321407
Relative gap:            0.000001
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
13/32


A brief explanation of the columns follows:
Node is the number of branch and bound nodes so far.
Nodes Left is the number of problems created during
the branching process that are yet to be examined.
Objective gives the current objective function value of
the relaxes node problem.
IInf gives the number of discrete variables with
fractional solution levels.
Best Integer gives the incumbent solution. Note the
last solution in that column is not necessarily the global
best solution.
Cuts/Best Bound gives the current lower bound on the
solution.
ItCnt gives the accumulated LP iteration count
Gap gives the maximum percentage difference from the
theoretical optimum.
Note that it is common that solves of mixed integer models end
with a gap between the solution found and the best possible
solution. This may be controlled by limits (e.g. time), solver
options and model attributes like .OptCR and .OptCA.
Nonlinear MIPs
Modelers may wish to impose integer restrictions on nonlinear
formulations combining two hard model types: MIP and NLP.
Such MINLP models can be solved with a selection of solvers.
Many solvers, e.g. DICOPT and SBB, provide a local optimum
where others, e.g. ANTIGONE and BARON provide a global
optimum. In most cases both types of MINLP solver make use
of MIP and NLP solvers to calculate a solution. Such subsolvers
need to be licensed for the solver to succeed.
Model Termination Conditions and Recommended
Actions
Recall that the termination condition of the model after the
solution process has been completed is stored in the model
attribute .modelStat. A list of all possible model statuses is
given in section Model Status. We can easily check for the
existence of a feasible solution (status 1 and 8). Linear models
and MINLP problems solved with global solvers can achieve the
"OPTIMAL" status, given sufficient resources (time) and a setting
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
14/32


of OptCR and OptCA to 0. All other cases do not yield a feasible
integer solution. If a problem is reported as infeasible (status
4,5,10, and 19), it might be a good idea to see if the relaxed
version of the model is already infeasible. Debugging models
that are relaxed feasible but integer infeasible is very difficult.
Frequent Problems
There are some problems users frequently encounter either
due to GAMS settings or problem characteristics:
Default bounds
One needs to be aware that while the GAMS upper bound for
integer and semi-integer variables is +inf, the bound that is
passed to the solver can be different, namely 100 (see the
discussion about integer variables). This can lead to
unexpected results (e.g. infeasibilities or suboptimal solutions
declared as optimal).
The nonending quest
Integer programming is a quite desirable formulation
technique. However, integer problems are theoretically hard
and the solution process (in the worst case) of exponential
complexity. There are many ways that focus on improving the
solution time of the solver. As with all models scaling is
important (especially when using bigM formulations). For
particular problems many different formulations exist and the
literature about a particular problem together with the ability
of GAMS to rapidly prototype and experiment is the best
constellation to get the best results for the problem at hand.
For fine tuning, some MIP solvers provide automated tuning
tools (see e.g. Cplex tuning) that tweak the solver options to get
the best performance.
Model Scaling - The Scale Option
The rules for good scaling are exclusively based on algorithmic
needs. GAMS has been developed to increase the efficiency of
modelers, and one of the best ways seems to be to encourage
modelers to write their models using a notation that is as
natural as possible. The units of measurement are one part of
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
15/32


this natural notation. However, there is a potential conflict
between what the modeler thinks is a good unit and what
constitutes a well-scaled model.
The Scale Option
To facilitate the translation between a natural model and a well
scaled model, GAMS has introduced the concept of a scale
factor, both for variables and equations. The notations and
definitions are quite simple. Scaling is turned off by default.
Setting the model attribute .scaleopt to 1 turns on the
scaling feature. For example,
The statement should be inserted somewhere after the model
statement and before the solve statement. To turn scaling off
again, mymodel.scaleopt has to be set to zero before the next
solve.
In most respects GAMS scaling is hidden from the user. The
solution values reported back from a solution algorithm are
always reported in the notation of the user. The algorithm's
internal representation of the equations and variables are only
reflected in the derivatives in the equation and column listings
in the GAMS output if the values of the options limrow and
limcol are positive. In addition, the internal representations will
appear in the debugging output from the solution algorithm if
the option sysout is set to on.
Scaling Variables
The scale factor of a variable is defined using the variable
attribute .scale in the following way:
The scale factor c is a number or a numerical expression that
evaluates to a number. Note that the default scale factor is 1.
model mymodel /all/ ;
mymodel.scaleopt = 1 ;
solve mymodel using nlp maximizing dollars ;
myvar.scale(i,j) = c;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
16/32


Note that there is one scale value for each individual
component of a multidimensional variable.
Assume that  is the scale factor of a variable 
. Assume
further, that the variable seen by the algorithm is 
. Then we
have: 
. This means that each variable as seen by
the user is divided by the scale factor.
For example, consider the following code snippet:
By setting x1.scale to 0.01 and x2.scale to 10, the model
seen by the solver is:
Note that the solver does not see the variables x1 or x2, but
rather the scaled (and better-behaved) variables xPrime1 and
xPrime2. Note further, that upper and lower bounds on
variables are automatically scaled in the same way as the
variable itself.
Attention
Discrete variables cannot be scaled.
Expert Note. Internally, GAMS stores with
each variable and equation one additional
attribute or field (besides fields for level,
marginal and lower and upper bound).
Depending on the type of variable and
sometimes even model type or solver, this
field has different names in the GAMS
language. For continuous variables, the field
is called scale, while for discrete variable it is
Positive Variables x1, x2;
Equation eq;
eq.. 200*x1 + 0.5*x2 =l= 5;
x1.up = 0.01;
x2.up = 10;
x1.scale = 0.01;
x2.scale = 10;
Positive Variables xPrime1, xPrime2;
Equation eq;
eq.. 2*xPrime1 + 5*xPrime2 =l= 5;
xPrime1.up = 1;
xPrime2.up = 1;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
17/32


called prior. For stochastic 2-stage linear
program models solved with DECIS, this field
is called stage. The field .stage can lead to
confusing results. Consider the following
example:
The output is:
The field .scale has to be in a certain range
( >1e-20 and no special value), but this is only
checked at model generation time. The field
.prior can be any number and even +inf
(but no other special values). For further
information on .prior, see section Setting
Priorities for Branching. For an introduction
to variable and equation fields, see sections
Variable Attributes and Equation Attributes
respectively.
Scaling Equations
The scale factor of an equation is defined using the equation
attribute .scale in the following way:
The scale factor d is a number or a numerical expression that
evaluates to a number. Note that the default scale factor is 1.
Assume that  is the scale factor of an equation 
. Assume
further, that the equation seen by the algorithm is 
. Then we
have: 
. This means that each equation as seen by
the user is divided by the scale factor.
For example, consider the following equations:
Variable x;
x.scale = 0.1;
display x.stage;
----      3 VARIABLE x.scale = 0.1
mzeqn.scale(i,j) = d;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
18/32


By setting eq1.scale to 100, the model seen by the solver is:
Note
The user may have to perform a combination of
equation and variable scaling to obtain a well-
scaled model.
Consider the following example:
Setting the following scale values:
will result in the solver seeing the following well-scaled model:
Positive Variables y1, y2;
Equations eq1, eq2;
eq1..   200*y1 + 100*y2 =l= 500;
eq2..       3*y1 - 4*y2 =g= 6;
Positive Variables y1, y2;
Equations eqPrime1, eq2;
eqprime1..   2*y1 + 1*y2 =l= 5;
eq2..        3*y1 - 4*y2 =g= 6;
Positive variables x1, x2;
Equations  eq1, eq2;
eq1..   100*x1 + 5*x2 =g= 20;
eq2..   50*x1 - 10*x2 =l= 5;
x1.up = 0.2;
x2.up = 1.5;
x1.scale  = 0.1;
eq1.scale = 5;
eq2.scale = 5;
Positive Variables xPrime1, x2;
Equations eqPrime1, eqPrime2;
eqPrime1..   2*xPrime1 + x2 =g= 4;
eqPrime2..   xPrime1 - 2*x2 =l= 1;
xPrime1.up = 2;
x2.up      = 1.5;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
19/32


Scaling Derivatives
In nonlinear models the derivatives also need to be well-
scaled. Assume that the derivatives in the model of the user are
denoted by 
. Assume further, that the derivatives
in the scaled model seen by the algorithm are denoted by
. Then we have:
, where  is the
scale factor for the variable and  is the scale factor for the
equation.
The user may affect the scaling of derivatives by scaling both
the equation and variable involved.
Scaling Data
Scaling input data is independent of the model attribute
.scaleopt and may contribute considerably towards achieving
a well-scaled model. We recommend users to try to define the
units of the input data such that the largest values expected for
decision variables and their marginals is under a million, if
possible.
For example, in US agriculture about 325 million acres are
cropped and the corn crop is 9-10 billion bushels per year.
When defining production data, we could enter land in 1000's of
acres and all other resources in 1000's of units. We could also
define the corn crop in millions of bushels. The data will be
simultaneously scaled, hence if resource endowments are
quoted in 1000's, corn yields are divided by 1000. This scaling
results in a corn production variable in the units of millions.
Consumption statistics would need to be scaled accordingly.
Money units could also be in millions or billions of dollars.
Such data scaling generally greatly reduces the disparity of
coefficients in the model.
Conic Programming in GAMS
Conic programming models minimize a linear function over the
intersection of an affine set and the product of nonlinear
cones. The problem class involving second order (quadratic)
cones is known as Second Order Cone Programs (SOCP). These
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
20/32


are nonlinear convex problems that include linear and (convex)
quadratic programs as special cases.
Conic programs allow the formulation of a wide variety of
application models, including problems in engineering and
financial management. Examples are portfolio optimization,
Truss topology design in structural engineering, Finite Impulse
Response (FIR) filter design and signal processing, antenna
array weight design, grasping force optimization, quadratic
programming, robust linear programming and norm
minimization problems.
For more information, see References and Links at the end of
this section.
Introduction to Conic Programming
Conic programs can be thought of as generalized linear
programs with the additional nonlinear constraint 
,
where 
 is required to be a convex cone. The resulting class of
problems is known as conic optimization and has the following
form:
where 
 is the constraint matrix, 
 the
decision variable and 
 the objective function cost
coefficients. The vector 
 represents the right-hand
side and the vectors 
 are lower and upper bounds
on the decision variable .
Now partition the set of decision variables  into sets
, such that each decision variables  is a
member of at most one set 
. For example, we could have
Let 
 denote the variables  belonging to set 
. Then define
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
21/32


where 
 must have one of the following forms:
Quadratic cone (also referred to as Lorentz or ice cream
cone):
Rotated quadratic cone (also referred to as hyperbolic
constraints):
These two types of cones allow the formulation of quadratic,
quadratically constrained and many other classes of nonlinear
convex optimization problems.
Implementation of Conic Constraints in GAMS
The recommended way to write conic constraints is by using a
quadratic formulation. Many solvers have the capability to
identify the conic constraints in a QCP model even if it is not in
perfect form but can be easily reformulated to fit in the
described form. However, some solvers (namely MOSEK) expect
the conic constraints to be precisely in the form given above. In
earlier versions this form was enforced by a special type of
equation, the =c= equation type. Moreover, such solvers have
other requirements (e.g. disjunctive cones) that can be easily
fulfilled by simple reformulation steps. Much progress is
expected on the solver side in the coming years, so we don't go
into much detail here.
Observe that we could formulate conic problems as regular
NLPs using the following constraints:
Quadratic cone:
Rotated quadratic cone:
x('1') =g= sqrt[ sum(i$[not sameas(i,'1')],
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
22/32


Here x('1') and x('2') are positive variables.
The following example illustrates the different formulations for
conic programming problems. Note that a conic optimizer
usually outperforms a general NLP method for the
reformulated (NLP) cone problems.
Example
Consider the following example, which illustrates the use of
rotated conic constraints. We will give reformulations of the
original problem in regular NLP form and in conic form (with
conic constraints).
The original problem is:
where 
 is the decision variable, 
 are
parameters with 
 and 
 and 
 is a scalar
parameter. The original model may be written in GAMS using
the equations:
We can write an equivalent QCP formulation by using the
substitution 
 in the objective function and adding a
constraint. As we are dealing with a minimization problem,
 and 
, we can relax the equality 
into an inequality 
, which results in an equivalent
problem with a convex feasible set:
2*x('1')*x('2') =g= sum(i$[not sameas(i,'1'
defobj..  sum(n, d(n)/x(n)) =e= obj;
e1..      sum(n, a(n)*x(n)) =l= b;
Model orig /defobj, e1/;
x.lo(n) = l(n);
x.up(n) = u(n);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
23/32


where 
 is a new decision variable. The GAMS formulation
of this QCP is:
Note that the constraints 
 are almost in rotated conic
form. If we introduce a variable 
 with 
, then we
can reformulate the problem using conic constraints as:
The GAMS formulation using conic equations is:
The complete model is listed below:
defobjc..     sum(n, d(n)*t(n)) =e= obj;
e1..          sum(n, a(n)*x(n)) =l= b;
coneqcp(n)..  t(n)*x(n)         =g= 1;
Model cqcp /defobjc, e1, coneqcp/;
t.lo(n) = 0;
x.lo(n) = l(n);
x.up(n) = u(n);
defobjc..        sum(n, d(n)*t(n)) =e= obj;
e1..             sum(n, a(n)*x(n)) =l= b;
e2(n)..          z(n) =e= sqrt(2);
coneperfect(n).. 2*x(n)*t(n) =g= sqr(z(n));
Model cperfect  /defobjc, e1, e2, coneperfect/;
t.lo(n) = 0;
x.lo(n) = l(n);
x.up(n) = u(n);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
24/32


Sample Conic Models in GAMS
Conic models in the GAMS model library include:
[EMFL]: A multiple facility location problem,
[FDESIGN]: Linear Phase Lowpass Filter Design,
[IMMUN]: Financial Optimization: Risk Management,
[PMEANVAR]: Mean-Variance Models with variable upper
and lower Bounds,
[QP7]: A portfolio investment model using rotated
quadratic cones (quadratic program using a Markowitz
model),
[ROBUSTLP]: Robust linear programming as an SOCP,
[SPRINGCHAIN]: Equilibrium of System with Piecewise
Linear Spring,
[TRUSSM]: Truss Toplogy Design with Multiple Loads
Set       n / n1*n10 /;
Parameter d(n), a(n), l(n), u(n);
Scalar    b;
d(n) = uniform(1,2);
a(n) = uniform (10,50);
l(n) = uniform(0.1,10);
u(n) = l(n) + uniform(0,12-l(n));
Variables x(n);
x.l(n) = uniform(l(n), u(n));
b      = sum(n, x.l(n)*a(n));
Variables t(n), z(n), obj;
Equations defobjc, defobj, e1, e2(n), coneqcp(n)
defobjc..          sum(n, d(n)*t(n)) =e= obj;
defobj..           sum(n, d(n)/x(n)) =e= obj;
e1..               sum(n, a(n)*x(n)) =l= b;
coneqcp(n)..       t(n)*x(n) =g= 1;
e2(n)..            z(n) =e= sqrt(2);
coneperfect(n)..   2*x(n)*t(n) =g= sqr(z(n));
Model cqcp     /defobjc, e1, coneqcp/;
Model cperfect /defobjc, e1, e2, coneperfect/;
Model orig     /defobj, e1/;
t.lo(n) = 0;
x.lo(n) = l(n);
x.up(n) = u(n);
Option qcp=cplex;
Solve cqcp min obj using qcp;
Option qcp=mosek;
Solve cperfect min obj using qcp;
Solve orig min obj using nlp;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
25/32


References and Links
A. Ben-Tal and A. Nemirovski, Lectures on Modern Convex
Optimization: Analysis, Algorithms, and Engineering
Applications, MPS/SIAM Series on Optimization, SIAM
Press, 2001.
M. Lobo, L. Vandenberghe, S. Boyd and H. Lebret,
Applications of Second-Order Cone Programming, Linear
Algebra and its Applications, 284:193-228, November 1998,
Special Issue on Linear Algebra in Control, Signals and
Image Processing.
MOSEK ApS, MOSEK Modeling Cookbook, 2015.
G. Pataki G and S. Schmieta, The DIMACS Library of
Semidefinite-Quadratic-Linear Programs. Tech. rep.,
Computational Optimization Research Center, Columbia
University, 2002.
Seventh Dimacs Implementation Challenge on
Semidefinite and Related Optimization Problems.
Indicator Constraints
An indicator constraint is a way of expressing relationships
between variables by specifying a binary variable to control
whether or not a constraint takes effect. For example, indicator
constraints are useful in problems where there are fixed
charges to express only if a given variable comes into play.
So-called Big M formulations require to estimate an upper
bound of an expression in a model. In most cases the model
data can be used to determine relatively small number for such
coefficients. In some cases it is not possible to find small Big M
values and a resulting solution may exhibit trickle flow and
have other unwanted side-effects. The main purpose of
indicator constraints is to overcome these limitations of Big M
formulations. Generally, the use of indicator constraints is not
warranted when the unwanted side-effects of Big M
formulations are not present.
Consider the following example:
constr01.. x1 + x2 + x3 =l= 1e+9*y; // may cause
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
26/32


Here we use a Big M formulation, that relies on the  values to
sum to less than one billion. Note that this formulation may
cause numeric instability or undesirable solutions in some
situations. Alternatively, we could use an indicator constraint:
Note that  is a binary variable; the logical condition makes
sure that the constraint is only active if 
. Unfortunately,
the $() expressions do not allow endogenous variables and we
need a different way to specify such implications. Indicators are
supported by CPLEX, GUROBI, SCIP, and XPRESS.
We should mention a formulation of indicators without the
explicit indicator constraints. We can use a SOS1 constraint to
express that a constraint holds or not based on a binary
variable by having a SOS1 set of a slack variable and the binary
variable SOS1(slack,1-y):
Recall that only one of the variables in a SOS1 constraint can be
non-zero, so if 1-y is non-zero (i.e. y=0) then slack must be
zero, i.e. the constraint holds. If 1-y=0 is non-zero, i.e. y=1 then
slack can be used to make the constraint feasible for any
setting of x1, x2, and x3. Here two unrelated variable, slack
and y are part of an SOS1 constraint and some tricks are
required to formulate this properly in GAMS:
Indicator Constraints with GAMS
In the remainder of this section we will describe how to specify
indicator constraints when using GAMS. Please consult the
constr01$(y=0).. x1 + x2 + x3 =l= 0; // alternat
Positive variable slack;
constr01.. x1 + x2 + x3 =l= slack; // alternativ
Set oo / slack, yExpr /;
SOS1 variable indic(oo);
Equation iOn, iOff;
Positive variable slack;
constr01.. x1 + x2 + x3 =l= slack;
iOn..      indic('slack') =e= slack;
iOff..     indic('yExpr') =e= 1-y;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
27/32


corresponding solver manual for information on whether
indicator constraints are supported and possible differences in
their specification.
The example from above will be implemented with a constraint
in combination with additional information in a solver option
file, e.g. CPLEX: cplex.opt:
and the following entry in the option file:
This has the following effect: equation constr01 will become
an indicator constraint and becomes active in a solution where
the binary variable takes the value 0. If the value of  in a
solution is 1, the constraint is not active.
Note that this way of entering an indicator constraint is
dangerous since the option files changes the model (usually an
option file has some effect on the performance of the
algorithm). Therefore, the solver will abort if there is a problem
processing the indicator options in the solver option file.
Attention
If the model is given to a solver without the option
file containing the indicator mapping (or to a solver
that does not understand the indic keyword, a
very different model will be solved. The current
implementation of indicator constraints requires a
significant amount of caution from the user.
There are two ways of entering the equation/binary variable
mapping in a solver option file: with an indexed format and
using labels.
The indexed format is a convenient shorthand notation which
borrows its syntax from the GAMS syntax. It requires that the
indices for the binary variable are already present in the index
set of the equation.
constr01.. x1 + x2 + x3 =l= 0;
indic constr01$y 0
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
28/32


Consider the following example of an invalid GAMS syntax with
an endogenous variable in the dollar condition:
This may be specified with the following equation in the GAMS
file:
plus a solver option file with the following entry:
The label format is used in cases where the binary variable
indices are not present in the equation indices or the binary
variable is adjusted with lags or leads. In these cases the
mapping of all individual equations and variables of the
indicator constraints need to be specified. An example follows.
Note that the example above is not valid GAMS code. Instead,
we will combine a valid GAMS equation and a solver option file
using the label format as follows:
and the solver option file
equ1(i,j,k)$(ord(i) < ord(j) and bin1(i,k)=1).. 
equ1(i,j,k)$(ord(i) < ord(j)).. lhs =l= rhs;
indic equ1(i,j,k)$bin1(i,k) 1
Set             i /i1*i3/, j /j1*j2/;
Binary variable bin1(j);
Equation        equ1(i,j);
equ1(i,j)$(bin1(j++1)=0)..   lhs =e= 0;
equ1(i,j).. lhs =e= 0;
indic equ1('i1','j1')$bin1('j2') 0
indic equ1('i1','j2')$bin1('j1') 0
indic equ1('i2','j1')$bin1('j2') 0
indic equ1('i2','j2')$bin1('j1') 0
indic equ1('i3','j1')$bin1('j2') 0
indic equ1('i3','j2')$bin1('j1') 0
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
29/32


Note that the lines in such option files need not be entered
manually. They may be easily generated using the GAMS The Put
Writing Facility. For example, the lines above may be generated
as follows:
Attention
Mixing and matching between indexed format and
label format is not possible. While expressions like
eq(i,j,k)$x(i,k) and
eq('i1','j2','k3')$x('i1','k6') are valid,
combinations such as eq(i,'j2',k)$x(i,k) are
not supported.
There are situations where the indicator binary variable exist in
the indicator constraint only and hence will not be generated
by GAMS to be passed on to the solver. In such cases the solver
will issue the following error message:
There is an easy way to fix this problem: adding the binary
indicator variable artificially to the model. For example, it may
be added with the coefficient eps to the objective:
An Example for Indicator Constraints with GAMS
In this subsection we will comment on parts of the model
[TRNSINDIC]. This model uses big M formulations and indicator
constraints to solve the same problem. In addition, a
formulation that makes it easy to switch between these two is
presented. It is a fixed-charge network example based on the
well-known model [TRNSPORT].
file fcpx / cplex.opt /;
fcpx.pc=8;
loop((i,j), put fcpx 'indic' equ1(i,j) '$' bin1(
putclose fcpx;
Error: Column is not of type Variable
defobj.. z =e= ... + eps*sum(j, bin1(j));
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
30/32


Recall that i is the set of canning plants and j is the set of
markets where cases of some product are to be shipped. First,
the basic model is reformulated to a MIP by introducing the
binary variable use(i,j) and two new equations:
Note that minshipping is a scalar denoting the minimum
amount of cases that may be shipped and bigM is a sufficiently
large number, as usual.
Next, the same problem is solved with indicator constraints: the
two new equations are reformulated and a CPLEX option file
with information on indicator constraints is added:
Note that the option file contains an entry for each of the two
equations. Note further, that the binary variable use moved
from the equations to the option file. However, it also features
in the objective equation of the model, therefore this is not
problematic. Observe that the indexed format for the
equation/binary variable mapping was used in the option file.
Alternatively, the label format may be used:
Binary Variable use(i,j)     is 1 if arc is used
Equations       minship(i,j) ensure minimum ship
                maxship(i,j) ensure zero shippin
minship(i,j)..  x(i,j) =g= minshipping*use(i,j);
maxship(i,j)..  x(i,j) =l= bigM*use(i,j);
Equations  iminship(i,j) ensure minimum shipping
           imaxship(i,j) ensure zero shipping if
iminship(i,j)..   x(i,j) =g= minshipping;
imaxship(i,j)..   x(i,j) =e= 0;
Model indicatorModel /cost, supply, demand, imin
file fcpx Cplex Option file / cplex.opt /;
putclose fcpx 'indic iminship(i,j)$use(i,j) 1' /
indicatorModel.optfile = 1;
Solve indicatorModel using mip minimizing z ;
loop((i,j),
     put fcpx 'indic ' iminship.tn(i,j) '$' use.
            / 'indic ' imaxship.tn(i,j) '$' use.
  putclose fcpx;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
31/32


In a final step the model is reformulated again such that the
same problem may be solved with and without indicator
constraints. This can be especially useful for debugging a
model with indicator constraints. For details, see [TRNSINDIC].
Another example of a model with indicator constraints is the
model [BILINEAR] where various formulations to represent
bilinear product terms are demonstrated.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Special Features for Mathematical Programs
https://www.gams.com/latest/docs/UG_LanguageFeatures.html
32/32


Dollar Control Options
Introduction
Dollar control options
are used to indicate
compiler directives and
options. Dollar control
options are not part of
the GAMS language and
must be entered on
separate lines marked
with the symbol $ in
the first column. A
dollar control option
line may be placed
anywhere within a
GAMS program and it is
processed during the
compilation of the
program. The symbol $
is followed by one or
more options
separated by spaces.
Since the dollar control
options are not part of
the GAMS language,
they do not appear on
the compilation output
in the listing file unless
an error has been
detected or the user
has requested them to
be shown (with the
option $onDollar).Note
that dollar control
option lines are not
case sensitive and a
Detailed Description of Dollar
Control Options
Conditional Compilation
Conditional Compilation:
General Syntax and Overviews
Conditional Compilation:
Examples
File Operation Test
Conditional Compilation
and Batch Include Files
Testing Whether an Item
Has Been Defined
Testing the state of a flag
set by a dollar control
option
Testing Whether an Item
May Be Used in an
Assignment
Testing Whether an
Identifier May Be Declared
Comments in the Context of
Conditional Compilation
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
47 (latest)
Search...
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
1/184


continued compilation
uses the previous
settings.
This chapter is
organized as follows. First an overview of the dollar control options
will be given in section List of Dollar Control Options, where the
options will be presented in groups reflecting their major functional
categories. Section Detailed Description of Dollar Control Options will
contain a reference list of all dollar control options in alphabetical
order with detailed description for each.
We will conclude this chapter with separate sections for two
important topics: Conditional Compilation, Macros in GAMS,
Compressing and Decompressing Files, and Encrypting Files.
Syntax
In general, the syntax in GAMS for dollar control statements is as
follows:
The symbol $ in the first column indicates that this is a dollar control
statement. It is followed by the name of the dollar control option
option_name and the list of arguments argument_list of the
option. Depending on the particular option, the number of arguments
required can vary from 0 to many. More than one dollar control
option may be activated in one statement. Note that in this case the
symbol $ is not repeated. Observe that some dollar control options
require that they be the first option on a line.
Note
No blank space is permitted between the character
$ and the first option that follows.
The effect of the dollar control option is felt
immediately after the option is processed.
Dollar control options are not part of the GAMS
language they instruct the compiler to perform
some task. Therefore, dollar control options are not
terminated with a semicolon as real GAMS language
statements.
A simple example of a list of dollar control options is shown below:
$option_name argument_list {option_name argument_list
Encrypting Files: A Simple
Example
Encrypting Files: The Model
ENCRYPT
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
2/184


Note that there is no blank space between the character $ and the
option that follows. The first dollar control option $title sets the title
of the pages in the listing file to the text that follows the option
name. In the second line of the example above, two options are set:
$onSymXRef and $onSymList. These options turn on the echoing of
the symbol cross reference table and symbol listing in the
compilation output in the listing file.
Observe that it is also permitted to place a dollar control statement
in a column other than column 1. However, in this case the statement
must begin with the symbols $$, like in this example
List of Dollar Control Options
The dollar control options are grouped into nine major functional
categories affecting
the input comment format
the input data format
the output format
reference maps
program control
GDX operations
compile-time variables and environment variables
macro definitions
compressing and encrypting source files
The following subsections briefly describe the options in each of the
categories.
$title Example to illustrate dollar control options
$onsymxref onsymlist
    $$title Example showing that dollar control optio
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
3/184


Dollar Control Options Affecting the Input Comment
Format
Option
Description
comment
Set the comment character
eolCom
Set the end-of-line comment character(s)
inlineCom
Set the in-line comment characters
maxCol
Set the right-hand margin of the input file
minCol
Set left-hand margin of the input file
offEolCom
Turn end-of-line comments off
offInline
Turn in-line comments off
offMargin
Turn margin marking off
offNestCom
Turn nested comments off
offText
Turn text mode off
onEolCom
Turn end-of-line comments on
onInline
Turn in-line comments on
onMargin
Turn margin marking on
onNestCom
Turn nested comments on
onText
Turn text on: the following lines are comment
Note that comments in GAMS are introduced in section Comments.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
4/184


Dollar Control Options Affecting the Input Data
Format
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
5/184


Option
Description
dollar
Set the 'dollar' character
offDelim
Turn delimited data statement syntax off
offDigit
Turn the number precision check off
offEmbedded
No embedded text or data allowed
offEmpty
Disallow empty data initialization
statements
offEnd
Disallow alternate program control syntax
offEps
Disallow interpretation of EPS as zero
offExternalInput
End of external input section
offGlobal
Disallow inheritance of parent file settings
offIDCProtect
Allow to change external input symbols at
execution time
offImplicitAssign
Trigger compilation error 141 if symbol has
not been assigned
offSuffixDLVars
Do not allow domain limited variables with
suffixes in model
offSuffixAlgebraVars
Do not allow variables with suffixes in
model algebra
offTroll
Do not recognize Troll periodicity in set
definitions using sequences
offUNDF
Do not allow UNDF as input
offUni
Do not allow domain violations in
assignments
offWarning
Do not convert domain errors into
warnings
onDelim
Turn delimited data statement syntax on
onDigit
Turn number precision check on
onEmbedded
Allow embedded text or data in set and
parameter statements
onEmpty
Allow empty data initialization statements
onEnd
Allow alternate program control syntax
onEps
Interpret zero as EPS
onExternalInput
Start of external input section
onGlobal
Force inheritance of parent file settings
onIDCProtect
Protect external input symbols from being
changed at execution time
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
6/184


onImplicitAssign
Suppress compilation errors 141 and
implicitly assign symbol if symbol has not
been assigned
onSuffixDLVars
Allow domain limited variables with
suffixes in model
onSuffixAlgebraVars
Allow variables with suffixes in model
algebra
onTroll
Recognize Troll periodicity in set
definitions using sequences
onUNDF
Allow UNDF as input
onUni
Allow domain violations in assignments
onWarning
Convert certain domain errors into
warnings
use205
Language syntax of release 2.05
use225
Language syntax of release 2.25 Version 1
use999
Latest language syntax
version
Test GAMS compiler version number
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
7/184


Dollar Control Options Affecting the Output Format
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
8/184


Option
Description
double
Double-spaced listing follows
echo
Echo text to a file
echoN
Echo text to a file without ending the line
eject
Advance to next page
hidden
Ignore text and do not list
lines
Next number of lines have to fit on the page
log
Send message to the log
offDollar
Turn the listing of dollar control option lines
off
offEcho
End of block echo
offExternalOutput
End of external output section
offEpsToZero
Do not interpret EPS as zero when writing to
GDX
offInclude
Turn the listing of include file names off
offListing
Turn echoing input lines to listing file off
offLog
Turn line logging off
offPut
End of block put
offUpper
Following print to listing file is mixed cased
offVerbatim
Stop verbatim copy
onDollar
Turn the listing of dollar control option lines
on
onEcho
Start of block echo with substitution
onEchoS
Start of block echo with substitution
onEchoV
Start of block echo without substitution
onEpsToZero
Interpret EPS as zero when writing to GDX
onExternalOutput
Start of external output section
onInclude
Include file name echoed to listing file
onListing
Input lines echoed to listing file
onLog
Reset line logging
onPut
Start of block put without substitution
onPutS
Start of block put with substitution
onPutV
Start of block put without substitution
onUpper
Following print to listing file is all upper
cased
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
9/184


onVerbatim
Start verbatim copy if dumpopt 
 10
remark
Comment line with suppressed line number
[x]save[.keepCode]
Create a (compressed) save file during
compilation with and without execution
code compiled so far
single
Single-spaced listing follows
stars
Set "****" characters in listing file
sTitle
Set subtitle and reset page
title
Set title and reset page
Dollar Control Options Affecting the Listing of
Reference Maps
Option
Description
offSymList
Turn symbol list off
offSymXRef
Turn symbol cross reference listing off
offUElList
Turn unique element listing off
offUElXRef
Turn unique element cross reference off
onSymList
Turn symbol list on
onSymXRef
Turn symbol cross reference listing on
onUElList
Turn unique element listing on
onUElXRef
Turn unique element cross reference on
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
10/184


Dollar Control Options Affecting Program Control
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
11/184


Option
Description
abort[.noError]
Issue an (error) message and
abort compilation
batInclude
Include file with substitution
arguments
call
Execute another program
during compilation
call.Async[NC]
Execute another program
asynchronously during
compilation
call.checkErrorLevel
Execute another program
during compilation and raise
error in case of problem
callTool
Execute a GAMS tool during
compilation
callTool.checkErrorLevel
Execute a GAMS tool during
compilation and raise error in
case of problem
clear
Reset all data for an identifier
to its default value
clearError[s]
Clear compilation errors
else
Else clause
elseIf
ElseIf structure with case
sensitive comparison
elseIfE
ElseIf structure with expression
evaluation
elseIfI
ElseIf structure with case
insensitive comparison
endif
Close ifThen/ifThenE/ifThenI
control structure
error
Issue an error message
exit
Exit from compilation
funcLibIn
Load extrinsic function library
goto
Go to line with given label
name
hiddenCall
Execute another program
(hidden) during compilation
hiddenCall.Async[NC]
Execute another program
(hidden) asynchronously during
compilation
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
12/184


hiddenCall.checkErrorLevel
Execute another program
(hidden) during compilation
and raise error in case of
problem
hiddenCallTool
Execute a GAMS tool (hidden)
during compilation
hiddenCallTool.checkErrorLevel
Execute a GAMS tool (hidden)
during compilation and raise
error in case of problem
if
Conditional processing, case
sensitive
ifE
If statement with expression
evaluation
ifI
Conditional processing, case
insensitive
ifThen
IfThen-elseIf structure with
case sensitive comparison
ifThenE
IfThen-elseIf structure with
expression evaluation
ifThenI
IfThen-elseIf structure with
case insensitive comparison
include
Include file
kill
Kill data connected with
identifier
label
Label name as entry point from
$goto .
libInclude
Include file from library
directory
offCheckErrorLevel
Do not check errorLevel
automatically after
$[hidden]call
offECImplicitLoad
Do not allow implicit loading
from embedded code
offEmbeddedCode
Ends embedded code section
offFiltered
Turn behavior of $[gdx]load* to
domain checked read
offMulti
Turn redefinition of data off
offOrder
Allow lag and lead operations
on dynamic or unordered sets
offRecurse
Disable recursive include files
offStrictSingleton
Take first label if data
statement for singleton set has
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
13/184


statement for singleton set has
multiple elements
onCheckErrorLevel
Throw compilation error, if
errorLevel is not 0 after
$[hidden]call
onECImplicitLoad
Allow implicit loading from
embedded code
onEmbeddedCode
Starts embedded code section
with substitution
onEmbeddedCodeS
Starts embedded code section
with substitution
onEmbeddedCodeV
Starts embedded code section
without substitution
onFiltered
Turn behavior of $[gdx]load* to
filtered read
onMulti
Turn redefinition of data on
(merging into existing data)
onMultiR
Turn redefinition of data on
(replacing existing data)
onOrder
lag and lead operations on
constant and ordered sets only
onRecurse
Enable recursive include files
onStrictSingleton
Error if data statement for
singleton set has multiple
elements
maxGoTo
Maximum number of jumps to
the same label
phantom
Define a phantom element
shift
bat/lib/sysInclude argument
shift operation
stop
Stop compilation
sysInclude
Include file from system
directory
terminate
Terminate compilation and
execution
warning
Issue compilation warning
Note that conditional compilation in GAMS is discussed in section
Conditional Compilation below.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
14/184


Dollar Control Options for GDX Operations
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
15/184


Option
Description
declareAndLoad
Declare and load all symbols from specified
GDX file
gdxIn
Open GDX file for input
gdxLoad
Load specified symbols from specified GDX
file
gdxLoadAll
Load all symbols which are known to GAMS
from specified GDX file
gdxOut
Open GDX file for output
gdxUnload
Unload symbols into specified GDX file.
load
Load symbols from previously opened GDX
file
loadDC
Load symbols from previously opened GDX
file - domain checked
loadDCM
Load symbols from previously opened GDX
file - domain checked - merge
loadDCR
Load symbols from previously opened GDX
file - domain checked - replace
loadFiltered
Load symbols from previously opened GDX
file - domain filtered
loadFilteredM
Load symbols from previously opened GDX
file - domain filtered - merge
loadFilteredR
Load symbols from previously opened GDX
file - domain filtered - replace
loadIdx
Load symbols from previously opened GDX
file which has been written using an indexed
write
loadM
Load symbols from previously opened GDX
file - merge
loadR
Load symbols from previously opened GDX
file - replace
offExternalInput
End of external input section
offExternalOutput
End of external output section
offFiltered
Turn behavior of $[gdx]load* to domain
checked read
onExternalInput
Start of external input section
onExternalOutput
Start of external output section
onFiltered
Turn behavior of $[gdx]load* to filtered read
unLoad
Unload symbols into previously opened GDX
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
16/184


file.
Note that GDX facilities and utilities are introduced in chapter GAMS
Data eXchange (GDX).
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
17/184


Dollar Control Options for Compile-Time Variables
and Environment Variables
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
18/184


Option
Description
drop
Drop a scoped compile-time variable
dropGlobal
Drop a global compile-time variable
dropLocal
Drop a local compile-time variable
dropEnv
Drop an OS environment variable
escape
Define the % escape symbol
eval
Evaluate and define a scoped compile-time
variable
eval.Set
Evaluate and define a scoped compile-time
variable based on a GAMS set
evalGlobal
Evaluate and define a global compile-time
variable
evalGlobal.Set
Evaluate and define a global compile-time
variable based on a GAMS set
evalLocal
Evaluate and define a local compile-time
variable
evalLocal.Set
Evaluate and define a local compile-time
variable based on a GAMS set
prefixPath
Prefix the environment variable PATH.
scratchFileName
Set a name for a temporary file in the scratch
directory using the scratch file extension
setArgs
Define local compile-time variables using
argument list
setComps
Unpack dotted names into compile-time
variables
setDDList
Check double dash GAMS parameters
setDDList.Cont
Start list of identifiers to check double dash
GAMS parameters
setEnv
Define an OS environment variable
set
Define a scoped compile-time variable
setGlobal
Define a global compile-time variable
setLocal
Define a local compile-time variable
setNames
Unpack a filename into local compile-time
variables
show
Show current GAMS compile-time variables,
macros, and active files
showFiles
Show active input and include files
showMacros
Show current macros
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
19/184


showVariables
Show current GAMS compile-time variables
splitOption
Unpack a key/value pair into scoped
environment variables
See also sections Compile-Time Variables and Environment Variables
in GAMS.
Dollar Control Options for Macro Definitions
Option
Description
macro
Preprocess macro definition
offDotL
Do not assume .l for variables in assignments
offDotScale
Assume .scale for variables and equations in
assignments
offExpand
Do not expand macros when processing macro
arguments
offLocal
Limit .local nesting to one
offMacro
Do not recognize macros for expansion
onDotL
Assume .l for variables in assignments and put
statements
onDotScale
Assume .scale for variables and equations in
assignments and put statements
onExpand
Expand macros when processing macro arguments
onLocal
No limit on .local nesting
onMacro
Recognize macros for expansion
Note that macros are introduced in section Macros in GAMS below.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
20/184


Dollar Control Options for Compressing and
Encrypting Source Files
Option
Description
compress
Create compressed GAMS system file
decompress
Decompress a GAMS system file
encrypt
Create an encrypted GAMS system file
expose
Remove all access control restrictions
hide
Hide objects from the user
protect
Protect objects from being modifified by the user
purge
Remove the objects and all associated data
Detailed Description of Dollar Control
Options
In this section we will describe each dollar control option in detail.
Note that the dollar control options are listed in alphabetical order
for easy reference. Note further, that in each entry the default value,
if applicable, is given in parentheses.
$abort[.noError]
Syntax:
If used as $abort, this option will issue a compilation error
and abort the compilation. It may be followed by a text.
Example:
This stops compilation if the operating system is not Unix.
Running the example above on Windows will result in the
compilation being aborted and the following lines in the
listing file:
$abort[.noError] [text]
$if not %system.fileSys% == UNIX
$abort We only do UNIX
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
21/184


$batInclude
This option has a variant: $abort.noError. If the extension
.noError is used the compilation will be aborted as well,
but there will be no error. If a save file is written, all
remaining unexecuted code will be flushed. This allows
effective reuse of the save file.
Note that there is also an abort statement in GAMS, it is used
to terminate the execution of a program.
See also $exit, $error, $stop, and $terminate.
    2  $abort We only do UNIX
****        $343
Error Messages
343  Abort triggered by above statement
Syntax:
The $batInclude facility performs the same task as the
$include facility: it inserts the contents of the specified file
external_file at the location of the call. However, in
addition, the option $batInclude also passes on arguments
arg which may be used inside the include file.
External_file is the name of the batch include file, it may
be quoted or unquoted. The arguments arg are passed on to
the batch include file. These arguments are treated as
character strings that are substituted by numbers inside the
included file. The arguments may be single unbroken strings
(quoted or unquoted) or quoted multi-part strings.
Note that the syntax has been modeled after the DOS batch
facility. Inside the batch file, a parameter substitution is
indicated by using the character % followed immediately by
an integer value corresponding to the order of parameters on
the list where %1 refers to the first argument, %2 to the
second argument, and so on. If an integer value is specified
that does not correspond to a passed parameter, then the
parameter flag is substituted with a null string. The
parameter flag %0 is a special case that will substitute a fully
expanded file name specification of the current batch
included file. The flag %$ is the current $ symbol (see
$dollar). Observe that parameters are substituted
$batInclude external_file {arg}
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
22/184


independent of context and the entire line is processed
before it is passed to the compiler. There is one exception:
parameter flags that appear in comments are not substituted.
Attention
GAMS requires that processing the
substitutions must result in a line of less
than or equal to the maximum input line
length.
The case of the passed parameters is
preserved, thus it may be used in string
comparisons.
Example:
Note that file1.inc is included with abcd as the first
parameter, bbbb as the second parameter and cccc dddd as
the third parameter.
The external file inc2.inc contains the following line:
The echo print in the corresponding listing file follows:
$batInclude "file1.inc" abcd "bbbb" "cccc dddd"
Parameter a,b,c ;
a = 1 ; b = 0 ; c = 2 ;
$batInclude inc2.inc b a
display b ;
$batInclude inc2.inc b c
display b ;
$batInclude inc2.inc b "a+5"
display b ;
%1 = sqr(%2) - %2 ;
 1  Parameter a,b,c ;
 2  a = 1 ; b = 0 ; c = 2 ;
BATINCLUDE C:\tmp\inc2.inc
 4  b = sqr(a) - a ;
 5  display b ;
BATINCLUDE C:\tmp\inc2.inc
 7  b = sqr(c) - c ;
 8  display b ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
23/184


$call
Note that the option $batInclude appears three times with
different arguments. GAMS is interprets the contents of the
batch include file in turn as:
Note that the third call is not interpreted as
sqr(a+5)-(a+5), but instead as sqr(a+5)-a+5. The results
of the display statement are shown at the end of the listing
file are given below:
Observe that the third call leads to b = sqr(6)-1+5, thus
the final value of b is 40. Suppose the statement in the batch
include file is modified to read as follows:
With this modification the output generated by the display
statement will be as follows:
Note that the third call leads to b = sqr(6)-6 which results
in b taking a value of 30.
Note
The option $batInclude without any arguments
is equivalent to the option $include.
See also $include, $libInclude, $sysInclude.
BATINCLUDE C:\tmp\inc2.inc
 10  b = sqr(a+5) - a+5 ;
 11  display b ;
b = sqr(a) - a ;
b = sqr(c) - c ;
b = sqr(a+5) - a+5 ;
----      5 PARAMETER b                    =  
----      8 PARAMETER b                    =  
----     11 PARAMETER b                    =  
%1 = sqr(%2) - (%2) ;
----      5 PARAMETER b                    =  
----      8 PARAMETER b                    =  
----     11 PARAMETER b                    =  
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
24/184


Syntax:
This option passes a command to the current operating
system command processor and interrupts compilation until
the command has been completed. If the command string is
empty or omitted, a new interactive command processor will
be loaded.
Example:
This command creates a directory listing on a PC.
Note that the command string may be passed to the system
and executed directly without using a command processor by
prefixing the command with an '=' sign. Compilation errors
will be issued if the command or the command processor
cannot be loaded and executed properly.
The first call will run the model [TRNSPORT] in a new
command shell. The DOS command shell does not send any
return codes from the run back to GAMS. Therefore any errors
in the run are not reported back. The second call, however,
will send the command directly to the system. The return
codes from the system will be intercepted correctly and they
will be available to the GAMS system through the errorLevel
function.
Attention
Some commands (like copy on a PC and cd
in Unix) are shell commands and cannot be
spawned off to the system. Using these in a
system call will create a compilation error.
$call [=]command
$call dir
$call gams trnsport
$call =gams trnsport
    $call 'copy myfile.txt mycopy
    $call '=copy myfile.txt mycop
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
25/184


The first call will work on a PC, but the
second will not. The copy command may be
used only from a command line shell. The
system is not aware of this command (Try
this command after clicking Run under the
Start menu in Windows. You will find that it
does not work).
One has to take special care when the first
argument of the command contains spaces
(for example an executable with absolute
path), e.g.:
This would fail, since the command
processor would try to call C:\path as the
executable. So, one might think that
protecting the spaces using quotes will
resolve this problem:
However, the quotes delimit the entire
$call command, so that trnsport.gms
gets interpreted as new dollar control
option instead of an argument for the
executable. The solution is to use nested
quotes: One pair to delimit the $call
command and another one to protect the
spaces of the executable like this:
It gets even more complicated if the
argument contains spaces as well, e.g. if we
have my model.gms instead of
trnsport.gms. Another pair of quotes
solves this:
    $call C:\path with spaces\gam
    $call "C:\path with spaces\ga
    $call '"C:\path with spaces\g
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
26/184


$call.Async[NC]
$call.checkErrorLevel
See also $call.Async, $call.checkErrorLevel, $hiddenCall.
    $call '"C:\path with spaces\g
Syntax:
$call.Async works like $call but allows asynchronous job
handling. This means users may start a job command without
having to wait for the result, they may continue in their
model and collect the return code of the job later. The
function jobHandle may be used to get the process ID (pid) of
the last job started. The status of the job may be checked
using the function jobStatus(pid). An interrupt signal to a
running job may be sent with the function jobTerminate(pid).
With the function jobKill(pid) a kill signal may be sent to a
running job.
The difference between $call.Async and $call.AsyncNC
is, that the latter starts processes in a new console, rather
than sharing the console of the parent process.
Note
On non-Windows platforms $call.AsyncNC and
$call.Async are synonyms.
$call.Async[NC] command
Syntax:
$call.checkErrorLevel works like $call but checks the
errorLevel implicitly, raises a compilation error and aborts
compilation, if that is not 0.
Example:
$call.checkErrorLevel [=]command
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
27/184


$callTool
This is doing the same as:
$call.checkErrorLevel gams trnsport
$call gams trnsport
$ifE errorLevel<>0 $abort 'Problem calling gams
Syntax:
This option calls a tool of the GAMS Tools Library at compile
time.
Example:
This tool writes all worksheets of an Excel workbook to GAMS
symbols.
Note
Similar to $call, $callTool returns a shell
code that can be checked via errorLevel.
In case one expects the tools to perform
without error, it is recommended to add
the suffix .checkErrorLevel. This will stop
the entire execution of GAMS if an error
occurs while executing the tool.
$callTool[.checkErrorLevel] [...]
is ignored while $onExternalInput is active
and IDCGDXInput is set.
Attention
$callTool is only available for calling tools
from the GAMS Tools Library. For general
$callTool command
$callTool [data.]ExcelDump excelFile [gdxOut=fi
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
28/184


$callTool.checkErrorLevel
$clear
commands to the operating system $call
must be used.
See also $callTool.checkErrorLevel, $hiddenCallTool.
Syntax:
$callTool.checkErrorLevel works like $callTool but
checks the errorLevel implicitly, raises a compilation error
and aborts compilation, if that is not 0.
Example:
This is doing the same as:
$callTool.checkErrorLevel command
$callTool.checkErrorLevel [data.]ExcelDump exce
$callTool [data.]ExcelDump excelFile [gdxOut=fi
$ifE errorLevel<>0 $abort 'Problem calling gams
Syntax:
This option resets all data for the identifiers ident to their
default values. Note that only the following data types may
be reset: sets, parameters, variables and equations. Note
further, that the clearing is carried out during compile time
and not when the GAMS program executes.
Example:
$clear  ident {ident}
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
29/184


The option $clear resets i and a to their default values: an
empty set for i and zero for a. The output generated by the
display statement follows:
Attention
The two-pass processing of a GAMS file may lead
to seemingly unexpected results. Both the dollar
control options and the data initialization is done
in the first pass, and assignments in the second,
irrespective of their relative locations. This is an
issue particularly with $clear since data can be
both initialized and assigned.
Note that the scalar data initialization statement is
processed during compilation and the assignment statement
a = 5; during execution. In the order that it is processed,
the example above is read by GAMS as:
Therefore the result is that a takes the value of 5. The output
from the display statement is as follows:
Set    i  / 1*20 /; 
Scalar a  / 2 /;
$clear i a
display i, a;
----      4 SET i
                                              
----      4 PARAMETER a                    =  
Scalar a / 12 /;
a = 5;
$clear a
display a;
* compilation step
Scalar a /12/ ;
$clear a
* execution step
a = 5;
display a ;
----      4 PARAMETER a                   =   
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
30/184


$clearError[s]
$comment  (*)
Compare also $kill and the execution time option clear.
Syntax:
This option ($clearError and $clearErrors are
synonyms) clears GAMS awareness of compiler errors and
turn them into warning messages instead.
Example:
Note that without the use of $clearError the program
above would not continue with the execution after line 2.
$clearError[s]
Scalar z / 11 /;
$eval x sqrt(-1)
$clearError
$log %x%
Display z;
Syntax:
This option changes the symbol indicating a single line
comment from the default * to the single character char.
Note that after this option is used, the new comment
character char cannot be used in column 1 as before, since it
got a special meaning. Note further, that the case of the
character does not matter if it is used as a comment
character. This option should be used with great care and we
recommend to reset the symbol quickly to the default.
Attention
The case of the start-of-line comment character
does not matter when being used.
Example:
$comment char
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
31/184


$compress
See also section Comments.
$comment c
c now we use a FORTRAN style comment symbol
$comment *
* now we are back to the default
Syntax:
This option causes the file source to be compressed into the
packed file target.
Example: Consider the following example where the well-
known model [TRNSPORT] is used:
The first command retrieves the file trnsport.gms and the
second command compresses it. Note that a compressed
GAMS file is treated like any other GAMS file, therefore it may
be included and executed as usual. Large data files that do
not change often can be compressed this way to save disk
space.
The following example serves as a little utility to compress
and decompress files:
$compress source target
$call gamslib trnsport
$compress trnsport.gms t2.gms
$include t2.gms
$ifthen set decompress
$  if not set input  $set input file_c.gms
$  if not exist %input% $abort No file input fi
$  if not set output $set output file.gms
$  log Decompressing %input% into %output%
$  decompress %input% %output%
$else
$  if not set input  $set input file.gms
$  if not exist %input% $abort No file input fi
$  if not set output $set output file_c.gms
$  log Compressing %input% into %output%
$  compress %input% %output%
$endif
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
32/184


$declareAndLoad
The program (saved to a file called compress.gms) can be
used as follows:
See also $decompress. Further details are given in chapter
Compressing and Decompressing Files.
> gams compress.gms --input myfile.gms --outpu
> gams compress.gms --decompress=1 --input myf
Syntax:
This option loads all symbols from a specified GDX file. It is
similar to $gdxLoadAll, but does not only load the symbols
declared so far but also declares symbols found in the GDX
file on the fly if they were unknown. If a symbol already exists
in GAMS the GDX declaration better matches it's previous
GAMS declaration exactly (same rules as if we would write the
second declaration in source, e.g. different symbol text is
allowed or incremental declaration first Variable x; and in
GDX Positive Variable x;) otherwise we trigger an error.
Example:
If there is a GDX file trnsport created from the [TRNSPORT]
model, the following code will declare and load all symbols
seen in the trnsport model before:
This can be seen in the .lst file afterwards:
$declareAndLoad GDXFileName
$declareAndLoad trnsport.gdx
option DmpUserSym;
SYMBOL TABLE DUMP (USER SYMBOLS ONLY), NR ENTR
ENTRY                               ID   TYPE 
  138                                i    SET 
  139                                j    SET 
  140                                a  PARAM 
  141                                b  PARAM 
  142                                d  PARAM 
  143                                f  PARAM 
  144                                c  PARAM 
  145                                x    VAR 
  146                                z    VAR 
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
33/184


$decompress
$dollar   ($)
See also $(on|off)Filtered, $(on|off)Multi, and $onMultiR.
  147                             cost    EQU 
  148                           supply    EQU 
  149                           demand    EQU 
END OF SYMBOL TABLE DUMP
Syntax:
This option causes the compressed file source to be
decompressed into the unpacked file target.
Example: Consider the following example where the well-
known model [TRNSPORT] is used:
The first command retrieves the file trnsport.gms, the
second command compresses it and the third command
decompresses the compressed file. Note that the resulting
file, t3.gms, is identical to the original file trnsport.gms
which is tested via the diff program.
See also $compress. Further details are given in chapter
Compressing and Decompressing Files.
$decompress source target
$call gamslib trnsport
$compress trnsport.gms t2.gms
$decompress t2.gms t3.gms
$call diff t3.gms trnsport.gms
$if errorlevel 1 $abort t3.gms and trnsport.gms
Syntax:
This option changes the current 'dollar' symbol to the single
character char.
Note
$dollar char
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
34/184


$double
$drop
The special %$ substitution symbol can be used
to get the current 'dollar' symbol.
Example:
$dollar #
#log now we can use '%$' as the '$' symbol
Syntax:
The lines following this option will be echoed double spaced
to the echo print in the listing file.
Example:
The resulting echo print in the listing file looks as follows:
Note that lines before the option $double are listed single
spaced, while the lines after the option are listed with double
space.
See also $single.
$double
Set    i / 1*2 / ;
Scalar a / 1   / ;
$double
Set    j / 10*15 / ;
Scalar b / 2     / ;
1  Set i /1*2/ ;
2  Scalar a /1/ ;
4  Set j /10*15/ ;
5  Scalar b /2/ ;
Syntax:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
35/184


$dropEnv
$dropGlobal
This option destroys (removes from the program) the scoped
compile-time variable VARNAME that was defined with the
dollar control option $set.
Example:
See also $set, $dropGlobal, and $dropLocal.
$drop VARNAME
$set NAME my name
$if set NAME $log Scoped compile-time variable 
$drop NAME
$if not set NAME $log Scoped compile-time varia
Syntax:
This dollar control option destroys (removes from the
program) the operating system environment variable
VARNAME. For detailed information, see the dollar control
option .
Example:
See also $setEnv, and $if setEnv.
$dropEnv VARNAME
$if setEnv GDXCOMPRESS $dropEnv GDXCOMPRESS
Syntax:
This option destroys (removes from the program) the global
compile-time variable VARNAME that was defined with the
dollar control option $setGlobal.
Example:
$dropGlobal VARNAME
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
36/184


$dropLocal
$echo
See also $setGlobal, and $drop.
$setGlobal NAME my name
$if setGlobal NAME $log Global compile-time va
$dropGlobal NAME
$if not setGlobal NAME $log Global compile-time
Syntax:
This option destroys (removes from the program) the local
compile-time variable VARNAME that was defined with the
dollar control option $setLocal.
See also $setLocal, and $drop.
$dropLocal VARNAME
$setLocal NAME my name
$if setLocal NAME $log Local compile-time varia
$dropLocal NAME
$if not setLocal NAME $log Local compile-time v
Syntax:
This option allows to write the text text to a file
external_file. The text and the file name may both be
quoted or unquoted. The file name is expanded using the
working directory. The option $echo tries to minimize file
operations by keeping the file open in anticipation of
another $echo to be appended to the same file. The file will
be closed at the end of the compilation or when an option
$call or any variant of the option $include is encountered.
The redirection symbols > and >> have the usual meaning of
starting at the beginning or appending to an existing file
respectively.
Example:
$echo text >[>] external_file
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
37/184


$echoN
The content of the resulting file echo.txt is the following:
See also $on/offEcho, and $echoN.
$echo                                          
$echo  The message written goes from the first 
$echo 'to the first > or >> symbol unless the t
$echo "is quoted. The input File is %gams.input
$echo 'file name "echo.txt" will be completed w
$echo  %gams.workdir%.                         
$echo                                          
The message written goes from the first non bl
to the first > or >> symbol unless the text is
is quoted. The input File is C:\tmp\echoTest.g
file name "echo.txt" will be completed with
C:\tmp\.
Syntax:
This option sends a text message text to an file
external_file like $echo but writes no end of line marker
so the line is repeatedly appended to by subsequent
commands. The redirection symbols > and >> have the usual
meaning of starting at the beginning or appending to an
existing file respectively. Note that the text and the file name
may be quoted or unquoted. By default the file will be saved
in the working directory.
Example:
The created file aaa.txt contains the following text:
See also $on/offEcho, and $echo.
$echoN text >[>] external_file
$echoN 'Text to be sent'           > 'aaa.txt'
$echoN 'More text'                >> aaa.txt
$echoN And more and more and more >> aaa.txt
$echo This was entered with $echo >> 'aaa.txt'
$echo This too                    >> aaa.txt
Text to be sentMore textAnd more and more and 
This too
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
38/184


$eject
$else
$elseIf
Syntax:
This option advances the echo print to the next page.
Example:
The statements following the first $eject will be listed on
one page in the echo print of the listing file and the
statements following the second $eject will be listed on the
next page.
$eject
$eject
Set       i,j ;
Parameter Data(i,j) ;
$eject
Scalar a;
a = 7;
Syntax:
This option always appears together with the option
$ifThen[E/I]. It is followed by an instruction which is
executed if the conditional expression of the matching
option $ifThen[E/I] is not true. For an example, see section
Conditional Compilation with $ifThen and $else.
See also $ifThen, $elseIf and section Conditional
Compilation.
$ifThen[E|I] cond
  ...
{ $elseIf[E|I] cond 
  ... }
[ $else
  ... ]
$endIf
Syntax:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
39/184


$elseIfE
$elseIfI
$encrypt
This option always appears together with the option
$ifThen[E/I]. It is followed by another condition and
instruction. For an example, see section Conditional
Compilation with $ifThen and $else.
See also $ifThen, $else, $elseIfE, $elseIfI and section
Conditional Compilation.
$ifThen[E|I] cond
  ...
{ $elseIf[E|I] cond 
  ... }
[ $else
  ... ]
$endIf
Syntax:
This option does the same as $elseIf but evaluates numerical
values of the control variables.
See also $elseIf and section Conditional Compilation.
$ifThen[E|I] cond
  ...
{ $elseIf[E|I] cond 
  ... }
[ $else
  ... ]
$endIf
Syntax:
This option does the same as $elseIf but it is case insensitive.
See also $elseIf and section Conditional Compilation.
$ifThen[E|I] cond
  ...
{ $elseIf[E|I] cond 
  ... }
[ $else
  ... ]
$endIf
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
40/184


$endIf
$eolCom (!!)
Syntax:
This option causes a file to be converted into an encrypted
file. Here source is the name of the source file to be
encrypted and target is the name for the resulting
encrypted file. Note that encryption requires the secure
option to be licensed and is available for commercial
licenses only. The command line parameter pLicense
specifies the target license to be used for encryption. The
encrypted file can only run on a system licensed with the
license file used for encryption. No special action is required
on the executing system since GAMS recognizes whether a file
is encrypted and will process it accordingly. There is no
option to decrypt an encrypted file, so better keep the
original unencrypted file.
Further details and examples are given in chapter Encrypting
Files.
$encrypt source target
Syntax:
This must option must be matched with one of the options
$ifThen, $ifThenE or $ifThenI. For an example, see section
Conditional Compilation with $ifThen and $else.
See also $ifThen and section Conditional Compilation.
$ifThen[E|I] cond
  ...
{ $elseIf[E|I] cond 
  ... }
[ $else
  ... ]
$endIf
Syntax:
$eolCom char[char]
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
41/184


This option redefines and activates the end-of-line comment
symbol, which may be one character or a sequence of two
characters. By default, this is initialized to !!, but is not
active. The option $onEolCom is used to activate the end-of-
line comments. If $eolCom is used, $onEolCom is set
automatically.
Example:
Here the character sequence // serves as the end-of-line-
comment indicator.
Attention
It is not allowed to reset the end-of-line
comment symbol to the current end-of-line
comment symbol. This would cause an
compilation error as in the following example:
Some end of line character settings can cause confusion. The
widely used end of line character sequence // is also legal
GAMS syntax in put statement to indicate two line breaks:
results in a put file with the following content:
This can also confuse syntax highlighting in editors (or on
thsi web page). Other popular end of line characters like #
$eolCom //
Set i /1*2/ ;     // set declaration
Parameter a(i) ;  // parameter declaration
$eolCom //
$eolCom //
file fx; put fx;
put 'first line' // 'second line' //;
$eolCom //
put 'third line' // 'fourth line';
first line
second line
third line
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
42/184


$error
$escape
and @ are also used as GAMS syntax, see Controlling the
Cursor On a Page.
The default for dealing with end-of-line comments can be set
using the command line parameter eolCom.
See also section Comments for more about comments in
GAMS.
Syntax:
This option will issue a compilation error and will continue
with the next line.
Example:
Note that the first line checks if the file myfile exists. If the
file does not exist, it will generate an error with the comment
File myfile not found - will continue anyway and
then the compilation will continue with the next line.
See also $abort, $exit, $terminate, and $stop.
$error [text]
$if not exist myfile
$error File myfile not found - will continue an
Syntax:
This option allows users to work with text sequences
containing % without substitution.
This causes all subsequent commands of the form %symbol%
to not have parameter substitution done for them. As a
consequence, no parameter substitutions are performed in
GAMS statements (mostly useful in display and put
statements) and the outcome of such statements where
%symbol% is used is just %symbol%.
$escape character
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
43/184


Note that the effect of the option $escape may be reversed
with the option $escape %.
Example:
The output generated by the display statements follows:
The file it.put will contain the following lines:
Note that this option was introduced to facilitate writing
GAMS code (or command.com/cmd.exe batch scripts) from
GAMS including unsubstituted compile-time variables. Text
can also be written at compile-time without parameter
substitution via option $on/offEchoV and at run-time via
$on/offPutV.
$set tt DOIT
file it; put it;
display "first %tt%";
display "second %&tt%&";
put "display one ", "%system.date%" /;
put "display two " "%&system.date%&"/;
$escape &
display "third %tt%";
display "fourth %&tt%&";
put "display third ", "%system.date%" /;
put "display fourth " "%&system.date%&"/;
$escape %
display "fifth %tt%";
display "sixth %&tt%&";
put "display fifth ", "%system.date%" /;
put "display sixth " "%&system.date%&"/;
----      6 first DOIT
----      7 second %&tt%&
----     12 third DOIT
----     13 fourth %tt%
----     18 fifth DOIT
----     19 sixth %&tt%&
display one 08/10/17
display two %&system.date%&
display third 08/10/17
display fourth %system.date%
display fifth 08/10/17
display sixth %&system.date%&
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
44/184


$eval
Note
In GAMS the escape character follows the
character (%) that needs to be escaped. In many
other languages the escape character precedes
the to be escaped character.
Syntax:
This option evaluates a numerical expression at compile time
and places it into a scoped compile-time variable. In turn the
option $ifE may be used to do numeric testing on the value
of this variable.
VARNAME is the name of a compile-time variable and
expression is an expression that consists of constants,
functions, operators and other compile-time variables with
numerical values. Note that no whitespace is allowed in the
expression which can be overcome by additional
parentheses.
Example:
The first two lines use the uniform function to generate a
random number between 0 and 1 and assign 0 if this number
is less than 0.5 otherwise 1 via the ifthen function to the
scoped compile-time variable b1 and b1. In the third line we
apply the logical xor operator to b1 and b2 and store the
result in b3. The parentheses are required because the more
natural expression %b1% xor %b2% contains spaces. In the
forth line we print the values and result to the log.
The expression are evaluated using IEEE nonstop arithmetic,
so no evaluation errors are triggered as demonstrated in the
$eval VARNAME expression
$eval b1 ifthen(uniform(0,1)<0.5,0,1)
$eval b2 ifthen(uniform(0,1)<0.5,0,1)
$eval b3 (%b1%)xor(%b2%)
$log b1=%b1% b2=%b2% b1 xor b2=%b3%
b1=1 b2=1 b1 xor b2=0
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
45/184


following example:
This produces the following log:
The $eval and related dollar control options give access to a
reduced set of GAMS functions: abs, card, ceil, cos, errorlevel,
exp, fact, floor, frac, gamsrelease, gamsversion, gday, gdow,
ghour, gleap, gmillisec, gminute, gmonth, gsecond, gyear,
ifthen, jdate, jnow, jobhandle, jobkill, jobstatus,
jobterminate, jstart, jtime, log, log10, log2, max, min, mod,
numcores, pi, power, round, sameas, sign, sin, sleep, sqr, sqrt,
tan, trunc, and uniform. The available operators are: +, -, *, /,
** and even ^ (integer power) which is not available in
regular GAMS expression and requires the use of the function
ipower. The comparison relations are <, >, <=, >=, <>, and =.
The logical operators are not, and, or, xor, imp, and eqv.
The expression also allows the use of dollar on the right. In
the following example we replace the ifthen function by a
dollar one the right:
Moreover, the $eval has access to data available at compile
time. The expression can access the value of scalars and for
other symbols we can use the card function to access the
cardinality (at this point) of the symbol. Here is an example:
Access to individual records of symbols is not possible. The
embedded code facility allows access to symbol records at
compile time.
$eval OneDividedByZero 1/0
$log 1/0=%OneDividedByZero%
1/0=+INF
$eval b1 1$(uniform(0,1)>=0.5)
$eval b2 1$(uniform(0,1)>=0.5)
$eval b3 (%b1%)xor(%b2%)
$log b1=%b1% b2=%b2% b1 xor b2=%b3%
Scalar ac 'Avogadro constant' / 6.0221409e+23 /
$eval log_ac round(log10(ac))
$log round(log10(ac))=%log_ac%
Set d / d0*d%log_ac% /;
$eval card_d card(d)
$log card(d)=%card_d%
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
46/184


$eval.Set
The user has the possibility to hide some of the GAMS
functions by symbols with the same name. In this case, the
GAMS function can still be accessed, but needs to be prefixed
with system. as in the following example:
This is the resulting output in the log:
See also $eval.Set, $evalGLobal, $evalLocal, $ifE, and $set.
Scalar pi /3/;
$eval myPi pi
$eval GAMSPi system.pi
$log myPi   = %myPi%
$log GAMSPi = %GAMSPi%
myPi   = 3
GAMSPi = 3.14159265358979
Syntax:
This option evaluates an attribute of a GAMS set at compile
time and places it into a scoped compile-time variable.
VARNAME is the name of a compile-time variable and SETID
is the identifier of a GAMS set. The following attributes are
allowed in this context:
Attribute
Description
[First OR
Last]TE
Explanatory text of the first or last
element of the set SETID
[First OR
Last]TL
Label of the first or last element of the
set SETID
[First OR
Last]TN
Set identifier with with element labels of
the first or last element of the set SETID
TS
Explanatory text of the set SETID. This is
also the default, if no attribute is
specified
Note
$eval.Set VARNAME SETID[.[First|Last]TE|[First
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
47/184


$evalGlobal
$evalGlobal.Set
First?? and ?? are synonyms in the table
above. It always accesses the first element
of the referenced set.
Last?? always accesses the last element of
the referenced set.
For Singleton Sets First??, Last?? and
?? are synonyms.
Example:
This will generate the following in the log:
See also $eval, $evalGLobal.Set, $evalLocal.Set, and $set.
Singleton Set h Greeting / Hello          'Welc
Set           p Person   / Mr.President   'Male
                           Mrs.Chancellor 'Fema
$eval.Set X h.TE
$log %X%
$eval.Set X p.lastTL
$log %X%
$eval.Set X p.FirstTN
$log %X%
Welcome
Mrs.Chancellor
p('Mr','President')
Syntax:
This option evaluates a numerical expression at compile time
and places it into a global compile-time variable. The syntax
and behavior otherwise is identical to $eval.
$evalGlobal VARNAME expression
Syntax:
$evalGlobal.Set VARNAME SETID[.[First|Last]TE|
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
48/184


$evalLocal
$evalLocal.Set
$exit
This option evaluates an attribute of a GAMS set at compile
time and places it into a global compile-time variable. The
syntax and behavior otherwise is identical to $eval.Set.
Syntax:
This option evaluates a numerical expression at compile time
and places it into a local compile-time variable. The syntax
and behavior otherwise is identical to $eval.
$evalLocal VARNAME expression
Syntax:
This option evaluates an attribute of a GAMS set at compile
time and places it into a local compile-time variable. The
syntax and behavior otherwise is identical to $eval.Set.
$evalLocal.Set VARNAME SETID[.[First|Last]TE|[F
Syntax:
This option will cause the compiler to exit (stop reading) from
the current file. This is equivalent to having reached the end
of file.
Example:
$exit
Scalar a ; 
a = 5 ;
display a ;
$exit
a = a+5 ; 
display a ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
49/184


$expose
$funcLibIn
$gdxIn
Note that the lines following the option $exit will not be
compiled.
Observe that there is a difference to the dollar control option
$stop. If there is only one input file, $stop and $exit will
have the same effect. If the option $exit occurs within an
include file, it acts like an end-of-file on the include file.
However, if the option $stop occurs within an include file,
GAMS will stop reading all input.
See also $abort, $error, $terminate, and $stop.
Syntax:
This option removes all privacy restrictions from identifiers.
With explicit identifiers the privacy restrictions are removed
only for the listed identifiers and with all the restrictions
are removed for all identifiers. The privacy restrictions may
be set with the dollar control options $hide or $protect. Note
that a special license file is needed for this feature to work
and that the expose only takes effect in subsequent restart
files. For further information, see chapter Secure Work Files.
$expose all | ident1 ident2 ...
Syntax:
This makes extrinsic function libraries available to a model.
InternalLibName is the internal name of the library in the
GAMS code and ExternalLibName is the name of the shared
library in the file system. See Using Function Libraries for
more information.
$FuncLibIn InternalLibName ExternalLibName
Syntax:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
50/184


$gdxLoad
$gdxLoadAll
This option is used in a sequence to load specified items
from a GDX file. Here GDXFileName denotes the name of the
GDX file (with or without the extension .gdx) and the
command opens the specified GDX file for reading. The use of
$gdxIn without a file name closes the currently open GDX
file. The command is used in conjunction with the option
$load or one of its variants.
Example:
See also $load, and $gdxOut.
$gdxIn [GDXFileName]
set i,j; parameters a(i), b(j), d(i,j), f;
$gdxIn mydata.gdx
$load i j a b d f
$gdxIn
Syntax:
This option loads specified symbols from a specified GDX file.
It basically combines $gdxIn and $load in one call. This can
be particularly useful for $[bat|lib]include files when you
want to be sure, to not interfere with potentially previously
opened GDX files. For example, a $load after a "$gdxLoad"
will still load the symbols from the GDX file opened before:
See also $(on|off)Filtered, $(on|off)Multi, and $onMultiR.
$gdxLoad GDXFileName [sym1[,] sym2=gdxSym2[,] s
$gdxIn A.gdx
$load a b c
$gdxLoad B.gdx d 
* The following $load gets the symbols e, f, an
$load e f g
Syntax:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
51/184


$gdxOut
This option loads all symbols known from a specified GDX
file. It is similar to $gdxLoad, but does not need/allow a list
of symbols to be loaded. Instead it compares the list of
previous declared symbols with the symbols in the specied
GDX file and loads all symbols that match. If we have
incompatibilities between symbols in GDX and GAMS (the
incompatibilities are the same as if we would do an explicit
$load sym) CMEX triggers an error. Symbols in GDX that
don't exist in GAMS are just ignored.
Example:
If there is a GDX file trnsport created from the [TRNSPORT]
model, the following code will load the symbols i, j and c.
All other symbols are ignored:
See also $(on|off)Filtered, $(on|off)Multi, and $onMultiR.
$gdxLoadAll GDXFileName
Set       i,j,k;
Parameter c(i,j);
$gdxLoadAll trnsport.gdx
Syntax:
This option is used in a sequence to unload specified items
to a GDX file at compile time. Here GDXFileName denotes the
name of the GDX file (with or without the extension GDX) and
the command opens the specified GDX file for writing. The
use of $gdxOut without a file name closes the currently open
output GDX file and initiates the actual writing of the
sequence of symbols. The command is used in conjunction
with the dollar control option $unLoad.
Example:
$gdxOut [GDXFileName]
set i /i1*i3/; parameters a(i) /i1 3, i2 87, i3
$gdxOut mydata.gdx
$unLoad i a
$gdxOut
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
52/184


$gdxUnload
$goto
See also $unLoad, and $gdxIn.
Syntax:
This option unloads symbols from a specified GDX file. It
basically combines $gdxOut and $unload in one call. This can
be particularly useful for $[bat|lib]include files when you
want to be sure, to not interfere with potentially previously
opened GDX files. For example, a $unload after a
"$gdxUnload" will still unload the symbols to the GDX file
opened before:
$gdxUnload GDXFileName [sym1[,] sym2=gdxSym2[,
$gdxOut A.gdx
$unload a b c
$gdxUnload B.gdx d 
* The following $unload puts the symbols e, f, 
$unload e f g
Syntax:
This option will cause GAMS to search for a line starting with
$label id and then continue reading from there. This
option can be used to skip over or repeat sections of the
input files. In $batinclude files the target labels or label
arguments can be passed as parameters because of the
manner in which parameter substitution occurs in such files.
In order to avoid infinite loops, jumps to the same label are
restricted to a maximum of 100 times by default. This
maximum may be changed with the option $maxGoto.
Example:
$goto id
$label id
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
53/184


$hidden
Note that GAMS will continue from line $label next after
reading line $goto next. Observe that all lines in between
are ignored. Therefore the final value of a in the example
above will be 15.
Attention
The lines $goto and $label have to be in the
same file. If the target label is not found in the
current file an error will be issued.
See also $label, $maxGoto.
Scalar a ; 
a = 5;
display a ;
$goto next
a = a+5 ; 
display a ;
$label next
a = a+10 ; 
display a ;
Syntax:
A line starting with this option will be ignored and will not be
echoed to the listing file. This option is used to enter
information only relevant to the person manipulating the file.
Example:
The lines above serve as comments to the person who wrote
the file. However, these comments will not be visible in the
listing file and are therefore hidden from view.
Note
$hidden text
$hidden You need to edit the following lines if
$hidden
$hidden     1. Change form a to b
$hidden     2. Expand the set
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
54/184


$hiddenCall
$hiddenCall.Async[NC]
$hiddenCall.checkErrorLevel
$hiddenCallTool
This option is particularly useful when the input
file is encrypted.
Syntax:
This option does the same as $call but the statement is
neither shown on the log nor the listing file.
$hiddenCall [=]command
Syntax:
This option does the same as $call.Async[NC] but the
statement is neither shown on the log nor the listing file.
$hiddenCall.Async[NC] command
Syntax:
This option does the same as $call.checkErrorLevel but the
statement is neither shown on the log nor the listing file.
$hiddenCall.checkErrorLevel [=]command
Syntax:
This option does the same as $callTool but the statement is
neither shown on the log nor the listing file.
$hiddenCallTool command
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
55/184


$hiddenCallTool.checkErrorLevel
$hide
$if
$ifE
Syntax:
This option does the same as $callTool.checkErrorLevel but
the statement is neither shown on the log nor the listing file.
$hiddenCallTool.checkErrorLevel command
Syntax:
This option hides identifiers so they cannot be displayed or
computed, but they may still be used in model calculations
(i.e. commands when the solve statement is executed).
With explicit identifiers the listed identifiers are hidden and
with all all identifiers are hidden. These restrictions may be
removed with the dollar control options expose or purge.
Note that a special license file is needed for this feature to
work.
For further information, see chapter Secure Work Files.
$hide all | ident1 ident2 ...
Syntax:
This dollar control option provides the greatest amount of
control over conditional processing of the input file(s).
For more information on the conditional expressions
allowed, details on the new_input_line and examples, see
section Conditional Compilation below.
See also $ifE, $ifI, $ifThen.
$if [not] conditional_expression new_input_line
Syntax:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
56/184


$ifI
$ifThen
This dollar control option does the same as the option $if but
allows constant expression evaluation. The
conditional_expression may take two different forms:
Example:
This will create the following output:
See also $if and section Conditional Compilation.
$ifE [not] conditional_expression new_input_lin
expr1 == expr2      TRUE   if (expr1-expr2)/(1
expr                TRUE   if expr1 <> 0
Scalar a;
$ifE (log2(16)^2)=16           a=0; display a;
$ifE log2(16)^2 == 16          a=1; display a;
$ifE NOT round(log2(16)^2-16)  a=2; display a;
$ifE round(log2(16)^2-16)      a=3; display a;
$ifE round(log2(16)^2-17)      a=4; display a;
----      3 PARAMETER a                    =  
----      4 PARAMETER a                    =  
----      6 PARAMETER a                    =  
Syntax:
This option is working like the option $if. The only difference
is that $if makes comparisons involving text in a case
sensitive fashion while $ifI is case insensitive.
See also $if and section Conditional Compilation.
$ifI [not] conditional_expression new_input_lin
Syntax:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
57/184


This option is a form of the option $if that controls whether a
number of statements are active. The syntax for the
condition is generally the same as for the option $if. Like $if,
it is case sensitive. Often it is followed by one or more of the
following dollar control options: $else, $elseIf, $elseIfI,
$elseIfE. The option $ifThen must be matched with the
option $endIf that marks the end of the construct. An
example is given in section Conditional Compilation with
$ifThen and $else.
Note that users may add a tag to the $ifThen and $endIf. For
example, $ifThen.tagOne has to match with
$endif.tagOne.
Example:
The resulting listing file will contain the following lines:
Note that the first condition (x == y) is obviously not true
and the fourth condition (b == b) is not tested because the
second condition (a == a) was already true.
Also note that the false clause is not interpreted by the
compiler. So the following code would compile without
problems:
$ifThen[E|I] cond
  ...
{ $elseIf[E|I] cond 
  ... }
[ $else
  ... ]
$endIf
$ifThen.one x == y
display "it1";
$elseIf.one a == a
display "it2";
$ifThen.two c == c
display "it3";
$endIf.two
$elseIf.one b == b
display "it4";
$endIf.one
----      2 it2
----      4 it3
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
58/184


$ifThenE
$ifThenI
$include
See also $if, $ifThenE, $ifThenI, $else, $elseIF and section
Conditional Compilation.
$ifThen x == y
$the
$compiler
doesn't
complain
$endIf
Syntax:
This option does the same as the option $ifThen but
evaluates numerical values of the control variables.
See also $ifThen and section Conditional Compilation.
$ifThen[E|I] cond
  ...
{ $elseIf[E|I] cond 
  ... }
[ $else
  ... ]
$endIf
Syntax:
This option does the same as the option $ifThen but it is case
insensitive.
See also $ifThen and section Conditional Compilation.
$ifThen[E|I] cond
  ...
{ $elseIf[E|I] cond 
  ... }
[ $else
  ... ]
$endIf
Syntax:
$include external_file
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
59/184


This option inserts the contents of a specified text file at the
location of the call. Note that text files that have been
compressed with Posix utility gzip or have been encrypted
with tool ENDECRYPT are also allowed. External_file is the
name of the file that is included. It can be quoted or
unquoted. Note that include files may be nested.
The include file names are processed in the same way like
the input file. The names are expanded using the working
directory. If the file cannot be found and no extension is
given, the standard GAMS input extension is tried. However, if
an incomplete path is given, the file name is completed using
the include directory. By default, the library include directory
is set to the working directory. The default directory search
path may be extended with the command line parameter
InputDir.
Note that the start of the include file is marked and the
include file is echoed to the echo print in the listing file. This
reference to the include file may be omitted by using the
option $offInclude.
Example:
Both statements above are equivalent and the search order
for the include file is as follows:
1. myfile in current working directory
2. myfile.gms in current working directory
3. myfile and myfile.gms (in that order) in directories
specified by the command line parameter InputDir.
Attention
The current settings of the dollar control options
are passed on to the lower level include files.
However, the dollar control options set in the
lower level include file are passed on to the
parent file only if the option $onGlobal is set.
Note that details on the compilation output of include files
are given in section The Include File Summary.
See also $batInclude, $libInclude, $sysInclude.
$include myfile
$include "myfile"
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
60/184


$inlineCom ( 
)
Syntax:
This option redefines and activates the in-line comment
symbols. These symbols are placed at the beginning and the
end of the in-line comment and are one character or a two
character sequence at the beginning and the end. By default,
the system is initialized to ' 
' and ' 
', but is not active.
The option $onInline is used to activate the in-line
comments. If $inlineCom is used, $onInline is set
automatically.
Example:
Note that the character pairs {{ }} serve as the indicator for
in-line comments.
Attention
It is not allowed to reset the option $inlineCom
to the current symbol for in-line comments. This
would cause an compilation error as in the
following example:
Note
The option $onNestCom enables the use of
nested comments.
The default for dealing with inline comments can be set using
the command line parameter inlineCom.
See also section Comments.
$inlineCom char[char] char[char]
$inlineCom {{ }}
Set {{ this is an inline comment }} i / 1*2 / 
$inlinecom {{  }}
$inlinecom {{  }}
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
61/184


$kill
$label
Syntax:
This option removes all data for the identifiers ident, only
the type and dimension are retained (this means that these
identifiers will be declared but not defined anymore). Note
that only the data of the following data types may be
removed: sets, parameters, variables and equations. Note
further that the data removal is carried out during compile
time and not when the GAMS program executes.
Example:
Note that the effect of the third line above is that all data
from a and i is removed, so the set i and the scalar a are
declared, but not initialized or assigned to. Note that after i
and a have been killed, a display statement for them will
trigger an error. However, new data may be assigned to
identifiers that were previously killed. Thus the following
statements are valid if appended to the code above:
Observe that this option needs to be distinguished from the
dollar control option $clear, that resets the data to the
default values.
$kill ident {ident}
Set i / 1*20 /; 
Scalar a /2/;
$kill i a
Set i / i1 *i3 /;
a = 7;
Syntax:
$goto id
$label id
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
62/184


$libInclude
This option marks a line to be jumped to by a dollar control
option $goto. Any number of labels may be used in files and
not all of them need to be referenced. Re-declaration of a
label identifier will not generate an error and only the first
occurrence encountered by the GAMS compiler will be used
for future $goto references.
Example:
When GAMS reaches the line $goto next, it continues from
the line $label next. All lines in between are ignored.
Therefore in the example above, the final value of a is 15.
Attention
If several dollar control options appear in one
line and label is one of them, then label must
be listed first.
See also $goto, $maxGoto.
Scalar a ; 
a = 5 ;
display a ;
$goto next
a = a+5 ; 
display a ;
$label next
a = a+10 ; 
display a ;
Syntax:
This option is mostly equivalent to the option $batInclude.
However, if an incomplete path is given, the file name is
completed using the library include directory. By default, the
library include directory is set to the directory inclib in the
GAMS standard locations. Note that the list of default
directories searched may be prepended with the command
line parameter libIncDir.
Example:
$libInclude external_file {arg}
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
63/184


$lines
$load
This call will first look for the include file inclib/abc in the
standard locations. If this file does not exist there GAMS will
look for the file inclib/abc.gms in the standard locations.
The arguments x and y are passed on to the include file and
are interpreted as explained in the detailed description of
the option $batInclude.
See also $include, $batInclude, $sysInclude.
$libInclude abc x y
Syntax:
This option starts a new page in the listing file if less than n
lines are available on the current page.
Example:
This will ensure that if there are less than five lines available
on the current page in the listing file before the next
statement (in this case, the table statement) is echoed to it,
the contents of this statement are echoed to a new page.
$lines n
$hidden Never split the first few lines of the 
$lines 5
Table io(i,j) Transaction matrix
...
;
Syntax:
This option is preceded and succeeded by the option $gdxIn
that open the GDX file for reading. The option $load loads
specified items from the GDX file. Note that more than one
instance of $load may occur. A listing of the GDX file
$load [sym1[,] sym2=gdxSym2[,] sym3<[=]gdxSym3
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
64/184


contents will be created if the option $load is not followed
by arguments.
Examples
Consider the following example, where transsol is the GDX
file of the transportation model [TRNSPORT]
A comma between the symbols is optional. The follow
example works identically:
The $load without any arguments produces a table of
contents of the GDX container in the listing file:
Symbols may be loaded with new names with the following
syntax: $load i=gdx_i j=j_gdx. The universal set may be
loaded using $load uni=*.
$gdxIn transsol
$load
Sets i, j; Parameters a(i), b(j), d(i,j), f;
$load i j a b d f
$gdxIn
$gdxIn transsol
$load
Sets i, j; Parameters a(i), b(j), d(i,j), f;
$load i, j, a, b, d, f
$gdxIn
Content of GDX C:\Users\default\Documents\gams
               5 UELs
    Number Type       Dim       Count  Name
         1 Set          1           2  i      
         2 Set          1           3  j      
         3 Parameter    1           2  a(i)   
         4 Parameter    1           3  b(j)   
         5 Parameter    2           6  d(i,j) 
         6 Parameter    0           1  f      
         7 Parameter    2           6  c(i,j) 
         8 Variable     2           6  x(i,j) 
         9 Variable     0           1  z      
        10 Equation     0           1  cost   
        11 Equation     1           2  supply(
        12 Equation     1           3  demand(
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
65/184


This results in a display of all used labels:
The syntax sym<[=]GDXSym[.dimI] allows to load a one
dimensional set from a symbol in the GDX file that has even a
higher dimensionality. GAMS tries to find the set sym as a
domain in the symbol GDXSym and uses the labels from this
index position (with < the first domain set from the right and
with <= from the left). If no domain information is stored in
the GDX file or the domain information does not match the
suffix .dimI allows to pick a fixed index position.
In the following we work with a GDX file created by the
following code:
Now use use this GDX file to load the first and second index
from ii:
the display lists all labels from the first index of ii:
Now we match from the right and get the second index of ii:
$gdxIn transsol
Sets i, jj, uni; Parameters a(i), bb(jj), d(i,j
$load i jj=j uni=* a bb=b d f
$gdxIn
display uni;
----      5 SET uni 
Seattle  ,    San-Diego,    New-York ,    Chic
set i / i1*i3 /, ii(i,i) / i1.i2, i2.i3 /;
execute_unloadDI 'ii', i, ii;
set i, i1;
$gdxIn ii
* Load first index from ii as i
$load i<=ii i1<ii.dim1
display i, i1;
----      5 SET i  Domain loaded from ii posit
i1,    i2
----      5 SET i1  Domain loaded from ii posi
i1,    i2
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
66/184


The resulting listing file will contain the following lines:
This type of projection loading can be useful to extract the
domain sets from a single parameter that is stored in a GDX
file:
Attention
Loading an item that was already initialized will
cause a compilation error.
For example, the following code snippet will cause a
compilation error:
Note that GAMS offers variants of $load that do not cause a
compilation error in such a case: $loadM and $loadR.
Note
One can load the level values of a variable into a
parameter of the same dimension using the
syntax parametername=var.l as follows
set i, i2;
$gdxIn ii
* Load second index from ii as i
$load i<ii i2<ii.dim2
display i, i2;
----      5 SET i  Domain loaded from ii posit
i2,    i3
----      5 SET i2  Domain loaded from ii posi
i2,    i3
set i,j,k; parameter data(i,j,k);
$gdxIn data
$load i<data.dim1 j<data.dim2 k<data.dim3 data
Set j / 1*5 /;
$gdxIn transsol
$load j
$gdxIn 
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
67/184


$loadDC
Loading the level values for a variable into the
same variable (x=x.l) works but loads everything
including bounds, scales, marginals and levels.
parameter storexlevel(i,j);
$gdxin trnsport
$load storexlevel=x.l
$gdxin
display storexlevel;
Syntax:
This option is an alternative form of $load. It performs
domain checking when items are loaded. Any domain
violations will be reported and flagged as compilation errors.
This is basically the opposite of $loadFiltered. All other
features are the same as discussed under $load .
Example: Consider the following example where transsol is
the GDX file of the transportation model [TRNSPORT].
Note that in contrast to the example above, the parameter a
is indexed over the set i and the parameter b is indexed over
the set j in the file transsol. While $load i b does not
generate an error and b is just empty, the option
$loadDC j a triggers a domain violation error because in
transsol a is indexed over i and produces a list of errors in
the listing file:
$loadDC [sym1[,] sym2=gdxSym2[,] sym3<[=]gdxSym
Set i, j;
Parameter b(i), a(j);
$gdxIn transsol
$load i b
$loadDC j a
$gdxIn
--- LOAD  a = 3:a
**** Unique domain errors for symbol a
 Dim  Elements
   1  seattle, san-diego
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
68/184


$loadDCM
$loadDCR
   5  $loadDC j a
****            $649
Syntax:
This option combines the functionality of merging as in
$loadM and domain checking as in $loadDC.
Example:
Consider the following example where transsol is the GDX
file of the transportation model [TRNSPORT].
Here we try to merge parameters a and b together into one
parameter. The first attempt (to merge it into parameter
abFail) would fail because of line 5 and result into a domain
violation report as described with dollar control option
$loadDC. In the second attempt we first merge the sets i and
j into set uni and then merge the parameters a and b into
ab. If one comments line 5 the resulting display looks as
follows:
$loadDCM [sym1[,] sym2=gdxSym2[,] sym3<[=]gdxSy
Set i, uni 'all labels';
Parameter abFail(i), ab(uni) 'capacity and dema
$gdxIn transsol
$load i abFail=a
$loadDCM abFail=b
$loadDCM uni=i uni=j ab=a ab=b
$gdxIn
display uni, ab;
----      8 SET uni  all labels
seattle  ,    san-diego,    new-york ,    chic
----      8 PARAMETER ab  capacity and demand
seattle   350.000,    san-diego 600.000,    ne
chicago   300.000,    topeka    275.000
Syntax:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
69/184


$loadFiltered
This option combines the functionality of replacing data as in
$loadR and domain checking as in $loadDC.
Example:
Consider the following example where transsol is the GDX
file of the transportation model [TRNSPORT].
Here we try to read twice into the parameter ab. First GDX
symbol a and b are read into ab. GDX symbol b is read with
replace and hence the parameter ab contains the elements of
b only.
$loadDCR [sym1[,] sym2=gdxSym2[,] sym3<[=]gdxSy
Set uni 'all labels';
Parameter ab(uni) 'capacity and demand';
$gdxIn transsol
$loadM uni=i uni=j ab=a
$loadDCR ab=b
$gdxIn
display uni, ab;
Syntax:
This option is an alternative form of $load, in particular, it
works like $load while $onFiltered is set. That means, when
items are loaded, domain violations are not flagged as
compilation errors, but items violating the domain definition
are just filtered out. This is basically the opposite of $loadDC.
All other features are the same as discussed under $load .
Example: Consider the following example where transsol is
the GDX file of the transportation model [TRNSPORT].
$loadFiltered [sym1[,] sym2=gdxSym2[,] sym3<[=
Set i / seattle /
    j / new-york, chicago /;
Parameter a(i), b(j);
$gdxIn transsol
$loadFiltered a
$loadDC       b
$gdxIn
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
70/184


$loadFilteredM
While $loadFiltered a does not generate an error, but just
ignores the data that does not match the defined domain,
$loadDC b triggers a domain violation error.
See also $loadFilteredM and $loadFilteredR.
Syntax:
This option combines the functionality of merging as in
$loadM and domain filtering as in $loadFilterd.
Example:
Consider the following example where transsol is the GDX
file of the transportation model [TRNSPORT].
Here we try to merge parameters a and b together into one
parameter. The first attempt (to merge it into parameter
abFilter) does not add anything, since the elements in b do
not match the defined domain i (compare $loadFilterd). In
the second attempt we first merge the sets i and j into set
uni and then merge the parameters a and b into ab. The
Display statement produces the following output:
$loadFilteredM [sym1[,] sym2=gdxSym2[,] sym3<[=
Set i, uni 'all labels';
Parameter abFilter(i), ab(uni) 'capacity and de
$gdxIn transsol
$load          i abFilter=a
$loadFilteredM abFilter=b
$loadFilteredM uni=i uni=j ab=a ab=b
$gdxIn
Display uni, ab, abFilter;
----     31 SET uni  all labels
seattle  ,    san-diego,    new-york ,    chic
----     31 PARAMETER ab  capacity and demand
seattle   350.000,    san-diego 600.000,    ne
----     31 PARAMETER abFilter  capacity of pl
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
71/184


$loadFilteredR
$loadIdx
seattle   350.000,    san-diego 600.000
Syntax:
This option combines the functionality of replacing data as in
$loadR and domain filtering as in $loadFilterd.
Example:
Consider the following example where transsol is the GDX
file of the transportation model [TRNSPORT].
Here we try to read twice into the parameter ab. First GDX
symbol a and b are read into ab. GDX symbol b is read with
replace and hence the parameter ab contains the elements of
b only:
$loadFilteredR [sym1[,] sym2=gdxSym2[,] sym3<[=
Set       uni     'all labels';
Parameter ab(uni) 'capacity and demand';
$gdxIn transsol
$loadFilteredM uni=i uni=j ab=a
$loadFilteredR ab=b
$gdxIn
Display uni, ab;
----     31 SET uni  all labels
seattle  ,    san-diego,    new-york ,    chic
----     31 PARAMETER ab  capacity and demand
new-york 325.000,    chicago  300.000,    tope
Syntax:
$loadIdx [sym1[,] sym2=gdxSym2[,] ...]
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
72/184


$loadM
$loadR
This option is an alternative form of $load. Each symbol in
the GDX file to read must be a parameter and should have
been written using an indexed write; see also
execute_unloadidx.
See Example 3 - Reading a GDX File and [ldidx01] on how to
use $loadidx.
Syntax:
This option is an alternative form of $load. Instead of
replacing an item or causing a symbol redefined error if the
item was already initialized it merges the contents. Records
that would result in domain violations will be ignored.
Example:
Consider the following example where transsol is the GDX
file of the transportation model [TRNSPORT].
Here we merge parameters a and b together into one
parameter ab. We first merge the sets i and j into set uni
and then merge the parameters a and b into ab. The resulting
display looks as follows:
$loadM [sym1[,] sym2=gdxSym2[,] sym3<[=]gdxSym3
Set i, uni 'all labels';
Parameter ab(uni) 'capacity and demand';
$gdxIn transsol
$loadM uni=i uni=j ab=a ab=b
$gdxIn
display uni, ab;
----      6 SET uni  all labels
seattle  ,    san-diego,    new-york ,    chic
----      6 PARAMETER ab  capacity and demand
seattle   350.000,    san-diego 600.000,    ne
chicago   300.000,    topeka    275.000
Syntax:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
73/184


$log
This option is a variant of the option $load. With $loadR we
can have multiple loads into the same symbols and the data
stored in GAMS will be replaced with the one from the GDX
container.
Example:
Consider the following example, where transsol is the GDX
file of the transportation model [TRNSPORT]:
The resulting listing file will contain the following lines:
$loadR [sym1[,] sym2=gdxSym2[,] sym3<[=]gdxSym3
Sets i  / 1*3 /
     j  / 1*2 /;
$gdxIn transsol
$loadR i j
$gdxIn
display i, j;
----      6 SET i  canning plants
Seattle  ,    San-Diego
----      6 SET j  markets
New-York,    Chicago ,    Topeka
Syntax:
This option will send a message text to the log file. Recall
that by default, the log file is the console. The default log file
may be reset with the command line parameters logOption
and logFile.
Attention
Leading blanks are ignored when the text is
written out to the log file as a result of
using the $log option.
All special % symbols will be substituted
before the text passed through the $log
$log text
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
74/184


$macro
$maxCol    (80001)
option is sent to the log file.
Example:
The log file that results by running the lines above will
contain the following lines:
Note that %system.incLine% is replaced by 5 which is the
line number where the string replacement was requested.
Note further that %system.incName% is substituted with the
name of the file completed with the absolute path. Observe
that the leading blanks on the second line of the example are
ignored.
$log
$log       The following message will be writte
$log  with leading blanks ignored. All special 
$log  be substituted before this text is sent t
$log  This was line %system.incLine% of file %s
$log
The following message will be written to the l
with leading blanks ignored. All special % sym
be substituted before this text is sent to the
This was line 5 of file C:\tmp\logTest.gms
Syntax:
This option defines a macro in GAMS. Here name is the name
of the macro, arg1,arg2,arg3,... are the arguments and
macro_body defines what the macro should do. The macro
names follow the rules for identifiers. The macro name
cannot be used for other symbols. For further details and
examples, see section Macros in GAMS below.
$macro name(arg1,arg2,arg3, ...) macro_body
Syntax:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
75/184


$maxGoto 100
This option restricts the valid range of input columns at the
right margin. Note that all input after column n is treated as
comment, therefore it is ignored.
Example:
Observe that the text strings set definition and
scalar definition are treated as comments and are
ignored since they begin on or after column 31.
Any changes in the margins via $maxCol or $minCol will be
reported in the listing file with the message that gives the
valid range of input columns. For example, the dollar control
option $minCol 20 maxCol 110 will trigger the following
message:
Note
GAMS requires that the right margin set by
$maxCol is greater than 15.
GAMS requires that the right margin set by
$maxCol is greater than the left margin set
by $minCol.
See also $on/offMargin and section Comments.
$maxCol n
$maxCol 30
Set    i  / vienna, rome /;   set definition
Scalar a  / 2.3          /;   scalar definition
NEW MARGINS: 20-110
Syntax:
This option sets the maximum number of jumps to the same
label and is used in the context of the options $goTo and
$maxGoTo n
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
76/184


$minCol    (1)
$label. Once the maximum number is reached a compilation
error is triggered. Such a limit has been implemented to
avoid infinite loops at compile time.
Example:
Note that a compilation error is triggered if $goTo label1 is
called for the fifth time.
Scalar a / 1 /;
$maxGoTo 5
$label label1
a = a+10;
display a ;
$goTo label1
Syntax:
This option restricts the valid range of input columns at the
left margin. Note that all input before column n is treated as
comment, therefore it is ignored.
Example:
Observe that the text strings set definition and
scalar definition are treated as comments and are
ignored since they are placed before column 30.
Any changes in the margins via the option $maxCol or
$minCol will be reported in the listing file with the message
that gives the valid range of input columns. For example, the
dollar control option $minCol 20 maxCol 110 will trigger
the message:
Attention
$minCol n
$minCol 30
Set definition               Set    i / vienna
Scalar definition            Scalar a / 2.3    
NEW MARGINS: 20-110
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
77/184


$(on|off)CheckErrorLevel ($offCheckErrorLevel)
$(on|off)Delim    ($offDelim)
GAMS requires that the left margin set by the
option $minCol is smaller than the right margin
set by the option $maxCol.
See also $on/offMargin and section Comments.
Syntax:
If the option $onCheckErrorLevel is active, the errorLevel
is checked implicitly after $call, $hiddenCall, $callTool and
$hiddenCallTool. A compilation error is triggered and the
compilation is aborted if it is not 0. With
$offCheckErrorLevel, this is not done, but one can do it
explicitly. So, with $onCheckErrorLevel $call behaves like
$call.checkErrorLevel, $hiddenCall behaves like
$hiddenCall.checkErrorLevel, $callTool behaves like
$callTool.checkErrorLevel and $hiddenCallTool behaves like
$hiddenCallTool.checkErrorLevel.
The default for dealing with error levels can be set using the
command line parameter checkErrorLevel.
$onCheckErrorLevel
$offCheckErrorLevel
Syntax:
This option controls whether data in table statements may
be entered in delimited format. As delimiter one can use ".",
",", or "TAB".
Example:
$onDelim
$offDelim
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
78/184


$(on|off)Digit    ($onDigit)
The resulting listing file will contain the following output:
Sets  plant  'plant locations' / NEWYORK, CHICA
      market 'demands'         / MIAMI, HOUSTON
Table dist(plant,market)
$onDelim
,MIAMI,HOUSTON,PORTLAND
NEWYORK,1300,1800,1100
CHICAGO,2200,1300,700
LOSANGELES,3700,2400,2500
$offDelim
;
Display dist;
----     12 PARAMETER dist
               MIAMI     HOUSTON    PORTLAND
NEWYORK     1300.000    1800.000    1100.000
CHICAGO     2200.000    1300.000     700.000
LOSANGELES  3700.000    2400.000    2500.000
Syntax:
Historically, GAMS has run on widely different platforms
where even the floating-point arithmetic varied. To ensure
the precision specified in the GAMS input didn't exceed what
could be stored and computed with as GAMS ran, we limited
the precision (i.e. the number of significant digits used for
numbers) that could be specified in the GAMS source. This
limit could be relaxed by using the $offDigit control.
Modern computers all support IEEE double-precision
arithmetic, and GAMS uses this internally. It's a well-accepted
and familiar standard, and the current behavior - to convert
the decimal value in the GAMS source into the nearest
double-precision value, regardless of the number of digits in
the GAMS source - is what is generally expected. There is a
limit (currently 40) on the number of digits treated as
potentially significant: digits beyond this point are quietly
treated as zero.
$onDigit
$offDigit
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
79/184


$(on|off)Dollar    ($offDollar)
The $offDigit control remains useful for changing how
GAMS handles numbers with very large or small magnitude.
With $onDigit, GAMS throws compiler warnings/errors for
these values. With $offDigit, GAMS quietly converts them
to UNDF or EPS, respectively.
Example:
The resulting listing file will contain the following lines:
The default for dealing with digits can be set using the
command line parameter digit.
scalar aboveTheLimit / 222e299 /;
scalar tiny / 1.0e-275 /;
scalar tinier / 1.0e-285 /;
$offdigit
scalar uberTheLimit / 222e299 /;
scalar klein   / 1.0e-275 /;
scalar kleiner / 1.0e-285 /;
   1  scalar aboveTheLimit / 222e299 /;
****                               $106
   2  scalar tiny / 1.0e-275 /;
****                       $595
   3  scalar tinier / 1.0e-285 /;
****                         $594
   5  scalar uberTheLimit / 222e299 /;
   6  scalar klein   / 1.0e-275 /;
   7  scalar kleiner / 1.0e-285 /;
Error Messages
106  abs(number) out of range
        abs(number) must be less than 1E300
        $offdigit can be used to replace large
594  Exponent very very small - rejected
       $offdigit can be used to replace with E
595  Exponent very small
       $offdigit can be used to quietly accept
Syntax:
This option controls the echoing of dollar control option
lines in the listing file.
$onDollar
$offDollar
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
80/184


$(on|off)DotL ($offDotL)
Example:
The compilation output of the resulting listing file will
contain the following lines:
Note that all lines between the option $onDollar and the
option $offDollar are echoed in the listing file. Note
further that the effect of this option is immediate: the line
$onDollar is echoed in the listing file, while the line
$offDollar is not.
$hidden This line will not be displayed
$onDollar
$hidden This line will be displayed
$offDollar
$hidden This line will not be displayed
2  $onDollar
3  $hidden This line will be displayed
Syntax:
This option activates or deactivates the automatic addition
of the attribute .L to variables on the right-hand side of
assignments and in put statement. It is most useful in the
context of macros. For further information, see section
Macros in GAMS below.
Example:
Consider the following code snippet which can be added to
the end if the [TRNSPORT] model:
$onDotL
$offDotL
$onDotL
file fx; put fx;
loop((i,j),
   put / x(i,j)
);
$offDotL
file fx; put fx;
loop((i,j),
   put / x(i,j)
);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
81/184


$(on|off)DotScale ($offDotScale)
$(on|off)Echo[S|V][.tag]
This is the generated output:
First, we see the level for each x record. After setting
$offDotL we are back at the default which means, that the
.tn attribute is used implicitly.
       50.00
      300.00
        0.00
      275.00
        0.00
      275.00
x('seattle','new-york')
x('seattle','chicago')
x('seattle','topeka')
x('san-diego','new-york')
x('san-diego','chicago')
x('san-diego','topeka')
Syntax:
This option activates or deactivates the automatic addition
of the attribute .Scale to variables and equations on the
right-hand side of assignments and in put statements. As
with on|offDotL It is most useful in the context of macros. For
further information, see section Macros in GAMS below.
$onDotScale
$offDotScale
Syntax:
This option is used to send one or more lines of text to an
file external_file. The text and the file name may be
$onEcho[S|V][.tag]  >[>] external_file
text
{text}
$offEcho[.tag]
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
82/184


quoted or unquoted. The external file is not closed until the
end of the compilation or when the option $call or any
variant of the option $include is encountered. Note that the
redirection symbols > and >> have the usual meaning: >
creates a new file and writes to it or - in case there exists
already a file with the respective name - overwrites the
existing file and >> appends to a file. Note further that
parameter substitutions are permitted with $onEcho. The
option $onEcho has two more variants: $onEchoS and
$onEchoV. $onEchoS allows parameter substitutions like
$onEcho, so it is just a synonym which makes it more
obvious that parameter substitution is allowed with the
appended S. The option $onEchoV does not allow parameter
substitutions but writes the text verbatim.
Example:
The externalfile1.txt will contain the following lines:
The externalfile2.txt will contain these lines:
Observe that in the first case %it% is substituted with TEST,
but in the second case there is no substitution.
Note that by default the external file will be placed in the
current working directory if there is no path specified.
One may add a tag to the $onEcho[S|V] and $offEcho.
This allows to use nested echo blocks like this:
$set it TEST
$onEchoS  > externalfile1.txt
send %it% to external file
line 2 to send
$offEcho
$onEchoV  > externalfile2.txt
send %it% to external file
line 2 to send
$offEcho
send TEST to external file
line 2 to send
send %it% to external file
line 2 to send
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
83/184


$(on|off)ECImplicitLoad    ($onECImplicitLoad)
$(on|off)Embedded    ($offEmbedded)
The resulting file outerFile.gms looks like this:
See also options $echo, and $echoN.
$onEcho.outer > outerFile.gms
$onEcho.inner > innerFile.txt
Line 1 of text
Line 2 of text
$offEcho.inner
$offEcho.outer
$onEcho.inner > innerFile.txt
Line 1 of text
Line 2 of text
$offEcho.inner
Syntax:
This option enables or disables the implicit loading of
symbols set in embedded code sections, which are not
loaded explicitly with $offEmbeddedCode.
Example:
This will result in a compilation error, since i is set in the
embedded code block (by gams.set("i", i)), but not
loaded with $offEmbeddedCode. If $onECImplicitLoad
would be active, $offEmbeddedCode would be treated like
$offEmbeddedCode i here.
See also ECImplicitLoad.
$onECImplicitLoad
$offECImplicitLoad
Set i(*);
$offECImplicitLoad
$onEmbeddedCode Python:
i = ['a','b']
print(i)
gams.set("i", i)
$offEmbeddedCode
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
84/184


$(on|off)EmbeddedCode[S|V][.tag]
Syntax:
This option enables or disables the use of embedded values
in parameter and set data statements. If enabled, the
explanatory text for set elements is concatenated with blank
separators. For parameters, the embedded values get
multiplied.
Example:
Note that the explanatory text of the set elements in i and j
as well as the values of the parameters m and n are identical.
$onEmbedded
$offEmbedded
Set k / a,b /
    l / a   /;
Set       i(k,l) / a.a 'aaaa cccc dddd'
                   b.a 'bbbb cccc dddd' /;
Parameter m(k,l) / a.a 12
                   b.a 24 /;
$onEmbedded
Set       j(k,l) / (a aaaa, b bbbb).(a cccc) dd
Parameter n(k,l) / (a 1,    b 2)   .(a 3)    4 
Syntax:
This option is used to execute one or more lines of
embedded code (e.g. Python code) while GAMS stays alive.
The embedded code has access to GAMS symbols and can
read and change them.
Note that parameter substitutions are permitted with
$onEmbeddedCode. The option $onEmbeddedCode has two
more variants: $onEmbeddedCodeS and $onEmbeddedCodeV.
$onEmbeddedCodeS allows parameter substitutions like
$onEmbeddedCode, so it is just a synonym which makes it
more obvious that parameter substitution is allowed with the
$onEmbeddedCode[S|V][.tag] Connect|Python: [arg
Embedded code
{Embedded code}
$offEmbeddedCode[.tag] {symbol[<[=]embSymbol[.d
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
85/184


appended S. The option $onEmbeddedCodeV does not allow
parameter substitutions but passes the code verbatim to the
embedded code engine. The optional arguments given to
$onEmbeddedCode[S|V] can be accessed in the Python
code.
$offEmbeddedCode can be followed by a GAMS symbol or a
list of GAMS symbols. If GAMS symbols are specified they get
updated in the GAMS database after the embedded code got
executed. The syntax symbol<[=]embSymbol[.dimX] allows
to load a one dimensional set from a symbol which was set in
the embedded code that has even a higher dimensionality
(here we call <[=] the projection operator). GAMS tries
to find the set symbol as a domain in the symbol embSymbol
and uses the labels from this index position (with < the first
domain set from the right and with <= from the left). If no
domain information is stored in the GDX file or the domain
information does not match the suffix .dimX allows to pick a
fixed index position (X needs to be replaced by the desired
index position).
One may add a tag to the $onEmbeddedCode[S|V] and
$offEmbeddedCode. For example,
$onEmbeddedCode.tagOne would match with
$offEmbeddedCode.tagOne.
Example:
The data definition of the sets country and city happen
while loading the set mccCountry and mccCity implicitly
because of the implicit set definition in declarations of
Set cc      / "France - Paris", "France - Lille
              "Spain - Madrid", "Spain - Cordob
              "USA - Washington DC", "USA - Hou
              "Germany - Berlin", "Germany - Mu
    country 
    city
    mccCountry(cc,country<)  Mapping between co
    mccCity(cc,city<)        Mapping between ci
$onEmbeddedCode Python:
mccCountry = []
mccCity = []
for cc in gams.get("cc"):
  r = str.split(cc, " - ", 1)
  mccCountry.append((cc,r[0]))
  mccCity.append((cc,r[1]))
gams.set("mccCountry",mccCountry)
gams.set("mccCity",mccCity)
$offEmbeddedCode mccCountry mccCity
Option mccCountry:0:0:1, mccCity:0:0:1;
Display country, city, mccCountry, mccCity;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
86/184


mccCountry and mccCity. Also note, that the list of output
symbols does not need to be explicitly specified (for most
embedded code engines). Performing the actual write in the
embedded code (here via gams.set) is sufficient to signal
GAMS to load the symbols. Providing an explicit list of
symbols can be required (for embedded code engines
without implicit loading) and be advantageous for code
readability even for embedded code engines that support
this. With the dollar control option $offECImplicitLoad
providing an explicit list of output symbols can be enforced
and setting symbols inside the embedded code not in the
explicit list will lead to compilation errors.
The program above will result in the following listing file:
----     25 SET country
Spain  ,    USA    ,    Germany,    France 
----     25 SET city
Berlin       ,    Bilbao       ,    Cordoba   
New York     ,    Washington DC,    Paris     
Munich       ,    Lille        ,    Seville   
Toulouse
----     25 SET mccCountry
France - Paris     .France 
France - Lille     .France 
France - Toulouse  .France 
Spain - Madrid     .Spain
Spain - Cordoba    .Spain
Spain - Seville    .Spain
Spain - Bilbao     .Spain
USA - Washington DC.USA
USA - Houston      .USA
USA - New York     .USA
Germany - Berlin   .Germany
Germany - Munich   .Germany
Germany - Bonn     .Germany
----     25 SET mccCity
France - Paris     .Paris
France - Lille     .Lille
France - Toulouse  .Toulouse
Spain - Madrid     .Madrid
Spain - Cordoba    .Cordoba
Spain - Seville    .Seville
Spain - Bilbao     .Bilbao
USA - Washington DC.Washington DC
USA - Houston      .Houston
USA - New York     .New York
Germany - Berlin   .Berlin
Germany - Munich   .Munich
Germany - Bonn     .Bonn
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
87/184


$(on|off)Empty    ($onEmpty)
Using the projection operator on the
$offEmbeddedCode line the same task could be done like
this:
Please note that due to implicit output symbol loading, see
$offECImplicitLoad, the symbols mccCountry and mccCity
are not only used to define country and city but are also
loaded into GAMS because the embedded code uses
gams.set to write to these symbols.
See also chapter Embedded Code Facility for more details.
Set cc      / "France - Paris", "France - Lille
              "Spain - Madrid", "Spain - Cordob
              "USA - Washington DC", "USA - Hou
              "Germany - Berlin", "Germany - Mu
    country 
    city
    mccCountry(cc,country)  Mapping between cou
    mccCity(cc,city)        Mapping between cit
$onEmbeddedCode Python:
mccCountry = []
mccCity = []
for cc in gams.get("cc"):
  r = str.split(cc, " - ", 1)
  mccCountry.append((cc,r[0]))
  mccCity.append((cc,r[1]))
gams.set("mccCountry",mccCountry)
gams.set("mccCity",mccCity)
$offEmbeddedCode country<mccCountry city<mccCit
Option mccCountry:0:0:1, mccCity:0:0:1;
Display country, city, mccCountry, mccCity;
Syntax:
$onEmpty allows empty data statements for list or table
formats (default). When setting $offEmpty, empty data
statements will cause a compilation error.
Example:
$onEmpty
$offEmpty
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
88/184


The resulting listing file will contain the following lines:
Empty data statements are most likely to occur when data is
being entered into the GAMS model by an external program.
Note
The empty data statement may only be used with
symbols which have a known dimension. If the
dimension is also derived from the data, the
option $phantom should be used to generate
'phantom' set elements.
The option $onEmpty in conjunction with the option
$onMulti and the save and restart feature may be used to set
up a model and add data later.
The default for dealing with empty data statements can be
set using the command line parameter empty.
Set       i    / 1,2,3 / ;
Set       j(i) /       / ;
Parameter x(i)   "empty parameter" /  / ;
Table     y(i,i) "headers only"
     1   2   3
;
$offEmpty
*offEmpty from here on
Set       k(i) /  / ;
Parameter xx(i)   "empty parameter" /  / ;
Table     yy(i,i) "headers only"
     1   2   3
;
   1  Set       i    / 1,2,3 / ;
   2  Set       j(i) /       / ;
   3  Parameter x(i)   "empty parameter" /  / 
   4  Table     y(i,i) "headers only"
   5       1   2   3
   6  ;
   8  *offEmpty from here on
   9  Set       k(i) /  / ;
****                    $460
**** 460  Empty data statements not allowed. Y
  10  Parameter xx(i)   "empty parameter" /  /
****                                         $
**** 460  Empty data statements not allowed. Y
  11  Table     yy(i,i) "headers only"
  12       1   2   3
  13  ;
****  $462
**** 462  The row section in the previous tabl
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
89/184


$(on|off)End    ($offEnd)
Syntax:
This option offers an alternative syntax for flow control
statements. The option $onEnd causes the following words to
be regarded as keywords: do, endLoop, endIf, endFor and
endWhile. They are used to close the language constructs
loop, if, for and while respectively.
Example:
Note
The standard syntax is given as an end-of-line
comment.
Observe that the alternative syntax is more in line with the
syntax used in some of the popular programming languages.
Attention
$onEnd
$offEnd
Set       i    / 1*3 /;
Scalar    cond / 0 /;
Parameter a(i) / 1 1.23, 2 2.65, 3 1.34/;
$eolCom //
$onEnd
loop i do                                // loo
  display a;                             //   d
endLoop;                                 // );
if (cond) then                           // if 
  display a;                             //   d
else                                     // els
  a(i) = a(i)/2;                         //   a
  display a;                             //   d
endIf;                                   // );
for cond = 1 to 5 do                     // fo
  a(i) = 2 * a(i);                       //   a
endFor;                                  // );
while cond > 3 do                        // whi
  a(i) = a(i) / 2;                       //   a
  cond = cond-1;                         //   c
endWhile;                                // );
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
90/184


$(on|off)EolCom ($offEolCom)
$(on|off)Eps    ($offEps)
Setting the option $onEnd will make the
alternative syntax valid, and at the same time it
will make the standard syntax invalid. Therefore
the two forms of the syntax will never be valid
simultaneously.
Syntax:
This option acts as a switch to control the use of end-of-line
comments. Note that by default, the end-of-line comment
symbol is set to !! but the processing is disabled.
Example:
Observe that after the option $onEolCom has been specified,
comments may be entered on the same line as GAMS code.
Note
The option $eolCom automatically sets
$onEolCom.
The default for dealing with end-of-line comments can be set
using the command line parameter eolCom.
See also section Comments.
$onEolCom
$offEolCom
$onEolCom
Set       i    /1*2/ ;  !! set declaration
Parameter a(i)       ;  !! parameter declaratio
Syntax:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
91/184


This option is used to interpret zero values as EPS when non-
scalar parameters, variable attributes, or equation attributes
are defined or loaded (e.g. from GDX or embedded code ) at
compile time. This can for example be useful if the value of
zero is overloaded with existence interpolation.
See option zeroToEps for the execution-time equivalent.
Example 1:
Consider the following example where zero values are
defined for a one dimensional parameter, once under $onEps
and $offEps.
The outcome generated by the display statement follows:
Note that only those entries specifically entered as 0 are
treated as EPS.
Example 2:
Consider the following example where zero values are loaded
from a GDX file, once under $offEps (default) and $onEps
(derived from test library model [ZEROTOEPS1] ).
$onEps
$offEps
Set       i    / one, two, three, four /;
Parameter a(i) /
$onEps
      one     0
$offEps
      two     0
      three   EPS   /;
Display a ;
----      8 PARAMETER a
one   EPS,    three EPS
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
92/184


The outcome generated by the display statement follows:
Example 3:
Consider the following example where zero values are loaded
from embedded Python code, once under $offEps (default)
and $onEps (derived from test library model [ZEROTOEPS1] ).
The outcome generated by the display statement follows:
Set s,t;
Parameter p(s<,t<)
          pOnEps(s,t);
$gdxIn zeropar.gdx
$onText
P looks like this:
   t1        t2        t3
s1 0         0.843267  
s2 0.224053  0.349831  0
s3           0         5
$offText
$load p
$onEps
$load pOnEps=p
display p, pOnEps;
----     15 PARAMETER p  
            t1          t2          t3
s1                   0.843
s2       0.224       0.350
s3                               5.000
----     15 PARAMETER pOnEps  
            t1          t2          t3
s1         EPS       0.843
s2       0.224       0.350         EPS
s3                     EPS       5.000
Set s / s1*s3 /;
Parameter pEC(s)
          pECOnEps(s);
$onEmbeddedCode Python:
p = [('s1',1), ('s3',0)]
gams.set('pEC',p)
$offEmbeddedCode pEC
$onEps
$onEmbeddedCode Python:
p = [('s1',1), ('s3',0)]
gams.set('pECOnEps',p)
$offEmbeddedCode pECOnEps
display pEC, pECOnEps;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
93/184


$(on|off)EpsToZero    ($offEpsToZero)
$(on|off)Expand ($offExpand)
----     14 PARAMETER pEC  
s1 1.000
----     14 PARAMETER pECOnEps  
s1 1.000,    s3   EPS
Syntax:
This option is used to write EPS values as zero when
parameters, or variable and equation levels get written to
GDX at compile time.
See option EpsToZero for the execution-time equivalent.
Example:
Usually GAMS squeezes out 0 values when writing to GDX. To
get them written anyway, one can define them as EPS (e.g. by
using $onEps) and set $onEpsToZero:
$onEpsToZero
$offEpsToZero
Set       i    / zero, one, two /;
$onEps
Parameter a(i) / zero    0
                 one     1
                 two     2  /;
$onEpsToZero
$gdxUnload 'zero.gdx' a
Syntax:
This option changes the processing of macros that appear in
the arguments of a macro call. The default operation is not to
$onExpand
$offExpand
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
94/184


$(on|off)ExternalInput ($offExternalInput)
expand macros in the arguments. The switch $onExpand
enables the recognition and expansion of macros in the
macro argument list and $offExpand will restore the default
behavior.
Example:
The macro expansion of the code above will result in an
equation definition that reads as follows:
If we compile the code under $onExpand the argument f(i)
is expanded before the macro equ() gets expanding
resulting in the following (incorrect) code:
For further information, see section Macros in GAMS below.
variable x(*,*);
$macro  f(i)   sum(q, x(i,q))
$macro equ(x)  equation equ_&x; equ_&x.. &x =e=
equ(f(i))
equation equ_f(I); equ_f(i).. f(i) =e= 0;
equation equ_sum(q, x(i,q)); equ_sum(q, x(i,q)
Syntax:
$onExternalInput and $offExternalInput mark the
beginning and end of a well defined section in which data is
loaded implicitly from an external data source, namely from a
GDX file specified by the command line parameter
IDCGDXInput.
Note
If none of the command line parameters
IDCGDXInput, IDCGenerateGDXInput,
$onExternalInput
$offExternalInput
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
95/184


IDCJSON, IDCGenerateJSON, or
IDCGenerateGDX is set, nothing - but a few
checks for consistency - will happen by
setting $onExternalInput and
$offExternalInput.
If at least one of the before mentioned
command line parameters is set, an
additional license check will be triggered:
Without the MIRO Connector License
not more than 10 indexed symbols can be
declared as external input or external
output.
For symbols, which are declared, while $onExternalInput
is active, data in data statements of the declaration is
ignored. Instead, the data is loaded from the GDX file
specified by IDCGDXInput. Also for those symbols, if they are
referenced with $load* or $offEmbeddedCode while
$onExternalInput is active, the data is loaded from the
GDX file specified by IDCGDXInput instead of the defined data
source and symbol renaming as well as the projection
operator are ignored in this case.
In addition, the following dollar control options are ignored,
while $onExternalInput is active and IDCGDXInput is set:
$batInclude
$call
$call.Async[NC]
$call.checkErrorLevel
$callTool
$callTool.checkErrorLevel
$gdxIn
$hiddenCall
$hiddenCall.Async[NC]
$hiddenCall.checkErrorLevel
$hiddenCallTool
$hiddenCallTool.checkErrorLevel
$include
$libInclude
$onEmbeddedCode[S|V] (including the following
embedded code until $offEmbeddedCode is hit)
$sysInclude
Example:
Lets look at a modified version of the simple example
presented here:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
96/184


Without setting a command line parameter, this runs in the
same way as described in the other chapter, so by default,
setting $onExternalInput and $offExternalInput does
not make much of a difference. Now, lets run it with
IDCGDXInput being set to transsol, which is a GDX file
generated by running the transportation model [TRNSPORT].
There will be some new messages in the log:
First, we notice, that the file transsol.gdx will be opened
for input. This happens implicitly with $onExternalInput.
Then, both the $call as well as the $include lines were
ignored, since we do not want to query the data source
explicitly defined in the model, but the GDX file defined by
IDCGDXInput. Note, that the data statement in the declaration
of d is actually empty when we ignore the $include
statement. While $onExternalInput this does not lead to
an error, but behaves as if $onEmpty was set. Looking at the
output of the display statement in the lst file, one can see
that the expected data was loaded:
If any of the options IDCGDXInput, IDCGDXOutput, IDCJSON or
their Generate versions, e.g. IDCGenerateGDXInput, has been
set, a MIRO connector license is required.
See also $(on|off)ExternalOutput.
Set
   i 'canning plants'
   j 'markets';
 
$onExternalInput
$call mdb2gms I=Sample.accdb Q="SELECT city1, c
Parameter d(i<,j<) 'distance in thousands of mi
$include distances.inc
/;
$offExternalInput
display d;
--- GDXin=transsol.gdx
--- Distances1.gms(7) 2 Mb
--- Ignoring $call in externalInput section
--- Distances1.gms(9) 2 Mb
--- Ignoring $include in externalInput section
----     13 PARAMETER d  distance in thousands
             new-york     chicago      topeka
seattle         2.500       1.700       1.800
san-diego       2.500       1.800       1.400
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
97/184


$(on|off)ExternalOutput ($offExternalOutput)
Syntax:
$onExternalOutput and $offExternalOutput mark the
beginning and end of a well defined section in which data is
written implicitly to an external data file, namely to a GDX file
specified by the command line parameter IDCGDXOutput or
IDCGenerateGDXOutput.
Note
If none of the command line parameters
IDCGDXOutput, IDCGenerateGDXOutput,
IDCJSON, IDCGenerateJSON, or
IDCGenerateGDX is set, nothing - but a few
checks for consistency - will happen by
setting $onExternalOutput and
$offExternalOutput.
If at least one of the before mentioned
command line parameters is set, an
additional license check will be triggered:
Without the MIRO Connector License
not more than 10 indexed symbols can be
declared as external output or external
input.
Example:
This is a slightly modified code snippet of the transportation
model [TRNSPORT]:
$onExternalOutput
$offExternalOutput
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
98/184


$(on|off)Filtered    ($onFiltered)
Without setting a command line parameter, this runs in the
same way as the original model, so by default, setting
$onExternalOutput and $offExternalOutput does not
make much of a difference. Now, lets run it with
IDCGDXOutput being set to transOut.gdx. This generate the
file transOut.gdx with the following content:
So, this implicit generation of the output file is basically
equivalent to the following explicit statement:
If any of the options IDCGDXInput, IDCGDXOutput, IDCJSON or
their Generate versions, e.g. IDCGenerateGDXInput, has been
set, a MIRO connector license is required.
See also $(on|off)ExternalInput.
...
$onExternalOutput
Parameter c(i,j) 'transport cost in thousands o
c(i,j) = f*d(i,j)/1000;
Variable
   x(i,j) 'shipment quantities in cases'
$offExternalOutput
   z      'total transportation costs in thousa
Positive Variable x;
Equation
$onExternalOutput
   cost      'define objective function'
$offExternalOutput
   supply(i) 'observe supply limit at plant i'
   demand(j) 'satisfy demand at market j';
...
execute_unload 'transOut.gdx', c, x, cost;
Syntax:
$onFiltered
$offFiltered
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
99/184


$(on|off)Global    ($offGlobal)
This dollar control option controls how GAMS loads data from
GDX with gdxLoad, $load, $loadR, and $loadM. With
$onFiltered the $load* calls behave like $loadFiltered*
calls. With $offFiltered the $load* calls behave like
$loadDC* calls. This dollar control option also controls how
GAMS loads symbols on the $offEmbeddedCode line. With
$onFiltered data is read filtered while $offFiltered
triggers a domain check of the data. The gams.set Python
function allows to overwrite the setting of this dollar control
option with the argument
domCheck=DomainCheckType.CHECKED or
domCheck=DomainCheckType.FILTERED.
The default of how GAMS loads data from GDX can be set with
the command line parameter filtered.
Syntax:
When an include file is inserted, it inherits the dollar control
options from the higher level file. However, the dollar control
option settings specified in the include file do not affect the
higher level file. This convention is common among most
scripting languages or command processing shells. In some
cases, it may be desirable to break this convention. This
option allows an include file to change the options of the
parent file as well.
Example:
The file inc.inc contains the following lines:
$onGlobal
$offGlobal
$include 'inc.inc'
$hidden after first call to include file
$onGlobal
$include 'inc.inc'
$hidden after second call to include file
$onDollar
$hidden text inside include file
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
100/184


$(on|off)IDCProtect    ($onIDCProtect)
$(on|off)ImplicitAssign    ($offImplicitAssign)
The the echo print of the resulting listing file follows:
Note that the dollar control option $onDollar inside the
include file does not affect the parent file until $onGlobal is
set. The text following the option $hidden is then echoed to
the listing file.
INCLUDE    D:\GAMS\INC.INC
    2  $onDollar
    3  $hidden text inside include file
INCLUDE    D:\GAMS\INC.INC
    7  $onDollar
    8  $hidden text inside include file
    9  $hidden after second call to include fi
Syntax:
This controls if symbols which are declared as external input
can be changed at execution time. With $onIDCProtect
external input symbols are protected from being changed;
$offIDCProtect allows it.
The initial state of this can be set with the command line
parameter IDCProtect.
$onIDCProtect
$offIDCProtect
Syntax:
This controls if the compiler issues or ignores the 141 error in
case an unassigned symbol in the code is referenced (e.g. on
the right hand side of an assignment statement). With
$onImplicitAssign the error is ignored.
The initial state of this can be set with the command line
parameter ImplicitAssign.
$onImplicitAssign
$offImplicitAssign
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
101/184


$(on|off)Include    ($onInclude)
$(on|off)Inline    ($offInline)
Syntax:
This option controls the listing of the expanded include file
name in the listing file.
Example:
We assume that the file inc.inc contains the following lines:
The resulting listing file will contain the following lines:
Note that the include file name is echoed the first time the
include file is used. However, the include file name is not
echoed after $offInclude has been set. Also, the include
file summary and the creation of an Expanded Include File is
suppressed if $offInclude is set.
$onInclude
$offInclude
$include 'inc.inc'
$offInclude
$include 'inc.inc'
$onDollar
$hidden Text inside include file
INCLUDE    C:\tmp\inc.inc
   2  $onDollar
   3  $hidden Text inside include file
   6  $onDollar
   7  $hidden Text inside include file
Syntax:
$onInline
$offInline
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
102/184


$(on|off)Listing    ($onListing)
This option acts as switch to control the use of in-line
comments. Note that by default, the in-line comment
symbols are set to the two character pairs 
 and 
 but the
processing is disabled. In-line comments may span several
lines till the end-of-comment characters are encountered.
Example:
Note
The option $inlineCom automatically sets
$onInline.
Nested in-line comments are illegal unless
the option $onNestCom is set.
The default for dealing with inline comments can be set using
the command line parameter inlineCom.
See also section Comments.
$onInline
Set i /* The default comment symbols are now
         active. These comments can continue
         to additional lines till the closing
         comments are found.  */ / i1*i3 / ;
Syntax:
This option controls the echoing of input lines to the
compilation output of the listing file. Note that suppressed
input lines do not generate entries in the symbol and
reference sections that appear at the end of the compilation
output. Lines with errors will always be listed.
Example:
$onListing
$offListing
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
103/184


$(on|off)Local ($onLocal)
The resulting listing file will contain the following lines:
Note that the lines in the source file between the options
$offListing and $onListing are not echoed to the listing
file.
Note
For some projects the listing file can become
huge and can take significant time to be written.
This time can be saved by setting $offListing
at the beginning of the input file and
$onListing just before the parts one is
interested in, or not at all, if one does not look at
the listing file anyway.
The default for dealing with the compilation output of the
listing file can be set using the command line parameter
listing.
Set i /0234*0237/
    j /a,b,c/     ;
Table x(i,j) "very long table"
        a   b   c
 0234   1   2   3
$offListing
 0235   4   5   6
 0236   5   6   7
$onListing
 0237   1   1   1
;
    1  Set i /0234*0237/
    2      j /a,b,c/     ;
    3  Table x(i,j) very long table
    4          a   b   c
    5   0234   1   2   3
   10   0237   1   1   1
Syntax:
The suffix .local attached to the name of a controlling set
will use an implicit alias within the scope of the indexed
$onLocal
$offLocal
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
104/184


operation or on the left-hand side of an assignment
statement. This feature is particularly useful in the context of
nested macros.
Example:
Note that in the assignment statement the set i on the right-
hand side is controlled by i.local on the left-hand side.
Thus we have the following values for the two parameters:
In the example above, the suffix .local appeared one time
on the left-hand side. The option $onLocal allows the suffix
.local to appear more that one time attached to the same
symbol. Consider the following example that extends the
example above:
Note that in the assignment statement of g the suffix .local
attached to the set i appears two times on the left-hand
side. The question arises whether the reference to the set i
on the right-hand side refers to the first or the second
instance of .local on the left-hand side. The assignment
statement may alternatively be written in the following way
using an explicit alias statement:
Set i /1*3/; alias(i,j);
Parameter xxx(i,j) / 1.1 1, 2.2 2, 3.3 3, 1.3 1
display xxx;
Parameter p(i);
p(i.local) = sum(j, xxx(i,j)); 
display p;
----      3 PARAMETER xxx
            1           2           3
1       1.000                  13.000
2                   2.000
3      31.000                   3.000
----      7 PARAMETER p
1 14.000,    2  2.000,    3 34.000
Parameter g(i,i);
g(i.local-1,i.local) = xxx(i,i);
display g;
alias (i,i1,i2);
g(i1-1,i2) = xxx(i2,i2); 
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
105/184


$(on|off)Log    ($onLog)
Thus is becomes clear that the symbol on the right-hand side
refers to the controlling index that enters last (here the
second one). The output generated by the display statement
follows:
Observe that the multiple use of the suffix .local on the
same symbol is considered an error with the option
$offLocal.
Note that it is also allowed to combine the original index
with an index suffixed with .local. Consider the following
alternative formulation:
Note that in this case the index suffixed with .local takes
precedence and the reference of i on the right-hand side
refers to the index i.local even though i is entered last.
Observe that this statement even works with $offLocal as
the suffix .local appears only once.
See also section Macros in GAMS below.
----      10 PARAMETER g
            1           2           3
1       1.000       2.000       3.000
2       1.000       2.000       3.000
g(i.local-1,i) = xxx(i,i); 
Syntax:
This option acts as a switch that controls logging information
about the line number and memory consumption during
compilation. This is scoped like the option $on/offListing
applying only to included files and any subsequent included
files but reverting to the setting $onLog in the parent files (if
it was not changed there as well).
Example:
$onLog
$offLog
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
106/184


$(on|off)Macro ($onMacro)
$(on|off)Margin    ($offMargin)
The file inc.inc looks like this:
The generated log will contain the following lines:
Note that the first line of both the parent and the include file
got logged, but not the third line of the include file, after
$offLog was set. The last line of the parent file got logged
again.
Set i /i1*i20000000/;
$include inc.inc
Set l /l1*l20000000/;
Set j /j1*j20000000/;
$offLog
Set k /k1*k20000000/;
--- test.gms(1) 1602 Mb  5 secs
--- test.gms(2) 1602 Mb
--- .inc.inc(1) 3122 Mb  6 secs
--- test.gms(3) 6161 Mb  14 secs
Syntax:
Enables or disables the expansion of macros defined by
$macro.
Example:
causes an error because the macro oneoverit in line 3 can
not be expanded.
$onMacro
$offMacro
$macro oneoverit(y) 1/y
$offMacro
y = oneoverit(x1);
display y;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
107/184


$(on|off)Multi ($offMulti)
Syntax:
This option controls margin marking, that means if margins
set by the options $minCol and $maxCol, should be marked
in the lst file.
Example:
The lst file will contain this:
Note that any statements between columns 1 and 19 and any
input beyond column 52 are treated as comments. These
margins are marked with | on the left and right.
See also section Comments.
$onMargin
$offMargin
$onmargin mincol 20 maxcol 51
Now we have        Set       i "plant" / US, UK
turned on the      Scalar    x         / 3.145 
margin marking.    Parameter a, b;             
                                               
$offmargin
   2 Now we have        |Set       i "plant" /
   3 turned on the      |Scalar    x         /
   4 margin marking.    |Parameter a, b;      
   5                    |                     
Syntax:
This option controls multiple data statements or tables. By
default, GAMS does not allow data statements to be
redefined. If this option is activated the second or
subsequent data statements are merged with entries of the
previous ones. Note that all multiple data statements are
performed before any other statement is executed.
$onMulti
$offMulti
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
108/184


Note
There is also $onMultiR, which behaves
similarly, but replaces existing data instead
of merging into it. Compare the example
here and there to see the difference.
When $onMulti is active $load behaves
like a $loadM.
The initial state of this dollar control
option can be set through the command
line parameter multi.
Example:
Consider the following slice of code. The list after the end of
line comment describes the complete content of the symbol
x after the data statement has been processed:
Note that the repeated parameter statements would have
resulted in a compilation error without the presence of the
option $onMulti. The result of the display statement in the
listing file follows:
Note that x("i1") is assigned the value of 1 with the first
data and is not affected by any of the subsequent data
statements. x("i3") on the other hand is reset to 3 by the
third data statement and wiped out with 0 in the fourth data
statement.
Attention
The two-pass processing of a GAMS file may lead
to seemingly unexpected results. Dollar control
options and data initialization are both done in
$eolCom //
Set i / i1*i10 /;
Parameter x(i) / i1*i3  1 /   // /i1 1,i2 1,i3 
$onMulti
Parameter x(i) / i7*i9  2 /   // /i1 1,i2 1,i3 
Parameter x(i) / i2*i6  3 /   // /i1 1,i2 3,i3 
Parameter x(i) / i3*i5  0 /   // /i1 1,i2 3,i6 
$offMulti
display x;
----      8 PARAMETER x
1 1.000,    2 3.000,    6 3.000,    7 2.000,  
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
109/184


$onMultiR|offMulti ($offMulti)
the first pass and assignments in the second,
irrespective of their relative locations. This is an
issue particularly with the option $onMulti since
it allows data initializations to be performed
more than once. See section GAMS Compile Time
and Execution Time Phase for details.
Consider the following example:
Note that the two scalar data initialization statements and
the option $onMulti are processed before the assignment
statement a=a+1. As a result, the final value of a will be 21.
The output of the display statement follows:
Observe that the option $onEmpty in conjunction with the
option $onMulti and the save and restart feature may be
used to set up a model and add data later. See example in
section Advanced Separation of Model and Data for details.
Scalar a /12/;
a=a+1;
$onMulti
Scalar a /20/;
display a;
----      5 PARAMETER a                   =   
Syntax:
This option controls multiple data statements or tables. By
default, GAMS does not allow data statements to be
redefined. If this option is activated the second or
subsequent data statements replace the previous ones. Note
that all multiple data statements are performed before any
other statement is executed.
Note
$onMultiR
$offMulti
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
110/184


There is also $onMulti, which behaves
similarly, but merges into existing data
instead of replacing it. Compare the
example here and there to see the
difference.
In contrast to $onMulti, $onMultiR also
allows to redefine an equation and a
macro.
The initial state of this dollar control
option can be set through the command
line parameter multi.
Example:
Consider the following slice of code. The list after the end of
line comment describes the complete content of the symbol
x after the data statement has been processed:
Note that the repeated parameter statements would have
resulted in a compilation error without the presence of the
option $onMultiR. The result of the display statement in the
listing file follows:
Note
When using a redefinition with $onMulitR
to remove elements from a set, which was
used as domain of another symbol, also
the dependent symbol gets reduced. This
can happen through data statements, but
also with $clear and $load/$loadDC.
When $onMultiR is active $load behaves
like a $loadR with the exception of the
$eolCom //
Set i / i1*i10 /;
Parameter x(i) / i1*i3  1 /   // /i1 1,i2 1,i3 
$onMultiR
Parameter x(i) / i7*i9  2 /   // /i7 2,i8 2,i9 
Parameter x(i) / i2*i6  3 /   // /i2 3,i3 3,i4 
Parameter x(i) / i3*i5  0 /   // ( ALL       0
$offMulti
display x;
----      9 PARAMETER x
( ALL       0.000 )
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
111/184


previous note. So, the only way to allow for
a redefiniton of a domain set is to activate
$onMultiR. If that is not active $loadR for
a domain set would trigger an error.
Example:
Looking at the output from the Display statement one can
see, that the entries for i1 and i2 were removed by the
second definition of i:
Attention
The two-pass processing of a GAMS file may lead
to seemingly unexpected results. Dollar control
options and data initialization are both done in
the first pass and assignments in the second,
irrespective of their relative locations. This is an
issue particularly with the option $onMultiR
since it allows data initializations to be
performed more than once. See section GAMS
Compile Time and Execution Time Phase for
details.
Consider the following example:
Note that the two scalar data initialization statements and
the option $onMultiR are processed before the assignment
Set i          / i1*i5 /;
Parameter p(i) / #i 3  /;
$onMultiR
Set i          / i3*i6 /;
Display p;
----      7 PARAMETER p
i3 3.000,    i4 3.000,    i5 3.000
Scalar a /12/;
a=a+1;
$onMultiR
Scalar a /20/;
display a;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
112/184


$(on|off)NestCom    ($offNestCom)
$(on|off)Order ($onOrder)
statement a=a+1. As a result, the final value of a will be 21.
The output of the display statement follows:
Observe that the option $onEmpty in conjunction with the
option $onMultiR and the save and restart feature may be
used to set up a model and add data later. See example in
section Advanced Separation of Model and Data for details.
----      5 PARAMETER a                   =   
Syntax:
This option controls nested in-line comments. It makes sure
that the open-comment and close-comment characters
match.
Example:
See also $inlineCom, $onInline and section Comments.
$onNestCom
$offNestCom
$inlineCom { } onNestCom
  { nesting is now possible in comments { brace
    have to match } }
Syntax:
Lag and lead operations and the ord operator require the
referenced set to be ordered and constant. In some special
cases users might want to use those operations on dynamic
and/or unordered sets. The option $on/offOrder has been
added to locally relax the default requirements. The use of
$onOrder
$offOrder
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
113/184


$(on|off)Put[S|V][.tag]
this option comes with a price, the system will not be able to
diagnose odd and incorrect formulations and data sets.
Example:
Without the $offOrder the compilation of the line
p(t2) = ord(t2); would have triggered a compilation
error. The ordinal numbers assigned here are probably not
what one expects. The element 1987 gets ordinal number 1
although it seems to be last last in the set. The ordinal
numbers are assigned in the order the set is stored internally
in GAMS. This order is also used when displaying the set t2:
Set       t1    / 1987, 1988, 1989, 1990, 1991 
          t2    / 1983, 1984, 1985, 1986, 1987 
Parameter p(t2);
$offOrder
p(t2) = ord(t2);
display t2,p;
----      6 SET t2
1987,    1983,    1984,    1985,    1986
----      6 PARAMETER p
1987 1.000,    1983 2.000,    1984 3.000,    1
Syntax:
The pair $onPut[S|V] - $offPut causes a block of text to
be placed in a put file at run-time. The is one of the few
dollar control options that operate at run time. The $ in the
first column usually indicates action at compile time.
Note that parameter substitutions are not permitted with
$onPut. The option $onPut has two more variants: $onPutS
and $onPutV. $onPutS allows parameter substitutions while
the option $onPutV does not allow parameter substitutions,
File myputfile;
put myputfile;
$onPut[S|V][.tag]
text
{text}
$offPut[.tag]
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
114/184


like $onPut, so it is just a synonym which makes it more
obvious that the text is written verbatim with the appended V
.
Example:
This code generates the put file myputfile.put with the
following content:
Note that the compile-time variable %it% was replaced by
TEST. However, if the option $onPutV is used instead, then
%it% will not be substituted:
The resulting file myputfile.put will contain the following
lines:
One may add a tag to the $onPut[S|V] and $offPut. This
allows to use nested put blocks like this:
$set it TEST
File myputfile;
put myputfile;
$onPutS
Line 1 of text "%it%"
Line 2 of text %it%
$offPut
Line 1 of text "TEST"
Line 2 of text TEST
$set it TEST
File myputfile
put myputfile
$onPutV
Line 1 of text "%it%"
Line 2 of text %it%
$offPut
Line 1 of text "%it%"
Line 2 of text %it%
File myputfile / outer.gms /;
put myputfile;
$onPut.outer
File myputfile;
put myputfile;
$onPut.inner
Line 1 of text
Line 2 of text
$offPut.inner
$offPut.outer
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
115/184


$(on|off)Upper ($offUpper)
The resulting file outer.gms looks like this:
File myputfile;
put myputfile;
$onPut.inner
Line 1 of text
Line 2 of text
$offPut.inner
Syntax:
GAMS code echoed to the listing file is written in upper case
after $onUpper. The default of mixed code echoing is
restored with $offUpper.
Note
The default case of the echo print can be set
using the command line option case.
Example:
The generated listing file looks like this:
$onUpper
$offUpper
Set
   i 'Canning plants' / seattle,  san-diego /
   j 'Markets'        / new-york, chicago, tope
$onupper
Parameter
   a(i) 'Capacity of plant i in cases'
        / seattle    350
          san-diego  600 /
$offupper
   b(j) 'Demand at market j in cases'
        / new-york   325
          chicago    300
          topeka     275 /;
   1  Set
   2     i 'Canning plants' / seattle,  san-di
   3     j 'Markets'        / new-york, chicag
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
116/184


$(on|off)Recurse ($offRecurse)
   4
   6  PARAMETER
   7     A(I) 'CAPACITY OF PLANT I IN CASES'
   8          / SEATTLE    350
   9            SAN-DIEGO  600 /
  10
  12     b(j) 'Demand at market j in cases'
  13          / new-york   325
  14            chicago    300
  15            topeka     275 /;
Syntax:
This option controls whether it is permitted for a file to
include itself.
Example:
The following GAMS program result in a recursive inclusion of
the program itself:
Note that the maximum include nesting level is 40 and if it is
exceeded an error is triggered.
In the following example that prints a string and then the
reverse string the nesting level is less that 40 and one get
some kind of recursion at compile time:
$onRecurse
$offRecurse
$onRecurse
$include "%gams.input%"
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
117/184


$(on|off)StrictSingleton ($onStrictSingleton)
The log will print the following lines:
$onEchoV > reverse.gms
$ifthene %1=%3+1
  put ' '
$ exit
$endif
loop(map(chars,code)$(code.val=ord("%2",%1)), p
$eval posPlus1 %1+1
$batInclude reverse %posPlus1% %2 %3
loop(map(chars,code)$(code.val=ord("%2",%1)), p
$offEcho
set chars / A*Z /, code / 65*90 /, map(chars,co
file fx /''/; put fx;
$onRecurse
$batInclude reverse 1 RACECAR 7
put /;
$batInclude reverse 1 LAGER 5
--- Starting execution: elapsed 0:00:00.067
RACECAR RACECAR
LAGER REGAL
*** Status: Normal completion
Syntax:
If the option $onStrictSingleton is active, a compilation
error is triggered if a data statement for a singleton set
contains more than one element. After activating the option
$offStrictSingleton GAMS will take the first element of a
singleton set that was declared with multiple elements as the
valid element, the other elements are disregarded and there
is no error. The option to change the initial state of
$(on|off)StrictSingleton and/or to control this
behavior at runtime is strictSingleton.
Example:
The first element is not always the one that appears in the
data statement first as the following example shows:
$onStrictSingleton
$offStrictSingleton
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
118/184


$(on|off)SuffixDLVars    ($offSuffixDLVars)
The set ii contains the element 1 because it is the first in
the GAMS label order as the display statements shows:
set i /1,2/
$offStrictSingleton
singleton set ii(i) /2,1/;
display ii;
----      4 SET ii
1
Syntax:
This option controls if it is allowed to use suffixes on
variables with limited domains in a model. By default this is
not allowed but this can be changed by setting
$onSuffixDLVars.
Example:
This causes the following error by default:
The purpose is to make the user aware of the fact, the she
uses x.l, which would also be affected by the domain
restriction of x(sub) in the model statement. So, if the user
made sure, that this is all intended, setting
$onSuffixDLVars
$offSuffixDLVars
Set n        / n1*n100 /
    t        / t1*t10  /
    sub(n,t) / #n:#t   /;
Variable z, x(n,t);
Equation obj;
x.up(n,t) = uniformInt(7,13);
obj.. z =e= sum((n,t),x(n,t)/x.up(n,t));
Model m / all, x(sub) /;
Solve m min z use lp;
*** Problem in Model Generation: Variable "x" 
*** Error at line 12: Cannot use domain limite
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
119/184


$(on|off)SuffixAlgebraVars    ($onSuffixAlgebraVars)
$onSuffixDLVars before the solve statements overcomes
this error. Though, with the example given here, this would
actually lead to a "division by zero" error, since some x.up
were excluded leaving a 0 as divisor.
The default for dealing with suffixes on variables with limited
domains can be set using the command line parameter
SuffixDLVars.
Syntax:
This option controls if it is allowed to use suffixes in
equations. By default this is allowed but it can be changed by
setting $offSuffixAlgebraVars. Activating
$offSuffixAlgebraVars can be useful to ensure, that no
decision variable in a model was replaced by one of its
attributes, for example if one is dealing with a model written
by someone else.
Example:
This runs, but might give a different solution than expected.
Activating $offSuffixAlgebraVars will point to a potential
problem:
See also related command line parameter SuffixAlgebraVars.
$onSuffixAlgebraVars
$offSuffixAlgebraVars
Variable x / l 0 /, z / l 0 /;
Equation e;
e.. z =e= sqr(1-x.l);
Model m /e/;
solve m min z use nlp;
   5  e.. z =e= sqr(1-x.l);
****                     $917
**** 917  Cannot use variable with suffix in m
****         Use $onSuffixAlgebraVars to allow
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
120/184


$(on|off)SymList    ($offSymList)
Syntax:
This option controls whether the symbol listing map appears
in the compilation output of the listing file. The symbol
listing map contains the complete listing of all symbols that
have been defined and their explanatory text. The entries are
in alphabetical order and grouped by symbol type.
Example:
The symbol listing map generated by running [TRNSPORT]
with $onSymList is as follows:
$onSymList
$offSymList
Symbol Listing
SETS
i             canning plants
j             markets
PARAMETERS
a             capacity of plant i in cases
b             demand at market j in cases
c             transport cost in thousands of d
d             distance in thousands of miles
f             freight in dollars per case per 
VARIABLES 
x             shipment quantities in cases
z             total transportation costs in th
EQUATIONS 
cost          define objective function
demand        satisfy demand at market j
supply        observe supply limit at plant i
MODELS
transport
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
121/184


$(on|off)SymXRef    ($offSymXRef)
This serves as a simple description of the symbols used in a
model and may be used in reports and other documentation.
For further information, see section The Symbol Listing Map.
Syntax:
This option controls the following:
Collection of cross references for symbols like sets,
parameters, variables, acronyms, equations, models
and put files.
Symbol cross reference report of all collected symbols
in the compilation output of the listing file. For details,
see section The Symbol Reference Map.
Listing of all referenced symbols and their explanatory
text by symbol type in listing file. This listing may also
be activated with the option $onSymList.
Example:
The resulting listing file will contain the following symbol
reference map and symbol listing map:
Note that the set j does not appear in these listings because
the listing was deactivated with the option $offSymXRef in
$onSymXRef
$offSymXRef
$onSymXRef
Set i / 1*6 /, k;
$offSymXRef
Set j(i) "will not show" / 1*3 /;
$onSymXRef
k('1') = yes;
SYMBOL      TYPE   REFERENCES
i            SET   declared        2  defined 
k            SET   declared        2 assigned 
SETS
i
k
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
122/184


$(on|off)Text
$(on|off)Troll ($offTroll)
line 3 of the code above.
Syntax:
The pair $onText - $offText encloses comment lines. Line
numbers in the compiler listing are suppressed to mark
skipped lines.
Example:
The echo print of the resulting listing file will contain the
following lines:
Attention
GAMS requires that every $onText has a
matching $offText and vice versa.
See also section Comments.
$onText
$offText
* Standard comment line
$onText
Everything here is a comment
until we encounter the closing $offText
like the one below
$offText
* Another standard comment line
    1  * Standard comment line
       Everything here is a comment
       until we encounter the closing $offText
       like the one below
    7  * Another standard comment line
Syntax:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
123/184


$(on|off)UElList ($offUElList)
This option controls whether to recognize Troll periodicity in
set definitions using sequences (id*id). Leap years are taken
into account. Supported formats are yyyyA (annual), yyyyQq
(quartely), yyyyMmm (monthly) and yyyyWww (weekly).
Example:
The resulting listing file will contain the following output:
$onTroll
$offTroll
$onTroll
Set
  trollw / 1990w49*1991w4 /
  trollm / 1990m10*1991m5 /
  trollq / 1990q1*1991q4 /
;
Display trollw, trollm, trollq;
----     25 SET trollw  
1990W49,    1990W50,    1990W51,    1990W52,  
----     25 SET trollm  
1990M10,    1990M11,    1990M12,    1991M1 ,  
----     25 SET trollq  
1990Q1,    1990Q2,    1990Q3,    1990Q4,    19
Syntax:
This option controls the complete listing of all set elements
that have been entered in the compilation output of the
listing file. For details see section The Unique Element Listing
Map.
$onUElList
$offUElList
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
124/184


$(on|off)UElXRef ($offUElXRef)
Example:
The unique element listing in the listing file generated by
running the model [TRNSPORT] with $onUElList follows:
Note that the sorted order is not the same as the entry order.
For more information, see section Ordered and Unordered
Sets.
Unique Element Listing
Unique Elements in Entry Order
1  seattle     san-diego   new-york    chicago
Unique Elements in Sorted Order
1  chicago     new-york    san-diego   seattle
Syntax:
This option controls the collection and listing of cross
references of set elements in the compilation output. For
more information, see section The Unique Element Listing
Map.
Example:
The resulting listing file will contain the following unique
element reference report:
$onUElXRef
$offUElXRef
Set i "set declaration" / one, two, three /, k
$onUElXRef
k('one') = yes;
$offUElXRef
k('two') = yes;
$onUElXRef
k('three') = yes;
Unique Element Listing
ELEMENT   REFERENCES
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
125/184


$(on|off)UNDF    ($offUNDF)
$(on|off)Uni    ($offUni)
Note that the element two does not appear in this listing
because the listing was deactivated with the option
$offUElXRef in line 4 of the code above.
one          index        3
three        index        7
Syntax:
This option controls the use of the special value UNDF which
indicates a result is undefined. For details see section
Extended Range Arithmetic. By default, UNDF is not permitted
to be used in assignments. This may be changed with the
option $onUNDF.
Example:
The output of the display statement follows:
Note that an error would have been triggered without the use
of $onUNDF. The option $offUNDF will return the system to
the default, where UNDF may not be used in assignments.
$onUNDF
$offUNDF
Scalar x;
$onUNDF
x = UNDF;
Display x;
----      4 PARAMETER x                    =  
Syntax:
$onUni
$offUni
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
126/184


This controls whether the compiler checks the referential
integrity (see section Domain Checking) of the code. This is
an essential part of good GAMS programming and it is highly
recommend to declare symbols with proper domains. With
the universe as a domain the compiler does not help the
user with easy-to-make mistakes, like swapping indexes,
a(i,j) versus a(j,i). By default something like this would
generate an error, if a was declared as a(i,j). Such an error
could be ignored, by setting $onUni, which can be useful in
few situations, when accessing a symbol with a set that is not
the domain or a subset of the domain. For example, we could
read data of a union of sets that already exist. We could use
the universe as the domain for that symbol, but perhaps we
need to protect the referential integrity of this symbol too.
Example:
So when assigning fc we only access produceCalories with
fruit. We could reverse the order of declaration of fruit,
veggie and produce and use a proper subdomain, but
sometimes data flow and input don't allow that.
Attention
When the GAMS compiler operates under $onUni
it treats all symbols as being declared over the
universe. So all domain checking is gone. We can
set elements in a symbols that normally can't be
entered. This can also lead to strange effects:
Set       fruit   / apple, pear /
          veggie  / carrot, pea /
          produce / #fruit, #veggie /;
Parameter produceCalories(produce) "per 100g" /
          fc(fruit)  "calories per 100g"
          vc(veggie) "calories per 100g";
$onUni
fc(fruit)  = produceCalories(fruit);
vc(veggie) = produceCalories(veggie);
$offUni
display fc, vc;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
127/184


$(on|off)Verbatim
set       i / 1*2 /
          j / a,b /;
parameter pi(i);
$onuni
pi(j) = 1;
$offuni
* We will see elements from j in pi
Display pi;
* The following should only clear the 
* entire symbol, because GAMS knows i
* takes a shortcut.
pi(i) = no;
Display pi;
Syntax:
These options are used in conjunction with the GAMS
command line parameter DumpOpt to suppress the input
preprocessing for input lines that are copied to the dmp file.
This feature is mainly used to maintain different versions of
related models in a central environment.
Note
The options $on/offVerbatim are only
recognized for DumpOpt 
 10 and apply
only to lines in the file between the two
options
If $onVerbatim is active, DumpOpt = 11
behaves like DumpOpt = 21 (comments
are kept)
Observe that the use of the options $goto and
$on/offVerbatim are incompatible and may produce
unexpected results.
Example:
$onVerbatim
$offVerbatim
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
128/184


$(on|off)Warning    ($offWarning)
The corresponding dmp file will contain the following lines:
See also command line parameter DumpOpt.
$set f 123
$log %f%
$onVerbatim
$log %f%
$offVerbatim
$log %f%
$log 123
$onVerbatim
$log %f%
$offVerbatim
$log 123
Syntax:
This option acts as a switch for data domain checking. In
some cases it may be useful to accept domain errors in data
statements that are imported from other systems and report
warnings instead of errors. Data will be accepted and stored,
even though it is outside the domain.
Attention
This switch effects three types of domain
errors usually referred to as error numbers
116, 170 and 171, see example below.
This may have serious side affects and we
recommend to exercise great care when
using this feature.
Example:
$onWarning
$offWarning
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
129/184


Note that the set j, although specified as a subset of i,
contains elements not belonging to its domain. Similarly, the
parameter x contains data elements outside the domain of i.
The skeleton listing file that results from running this code
follows:
Observe that the domain violations are marked like normal
compilation errors but are only treated as warnings and it is
Set i     / one, two, three /
$onWarning
    j(i)  / four, five /
    k     / zero /;
Parameter x(i) "Messed up Data" / one 1.0, five
x('six') = 6; 
x(j) = 10; 
x('two') = x('seven');
j(k) = yes;
$offWarning
display i,j,x;
 1  Set i     / one, two, three /;
   3      j(i)  / four, five /
****                 $170  $170
   4      k     / zero /;
   5  Parameter x(i) "Messed up Data" / one 1.
****                                          
   6  x('six') = 6; x(j) = 10; x('two') = x('s
****        $170                              
   7  j(k) = yes;
****     $171
   9  display i,j,x;
 Error Messages
116  Label is unknown
170  Domain violation for element
171  Domain violation for set
**** 0 ERROR(S)   7 WARNING(S)
E x e c u t i o n
----      9 SET i
one  ,    two  ,    three
----      9 SET j
four,    five,    zero
----      9 PARAMETER x  Messed up Data
one   1.000,    four 10.000,    five 10.000,  
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
130/184


$phantom id
permitted to execute the code.
For an introduction to domain checking in GAMS, see section
Domain Checking.
Syntax:
This option is used to designate id as a phantom set
element. Syntactically, a phantom element is handled like
any other set element. Semantically, however, it is handled
like it does not exist. This is sometimes used to specify a
data template that initializes the phantom records to default
values.
Example:
The output generated by the display statement is shown
below:
Note that null does not appear in the listing file.
Attention
Statements that assign values to phantom labels
are ignored.
Consider the following extension to the previous example:
$phantom id
$phantom null
Set i / null /
    j / a, b, null /;
display i,j;
----      4 SET i
                                              
----      4 SET j
a,    b
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
131/184


$prefixPath
The output generated by the display statement is shown
below:
The system attribute system.empty is an implicitly defined
phantom element. The following code works even without
specifying $phantom:
Another way to specify empty data statements makes use of
on/offEmpty. The following example produces the same data
as the data statement with the phantom label. In contrast to
the example we $phantom we need to provide the
dimensionality of the symbol i explicitly via the (*):
Parameter p(j) / a 1, null 23 /;
display p;
----      6 PARAMETER p
a 1.000
Set i / system.empty /
    j / a, b, system.empty /;
display i,j;
$onEmpty
Set i(*) / /
    j / a, b /;
display i,j;
Syntax:
This option augments the search path in PATH environment
variable. The effect is that the text directoryPath is added
to the beginning of the search path.
Example:
$prefixPath directoryPath
$log %sysenv.PATH%
$prefixPath C:\somewhereelse\anotherpath
$log %sysenv.PATH%
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
132/184


$protect
$purge
The log contains the following two relevant lines:
The option setEnv and %sysEnv.VARNAME% allow to modify
system environment variables but the length of the
environment variable value is limited in GAMS to 255
characters. The PATH environment variable is often much
longer and therefore this special $prefixPath option exists.
This works on all platforms but the path separator depends
on the operating system (; for Windows and : for Unix).
C:\Windows\system32;C:\Windows;C:\Windows\Syst
C:\somewhereelse\anotherpath;C:\Windows\system
Syntax:
This option creates a privacy setting: it freezes all values of
identifiers with the result that modifications are no longer
allowed but the parameters may still be used in model
calculation (for example, equation definitions). Here ident1
and ident2 are specific GAMS identifiers previously defined
in the program and the keyword all denotes all identifiers.
Note that this option is mainly used in the context of secure
work files. The privacy restrictions may be removed with the
options $expose or $purge.
$protect all | ident1 ident2 ...
Syntax:
This option removes the identifiers and all associated data in
a privacy setting. With explicit identifiers the listed identifiers
are removed, and with all all identifiers are removed.
Note that this option is used in the context of secure work
files. A special license file is needed for this feature to work,
the removal only takes effect in the restart files.
$purge all | ident1 ident2 ...
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
133/184


$remark
$[x]save[.keepCode]
Syntax:
This option performs a parameter substitution and writes a
comment text to the compilation output of the listing file.
Note that the line numbers of the comment are suppressed.
Example:
The resulting listing file will contain the following line:
$remark text
$set it TEST
$remark Write %it% to the listing file
Write TEST to the listing file
Syntax:
This option creates a work file with all of the GAMS
components compiled up to this point. Without the suffix
keepCode no execution code is written, hence a restart from
this work file has nothing to execute. $xsave writes a
compressed work file, while work files created with $save are
uncompressed.
Example:
The resulting file p.txt will contain the following lines:
$[x]save[.keepCode] saveFileName
set i /1*5/; parameter p(i) / #i 1 /;
p(i) = 2;
$save mywork
$onEcho > create_put.gms
file f / p.txt /; put f;
loop(i, put i.tl p(i) /);
$offEcho
$call.checkErrorLevel gams create_put.gms lo=2 
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
134/184


Adding the suffix .keepCode in this example, i.e.
$save.keepCode mywork will also write out unexecuted execution
code, so a restart from this work file will execute this code. This
option with suffix cannot be used inside a loop or if statement. This
will trigger a compilation error. The example with the .keepCode
suffix will result in the p.txt file containing the following lines:
$scratchFileName
1                   1.00
2                   1.00
3                   1.00
4                   1.00
5                   1.00
1                   2.00
2                   2.00
3                   2.00
4                   2.00
5                   2.00
Syntax:
This option establishes or redefines the content of a scoped
compile-time variable that is accessible in the code where
the command appears and all code included therein. Here
VARNAME is any user chosen variable name; fileStem is
optional and used to built the name for a file in the scratch
directory with a scratch extension (unless an extension is set
explicitly). If it is omitted, the system will make up a random
file name.
So,
is equivalent to
Example:
$scratchFileName VARNAME [fileStem]
$scratchFileName fn abc
$set fn %gams.scrDir%abc.%gams.scrExt%
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
135/184


$set
The log will show:
See also $set and section Compile-Time Variables.
* Set fileStem explicitly
$scratchFileName fn1 abc
$log %fn1%
* Omit fileStem
$scratchFileName fn2
$log %fn2%
C:\Data\t m p\225a\abc.dat
C:\Data\t m p\225a\__sFN__-0_313342928588555.d
Syntax:
This option establishes or redefines contents of a scoped
compile-time variable that is accessible in the code where
the command appears and all code included therein. Here
VARNAME is any user chosen variable name; text is optional
and may contain any text. The text may contain spaces. The
text can not be longer than 255 characters otherwise a
compilation error is triggered. Observe that scoped compile-
time variables may be destroyed (removed from the program)
with the option $drop.
Note that in contrast to the option $eval the option $set
does not evaluate the expression at compile time.
Note that GAMS allows scoped, local and global compile-time
variables to be defined with the same name and therefore in
some cases needs to prioritize. When referencing a compile-
time variable via %VARNAME% a local variable hides scoped
and global variables and a scoped variables hides the global
variable as the following example demonstrates.
Example:
$set VARNAME text
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
136/184


$setArgs
The log will look as follows:
If one wants to set a compile-time variable in an include file
that is visible to the program after the $include one need to
use $setglobal:
The log will show
An inventory of all defined compile-time variables and their
type (local, scoped, and global) is available with the option
$show.
See also $setGlobal, $setLocal, and section Compile-Time
Variables.
$setLocal myvar this is a local variable
$set myvar this is a scoped variable
$setGlobal myvar this is a global variable
$log %myvar%
$droplocal myvar
$log %myvar%
$drop myvar
$log %myvar%
this is a local variable
this is a scoped variable
this is a global variable
$onEchoV > setvar.gms
$setArgs varname varvalue
$setglobal %varname% %varvalue%
$offEcho
$batInclude setvar MYVAR one
$log %MYVAR%
one
Syntax:
With this option parameters that may be substituted are
defined as GAMS compile-time variables. Note that $setArgs
may only be used in external files that are included with the
option $batInclude, $libInclude, and $sysInclude.
Example:
$setArgs id1 id2 id3 ...
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
137/184


$setComps
The file test3.gms contains the following lines:
The option $setArgs allows the batInclude file to use the
more descriptive compile-time variables %aa% instead of %1,
%bb% instead of %2 and %cc% instead of %3. Note that the use
of %1, %2 etc. is still allowed. The program listing looks as
follows:
and the output generated by the display statements follows:
See also $set, $batInclude.
Scalar a /2/, b /4/, c /5/;
$batInclude test3 a b c
Scalar x;
x = %1 + %2 * %3 ;
display x;
$setArgs aa bb cc
x = %aa% - %bb% * %cc%  ;
display x;
x = %1 + %2 * %3 ;
display x;
   1  Scalar a /2/, b /4/, c /5/;
BATINCLUDE C:\Users\default\Documents\gamside\
   3  Scalar x;
   4  x = a + b * c ;
   5  display x;
   7  x = a - b * c  ;
   8  display x;
   9  x = a + b * c ;
  10  display x;
----      5 PARAMETER x                    =  
----      8 PARAMETER x                    =  
----     10 PARAMETER x                    =  
Syntax:
This option establishes or redefines compile-time variables
so they contain the components of a period delimited string.
$setComps perioddelimstring id1 id2 id3 ...
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
138/184


$setDDList[.Cont]
Here perioddelimstring is any period delimited string like
the set specification of a multidimensional parameter, id1 is
the name of a scoped compile-time variable that will contain
the name of the set element in the first position, id2 is the
name of a scoped compile-time variable that will contain the
name of the set element in the second position and id3 is
the name of a scoped compile-time variable that will contain
the name of the set element in the third position. The items
may be recombined back into the original filename string by
using %id1%.%id2%.%id3%.
Example:
The resulting log file will contain the following lines:
See also $set.
$setComps period.delim.string id1 id2 id3
$log id1=%id1%
$log id2=%id2%
$log id3=%id3%
$set name %id1%.%id2%.%id3%
$log name=%name%
id1=period
id2=delim
id3=string
name=period.delim.string"
Syntax:
This option causes GAMS to look for misspelled or undefined
double dash GAMS parameters.
Example: Consider the following example where three double
dash GAMS parameters are defined on the command line:
The corresponding GAMS file follows:
$setDDList.Cont id1 id2 ...
$setDDList      id3 id4 id5 ...
> gams mymodel.gms --one=11 --two=22 --three=3
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
139/184


$setEnv
Note that the option $setDDList three checks if all double
dash parameters have been used so far except for three. An
error is triggered because four has not been used so far, the
log file will contain the following:
$setDDList.Cont can be used to define a list of parameters
to be checked over multiple lines. So, the following two
examples do the same thing:
Note
$setDDList.Cont does not do anything without
a $setDDList statement.
See also section Double Dash Parameters.
$log %one%
$log %two%
$setDDList three
$log %three%
$log %four%
*** 1 double dash variables not referenced
    --four=44
$setDDList one two three four 
$setDDList.Cont one 
$setDDList.Cont two three 
$setDDList      four 
Syntax:
This option defines an operating system environment
variable. Here VARNAME is a user chosen environment
variable name and value may contain text or a number. Note
that system environment variables are destroyed (removed
from the program) with the option $dropEnv or when GAMS
terminates.
$setEnv VARNAME value
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
140/184


$setGlobal
$setLocal
Example:
The following output is echoed to the log file:
See also $dropEnv and section Environment Variables in
GAMS.
$ondollar
$set env this is very silly
$log %env%
$setenv verysilly %env%
$log %sysenv.verysilly%
$if not "%env%"=="%sysenv.verysilly%" $error "$
$dropenv verysilly
$if setenv verysilly $error should not be true
--- Starting compilation
this is very silly
this is very silly
Syntax:
This option establishes or redefines contents of a global
compile-time variable that is accessible in the code where
the command appears and all code included therein and all
parent files. Here VARNAME is any user chosen variable name;
text is optional and may contain any text. The text may
contain spaces. The text can not be longer than 255
characters otherwise a compilation error is triggered.
Observe that global compile-time variables may be destroyed
(removed from the program) with the option $dropGlobal.
The difference between local, scoped, and global compile-
time variable is explained with the option $set.
See also $set, $setLocal, $dropGlobal and section Compile-
Time Variables.
$setGlobal VARNAME text
Syntax:
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
141/184


$setNames
This option establishes or redefines contents of a local
compile-time variable that is accessible only in the code
module (source file) where it is defined. Here VARNAME is any
user chosen variable name; text is optional and may contain
any text. The text may contain spaces. The text can not be
longer than 255 characters otherwise a compilation error is
triggered. Observe that local compile-time variables may be
destroyed (removed from the program) with the option
$dropLocal.
The difference between local, scoped, and global compile-
time variable is explained with the option $set.
See also $set, $setGlobal, $dropLocal and section Compile-
Time Variables.
$setLocal VARNAME text
Syntax:
This option establishes or redefines three scoped compile-
time variables so they contain the drive subdirectory,
filename and extension of a file named with full path. Here
file is any filename, filepath is the name of a scoped
compile-time variable that will contain the name of the
subdirectory where the file is located, filename is the name
of a scoped compile-time variable that will contain the root
name of the file and fileextension is the name of a
scoped compile-time variable that will contain the extension
of the file.
Example:
The log will show
$setNames file filepath filename fileextension
$setNames "%gams.input%" filepath filename file
$set name %filepath%%filename%%fileextension%
$log %name%
C:\Users\default\Documents\gamside\projdir\
Untitled_1
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
142/184


Note that file is separated into its three components
placing
C:\Users\default\Documents\gamside\projdir\ into
filepath, Untitled_1 into filename and .gms into
fileextension. The three items may be recombined back
into the original filename by using
%filepath%%filename%%fileextension% as shown in the
example.
If the file is missing a path, name, or extension the
corresponding variable is defined but remains empty as
demonstrated in the following example:
The log shows:
Note that if a file contains multiple . the last one will be
assigned to the fileextension as shown in the example
with Untitled_1.gms.txt.
.gms
C:\Users\default\Documents\gamside\projdir\\Un
$onEchoV > showfileparts.gms
$setNames "%1" filepath filename fileextension
$log path=%filepath%
$log name=%filename%
$log ext=%fileextension%
$offEcho
$batInclude showfileparts "C:\tmp\"
$batInclude showfileparts "Untitled_1"
$batInclude showfileparts "Untitled_1.gms"
$batInclude showfileparts "Untitled_1.gms.txt"
--- Untitled_1.gms(7) 2 Mb
path=C:\tmp
name=
ext=
--- .showfileparts.gms(4) 2 Mb
--- Untitled_1.gms(8) 2 Mb
path=
name=Untitled_1
ext=
--- .showfileparts.gms(4) 2 Mb
--- Untitled_1.gms(9) 2 Mb
path=
name=Untitled_1
ext=.gms
--- .showfileparts.gms(4) 2 Mb
--- Untitled_1.gms(10) 2 Mb
path=
name=Untitled_1.gms
ext=.txt
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
143/184


$shift
Syntax:
This option is similar to the command.com/cmd.exe shift
operator (see
[en.wikipedia.org/wiki/COMMAND.COM::Batch_file_commands]
(https://en.wikipedia.org/wiki/COMMAND.COM#Batch_file_commands
It shifts the order of all parameters passed once to the left.
This effectively drops the lowest numbered parameter in the
list.
Example:
The batch include file inc.inc follows:
The resulting listing file will contains the following echo
print:
Note that in the first statement in the include file, %1 is the
first argument in the $batInclude call and in this case it is
interpreted as a. %2 is the second argument in the
$batInclude call and is interpreted as b. This leads to the
overall assignment being interpreted as b=a+1. The dollar
control option $shift shifts the arguments to the left. As a
result, %1 is interpreted as b, and %2 is interpreted as c. This
leads to the second assignment being interpreted as c=b+1.
Therefore the outcome generated by the display statement in
the input file is as follows:
$shift
Scalar a, b, c ; a = 1 ;
$batInclude inc.inc a b c
display a, b, c ;
%2 = %1 + 1 ;
$shift
%2 = %1 + 1 ;
    1  Scalar a, b, c ; a = 1 ;
BATINCLUDE C:\Users\default\Documents\gamsdir\
    3  b = a + 1 ;
    5  c = b + 1 ;
    6  display a, b, c ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
Printer-friendly version
Copyright © GAMS Development Corporation
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
144/184


$show
See also $batInclude.
----      6 PARAMETER a                    =  
            PARAMETER b                    =  
            PARAMETER c                    =  
Syntax:
This option causes current values of the compile-time
variables plus a list of the macros and active input and
include files to be shown in the compilation output, where
"active" means, that $show was either directly in that file or
that file is a parent that includes the file with $show.
Example:
The file myinclude.gms follows:
The resulting listing file will contain the following
environment reports in the compilation output:
$show
$set it 1
$setLocal yy
$setGlobal gg what
$include myinclude
$macro addx(x)  x+x
$show
$set inincs
$setLocal inincsl
$setGlobal inincsg
$macro multx(x)  x*x
$show
---- Begin of Active File List
Level Type         Line  Filename
----------------------------------
    1 INCLUDE         5  C:\Users\default\Docu
    0 INPUT           4  C:\Users\default\Docu
---- End of Active File List
---- Begin of Compile-time Variable List
Level SetVal                          Type    
----------------------------------------------
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
145/184


$showFiles
and
Note that only the macros and the item defined with the
option $setGlobal in the included file carries over.
If one needs only parts of this report, the dollar control
options $showFiles, $showMacros and $showVariables can be
used.
See also section Compile-Time Variables.
    1 inincsl                         LOCAL
    1 inincs                          SCOPED
    0 yy                              LOCAL
    0 it                              SCOPED  
    0 gg                              GLOBAL  
    0 inincsg                         GLOBAL
---- End of Compile-time Variable List
---- Begin of Macro List
$macro multx(x)  x*x
---- End of Macro List
---- Begin of Active File List
Level Type         Line  Filename
----------------------------------
    0 INPUT           6  C:\Users\default\Docu
---- End of Active File List
---- Begin of Compile-time Variable List
Level SetVal                          Type    
----------------------------------------------
    0 yy                              LOCAL
    0 it                              SCOPED  
    0 gg                              GLOBAL  
    0 inincsg                         GLOBAL
---- End of Compile-time Variable List
---- Begin of Macro List
$macro multx(x)  x*x
$macro addx(x)  x+x
---- End of Macro List
Syntax:
This option prints the active files to the lst file as described
at $show.
$showFiles
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
146/184


$showMacros
$showVariables
$single
Syntax:
This option prints a list of macros to the lst file as described
at $show.
$showMacros
Syntax:
This option prints a list current values of the compile-time
variables to the lst file as described at $show.
$showVariables
Syntax:
The lines following this option will be echoed single spaced
in the compilation output. Note that this is the default. The
option is only useful as a switch to deactivate the option
$double.
Example:
The echo print in the resulting listing file will look as follows:
$single
Set    i / 1*2 / ;
Scalar a / 1   / ;
$double
Set    j / 10*15 / ;
Scalar b / 2     / ;
$single
Set    k / 5*10 / ;
Scalar c / 3    / ;
    1  Set i / 1*2 / ;
    2  Scalar a /1/ ;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
147/184


$splitOption
Note that lines between the options $double and $single
are listed double spaced, while the lines after the option
$single revert back to being listed single spaced.
See also $double.
    4  Set j / 10*15 / ;
    5  Scalar b /2/ ;
    7  Set k / 5*10 / ;
    8  Scalar c /3/ ;
Syntax:
Establishes or redefines two scoped compile-time variables
so they contain the name and value of an option key/value
pair specified in various formats. KEYVALPAIR is a string
formatted as -opt=val or -opt val (instead of - one can
also use /). optname is the name of a scoped compile-time
variable that will contain the name of the option and
optvalue is the name of a scoped compile-time variable
that will contain the value of the option. This is useful in
particular in combination with batInclude files.
Example:
$splitOption KEYVALPAIR optname optvalue
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
148/184


stars   (****)
Now when calling this piece of code as a batInclude one can
specify optionally some named arguments (in any order)
right after the name of the batInclude file and before the
positional arguments as demonstrated by the log output:
$onechoV > myinclude.gms
* Default values for named arguments
$setGlobal a1 1
$setGlobal a2 2
$setGlobal a3 nothing
$setGlobal positionalArgs
$label ProcessNamedArguments
$  splitOption "%1" key val
$  if x%key%==x $goto FinishProcessNamedArgumen
$  ifThenI.NamedArguments %key%==a1
$    setGlobal a1 %val%
$  elseIfI.NamedArguments %key%==a2
$    setGlobal a2 %val%
$  elseIfI.NamedArguments %key%==a3
$    setGlobal a3 %val%
$  else.NamedArguments
$    error Unkown named argument "%key%"
$  endIf.NamedArguments
$  shift
$goTo ProcessNamedArguments
$label FinishProcessNamedArguments
$setGlobal positionalArgs %1 %2 %3
$offEcho
$batInclude myinclude "-a3=some things" -a2=3.1
$log Using named arguments a1:>%a1%< a2:>%a2%< 
Using named arguments a1:>1< a2:>3.14< a3:>som
Syntax:
This option is used to redefine the **** marker in the GAMS
listing file. By default, important lines like those that denote
errors and the solver and model status are prefixed with ****.
A new marker consists of one to four characters.
Example:
The resulting listing file follows:
$stars char[char][char][char]
$stars *##*
garbage
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
149/184


$sTitle
$stop
    2  garbage
*##*         $140
*##*  $36,299  UNEXPECTED END OF FILE (1)
Error Messages
 36  '=' or '..' or ':=' or '$=' operator expe
     rest of statement ignored
140  Unknown symbol
299  Unexpected end of file
Syntax:
This option sets the subtitle in the page header of the listing
file to text. Note that the next output line will appear on a
new page in the listing file.
Example:
See also $title.
$sTitle text
$sTitle Data tables for input/output
Syntax:
This option stops program compilation without creating an
error. Note there is a difference to the option $exit. If there is
only one input file, $stop and $exit will have the same
effect. In an include file the option $exit acts like an end-of
file on the include file. However, the option $stop in an
include file will cause GAMS to stop reading all input but
continue the execution phase of the so far compiled program.
The text followed by $stop is ignored.
Example:
$stop [text]
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
150/184


$sysInclude
See also $abort, $error, $exit, and $terminate.
$ifthen not set EXPORTEXCEL
$  stop No export to Excel
$else
$  call gdxxrw ...
$endif 
The syntax of this dollar control option is equivalent to the
syntax of $batinclude:
Syntax:
However, if an incomplete path is given, the file name is
completed using the system include directory. By default, the
system include directory is set to the GAMS system directory.
Note that the default directory may be reset with the
command line parameter sysIncDir.
Example:
The only relevant include file in the GAMS system directory is
mpsgeset for MPSGE models, see for example [HARMGE]:
Note that this call will first look for the include file
[GAMS System Directory]/mpsgeset. If this file does not
exist, it will looks for
[GAMS System Directory]/mpsgeset.gms. The argument
KAMIYA is passed on to the include file and are interpreted
as explained for the dollar control option $batInclude.
Consider the following example:
This call will first look specifically for the include file
C:\Users\default\Documents\mpsgeset and next for
C:\Users\default\Documents\mpsgeset.gms.
$sysinclude external_file arg1 arg2 ...
$sysInclude mpsgeset KAMIYA
$sysInclude C:\Users\default\Documents\mpsgeset
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
151/184


$terminate
$title
$unLoad
See also $batInclude.
Syntax:
This option terminates compilation and also does not
execution to program compiled so far without giving an error.
Example:
See also $abort, $error, $exit, and $stop.
$terminate [text]
$if set JUSTTERMINATE $terminate
Syntax:
This option sets the title in the page header of the listing file
to text. Note that the next output line will appear on a new
page in the listing file.
Example:
See also $sTitle.
$title text
$title  Production Planning Model
$sTitle Set Definitions
Syntax:
$unLoad [sym1[,] sym2=gdxSym2[,] ...]
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
152/184


This option unloads specified items to a GDX file. Note that
$unLoad must be used in conjunction with the option
$gdxOut: $gdxOut must precede `$unLoad`. More than one
option $unload may appear in between. Symbols can be
renamed via the sym=GDXSym syntax. A $unLoad without
arguments unloads the entire GAMS database into the GDX
file.
Example: Consider the following slice of code:
Note that the last lines will create a file named tran.gdx
that contains i, j (now named k) and d and the parameters a
and b which are now named dem and sup. The $unLoad in
the very last line creates a GDX file tranX.gdx with all
symbols (with their original names). The table of content (via
$gdxIn and $load without parameters) of these two files
looks as follows:
Sets i   'canning plants'   / seattle, san-dieg
     j   'markets'          / new-york, chicago
Parameters
     a(i)  'capacity of plant i in cases'
       /    seattle     350
            san-diego   600  /
     b(j)  'demand at market j in cases'
       /    new-york    325
            chicago     300
            topeka      275  / ;
Table d(i,j)  'distance in thousands of miles'
                   new-york       chicago      
     seattle          2.5           1.7        
     san-diego        2.5           1.8        
$gdxOut tran
$unLoad i j=k
$unLoad b=dem a=sup
$unLoad d
$gdxout tranX
$unLoad
Content of GDX C:\Users\default\Documents\gams
               5 UELs
    Number Type       Dim       Count  Name
         1 Set          1           2  i      
         2 Set          1           3  k      
         3 Parameter    1           3  dem(j) 
         4 Parameter    1           2  sup(i) 
         5 Parameter    2           6  d(i,j) 
Content of GDX C:\Users\default\Documents\gams
               5 UELs
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
153/184


Both listings show domain information for the various
symbols but only the file tranX.gdx created with $unLoad
without arguments has consistent or full domain information
while tran.gdx may have inconsistent or relaxed domain
information. Domain matching when loading with the
$load sym<[=]symGDX, see $load for details, can be used in
both cases but can become subtle with the relaxed domain
information from tran.gdx.
Starting with GAMS 34 the behavior of $gdxOut and $unload
changed compare to previous versions. In order to write
consistent domain information and write aliases as such, the
actual writing of the symbols to GDX is delayed until the GDX
files is about to be closed either through an explicit $gdxOut
(potentially with a another filename) or through the end of
the compilation phase. The advantage of the delayed writing
is that the compiler can now better analyze the symbols and
e.g. write alias symbols as aliases with the aliased set is also
written to the GDX file (aliases were always written as sets
before GAMS 34).
This new behavior can result in different GDX files. Here are
two examples:
In the GAMS versions before 34 the export GDX happened
when the compiler processed the $unload command. At this
point the parameter p did not have any data yet, so the GDX
symbol p had no records. With the new behavior, the actual
writing happens when the GDX file will be closed. Since there
is no explicit close via a $gdxOut the GDX file is closed at the
end of the compilation phase. By then the compiler has
processed the statement
Parameter p(i) /1 1, 2 2, 3 3/; and has filled p with
data that will show up in the GDX file. In such a case an
    Number Type       Dim       Count  Name
         1 Set          1           2  i      
         2 Set          1           3  j      
         3 Parameter    1           2  a(i)   
         4 Parameter    1           3  b(j)   
         5 Parameter    2           6  d(i,j) 
Set i /1,2,3/; Parameter p(i);
$gdxOut x.gdx
$unload
Parameter p(i) /1 1, 2 2, 3 3/;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
154/184


explicit $gdxOut after the $unload helps to get the old
behavior back.
In the GAMS versions before 34 the GDX file x.gdx contains
two parameters p1 with record 1 1 and p2 with record
1 1, 2 2. With the new behavior the symbols are written
again at the end of the compilation phase and by then the
parameter p has the records 1 1, 2 2 and will write to GDX
the parameters p1 and p2 with the two records each. The
only way to accomplish the old behavior in this case is to
write p1 and p2 to different GDX files:
This delayed writing also influence other options like
$onEpsToZero. The state of this becomes relevant when the
file is actually written, not when a symbol is added to the list
of symbols to be exported with $unload. This can be seen in
the following example:
Here is the output from gdxdump at the end:
Set i /1,2,3/; Parameter p(i) / 1 1/;
$gdxOut x.gdx
$unload p=p1
$onmulti
Parameter p(i) / 2 2/;
$unload p=p2
Set i /1,2,3/; Parameter p(i) / 1 1/;
$gdxOut x1.gdx
$unload p=p1
$gdxOut x2.gdx
$onMulti
Parameter p(i) / 2 2/;
$unload p=p2
Set       i      / i1*i3 /;
Parameter p1(i)  / i1 0, i2 EPS, i3 1  /
          p2(i)  / i1 0, i2 EPS, i3 1  /;
$gdxOut out.gdx
$onEpsToZero
$unload p1
$offEpsToZero
$unload p2
$gdxOut
$call.checkErrorLevel gdxdump out.gdx
Parameter p1(*) /
'i2' Eps,
'i3' 1 /;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
155/184


$use205
$use225
Parameter p2(*) /
'i2' Eps,
'i3' 1 /;
Syntax:
This option sets the GAMS syntax to the syntax of Release
2.05. This is mainly used for backward compatibility. New
keywords have been introduced in the GAMS language since
Release 2.05. Models developed earlier that use identifiers
that have since become keywords will cause errors when run
with the latest version of GAMS. This option will allow to run
such models.
Example:
The word "if" is a keyword in GAMS that was introduced with
the first version of Release 2.25. Setting option $use205
allows "if" to be used as an identifier since it was not a
keyword in Release 2.05.
$use205
$use205
Set if /1.2.3/; 
Scalar x ;
Syntax:
This option sets the GAMS syntax to the syntax of the first
version of Release 2.25. This is mainly used for backward
compatibility. New keywords have been introduced in the
GAMS language since the first version of Release 2.25. Models
developed earlier that use identifiers that have since become
keywords will cause errors when run with the latest version
of GAMS. This option will allow to run such models.
$use225
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
156/184


$use999
$version
Example:
The word "for" is a keyword in GAMS that was introduced with
the later versions of Release 2.25. Setting option $use225
allows "for" to be used as an identifier since it was not a
keyword in the first version of Release 2.25.
$use225
Set for /1.2.3/; 
Scalar x ;
Syntax:
This option sets the GAMS syntax to the syntax of the latest
version of the compiler. Note that this setting is the default.
Example:
Note that the word "for" is used as a set identifier after
setting the option $use225 and later the keyword for is
used in a looping construct after having set the language
syntax to that of the latest version using the option $use999.
$use999
$use225
Set for /1.2.3/; 
Scalar x ;
$use999
for (x=1 to 3, display x) ;
Syntax:
This issues a compilation error if n is greater than the current
GAMS version. This can be useful to ensure that a model is
run only with new versions of GAMS, because, e.g., a
particular feature which did not exist in older versions is
needed.
$version n
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
157/184


$warning
Conditional Compilation
GAMS offers several dollar control options that facilitate conditional
compilation. In this section we will first introduce the general syntax,
present an overview of all relevant options and list the conditional
expressions that may be used to perform tests. Then we will give
several examples to illustrate how these options are used and to
Example:
* With GAMS 24.8.1 the function numCores was ad
* Make sure, that we use this GAMS version or n
$version 248
Scalar nc "Number of cores";
nc = numCores;
Display nc;
Syntax:
This dollar control option issues a compilation warning to the
log and listing but continues compilation and execution.
Example
The GAMS log file will issue a warning:
with the details in the listing file:
$warning text
$ifthen not set INPUTFILE
$ set INPUTFILE default.txt
$ warning Using default INPUTFILE "default.txt"
$endif
*** Error 332 in C:\Users\default\Documents\ga
    $Warning encountered - see listing for det
   3  $ warning Using default INPUTFILE "defau
****       $332
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
158/184


demonstrate their power. This section is meant as an introduction to
conditional compilation in GAMS and complements the detailed
descriptions of the dollar control options listed in Table 1 below.
Conditional Compilation: General Syntax and
Overviews
The dollar control option $if and its variants provide a great amount
of control over conditional processing of the input file(s). The syntax
in GAMS is similar to the IF statement of the DOS Batch language:
The dollar control statement begins with $if. Note that $if may be
replaced by one of its variants that are listed in Table 1 below. The
operator not is optional and makes it possible to negate the
conditional expression that follows. The conditional expression
may take various forms, a complete list is given in Table 2. The result
of the conditional test is used to determine whether to process or not
the remainder of the line, new_input_line, which may be any valid
GAMS input line.
Attention
The first non-blank character on the line following the
conditional expression is considered to be the first
column position of the GAMS input line. Therefore, if the
first character encountered is the dollar control character,
the line is treated as a dollar control line. Likewise, if the
first character encountered is a comment character
(default: *) the remainder of the line is treated as a
comment line. If a multiplication is to be performed in the
true clause instead of a comment, the $ifThen condition
needs to be used:
Alternatively, the new_input_line may be placed in the next line.
The corresponding syntax follows:
$if [not] <conditional expression> new_input_line
$setglobal mult on
Scalar P_test;
P_test = 10
$iftheni %mult%==on
  * 5
$endif
;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
159/184


Note that in this version the space after the conditional expression is
left blank. If the conditional is found to be false, either the remainder
of the line (if any) will be skipped or the next line will not be
processed.
The overviews in Table1 and Table 2 conclude this subsection.
Examples are given in the next subsection.
Table 1: $if and Related Dollar Control Options
$if [not] <conditional expression> 
new_input_line
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
160/184


Dollar
Control
Option
Description
$if
This option is used to do case sensitive comparisons.
Several examples are given in the next subsection.
$ifE
This variant does the same as $if but allows
numerical constant expression evaluation. For an
example, see the detailed description of this option.
$ifI
This variant is the same as $if, but it is case
insensitive.
$ifThen
This variant controls whether a block of statements
will be processed or not. It is used to do case
sensitive comparisons. Most often it is followed by
one or more of the following dollar control options:
$else, $elseIf, $elseIfI, $elseIfE. The option $ifThen
must be matched with the option $endIf that marks
the end of the block. An example is given below.
$ifThenE
This is a variant of $ifThen and is used for
numerical comparisons. Like $ifThen, it is often
followed by the option $else or one of its variants
and must be matched with the option $endIf that
marks the end of the construct.
$ifThenI
This is a variant of $ifThen and is used to do case
insensitive comparisons. Like $ifThen, it is often
followed by the option $else or one of its variants
and must be matched with the option $endIf that
marks the end of the construct.
$endIf
This option must be matched with a preceding
option $ifThen, $ifThenE or $ifThenI and marks the
end of the if - then construct. Note that the
option $endIf is not followed by a conditional
expression, but it may be follwowed by a
new_input_line. This GAMS input is restricted to
other dollar control statements. An example is given
below.
$else
This option follows the option $ifThen, $ifThenE or
$ifThenI. It is followed by an instruction which is
executed if the conditional expression of the
matchining $ifThen statement is not true. Note that
therefore this dollar control statement does not
contain a conditional expression. An example is
given below.
$elseIf
This option follows the option $ifThen, $ifThenE or
$ifThenI. It is follwed by another conditional
expression and instruction. Note that this option is
case sensitive An example is given below
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
161/184


case sensitive. An example is given below.
$elseIfE
This is a variant of $elseIf that evaluates numerical
values.
$elseIfI
This is a variant of $elseIf that is case insensitive.
Table 2: Conditional Expressions in Conditional Compilation
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
162/184


Conditional
Expression
Description
acrType id
True if id is an acronym.
decla_OK
True if a declaration statement is permitted in
the current line. Note that declaration
statements are not permitted within
programming flow control structures like if
statements or loop statements. An example is
given below.
declared id
True if id was declared.
defined id
True if id was defined. An example is given
below.
dExist
directoryname
True if a directory with the name
directoryname exists.
dimension n id
True if id has n dimensions. Note that n may
take values from 0 to maximum number of
possible indexes (see Dimensions).
empty
restOfLine
True only if restOfLine is an empty string
(not even "" nor ''), otherwise False.
equType id
True if id is an equation.
errorFree
True if compilation up to this point has been
free of errors.
errorLevel n
True if the return code of a program called via
$call is equal to or larger than n. For lists of
GAMS return codes, see chapter GAMS Return
Codes. An example is given below.
exist
filename
True if a file with the name filename exists
and is readable in the working directory or an
input file directory. If no extension is
specified, also filename.gms is checked. An
example is given below.
filType id
True if id is the name of a put file.
funType id
True if id is a GAMS function.
gamsVersion n
True if current GAMS version is greater than or
equal to n. GAMS versions are referenced with
a single number. For example, if it should be
tested whether the current GAMS version is
24.7 or newer, n will equal 247. Maintenance
version numbers, e.g. 24.7.4 do not count.
gdxDimension
n id
True if id exists in a GDX file previously
opened with $gdxIn and has n dimensions.
Note that n may take values from 0 to
(
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
163/184


maximum number of possible indexes (see
Dimensions).
gdxEquType id
True if id exists in a GDX file previously
opened with $gdxIn and is an equation.
gdxParType id
True if id exists in a GDX file previously
opened with $gdxIn and is a parameter.
gdxSetType id
True if id exists in a GDX file previously
opened with $gdxIn and is a set.
gdxSymExist
id
True if id exists in a GDX file previously
opened with $gdxIn.
gdxVarType id
True if id exists in a GDX file previously
opened with $gdxIn and is a variable.
macType id
True if id is a macro.
modType id
True if id is a model.
onState key
True if the state of key is on (i.e. activated by
$onKey). An example is given below.
parType id
True if id is a parameter.
preType id
True if id is a one of the predefined symbols
in GAMS. Details are given below.
putOpen
True if both a file statement and at least one
put statement have been compiled. Note that
this does not guarantee that a file will be
open at runtime.
readable id
True if id was correctly initialized, i.e. the
symbol has a data statement or appeared on
the left-hand side of an assignment
statement, and may therefore be used on the
right-hand side of an assignment statement.
An example is given below.
set varname
True if the scoped compile-time variable
varname was set with the dollar control
option $set, $setGlobal or $setLocal.
setEnv
varname
True if the environment variable varname was
set in the systems environment, e.g. with the
dollar control option $setEnv.
setGlobal
varname
True if the control variable varname was set
with the dollar control option $setGlobal.
setLocal
var_name
True if the control variable var_name was set
with the dollar control option $setLocal.
setType id
True if id is a set.
solver
solver_name
True if a solver named solver_name exists in
the GAMS system. An example is given below.
Conditional Compilation: Examples
File Operation Test
The operator exist may be used to test whether a given file name
exists. Consider the following example:
Observe that the effect of this dollar control statement is that the file
myfile.dat is included if it exists. Note that the character $ at the
beginning of the option $include is the first non-blank character after
the conditional expression exist myfile.dat and therefore it is
treated as the first column position. The statement above may also
be written as follows:
Conditional Compilation and Batch Include Files
In the next example we will illustrate how the option $if is used
inside a batch include file where parameters are passed through the
option $batInclude from the parent file:
Note that in the first line the $if condition uses the string
comparison "%1a" == a to check if the parameter is empty. This test
may also be done in the following way: %1 == "". If the parameter is
not empty, the option $goto is processed.
Note
The option $label cannot be part of the conditional input
line. However, if the option $label appears on the next
line, the condition decides once if the label is placed or
not and subsequent instances of $goto will find the label
without reevaluating the condition.
The second line illustrates the use of standard GAMS statements if
the conditional expression is valid. If the file name passed as a
$if exist myfile.dat $include myfile.dat
$if exist myfile.dat
$include myfile.dat
$if not "%1a" == a $goto labelname
$if exist %1 file.ap=1;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
164/184


uelExist id
True if unique element id exists in current
GAMS database.
varType id
True if id is a variable.
warnings
True if the compilation until this point has
been free of warnings.
xxxType id
True if id is an unknown type. For more
information, see below.
string1 ==
string2
True only if string1 matches string2
exactly. Note that the strings may be quoted
or unquoted. Null (empty) strings may be
indicated by an empty quote: "" or ''. The
case of the strings provided either explicitly
or, more likely, through a parameter
substitution, is preserved and therefore will
affect the string comparison. Quoted strings
with leading and trailing blanks are not
trimmed and the blanks are considered part
of the string. Note that the string may have
the form %VARNAME%, where VARNAME refers
to a compile-time variable including GAMS
command line parameters and system
attribute. An example for a string comparison
with a command line parameter is given
below. An example for a string comparison
with a system attribute is given below.
string
True only if string is an empty string ("" or
''), otherwise False.
parameter through the $batInclude call exists already, the GAMS will
execute the file.ap=1; statement which will append to the file.
The next example demonstrates how an unknown number of file
specifications may be passed on to a batch include file that will
include each of them if they exist. The batch include file could look as
follows:
The call to this file in the parent file could take the following form:
Testing Whether an Item Has Been Defined
The next example shows how to test if a named item was declared
and/or defined.
Note that after the first declaration of i only declared i evaluates
to true when after the second declaration with a data statement both
defined i and declared i are true.
Testing the state of a flag set by a dollar control option
The expression onState key tests whether the state of key is on. So
the following example could be done with any key available as a
$(on|off)Key dollar control option:
* Batch Include File - inclproc.gms
* include and process an unknown number of input file
$label nextfile
* Quote everything because file name might have blank
$if exist "%1"  $include "%1"
$shift 
$if not "%1a" == a $goto nextfile
$batInclude inclproc "file 1.inc" file2.inc file3.inc
Set i;
$if defined  i $log First: set i is defined
$if declared i $log First: set i is declared
Set i /seattle/;
$if defined  i $log Second: set i is defined
$if declared i $log Second: set i is declared
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
165/184


Testing Whether an Item May Be Used in an Assignment
The expression readable id tests whether data were assigned to an
item and therefore the item may be used on the right-hand side of an
assignment statement. Consider the following example:
Note that in the first test the set f was declared, but there was no
data statement, hence it is not readable. After a declaration with a
data statement the test readable f evaluates to TRUE. With $kill we
can revert f to a data less state and hence not readable f is TRUE
after the "$kill". The assignment statement f = 1; make the scalar f
readable again.
Testing Whether an Identifier May Be Declared
In programming flow control structures, like if statements or loop
statements declaration statements are not permitted. The test
decla_ok may be used to test whether the current environment
allows declaration statements. Consider the following example:
Note that the conditional expression in the both $if tests will
evaluate to TRUE. However, the second test of decla_ok itself will be
FALSE because it is processed while compiling an if statement, but
with the not the entire expression evaluated to TRUE. For more
information, see chapter Programming Flow Control Features.
$if onState listing $log Listing is active at checkpo
$if onState listing $set reactivateListing
$offListing
* Do something which should not be seen in the listin
$if onState listing $log Listing is active at checkpo
* Reactivate listing if it was active at the start on
$if set reactivateListing $onListing
$if onState listing $log Listing is active at checkpo
Scalar f;
$if not readable f $log f cannot be used on the right
Scalar f /1/;
$if readable f $log f can be used on the right
$kill f
$if not readable f $log f cannot be used on the right
f = 1;
$if readable f $log f can be used on the right after 
$if decla_ok $log declarations are possible
if(1,
$  if not decla_ok $log declarations are not allowed
);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
166/184


Comments in the Context of Conditional Compilation
In-line and end-of-line comments are stripped out of the input file
before processing the new_input_line. If either of these forms of
comments appear, they will be treated as blanks. Consider the
following example:
Note that the comments on line 3 are ignored and the fourth line with
the assignment statement will be processed if the conditional
expression is true Hence the outcome generated by the display
statement will list a with a value of 4 if the file myfile.dat exists
and a value of 10 if the file does not exist.
Error Level Test
Consider the following example:
Note that the errorlevel is retrieved from the previous system call via
$call. The conditional statement errorlevel 1 is true if the
returned errorlevel is equal to or larger than 1. In case of calling
GAMS this means that something was not quite right with the
execution of GAMS (either a compilation or execution error or other
more exotic errors, see GAMS return codes. If this is the case, this
GAMS program will be aborted immediately at compilation time.
Usually programs return 0 on success and non-zero on failure. The
$if errorlevel 1 checks for strictly positive return codes. There
are rare cases with failures and negative return codes (e.g. on
Windows if some DLL dependencies of the program can't be
resolved). In such a case $if errorlevel 1 will evaluate to false
and not continue with the $abort instruction. It might be better to
access the program return code via the errorLevel function in the
following way:
Parameter a ;
a=10 ;
$eolCom // inlineCom /*  */
$if exist myfile.dat  /* in line comments */  // end 
a = 4 ;
display a;
$call gams mymodel.gms lo=2
$if errorlevel 1 $abort one or more errors encountere
$call gams mymodel.gms lo=2
$ifE errorLevel<>0 $abort one or more errors encounte
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
167/184


Solver Test
The following example illustrates how to check if a solver exists.
Note that the conditional expression is false since the solver named
ZOOM does not exists in the GAMS system (anymore).
Command Line Parameters in String Comparison Tests
Assume we include the following dollar control statements in a GAMS
file called myfile.gms:
Then we run the program with the following call:
Note that we specified values for the command line parameters
pageSize, pageWidth, and MIP. We can either use the short or long
name on the command line and in the compile-time variable. If we do
not specify the option on the command line we will get the default
value for option page size and page width. The MIP solver line will not
show because %gams.mip% remains empty. The log with option
setting on the command line will include the following lines:
Command line parameters are introduced in chapter The GAMS Call
and Command Line Parameters.
System Attributes in String Comparison Tests
Compile-time system attributes may also be used in string
comparison tests. The system attribute that is most useful in this
context is .fileSys. It identifies the name of the operating system
being used. Consider the following example:
$if solver ZOOM
$if not '%gams.ps%'==''  $log Page size set to  %gams
$if not '%gams.pw%'==''  $log Page width set to %gams
$if not '%gams.mip%'=='' $log MIP solver default is %
> gams myfile pageSize=60  pageWidth=85 mip=cbc
Page size set to  60
Page width set to 85
MIP solver default is cbc
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
168/184


These dollar control statements allow the definition of a NULL file
destination that is dependent on the operating system that is being
used. Note that the control variable nullFile contains an operating-
system-dependent name. This is useful when making an external
program that writes to STDOUT quiet in case the GAMS log does not
go to STDOUT (logOption=3). This example could also have used the
system attribute %system.nullFile% which contains the operating-
system-dependent NULL file destination:
System attributes in general are introduced in chapter System
Attributes.
Conditional Compilation with $ifThen and $else
Consider the following example which illustrates the use of $ifThen,
$elseIf, $else and $endif:
Note that the resulting log file will contain the following lines:
Observe that the options $else and $endIf are not followed by
conditional expressions and the instruction following the option
$endIf contains a dollar control statement. Moreover, note that the
‘$set x 'c’
$ifthen not %gams.logOption%==3
$  ifi %system.fileSys%==UNIX  $set nullFile > /dev/n
$  ifi %system.fileSys%==MSNT  $set nullFile > nul
$  if not set nullFile $abort %system.fileSys% not re
$else
$  set nullFile
$endif
$call gamslib trnsport %nullFile%
$set nullFile 
$if not %gams.logOption%==3 $set nullfile > %system.n
$call gamslib trnsport %nullfile%
$set x a
$label test
$ifThen %x% == a $set x 'c' $log $ifThen   with x=%x%
$elseIf %x% == b $set x 'k' $log $elseIf 1 with x=%x%
$elseIf %x% == c $set x 'b' $log $elseIf 2 with x=%x%
$else            $set x 'e' $log $else     with x=%x%
$endIf $if not %x% == e $goTo test
$ifthen   with x=a
$elseif 2 with x=c
$elseif 1 with x=b
$else     with x=k
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
169/184


has the text to be set in quotes. GAMS needs to know
where the text ends and the next dollar control option
(in this case
$log`) starts.
Type of Identifiers
The type of a symbol can be retrieved via $if ...Type. Consider the
following example:
Note that for predefined symbols more than one type applies (e.g.
sameAs is of set and predefined type). Please also note that diag is a
set even though there is a predefined symbol named diag but that
becomes invisible with a user defined symbol with the same name.
Normally there is no way to get a symbol into the GAMS symbols table
without a proper type. However, if the dollar command line
parameter multiPass is set to a value larger than zero, then the
compiler will just check for some integrity and will try to deduce the
symbol type from the context. If it is not able to do so, the symbol
type will remain unknown. For example, compiling the following lines
with multiPass=1
result in the line x is of unknown type in the GAMS log.
Macros in GAMS
Macros are widely used in computer science to define and automate
structured text replacements. The GAMS macro processors function
similarly to the popular C/C++ macro preprocessor. Note that the
GAMS macro facility has been inspired by the [GAMS-F]
(http://www.mpsge.org/inclib/gams-f.htm) preprocessor for function
definition developed by Michael Ferris, Tom Rutherford and Collin
Set diag / 1*3 /;
Parameter p(diag) / 1 1, 2 4, 3 8 /;
$if     setType diag    $log diag   is a set
$if not varType diag    $log diag   is not a variable
$if     preType diag    $log diag   is a predefined t
$if     parType p       $log p      is a parameter
$if     setType sameAs  $log sameAs is a set
$if     preType sameAs  $log sameAs is a predefined t
display x;
$if xxxType x $log x is of unknown type
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
170/184


Starkweather, 1998 and 2005. The GAMS macro facility incorporates
the major features of the GAMS-F preprocessor into the standard
GAMS release as of version 22.9. GAMS macros act like a standard
macro when defined. However, their recognition for expansion is
GAMS syntax driven.
Syntax and Simple Examples
The definition of a macro in GAMS takes the following form:
The dollar symbol $ followed by macro indicate that this line is a
macro definition. The name of the macro has to be unique, similar to
other GAMS identifiers like sets and parameters. The macro name is
immediately followed by a list of replacement arguments
arg1,arg2,arg3,... that are enclosed in parentheses. The macro
body is not further analyzed after removing leading and trailing
spaces.
The recognition and following expansion of macros is directed by
GAMS syntax. The tokens in the macro body to be replaced by the
actual macro arguments follow the standard GAMS identifier
conventions. Consider the following simple example of a macro with
one argument:
Here the name of the macro is reciprocal, y is the argument and
the macro body is 1/y. This macro may be called in GAMS statements
as follows:
As GAMS recognizes reciprocal(x1) and reciprocal(x2) as
macros, the assignment statement will expand to:
$macro name  macro_body
$macro name(arg1,arg2,arg3,...) macro_body with token
$macro reciprocal(y) 1/y
$macro reciprocal(y) 1/y
scalar z, x1 /2/, x2 /3/;
z = reciprocal(x1) + reciprocal(x2);
z = 1/x1 + 1/x2;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
171/184


Note that the macro use cannot be spread over multiple lines. Single
line use with more complex arguments as in
is recognized and will expanded to:
Note that z will be equal to 3.5 in this example as division takes
precedence over addition. But breaking the argument of the macro
over multiple lines as follows will trigger a macro expansion error:
The next example illustrates macros with multiple arguments:
The assignment above will expand to:
Note that the macro definition may extend over several lines with the
symbol '\' acting as a continuation string. Consider the following
example:
The z assignment expands to
z = reciprocal(x1+x2);
z = 1/x1+x2;
z = reciprocal(x1
              +x2);
$macro ratio(x,y) x/y
scalar z, x1 /2/, x2 /3/;
z = ratio(x1,x2);
z= x1/x2;
$macro myxor(a,b)  (a or b) \ 
               and (not a or not b)
scalar z;
z = myxor(1,0); 
display z;
z = (x1 or x2) and (not x1 or not x2);
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
172/184


Note that although the macro has been defined over two lines, the
expansion happens by combining the lines after stripping leading
white spaces of the second line as demonstrated in the next example
(because and has a higher precedence than or we can omit the
parenthesis):
The z assignment expands to this:
The &, explained in more detail in the next section can be used to
preserve (some of the) leading white spaces (but not the line breaks)
if that is desired:
Nested Macros
Macros may be nested. Consider the following example:
Observe that the macro product is nested in the macro addup. The
assignment will expand to:
Note that nested macros may result in an expansion of infinite
length. An example follows.
$macro myxor(a,b)  not a and b \ 
                or a and not b
scalar z;
z = myxor(1,0); 
display z;
z = not 1 and 0 or 1 and not 0;
$macro myxor(a,b)  not a and b \ 
       &        or a and not b
$macro product(a,b) a*b
$macro addup(i,x,z) sum(i,product(x(i),z))
set j /j1*j10/;
Parameter a1(j) / #j 1 /, z, x1 /5/;
z = addup(j,a1,x1);
z = sum(j,a1(j)*x1);
$macro a  b,a
display a;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
173/184


This will expand into:
In such a case GAMS will eventually refuse to do more substitutions
and will issue a compilation error:
Ampersands in Macro Definitions
The expansion of arguments may be more carefully controlled by the
use of ampersands & in the macro body. A single ampersand & is used
as a concatenation or separation symbol to indicate tokens that are
to be replaced. Consider the following example:
This will expand into:
Note that without the ampersand notation, GAMS would have
recognized only the third occurrence of q and hence the expansion
would have been:
Two ampersands && immediately preceding a token will drop the
most outer matching single or double quotes of the replacement
argument. This makes it possible to include expressions with spaces,
commas and unbalanced parentheses. The latter one is something
users should really avoid doing. An example follows.
display b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,b,...
732  Too many edits on one single line - possible rec
        compilation will be terminated
$macro  f(i)  sum(j, x(i,j))
$macro equ(q)  equation equ_&q;  \ 
               equ_&q.. q =e= 0;
set i /i/, j /j/;
variable x(i,j);
equ(f(i))
equation equ_f(i);equ_f(i).. sum(j, x(i,j)) =e= 0;
equation equ_q;equ_q.. sum(j, x(i,j)) =e= 0;
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
174/184


Note that the expressions d contain quotes, spaces and commas and
the expression ss has unbalanced parentheses within the quoted
parts. In turn these expand to become:
Additional Macro Features
Deeply nested macros may require aliased sets in indexed operations
like sum and prod. A minor syntax extension allows the implicit use
of aliases. The suffix .local on a controlling set will use an implicit
alias within the scope of the indexed operation. Consider the
following example:
The assignment statement will expand to:
The second line will not compile because the i in the sum is already
controlled from the i on the left. The intention was the total macro
is to add up the elements of a parameter indexed over i. As in the
r(i) assignment the macro might be used in a statement where i is
already controlled hence when doing the sum in the macro we want
to use an alias of i. If we change the macro definition to
$macro d(q) display &&q;
$macro ss(q) &&q)
set i /i/, k /k/;
parameter a1(i) / i 1/, z;
d('"here it is" , i,k')
d('"(zz"')
z=ss('sum(i,a1(i)');
z=ss('prod(i,a1(i)');
display "here it is" , i,k;
display "(zz";
z=sum(i,a1(i));
z=prod(i,a1(i));
$macro ratio(a,b) a/b
$macro total(q) sum(i,q(i))
set i /i1*i15/;
parameter a(i) / #i 1 /, b(i) / #i 2 /, r(i), asum;
asum = total(a);
r(i) = ratio(total(a), b(i));
asum = sum(i,a(i));
r(i) = sum(i,a(i))/b(i);
$macro total(q) sum(i.local,q(i))
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
175/184


The code works as expected because the i in the sum refers to the
i.local and not the outside i.
Note that the the modifier .local is not limited to macros and may
be used in any context. For further details and more examples, see
the detailed description of the dollar command option $on/offLocal.
Another feature of macros is the implicit use of the suffix .L in report
writing and other data manipulation statements. This allows using
the same algebra in model definitions and assignment statements.
The following code illustrates this feature:
The option $onDotL enables the implicit suffix .L for variables. This
feature was introduced for macros with variables to be used in
equation definitions as well as assignment statements. The matching
option $offDotL will disable this feature. Similarly, $offDotScale will
access the .scale suffix of a variable or equation in an assignment
statement.
Three more switches are relevant to macros. The option $show will
list any GAMS macros defined. The option $on/$offMacro will enable
or disable the expansion of macros; the default is $onMacro. Finally,
the option $on/offExpand will change the processing of macros
appearing in the arguments of a macro call. The default operation is
not to expand macros in the arguments. The switch $onExpand
enables the recognition and expansion of macros in the macro
argument list. The option $offExpand will restore the default
behavior.
Note that macro definitions are preserved in a save/restart file and
are available again for a continued compilation.
Summarizing, macros shares the name space of GAMS symbols, like
sets, parameters, variables, etc. Macros are recognized and expanded
anywhere a proper GAMS identifier may be used. This may be
suppressed with the option $on/offMacro. The body of macros is only
used during expansion. Hence, macro definitions are not order
dependent. Variables in macro bodies will have an implicit suffix .L
$macro sumIt(i,term) sum(i,term)
cost ..        z  =e=  sumIt((i,j), (c(i,j)*x(i,j))) 
supply(i) ..   sumIt(j, x(i,j))  =l=  a(i) ;
demand(j) ..   sumIt(i, x(i,j))  =g=  b(j) ;
Model transport /all/ ;
solve transport using lp minimizing z ;
Parameter tsupply(i) total demand for report
          tdemand(j) total demand for report;
$onDotL
tsupply(i)=sumIt(j, x(i,j));
tdemand(j)=sumIt(i, x(i,j));
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
176/184


when they are used in assignment statements. This GAMS feature
needs to be activated with the option $onDotL.
Compressing and Decompressing Files
GAMS provides two dollar control options for compressing and
decompressing GAMS input files:
Dollar Control Option
Description
$compress  
<source> <target>
The file source is compressed into the
packed file target.
$decompress  
<source> <target>
The compressed file source is
decompressed into the unpacked file
target.
Attention
Spaces are interpreted as separators between the source
and target file names, hence quotes (single or double)
have to be used if the file names contain spaces.
Note that GAMS will recognize whether a file is compressed and will
processes it accordingly.
Note
Like any other GAMS input files, all compressed files are
platform-independent.
Compressing and Decompressing Files: A Simple
Example
We use the well-known transportation model [TRNSPORT] to
illustrate. First we copy the model from the GAMS Model Library and
then we create a compressed version of the original:
Alternatively, the following code snippet may be used from within a
GAMS file:
> gamslib trnsport
> echo $compress trnsport.gms t1.gms > t2.gms
> gams t2
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
177/184


Note that the compressed input file t1.gms can be treated like any
other GAMS input file. If it is executed, the listing file will be identical
to the listing file of the original input file trnsport.gms, since a
decompressed input is reported in the echo print. As usual, the parts
of the model that are marked with the dollar control option
$on/offListing will not appear in the echo print.
The compressed file t1.gms can be decompressed as follows:
Alternatively, from within a GAMS file:
Observe that the decompressed file t3.gms is identical to the
original file trnsport.gms. This can easily be tested with the
following command:
Compressing and Decompressing Files: The Model
CEFILES
The following more elaborate example is self-explanatory. It is
adapted from model [CEFILES] and can easily be modified to test the
use of compressed files.
$call 'gamslib trnsport'
$compress trnsport.gms t1.gms
$include t1.gms
> echo $decompress t1.gms. t3.gms > t4.gms
> gams t4
$decompress t1.gms t3.gms
> diff trnsport.gms t3.gms
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
178/184


Encrypting Files
When models are distributed to users other than the original
developers, issues of privacy, security, data integrity and ownership
arise. To address these concerns, secure work files may be used and
GAMS input files may be encrypted. Note, that the encryption follows
the work file security model and requires special licensing.
Note
Like any other GAMS input files, all compressed and
encrypted files are platform-independent.
Encryption is only available if a system is licensed for secure work
files. There are two way to encrypt a file: Encryption for a particular
user group that is identified by a target license file or for a general
wide audience. In the prior case the key for encryption and
decryption is extracted from the target license (specified by
command line parameter pLicense) while for the latter the key for
encryption and decryption is passed to GAMS via the command line
parameters encryptKey and decryptKey. Note that once a file has
been encrypted it cannot be decrypted any more. GAMS provides the
following dollar control option to encrypt an input file:
* --- get model
$call gamslib -q trnsport
* --- compress and run model
$compress   trnsport.gms t1.gms
$decompress t1.gms       t1.org
$call       diff trnsport.gms t1.org > %system.nullFi
$if         errorLevel 1 $abort files trnsport and t1
* --- check to see if we get the same result
$call gams trnsport gdx=trnsport lo=%gams.lo%
$if   errorLevel 1 $abort model trnsport failed
$call gams t1       gdx=t1       lo=%gams.lo%
$if   errorLevel 1 $abort model t1 failed
$call gdxdiff trnsport t1 %system.reDirLog%
$if   errorLevel 1 $abort results for trnsport and t1
* --- also works with include files
$echo $include t1.gms > t2.gms
$call gams t2 gdx=t2 lo=%gams.lo%
$if   errorLevel 1 $abort model t2 failed
$call gdxdiff trnsport t2 %system.reDirLog%
$if   errorLevel 1 $abort results for trnsport and t2
$terminate
$encrypt <source> <target>
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
179/184


Here the name of the input file to be encrypted is source and the
name of the resulting encrypted file is target.
Encrypting Files: A Simple Example
We use again the transportation model [TRNSPORT] to illustrate. First
we copy the model from the GAMS Model Library and then we create
an encrypted version of the original via a target license:
Note that the first two lines are similar to the directives that we have
used to compress the model above. In the third line, the command
line parameter pLicense specifies the target or privacy license to be
used as a user key for encrypting. Thus the new encrypted file
t1.gms is locked to the license key target and it can only be
executed with the license file target:
Note that the command line parameter license is used to override the
default GAMS license file gamslice.txt that can be located in
various system wide and user locations. Note further that the
command line parameter dumpOpt is usually used for debugging and
maintenance. The value 11 causes a clean copy of the input to be
written to the file t1.dmp, where all include files and macros are
expanded. Observe that if some lines have been marked with the
dollar control options $on/offListing in the original file, then these
lines will be suppressed in the file t1.dmp.
An alternative approach to encrypt GAMS source file without a target
license is done by the pair of command line parameters encryptKey
and decryptKey:
In the third line, the command line parameter encryptKey specifies
the encryption key. Thus the new encrypted file t1.gms is locked and
requires this key to successfully decrypt via command line parameter
decryptKey:
> gamslib -q trnsport
> echo $encrypt trnsport.gms t1.gms > t2.gms
> gams t2 pLicense=target lo=%gams.logOption%
> gams t1 license=target dumpOpt=11
> gamslib -q trnsport
> echo $encrypt trnsport.gms t1.gms > t2.gms
> gams t2 encryptKey=ThisIsAPasswordSomeoneNeedsToRun
> gams t1 decryptKey=ThisIsAPasswordSomeoneNeedsToRun
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
180/184


Anyother key will result in a failure with the message
Integrity check failed.
Note
Once a file has been encrypted, it cannot be decrypted
any more. There is no inverse mechanism to recover the
original file from the encrypted file. An attempt to
decompress it using $decompress will fail.
Observe that decrypting is done on the fly into memory when the
GAMS system files are read. GAMS will recognize if a file is just plain
text or compressed and/or encrypted and will validate and process
the files accordingly.
Encrypting Files: The Model ENCRYPT
The following more elaborate example is self-explanatory; it is model
[ENCRYPT] from the GAMS Model Library.
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
181/184


 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
182/184


$title Input File Encryption Demo (ENCRYPT,SEQ=318)
$onText
Input files can be encrypted with an encryption key. 
privacy license file mechanism or the command line pa
encryptKey/decryptKey can be for managing the passwor
compression, we offer an $encrypt utility to lock any
specific key. Once a file has been encrypted it can o
by a gams program that has the matching license file 
decryption key. There is no inverse operation possibl
the original GAMS file from the encrypted version.
To create an encrypted file, we need a license file w
security option enabled.
Keywords: GAMS language features, input file encrypti
$offText
$if not set MYPLICENSE $set MYPLICENSE "%gams.sysdir%
$ifthen not exist "%MYPLICENSE%"
$   log *** Target license file "%MYPLICENSE%" does n
$   log *** Specify via --MYPLICENSE=...
$   log *** Encryption only via en/decryptKey
$   drop MYPLICENSE
$endif
* --- get model
$onDollar
$call gamslib -q trnsport
$ifthen.MYPLICENSE set MYPLICENSE
* --- encrypt and try to decrypt
$call rm -f t1.gms
$echo $encrypt trnsport.gms t1.gms > s1.gms
$call gams s1 plicense="%MYPLICENSE%" lo=%gams.lo%
$ifE  errorLevel<>0     $abort encryption failed
$eolCom  //
$if not errorFree $abort pending errors
$decompress t1.gms t1.org  // this has to fail
$if     errorFree $abort decompress did not fail
$clearError
*-- execute original and encrypted model
$call gams trnsport gdx=trnsport lo=%gams.lo%
$ifE  errorLevel<>0 $abort model trnsport failed
$call gams t1 license="%MYPLICENSE%" gdx=t1 lo=%gams.
$ifE  errorLevel<>0 $abort model t1 failed
$call gdxdiff trnsport t1 %system.reDirLog%
$ifE  errorLevel<>0 $abort results for trnsport and t
* --- use the encrypted file as an include file
$onEcho > t2.gms
$offListing
* this is hidden
option limRow = 0, limCol = 0, solPrint = off;
$include t1.gms
$onListing
* this will show
$offEcho
$call gams t2 license="%MYPLICENSE%" lo=%gams.lo%
$ifE  errorLevel<>0 $abort model t2 failed
* --- protect against viewing
*     now we will show how to protect parts of an inp
*     file from viewing and extracting original sourc
*     via the gams DUMPOPT parameter. We just need to
*     encrypt again
* --- encrypt new model
$call rm -f t3.gms
$echo $encrypt t2.gms t3.gms > s1.gms
$call gams s1 plicense="%MYPLICENSE%" lo=%gams.lo%
 Hide Table of Contents
Version:
Documentation
Model Libraries
Index
Help
2024/9/26 16:13
Dollar Control Options
https://www.gams.com/latest/docs/UG_DollarControlOptions.html
183/184


g
p
g
$ifE errorLevel<>0  $abort encryption failed
$call gams t3 license="%MYPLICENSE%" gdx=t3 dumpopt=1
$ifE errorLevel<>0 $abort model t3 failed
$call gdxdiff trnsport t3 %system.reDirLog%
$ifE errorLevel<>0 $abort results for trnsport and t3
* --- check for hidden output
$call grep "this is hidden" t3.lst > %system.nullfile
$if not errorLevel 1 $abort did not hide in listing
$call grep "this is hidden" t3.dmp > %system.nullfile
$if not errorLevel 1 $abort did not hide in dump file
$endif.MYPLICENSE
* Same with encryptKey/decryptKey
* --- encrypt and try to decrypt
$call rm -f t1.gms
$echo $encrypt trnsport.gms t1.gms > s1.gms
$call gams s1 encryptKey=ThisIsMyPassword lo=%gams.lo
$ifE  errorLevel<>0     $abort encryption failed
$eolCom  //
$if not errorFree $abort pending errors
$decompress t1.gms t1.org  // this has to fail
$if     errorFree $abort decompress did not fail
$clearError
*-- execute original and encrypted model
$call gams trnsport gdx=trnsport lo=%gams.lo%
$ifE  errorLevel<>0 $abort model trnsport failed
$call gams t1 decryptKey=ThisIsMyPassword gdx=t1 lo=%
$ifE  errorLevel<>0 $abort model t1 failed
$call gdxdiff trnsport t1 %system.reDirLog%
$ifE  errorLevel<>0 $abort results for trnsport and t
* --- use the encrypted file as an include file
$onEcho > t2.gms
$offListing
* this is hidden
option limRow = 0, limCol = 0, solPrint = off;
$include t1.gms
$onListing
* this will show
$offEcho
$call gams t2 decryptKey=ThisIsMyPassword lo=%gams.lo
$ifE  errorLevel<>0 $abort model t2 failed
* --- protect against viewing
*     now we will show how to protect parts of an inp
*     file from viewing and extracting original sourc
*     via the gams DUMPOPT parameter. We just need to
*     encrypt again
* --- encrypt new model
$call rm -f t3.gms
$echo $encrypt t2.gms t3.gms > s1.gms
$call gams s1 encryptKey=ThisIsMyPassword lo=%gams.lo
$ifE errorLevel<>0  $abort encryption failed
$call gams t3 decryptKey=ThisIsMyPassword gdx=t3 dump
$ifE errorLevel<>0 $abort model t3 failed
$call gdxdiff trnsport t3 %system.reDirLog%
$ifE errorLevel<>0 $abort results for trnsport and t3
* --- check for hidden output
$call grep "this is hidden" t3.lst > %system.nullfile
$if not errorLevel 1 $abort did not hide in listing
$call grep "this is hidden" t3.dmp > %system.nullfile
$if not errorLevel 1 $abort did not hide in dump file