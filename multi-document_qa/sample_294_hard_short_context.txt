a 
a 
Institute of 4D-Technologies, University of Applied Sciences Northwestern Switzerland FHNW, Switzerland 
b 
Esri R&D Center Zürich, Switzerland 
a r t i c l e 
i n f o 
Article history: 
Received 13 April 2017 
Revised 11 October 2017 
Accepted 16 October 2017 
Available online 16 November 2017 
Keywords: 
Real-time visualization 
Snow approximation 
GIS 
GPGPU 
Game engine 
a b s t r a c t 
Various terrain visualization techniques based on geographic information system (GIS) data already ex- 
ist. One major drawback of existing visualizations is that they do not capture seasonal variations well. 
Besides vegetation variations, in colder areas this particularly also applies to snow cover. In this paper, 
we propose a real-time multi-scale snow cover approximation and visualization for large terrains. The 
computation runs on a large grid, calculates the snow/water equivalent based on precipitation data from 
a GIS and snowmelt based on a physically-based solar radiation calculation combined with a degree-day 
snowmelt approach using level of detail (LOD). The snow visualization is divided into two parts: Zero 
thickness snow cover textures are generated for distant views. For close up views the terrain’s height 
ﬁeld is modiﬁed using displacement maps and tessellation to produce thick snow covers. The GPU-based 
data-parallel computation and the visualization run on the GPU in real-time on a modern desktop com- 
puter. The implementation is tested using a real area in the Swiss Alps, with a size of 14.16 by 12.88 
km, a grid resolution of 222 × 206, and a time step of 1 h. We compare the rendered results spanning 
several months with a time series of photographs from webcams for visual accuracy. 
© 2017 Elsevier Ltd. All rights reserved. 
1. Introduction 
Visualizations of elevation data from geographic information 
systems (GIS) already exist with sophisticated techniques [1–3] 
. 
The most common way to enhance realism of such renderings is to 
project aerial photography onto the digital elevation model (DEM). 
As previously pointed out by Premoz 
˘
e [4] several problems arise 
from this approach: For example, the orthoimage may still con- 
tain shadows which leads to visual artifacts if visualizations for 
different times of the day are created. Also, the visualizations do 
not capture seasonal variations and remain static. If a season spe- 
ciﬁc rendering is desired, the user needs to adapt the landscape 
by hand. In colder climates, snow drastically changes the appear- 
ance of landscapes during winter. Premoz 
˘
e solves this by simulat- 
ing snow cover and then rendering it over the original aerial im- 
agery. His method aims at distant views and produces zero thick- 
ness snow textures for static images rendered by a ray-tracer and 
does not run in real-time. Other snow visualizations and simula- 
 This article was recommended for publication by Bedrich Benes. 
∗Corresponding 
author 
at: 
Institute 
of 
4D-Technologies, 
University 
of 
Applied 
Sci- 
ences Northwestern Switzerland FHNW Switzerland. 
E-mail 
addresses: 
BNeukom@Esri.com 
(B. 
Neukom), 
SArisona@Esri.com 
(S. 
Müller 
Arisona), simon.schubiger@fhnw.ch (S. Schubiger). 
tions exist [4–6] but they are either not suitable for large terrains 
or do not run in real-time. 
In this paper we build upon Premoz 
˘
e’s work and propose a 
method to simulate and visualize snow cover for large terrains in 
real-time with different level of details. Our goal is to create a 
GIS-based snow cover approximation, which uses generally avail- 
able input data such as high-resolution height maps, aerial imagery 
and temperature/precipitation time series, does not require man- 
ual intervention, runs at interactive framerates and still produces 
physically plausible as well as visually pleasing renderings. To the 
best of our knowledge, this is the ﬁrst paper that realizes real-time 
multi-scale snow cover computation. 
To achieve our goals, we compute snow accumulation by as- 
suming precipitation below a certain temperature threshold to be 
snowfall. Our method uses different levels of details (LOD) for im- 
proved performance and produces thick snow covers for close-up 
views and zero thickness textures for distant views. The thick snow 
cover is generated by displacing the landscape according to the 
amount of snow generated from the computation. After the accu- 
mulation, the snow is redistributed according to the relationship 
described by Blöschl et al. [16] to account for snow depletion based 
on slope and wind. To compute snowmelt, a degree-day approxi- 
mation similar to the one used by Premoz 
˘
e et al. [4] is run on 
the GPU. The snowmelt simulation calculates the solar radiation 
https://doi.org/10.1016/j.cag.2017.10.003 
0097-8493/© 2017 Elsevier Ltd. All rights reserved. 


B. Neukom et al. 
/ 
Computers & Graphics 71 (2018) 14–22 
15 
Table 1 
Comparison of previous work. In the performance column, R stands for real-time, NR for non-real-time, and I for interac- 
tive. 
In 
the 
physically-based 
and 
large-scale 
column, 
PA 
indicates 
partially 
realized 
techniques. 
In 
the 
snow 
model 
column, 
H 
stands 
for 
heuristic 
and 
P 
for 
particle-based. 
As 
shown, 
the 
majority 
of 
previous 
works 
focused 
on 
small-scale, 
non-real- 
time 
methods. 
The 
methods 
proposed 
by 
Premoz 
˘
e 
et 
al 
[4] 
and 
Foldes 
and 
Benes 
[5] 
work 
for 
large 
scenes 
but do 
not 
run 
in real-time. 
Performance 
Artist interaction 
Physically-based 
Large-scale 
Snow model 
Premože et al. [4] 
NR 
PA 
PA 
H 
Fearing [6] 
NR 
PA 
P 
Haglund et al. [7] 
R 
√ 
P 
Feldman and O’Brien [8] 
NR 
√ 
√ 
P 
Ohlsson and Seipel [9] 
R 
√ 
H 
Moeslund et al. [10] 
NR 
√ 
P 
Wang et al. [11] 
R 
√ 
P 
Saltvik et al. [12] 
IN 
√ 
PA 
P 
Foldes and Benes [5] 
NR 
√ 
P 
Hinks and Museth [13] 
NR 
P 
Festenberg and Gumhold [14] 
NR 
√ 
H 
Reynolds et al. [15] 
R 
H 
Ours 
R 
PA 
√ 
H 
Fig. 1. (A) The scene after the ﬁrst snowfall with snow already melting and not sticking to the ground well (as described in Section 4.2 
). (B) The same scene after more 
snowfall, 
with 
the 
ground 
almost 
fully 
covered 
in 
snow. 
(C) 
The 
scene 
in 
late 
January 
with 
even 
more 
snow 
and 
the 
tree 
trunks 
almost 
fully 
buried 
using 
displacement 
maps 
as described in Section 4.3 
. 
for each cell at the given time of the year by approximating the 
sun’s position as described by Swift [17] and uses the solar radia- 
tion as an index for the snowmelt calculation. The inputs for the 
computation are temperature and precipitation. 
In summary, our main contributions are: 
• A snow cover approximation for large terrains based on GIS 
data with visual validation using webcam time series from the 
Swiss Alps. Using our snow cover approximation only the initial 
degree-day factor has to be adjusted by hand, a process which 
took about 10 minutes to achieve realistic snow covers for a 
whole season. 
• An LOD implementation for the snow computation which cal- 
culates high LOD snow covers close to the camera and a lower 
LOD spanning the whole scene. 
• An implementation running in real-time using a game engine. 
Fig. 1 illustrates the results of this work. On the left-hand side 
the scene is shown after ﬁrst snowfall with snow already melting 
again. In the middle the scene is shown with the ground fully cov- 
ered in snow and on the right-hand side the displacement of the 
snow is shown with tree stumps covered in snow the The com- 
putation of one timestep took about 0.3 ms and can be rendered 
with over 100 frames per second on a modern desktop computer. 
This paper is organized as follows: In Section 2 we give a com- 
prehensive overview of existing snow simulations. Section 3 lays 
out the theoretical foundation for our approach. In Section 4 we 
describe how the approximation is implemented on the GPU to 
achieve real-time performance. In Section 5 we present the results 
of our work. We describe the data used for the computation and 
then compare the results to real photographs to assess visual ac- 
curacy. We also evaluate the performance with varying time steps. 
The paper concludes with Section 6 where we also provide possi- 
ble future directions. 
2. Related work 
The related works can roughly be categorized into two cate- 
gories: Heuristic models that approximate snow accumulation in- 
stead of simulating particles to accumulate snow. Particle-based 
that models simulate the behavior of snow particles and their ac- 
cumulation on objects. 
2.1. Heuristic models 
Heuristic models approximate snow accumulation instead of 
simulating particles. Premože et al. [4] introduced a system which 
uses techniques from geology to simulate snow accumulation and 
snowmelt for mountainous terrains. They assume rain under a cer- 
tain air temperature to be snow and use a degree-day simulation 
for the snowmelt. Their method produces zero-thickness snow and 
is intended for distant scene views. Our work is based on Pre- 
moz 
˘
e’s idea of using a degree-day simulation for snowmelt. Foldes 
and Benes [5] proposed another approach by using ambient occlu- 
sion to compute the shape of the snow in ditches or secluded areas 
for large terrains. Their method does not deal with falling snow or 
wind but rather with ablation and snow melting and is therefore 
better suited for distant views of large scenes. 
Other research is inspired by shadow buffer techniques to ap- 
proximate the accumulation of snow. Ohlsson and Seipel [9] pro- 
posed a per-pixel method similar to shadow mapping, using a 
depth buffer to determine how much snow a surface should re- 
ceive. The ﬁnal amount of snow is then calculated depending on 
the surface slope. As the last step, 3D noise is applied for con- 
vincing lighting of the snow. This method provides good results for 
smaller scenes in real-time. For larger scenes, their method is not 
suitable as the depth buffer map would require a very high resolu- 
tion. Reynolds et al. [15] also presented a method that uses shadow 
mapping to compute occlusions for snow accumulation. Their main 


16 
B. Neukom et al. 
/ 
Computers & Graphics 71 (2018) 14–22 
contributions are the addition of mapping multiple accumulation 
buffers to each object. This allows simulating a more dynamic, 
moving scene where snow accumulates. To visualize snow height, 
they do not generate new polygonal meshes as described by Ohls- 
son but rather use tessellation shaders and displacement maps. In 
our visualization implementation, we also use displacement maps 
similar to Reynolds’ method. 
Festenberg and Gumhold [14] proposed a geometrical approach 
which improves Haglund et al. [7] height map model and is in- 
spired by real world observations. Their model is based on the ob- 
servation that a smooth curve is formed near the edges of snow 
covered surfaces. The form of this curve depends on various fac- 
tors like snow depth or different weather conditions, but the ba- 
sic shape always remains the same. In their implementation, they 
use a height span map described by Onoue and Nishita [18] to 
compute the snow cover probability distribution. Their method 
produces good looking results, with good performance for small 
scenes. It is also ideally suited to animate accumulated snow, since 
the snow cover probability distribution is only calculated once and 
can be used to determine a range of snow heights. However, the 
algorithm does not work well with certain geometries like small 
crests or small planes and its initial parameters have to be chosen 
carefully for any given scene to produce good results. 
2.2. Particle-based models 
Particle-based methods model snow cover by simulating parti- 
cles and then accumulating snow where particles collide with ob- 
jects. One of the most sophisticated particle based methods was 
described by Fearing [6] 
. His method is a two-phased particle 
based simulation which produces thick layers of snow by gener- 
ating new meshes. The accumulation phase computes how much 
snow a surface receives by shooting particles towards the sky to 
compute possible occlusions. Each surface therefore has indepen- 
dent control over its sampling rate and density. This phase al- 
lows for phenomena such as ﬂake ﬂutter, the inﬂuence of wind 
and the snow’s ability to stick on uneven surfaces. The stabil- 
ity phase moves snow away from physically unstable areas. This 
is achieved by simulating small, simultaneous avalanches which 
move the snow to more stable areas by calculating the angle of 
repose between neighboring triangles. Thus, the snow is redis- 
tributed to neighboring areas if the angle is too steep. Fearing’s 
method produces visually beautiful scenes with a minimal amount 
of interaction by a designer, but it cannot be used for a real-time 
simulation due to its complexity. 
Haglund et al. [7] introduced a method which uses a two- 
dimensional height matrix that stores the current snow depth. 
When a snowﬂake hits the ground the value at the corresponding 
entry in the height matrix is increased. The height matrices are 
then used to triangulate and render the area with snow cover in 
real-time. The combination of appropriate blending and Gouraud 
shading gives the impression of snow slowly accumulating on a 
surface. One drawback of their method is that the height value ma- 
trix has to be manually placed and therefore requires much work 
for large scenes. Also, it is not suitable for arbitrary landscapes 
but rather for surfaces without steep slopes, since snow redistri- 
bution is not handled in their simulation. Saltvik et al. [12] have 
extended Haglund’s method with a dynamic wind simulation and 
implemented it on general purpose graphics processors (GPGPU) to 
achieve interactive framerates. Their simulation runs in real-time 
and therefore simulating a whole season is not feasible. 
Several studies build on Fearing’s particle simulation and snow 
stability test. Feldman and O’Brien [8] use the ﬂuid simulation de- 
scribed by Fedkiw et al. [19] to model a more sophisticated wind 
ﬁeld as used by Fearing. They use the wind ﬁeld to compute how 
snow moves through the air and is accumulated on the objects. 
To displace the accumulated snow, they apply Fearing’s avalanche 
method. Moeslund et al. [10] improved Fearing’s method by mod- 
elling the physical properties of snowﬂakes and their movement 
more precisely. They also simulate a wind ﬁeld similar to Feldman. 
Wang et al. [11] simulate snow using wind ﬁelds for very small 
scenes in real-time. Hinks and Museth [13] proposed a method 
that builds on the work of Moeslund et al.; however instead of 
using polygonal meshes to represent snow, they use level set sur- 
faces which are inherently smooth. Explicit geometries as used by 
Moeslund or Fearing tend to produce sharp edges and are compu- 
tationally expensive when handling unstable snow areas. 
Additional methods model the heat exchange within a scene 
to model snowmelt. Muraoka and Chiba [20] described a particle- 
based method using virtual temperature and air ﬁelds for snow 
accumulation. They describe a technique for changing the shape 
of the snow cover where snowmelt is affected by sunlight, ground 
temperature and radiation heat from surrounding objects. Temper- 
ature values are stored in a voxel space. Their system provides a 
detailed simulation for close up scenes but is not suited for a real- 
time visualization as the computational costs are too high. 
Our method does not use the particle-based approach but we 
nonetheless incorporate some ideas proposed in this Section. We 
also use a grid-based approach described by Haglund et al. and 
extend his method, similarly to Reynolds [15] to use displacement 
instead of meshes to generate thick snow. 
3. Computation 
In this section, we describe how the approximation of snow ac- 
cumulation, snowmelt and redistribution of the snow according to 
a given terrain are computed. 
3.1. Snow accumulation 
The ﬁrst phase of the computation is snow accumulation. The 
terrain is divided into cells. The cell size can be adjusted to ﬁt the 
terrain data. We chose 64m as the side length of the cells. Each 
cell stores its snow water equivalent (SWE), the amount of wa- 
ter contained in the snowpack per m 
2 
. Similarly to Premoz 
˘
e, the 
amount of accumulated snow is determined by assuming precipita- 
tion below a speciﬁc air temperature threshold to be snow and by 
calculating the snow water equivalent for every cell. This thresh- 
old temperature is typically set to 0 
°C. To achieve smoother snow 
cover transitions we linearly interpolate between snow and rain at 
the air temperature threshold as described by Barringer [21] 
. Air 
temperature and precipitation are passed into the computation at 
a base location with a lapse rate. For the examples in this paper, 
we adopted a temperature lapse rate of 0.6 
°C per 100 m of altitude 
and a precipitation lapse rate of 10 mm per 10 
0 
0 m of altitude 
[22] 
. 
3.2. Snowmelt 
The second phase of the computation is snowmelt. The most 
common ways to simulate snowmelt in geology are the empirical 
degree-day method and the more physically-based energy balance 
approach. The degree-day method uses air temperature as an in- 
dex to calculate snowmelt. As described by Rango and Martinec 
[23] the degree-day method is still in heavy use since simulations 
based on it provide accurate results and do not rely on a lot of 
input data. 
The physically-based energy balance models have become in- 
creasingly complex in recent years. At the core of the physically- 
based snowmelt procedures are the energy balance equations [24] 
. 
In order for these simulations to work, they require accurate data 
and interpolation mechanisms for wind speed, air temperature, air 


B. Neukom et al. 
/ 
Computers & Graphics 71 (2018) 14–22 
17 
Fig. 2. Two textures with the amount of snow coded as grayscale values from an artiﬁcially generated mountain. Note that darker intensities represent more snow cover. 
(A) The mountain after fresh snow has fallen, fully covered in snow. (B) The same mountain with snow melted considerably. We can see the inﬂuence of the aspect for the 
snowmelt. The red circle marks the top of the mountain. In the northern hemisphere south facing slopes receive more solar radiation and therefore snow melts faster. The 
visual result is comparable to Maréchal et al. [29] radiation calculation, where they used a (non-real-time) physically-based thermal simulation to calculate snowmelt. (For 
interpretation of the references to color in this ﬁgure legend, the reader is referred to the web version of this article.) 
pressure, humidity and precipitation [25] 
. In our approach, we de- 
cided to use the use the empirical degree-day method and com- 
bine it with a physically-based solar radiation calculation as de- 
scribed below. Computing the energy balance equations would 
have resulted in poor performance and the amount of input data 
needed to compute snowmelt for large terrains is not generally 
available. 
Normally the degree-day method is used with a daily time step, 
but as described by Hock [26] it can be adapted to an hourly time 
step by adding a radiation component. Using an hourly time step 
provides accurate results for small time frames. The basic expres- 
sion relating the snowmelt M to the temperature index C 
m and 
degree-days is as follows: 
M = 
C 
m 
(T 
air −T 
melt 
) 
(1) 
where M is the snowmelt in mm. C 
m is the degree-day factor in 
mm 
◦C 
−1 
d 
−1 , which is the amount of melt that occurs for a pos- 
itive degree-day. T 
melt is the critical temperature at which point 
snow starts to melt. It is typically around 0 
°C. We again applied 
linear interpolation for the melt threshold to provide smoother 
snow transitions. C 
m is calculated as follows: 
C 
m = R 
i ∗(1 
−A 
) 
(2) 
The radiation index R 
i is the radiation that a surface with a 
given slope and aspect receives, normalized to a surface with a 
horizontal alignment. We used the algorithm proposed by Swift 
[17] to calculate the daily total solar radiation. Premože et al. 
[4] used a daily time-step in their simulation [4] 
. We decided 
to use an hourly time-step to provide more accurate results for 
smaller time frames. Solar radiation follows a diurnal pattern and 
reaches its peak during the afternoon. Monteith [27] proposed a 
sine-curve approximation for hourly radiation calculation. The ra- 
diation index at a given hour of the day t is calculated as follows: 
R 
i 
(t) = πR 
i 
2 ∗sin 
πt 
D 

(3) 
where sunrise is at t = 0 and sunset is at t = D 
. The albedo A used 
in Eq. (2) is important for estimating the amount of radiation the 
snowpack absorbs. The albedo decreases with time as proposed 
by Eggleston et al. [28] 
. They noted that the albedo varies from 
around 0.8 for freshly fallen snow to 0.4 during melting. Eq. (4) ap- 
proximates this variation with an exponential function: 
A 
(t) = 0 
. 
4 
∗(1 
+ 
e 
−0 
. 
2 
t 
) 
(4) 
where t is the time since the last snowfall. 
3.3. Snow redistribution 
The third computation phase distributes accumulated snow. 
Premože et al. [4] deposit snow by elevation. However, they are 
not concerned with the ﬁnal snow height since they only render 
ﬂat textures where snow accumulates only [4] 
. We are interested 
in the snow height and therefore need a more accurate snow redis- 
tribution mechanism. Fearing [6] used a snow stability test which 
moves snow away from unstable positions. However, the results 
are computed iteratively and the test is therefore unsuitable for 
real-time application with large terrains. 
Wind and inclination are generally accepted as the major driv- 
ing forces in snow redistribution [16] 
. Unfortunately, a wind simu- 
lation as proposed by Feldman and O’Brien [8] or Moeslund et al. 
[10] is not feasible for large terrains in real-time. We therefore de- 
cided to use an empirical interpolation that uses terrain slope and 
curvature to approximate the ﬁnal water equivalent. The curvature 
is used to approximate snow depletion on mountain tops which 
are caused by wind as well as snow accumulation in gullies. The 
interpolation function we used was proposed by Blöschl et al. [16] 
: 
f(w 
) = w 
∗(1 
−f(θ))(1 
+ 
a 
3 ∗κ) 
(5) 
where w is the snow water equivalent, a 
3 is an empirical coeﬃ- 
cient which is used to weight the effect of the curvature on the 
ﬁnal water equivalent interpolation, θ the slope and κ the curva- 
ture. We used 50 as suggested by Blöschl. The function f 
( 
θ) deﬁnes 
the inﬂuence of slope on the water equivalent and is given by: 
f(θ) = 

0 
θ < 10 
◦
θ/ 
60 
◦
otherwise 
(6) 
The curvature of the terrain is computed in a pre-processing 
step by calculating the second derivative of the terrain as sug- 
gested by Zevenbergen and Thorne [30] 
. By using this interpola- 
tion scheme, we account for snow accumulation in gullies as well 
as snow depletion on steep slopes and tops. In Fig. 4 we can see 
the results of the interpolation: Steep slopes and mountain tops 
accumulate much less snow than ﬂat areas and gullies. 
4. Implementation 
Modern game engines are considered suitable for non-game vir- 
tual worlds since they provide features such as high-performance 
rendering and high-quality dynamic lighting out of the box [31] 
. 


18 
B. Neukom et al. 
/ 
Computers & Graphics 71 (2018) 14–22 
Fig. 3. (A) Grid level of detail: The red grid (166 × 118 cells, 6.695 × 4.7825 km) represents the higher level of detail closer to the camera while the green grid (166 ×
118 cells, 53.56 × 38.26 km) represents the large low level of detail grid for the snow cover computation. When the camera moves, new cells in the high LOD grid (red) 
have 
to 
be 
update 
to 
include 
the 
snow 
level 
computation 
for 
the 
current 
current 
time 
step. 
The 
lower 
LOD 
grid 
(green) 
is 
not 
affected 
by 
the 
camera 
and 
therefore 
does 
not 
need 
to 
be 
recomputed 
when 
the 
camera 
moves. 
(B) 
The 
scene 
covered 
in 
generated 
snow 
using 
the 
LOD 
as 
described 
in 
Section 
4.1 
. 
(For 
interpretation 
of 
the 
references 
to 
color in this ﬁgure legend, the reader is referred to the web version of this article.) 
We decided to use the Unreal Engine to implement our approach. 
Using Unreal Engine, landscapes can be imported from digital ele- 
vation models and rendered at interactive framerates with adap- 
tive LOD using tessellation. Unreal Engine also provides a de- 
vice independent abstraction over the underlying graphics pipeline 
which we used to implement our computations. In Algorithm 1 
, 
Algorithm 1 Snow computation pseudocode which runs on the 
GPU. 
1: function ComputeCell 
2: 
if P 
recipitation > 0 then 
3: 
LastSnow fall ← 0 
. 
4: 
if T 
air > T 
rain then 
5: 
Albedo ← 0.4 
6: 
else 
7: 
SWE ← SWE 
+ 
Precipitation 
∗Area 
8: 
if SWE > 0 then 
9: 
if LastSnow fall > 
= 0 then 
10: 
Albedo 
← 0 
. 
4 
∗(1 
+ 
exp 
(0 
. 
2 
∗LastSnowfall 
)) 
11: 
if T 
air > T 
melt then 
12: 
R 
i ← SolarRadiationIndex 
(t) 
13: 
C 
m ← R 
i ∗(1 −Albedo 
) 
14: 
M ← 
C 
m ∗(T 
air −T 
melt 
) 
15: 
SW 
E ← SW 
E −M 
16: 
SW 
E ← InterpolateSWE 
() 
17: 
the pseudo code which was derived from the previous Section is 
shown. This code is executed for each cell and for each time step. 
As shown, each cell is independent of neighboring cells so the sim- 
ulation can be run in a highly parallel way and can therefore be 
implemented as a compute shader that executes on the GPU. 
The compute shader writes the amount of snow-water equiva- 
lent coded as grayscale values into a texture of the dimension as 
the computation grid. This generated texture is later used for the 
displacement of the snow height, and the fragment shader modi- 
ﬁes the aerial image to include the generated snow. Refer to Fig. 2 
for two examples of such a texture. As previously pointed out, 
our method visually compares to the physically-based approach of 
Maréchal et al. [29] but in contrast runs in real-time. 
4.1. Level of detail 
To improve performance for large scenes, we added two levels 
of detail (LOD): The low LOD consists of a coarse grid, which spans 
over the whole simulation area. The high LOD is calculated in a 
grid of high resolution covering the area near the camera. When 
the camera position or orientation changes, our implementation 
determines which grid cells from the low LOD enter the high LOD. 
For these cells, the snow level computation is carried out up un- 
til the current computation time step from the beginning of the 
simulation. Recalculation using the high resolution grid is neces- 
sary, because the results from the low LOD computation might 
not be accurate enough for close up views. As we will show in 
Section 5.4 these computations are carried out with low overhead. 
Cells which remain in the high LOD since the last update do not 
need to recalculate all time steps. The low LOD grid is not affected 
by camera position and orientation, and therefore no additional 
computations on this grid are required when the camera moves. 
Fig. 3 shows the two LOD grids for a large scene in the Swiss Alps 
(6.695 × 4.7825 km for the high LOD and 53.56 × 38.26 km for 
the low LOD). Using this LOD technique we can approximate snow 
cover for very large scenes and still achieve high frame rates. Re- 
fer to Section 5.4 for an in-depth discussion on performance of our 
implementation. 
4.2. Snowshading 
To shade the landscape with snow cover we use the snow 
height texture with the amount of snow coded as grayscale val- 
ues. We linearly interpolate between the aerial image and a snow 
texture according to the snow amount from the grayscale texture. 
Furthermore, we use the snow water equivalent relationship de- 
scribed by Blöschl et al. [16] by linearly interpolating the amount 
of snow which gets rendered between the pixel normal vector and 
a vector which is horizontal to the ground. This interpolation re- 
duces artifacts where the cell sizes are too large to capture small 
scale slope variations in the terrain. To improve the rendering of 
wet and warm snow we use the albedo from the simulation to de- 
crease the angle at which snow sticks to the ground. As described 
by Trabant et al. [32] this angle can reach values as low as 5 
° for 
wet snow with a temperature of over 0 
°. 
4.3. Snow thickness 
To produce the appearance of snow rising and disappearing 
throughout the season we used displacement maps [33] 
. Displace- 
ment maps modify the actual geometric vertex positions of a sur- 
face, and are normally used in combination with tessellation and 
tessellation shaders. 
Displacement maps have already been used by Barré-Brisebois 
[34] or Yanyun et al. [35] to modify snow cover on the ground 
interacting with surrounding objects. We do not generate new 
meshes for the snow as described by Haglund or Fearing, but 
rather use displacement maps to modify the height of the land- 
scape which gives the appearance of snow accumulation. Reynolds 
already used this technique for small-scale snow accumulation pat- 
terns and we adopt it for larger scales [15] 
. In contrast to Haglund’s 


B. Neukom et al. 
/ 
Computers & Graphics 71 (2018) 14–22 
19 
Fig. 
4. On 
the 
left-hand 
side 
the 
original 
terrain 
with 
a 
projected 
aerial 
image 
is 
shown. 
The 
green 
plane 
marks 
the 
cross 
section 
used 
for 
the 
illustration 
on 
the 
right-hand 
side, which shows the terrain with with snow cover: The green area represents the surface without snow accumulation. The white stripe represents the accumulated snow, 
with 
a 
thicker 
snow 
level 
on 
ﬂat 
areas 
and 
a 
thinner on 
steep 
slopes. 
According 
to 
this 
stripe, 
the 
landscape 
was 
displaced 
as 
described 
in Section 
4.1 
. (For 
interpretation of 
the references to color in this ﬁgure legend, the reader is referred to the web version of this article.) 
method, in which the height matrices for the ﬁnal snow meshes 
have to be hand placed, our solution does not require additional 
manual interaction by a designer. 
We use the gray-scale texture with the snow height generated 
from the compute shader as a displacement map. Each vertex from 
the landscape is then displaced according to its normal vector to 
match the simulated snow height. To increase the performance, 
displacement maps are only applied close to the camera, i.e. on 
the low LOD grid. For distant views of a scene the displacement is 
not visible and can therefore be omitted. For our test scenes, addi- 
tional tessellation was not needed as the landscape mesh already 
contains enough vertices to produce good results for the displace- 
ment. If tessellation is needed for other scenes, it can easily be 
added to the existing solution. 
Fig. 4 illustrates the results of the snow displacement. On the 
left hand side, the original scene at an altitude of 3500 meters, 
without snow cover is shown. The green plane represents the cross 
section shown on the right-hand side, which is used to visualize 
the displacement. On the right-hand side, the lower green area 
represents the surface without snow accumulation. We can see 
that on the steeper slopes less snow is accumulated and therefore 
the surface is not displaced as much as on the ﬂatter ground. 
Fig. 1 illustrates how displacement and snow shading tech- 
niques affect the look of the scene. With displacement, the ris- 
ing and sinking snow can be visualized throughout a whole season 
with accurate snow heights. 
5. Results 
In this Section, we present the results of our snow cover ap- 
proximation. We ﬁrst describe the input data for testing and eval- 
uation, and describe how we set up the initial conditions for the 
computation. The results of the simulation are then compared to 
photographs to assess the visual accuracy. At the end of the Sec- 
tion we discuss the performance. 
5.1. Input data 
Elevation and climate data are globally available. We chose a 
region around the village of Zermatt in Switzerland. The region 
features rugged terrain with steep slopes and mountains reach- 
ing above 40 
0 
0 m altitude where snow does not fully melt dur- 
ing summer. We used the swissALTI3D digital terrain model with 
a 2 m spatial resolution. The digital elevation model was acquired 
using LIDAR sensors with an accuracy of ± 0.5m up to 20 
0 
0 m al- 
titude and ± 1-3m above 20 
0 
0 m. Additionally we used the Swis- 
sImage aerial imagery with pixel sizes of 2.5 m to texture the dig- 
ital terrain model. The hourly precipitation and temperature data 
are from a station located in Zermatt. The data is collected from 
the SwissMetNet automatic meteorological network database. The 
time frame of our test case is from October 2015 until April 2016 
[36] 
. 
5.2. Initial conditions 
To provide accurate initial conditions, we need to estimate the 
snow line for permanent snow cover. For the Swiss Alps the snow 
line is somewhere around 250 
0 m–280 
0 m depending on the 
area’s aspect [37] 
. We again used Blöschl’s approximation to es- 
timate the initial amount of snow [16] 
. 
w = (a 
1 + 
a 
2 
z)(1 
−f(θ))(1 
+ 
a 
3 ∗κ) 
(7) 
where f 
( 
θ) is the same as in Eq. (5) and z is the altitude. We used 
this approximation to estimate the water equivalent above 2700m 
altitude and used the value 2.5 for a 
1 and 0.001 for a 
2 
. The coeﬃ- 
cient a 
3 was set to 0.5. In the ﬁrst row of Fig. 5 the initial approx- 
imation is shown. 
5.3. Visual accuracy 
To assess visual accuracy, we used real photographs of a Zer- 
matt gondola station web camera and compared them to the re- 
sults of our implementation [38] 
. Note that only the high level of 
detail was computed for this visualization as the area was small 
enough and no additional level of detail was needed. 
In Fig. 5 we can see results of our approximation from 
12.10.2015 to 21.04.2016 compared to photographs. The ﬁrst row is 
on 12.10.2015 at the beginning of the simulation. The snow at the 
top of the mountains is approximated as described in Section 5.2 
. 
The second row is on 18.10.2015 after the ﬁrst snowfall. We can see 
that the snow line was accurately simulated. The third row shows 
the results on 16.01.2016 with the scene fully covered in snow after 
heavy snowfall in early January. The last row shows the results on 
21.04.2016 with snow beginning to melt as the temperature rises. 
Trees in our visualization were placed by hand and the city model 
integrated using OpenStreetMap data [39] 
. 
To achieve the results shown in Fig. 5 
, only the initial degree- 
day factor and the cell size had to be tweaked manually, which 
took around 10 minutes to ﬁnd good values. For further steps dur- 
ing the computation, no additional manual tweaks were necessary. 
5.4. Performance 
We ﬁrst show the performance of the snow cover approxima- 
tion without LOD and then show the scalability using LOD. For 
all tests we used a desktop computer with an Intel i7-4770K CPU, 
16GB of RAM and an NVIDIA GeForce GTX 960 GPU. 
5.4.1. Snow cover approximation 
To test the performance of the snow cover approximation with- 
out LOD we used the same scene as in Section 5.3 
. The dimensions 


20 
B. Neukom et al. 
/ 
Computers & Graphics 71 (2018) 14–22 
Fig. 5. Comparison of webcam images (left) of Zermatt with our simulation (right). Trees were placed by hand and the sun position was approximated from the webcam 
image. (A) Start of the computation on 12.10.2015 with only the initial snow visible. (B) The results on 18.10.2015 after the ﬁrst snowfall. The snowline was accurately 
computed. (C) The results on 16.01.2016 after the ﬁrst heavy snowfall with the whole scene covered in snow. (D) The results on 21.04.2016 with snow beginning to melt as 
the temperature rises. We can see the effect the albedo has on the snow shading as described in Section 4.2 
. 
of the simulation grid are 222 
× 206 and each cell covers an area 
of 4096 m 
2 
. 
In Fig. 6 the runtime compared to the number of steps (hours) 
per iteration is shown. We used an average of 10 iterations to cal- 
culate the values for each step size. The time was calculated by 
querying the GPU clock frequency and then querying the clock 
times before and after executing the compute shader, so only the 
GPU time is measured. 
For large time steps, we can see an apparent performance gain 
compared to smaller time steps (computing 10 
0 
0 steps per iter- 
ation is not 10 
0 
0 times slower than computing one step 10 
0 
0 
times). This is because we only need to interpolate the water 
equivalent once instead of 10 
0 
0 times. Also, we need to execute 
the compute shader less often to compute the same time span. 
Overall, we can see that the computation runs at interactive frame 
rates even for large step sizes per iteration and at real-time frame 
rates for smaller step sizes per iteration. Computing large time 
steps becomes relevant when the LOD is used as described in the 
next section. 
5.4.2. Scalability 
The computation scales to very large areas when using a level 
of detail approach as described in Section 4.1 
. For the scene in 
Fig. 3 
, the low level of detail (green) spans over 166 × 118 cells 
(53.56 × 38.26 km). Updating the grid took 0.2 ms on average. 
The high level of detail (red) spans over 166 × 118 cells (6.695 ×
4.7825 km). The average time to update the high LOD when the 
camera remains constant was 0.19ms. When the camera moves, 
some cells of the high level of detail need to be recalculated 
from the beginning of the simulation, as they have never been 


B. Neukom et al. 
/ 
Computers & Graphics 71 (2018) 14–22 
21 
Fig. 
6. Runtime 
for 
each 
iteration 
of 
the 
simulation 
with 
different 
step 
sizes 
(hours) 
per iteration. A step size of 1 means computing 1 hour and a step size of 10 
0 
0 
means computing 10 
0 
0 hours in one iteration. Computing larger time steps (up to 
10 
0 
0 
hours 
if 
in 
mid-season) 
becomes 
necessary 
for 
the 
high 
LOD 
when 
the 
camera 
is moving and new cells have to be computed up until the current time step. 
calculated. In the worst case (when the camera moves very fast) 
this results in recalculating all cells. After a time-period of two 
months (1460 time steps) this resulted in an average 14.5 ms up- 
date time in our test scene, which is still considered interactive. 
Recalculating all cells is the worst case. When moving the camera 
slower, the cells that remain inside the high LOD only need to cal- 
culate 1 time-step. Without the described LOD strategy, the same 
scene required on average 18.9ms to update one time-step. 
6. Conclusion and future work 
We have shown how to implement a snow cover approximation 
with convincing results. The computation runs in real-time on the 
GPU and uses a degree-day approach. We run the computations 
with an hourly time step and use solar radiation approximations to 
compute snowmelt. To redistribute snow, an approximation based 
on terrain curvature is used. The performance of our computation 
is within interactive framerates even for large time frames ( 
> 
10 
0 
0 
hours). The results compared with real photographs show that the 
approximation provides visually accurate results. The snow line re- 
mains accurate even for late winter. 
Improvements for the snow cover approximation could be made 
by adding a wind simulation. The interpolation scheme we cur- 
rently use does not account for large scale snow redistribution ef- 
fects caused by wind. But this would also add the need for accurate 
wind input data and drastically reduce the performance, as large- 
scale wind simulations such as those described in [40] still lack 
in performance. The snowmelt computation could be improved by 
not only calculating the energy index based on the slope and as- 
pect of the cell, but also include shadowing effects from the neigh- 
boring terrain. Further we could modify the calculation grid by us- 
ing a dynamic tree structure to create larger grid cells where the 
terrain does not change much and therefore save memory and pos- 
sibly gain performance. This would also remove the need to tweak 
the grid size parameter by hand at the beginning of the computa- 
tion. 
Another level of detail could be added when the whole earth’s 
snow cover should be approximated. This level of detail could use 
crude approximations of snow lines for a given longitude and lat- 
itude without considering rainfall data and only for closer views 
our described approximation could calculate the snow cover with 
ﬁner detail. 
Additionally, if suﬃcient data were available our approximation 
could be tested by not only comparing it visually to photographs 
but to real snow height data as well. Right now, we are mostly 
concerned with the visual accuracy but if our approximation were 
to include a wind simulation for large scale snow redistribution ef- 
fects comparing the results to measured data would be beneﬁcial. 
Finally, visualization improvements could be made by including 
falling snow, such as suggested by Langer et al. [41] 
, or dynamically 
moving snow masses as described by Stomakhin et al. [42] 
, for ex- 
ample to render effects caused by avalanches or plowing streets. 
Adding foliage, trees or other 3D models at appropriate places such 
as described by Amara et al. [43] would be another enhancement. 
They use GIS land cover data to render large amounts of trees in 
real-time. If no land cover data is available the aerial imagery could 
be classiﬁed in a pre-processing step as described by Huang et al. 
[44] 
. They used support vector machines to accurately predict land 
covers from aerial imagery. 
Acknowledgements 
Thanks to all the reviewers who have helped with their com- 
ments continually improve this paper. We also thank Taisha Waeny 
for proofreading the paper. 
References 
[1] Hoppe 
H 
. 
Smooth 
view-dependent 
level-of-detail 
control 
and 
its 
application 
to 
terrain 
rendering. 
In: 
Proceedings 
of 
the 
visualization’98.. 
IEEE; 
1998. 
p. 
35–42 
. 
[2] Losasso F 
, Hoppe H 
. Geometry clipmaps: terrain rendering using nested regu- 
lar 
grids. 
In: 
Proceedings 
of 
the 
ACM 
transactions 
on 
graphics 
(TOG), 
23. 
ACM; 
2004. p. 769–76 
. 
[3] Asirvatham 
A 
, 
Hoppe 
H 
. 
Terrain 
rendering 
using 
gpu-based 
geometry 
clipmaps. 
GPU Gems 2005;2(2):27–46 
. 
[4] Premože S 
, Thompson WB 
, Shirley P 
. Geospeciﬁc rendering of alpine terrain. 
In: Rendering techniques? 99. Springer; 1999. p. 107–18 
. 
[5] Foldes D 
, Benes B 
. Occlusion-based snow accumulation simulation.. In: Pro- 
ceedings of the vriphys. Citeseer; 2007. p. 35–41 
. 
[6] Fearing P 
. Computer modelling of fallen snow. In: Proceedings of the 27th 
annual conference on Computer graphics and interactive techniques. ACM 
Press/Addison-Wesley Publishing Co.; 20 
0 
0. p. 37–46 
. 
[7] Haglund H 
, Andersson M 
, Hast A 
. Snow accumulation in real-time. In: Pro- 
ceedings of the SIGRAD, 2002; 2002. p. 11–15 
. 
[8] Feldman BE 
, O’Brien JF 
. Modeling the accumulation of wind-driven snow. In: 
Proceedings 
of 
the 
ACM 
SIGGRAPH 
2002 
conference 
abstracts 
and 
applications. 
ACM; 2002 218-218 
. 
[9] Ohlsson 
P 
, 
Seipel 
S 
. 
Real-time 
rendering 
of 
accumulated 
snow. 
In: 
Proceedings 
of the Sigrad Conference; 2004. p. 25–32 
. 
[10] Moeslund 
TB 
, 
Madsen 
CB 
, 
Aagaard 
M 
, 
Lerche 
D 
. 
Modeling 
falling 
and 
accumu- 
lating snow. In: Proceedings of the second international conference on vision, 
video and GraphicGraphics. Citeseer; 2005 
. 
[11] Wang C 
, Wang Z 
, Xia T 
, Peng Q 
. Real-time snowing simulation. Vis Comput 
2006;22(5):315–23 
. 
[12] Saltvik I 
, Elster AC 
, Nagel HR 
. Parallel methods for real-time visualization of 
snow. In: Applied parallel computing. state of the art in scientiﬁc computing. 
Springer; 2007. p. 218–27 
. 
[13] Hinks T 
, Museth K 
. Wind-driven snow buildup using a level set approach. In: 
Proceedings of the eurographics Ireland workshop series, 9; 2009. p. 19–26 
. 
[14] Festenberg 
Nv 
, 
Gumhold 
S 
. 
A 
geometric 
algorithm 
for 
snow 
distribution 
in 
vir- 
tual 
scenes. 
In: 
Proceedings 
of 
the 
eurographics 
workshop 
on 
natural 
phenom- 
ena. The Eurographics Association; 2009. p. 15–25 
. 
[15] Reynolds DT 
, Laycock SD 
, Day A 
. Real-time accumulation of occlusion-based 
snow. Vis. Comput. 2015;31(5):689–700 
. 
[16] Blöschl G 
, Kirnbauer R 
, Gutknecht D 
. Distributed snowmelt simulations in an 
alpine catchment: 1. model evaluation on the basis of snow cover patterns. 
Water Resour. Res. 1991;27(12):3171–9 
. 
[17] Swift 
LW 
. 
Algorithm 
for 
solar 
radiation 
on 
mountain 
slopes. 
Water 
Resour. 
Res. 
1976;12(1):108–12 
. 
[18] Onoue K 
, Nishita T 
. An interactive deformation system for granular material. 
In: Proceedings of the computer graphics forum, 24. Wiley Online Library; 
2005. p. 51–60 
. 
[19] Fedkiw R 
, Stam J 
, Jensen HW 
. Visual simulation of smoke. In: Proceedings of 
the 28th annual conference on computer graphics and interactive techniques. 
ACM; 2001. p. 15–22 
. 
[20] Muraoka K 
, Chiba N 
. Visual simulation 
of 
snowfall, 
snow cover and snowmelt. 
In: Proceedings of the seventh international conference on parallel and dis- 
tributed systems: workshops. IEEE; 20 
0 
0. p. 187–94 
. 
[21] Barringer J 
. A variable lapse rate snowline model for the remarkables, central 
Otago, New zealand. J Hydrol(NZ) 1989;28(1):32–46 
. 


22 
B. Neukom et al. 
/ 
Computers & Graphics 71 (2018) 14–22 
[22] Rolland C 
. Spatial and seasonal variations of air temperature lapse rates in 
alpine regions. J Clim 2003;16(7):1032–46 
. 
[23] Rango A 
, Martinec J 
. Revisiting the degree-day method for snowmelt compu- 
tations1. JAWRA J Am Water Resour Assoc 1995;31(4):657–69 
. 
[24] Liston GE 
. Local advection of momentum, heat, and moisture during the melt 
of patchy snow covers. J Appl Meteorol 1995;34(7):1705–15 
. 
[25] Liston GE 
, Elder K 
. A distributed snow-evolution modeling system (snow- 
model). J Hydrometeorol 2006;7(6):1259–76 
. 
[26] Hock R 
. A distributed temperature-index ice-and snowmelt model including 
potential direct solar radiation. J Glaciol 1999;45(149):101–11 
. 
[27] Monteith 
J 
. 
Light 
distribution 
and 
photosynthesis 
in 
ﬁeld 
crops. 
Annals 
Botany 
1965;29(1):17–37 
. 
[28] Eggleston K.O., Israelsen E.K., Riley J.P. Hybrid computer simulation of the ac- 
cumulation and melt processes in a snowpack 1971 Reports. Paper 501. 
[29] Maréchal N 
, Guérin E 
, Galin E 
, Mérillou S 
, Mérillou N 
. Heat transfer simula- 
tion for modeling realistic winter sceneries. In: Proceedings of the computer 
graphics forum, 29. Wiley Online Library; 2010. p. 449–58 
. 
[30] Zevenbergen LW 
, Thorne CR 
. Quantitative analysis of land surface topography. 
Earth Surf Process Landf 1987;12(1):47–56 
. 
[31] Trenholme D 
, Smith SP 
. Computer game engines for developing ﬁrst-person 
virtual environments. Virtual Real 2008;12(3):181–7 
. 
[32] Trabant D 
, Armstrong R 
, McClung D 
. Snow avalanches. In: Proceedings of the 
cold regions hydrology and hydraulics. ASCE; 1990. p. 147–76 
. 
[33] Cook 
RL 
. 
Shade 
trees. 
In: 
Proceedings 
of 
the 
ACM 
Siggraph 
computer 
graphics, 
18(3); 1984. p. 223–31 
. 
[34] Barré-Brisebois C 
. Deformable snow rendering in batman?: Arkham origins. 
GDC; 2014 
. 
[35] Yanyun C 
, Sun H 
, Hui L 
, Wu E 
. Modelling and rendering of snowy natu- 
ral scenery using multi-mapping techniques. Comput Anim Virtual Worlds 
2003;14(1):21–30 
. 
[36] Federal Oﬃce of Topography. swisstopo Onlineshop. 2016. https://shop. 
swisstopo.admin.ch/ 
; [Online; accessed 28-October-2016]. 
[37] Adam S 
, Pietroniro A 
, Brugman MM 
. Glacier snow line mapping using ers-1 
sar imagery. Remote Sens Environ 1997;61(1):46–54 
. 
[38] Zermatt Bergbahnen A.G.. Cam-Bild Aroleid. http://www.matterhornparadise. 
ch/de/wetter/webcams 
; 2016. [Online; accessed 28-October-2016]. 
[39] OpenStreetMap. https://www.openstreetmap.org 
; 2017. [Online; accessed 28- 
March-2017]. 
[40] Schmid T.M.. Real-time snow simulation-integrating weather data and cloud 
rendering. Master’s thesis; NTNU2016. 
[41] Langer MS 
, Zhang L 
, Klein AW 
, Bhatia A 
, Pereira J 
, Rekhi D 
. A spectral-particle 
hybrid method for rendering falling snow.. Render Tech 2004;4:217–26 
. 
[42] Stomakhin 
A 
, 
Schroeder 
C 
, 
Chai 
L 
, 
Teran 
J 
, 
Selle 
A 
. 
A 
material 
point 
method 
for 
snow simulation. ACM Trans Gr (TOG) 2013;32(4):102 
. 
[43] Amara Y 
, Meunier S 
, Marsault X 
. A gpu framework for the visualization and 
on-the-ﬂy ampliﬁcation of real terrains. In: Proceedings of the international 
symposium on visual computing. Springer; 2007. p. 586–97 
. 
[44] Huang 
C 
, 
Davis 
L 
, 
Townshend 
J 
. 
An 
assessment 
of 
support 
vector 
machines 
for 
land cover classiﬁcation. Int J Rem Sens 2002;23(4):725–49 
. 


A shadow buffer technique for simulating snow-covered shapes 
Kohe Tokoi
Wakayama University 
{tokoi@sys.wakayama-u.ac.jp} 
Abstract
Displaying a natural phenomenon is effective for 
improving the reality of computer graphics. A display of 
snow especially plays an important role in expressing a 
sense of the season. However, since geometric modeling 
of the various shapes of snow by hand is very 
troublesome, it is desirable that snow coverage shapes 
be automatically generated by simulation. This paper 
proposes a high-speed modeling technique of snow 
coverage. This technique takes account of the following 
three conditions: “snowfall blocked by an object,” 
“irregular motion of falling snow,” and “drifting snow.” 
It applies the shadow buffer method to detect an object 
which blocks snowfall, calculates the influence of 
irregular motion of snow, and then determines the final 
snow-covered shape by moving the snow to a stable 
position. 
1. Introduction 
In recent years, the use of computer graphics in 
movies or video games for natural phenomena, such as 
fire, water, clouds, smoke, wind, and natural objects in a 
field, is causing concern. Since in general these are 
difficult to model realistically by hand, a they are often 
reproduced by simulation. However, reproducing a 
natural phenomenon precisely often needs much 
calculation time and memory space. Accordingly, 
various approximation and simplification techniques 
have been used to reproduce them efficiently. 
Among these, fire, wind, and snow suggest physical 
feelings like heat and cold, and they play an important 
role in a virtual space. Reproducing snow-covered 
shapes is especially effective in expressing a sense of the 
season. However, geometric modeling by hand of the 
various shapes of snow in a landscape requires much 
time and effort. Consequently, it is desirable that snow-
covered shapes be automatically obtained by simulation. 
There are many factors which determine a snow-
covered shape: the irregular motion of falling snow, 
existence of a covering object which obstructs snowfall, 
wind direction, drifting snow, melting snow, avalanche, 
compression of the snow, and viscous difference by 
snow type. 
However, it isn't suitable for interactive applications, 
such as video games, to consider all these factors. Some 
simplification or approximation is done by choosing 
factors which are necessary to obtain the desired reality 
of the snow covered shape. 
There has been research on snow-covered landscape 
simulation: research on generating the shape of melting 
snow by heat propagation simulation[5], research on 
deformation of a flexible object to model accumulated 
snow shapes[3,8], research on the rendering method of 
snow coverage using a metaball[7], and so on. There are 
also such techniques as dropping a particle which 
imitates a snowflake[6] and collision detection between 
an object and a particle launched from another surface[2]. 
Although it is possible to apply a metaball's own 
properties to reproduce crown snow, it has a gently-
sloping shape[7] and it is difficult to reproduce a 
complicated shape like a fallen snow lump or a cornice. 
The technique that generates snow shape by dropping 
particles 
which 
imitate 
snowflakes[6] 
needs 
a 
considerable number of particles as well as memory 
space and calculation time in order to raise rendering 
quality. Fearing's method[2] has achieved very high 
quality, but it has adopted a time-consuming technique 
which detects an object which obstructs the falling snow 
by launching many particles from another object surface. 
In this paper, snow coverage is expressed using 
three simple conditions: “presence of an object which 
obstructs the falling snow,” “irregular motion of falling 
snow,” and “drifting snow.”[4] This paper proposes a 
fast modeling algorithm for snow-covered shapes using a 
graphics hardware functions based on these conditions. 
This algorithm employs a shadow mapping technique 
using a Z-buffer in order to detect an obstructing object 
and reflect the result of the irregular motion of the fallen 
snow on the accumulated snow shape. Moreover, 
movement of the snow after landing is represented by 
moving the snow to a stable position according to the 
rest angle. 
By using these models, snow shapes which appear in 
various scenes can be reproduced. This model is also 
able to reproduce the shape of snow which blows into the 
space under an object. On the other hand, this model 
Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00  © 2006
Authorized licensed use limited to: BEIJING UNIVERSITY OF POST AND TELECOM. Downloaded on April 25,2024 at 05:32:27 UTC from IEEE Xplore.  Restrictions apply. 


can't represent snow on a perpendicular object, crown 
snow, a cornice, or a tree covered with snow. Each of 
them lacks a support object, and the adhesive force of 
snow must be taken into consideration to reproduce them. 
We omit this force in this research. 
2. Snow covered shape generation algorithm 
The proposed technique calculates the distribution of 
snowfall on the image which is generated by orthogonal 
projection of the scene from directly above, and then 
makes a snow-covered shape profile based on it. It is 
possible for a complicated scene to generate a snow-
covered shape profile easily, and to control the accuracy 
with the resolution of the image. Moreover, this 
technique does not need to take account the data 
structure of the scene. 
The following describes the concrete procedure. The 
model scene is expressed by the polygons here. 
2.1. Deciding possible snow coverage area 
First, the proposed technique finds the area where 
the snow can lie by gravity in order to generate snow 
coverage on surfaces in the scene. This is called the 
possible snow coverage area. Hidden surface elimination 
processing using the Z-buffer algorithm finds this area. 
Next, the polygons in the scene are grouped so that 
they do not overlap when looking at the scene from 
above. For example, although the polygons belong to 
different objects, imagine they belong to the same group 
B, in Figure 1 when they don't overlap when looking at 
the scene from overhead.  
Group A
Group B
Group C
Figure 1 Grouping of polygons 
Group A
Group B
Group C
Figure 2 possible snow-covered areas by group 
When the hidden surface elimination processing 
using the Z-buffer algorithm is complete, the orthogonal 
projection image of each group is as follows (Figure 2).  
In this way, the area which records a different value 
from the initial Z-buffer content is the possible snow 
coverage area for the group. The Z-buffer value is saved 
as the snow amount map to use for the initial snow-
covered shape. The final snow coverage shape is 
generated by snowfall accumulation on this map. 
In addition, although it is possible to group the 
polygons automatically by applying some other types of 
hidden surface elimination algorithm, it was done by 
hand in this research. 
2.2. Calculation of snow coverage probability 
distributions
Snow, however, does not reach all the possible snow 
coverage area calculated by the foregoing method, 
although it falls evenly from the sky. The quantity of 
snow which gets to the possible snow coverage area 
varies due to the presence of an obstructing object, 
fluctuation of an air current, etc. Consequently, the 
probability that snow gets to the possible snow coverage 
area is calculated as the probability distribution there. 
This is called the snow coverage probability distribution.  
2.2.1. 
Finding 
an 
obstructing 
object 
The 
fundamental idea used for the calculation of snow 
coverage probability distributions is shadow processing. 
That is, the direction of the snowfall is treated as the 
direction of incident light. Then, let the shadow area 
decided by shadow processing be the area where snow 
does not come because of obstruction by other objects 
(Figure 3). 
Shadow
Shadow
Shadow
Snowfall
direction
Blocking
object
Figure 3 Obstruction estimation by shadowing 
1
1
0
0
1
1
1
1
1
1
0
0
1
1
1
1
1
0
1
1
1
1
1
0.67
0
0.67
1
1
Snow
coverage
Snow
coverage
Probability of snow coverage
Composite
Object
Figure 4 Arrangement of probability of snow 
coverage 
2.2.2. Consideration of irregular motion of falling 
snow The motion of falling snow is not linear and 
becomes irregular under the influence of air currents etc. 
Consequently, snow may appear in the shadow area 
decided by the foregoing process. In order to reproduce 
Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00  © 2006
Authorized licensed use limited to: BEIJING UNIVERSITY OF POST AND TELECOM. Downloaded on April 25,2024 at 05:32:27 UTC from IEEE Xplore.  Restrictions apply. 


this situation, multiple shadow areas using different 
directions of snowfall are generated and then composited 
(Figure 4). 
Shifting due to snowfall direction is determined by 
the two-dimensional distribution whose average value is 
equal to the main snowfall direction. The result is gently-
sloped snow coverage probability near the boundary of 
the shadow of the object. 
(a) Use the Z buffer algorithm with many snowfall directions
(b) The contents of each Z buffer
(c) Compare possible snow coverage area and each Z buffer
Possible snow
coverage area of
Group B
Probable
snow coverage
(d) Accumulate exposed portion of each snow coverage area
exposed
portion
exposed portion
exposed
portion
Figure 5 Calculation of the snow coverage 
probability using the shadow map 
2.2.3. Application of shadow mapping The 
possible snow coverage area which is used as the basis of 
snow coverage probability computation is not a plane, 
and the obstructing object also has its own possible snow 
coverage area. For this reason, the procedure of actually 
computing snow coverage probability becomes more 
complicated. The shadow mapping method is used for 
this. This processing, performed in Figure 1, is illustrated 
in Figure 5.  
First, hidden surface elimination processing for the 
whole scene for various snowfall directions is performed 
(Figure 5 (a)), and the Z-buffer contents are obtained 
(Figure 5 (b)).  
Second, each snow amount map of the possible 
snow coverage areas is adjusted for the point of view, 
and the exposed portions are decided by comparison 
between each snow amount map and Z-buffer. The case 
where Group B of Figure 1 is compared with its Z-buffer 
is shown in Figure 5 (c).  
Finally, this processing is performed for multiple 
snowfall directions, and the exposed portions are joined 
(Figure 5 (d)). The probable snow coverage distribution 
for a possible snow coverage area is obtained in this way. 
2.3. Snowfall processing 
Based on this probable snow coverage distribution 
(which is obtained by the above method), the amount of 
fallen snow at each point on the possible snow coverage 
area is determined.  
When the snow coverage probability of a certain 
point a is set as Pa and the amount of fallen snow at a 
certain time t is set at M(t), the amount of snow at the 
point Sa(T) where T is the elapsed time from the start 
snowfall is calculated by the following formula: 
 
 
³
 
T
a
a
dt
t
M
P
T
S
0
 
(1) 
Based on this formula, the increment of the amount 
of snow in a fixed time interval is accumulated on the 
snow amount maps of all possible snow coverage areas. 
In this case, since the height of the snow changes with 
the snow accumulation, Pa also changes with time, but 
here it is treated as constant. 
2.4. Moving snow after its landing 
By increasing of the amount of snow at each point 
on the possible snow coverage area, the snow-covered 
shape will become unnatural when the difference of the 
amount of snow between a certain point and its 
neighborhood exceeds a certain limit. In this case, the 
amount of snow at the point and its neighborhood are 
made smooth. In this research, this processing is 
performed by moving the increased snow to a more 
stable 
position 
using 
the 
technique 
of 
particle 
deposition[1]. 
2.4.1. Stabilizing In stabilizing, the snow is moved 
to a more stable position by relating the amount of snow 
at the target point and four points which adjoin it (Figure 
6).  
1/2
1/2
1/3
1/3
1/3
1/4
1/4
1/4
1/4
(a)
(b)
(d)
(e)
(c)
Figure 6 The method of moving snow after its 
landing
Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00  © 2006
Authorized licensed use limited to: BEIJING UNIVERSITY OF POST AND TELECOM. Downloaded on April 25,2024 at 05:32:27 UTC from IEEE Xplore.  Restrictions apply. 


The snow does not move if all slopes decided by the 
amount of snow at a target point and the amount of snow 
at each of the four adjoining points does not exceed the 
rest angle (Figure 6 (a)).  
If any of these slopes exceeds the rest angle, snow is 
moved to the lowest point (Figure 6 (b)).  
If two or more of these slopes exceed the rest angle, 
the amount of fallen snow is equally distributed to these 
points (Figure 6 (c) ~ (e)). 
2.4.2. Fall processing of the landed snow When 
the position where the snow drifted by stabilizing is 
outside the possible snow coverage area, fall processing 
of a lump of snow is performed (Figure 7).  
This is the processing which moves snow from the 
snow amount map of one area to another snow amount 
map. The snow amount map of the highest possible snow 
coverage area which is under the snow landing position 
is chosen as the destination. 
Group A
Group A
Group B
Group B
Group C
Group C
Group A
Group B
Group C
Top view of the snow amount map
Snow fall position
Snow fall position
Snow fall position
Figure 7 Fall processing of the landed snow 
2.5. Creation of snow coverage shape data 
In this way, from all the snow amount maps, data of 
the snow coverage shape is converted to polygons. The 
picture of the snow-covered scene can be generated by 
the rendering of the scene and these polygons together. 
3. Experiments and evaluations 
Implementing this technique generated some real-
time animations that produced snowfall increases to the 
scenes. Moreover, we also tested the ray casting based 
method and compared it with this technique. 
3.1. Experimental equipment
The specifications of the computer used for this 
experiment were as follows: INTEL Pentium III 
800MHz 
CPU, 
384MB 
main 
memory, 
nVIDIA 
GeForce2 MX video controller, 32MB video memory 
and used Microsoft Windows XP Home Edition. The 
experimental software was developed using Microsoft 
Visual C++ 6.0, OpenGL version 1.1, and GLUT version 
3.7. 
3.2. Real-time animation displays 
The resulting generation of snow coverage in a 
scene containing a table-like object is shown in Figure 8. 
This animation included 646 frames between the upper 
left frame and the lower right frame, and took 191.0 
seconds (3.38 frames/second) with a display resolution 
of 300 by 300 pixels. It also included two snow amount 
maps with resolutions of 100 by 100 pixels, a rest angle 
of 60 degrees, and fog effect. In this scene, the snow-
covered shape was created on the table by stabilizing and 
the snow coverage under the table was created by fall 
processing of a lump of snow. 
Figure 8 Snow coverage under an object 
The proposed technique was used to render a scene 
which composed of primitive objects included in the 
OpenGL Utility Toolkit (GLUT). The result is shown in 
Figure 9. In this case, since it was difficult to divide the 
polygons which constitute one primitive object into 
multiple groups, grouping of the polygons was 
performed per primitive object. Therefore, since the 
snow amount map is created per object, the snow-
covered shape over the self-covered portion of the object 
cannot be determined. As such, the snow-covered shape 
was obtained except for the self-covered portion without 
knowing the internal structure of the object. This 
animation included 1318 frames between the upper left 
frame and the lower right frame, and took 185.9 seconds 
(7.09 frames/second) with a display resolution of 300 by 
300 pixels. It also included five snow amount maps with 
resolutions of 128 by 128 pixels, a rest angle is 45 degree, 
with no falling snow display. 
Figure 10 shows the result when the proposed 
technique applied to a scene described by Data Exchange 
Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00  © 2006
Authorized licensed use limited to: BEIJING UNIVERSITY OF POST AND TELECOM. Downloaded on April 25,2024 at 05:32:27 UTC from IEEE Xplore.  Restrictions apply. 


Format (DXF). This scene included 12,646 triangles 
excluding the snow coverage shape data. It was possible 
to generate the snow coverage shape easily from such a 
complicated scene by the proposed technique. This 
animation included 96 frames between the upper left 
frame and the lower right frame, and took 30.9 seconds 
(3.11 frames/second) with a display resolution of 300 by 
300 pixels. Two snow amount maps with resolutions of 
200 by 200 pixels, rest angle of 45 degree, and fog effect 
were also included. 
Figure 9 Snow coverage on the GLUT primitives 
Figure 10 Snow covered scene using DXF 
objects
3.3. Comparison with the conventional technique  
Next, the technique of computing snow coverage 
probability using the ray casting based method was 
compared with proposed technique for calculation time 
using the same data.  
The technique casts rays upward from vertexes in 
the scene in order to find an object which interrupts the 
snowfall. In that case, multiple rays are cast with jitter 
from a vertex, and the snow coverage probability is 
calculated at the vertex. However, comparison between 
the two techniques is not equal, because ray casting 
based method calculates snow coverage probability per 
vertex and proposed technique calculates it for many 
sample points on the object surface. 
Figure 11 The case of using ray casting 
Figure 12 The case of using proposed method 
Scenes (a) and (b) of Figures 11 and 12 consist of 
1600 triangles and 5114 triangles, respectively. Table 1 
shows the calculation time of snow coverage probability 
distribution using the proposed technique and ray casting 
based method. The proposed technique can compute 
snow coverage probability distributions at very high 
speed compared with the ray casting based method. 
In general, the calculation time is proportional to the 
square of the number of polygons in the ray casting 
method without any acceleration technique. The result of 
Table 1 supports it. 
On the other hand, by the proposed technique, 
increase in calculation time in relation to increase in the 
number of polygons in a scene is low. This is because the 
time for data transmission from Z-buffer to CPU and the 
Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00  © 2006
Authorized licensed use limited to: BEIJING UNIVERSITY OF POST AND TELECOM. Downloaded on April 25,2024 at 05:32:27 UTC from IEEE Xplore.  Restrictions apply. 


processing time which composition of multiple Z-buffer 
contents takes is great in comparison to the calculation 
time for hidden surface elimination processing which 
depends on the number of polygons. The hidden surface 
elimination procedure is performed very fast with the Z-
buffer hardware. 
Table 1 Computation time of the snow coverage 
probability 
Ray 
casting
based
method
Scene
Number of
Processing
rays
time (sec.)
3
4.917
Fig. 10(a)
5
7.841
10
15.062
Fig. 10(b)
5
158.347
Proposed
method
Scene
Number of
Processing
projections
time (sec.)
Fig. 11(a)
5
0.391
Fig. 11(b)
5
0.451
In addition, there is no relation between the number 
of times of projection by the proposed technique, and the 
number of rays of in the ray casting based method, 
because the proposed technique composites Z-buffer 
contents obtained by the projection of a scene in multiple 
directions, but this ray casting sends rays in random 
directions from every vertex. Moreover, in the picture 
generated by the ray casting based method shown in 
Figure 11, the boundary of snow coverage is fixed. This 
is because only the polygons which face upward are 
treated as the place for snow in the beginning of 
processing.  
4. Discussion 
This section evaluates the two techniques based on 
the results shown in the previous section. 
4.1. Features of the proposed technique 
(1) The process of determining snow coverage area 
and snow coverage probability increases with the 
number of target object groups. 
(2) Processing time is not dependent on the number of 
polygons of the target object.  
(3) Since snow coverage probability determines 
whether the amount of fallen snow increases or 
not, change of the snow-covered shape with time 
can be reproduced. 
(4) Fine objects, such as leaves, are too small for the 
resolution of the snow amount maps, and difficult 
to depict.  
In the above case, with objects such as trees, it is 
better to use one snow amount map for the whole tree, 
rather than use independent snow amount maps for every 
leaf. However, such grouping of polygons is not 
automated yet. 
The quality or the accuracy of the snow-covered 
shape is controllable by the resolution of the projection 
plane at the time of deciding the snow coverage area. 
Moreover, the quality of the snow-covered shape can be 
improved by increasing the number of projection planes 
used for calculation of snow coverage probability.  
Also, after stabilizing is carried out and the snow-
covered shape is determined, the shape is controllable by 
the rest angle and unnatural shapes are avoidable. 
4.2. Features of the ray casting based technique 
(1) Calculation time is nearly proportional to the 
number of rays. 
(2) If the number of polygons increases, calculation 
time increases greatly. This is because the 
collision detection time takes the square of the 
number of polygons.  
(3) Since this technique determines the polygons 
which will be covered by snow in the first stage of 
processing, the outline of a snow-covered shape is 
always fixed.  
Although this technique can improve the quality of a 
snow-covered shape by increasing the number of rays, 
processing time increases proportional to the number of 
rays.  Moreover, although it is also possible to raise the 
quality of the snow-covered shape by subdividing a 
polygon, calculation time increases very much because 
the number of collision detection processing increases 
with a square of the number of polygons. 
Although the amount of processing can be decreased 
by optimal subdivision, the user who subdivides needs to 
understand the algorithm and it is not easy work.  
Moreover, this technique may generate unnatural 
shapes when the amount of fallen snow becomes large, 
since no there’s no stabilizing feature. 
5. Future work
This section discusses other subjects related to  high-
speed modeling of snow-covered shapes. 
5.1. Improvement of the speed of finding a 
movement place of the snow in a fall processing 
of a lump of snow 
The present technique searches for the object at the 
fall point of a lump of snow among all objects in the 
scene when the lump of snow moves out of the possible 
snow coverage area by the stabilization processing 
(Figure 7). For this reason, the time which this search 
takes cannot be disregarded when the complexity of the 
scene increases. This can be accelerated with the 
technique described below.  
In order to accelerate deciding the place to which the 
snow can move, a picture with hidden surface 
elimination which looks at the whole scene from above is 
first generated by an orthogonal projection.  
The identifier of the snow amount map of the group 
to which the polygon belongs is stored in the value of 
each pixel of this picture. 
If the snow movement place is not in a possible 
snow coverage area, the place where the lump of snow 
Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00  © 2006
Authorized licensed use limited to: BEIJING UNIVERSITY OF POST AND TELECOM. Downloaded on April 25,2024 at 05:32:27 UTC from IEEE Xplore.  Restrictions apply. 


will be dropped is decided by reference to this picture. 
And if the height of the place is higher than the original 
snow position, another possible snow coverage area 
where a lump of snow can be dropped is searched among 
other groups. 
5.2. Application of the functions of graphics 
hardware
The proposed technique determines a snow-covered 
shape by snow coverage probability distributions and 
snow amount maps. 
Although the accumulation buffer is used to 
calculate snow coverage probability distributions in the 
present case, operation and dynamic processing of a 
texture can be done using the function of the latest 
graphics hardware. For example, it is considered that the 
stabilizing can be implemented using a fragment shader. 
Also, displacement mapping or the function of a vertex 
shader can be used for the generation of a snow-covered 
shape. 
Conclusions
In this paper, a high-speed modeling for snow-
covered shapes which can be applied to arbitrary scenes 
was proposed. It reduces the snow coverage phenomenon 
to three simple conditions: 1) presence of an object 
which obstructs the falling snow, 2) irregular motion of 
falling snow, and 3) drifting snow, in order to generate a 
snow-covered shape simply and rapidly. This technique 
applies the Z-buffer algorithm to decide the snow-
covered shape from these models. It accelerates decided 
the possible snow coverage area in a scene and decisions 
about the object which obstructs the falling snow using 
the function of graphics hardware. In addition, the 
shadow map method is applied to finding obstructing 
objects.
Moreover, we have tested the ray casting based 
method and compared our technique with it. We have 
verified the usefulness of our technique by this. We have 
also shown that the quality of the picture generated is 
controllable by the resolution of a projection plane, 
without modifying the original scene.  
Thus, the proposed technique has achieved high 
processing speed, when compared with the ray casting 
based method, because its processing seldom depends on 
the number of polygons. Therefore, it can be applied to 
applications like virtual reality and video games which 
need high-speed processing. 
Acknowledgements 
This research was done with the cooperation of Mr. 
Hironori Moriki. Thank you to the Dr. Tadahiro 
Kitahashi for his many suggestions and comments. 
Special thanks to Prof. Leonard Lundmark for his 
suggestions and comments on how to make this paper 
better. 
References 
[1] 
Mark DeLoura, editor. GAME PROGRAMMING GEMS.
Charles River Media, 2000. 
[2] 
Paul Fearing. Computer modeling of fallen snow. In 
SIGGRAPH 2000 Conference Proceedings, pages 37-46. 
ACM, 2000. 
[3] 
M. Matsumiya, H. Takemura, and N. Yokoya. A virtual 
clay modeling system for 3d free-form design using 
implicit surfaces. IPSJ Journal, 42(5):1151-1160, 2001. 
[4] 
H. Moriki and K. Tokoi. Real - time simulation of the 
fallen snow with consideration to the irregular motion of 
the snow. IPSJ Transaction on Graphics and CAD,
2002(77):109-114, 2002. 
[5] 
K. Muraoka and N. Chiba. A visual simulation of 
melting snow. IIEEJ Journal, 27(4):327-338, 1998. 
[6] 
K. Muraoka, N. Chiba, and I Ohtahara. Snowfall model 
for simulating close view of snowy landscape. The
Journal of ITEJ, 49(10):1252-258, 1995. 
[7] 
T. Nisita, H. Iwasaki, Y. Dobasi, and E.Nakamae. A 
modelling and rendering method for snow by using 
metaballs. EUROGRAPHICS, 16(3):357-64, 1997. 
[8] 
Y. Oda, K. Muraoka, and N. Chiba. Particle-based visual 
simulation of virtual clay. IPSJ Journal, 42(5):1142-150, 
2001.
Proceedings of the International Conference on Computer Graphics, Imaging and Visualisation (CGIV'06)
0-7695-2606-3/06 $20.00  © 2006
Authorized licensed use limited to: BEIJING UNIVERSITY OF POST AND TELECOM. Downloaded on April 25,2024 at 05:32:27 UTC from IEEE Xplore.  Restrictions apply.